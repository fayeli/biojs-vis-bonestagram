require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/fayelisifi/Documents/biojs-vis-bonestagram/lib/bonestagramVisCore.js":[function(require,module,exports){
var bonestagramVisCore;
module.exports = bonestagramVisCore = 
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1),__webpack_require__(13), __webpack_require__(14), __webpack_require__(15), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function(clm, pModel, face_deformer, utils, jsfeat){
		// Private
		var vid;
		var width;
		var height;
		var facePos;
		var handPos;
		var bonesCoords; 
		bonesCoords = [[121.92799191984679,184.19216240419755],[118.74113263254269,253.7017373484083],[128.07732840700828,314.0651648786312],[145.50341586402052,377.3404382903117],[175.0470179047746,428.3720278198884],[218.26268310246033,467.2344402538887],[271.42588166495466,485.128073946532],[316.6864139765614,486.50538113163066],[375.1889691089136,482.48530971536445],[425.71357990120225,454.4214900408549],[467.1292936657478,419.537754329594],[493.2308725208873,370.6466670145585],[507.3945907183312,305.3965374123],[514.1098885852615,238.51000761747102],[507.2009944162471,174.7364492942625],[465.59705810723074,136.75665747531139],[432.10874975324265,125],[384.15174446143584,125],[351.54488594535763,135.22963355336668],[162.16177451030518,144.72103952617107],[194.70376235949394,126],[241,130],[277.5198647210173,137.82992220884094],[192.5627380181407,182.35373455399292],[225.1658086004223,166.85817167285668],[262.9021389237093,184.72604899079232],[224.82421319031323,193.62679469584918],[224.9386274222809,179.73191446260716],[443.75218061508883,177.1556294105885],[407.36102478935464,162.1785032964798],[367.3426762945685,181.37362678808685],[405.2498567443763,188.75927101523848],[404.863153412407,173.65270066194788],[314,170],[277.2539320006613,252.0592473714927],[272.790607031229,295.0832945003201],[285.64778558874696,305.54255347445314],[311.4772090972725,302.7859653833357],[345.4959193923387,303.6561959465791],[354.27275089177823,294.043842539653],[344.1140334647449,250.14961061471956],[317,224],[297.770695143374,289.6331974142146],[327.24114846328195,286.942330984987],[246.8532880314441,383.38004806995957],[275.1557077756945,372.35352520595814],[295.9902196911147,369.59821534914704],[319.11457426149127,376.0358352022737],[342.3055779254553,369.5427982113969],[363.49269601972713,366.1538257295358],[387.63652105652415,379.4911974180641],[375.0778975047938,391.4413420753004],[352.32935954043757,405.19247889714825],[320.19499419206926,411.930992226806],[288.9192573286629,407.35752671668797],[265.61253113280924,398.527019223827],[283.6817714614754,393.82667526139215],[317.16223074694074,396.86502934549657],[360.1212544588326,387.7487964985724],[348.7270998810554,384.15603335898066],[319.91210334135167,389.2901736762333],[291.7920218316411,388.2798825278876],[311.66814785515174,277.11007275979364],[206.36606604411398,171.6086547538323],[247.5375468161923,170.29657636660522],[246.36866333618227,191.67729410789994],[205.19888043799355,189.99033691329964],[429.0603263358775,166.1691180598579],[386.8504393293843,166.2774220754911],[384.7938981921405,186.5701136634426],[426.9983448269614,184.45786533091854]];
		var bonesImg;
		// an instance of the CLM tracker
		var ctrack;
		// an instance of face deformer
		var fd;
		var face_overlay;
		var face_overlayCC;
		var hand_overlay;
		var hand_overlayCC;
		var gl;
		// Variables for optical flow
		var curr_img_pyr, prev_img_pyr, point_count, point_status, prev_xy, curr_xy;
		var op_win_size = 20;
		var op_max_iterations = 30;
		var op_epsilon = 0.01;
		var op_min_eigen = 0.001;

		var checkWebGL = function(){
			console.log("Checking WebGL support..");
			var webGLContext;
			var webGLTestCanvas = document.createElement('canvas');
			if (window.WebGLRenderingContext) {
				webGLContext = webGLTestCanvas.getContext('webgl') || webGLTestCanvas.getContext('experimental-webgl');
				if (!webGLContext || !webGLContext.getExtension('OES_texture_float')) {
						webGLContext = null;
					}
			}
			if (webGLContext == null) {
				console.log("There seems to be no support for WebGL with your browser. Please try again. ):");
			} else {
				console.log("Aaand.. it's good! (: ");
			}
		}
		var setupCamera = function(){
			navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
			window.URL = window.URL || window.webkitURL || window.msURL || window.mozURL;
					
			// check for camerasupport
			if (navigator.getUserMedia) {
				// set up stream			
				// chrome 19 shim
				var videoSelector = {video : true};
				if (window.navigator.appVersion.match(/Chrome\/(.*?) /)) {
					var chromeVersion = parseInt(window.navigator.appVersion.match(/Chrome\/(\d+)\./)[1], 10);
					if (chromeVersion < 20) {
						videoSelector = "video";
					}
				};
						
				navigator.getUserMedia(videoSelector, 
					function( stream ) {
						if (vid.mozCaptureStream) {
							vid.mozSrcObject = stream;
						} else {
							vid.src = (window.URL && window.URL.createObjectURL(stream)) || stream;
						}

						vid.play();
					},

					function() {
						//insertAltVideo(vid);
						console.log("There was problem fetching your webcam stream. Please check your privacy settings and try again.");
					});

			} else {
				//insertAltVideo(vid)
				alert("There seems to be no support for getUserMedia on your browser and we are unable to fetch your webcam stream. ): ");
			}					
		}

		// called when video is ready to start playing
		var vidCanPlay = function(){
			console.log("Video is ready to start playing.");
		}

		var converged = false;
		var drawFaceLoop = function(){
			facePos = ctrack.getCurrentPosition(vid);
			face_overlayCC.clearRect(0, 0, width, height);
			if (facePos) {
				if (converged){
					// draw mask
					fd.draw(facePos);
				} else {
					// draw current grid
					ctrack.draw(face_overlay);
					// check whether mask has converged
					var pn = ctrack.getConvergence();
					if (pn < 0.4) {
						converged = true;
					}
				}
			}
			requestAnimFrame(drawFaceLoop);
		}

		var drawHandLoop = function(){
			if (vid.readyState === vid.HAVE_ENOUGH_DATA) {
				hand_overlayCC.drawImage(vid, 0, 0, width, height);
				var imageData = hand_overlayCC.getImageData(0,0,width,height);
				// swap flow data
				var _pt_xy = prev_xy;
				prev_xy = curr_xy;
				curr_xy = _pt_xy;
				var _pyr = prev_img_pyr;
				prev_img_pyr = curr_img_pyr;
				curr_img_pyr = _pyr;

				// grayscale
				jsfeat.imgproc.grayscale(imageData.data, width, height, curr_img_pyr.data[0]);

				// build image pyramid
				curr_img_pyr.build(curr_img_pyr.data[0], true);

				// optical flow 
				jsfeat.optical_flow_lk.track(prev_img_pyr, curr_img_pyr, prev_xy, curr_xy, point_count, op_win_size|0, op_max_iterations|0, point_status, op_epsilon, op_min_eigen);

				// prune low points
				var n = point_count;
				var j = 0;
				for (var i = 0; i < n; i++){
					if (point_status[i] == 1){
						if (j<i){
							curr_xy[j<<1] = curr_xy[i<<1];
							curr_xy[(j<<1)+1] = curr_xy[(i<<1)+1];
						}
						// draw good points
						var x = curr_xy[j<<1];
						var y = curr_xy[(j<<1)+1];
						drawMarker(hand_overlayCC, x, y);
						j++;
					}
				}
				point_count = j;

			}

			requestAnimFrame(drawHandLoop);
		}

		function drawMarker(ctx, x, y) {
			ctx.fillStyle = "#98ff98";
	        ctx.beginPath();
	        ctx.arc(x, y, 3, 0, Math.PI*2, true);
	        ctx.closePath();
	        ctx.fill();
	    }

		function relMouseCoords(event, element) {
	        var totalOffsetX=0,totalOffsetY=0,canvasX=0,canvasY=0;
	        var currentElement = element;

	        do {
	            totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
	            totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
	        } while(currentElement = currentElement.offsetParent)

	        canvasX = event.pageX - totalOffsetX;
	        canvasY = event.pageY - totalOffsetY;

	        return {x:canvasX, y:canvasY}
	    }


		// The object return below is exposed to the public
		return {
			// Public
			init: function(options){
				if (typeof options !== "undefined") {
					vid = options.video[0];
					bonesImg = options.img[0];
				} else {
					vid = document.getElementsByClassName("bonestagram_video")[0];
					bonesImg = document.getElementsByClassName("bonestagram_img")[0];
				}
				height = vid.height;
				width = vid.width;
				gl = document.getElementsByClassName('bonestagram_gl')[0];
				face_overlay = document.getElementsByClassName("bonestagram_face_overlay")[0];
				face_overlayCC = face_overlay.getContext('2d');	
				hand_overlay = document.getElementsByClassName("bonestagram_hand_overlay")[0];
				hand_overlayCC = hand_overlay.getContext('2d');	
				checkWebGL();
				setupCamera();
				ctrack = new clm.tracker();
				ctrack.init(pModel);
				fd = new face_deformer.faceDeformer();
				fd.init(gl);
				fd.load(bonesImg, bonesCoords, pModel);

			},
			startFace: function(){
				console.log('start face');
				ctrack.start(vid);
				drawFaceLoop();
			},
			startHand: function(){
				console.log('start hand');
				curr_img_pyr = new jsfeat.pyramid_t(3);
	            prev_img_pyr = new jsfeat.pyramid_t(3);
	            curr_img_pyr.allocate(width, height, jsfeat.U8_t|jsfeat.C1_t);
	            prev_img_pyr.allocate(width, height, jsfeat.U8_t|jsfeat.C1_t);

	            console.log(curr_img_pyr);
	         	console.log(prev_img_pyr);
	            point_count = 0;
	            point_status = new Uint8Array(100);
	            prev_xy = new Float32Array(100*2);
	            curr_xy = new Float32Array(100*2);

	            // enable click to add tracking points
	            hand_overlay.addEventListener('click', function(e){
	            	var coords = relMouseCoords(e, hand_overlay);
	            	console.log(coords.x+ ' ' + coords.y);
	            	curr_xy[point_count<<1] = width - coords.x;
	            	curr_xy[(point_count<<1)+1] = coords.y;
	            	point_count++;
	            }, false);
	            
	            drawHandLoop();
			},
			screenshot: function(){
				console.log('Screenshot!');
				var screenshot_canvas = document.createElement('canvas');
				screenshot_canvas.width = width;
				screenshot_canvas.height = height;
				var screenshotCC = screenshot_canvas.getContext('2d');
				screenshotCC.translate(width/2,0);
				screenshotCC.scale(-1,1);
				screenshotCC.translate(-width/2,0)
				// Take screenshot of video
				screenshotCC.drawImage(vid, 0, 0, width, height);
				facePos = ctrack.getCurrentPosition(vid);
				if (facePos) {
					// draw mask
					fd.draw(facePos);
					// Combine with the screenshot of the face mask
					screenshotCC.drawImage(gl, 0, 0, width, height);
				}
				var dataURL = screenshot_canvas.toDataURL();
				$('.bonestagram_screenshot').attr('src', dataURL);
			},
			setBonesCoords: function(coords){
				bonesCoords = coords;
				fd.load(bonesImg, bonesCoords, pModel);		
			},
			setBonesImg: function(img){
				bonesImg = img;
				fd.load(bonesImg, bonesCoords, pModel);
			}
		}
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	//requires: ccv.js, numeric.js

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(4), __webpack_require__(5), __webpack_require__(6), __webpack_require__(7), __webpack_require__(8),__webpack_require__(9),__webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function(mosse,left_eye_filter,right_eye_filter,nose_filter,numeric,svmfilter_fft,svmfilter_webgl,jsfeat_face){
		return {
		tracker : function(params) {
			
			if (!params) params = {};
			if (params.constantVelocity === undefined) params.constantVelocity = true;
			if (params.searchWindow === undefined) params.searchWindow = 11;
			if (params.useWebGL === undefined) params.useWebGL = true;
			if (params.scoreThreshold === undefined) params.scoreThreshold = 0.5;
			if (params.stopOnConvergence === undefined) params.stopOnConvergence = false;
			if (params.weightPoints === undefined) params.weightPoints = undefined;
			if (params.sharpenResponse === undefined) params.sharpenResponse = false;
			
			var numPatches, patchSize, numParameters, patchType;
			var gaussianPD;
			var eigenVectors, eigenValues;
			var sketchCC, sketchW, sketchH, sketchCanvas;
			var candidate;
			var weights, model, biases;
			
			var sobelInit = false;
			var lbpInit = false;
			
			var currentParameters = [];
			var currentPositions = [];
			var previousParameters = [];
			var previousPositions = [];
			
			var patches = [];
			var responses = [];
			var meanShape = [];
			
			var responseMode = 'single';
			var responseList = ['raw'];
			var responseIndex = 0;
			
			/*
			It's possible to experiment with the sequence of variances used for the finding the maximum in the KDE.
			This sequence is pretty arbitrary, but was found to be okay using some manual testing.
			*/
			var varianceSeq = [10,5,1];
			//var varianceSeq = [3,1.5,0.75];
			//var varianceSeq = [6,3,0.75];
			var PDMVariance = 0.7;
			
			var relaxation = 0.1;
			
			var first = true;
			
			var convergenceLimit = 0.01;
			
			var learningRate = [];
			var stepParameter = 1.25;
			var prevCostFunc = []
			
			var searchWindow;
			var modelWidth, modelHeight;
			var halfSearchWindow, vecProbs, responsePixels;
			
			if(typeof Float64Array !== 'undefined') {
				var updatePosition = new Float64Array(2);
				var vecpos = new Float64Array(2);
			} else {
				var updatePosition = new Array(2);
				var vecpos = new Array(2);
			}
			var pw, pl, pdataLength;
			
			var facecheck_count = 0;
			
			var webglFi, svmFi, mosseCalc;

			var scoringCanvas = document.createElement('canvas');
			//document.body.appendChild(scoringCanvas);
			var scoringContext = scoringCanvas.getContext('2d');
			var msxmin, msymin, msxmax, msymax;
			var msmodelwidth, msmodelheight;
			var scoringWeights, scoringBias;
			var scoringHistory = [];
			var meanscore = 0;

			var mossef_lefteye, mossef_righteye, mossef_nose;
			var right_eye_position = [0.0,0.0];
			var left_eye_position = [0.0,0.0];
			var nose_position = [0.0,0.0];
			var lep, rep, mep;
			var runnerTimeout, runnerElement, runnerBox;
			
			var pointWeights;

			var halfPI = Math.PI/2;
			
			/*
			 *	load model data, initialize filters, etc.
			 *
			 *	@param	<Object>	pdm model object
			 */
			this.init = function(pdmmodel) {
				
				model = pdmmodel;
				
				// load from model
				patchType = model.patchModel.patchType;
				numPatches = model.patchModel.numPatches;
				patchSize = model.patchModel.patchSize[0];
				if (patchType == "MOSSE") {
					searchWindow = patchSize;
				} else {
					searchWindow = params.searchWindow;
				}
				numParameters = model.shapeModel.numEvalues;
				modelWidth = model.patchModel.canvasSize[0];
				modelHeight = model.patchModel.canvasSize[1];
				
				// set up canvas to work on
				sketchCanvas = document.createElement('canvas');
				sketchCC = sketchCanvas.getContext('2d');

				sketchW = sketchCanvas.width = modelWidth + (searchWindow-1) + patchSize-1;
				sketchH = sketchCanvas.height = modelHeight + (searchWindow-1) + patchSize-1;
				
				var mosseFilter = new mosse.mosseFilter();

				if (model.hints && mosseFilter && left_eye_filter && right_eye_filter && nose_filter) {
					//var mossef_lefteye = new mosseFilter({drawResponse : document.getElementById('overlay2')});
					mossef_lefteye = new mosse.mosseFilter();
					mossef_lefteye.load(left_eye_filter);
					//var mossef_righteye = new mosseFilter({drawResponse : document.getElementById('overlay2')});
					mossef_righteye = new mosse.mosseFilter();
					mossef_righteye.load(right_eye_filter);
					//var mossef_nose = new mosseFilter({drawResponse : document.getElementById('overlay2')});
					mossef_nose = new mosse.mosseFilter();
					mossef_nose.load(nose_filter);
				} else {
					console.log("MOSSE filters not found, using rough approximation for initialization.");
				}

				// load eigenvectors
				eigenVectors = numeric.rep([numPatches*2,numParameters],0.0);
				for (var i = 0;i < numPatches*2;i++) {
					for (var j = 0;j < numParameters;j++) {
						eigenVectors[i][j] = model.shapeModel.eigenVectors[i][j];
					}
				}
				
				// load mean shape
				for (var i = 0; i < numPatches;i++) {
					meanShape[i] = [model.shapeModel.meanShape[i][0], model.shapeModel.meanShape[i][1]];
				}

				// get max and mins, width and height of meanshape
				msxmax = msymax = 0;
				msxmin = msymin = 1000000;
				for (var i = 0;i < numPatches;i++) {
					if (meanShape[i][0] < msxmin) msxmin = meanShape[i][0];
					if (meanShape[i][1] < msymin) msymin = meanShape[i][1];
					if (meanShape[i][0] > msxmax) msxmax = meanShape[i][0];
					if (meanShape[i][1] > msymax) msymax = meanShape[i][1];
				}
				msmodelwidth = msxmax-msxmin;
				msmodelheight = msymax-msymin;
				
				// get scoringweights if they exist
				if (model.scoring) {
					scoringWeights = new Float64Array(model.scoring.coef);
					scoringBias = model.scoring.bias;
					scoringCanvas.width = model.scoring.size[0];
					scoringCanvas.height = model.scoring.size[1];
				}
				
				// load eigenvalues
				eigenValues = model.shapeModel.eigenValues;
				
				weights = model.patchModel.weights;
				biases = model.patchModel.bias;
				
				// precalculate gaussianPriorDiagonal
				gaussianPD = numeric.rep([numParameters+4, numParameters+4],0);
				// set values and append manual inverse
				for (var i = 0;i < numParameters;i++) {
					if (model.shapeModel.nonRegularizedVectors.indexOf(i) >= 0) {
						gaussianPD[i+4][i+4] = 1/10000000;
					} else {
						gaussianPD[i+4][i+4] = 1/eigenValues[i];
					}
				}
				
				for (var i = 0;i < numParameters+4;i++) {
					currentParameters[i] = 0;
				}
				
				if (patchType == "SVM") {
					var webGLContext;
					var webGLTestCanvas = document.createElement('canvas');
					if (window.WebGLRenderingContext) {
		
						webGLContext = webGLTestCanvas.getContext('webgl') || webGLTestCanvas.getContext('experimental-webgl');
						if (!webGLContext || !webGLContext.getExtension('OES_texture_float')) {
							webGLContext = null;
						}
					} 
					var webglFilter = new svmfilter_webgl.webglFilter();
					var svmFilter = new svmfilter_fft.svmFilter();
					if (webGLContext && params.useWebGL && (typeof(webglFilter) !== "undefined")) {
						webglFi = new svmfilter_webgl.webglFilter();
						try {
							webglFi.init(weights, biases, numPatches, searchWindow+patchSize-1, searchWindow+patchSize-1, patchSize, patchSize);
							if ('lbp' in weights) lbpInit = true;
							if ('sobel' in weights) sobelInit = true;
						} 
						catch(err) {
							alert("There was a problem setting up webGL programs, falling back to slightly slower javascript version. :(");
							webglFi = undefined;
							svmFi = new svmfilter_fft.svmFilter();
							svmFi.init(weights['raw'], biases['raw'], numPatches, patchSize, searchWindow);
						}
					} else if (typeof(svmFilter) !== "undefined") {
						// use fft convolution if no webGL is available
						svmFi = new svmfilter_fft.svmFilter();
						svmFi.init(weights['raw'], biases['raw'], numPatches, patchSize, searchWindow);
					} else {
						throw "Could not initiate filters, please make sure that svmfilter.js or svmfilter_conv_js.js is loaded."
					}
				} else if (patchType == "MOSSE") {
					mosseCalc = new mosseFilterResponses();
					mosseCalc.init(weights, numPatches, patchSize, patchSize);
				}
				
				if (patchType == "SVM") {
					pw = pl = patchSize+searchWindow-1;
				} else {
					pw = pl = searchWindow;
				}
				pdataLength = pw*pl;
				halfSearchWindow = (searchWindow-1)/2;
				responsePixels = searchWindow*searchWindow;
				if(typeof Float64Array !== 'undefined') {
					vecProbs = new Float64Array(responsePixels);
					for (var i = 0;i < numPatches;i++) {
						patches[i] = new Float64Array(pdataLength);
					}
				} else {
					vecProbs = new Array(responsePixels);
					for (var i = 0;i < numPatches;i++) {
						patches[i] = new Array(pdataLength);
					}
				}
				
				for (var i = 0;i < numPatches;i++) {
					learningRate[i] = 1.0;
					prevCostFunc[i] = 0.0;
				}

				if (params.weightPoints) {
					// weighting of points 
					pointWeights = [];
					for (var i = 0;i < numPatches;i++) {
						if (i in params.weightPoints) {
							pointWeights[(i*2)] = params.weightPoints[i];
							pointWeights[(i*2)+1] = params.weightPoints[i];
						} else {
							pointWeights[(i*2)] = 1;
							pointWeights[(i*2)+1] = 1;
						}
					}
					pointWeights = numeric.diag(pointWeights);
				}
			}
			
			/*
			 *	starts the tracker to run on a regular interval
			 */
			this.start = function(element, box) {
				// check if model is initalized, else return false
				if (typeof(model) === "undefined") {
					console.log("tracker needs to be initalized before starting to track.");
					return false;
				}
				//check if a runnerelement already exists, if not, use passed parameters
				if (typeof(runnerElement) === "undefined") {
					runnerElement = element;
					runnerBox = box;
				}
				// start named timeout function
				runnerTimeout = requestAnimFrame(runnerFunction);
			}

			/*
			 *	stop the running tracker
			 */
			this.stop = function() {
				// stop the running tracker if any exists
				cancelRequestAnimFrame(runnerTimeout);
			}

			/*
			 *  element : canvas or video element
			 *  TODO: should be able to take img element as well
			 */
			this.track = function(element, box) {
				
				var scaling, translateX, translateY, rotation;
				var croppedPatches = [];
				var ptch, px, py;
							
				if (first) {
					// do viola-jones on canvas to get initial guess, if we don't have any points
					var gi = getInitialPosition(element, box);
					if (!gi) {
						// send an event on no face found
						var evt = document.createEvent("Event");
						evt.initEvent("clmtrackrNotFound", true, true);
						document.dispatchEvent(evt)
						
						return false;
					}
					scaling = gi[0];
					rotation = gi[1];
					translateX = gi[2];
					translateY = gi[3];
					
					first = false;
				} else {
					facecheck_count += 1;
					
					if (params.constantVelocity) {
						// calculate where to get patches via constant velocity prediction
						if (previousParameters.length >= 2) {
							for (var i = 0;i < currentParameters.length;i++) {
								currentParameters[i] = (relaxation)*previousParameters[1][i] + (1-relaxation)*((2*previousParameters[1][i]) - previousParameters[0][i]);
								//currentParameters[i] = (3*previousParameters[2][i]) - (3*previousParameters[1][i]) + previousParameters[0][i];
							}
						}
					}
					
					// change translation, rotation and scale parameters
					rotation = halfPI - Math.atan((currentParameters[0]+1)/currentParameters[1]);
					if (rotation > halfPI) {
						rotation -= Math.PI;
					}
					scaling = currentParameters[1] / Math.sin(rotation);
					translateX = currentParameters[2];
					translateY = currentParameters[3];
				}
				
				// copy canvas to a new dirty canvas
				sketchCC.save();
				
				// clear canvas
				sketchCC.clearRect(0, 0, sketchW, sketchH);
				
				sketchCC.scale(1/scaling, 1/scaling);
				sketchCC.rotate(-rotation);
				sketchCC.translate(-translateX, -translateY);
				
				sketchCC.drawImage(element, 0, 0, element.width, element.height);
				
				sketchCC.restore();
				//	get cropped images around new points based on model parameters (not scaled and translated)
				var patchPositions = calculatePositions(currentParameters, false);
				
				// check whether tracking is ok
				if (scoringWeights && (facecheck_count % 10 == 0)) {
					if (!checkTracking()) {
						// reset all parameters
						first = true;
						scoringHistory = [];
						for (var i = 0;i < currentParameters.length;i++) {
							currentParameters[i] = 0;
							previousParameters = [];
						}
						
						// send event to signal that tracking was lost
						var evt = document.createEvent("Event");
						evt.initEvent("clmtrackrLost", true, true);
						document.dispatchEvent(evt)
						
						return false;
					}
				}


				var pdata, pmatrix, grayscaleColor;
				for (var i = 0; i < numPatches; i++) {
					px = patchPositions[i][0]-(pw/2);
					py = patchPositions[i][1]-(pl/2);
					ptch = sketchCC.getImageData(Math.round(px), Math.round(py), pw, pl);
					pdata = ptch.data;
					
					// convert to grayscale
					pmatrix = patches[i];
					for (var j = 0;j < pdataLength;j++) {
						grayscaleColor = pdata[j*4]*0.3 + pdata[(j*4)+1]*0.59 + pdata[(j*4)+2]*0.11;
						pmatrix[j] = grayscaleColor;
					}
				}
				
				/*print weights*/
				/*sketchCC.clearRect(0, 0, sketchW, sketchH);
				var nuWeights;
				for (var i = 0;i < numPatches;i++) {
					nuWeights = weights[i].map(function(x) {return x*2000+127;});
					drawData(sketchCC, nuWeights, patchSize, patchSize, false, patchPositions[i][0]-(patchSize/2), patchPositions[i][1]-(patchSize/2));
				}*/
				
				// print patches
				/*sketchCC.clearRect(0, 0, sketchW, sketchH);
				for (var i = 0;i < numPatches;i++) {
					if ([27,32,44,50].indexOf(i) > -1) {
						drawData(sketchCC, patches[i], pw, pl, false, patchPositions[i][0]-(pw/2), patchPositions[i][1]-(pl/2));
					}
				}*/
				if (patchType == "SVM") {
					if (typeof(webglFi) !== "undefined") {
						responses = getWebGLResponses(patches);
					} else if (typeof(svmFi) !== "undefined"){
						responses = svmFi.getResponses(patches);
					} else {
						throw "SVM-filters do not seem to be initiated properly."
					}
				} else if (patchType == "MOSSE") {
					responses = mosseCalc.getResponses(patches);
				}

				// option to increase sharpness of responses
				if (params.sharpenResponse) {
					for (var i = 0;i < numPatches;i++) {
						for (var j = 0;j < responses[i].length;j++) {
							responses[i][j] = Math.pow(responses[i][j], params.sharpenResponse);
						}
					}
				}

				// print responses
				/*sketchCC.clearRect(0, 0, sketchW, sketchH);
				var nuWeights;
				for (var i = 0;i < numPatches;i++) {
			
					nuWeights = [];
					for (var j = 0;j < responses[i].length;j++) {
						nuWeights.push(responses[i][j]*255);
					}
					
					//if ([27,32,44,50].indexOf(i) > -1) {
					//	drawData(sketchCC, nuWeights, searchWindow, searchWindow, false, patchPositions[i][0]-((searchWindow-1)/2), patchPositions[i][1]-((searchWindow-1)/2));
					//}
					drawData(sketchCC, nuWeights, searchWindow, searchWindow, false, patchPositions[i][0]-((searchWindow-1)/2), patchPositions[i][1]-((searchWindow-1)/2));
				}*/
				
				// iterate until convergence or max 10, 20 iterations?:
				var originalPositions = currentPositions;
				var jac;
				var meanshiftVectors = [];
				
				for (var i = 0; i < varianceSeq.length; i++) {
					
					// calculate jacobian
					jac = createJacobian(currentParameters, eigenVectors);

					// for debugging
					//var debugMVs = [];
					//
					
					var opj0, opj1;
					
					for (var j = 0;j < numPatches;j++) {
						opj0 = originalPositions[j][0]-((searchWindow-1)*scaling/2);
						opj1 = originalPositions[j][1]-((searchWindow-1)*scaling/2);
						
						// calculate PI x gaussians
						var vpsum = gpopt(searchWindow, currentPositions[j], updatePosition, vecProbs, responses, opj0, opj1, j, varianceSeq[i], scaling);
						
						// calculate meanshift-vector
						gpopt2(searchWindow, vecpos, updatePosition, vecProbs, vpsum, opj0, opj1, scaling);
						
						// for debugging
						//var debugMatrixMV = gpopt2(searchWindow, vecpos, updatePosition, vecProbs, vpsum, opj0, opj1);
						
						// evaluate here whether to increase/decrease stepSize
						/*if (vpsum >= prevCostFunc[j]) {
							learningRate[j] *= stepParameter;
						} else {
							learningRate[j] = 1.0;
						}
						prevCostFunc[j] = vpsum;*/
						
						// compute mean shift vectors
						// extrapolate meanshiftvectors
						/*var msv = [];
						msv[0] = learningRate[j]*(vecpos[0] - currentPositions[j][0]);
						msv[1] = learningRate[j]*(vecpos[1] - currentPositions[j][1]);
						meanshiftVectors[j] = msv;*/
						meanshiftVectors[j] = [vecpos[0] - currentPositions[j][0], vecpos[1] - currentPositions[j][1]];
						
						//if (isNaN(msv[0]) || isNaN(msv[1])) debugger;
						
						//for debugging
						//debugMVs[j] = debugMatrixMV;
						//
					}
					
					// draw meanshiftVector
					/*sketchCC.clearRect(0, 0, sketchW, sketchH);
					var nuWeights;
					for (var npidx = 0;npidx < numPatches;npidx++) {
						nuWeights = debugMVs[npidx].map(function(x) {return x*255*500;});
						drawData(sketchCC, nuWeights, searchWindow, searchWindow, false, patchPositions[npidx][0]-((searchWindow-1)/2), patchPositions[npidx][1]-((searchWindow-1)/2));
					}*/
					
					var meanShiftVector = numeric.rep([numPatches*2, 1],0.0);
					for (var k = 0;k < numPatches;k++) {
						meanShiftVector[k*2][0] = meanshiftVectors[k][0];
						meanShiftVector[(k*2)+1][0] = meanshiftVectors[k][1];
					}
					
					// compute pdm parameter update
					//var prior = numeric.mul(gaussianPD, PDMVariance);
					var prior = numeric.mul(gaussianPD, varianceSeq[i]);
					if (params.weightPoints) {
						var jtj = numeric.dot(numeric.transpose(jac), numeric.dot(pointWeights, jac));
					} else {
						var jtj = numeric.dot(numeric.transpose(jac), jac);
					}
					var cpMatrix = numeric.rep([numParameters+4, 1],0.0);
					for (var l = 0;l < (numParameters+4);l++) {
						cpMatrix[l][0] = currentParameters[l];
					}
					var priorP = numeric.dot(prior, cpMatrix);
					if (params.weightPoints) {
						var jtv = numeric.dot(numeric.transpose(jac), numeric.dot(pointWeights, meanShiftVector));
					} else {
						var jtv = numeric.dot(numeric.transpose(jac), meanShiftVector);
					}
					var paramUpdateLeft = numeric.add(prior, jtj);
					var paramUpdateRight = numeric.sub(priorP, jtv);
					var paramUpdate = numeric.dot(numeric.inv(paramUpdateLeft), paramUpdateRight);
					//var paramUpdate = numeric.solve(paramUpdateLeft, paramUpdateRight, true);
					
					var oldPositions = currentPositions;
					
					// update estimated parameters
					for (var k = 0;k < numParameters+4;k++) {
						currentParameters[k] -= paramUpdate[k];
					}
					
					// clipping of parameters if they're too high
					var clip;
					for (var k = 0;k < numParameters;k++) {
						clip = Math.abs(3*Math.sqrt(eigenValues[k]));
						if (Math.abs(currentParameters[k+4]) > clip) {
							if (currentParameters[k+4] > 0) {
								currentParameters[k+4] = clip;
							} else {
								currentParameters[k+4] = -clip;
							}
						}
						
					}
					
					// update current coordinates
					currentPositions = calculatePositions(currentParameters, true);
					
					// check if converged
					// calculate norm of parameterdifference
					var positionNorm = 0;
					var pnsq_x, pnsq_y;
					for (var k = 0;k < currentPositions.length;k++) {
						pnsq_x = (currentPositions[k][0]-oldPositions[k][0]);
						pnsq_y = (currentPositions[k][1]-oldPositions[k][1]);
						positionNorm += ((pnsq_x*pnsq_x) + (pnsq_y*pnsq_y));
					}
					//console.log("positionnorm:"+positionNorm);
					
					// if norm < limit, then break
					if (positionNorm < convergenceLimit) {
						break;
					}
				
				}
				
				if (params.constantVelocity) {
					// add current parameter to array of previous parameters
					previousParameters.push(currentParameters.slice());
					previousParameters.splice(0, previousParameters.length == 3 ? 1 : 0);
				}
				
				// store positions, for checking convergence
				previousPositions.splice(0, previousPositions.length == 10 ? 1 : 0);
				previousPositions.push(currentPositions.slice(0));
				
				// send an event on each iteration
				var evt = document.createEvent("Event");
				evt.initEvent("clmtrackrIteration", true, true);
				document.dispatchEvent(evt)
				
				if (this.getConvergence() < 0.5) {
					// we must get a score before we can say we've converged
					if (scoringHistory.length >= 5) {
						if (params.stopOnConvergence) {
							this.stop();
						}

						var evt = document.createEvent("Event");
						evt.initEvent("clmtrackrConverged", true, true);
						document.dispatchEvent(evt)
					}
				}
				
				// return new points
				return currentPositions;
			}

			/*
			 *	reset tracking, so that track() will start a new detection
			 */
			this.reset = function() {
				first = true;
				scoringHistory = [];
				for (var i = 0;i < currentParameters.length;i++) {
					currentParameters[i] = 0;
					previousParameters = [];
				}
				runnerElement = undefined;
				runnerBox = undefined;
			}

			/*
			 *	draw model on given canvas
			 */
			this.draw = function(canvas, pv, path) {
				// if no previous points, just draw in the middle of canvas
				
				var params;
				if (pv === undefined) {
					params = currentParameters.slice(0);
				} else {
					params = pv.slice(0);
				}
				
				var cc = canvas.getContext('2d');
				cc.fillStyle = "rgb(200,200,200)";
				cc.strokeStyle = "rgb(130,255,50)";
				//cc.lineWidth = 1;
				
				var paths;
				if (path === undefined) {
					paths = model.path.normal;
				} else {
					paths = model.path[path];
				}

				for (var i = 0;i < paths.length;i++) {
					if (typeof(paths[i]) == 'number') {
						drawPoint(cc, paths[i], params);
					} else {
						drawPath(cc, paths[i], params);
					}
				}
			}

			/*
			 * 	get the score of the current model fit
			 *	(based on svm of face according to current model)
			 */
			this.getScore = function() {
				return meanscore;
			}

			/*
			 *	calculate positions based on parameters
			 */
			this.calculatePositions = function(parameters) {
				return calculatePositions(parameters, true);
			}
			
			/*
			 *	get coordinates of current model fit
			 */
			this.getCurrentPosition = function() {
				if (first) {
					return false;
				} else {
					return currentPositions;
				}
			}
			
			/*
			 *	get parameters of current model fit
			 */
			this.getCurrentParameters = function() {
				return currentParameters;
			}

			/*
			 *	Get the average of recent model movements
			 *	Used for checking whether model fit has converged
			 */
			this.getConvergence = function() {
				if (previousPositions.length < 10) return 999999;
				
				var prevX = 0.0;
				var prevY = 0.0;
				var currX = 0.0;
				var currY = 0.0;
				
				// average 5 previous positions 
				for (var i = 0;i < 5;i++) {
					for (var j = 0;j < numPatches;j++) {
						prevX += previousPositions[i][j][0];
						prevY += previousPositions[i][j][1];
					}
				}
				prevX /= 5;
				prevY /= 5;
				
				// average 5 positions before that
				for (var i = 5;i < 10;i++) {
					for (var j = 0;j < numPatches;j++) {
						currX += previousPositions[i][j][0];
						currY += previousPositions[i][j][1];
					}
				}
				currX /= 5;
				currY /= 5;

				// calculate difference
				var diffX = currX-prevX;
				var diffY = currY-prevY;
				var msavg = ((diffX*diffX) + (diffY*diffY));
				msavg /= previousPositions.length
				return msavg;
			}
			
			/*
			 * Set response mode (only useful if webGL is available)
			 * mode : either "single", "blend" or "cycle"
			 * list : array of values "raw", "sobel", "lbp"
			 */
			this.setResponseMode = function(mode, list) {
				// clmtrackr must be initialized with model first
				if (typeof(model) === "undefined") {
					console.log("Clmtrackr has not been initialized with a model yet. No changes made.");
					return;
				}
				// must check whether webGL or not
				if (typeof(webglFi) === "undefined") {
					console.log("Responsemodes are only allowed when using webGL. In pure JS, only 'raw' mode is available.");
					return;
				}
				if (['single', 'blend', 'cycle'].indexOf(mode) < 0) {
					console.log("Tried to set an unknown responsemode : '"+mode+"'. No changes made.");
					return;
				}
				if (!(list instanceof Array)) {
					console.log("List in setResponseMode must be an array of strings! No changes made.");
					return;
				} else {
					for (var i = 0;i < list.length;i++) {
						if (['raw', 'sobel', 'lbp'].indexOf(list[i]) < 0) {
							console.log("Unknown element in responsemode list : '"+list[i]+"'. No changes made.");
						}
						// check whether filters are initialized 
						if (list[i] == 'sobel' && sobelInit == false) {
							console.log("The sobel filters have not been initialized! No changes made.");
						}
						if (list[i] == 'lbp' && lbpInit == false) {
							console.log("The LBP filters have not been initialized! No changes made.");
						}
					}
				}
				// reset index
				responseIndex = 0;
				responseMode = mode;
				responseList = list;
			}

			var runnerFunction = function() {
				runnerTimeout = requestAnimFrame(runnerFunction);
				// schedule as many iterations as we can during each request
				var startTime = (new Date()).getTime();
				while (((new Date()).getTime() - startTime) < 16) {
					var tracking = this.track(runnerElement, runnerBox);
					if (!tracking) continue;
				}
			}.bind(this);
			
			var getWebGLResponsesType = function(type, patches) {
				if (type == 'lbp') {
					return webglFi.getLBPResponses(patches);
				} else if (type == 'raw') {
					return webglFi.getRawResponses(patches);
				} else if (type == 'sobel') {
					return webglFi.getSobelResponses(patches);
				}
			}
			
			var getWebGLResponses = function(patches) {
				if (responseMode == 'single') {
					return getWebGLResponsesType(responseList[0], patches);
				} else if (responseMode == 'cycle') {
					var response = getWebGLResponsesType(responseList[responseIndex], patches);
					responseIndex++;
					if (responseIndex >= responseList.length) responseIndex = 0;
					return response;
				} else {
					// blend
					var responses = [];
					for (var i = 0;i < responseList.length;i++) {
						responses[i] = getWebGLResponsesType(responseList[i], patches);
					}
					var blendedResponses = [];
					for (var i = 0;i < numPatches;i++) {
						var response = Array(searchWindow*searchWindow);
						for (var k = 0;k < searchWindow*searchWindow;k++) response[k] = 0;
						for (var j = 0;j < responseList.length;j++) {
							for (var k = 0;k < searchWindow*searchWindow;k++) {
								response[k] += (responses[j][i][k]/responseList.length);
							}
						}
						blendedResponses[i] = response;
					}
					return blendedResponses;
				}
			}

			// generates the jacobian matrix used for optimization calculations
			var createJacobian = function(parameters, eigenVectors) {
				
				var jacobian = numeric.rep([2*numPatches, numParameters+4],0.0);
				var j0,j1;
				for (var i = 0;i < numPatches;i ++) {
					// 1
					j0 = meanShape[i][0];
					j1 = meanShape[i][1];
					for (var p = 0;p < numParameters;p++) {
						j0 += parameters[p+4]*eigenVectors[i*2][p];
						j1 += parameters[p+4]*eigenVectors[(i*2)+1][p];
					}
					jacobian[i*2][0] = j0;
					jacobian[(i*2)+1][0] = j1;
					// 2
					j0 = meanShape[i][1];
					j1 = meanShape[i][0];
					for (var p = 0;p < numParameters;p++) {
						j0 += parameters[p+4]*eigenVectors[(i*2)+1][p];
						j1 += parameters[p+4]*eigenVectors[i*2][p];
					}
					jacobian[i*2][1] = -j0;
					jacobian[(i*2)+1][1] = j1;
					// 3
					jacobian[i*2][2] = 1;
					jacobian[(i*2)+1][2] = 0;
					// 4
					jacobian[i*2][3] = 0;
					jacobian[(i*2)+1][3] = 1;
					// the rest
					for (var j = 0;j < numParameters;j++) {
						j0 = parameters[0]*eigenVectors[i*2][j] - parameters[1]*eigenVectors[(i*2)+1][j] + eigenVectors[i*2][j];
						j1 = parameters[0]*eigenVectors[(i*2)+1][j] + parameters[1]*eigenVectors[i*2][j] + eigenVectors[(i*2)+1][j];
						jacobian[i*2][j+4] = j0;
						jacobian[(i*2)+1][j+4] = j1;
					}
				}
				
				return jacobian;
			}
			
			// calculate positions from parameters
			var calculatePositions = function(parameters, useTransforms) {
				var x, y, a, b;
				var numParameters = parameters.length;
				var positions = [];
				for (var i = 0;i < numPatches;i++) {
					x = meanShape[i][0];
					y = meanShape[i][1];
					for (var j = 0;j < numParameters-4;j++) {
						x += model.shapeModel.eigenVectors[(i*2)][j]*parameters[j+4];
						y += model.shapeModel.eigenVectors[(i*2)+1][j]*parameters[j+4];
					}
					if (useTransforms) {
						a = parameters[0]*x - parameters[1]*y + parameters[2];
						b = parameters[0]*y + parameters[1]*x + parameters[3];
						x += a;
						y += b;
					}
					positions[i] = [x,y];
				}
				
				return positions;
			}
			
			// detect position of face on canvas/video element
			var detectPosition = function(el) {
				var canvas = document.createElement('canvas');
				canvas.width = el.width;
				canvas.height = el.height;
				var cc = canvas.getContext('2d');
				cc.drawImage(el, 0, 0, el.width, el.height);
				
				// do viola-jones on canvas to get initial guess, if we don't have any points
				/*var comp = ccv.detect_objects(
					ccv.grayscale(canvas), ccv.cascade, 5, 1
				);*/
				
				var jf = new jsfeat_face.jsfeatFace(canvas);
				var comp = jf.findFace();
				
				if (comp.length > 0) {
					candidate = comp[0];
				} else {
					return false;
				}
				
				for (var i = 1; i < comp.length; i++) {
					if (comp[i].confidence > candidate.confidence) {
						candidate = comp[i];
					}
				}
				
				return candidate;
			}
			
			// part one of meanshift calculation
			var gpopt = function(responseWidth, currentPositionsj, updatePosition, vecProbs, responses, opj0, opj1, j, variance, scaling) {
				var pos_idx = 0;
				var vpsum = 0;
				var dx, dy;
				for (var k = 0;k < responseWidth;k++) {
					updatePosition[1] = opj1+(k*scaling);
					for (var l = 0;l < responseWidth;l++) {
						updatePosition[0] = opj0+(l*scaling);

						dx = currentPositionsj[0] - updatePosition[0];
						dy = currentPositionsj[1] - updatePosition[1];
						vecProbs[pos_idx] = responses[j][pos_idx] * Math.exp(-0.5*((dx*dx)+(dy*dy))/(variance*scaling));
						
						vpsum += vecProbs[pos_idx];
						pos_idx++;
					}
				}
				
				return vpsum;
			}
			
			// part two of meanshift calculation
			var gpopt2 = function(responseWidth, vecpos, updatePosition, vecProbs, vpsum, opj0, opj1, scaling) {
				//for debugging
				//var vecmatrix = [];
				
				var pos_idx = 0;
				var vecsum = 0;
				vecpos[0] = 0;
				vecpos[1] = 0;
				for (var k = 0;k < responseWidth;k++) {
					updatePosition[1] = opj1+(k*scaling);
					for (var l = 0;l < responseWidth;l++) {
						updatePosition[0] = opj0+(l*scaling);
						vecsum = vecProbs[pos_idx]/vpsum;
						
						//for debugging
						//vecmatrix[k*responseWidth + l] = vecsum;
						
						vecpos[0] += vecsum*updatePosition[0];
						vecpos[1] += vecsum*updatePosition[1];
						pos_idx++;
					}
				}
				// for debugging
				//return vecmatrix;
			}
			
			// calculate score of current fit
			var checkTracking = function() {			
				scoringContext.drawImage(sketchCanvas, Math.round(msxmin+(msmodelwidth/4.5)), Math.round(msymin-(msmodelheight/12)), Math.round(msmodelwidth-(msmodelwidth*2/4.5)), Math.round(msmodelheight-(msmodelheight/12)), 0, 0, 20, 22);
				// getImageData of canvas
				var imgData = scoringContext.getImageData(0,0,20,22);
				// convert data to grayscale
				var scoringData = new Array(20*22);
				var scdata = imgData.data;
				var scmax = 0;
				for (var i = 0;i < 20*22;i++) {
					scoringData[i] = scdata[i*4]*0.3 + scdata[(i*4)+1]*0.59 + scdata[(i*4)+2]*0.11;
					scoringData[i] = Math.log(scoringData[i]+1);
					if (scoringData[i] > scmax) scmax = scoringData[i];
				}

				if (scmax > 0) {
					// normalize & multiply by svmFilter
					var mean = 0;
					for (var i = 0;i < 20*22;i++) {
						mean += scoringData[i];
					}
					mean /= (20*22);
					var sd = 0;
					for (var i = 0;i < 20*22;i++) {
						sd += (scoringData[i]-mean)*(scoringData[i]-mean);
					}
					sd /= (20*22 - 1)
					sd = Math.sqrt(sd);
					
					var score = 0;
					for (var i = 0;i < 20*22;i++) {
						scoringData[i] = (scoringData[i]-mean)/sd;
						score += (scoringData[i])*scoringWeights[i];
					}
					score += scoringBias;
					score = 1/(1+Math.exp(-score));

					scoringHistory.splice(0, scoringHistory.length == 5 ? 1 : 0);
					scoringHistory.push(score);

					if (scoringHistory.length > 4) {
						// get average
						meanscore = 0;
						for (var i = 0;i < 5;i++) {
							meanscore += scoringHistory[i];
						}
						meanscore /= 5;
						// if below threshold, then reset (return false)
						if (meanscore < params.scoreThreshold) return false;
					}
				}
				return true;
			}
			
			// get initial starting point for model
			var getInitialPosition = function(element, box) {
				var translateX, translateY, scaling, rotation;
				if (box) {
					candidate = {x : box[0], y : box[1], width : box[2], height : box[3]};
				} else {
					var det = detectPosition(element);
					if (!det) {
						// if no face found, stop.
						return false;
					}
				}

				var mosseFilter = new mosse.mosseFilter();
				if (model.hints && mosseFilter && left_eye_filter && right_eye_filter && nose_filter) {
					var noseFilterWidth = candidate.width * 4.5/10;
					var eyeFilterWidth = candidate.width * 6/10;
					
					// detect position of eyes and nose via mosse filter
					//
					/*element.pause();
					
					var canvasContext = document.getElementById('overlay2').getContext('2d')
					canvasContext.clearRect(0,0,500,375);
					canvasContext.strokeRect(candidate.x, candidate.y, candidate.width, candidate.height);*/
					//

					var nose_result = mossef_nose.track(element, Math.round(candidate.x+(candidate.width/2)-(noseFilterWidth/2)), Math.round(candidate.y+candidate.height*(5/8)-(noseFilterWidth/2)), noseFilterWidth, noseFilterWidth, false);
					var right_result = mossef_righteye.track(element, Math.round(candidate.x+(candidate.width*3/4)-(eyeFilterWidth/2)), Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2)), eyeFilterWidth, eyeFilterWidth, false);
					var left_result = mossef_lefteye.track(element, Math.round(candidate.x+(candidate.width/4)-(eyeFilterWidth/2)), Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2)), eyeFilterWidth, eyeFilterWidth, false);
					right_eye_position[0] = Math.round(candidate.x+(candidate.width*3/4)-(eyeFilterWidth/2))+right_result[0];
					right_eye_position[1] = Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2))+right_result[1];
					left_eye_position[0] = Math.round(candidate.x+(candidate.width/4)-(eyeFilterWidth/2))+left_result[0];
					left_eye_position[1] = Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2))+left_result[1];
					nose_position[0] = Math.round(candidate.x+(candidate.width/2)-(noseFilterWidth/2))+nose_result[0];
					nose_position[1] = Math.round(candidate.y+candidate.height*(5/8)-(noseFilterWidth/2))+nose_result[1];
					
					//
					/*canvasContext.strokeRect(Math.round(candidate.x+(candidate.width*3/4)-(eyeFilterWidth/2)), Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2)), eyeFilterWidth, eyeFilterWidth);
					canvasContext.strokeRect(Math.round(candidate.x+(candidate.width/4)-(eyeFilterWidth/2)), Math.round(candidate.y+candidate.height*(2/5)-(eyeFilterWidth/2)), eyeFilterWidth, eyeFilterWidth);
					//canvasContext.strokeRect(Math.round(candidate.x+(candidate.width/2)-(noseFilterWidth/2)), Math.round(candidate.y+candidate.height*(3/4)-(noseFilterWidth/2)), noseFilterWidth, noseFilterWidth);
					canvasContext.strokeRect(Math.round(candidate.x+(candidate.width/2)-(noseFilterWidth/2)), Math.round(candidate.y+candidate.height*(5/8)-(noseFilterWidth/2)), noseFilterWidth, noseFilterWidth);
					
					canvasContext.fillStyle = "rgb(0,0,250)";
					canvasContext.beginPath();
					canvasContext.arc(left_eye_position[0], left_eye_position[1], 3, 0, Math.PI*2, true);
					canvasContext.closePath();
					canvasContext.fill();
					
					canvasContext.beginPath();
					canvasContext.arc(right_eye_position[0], right_eye_position[1], 3, 0, Math.PI*2, true);
					canvasContext.closePath();
					canvasContext.fill();
					
					canvasContext.beginPath();
					canvasContext.arc(nose_position[0], nose_position[1], 3, 0, Math.PI*2, true);
					canvasContext.closePath();
					canvasContext.fill();
					
					debugger;
					element.play()
					canvasContext.clearRect(0,0,element.width,element.height);*/
					//
					
					// get eye and nose positions of model
					var lep = model.hints.leftEye;
					var rep = model.hints.rightEye;
					var mep = model.hints.nose;
					
					// get scaling, rotation, etc. via procrustes analysis
					var procrustes_params = procrustes([left_eye_position, right_eye_position, nose_position], [lep, rep, mep]);
					translateX = procrustes_params[0];
					translateY = procrustes_params[1];
					scaling = procrustes_params[2];
					rotation = procrustes_params[3];
					
					//element.play();
					
					//var maxscale = 1.10;
					//if ((scaling*modelHeight)/candidate.height < maxscale*0.7) scaling = (maxscale*0.7*candidate.height)/modelHeight;
					//if ((scaling*modelHeight)/candidate.height > maxscale*1.2) scaling = (maxscale*1.2*candidate.height)/modelHeight;
					
					/*var smean = [0,0];
					smean[0] += lep[0];
					smean[1] += lep[1];
					smean[0] += rep[0];
					smean[1] += rep[1];
					smean[0] += mep[0];
					smean[1] += mep[1];
					smean[0] /= 3;
					smean[1] /= 3;
					
					var nulep = [(lep[0]*scaling*Math.cos(-rotation)+lep[1]*scaling*Math.sin(-rotation))+translateX, (lep[0]*scaling*(-Math.sin(-rotation)) + lep[1]*scaling*Math.cos(-rotation))+translateY];
					var nurep = [(rep[0]*scaling*Math.cos(-rotation)+rep[1]*scaling*Math.sin(-rotation))+translateX, (rep[0]*scaling*(-Math.sin(-rotation)) + rep[1]*scaling*Math.cos(-rotation))+translateY];
					var numep = [(mep[0]*scaling*Math.cos(-rotation)+mep[1]*scaling*Math.sin(-rotation))+translateX, (mep[0]*scaling*(-Math.sin(-rotation)) + mep[1]*scaling*Math.cos(-rotation))+translateY];
					
					canvasContext.fillStyle = "rgb(200,10,100)";
					canvasContext.beginPath();
					canvasContext.arc(nulep[0], nulep[1], 3, 0, Math.PI*2, true);
					canvasContext.closePath();
					canvasContext.fill();
					
					canvasContext.beginPath();
					canvasContext.arc(nurep[0], nurep[1], 3, 0, Math.PI*2, true);
					canvasContext.closePath();
					canvasContext.fill();
					
					canvasContext.beginPath();
					canvasContext.arc(numep[0], numep[1], 3, 0, Math.PI*2, true);
					canvasContext.closePath();
					canvasContext.fill();*/
					
					currentParameters[0] = (scaling*Math.cos(rotation))-1;
					currentParameters[1] = (scaling*Math.sin(rotation));
					currentParameters[2] = translateX;
					currentParameters[3] = translateY;
					
					//this.draw(document.getElementById('overlay'), currentParameters);
					
				} else {
					scaling = candidate.width/modelheight;
					//var ccc = document.getElementById('overlay').getContext('2d');
					//ccc.strokeRect(candidate.x,candidate.y,candidate.width,candidate.height);
					translateX = candidate.x-(xmin*scaling)+0.1*candidate.width;
					translateY = candidate.y-(ymin*scaling)+0.25*candidate.height;
					currentParameters[0] = scaling-1;
					currentParameters[2] = translateX;
					currentParameters[3] = translateY;
				}
			
				currentPositions = calculatePositions(currentParameters, true);
				
				return [scaling, rotation, translateX, translateY];
			}
			
			// draw a parametrized line on a canvas
			var drawPath = function(canvasContext, path, dp) {
				canvasContext.beginPath();
				var i, x, y, a, b;
				for (var p = 0;p < path.length;p++) {
					i = path[p]*2;
					x = meanShape[i/2][0];
					y = meanShape[i/2][1];
					for (var j = 0;j < numParameters;j++) {
						x += model.shapeModel.eigenVectors[i][j]*dp[j+4];
						y += model.shapeModel.eigenVectors[i+1][j]*dp[j+4];
					}
					a = dp[0]*x - dp[1]*y + dp[2];
					b = dp[0]*y + dp[1]*x + dp[3];
					x += a;
					y += b;
					
					if (i == 0) {
						canvasContext.moveTo(x,y);
					} else {
						canvasContext.lineTo(x,y);
					}
				}
				canvasContext.moveTo(0,0);
				canvasContext.closePath();
				canvasContext.stroke();
			}
			
			// draw a point on a canvas
			function drawPoint(canvasContext, point, dp) {
				var i, x, y, a, b;
				i = point*2;
				x = meanShape[i/2][0];
				y = meanShape[i/2][1];
				for (var j = 0;j < numParameters;j++) {
					x += model.shapeModel.eigenVectors[i][j]*dp[j+4];
					y += model.shapeModel.eigenVectors[i+1][j]*dp[j+4];
				}
				a = dp[0]*x - dp[1]*y + dp[2];
				b = dp[0]*y + dp[1]*x + dp[3];
				x += a;
				y += b;
				canvasContext.beginPath();
				canvasContext.arc(x, y, 1, 0, Math.PI*2, true);
				canvasContext.closePath();
				canvasContext.fill();
			}
			
			// procrustes analysis
			function procrustes(template, shape) {
				// assume template and shape is a vector of x,y-coordinates
				//i.e. template = [[x1,y1], [x2,y2], [x3,y3]];
				var templateClone = [];
				var shapeClone = [];
				for (var i = 0;i < template.length;i++) {
					templateClone[i] = [template[i][0], template[i][1]];
				}
				for (var i = 0;i < shape.length;i++) {
					shapeClone[i] = [shape[i][0], shape[i][1]];
				}
				shape = shapeClone;
				template = templateClone;
				
				// calculate translation
				var templateMean = [0.0, 0.0];
				for (var i = 0;i < template.length;i++) {
					templateMean[0] += template[i][0];
					templateMean[1] += template[i][1];
				}
				templateMean[0] /= template.length;
				templateMean[1] /= template.length;
				
				var shapeMean = [0.0, 0.0];
				for (var i = 0;i < shape.length;i++) {
					shapeMean[0] += shape[i][0];
					shapeMean[1] += shape[i][1];
				}
				shapeMean[0] /= shape.length;
				shapeMean[1] /= shape.length;
				
				var translationX = templateMean[0] - shapeMean[0];
				var translationY = templateMean[1] - shapeMean[1];
				
				// centralize
				for (var i = 0;i < shape.length;i++) {
					shape[i][0] -= shapeMean[0];
					shape[i][1] -= shapeMean[1];
				}
				for (var i = 0;i < template.length;i++) {
					template[i][0] -= templateMean[0];
					template[i][1] -= templateMean[1];
				}
				
				// scaling
				
				var scaleS = 0.0;
				for (var i = 0;i < shape.length;i++) {
					scaleS += ((shape[i][0])*(shape[i][0]));
					scaleS += ((shape[i][1])*(shape[i][1]));
				}
				scaleS = Math.sqrt(scaleS/shape.length);
				
				var scaleT = 0.0;
				for (var i = 0;i < template.length;i++) {
					scaleT += ((template[i][0])*(template[i][0]));
					scaleT += ((template[i][1])*(template[i][1]));
				}
				scaleT = Math.sqrt(scaleT/template.length);
				
				var scaling = scaleT/scaleS;
				
				for (var i = 0;i < shape.length;i++) {
					shape[i][0] *= scaling;
					shape[i][1] *= scaling;
				}
					
				// rotation
				
				var top = 0.0;
				var bottom = 0.0;
				for (var i = 0;i < shape.length;i++) {
					top += (shape[i][0]*template[i][1] - shape[i][1]*template[i][0]);
					bottom += (shape[i][0]*template[i][0] + shape[i][1]*template[i][1]);
				}
				var rotation = Math.atan(top/bottom);
				
				translationX += (shapeMean[0]-(scaling*Math.cos(-rotation)*shapeMean[0])-(scaling*shapeMean[1]*Math.sin(-rotation)));
				translationY += (shapeMean[1]+(scaling*Math.sin(-rotation)*shapeMean[0])-(scaling*shapeMean[1]*Math.cos(-rotation)));
				
				//returns rotation, scaling, transformx and transformx
				return [translationX, translationY, scaling, rotation];
			}
			
			// function to draw pixeldata on some canvas, only used for debugging
			var drawData = function(canvasContext, data, width, height, transposed, drawX, drawY) {
				var psci = canvasContext.createImageData(width, height);
				var pscidata = psci.data;
				for (var j = 0;j < width*height;j++) {
					if (!transposed) {
						var val = data[(j%width)+((j/width) >> 0)*width];
					} else {
						var val = data[(j%height)*height+((j/height) >> 0)];
					}
					val = val > 255 ? 255 : val;
					val = val < 0 ? 0 : val;
					pscidata[j*4] = val;
					pscidata[(j*4)+1] = val;
					pscidata[(j*4)+2] = val;
					pscidata[(j*4)+3] = 255;
				}
				canvasContext.putImageData(psci, drawX, drawY);
			}
			
			var requestAnimFrame = (function() {
				return window.requestAnimationFrame ||
				window.webkitRequestAnimationFrame ||
				window.mozRequestAnimationFrame ||
				window.oRequestAnimationFrame ||
				window.msRequestAnimationFrame ||
				function(/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {
					return window.setTimeout(callback, 1000/60);
				};
			})();
			
			var cancelRequestAnimFrame = (function() {
				return window.cancelAnimationFrame ||
					window.webkitCancelRequestAnimationFrame ||
					window.mozCancelRequestAnimationFrame ||
					window.oCancelRequestAnimationFrame ||
					window.msCancelRequestAnimationFrame ||
					window.clearTimeout;
			})();
			
			return true;
		}
	}
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	/*
	 * MOSSE correlation filter
	 *
	 * Optional parameters to constructor:
	 *   drawResponse {canvasElement} : draws the correlation filter output on the given canvas element (default is none)
	 *   psrThreshold {number} : peak-to-sidelobe-ratio threshold to use when updating filter while tracking (default is 10)
	 *   eta {number} : adjusts how much new input affects the mosse filter, when updating filter while tracking
	 *     number should be between 0 and 1 (default is 0.1)
	 *   convertToGrayscale {boolean} : whether to convert canvas output to grayscale (default is true)
	 *     if this is set to false, we assume all channels are equal and only grab values from red channel
	 *
	 * @author auduno / github.com/auduno
	 */ 

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function(FFT){
	    return{
	mosseFilter: function (params) {
	    
	    var _filter, _top, _bottom;
	    var _fft;
	    var _w,_h;
	    var _im_part;
	    var _arrlen;
	    var _cc;
	    var _image_array;
	    
	    this.psr_prev = undefined;
	    this.peak_prev = undefined;
	    var peak = 0.0;
	    var updateable = false;
	    
	    if (!params) params = {};
	    // setup of canvas for drawing responses, if given
	    if (params.drawResponse === undefined) {
	        params.drawResponse = false;
	    } else {
	        if (params.drawResponse.tagName != 'CANVAS') {
	            params.drawResponse = false;
	        } else {
	            var responseContext = params.drawResponse.getContext('2d');
	        }
	    }
	    if (params.psrThreshold === undefined) params.psrThreshold = 10;
	    if (params.eta === undefined) params.eta = 0.10;
	    if (params.convertToGrayscale === undefined) params.convertToGrayscale = true;
	    
	    this.load = function(filter) {
	        // initialize filter width and height
	        _w = filter.width;
	        _h = filter.height;
	        _arrlen = _w*_h;
	        _filter = [filter.real, filter.imag];
	        // handling top and bottom when they're not present
	        if (filter.top && filter.bottom) {
	          updateable = true;
	          _top = [filter.top.real, filter.top.imag];
	          _bottom = [filter.bottom.real, filter.bottom.imag];
	        }
	        
	        // initialize fft to given width
	        _fft = new FFT.FFT();
	        _fft.init(filter.width);
	        
	        // set up temporary variables
	        if(typeof Float64Array !== 'undefined') {
	            _im_part = new Float64Array(_arrlen);
	            _image_array = new Float64Array(_arrlen);
	        } else {
	            _im_part = new Array(_arrlen);
	            _image_array = new Array(_arrlen);
	        }
	        var canvas = document.createElement("canvas");
	        canvas.setAttribute('width', _w);
	        canvas.setAttribute('height', _h);
	        _cc = canvas.getContext('2d');
	    }
	    
	    this.init = function(w,h) {
	        // initialize filter width and height for a blank filter
	        _w = w;
	        _h = h;
	        _arrlen = _w*_h;
	        
	        _filter = [[],[]];
	        _top = [[],[]];
	        _bottom = [[],[]];
	        for (var i = 0;i < _arrlen;i++) {
	            _filter[0][i] = 0;
	            _filter[1][i] = 0;
	            _top[0][i] = 0;
	            _top[1][i] = 0;
	            _bottom[0][i] = 0;
	            _bottom[1][i] = 0;
	        }
	        updateable = true;
	        
	        // initialize fft to given width
	        _fft = new FFT.FFT();
	        _fft.init(w);
	        
	        // set up temporary variables
	        if(typeof Float64Array !== 'undefined') {
	            _im_part = new Float64Array(_arrlen);
	        } else {
	            _im_part = new Array(_arrlen);
	        }
	        var canvas = document.createElement("canvas");
	        canvas.setAttribute('width', _w);
	        canvas.setAttribute('height', _h);
	        _cc = canvas.getContext('2d');
	    }
	    
	    // fft function
	    this.fft = function(array) {
	        // not in-place
	        
	        var cn = new Array(_arrlen);
	        for (var i = 0;i < _arrlen;i++) {
	          cn[i] = 0.0;
	        }
	        
	        _fft.fft2d(array,cn)
	        return [array, cn];
	    }
	    
	    // fft function
	    this.fft_inplace = function(array) {
	        // in-place
	        
	        for (var i = 0;i < _arrlen;i++) {
	          _im_part[i] = 0.0;
	        }
	        
	        _fft.fft2d(array,_im_part)
	        return [array, _im_part];
	    }
	    
	    this.ifft = function(rn, cn) {
	        // in-place
	        _fft.ifft2d(rn, cn);
	        return rn;
	    }

	    // peak to sidelobe ratio function (optional)
	    this.psr = function(array) {
	        // proper
	        var sum = 0;
	        var max = 0;
	        var maxpos = [];
	        var sdo = 0;
	        var val;
	        for (var x = 0;x < _w;x++) {
	            for (var y = 0;y < _h;y++) {
	                val = array[(y*_w)+x];
	                sum += val;
	                sdo += (val*val);
	                if (max < val) {
	                    max = val;
	                    maxpos = [x,y];
	                }
	            }
	        }
	        
	        // subtract values around peak
	        for (var x = -5;x < 6;x++) {
	            for (var y = -5;y < 6;y++) {
	                if (Math.sqrt(x*x+y*y) < 5) {
	                    val = array[((maxpos[1]+y)*_w)+(maxpos[0]+x)]
	                    sdo -= (val*val);
	                    sum -= val;
	                }
	            }
	        }
	        
	        var mean = sum/array.length;
	        var sd = Math.sqrt((sdo/array.length)-(mean*mean));
	        
	        // get mean/variance of output around peak
	        var psr = (max-mean)/sd;
	        return psr;
	    }
	    
	    this.getResponse = function(imageData) {
	        // in-place
	        
	        // preprocess
	        var prepImage = preprocess(imageData);
	        prepImage = cosine_window(prepImage);
	        
	        // filter
	        var res = this.fft_inplace(prepImage);
	        
	        // elementwise multiplication with filter
	        complex_mult_inplace(res, _filter);
	        
	        // do inverse 2d fft
	        var filtered = this.ifft(res[0],res[1]);
	        return filtered;
	    }
	    
	    this.track = function(input, left, top, width, height, updateFilter, gaussianPrior, calcPSR) {
	        // finds position of filter in input image
	        
	        if (!_filter) {
	            console.log("Mosse-filter needs to be initialized or trained before starting tracking.");
	            return false;
	        }
	        
	        if (input.tagName == "VIDEO" || input.tagName == "IMG") {
	            // scale selection according to original source image
	            var videoLeft = Math.round((left/input.width)*input.videoWidth);
	            var videoTop = Math.round((top/input.height)*input.videoHeight);
	            var videoWidth = Math.round((width/input.width)*input.videoWidth);
	            var videoHeight = Math.round((height/input.height)*input.videoHeight);
	            _cc.drawImage(input, videoLeft, videoTop, videoWidth, videoHeight, 0, 0, _w, _h);
	        } else if (input.tagName == "CANVAS") {
	            _cc.drawImage(input, left, top, width, height, 0, 0, _w, _h);
	        }
	        
	        var image = _cc.getImageData(0,0,_w,_h);
	        var id = image.data;
	        
	        if (params.convertToGrayscale) {
	            // convert to grayscale
	            for (var i = 0;i < _arrlen;i++) {
	                _image_array[i] = id[(4*i)]*0.3;
	                _image_array[i] += id[(4*i)+1]*0.59;
	                _image_array[i] += id[(4*i)+2]*0.11;
	            } 
	        } else {
	            // use only one channel
	            for (var i = 0;i < _arrlen;i++) {
	                _image_array[i] = id[(4*i)];
	            } 
	        }
	        
	        // preprocess
	        var prepImage = preprocess(_image_array);
	        prepImage = cosine_window(prepImage);
	        
	        // filter
	        var res = this.fft_inplace(prepImage);
	        // elementwise multiplication with filter
	        var nures = complex_mult(res, _filter);
	        // do inverse 2d fft
	        var filtered = this.ifft(nures[0],nures[1]);
	        
	        // find max and min
	        var max = 0;
	        var min = 0;
	        var maxpos = [];
	        
	        //method using centered gaussian prior
	        if (gaussianPrior) {
	            var prior, dx, dy;
	            var variance = 128;
	            for (var x = 0;x < _w;x++) {
	                for (var y = 0;y < _h;y++) {
	                    dx = x - _w/2;
	                    dy = y - _h/2;
	                    prior = Math.exp(-0.5*((dx*dx)+(dy*dy))/variance)
	                    if ((filtered[(y*_w)+x]*prior) > max) {
	                        max = filtered[(y*_w)+x]*prior;
	                        maxpos = [x,y];
	                    }
	                    if (filtered[(y*_w)+x] < min) {
	                        min = filtered[(y*_w)+x];
	                    }
	                }
	            }
	        } else {
	            for (var x = 0;x < _w;x++) {
	                for (var y = 0;y < _h;y++) {
	                    if (filtered[(y*_w)+x] > max) {
	                        max = filtered[(y*_w)+x];
	                        maxpos = [x,y];
	                    }
	                    if (filtered[(y*_w)+x] < min) {
	                        min = filtered[(y*_w)+x];
	                    }
	                }
	            }
	        }
	        this.peak_prev = max;
	        
	        if (params.drawResponse) {
	            // draw response
	            var diff = max-min;
	            var dc = document.createElement('canvas');
	            dc.setAttribute('width', 32);
	            dc.setAttribute('height', 32);
	            var dcc = dc.getContext('2d');
	            var psci = dcc.createImageData(32, 32);
	            var pscidata = psci.data;
	            for (var j = 0;j < 32*32;j++) {
	                //draw with priors
	                //var val = filtered[j]*Math.exp(-0.5*(((j%_w - _w/2)*(j%_w -_w/2))+((Math.floor(j/_h)-(_h/2))*(Math.floor(j/_h)-(_h/2))))/128);
	                var val = filtered[j];
	                val = Math.round((val+Math.abs(min))*(255/diff));
	                pscidata[j*4] = val;
	                pscidata[(j*4)+1] = val;
	                pscidata[(j*4)+2] = val;
	                pscidata[(j*4)+3] = 255;
	            }
	            dcc.putImageData(psci, 0, 0);
	            responseContext.drawImage(dc, left, top, width, width);
	        }
	        
	        if (calcPSR) {
	          this.psr_prev = this.psr(filtered);
	        }
	        
	        if (updateFilter) {
	            if (!updateable) {
	                console.log("The loaded filter does not support updating. Ignoring parameter 'updateFilter'.");
	            } else {
	                if (calcPSR) {
	                  var psr = this.psr_prev;
	                } else {
	                  var psr = this.psr(filtered);
	                }
	                
	                if (psr > params.psrThreshold) {
	                    // create target
	                    var target = [];
	                    var nux = maxpos[0];
	                    var nuy = maxpos[1];
	                    for (var x = 0;x < _w;x++) {
	                        for (var y = 0;y < _h;y++) {
	                            target[(y*_w)+x] = Math.exp(-(((x-nux)*(x-nux))+((y-nuy)*(y-nuy)))/(2*2));
	                        }
	                    }
	                    
	                    //fft target
	                    target = this.fft(target);
	                    
	                    // create filter
	                    var res_conj = complex_conj(res);
	                    var fuTop = complex_mult(target,res_conj);
	                    var fuBottom = complex_mult(res,res_conj);
	                    
	                    // add up
	                    var eta = params.eta;
	                    for (var i = 0;i < _arrlen;i++) {
	                        _top[0][i] = eta*fuTop[0][i] + (1-eta)*_top[0][i];
	                        _top[1][i] = eta*fuTop[1][i] + (1-eta)*_top[1][i];
	                        _bottom[0][i] = eta*fuBottom[0][i] + (1-eta)*_bottom[0][i];
	                        _bottom[1][i] = eta*fuBottom[1][i] + (1-eta)*_bottom[1][i];
	                    }
	                    
	                    _filter = complex_div(_top,_bottom);
	                }
	            }
	        }
	        
	        /*if (psr < 5) {
	          maxpos = [_w/2,_h/2]; 
	        }*/
	        
	        maxpos[0] = maxpos[0]*(width/_w);
	        maxpos[1] = maxpos[1]*(width/_h);
	        
	        // check if output is strong enough
	        // if not, return false?
	        if (max < 0) {
	          return false;
	        } else {
	          return maxpos;
	        }
	    }
	    
	    this.train = function(input, left, top, width, height) {
	        
	        if (!updateable) {
	          console.log("The loaded filter does not support updating. Unable to do training.");
	          return false;
	        }
	        
	        if (input.tagName == "VIDEO" || input.tagName == "IMG") {
	            // scale selection according to original source image
	            var videoLeft = Math.round((left/input.width)*input.videoWidth);
	            var videoTop = Math.round((top/input.height)*input.videoHeight);
	            var videoWidth = Math.round((width/input.width)*input.videoWidth);
	            var videoHeight = Math.round((height/input.height)*input.videoHeight);
	            _cc.drawImage(input, videoLeft, videoTop, videoWidth, videoHeight, 0, 0, _w, _h);
	        } else if (input.tagName == "CANVAS") {
	            _cc.drawImage(input, left, top, width, height, 0, 0, _w, _h);
	        }
	        
	        var image = _cc.getImageData(0,0,_w,_h);
	        var id = image.data;
	         
	        // convert to grayscale
	        for (var i = 0;i < _arrlen;i++) {
	            _image_array[i] = id[(4*i)]*0.3;
	            _image_array[i] += id[(4*i)+1]*0.59;
	            _image_array[i] += id[(4*i)+2]*0.11;
	        }
	        
	        // preprocess
	        var prepImage = preprocess(_image_array);
	        prepImage = cosine_window(prepImage);
	        
	        // create target
	        var target = [];
	        var nux = _w/2;
	        var nuy = _h/2;
	        for (var x = 0;x < _w;x++) {
	            for (var y = 0;y < _h;y++) {
	                target[(y*_w)+x] = Math.exp(-(((x-nux)*(x-nux))+((y-nuy)*(y-nuy)))/(2*2));
	            }
	        }
	        
	        //fft target
	        target = this.fft(target);
	        
	        // filter
	        var res = this.fft(prepImage);
	        // create filter
	        var res_conj = complex_conj(res);
	        var fuTop = complex_mult(target,res_conj);
	        var fuBottom = complex_mult(res,res_conj);
	        
	        // add up
	        var eta = params.eta;
	        for (var i = 0;i < _arrlen;i++) {
	            _top[0][i] = eta*fuTop[0][i] + (1-eta)*_top[0][i];
	            _top[1][i] = eta*fuTop[1][i] + (1-eta)*_top[1][i];
	            _bottom[0][i] = eta*fuBottom[0][i] + (1-eta)*_bottom[0][i];
	            _bottom[1][i] = eta*fuBottom[1][i] + (1-eta)*_bottom[1][i];
	        }
	        
	        _filter = complex_div(_top,_bottom);
	        
	        return true;
	    }
	    
	    var preprocess = function(array) {
	        // in-place
	        
	        // log adjusting
	        for (var i = 0;i < _arrlen;i++) {
	          array[i] = Math.log(array[i]+1);
	        }
	        
	        // normalize to mean 0 and norm 1
	        var mean = 0;
	        for (var i = 0;i < _arrlen;i++) {
	          mean += array[i];
	        }
	        mean /= _arrlen;
	        
	        for (var i = 0;i < _arrlen;i++) {
	          array[i] -= mean;
	        }
	        var norm = 0.0;
	        for (var i = 0;i < _arrlen;i++) {
	          norm += (array[i]*array[i]);
	        }
	        norm = Math.sqrt(norm);
	        for (var i = 0;i < _arrlen;i++) {
	          array[i] /= norm;
	        }
	        
	        return array;
	    }
	    
	    var cosine_window = function(array) {
	        // calculate rect cosine window (in-place)
	        var pos = 0;
	        for (var i = 0;i < _w;i++) {
	            for (var j = 0;j < _h;j++) {
	                //pos = (i%_w)+(j*_w);
	                var cww = Math.sin((Math.PI*i)/(_w-1))
	                var cwh = Math.sin((Math.PI*j)/(_h-1))
	                array[pos] = Math.min(cww,cwh)*array[pos];
	                pos++;
	            }
	        }
	        
	        return array;
	    }
	    
	    var complex_mult = function(cn1, cn2) {
	        // not in-place
	        var re_part = new Array(_w);
	        var im_part = new Array(_w);
	        var nucn = [re_part, im_part];
	        for (var r = 0;r < _arrlen;r++) {
	            nucn[0][r] = (cn1[0][r]*cn2[0][r]) - (cn1[1][r]*cn2[1][r]);
	            nucn[1][r] = (cn1[0][r]*cn2[1][r]) + (cn1[1][r]*cn2[0][r]);
	        }
	        return nucn;
	    }
	    
	    var complex_mult_inplace = function(cn1, cn2) {
	        // in-place
	        var temp1, temp2;
	        for (var r = 0;r < _arrlen;r++) {
	            temp1 = (cn1[0][r]*cn2[0][r]) - (cn1[1][r]*cn2[1][r]);
	            temp2 = (cn1[0][r]*cn2[1][r]) + (cn1[1][r]*cn2[0][r]);
	            cn1[0][r] = temp1;
	            cn1[1][r] = temp2;
	        }
	    }
	    
	    var complex_conj = function(cn) {
	        // not in-place (TODO)
	        var nucn = [[],[]];
	        for (var i = 0;i < _arrlen;i++) {
	            nucn[0][i] = cn[0][i]
	            nucn[1][i] = -cn[1][i];
	        }
	        return nucn;
	    }
	    
	    var complex_div = function(cn1, cn2) {
	        // not in-place (TODO)
	        var nucn = [[],[]];
	        for (var r = 0;r < _arrlen;r++) {
	            nucn[0][r] = ((cn1[0][r]*cn2[0][r])+(cn1[1][r]*cn2[1][r])) / ((cn2[0][r]*cn2[0][r]) + (cn2[1][r]*cn2[1][r]));
	            nucn[1][r] = ((cn1[1][r]*cn2[0][r])-(cn1[0][r]*cn2[1][r])) / ((cn2[0][r]*cn2[0][r]) + (cn2[1][r]*cn2[1][r]));
	        }
	        return nucn;
	    }
	}
	}
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	/**
	 * Fast Fourier Transform
	 * 1D-FFT/IFFT, 2D-FFT/IFFT (radix-2)
	 * 
	 * @author ryo / github.com/wellflat
	 * Based on https://github.com/wellflat/jslib with some tiny optimizations
	 */

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){
	    return{

	FFT: function() {
	  
	  var _n = 0,          // order
	      _bitrev = null,  // bit reversal table
	      _cstb = null;    // sin/cos table
	  var _tre, _tim;
	  
	  this.init = function (n) {
	    if(n !== 0 && (n & (n - 1)) === 0) {
	      _n = n;
	      _setVariables();
	      _makeBitReversal();
	      _makeCosSinTable();
	    } else {
	      throw new Error("init: radix-2 required");
	    }
	  }
	    
	  // 1D-FFT
	  this.fft1d = function (re, im) {
	    fft(re, im, 1);
	  }
	    
	  // 1D-IFFT
	  this.ifft1d = function (re, im) {
	    var n = 1/_n;
	    fft(re, im, -1);
	    for(var i=0; i<_n; i++) {
	      re[i] *= n;
	      im[i] *= n;
	    }
	  }
	  
	  // 2D-FFT
	  this.fft2d = function (re, im) {
	    var i = 0;
	    // x-axis
	    for(var y=0; y<_n; y++) {
	      i = y*_n;
	      for(var x1=0; x1<_n; x1++) {
	        _tre[x1] = re[x1 + i];
	        _tim[x1] = im[x1 + i];
	      }
	      this.fft1d(_tre, _tim);
	      for(var x2=0; x2<_n; x2++) {
	        re[x2 + i] = _tre[x2];
	        im[x2 + i] = _tim[x2];
	      }
	    }
	    // y-axis
	    for(var x=0; x<_n; x++) {
	      for(var y1=0; y1<_n; y1++) {
	        i = x + y1*_n;
	        _tre[y1] = re[i];
	        _tim[y1] = im[i];
	      }
	      this.fft1d(_tre, _tim);
	      for(var y2=0; y2<_n; y2++) {
	        i = x + y2*_n;
	        re[i] = _tre[y2];
	        im[i] = _tim[y2];
	      }
	    }
	  }
	  
	  // 2D-IFFT
	  this.ifft2d = function (re, im) {
	    var i = 0;
	    // x-axis
	    for(var y=0; y<_n; y++) {
	      i = y*_n;
	      for(var x1=0; x1<_n; x1++) {
	        _tre[x1] = re[x1 + i];
	        _tim[x1] = im[x1 + i];
	      }
	      this.ifft1d(_tre, _tim);
	      for(var x2=0; x2<_n; x2++) {
	        re[x2 + i] = _tre[x2];
	        im[x2 + i] = _tim[x2];
	      }
	    }
	    // y-axis
	    for(var x=0; x<_n; x++) {
	      for(var y1=0; y1<_n; y1++) {
	        i = x + y1*_n;
	        _tre[y1] = re[i];
	        _tim[y1] = im[i];
	      }
	      this.ifft1d(_tre, _tim);
	      for(var y2=0; y2<_n; y2++) {
	        i = x + y2*_n;
	        re[i] = _tre[y2];
	        im[i] = _tim[y2];
	      }
	    }
	  }
	  
	  // core operation of FFT
	  function fft(re, im, inv) {
	    var d, h, ik, m, tmp, wr, wi, xr, xi,
	        n4 = _n >> 2;
	    // bit reversal
	    for(var l=0; l<_n; l++) {
	      m = _bitrev[l];
	      if(l < m) {
	        tmp = re[l];
	        re[l] = re[m];
	        re[m] = tmp;
	        tmp = im[l];
	        im[l] = im[m];
	        im[m] = tmp;
	      }
	    }
	    // butterfly operation
	    for(var k=1; k<_n; k<<=1) {
	      h = 0;
	      d = _n/(k << 1);
	      for(var j=0; j<k; j++) {
	        wr = _cstb[h + n4];
	        wi = inv*_cstb[h];
	        for(var i=j; i<_n; i+=(k<<1)) {
	          ik = i + k;
	          xr = wr*re[ik] + wi*im[ik];
	          xi = wr*im[ik] - wi*re[ik];
	          re[ik] = re[i] - xr;
	          re[i] += xr;
	          im[ik] = im[i] - xi;
	          im[i] += xi;
	        }
	        h += d;
	      }
	    }
	  }
	  
	  // set variables
	  function _setVariables() {
	    if(typeof Uint8Array !== 'undefined') {
	      _bitrev = new Uint8Array(_n);
	    } else {
	      _bitrev = new Array(_n);
	    }
	    if(typeof Float64Array !== 'undefined') {
	      _cstb = new Float64Array(_n*1.25);
	      _tre = new Float64Array(_n*_n);
	      _tim = new Float64Array(_n*_n);
	    } else {
	      _cstb = new Array(_n*1.25);
	      _tre = new Array(_n*_n);
	      _tim = new Array(_n*_n);
	    }
	  }
	  
	  // make bit reversal table
	  function _makeBitReversal() {
	    var i = 0,
	        j = 0,
	        k = 0;
	    _bitrev[0] = 0;
	    while(++i < _n) {
	      k = _n >> 1;
	      while(k <= j) {
	        j -= k;
	        k >>= 1;
	      }
	      j += k;
	      _bitrev[i] = j;
	    }
	  }
	  
	  // make trigonometric function table
	  function _makeCosSinTable() {
	    var n2 = _n >> 1,
	        n4 = _n >> 2,
	        n8 = _n >> 3,
	        n2p4 = n2 + n4,
	        t = Math.sin(Math.PI/_n),
	        dc = 2*t*t,
	        ds = Math.sqrt(dc*(2 - dc)),
	        c = _cstb[n4] = 1,
	        s = _cstb[0] = 0;
	    t = 2*dc;
	    for(var i=1; i<n8; i++) {
	      c -= dc;
	      dc += t*c;
	      s += ds;
	      ds -= t*s;
	      _cstb[i] = s;
	      _cstb[n4 - i] = c;
	    }
	    if(n8 !== 0) {
	      _cstb[n8] = Math.sqrt(0.5);
	    }
	    for(var j=0; j<n4; j++) {
	      _cstb[n2 - j]  = _cstb[j];
	    }
	    for(var k=0; k<n2p4; k++) {
	      _cstb[k + n2] = -_cstb[k];
	    }
	  }
	}
	}}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
		return {
	"real": [1.5419219943717721, 0.40010880110578706, -0.79043641265342957, -1.2685464969238938, 0.39878117336167285, -1.0673489992245377, -0.079880838229404019, -0.45374680224191505, -0.043474097938900787, -0.31125662385352687, 0.17092430376098702, -0.29613086164846153, 0.5616469648110296, -1.559786848789493, 0.64513037997492662, -1.2899747976234162, 1.1761667998175334, -1.2899747976233551, 0.64513037997490474, -1.5597868487894897, 0.56164696481102505, -0.29613086164845964, 0.17092430376099094, -0.31125662385352959, -0.043474097938900787, -0.45374680224191177, -0.079880838229404658, -1.0673489992245357, 0.39878117336167307, -1.2685464969238942, -0.79043641265343012, 0.40010880110578717, -1.3820969331049027, 0.069560471269205768, -1.9786339579213206, -1.9807415717551982, -0.78667274410450883, -1.2217002325587256, -0.19150029104902774, -0.35131617290773243, -0.17646388464205803, -0.16672095020503441, -0.092298612924566523, -0.028899376452253527, -0.1314555696102146, -0.32892265898101813, -0.40987148655061206, 0.11741827111366547, -0.67254330182605138, -0.46007833291519956, -0.67215259521101001, -0.44871907432473013, -0.034749316729184583, 0.0055639281302433969, -0.17675902360981591, -0.26196208085032191, -0.36301254306387037, -0.33546767337818123, -0.6458889740799838, -1.1981932989987978, 0.12372650763830917, -1.4996172161865935, -2.4084298023013888, -2.0505291279591722, -1.7249706159518585, -2.277646289702639, -3.1259631743419591, -2.9656385065342015, -2.8480835086962011, -1.4260964500310189, -0.61792590829173544, -0.2611655301498782, -0.38519889843539723, -0.17511899827006483, -0.32808050503227176, 0.0076800871037463036, -0.18710828510427668, 0.1976534820339281, -0.55444453100465052, 0.14583567590328381, -0.69844971117515287, -0.90188577233526623, -0.53500016384583371, -0.044420751861669799, 0.014727914354086128, -0.28084584584371913, -0.29890408748685848, -0.39431380149336548, -0.39569215798819307, -0.74351999988258299, -0.82502198370631752, -1.851491897104155, -0.74302378668934244, 0.21156442062863762, -3.3061472495599986, -1.7990472945779568, -2.2193764251732282, -2.3438802466919251, -3.3615971067123311, -3.5383249085863708, -2.2639673745086588, -2.0271757806780748, -0.75242583405872232, -0.30143411016839378, -0.3625272253546275, -0.25489431004647689, -0.18928491561467081, -0.1179891518538482, 0.027920290231533224, -0.035472107498143821, -0.29008721857562259, -0.3604588674139817, -0.39156143807433802, -0.82222257402876564, -0.44979914971695928, -0.098136330355476253, 0.065628582466229365, -0.33607304327303128, -0.32161201323497779, -0.41856090178723965, -0.64028425429629054, -0.7766428172010218, -1.3946448661671447, -2.2603422126144683, -0.38769722219534525, -0.95341593939478653, -1.412952994959813, -2.3602336858020432, -1.2756392437278019, -2.0983496132652038, -2.5682454610054268, -2.8791053946930378, -2.1809972632688095, -0.84281293847776861, -0.75998936793718697, -0.18584599820380068, -0.30105748355308259, -0.16098142942852958, -0.13792125740417191, -0.089790022871128708, -0.12321821342876504, -0.1128661923016878, -0.3924098378001975, -0.5780902167586397, -0.48685989567066695, -0.53565359443296234, -0.051036689850526382, -0.0068547033925117689, -0.18963405157839419, -0.22514761090777807, -0.35555823460888908, -0.46670603976585517, -0.56179541485257889, -0.7495095888115163, -1.4772075422260349, -1.5836466114968029, -2.3846549454186694, -1.4884613952536236, -1.8237453905245253, -1.6712324532934877, -1.5169157844507295, -1.6930052820597281, -2.1023566589276004, -2.2062031109308458, -1.7945281756942255, -0.26457398838912649, 0.22038139379151148, -0.43479836723775234, -0.19830827357221226, -0.18018565146479498, -0.097060879184795737, -0.10088329756370379, -0.063069709957272527, -0.17970932516041177, -0.1943040732581543, -0.37970560392277619, -0.47302301606251812, -0.30366967948052181, -0.064732391018915397, -0.08902516330269715, -0.082000200083027344, -0.22965854401457736, -0.32035624605031326, -0.31836783196552437, -0.40132058236311119, -0.65601747033470859, -0.59040483751417483, -1.8503084663080034, -1.8694842425148914, -1.9326778896298584, -1.6301578422923519, -1.4332006785118301, -1.305707665299106, -1.364200787821644, -1.5357935460809622, -1.6161992336951241, -0.74003518668370516, -0.29423824173210689, 0.025934598230976654, -0.043349004411304674, -0.25408021803022468, -0.066965686484977499, -0.075717498698635255, 0.007057189465364498, -0.042171356658338113, -0.036938315661768008, -0.34221561581756049, -0.20400167508805764, -0.37417116097079772, -0.25039909487805356, -0.070874531394524931, -0.0569972852039487, -0.067238206950403182, -0.17397285212300442, -0.20428337307808273, -0.23651154356493315, -0.33356498933276568, -0.07339749754226077, -0.70367959806681601, -0.82403680021595049, -1.6058616381755235, -1.6192427030685497, -1.5705638815427956, -1.4659201063980019, -0.95504179549951018, -0.97237526162739873, -1.0460191987834688, -0.91465668941265721, -0.60548232361398524, 0.01898438364933451, -0.19419044456729498, -0.039627851124307223, 0.0012357796666701798, -0.078110822445325079, 0.0048626364920250518, -0.040449089662379589, -0.0035054269587873454, -0.13387544724730729, -0.10031131456276647, -0.25968674675684189, -0.20555329767005767, -0.26509289948725284, -0.038788452621647145, -0.076999891872251258, -0.071661433038976499, -0.14182240789719938, -0.1654673053291095, -0.19859450279267193, -0.053382326365810369, -0.2156585383674445, -0.045097357284793499, -0.62449818579949512, -0.92624906744917224, -1.0411254782363617, -1.122035196738675, -1.0607692164246043, -0.57723811773534028, -0.63187735896388075, -0.54813311204421922, -0.55320252101738743, -0.30197299587482401, -0.047213249757838388, 0.082808930467383288, -0.067715134483222431, -0.01022881748368659, 0.042038311258956552, -0.063371767399980669, 0.029161890169972702, -0.091396316586836127, -0.0034600735070754811, -0.12424052925006424, -0.24432996418012101, -0.26521664175359499, -0.22745980283820413, -0.14361316535317664, -0.00075904203100577935, -0.020936168457862139, -0.14205665196423617, -0.19024248288823023, -0.079686122362245204, -0.15016133237735926, 0.049598910651295514, -0.11760486834511712, -0.1837522251545049, -0.38594205494114608, -0.53542516436999843, -0.57340991730807989, -0.52753621424018138, -0.23151163972118355, -0.22295096919949259, -0.33704349161770436, -0.26165852514054583, -0.13898866968588663, 0.034596483191139484, -0.012631210076789067, 0.047371310076345617, -0.038651839330751551, -0.0019970761454430018, 0.063048845258375494, -0.1124891762554399, 0.08556992539656616, -0.21043659051868199, -0.19223333969456, -0.39082994830035861, -0.19294368007162721, -0.41025595439938572, -0.17178084419175166, -0.010933041190555012, -0.089512936152074493, -0.21569610281495066, -0.09144756671688016, -0.19525258909505316, -0.029753598134641936, -0.021307245660079924, 0.029087127940551009, 0.037511290653097842, -0.20600990120705839, -0.26967580750352926, -0.21000923681194664, -0.28209018858285628, -0.11925518789339556, -0.24869348141289982, -0.21025892926356746, -0.15567029136726124, -0.040546729108395907, -0.0050266153100547101, 0.030710887069787196, -0.0061104340245858278, 0.0369376092260571, -0.054862661367900321, 0.013297880203253048, 0.19659447375886394, -0.2499491329142558, -0.062959699002865757, -0.53055029095956008, -0.38784811281629444, -0.53891285075962392, -0.41886712861154285, -0.099230097260325875, -0.16474199810952628, -0.28693665642627014, -0.0095667980850221105, -0.32619954993450928, -0.08627491478166284, -0.073253161755714766, 0.015634174038690329, 0.082440536547531792, 0.025411878261881942, -0.11318909242737961, -0.1270560226842935, -0.21657212936164139, -0.13993873549611191, -0.37510275237622831, -0.26472923111076219, -0.24460131567533192, -0.14127652303494026, -0.050428686591045178, 0.041347840374190772, -0.0061780445153000636, 0.0073990345210250153, -0.014062739037014381, 0.14348925152561878, -0.015321787554403667, 0.0017746672356015968, 0.25165135427361052, -0.626463828190993, -0.48167134330805639, -1.045863293770664, -0.69512591788493194, -0.44532127384388254, -0.28479724025368391, -0.39470955087317983, 0.20227228344720469, -0.53909912073488953, -0.12025629051789474, -0.1899243750597305, -0.048474806721595133, 0.060764771353227762, 0.090648151782516159, 0.091608208912697275, 0.0036582478916540977, -0.22492530005263131, -0.27295314658024766, -0.35559738025257359, -0.62902925014412947, -0.57166411974881004, -0.37258895173129181, -0.22157638610464933, 0.022494427132080854, 0.014769425415166171, 0.003526808789406817, -0.011346909674078769, 0.050921170848348289, 0.090308541799219627, 0.37260817254533324, -0.25909871392159911, -0.42379280974334355, -0.095380647808568128, -1.1906083748893519, -0.78599914414892469, -0.95277914352730275, -0.63659778359422337, -0.98026015008952749, 0.48173198285916102, -0.60092009018055192, -0.10265418316164113, -0.39913639006279306, -0.17310908908773887, -0.0194191171632387, 0.054047965289179878, 0.1388529643463832, 0.15661099050145999, -0.10898263774416243, -0.33291231456737602, -0.59569027865888713, -0.69353081584948972, -1.0999707493347484, -0.74392084753736687, -0.49074781214158159, -0.065190556733852961, 0.012289768389229717, 0.024577513704595676, 0.0040302804696096322, 0.036047756292976456, 0.058236765637246286, 0.13893846256790621, 0.036944676036934632, 0.41686279554239464, -0.85232286388185818, -1.2988315127624981, -0.47352779677305168, -0.81763632541546793, -0.77384457803621831, -1.4256240004519281, 0.52588993532360684, -0.89821724022902683, 0.1591911967653899, -0.55046596772346867, -0.30980016041271019, -0.16709614007114884, -0.046029700131955266, 0.044793268150423983, 0.1689242242845459, 0.14412365934528507, -0.0088250071313367359, -0.36778545124666312, -0.79393844517732104, -1.1610479066529615, -0.76523210008850662, -0.63009858032048405, -0.13947023057344932, -0.017173105577524262, 0.039030007688455846, 0.014491273083805401, 0.039792542943837252, 0.054072846696920814, 0.11729310469925348, 0.053609281522667675, 0.0081549498718087084, -0.30910813452845548, 0.25944224899607843, -1.3584842180322938, -1.5885570490138659, -0.65759582794618221, -1.139869490652734, 0.70928264080594694, -1.9674198903133462, 0.37712664425406606, -0.84336038390578949, -0.47788074719428036, -0.18342000086663721, -0.18811394573901796, -0.055050027645985648, 0.045043056834335606, 0.11486303559854361, 0.22023958716404868, 0.14735402009444676, -0.27894427087197998, -0.73080536953129638, -0.76794305693297227, -0.37355919765840223, 0.12353986794322802, 0.090505348376311842, 0.14069908672094206, 0.087373214380278855, 0.023353946735568523, 0.031400559920396587, 0.079550230446202241, 0.084927161382185437, 0.040777158255349423, -0.16274954314482293, -0.41184413435479567, -0.71871288822574875, 0.55302907456342854, -1.5309493464500674, -2.9026104205694736, 0.42043303599508353, -1.7138106264793671, 0.29513888249127102, -1.2517216433630918, -0.66769942176516839, -0.28576739334390183, -0.24127777006787937, -0.10778095858902549, -0.036092425009198861, 0.021519213385077923, 0.13414694961717147, 0.16917378957839613, 0.17307922682581758, 0.076246758829015673, -0.047904835134272621, -0.27544262702406924, 0.61826249566563185, 0.26987423123693399, 0.2085883517320696, 0.26073426210721973, 0.12070625812911842, 0.062945582093309679, 0.083649573916505432, 0.049688095345785867, 0.019564357607843069, -0.046035817476596949, -0.13409074070830324, -0.49027201814294552, -0.47756457321420159, -0.74403675135427549, -0.3080068432033089, -0.043712438842705037, -4.735594317158907, -0.043712438842706695, -0.30800684320330962, -0.74403675135427572, -0.47756457321420304, -0.49027201814294813, -0.13409074070830412, -0.046035817476598156, 0.019564357607843069, 0.049688095345786006, 0.083649573916506056, 0.062945582093310845, 0.12070625812911921, 0.26073426210722073, 0.20858835173207019, 0.26987423123693399, -0.37355919765836759, -0.27544262702403433, -0.047904835134273127, 0.076246758829012523, 0.17307922682581853, 0.16917378957839499, 0.13414694961716844, 0.02151921338507657, -0.036092425009199861, -0.1077809585890261, -0.24127777006787943, -0.2857673933439015, -0.66769942176516905, -1.2517216433630949, 0.29513888249127429, -1.7138106264793713, 0.42043303599507681, -2.902610420569474, -1.5309493464500692, 0.55302907456342232, -0.71871288822575019, -0.41184413435479833, -0.16274954314482265, 0.04077715825534866, 0.08492716138218645, 0.079550230446203143, 0.031400559920398419, 0.023353946735571576, 0.08737321438028138, 0.14069908672095732, 0.090505348376334033, 0.1235398679432393, -0.76523210008847808, -0.76794305693296139, -0.73080536953128505, -0.27894427087197604, 0.1473540200944477, 0.22023958716404682, 0.11486303559854165, 0.045043056834333829, -0.055050027645986453, -0.18811394573901843, -0.18342000086663854, -0.47788074719428042, -0.84336038390579149, 0.37712664425406617, -1.9674198903133469, 0.70928264080593695, -1.1398694906527307, -0.65759582794619398, -1.588557049013867, -1.3584842180322987, 0.25944224899607732, -0.30910813452845781, 0.0081549498718086911, 0.053609281522667279, 0.11729310469925426, 0.054072846696921202, 0.039792542943838709, 0.014491273083807311, 0.039030007688458185, -0.017173105577517028, -0.13947023057343994, -0.63009858032045107, -1.0999707493347308, -1.1610479066529467, -0.79393844517731305, -0.3677854512466584, -0.0088250071313340107, 0.14412365934528559, 0.16892422428454401, 0.044793268150420118, -0.046029700131956147, -0.16709614007115095, -0.30980016041271097, -0.55046596772347045, 0.15919119676539073, -0.8982172402290286, 0.52588993532360329, -1.4256240004519327, -0.77384457803621687, -0.8176363254154656, -0.47352779677305679, -1.2988315127625027, -0.85232286388185829, 0.41686279554239525, 0.036944676036935756, 0.13893846256790574, 0.058236765637246675, 0.036047756292977066, 0.0040302804696111128, 0.02457751370459911, 0.012289768389232913, -0.065190556733844662, -0.49074781214156804, -0.74392084753735632, -0.62902925014412903, -0.69353081584948562, -0.59569027865888302, -0.33291231456737491, -0.10898263774416028, 0.15661099050145985, 0.13885296434638142, 0.054047965289177706, -0.019419117163239467, -0.17310908908773912, -0.39913639006279433, -0.10265418316163986, -0.60092009018055315, 0.48173198285915786, -0.98026015008952594, -0.63659778359422126, -0.9527791435273002, -0.78599914414892458, -1.190608374889349, -0.095380647808570002, -0.42379280974334488, -0.25909871392159683, 0.37260817254533357, 0.09030854179921953, 0.050921170848348372, -0.011346909674079158, 0.0035268087894081549, 0.014769425415168456, 0.022494427132082863, -0.22157638610464575, -0.37258895173129003, -0.5716641197488066, -0.37510275237622537, -0.35559738025257059, -0.27295314658024672, -0.22492530005262792, 0.0036582478916564426, 0.091608208912696387, 0.090648151782514966, 0.060764771353224882, -0.048474806721595647, -0.18992437505973167, -0.12025629051789351, -0.53909912073488875, 0.20227228344720258, -0.39470955087317799, -0.28479724025368247, -0.44532127384387832, -0.69512591788493272, -1.04586329377066, -0.48167134330805861, -0.62646382819099156, 0.25165135427361029, 0.0017746672356018336, -0.0153217875544032, 0.14348925152561842, -0.01406273903701487, 0.0073990345210243587, -0.0061780445152985596, 0.04134784037419488, -0.050428686591041855, -0.1412765230349349, -0.2446013156753272, -0.26472923111076024, -0.11925518789339257, -0.13993873549610955, -0.21657212936163839, -0.1270560226842922, -0.11318909242737903, 0.025411878261882927, 0.082440536547530169, 0.015634174038688685, -0.073253161755715501, -0.086274914781661965, -0.326199549934509, -0.0095667980850238903, -0.28693665642627003, -0.16474199810952764, -0.099230097260324029, -0.41886712861154318, -0.53891285075962314, -0.38784811281629461, -0.53055029095956219, -0.062959699002866631, -0.24994913291425488, 0.1965944737588636, 0.013297880203252755, -0.054862661367901897, 0.036937609226056677, -0.0061104340245862225, 0.030710887069788338, -0.005026615310052167, -0.040546729108393256, -0.15567029136725916, -0.21025892926356554, -0.24869348141289621, -0.23151163972117689, -0.28209018858284918, -0.21000923681193823, -0.26967580750352416, -0.20600990120705304, 0.037511290653099091, 0.029087127940549885, -0.02130724566008323, -0.029753598134642099, -0.19525258909505444, -0.091447566716882075, -0.21569610281495041, -0.089512936152075853, -0.010933041190555782, -0.17178084419175305, -0.41025595439938806, -0.19294368007162768, -0.39082994830036216, -0.19223333969456258, -0.21043659051868269, 0.085569925396567076, -0.11248917625543933, 0.063048845258374231, -0.0019970761454456269, -0.038651839330752197, 0.047371310076345617, -0.012631210076786959, 0.034596483191142599, -0.13898866968588444, -0.26165852514053983, -0.33704349161769737, -0.22295096919948695, -0.57723811773534028, -0.52753621424018138, -0.57340991730807944, -0.53542516436999865, -0.38594205494114614, -0.1837522251545064, -0.11760486834511884, 0.049598910651293758, -0.15016133237735926, -0.07968612236224891, -0.1902424828882312, -0.14205665196423831, -0.020936168457862579, -0.00075904203100844866, -0.14361316535317845, -0.2274598028382093, -0.26521664175359499, -0.24432996418012529, -0.12424052925006639, -0.0034600735070760831, -0.09139631658683596, 0.029161890169972428, -0.063371767399980516, 0.042038311258955005, -0.01022881748368659, -0.067715134483221959, 0.082808930467383746, -0.047213249757837236, -0.3019729958748239, -0.55320252101738743, -0.548133112044219, -0.63187735896388053, -0.95504179549950285, -1.060769216424599, -1.1220351967386673, -1.0411254782363524, -0.92624906744916458, -0.62449818579949246, -0.045097357284792555, -0.21565853836744897, -0.053382326365811708, -0.19859450279267432, -0.16546730532911214, -0.14182240789720132, -0.07166143303897729, -0.076999891872253062, -0.038788452621649434, -0.2650928994872585, -0.20555329767005678, -0.25968674675684078, -0.10031131456276626, -0.13387544724730568, -0.0035054269587865765, -0.040449089662379971, 0.0048626364920241281, -0.078110822445325467, 0.0012357796666695618, -0.039627851124306598, -0.19419044456729473, 0.018984383649339364, -0.60548232361397991, -0.91465668941264988, -1.0460191987834631, -0.97237526162739263, -1.3057076652991049, -1.4659201063979992, -1.5705638815427927, -1.6192427030685486, -1.6058616381755215, -0.82403680021595249, -0.70367959806681868, -0.073397497542269388, -0.33356498933276529, -0.23651154356493967, -0.2042833730780847, -0.17397285212300875, -0.067238206950403417, -0.056997285203952995, -0.070874531394526111, -0.25039909487805306, -0.37417116097079761, -0.20400167508805389, -0.34221561581755761, -0.036938315661763657, -0.042171356658337315, 0.0070571894653653896, -0.075717498698634964, -0.066965686484977194, -0.25408021803022474, -0.043349004411301621, 0.025934598230977574, -0.29423824173210122, -0.74003518668370272, -1.6161992336951192, -1.5357935460809593, -1.3642007878216427, -1.5169157844507262, -1.4332006785118279, -1.6301578422923491, -1.932677889629856, -1.8694842425148879, -1.8503084663080056, -0.59040483751417916, -0.65601747033471336, -0.40132058236311047, -0.31836783196552787, -0.32035624605031593, -0.22965854401457814, -0.082000200083028219, -0.089025163302698024, -0.064732391018913552, -0.30366967948051288, -0.4730230160625184, -0.37970560392275871, -0.19430407325814622, -0.1797093251603995, -0.063069709957271444, -0.10088329756370083, -0.097060879184794432, -0.18018565146479387, -0.19830827357221226, -0.43479836723774673, 0.22038139379151372, -0.26457398838911428, -1.79452817569422, -2.2062031109308391, -2.102356658927595, -1.6930052820597257, -1.2756392437278008, -1.6712324532934884, -1.8237453905245253, -1.4884613952536252, -2.384654945418673, -1.5836466114968115, -1.4772075422260404, -0.74950958881152596, -0.561795414852579, -0.46670603976586306, -0.35555823460889052, -0.22514761090777982, -0.18963405157839525, -0.0068547033925124142, -0.051036689850529192, -0.53565359443295624, -0.48685989567066656, -0.57809021675862349, -0.39240983780018618, -0.11286619230167973, -0.12321821342876334, -0.089790022871127112, -0.13792125740417074, -0.16098142942852883, -0.30105748355308298, -0.18584599820379807, -0.75998936793718352, -0.8428129384777584, -2.1809972632688073, -2.8791053946930352, -2.5682454610054237, -2.0983496132652038, -2.219376425173226, -2.3602336858020396, -1.4129529949598048, -0.95341593939478875, -0.38769722219534936, -2.2603422126144772, -1.394644866167148, -0.77664281720103345, -0.64028425429629032, -0.41856090178724664, -0.3216120132349809, -0.33607304327303461, 0.065628582466230781, -0.098136330355478765, -0.44979914971695495, -0.82222257402878096, -0.39156143807433802, -0.36045886741397631, -0.29008721857562392, -0.035472107498135542, 0.027920290231535812, -0.117989151853845, -0.1892849156146684, -0.25489431004647656, -0.3625272253546275, -0.30143411016838906, -0.75242583405872021, -2.0271757806780628, -2.2639673745086539, -3.5383249085863659, -3.361597106712324, -2.3438802466919229, -1.7249706159518579, -1.7990472945779559, -3.3061472495599995, 0.21156442062862166, -0.74302378668934399, -1.8514918971041745, -0.82502198370632651, -0.74351999988260331, -0.39569215798819279, -0.3943138014933833, -0.29890408748686254, -0.28084584584372846, 0.01472791435408881, -0.04442075186168376, -0.53500016384583715, -0.90188577233528688, -0.69844971117515353, 0.14583567590324595, -0.5544445310046473, 0.1976534820339324, -0.18710828510427244, 0.0076800871037496377, -0.32808050503226982, -0.17511899827005836, -0.38519889843539723, -0.26116553014987143, -0.61792590829173255, -1.4260964500310052, -2.8480835086962002, -2.9656385065341997, -3.1259631743419583, -2.2776462897026373, -1.3820969331049018, -2.0505291279591713, -2.4084298023013879, -1.4996172161865962, 0.12372650763830863, -1.1981932989988076, -0.64588897407998824, -0.33546767337818667, -0.36301254306387043, -0.26196208085033179, -0.17675902360982099, 0.0055639281302357606, -0.034749316729180774, -0.44871907432473696, -0.67215259521100923, -0.46007833291523831, -0.67254330182605182, 0.11741827111366224, -0.409871486550618, -0.32892265898101625, -0.13145556961021479, -0.028899376452251727, -0.092298612924564649, -0.16672095020503341, -0.17646388464205828, -0.35131617290772521, -0.19150029104902661, -1.2217002325587201, -0.7866727441045076, -1.9807415717551959, -1.978633957921319, 0.069560471269209931], 
	"bottom": 
		{
			"real": [4103.3252596935745, 31959.928439656338, 10854.934870050551, 5174.7646941682715, 2670.3793024702013, 1512.8812431609856, 751.72119813508266, 487.34157279751093, 286.27976884850017, 202.21445228809756, 139.363320073941, 96.326676625874271, 67.416513392704019, 55.036039361563731, 42.617455049491909, 37.327841235406673, 35.198800209060273, 37.327841235406588, 42.617455049491802, 55.036039361563766, 67.416513392704019, 96.326676625874285, 139.36332007394108, 202.21445228809804, 286.27976884850017, 487.34157279751093, 751.72119813508289, 1512.8812431609856, 2670.3793024702018, 5174.7646941682751, 10854.934870050551, 31959.928439656363, 12454.694619943468, 7821.5833902765553, 5473.1790170642225, 2925.2286142376206, 1403.2127508507554, 917.05530556073552, 556.73350878905819, 335.58154911349368, 222.7562369115075, 161.71079893305554, 119.4497628246793, 75.609007514321249, 55.496087080936569, 43.998829489125107, 34.725029965122339, 29.983374804996487, 29.187336608781969, 30.714909872552553, 33.135728528562289, 38.780040560556557, 50.11926248444739, 62.426609296740132, 93.916765363567279, 123.96413175241418, 177.16967383039952, 250.50030243800805, 399.94920918463373, 596.1485322845399, 914.24633406931139, 1871.6210271277439, 4518.4223121248042, 13565.815861293135, 16084.742683461694, 10028.519769850123, 2736.2851033168113, 1377.4551350842332, 614.08174831750455, 382.39730464420114, 237.0105878631189, 156.24359018004319, 129.95938769710136, 95.53783206710068, 72.004092864891931, 47.804301653843083, 38.41781199466849, 32.452048622414502, 26.753427300507923, 23.772936248165699, 23.138404805980134, 23.598476471031617, 24.755859033283485, 28.713323989162731, 33.395537201677122, 40.850586549891439, 58.649881806718739, 74.872968711973769, 93.465129226367807, 123.19419955144703, 174.75706127058839, 262.71291650117263, 321.82068054258934, 657.05253635266399, 2163.5932265202309, 10212.960963472207, 3792.0213246064613, 2759.3366542985627, 1627.1011647050395, 788.44977202016776, 362.8509317865861, 253.90720770691448, 163.04342130809295, 117.95146004773997, 90.766106703902594, 66.207745096840526, 48.204553381452804, 35.429206551568903, 28.049881805648454, 23.25027473117818, 20.778936642061399, 19.004228801577, 17.585642163629327, 17.698181326434501, 18.806836162280465, 20.329571180523736, 23.456998427374465, 27.472702254518477, 37.193120035742723, 49.117252584083957, 59.574829012615233, 73.59994664128709, 112.97176733843995, 181.91972084309376, 284.0343016488693, 486.29648203694052, 857.05287855361007, 2037.977143592303, 2057.7285052573056, 2152.5952706253152, 1395.1090523951752, 736.25297680000074, 343.98700964912916, 189.68478304615005, 127.37774106216496, 91.12789293157843, 73.667255133763959, 55.964360327653644, 39.482567042532949, 28.14219415335706, 21.278934963706885, 18.193385040510105, 16.473354788100497, 15.086583853495943, 14.403945056404867, 14.533202056236952, 15.306988390608382, 16.092687824041843, 18.097466979870337, 20.289280537832838, 26.201109009342694, 34.023571220637564, 41.620492531599325, 50.685682074964014, 82.560701981631325, 127.19888958323958, 237.89761616945128, 410.06312322518994, 1062.2303232610248, 1612.0404058137353, 2295.1409914972487, 1787.3905923922546, 1192.2295048012345, 614.24882525880628, 260.82616895243024, 126.23242010647614, 84.151076288810984, 67.709414992782712, 60.122571559472298, 42.830591238304876, 28.733103940874788, 20.365121706656215, 16.211112474155353, 14.072758594539286, 13.483685068827034, 12.859628868618824, 11.868475605254234, 11.903201306554562, 12.816996745648828, 13.065794209061782, 14.312459824747068, 16.296926608708432, 20.657711991677495, 27.653390070235432, 33.593110413967857, 40.672720076575544, 55.856624618502167, 103.16047843117397, 179.23484372919035, 453.7513605151255, 902.26285048256875, 1683.7179352249004, 1784.083505146898, 1577.4265763170067, 936.66309122894188, 441.20892337587179, 176.43359667751182, 98.093971741535682, 65.995944695036641, 53.240295707495449, 45.85166507919449, 32.407485359783081, 22.496202298890402, 16.965613714417799, 13.731573445856062, 12.28236966845588, 11.747735381447885, 11.213125876643861, 10.807806034266576, 10.840341477375139, 11.066245600125107, 11.119452781179984, 12.424913044930788, 14.610027556462221, 16.887227742677396, 22.29462391228396, 27.978157381323118, 31.991250392971789, 44.052658881876532, 76.109568327798371, 159.13944268405785, 318.39207128278571, 686.00323178071869, 1336.6568589814267, 1043.0649603599104, 984.78746182807288, 618.0395600950327, 289.32426118556657, 132.98214831862998, 71.520048430881175, 52.57629039600819, 41.525598741467476, 33.633912722813989, 27.031255662449681, 19.489513580793098, 14.812681614273632, 12.21137274400836, 10.893625186679536, 10.482989068673637, 10.105487112246305, 9.7116899243817354, 9.9488069804828818, 10.161347795217756, 10.513274350469635, 11.294150924355744, 12.914730156139361, 14.478861048855546, 19.021661277112585, 23.907610167423496, 27.23573455134931, 38.742976413983023, 62.869223125902629, 111.92503010834605, 213.21062569137553, 433.61330953226366, 726.70269845820769, 562.21861410525219, 539.290746631297, 362.9446461846826, 211.46669660189423, 107.79772661917396, 60.676668375567573, 41.743276533116536, 34.42369696468284, 31.26708433258414, 25.313030406949355, 18.452791878453507, 13.956644256748325, 11.043046695375654, 10.111101652499672, 9.4550360444473061, 9.2429593469396529, 8.9521911222399257, 9.2321124164010211, 9.1908041669169815, 9.5662827353227868, 10.506864865879585, 11.825879962774797, 13.52813582962821, 15.999059082232355, 19.794027285196304, 22.478845287715099, 32.163272384867753, 47.951984523863096, 81.309242866655126, 150.93744536633105, 263.84630525991662, 439.27951033199258, 309.78719189559973, 306.63257299287005, 244.19689848939953, 151.98869039704036, 91.330482004276163, 57.352753322013349, 38.709160706067429, 33.087086449001383, 29.826655436967027, 23.987725148031473, 16.89184234468231, 13.041947079601194, 10.535809562752126, 9.5359471621683909, 8.9374483496855426, 8.5672643122912326, 8.4572735895659434, 8.4602804400971099, 8.5543457526330293, 9.3823763336699937, 10.377230417708629, 11.799673812944503, 12.361176855966248, 14.786798351390814, 16.739331260686697, 20.590148031359199, 25.753571174908508, 38.382893067866803, 63.23013835373618, 105.62437218489313, 175.68359833526657, 256.05708017959813, 224.80770864957879, 228.96753655549054, 172.54966320095522, 116.26546821946491, 80.46990226978717, 53.844334876610212, 37.483534347728245, 31.075867215997253, 26.284110672635684, 20.645029038002825, 15.025930043703783, 11.738276392873866, 10.201438772469425, 8.8203445227279982, 8.4945509856995365, 8.1968728409344909, 8.1790777304419588, 7.908377156922052, 8.6785477295074038, 9.6473715156890378, 10.339435934253908, 10.728035799158873, 11.983620383388951, 13.687783504221503, 16.433795900162693, 18.309125668572698, 22.485075799802843, 31.764684376383052, 49.270779583367755, 77.729851956279916, 123.50059845139852, 179.77043479461938, 159.57955623939222, 154.53329869380329, 127.96891349444883, 91.96783661678981, 66.921744646417011, 48.818287955893446, 36.591061653526779, 27.834277069623926, 23.041902152181589, 18.358713894245302, 13.567338391039883, 11.281789781943191, 9.6038295455647198, 8.7333277563772516, 8.338123667351045, 7.8992088061869676, 7.7104322426775909, 7.9983869985641034, 8.5436438490902269, 9.4432158844800043, 9.7870344410918424, 10.423788563863184, 11.253535869282553, 13.327727562718719, 15.178485067808285, 17.337135682195893, 21.668177060872456, 29.324826866357235, 41.492753218636352, 60.042185621507166, 90.318134916215342, 130.8805255687621, 104.24612656823803, 108.8028525877362, 89.555745560157249, 69.785669575239666, 56.746590174428, 44.171218069814536, 32.39838941697333, 25.182252759236459, 21.610810960419155, 16.972539478480535, 13.238333358456819, 10.614964653675054, 9.3806927946307859, 8.7492814832421075, 8.135298996501481, 7.634398163782139, 7.4852869889479292, 7.8316993609624435, 8.3853957415274643, 9.2315742305614634, 9.8389441629514209, 10.386606043801919, 11.354519695989614, 13.10793814373473, 15.240615596988986, 17.58979203150065, 21.461767190818147, 26.661531554562984, 36.123337028978582, 50.320731869274383, 69.065609719997795, 87.442260857354199, 76.677643276575949, 72.689147636714068, 65.50785565022079, 58.297658406357961, 49.558598741148941, 39.192968104211104, 29.954333787314212, 23.9458863540046, 19.99476230299754, 16.735792774046942, 12.901585018586687, 10.289994503175569, 9.3977765822679924, 8.6704196287803228, 7.8828328381527575, 7.5341478839019471, 7.4312929200041102, 7.7985159766257679, 8.1869060912414078, 9.142118635191288, 9.830770779287306, 10.340589147553608, 11.281171263863113, 12.984935438318947, 15.107976469419242, 18.19770629294057, 20.668346478928893, 25.761496132514932, 32.251424266134499, 39.95295492008993, 51.369438078625848, 65.569299562662465, 55.468849468729523, 55.86542097352833, 55.101138782973663, 50.531848368674723, 43.701470536966781, 35.866381440857431, 28.439396618258566, 22.42863349391925, 18.945030358082761, 15.596977301337661, 12.206893729284205, 10.050508612628137, 9.5473939482322869, 8.6463276280830179, 7.910774588392556, 7.2755514089661562, 7.5482842032534565, 7.5443879419641391, 7.9636187803325598, 8.9922015447577355, 9.6351997849989068, 10.0402383165895, 11.706284711344862, 13.336194440398188, 15.639893484781382, 17.791763978880017, 20.83131115781941, 25.6818621728188, 31.387128642704546, 37.143166049555219, 44.038766386780296, 52.904506937405849, 48.059389050535145, 50.072432061388255, 49.115010315515249, 44.160423468831148, 38.440953181308423, 32.35840674752788, 26.251111011761232, 21.081922570464979, 17.515101530242855, 14.10261621013594, 11.438986216849498, 10.422223192105227, 9.76207732514108, 8.7746319169344158, 7.5939451837729885, 7.2605949806802883, 7.4766919496025244, 7.419064545103371, 8.0187357229163059, 8.9266344512172839, 9.6975643711848107, 10.35689464395745, 11.451859179394017, 13.10319606057651, 15.460942026724263, 18.825021564083144, 22.773162722002358, 26.906890973713775, 31.803276985208164, 37.82902190094245, 42.388788349798304, 44.620105679799558, 48.859277780953818, 46.136110292205181, 41.908361785717766, 39.521022744549988, 35.052294933716347, 29.181343166303421, 23.802472557875006, 19.955746539759069, 16.22743816874862, 13.086681034223906, 11.226909204888067, 10.616041272149978, 9.8385492842648201, 8.6563005846195669, 7.8952678290472065, 7.2762149925656852, 7.3094046208482961, 7.276214992565686, 7.8952678290472083, 8.656300584619574, 9.8385492842648219, 10.616041272149991, 11.226909204888063, 13.086681034223904, 16.22743816874862, 19.955746539759044, 23.802472557874989, 29.181343166303414, 35.052294933716361, 39.521022744549988, 41.908361785717766, 46.136110292205167, 48.059389050535053, 44.620105679799494, 42.388788349798226, 37.82902190094255, 31.803276985208186, 26.906890973713825, 22.773162722002368, 18.825021564083173, 15.460942026724263, 13.103196060576508, 11.451859179394024, 10.356894643957441, 9.6975643711848196, 8.9266344512172751, 8.0187357229163005, 7.4190645451033674, 7.4766919496025226, 7.2605949806802919, 7.5939451837729957, 8.7746319169344176, 9.7620773251410817, 10.42222319210523, 11.438986216849505, 14.102616210135931, 17.515101530242841, 21.081922570464972, 26.251111011761218, 32.358406747527845, 38.44095318130838, 44.160423468831063, 49.115010315515164, 50.072432061388007, 55.468849468729232, 52.90450693740565, 44.038766386780239, 37.143166049555234, 31.387128642704567, 25.681862172818796, 20.831311157819414, 17.79176397888002, 15.639893484781378, 13.336194440398192, 11.706284711344864, 10.040238316589498, 9.6351997849989122, 8.9922015447577301, 7.9636187803325527, 7.5443879419641293, 7.5482842032534556, 7.2755514089661553, 7.9107745883925578, 8.6463276280830215, 9.5473939482322869, 10.050508612628141, 12.206893729284213, 15.596977301337661, 18.945030358082761, 22.428633493919239, 28.439396618258566, 35.866381440857388, 43.70147053696676, 50.531848368674645, 55.101138782973628, 55.865420973528131, 76.677643276575822, 65.569299562662337, 51.369438078625784, 39.952954920090001, 32.251424266134514, 25.761496132514949, 20.668346478928903, 18.19770629294057, 15.107976469419244, 12.984935438318949, 11.28117126386311, 10.340589147553612, 9.8307707792872954, 9.1421186351912915, 8.1869060912414096, 7.7985159766257599, 7.4312929200041067, 7.5341478839019365, 7.882832838152761, 8.6704196287803175, 9.3977765822679942, 10.289994503175565, 12.901585018586699, 16.735792774046928, 19.99476230299755, 23.945886354004585, 29.954333787314209, 39.19296810421109, 49.55859874114887, 58.297658406357826, 65.507855650220662, 72.689147636713827, 104.24612656823788, 87.442260857354213, 69.065609719997752, 50.320731869274368, 36.123337028978554, 26.661531554563005, 21.461767190818144, 17.589792031500657, 15.24061559698899, 13.107938143734735, 11.354519695989618, 10.386606043801917, 9.8389441629514156, 9.2315742305614528, 8.3853957415274607, 7.8316993609624372, 7.4852869889479301, 7.6343981637821372, 8.1352989965014757, 8.7492814832421111, 9.3806927946307876, 10.614964653675061, 13.238333358456819, 16.972539478480542, 21.610810960419155, 25.182252759236462, 32.39838941697333, 44.171218069814465, 56.746590174427972, 69.785669575239609, 89.555745560157177, 108.80285258773613, 159.57955623939191, 130.8805255687619, 90.318134916215342, 60.042185621507201, 41.492753218636388, 29.32482686635726, 21.668177060872456, 17.3371356821959, 15.178485067808294, 13.327727562718726, 11.253535869282553, 10.423788563863175, 9.7870344410918424, 9.4432158844800025, 8.5436438490902233, 7.9983869985640963, 7.7104322426775891, 7.8992088061869596, 8.338123667351045, 8.7333277563772533, 9.6038295455647145, 11.281789781943189, 13.567338391039879, 18.358713894245295, 23.041902152181613, 27.834277069623926, 36.591061653526772, 48.818287955893382, 66.921744646416983, 91.967836616789555, 127.96891349444861, 154.53329869380323, 224.80770864957842, 179.77043479461912, 123.50059845139837, 77.729851956279958, 49.27077958336772, 31.764684376383045, 22.485075799802868, 18.309125668572733, 16.433795900162703, 13.6877835042215, 11.983620383388955, 10.72803579915886, 10.339435934253904, 9.6473715156890254, 8.6785477295073967, 7.9083771569220449, 8.1790777304419553, 8.1968728409344909, 8.4945509856995347, 8.8203445227279857, 10.201438772469423, 11.738276392873869, 15.02593004370379, 20.645029038002832, 26.284110672635681, 31.075867215997253, 37.483534347728245, 53.844334876610127, 80.46990226978717, 116.26546821946468, 172.54966320095502, 228.96753655548974, 309.78719189559854, 256.05708017959756, 175.68359833526623, 105.62437218489312, 63.230138353736059, 38.382893067866796, 25.753571174908501, 20.590148031359234, 16.739331260686704, 14.786798351390802, 12.361176855966249, 11.799673812944498, 10.377230417708628, 9.3823763336699955, 8.5543457526330204, 8.4602804400970992, 8.4572735895659417, 8.567264312291222, 8.9374483496855408, 9.5359471621683873, 10.535809562752121, 13.041947079601202, 16.891842344682331, 23.987725148031487, 29.826655436966995, 33.087086449001376, 38.709160706067401, 57.35275332201325, 91.33048200427605, 151.98869039703999, 244.19689848939879, 306.63257299286875, 562.21861410525219, 439.27951033199281, 263.84630525991662, 150.93744536633125, 81.309242866655154, 47.951984523863167, 32.163272384867753, 22.478845287715121, 19.794027285196304, 15.999059082232373, 13.528135829628219, 11.82587996277479, 10.50686486587958, 9.5662827353227868, 9.190804166916978, 9.2321124164010211, 8.9521911222399257, 9.2429593469396458, 9.4550360444473043, 10.111101652499666, 11.043046695375656, 13.956644256748326, 18.452791878453535, 25.313030406949409, 31.26708433258414, 34.423696964682833, 41.743276533116529, 60.676668375567509, 107.79772661917396, 211.46669660189391, 362.94464618468271, 539.29074663129688, 1043.064960359907, 726.70269845820621, 433.61330953226252, 213.21062569137561, 111.92503010834588, 62.869223125902685, 38.742976413983001, 27.235734551349324, 23.907610167423499, 19.021661277112635, 14.478861048855546, 12.91473015613936, 11.29415092435573, 10.513274350469626, 10.161347795217747, 9.9488069804828747, 9.7116899243817407, 10.105487112246305, 10.48298906867363, 10.893625186679529, 12.211372744008356, 14.812681614273641, 19.489513580793123, 27.031255662449723, 33.633912722813953, 41.52559874146754, 52.576290396008147, 71.520048430881019, 132.98214831862995, 289.32426118556515, 618.03956009503077, 984.7874618280689, 1784.0835051468939, 1336.6568589814267, 686.00323178071801, 318.39207128278593, 159.1394426840578, 76.109568327798428, 44.05265888187656, 31.991250392971853, 27.978157381323108, 22.294623912284028, 16.8872277426774, 14.610027556462216, 12.424913044930783, 11.119452781179971, 11.066245600125109, 10.840341477375128, 10.807806034266576, 11.213125876643852, 11.747735381447885, 12.282369668455885, 13.731573445856061, 16.965613714417831, 22.496202298890438, 32.407485359783124, 45.85166507919449, 53.24029570749542, 65.99594469503667, 98.093971741535469, 176.43359667751176, 441.208923375871, 936.66309122894131, 1577.4265763170022, 2295.1409914972464, 1683.7179352249, 902.26285048256875, 453.75136051512629, 179.23484372919026, 103.16047843117398, 55.856624618502074, 40.67272007657553, 33.59311041396785, 27.653390070235471, 20.65771199167747, 16.296926608708404, 14.312459824747059, 13.065794209061782, 12.816996745648842, 11.903201306554557, 11.868475605254236, 12.859628868618808, 13.483685068827036, 14.072758594539282, 16.21111247415536, 20.365121706656261, 28.733103940874788, 42.830591238304876, 60.122571559472277, 67.709414992782641, 84.151076288810941, 126.23242010647601, 260.82616895243001, 614.24882525880446, 1192.2295048012338, 1787.3905923922525, 2057.7285052573061, 1612.0404058137367, 1062.2303232610243, 410.06312322519068, 237.89761616945111, 127.19888958323968, 82.560701981631325, 50.685682074964042, 41.620492531599325, 34.023571220637599, 26.201109009342684, 20.289280537832823, 18.09746697987034, 16.092687824041846, 15.306988390608383, 14.533202056236956, 14.40394505640487, 15.086583853495929, 16.47335478810048, 18.193385040510101, 21.278934963706888, 28.142194153357082, 39.482567042533006, 55.964360327653644, 73.667255133763959, 91.127892931578486, 127.37774106216477, 189.68478304614982, 343.98700964912905, 736.25297679999983, 1395.1090523951759, 2152.5952706253147, 3792.0213246064582, 2037.977143592301, 857.05287855360893, 486.29648203694126, 284.03430164886925, 181.91972084309373, 112.97176733844, 73.599946641287119, 59.574829012615204, 49.117252584084042, 37.193120035742723, 27.472702254518456, 23.456998427374469, 20.329571180523697, 18.806836162280476, 17.698181326434526, 17.585642163629327, 19.004228801577025, 20.77893664206141, 23.250274731178163, 28.04988180564844, 35.429206551568925, 48.204553381452833, 66.207745096840512, 90.766106703902594, 117.95146004774013, 163.04342130809306, 253.90720770691391, 362.85093178658599, 788.44977202016594, 1627.1011647050398, 2759.3366542985605, 16084.742683461691, 10212.960963472211, 2163.5932265202296, 657.05253635266433, 321.82068054258923, 262.71291650117286, 174.75706127058845, 123.19419955144714, 93.465129226367836, 74.87296871197394, 58.649881806718732, 40.850586549891496, 33.395537201677108, 28.713323989162756, 24.755859033283489, 23.59847647103166, 23.138404805980127, 23.77293624816566, 26.753427300507926, 32.452048622414509, 38.417811994668497, 47.804301653843162, 72.004092864892002, 95.537832067100879, 129.95938769710136, 156.24359018004333, 237.01058786311899, 382.39730464420052, 614.08174831750478, 1377.4551350842296, 2736.2851033168104, 10028.51976985012, 12454.694619943462, 13565.815861293133, 4518.4223121248006, 1871.6210271277425, 914.24633406931184, 596.14853228454001, 399.94920918463339, 250.50030243800833, 177.16967383039946, 123.96413175241405, 93.91676536356745, 62.426609296740118, 50.119262484447404, 38.780040560556571, 33.135728528562332, 30.714909872552628, 29.187336608781973, 29.983374804996448, 34.725029965122346, 43.998829489125086, 55.496087080936618, 75.609007514321277, 119.44976282467937, 161.7107989330556, 222.75623691150756, 335.58154911349339, 556.73350878905831, 917.05530556073529, 1403.2127508507556, 2925.2286142376206, 5473.1790170642225, 7821.5833902765453], 
			"imag": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
		}, 
	"imag": [0.0, 1.2364045139795619, -1.417097645517349, -0.56399113050110405, 0.44612204752934542, -0.22857396866743723, -0.12233724123958876, -0.22175063370253431, -0.081847654478992143, -0.082144528420219798, -0.016319194688300422, -0.22782269816808789, -0.31553723757062957, -0.34627737582788948, 1.2289873494343531, 0.23714731979244019, 0.0, -0.23714731979246589, -1.2289873494343397, 0.34627737582788415, 0.31553723757063035, 0.2278226981680877, 0.01631919468830003, 0.082144528420217924, 0.081847654478992143, 0.22175063370252604, 0.12233724123959235, 0.22857396866743548, -0.4461220475293452, 0.56399113050110417, 1.4170976455173483, -1.2364045139795607, 1.3606412475160685, 1.4411916754234004, -0.33639737707180672, -0.40059289889731398, 0.077869450453742065, 0.11933000679564014, -0.37020072416606636, -0.12600631152419078, -0.29291723130603109, -0.050683391882318747, -0.2123566898458312, -0.16517843825664788, -0.37438920939802389, 0.24863698196016526, 0.3956337373323095, 0.63308466384569972, -0.42643957249522613, -0.28749903579454716, -0.42301568032975828, 0.27971623762695519, 0.37808744252168813, 0.15296582393741001, 0.10558339349178479, 0.088135922159038316, 0.16705843369252343, 0.44192642538865684, 0.29915225181421068, -0.047649837051313024, -0.91046045526812369, 2.0668504460046964, 1.0236217631956717, 0.095775027331123308, 0.74327388531916394, -0.034562131954570079, 0.86361123753821734, 0.14688086473050152, -0.48040960369964397, 0.72553155869356101, -0.87865322612555963, -0.4386512882244577, -0.48573187070285989, -0.32017932907631874, -0.2830749986604581, -0.26990648117356825, 0.02650526715020339, 0.070485969368273949, 0.54370981678608021, -0.067938463814195812, 0.03776680164210118, -0.5672727000472354, 0.70317235961628322, -0.021133356436660328, 0.38778419454697149, -0.021237638325898506, 0.22272564345822293, -0.028529610958430065, 0.38389116569218468, 0.54015192300945081, 0.60890484535134959, -0.58851980199844323, -0.44257995715790832, -0.31054780878465871, 0.29452233058397137, 1.4203730522981519, 0.55042973333868539, 1.0635980503754177, -0.33223282315731317, 0.34444399750770754, 1.4812987845914649, 0.28203486996779931, -0.50640814880924923, -0.63152717265524028, -0.629560147993244, -0.38143909917016799, -0.26024004494781861, -0.19111004712688462, -0.0074049384249937926, 0.048145781851611912, 0.1775395908501845, -0.010766872600667563, -0.30557543109041663, -0.12790446781789691, 0.26497067484017217, 0.49718432792560446, 0.10847923107858634, 0.18362798444374009, 0.075793328725680426, 0.060915837919074359, 0.19352569039908019, 0.72484131059467238, 0.44769863619371908, 0.65727781823869813, -2.7705947112358387, -1.8545676439466314, 1.2534804319442749, -0.33201271766592177, -0.88179245186152566, -0.49191197464707653, 0.25061306335904526, 0.36434278784189494, 1.1059306596340364, 0.5161851914994362, -0.56259342729123341, -0.79818525223670012, -0.50614275317411506, -0.33450192958610769, -0.24220392956380443, -0.29363217368931438, -0.008975674876931768, 0.015702042401798396, 0.0043287613096781611, 0.11769772351691517, 0.14847974776257877, -0.070404205425901215, 0.15992872157624444, 0.12352253662711207, 0.22950814490677918, 0.17507285276321555, 0.13747467644410705, -0.011397583876153142, 0.1103654239578318, 0.24404333943616102, 1.1434123865171273, -0.60566186502851971, -1.3365493166122577, -1.1338250057068979, -1.8155993788135394, -1.0591766157447149, -0.69010247253016843, -0.46612626705839738, -0.20353239335470796, 0.51663850122650623, 0.2659701357580968, -0.10657803670351902, -0.69730138646619577, -0.60106744735123385, -0.33542800506255299, -0.30564289179799509, -0.26672832014897818, -0.19552146385155383, -0.070818253229817343, 0.24716165183995586, 0.24871001073085031, 0.087906272749659523, -0.066392764898707615, 0.11463822183417864, -0.097387114548935505, 0.203187369929616, 0.14292038700683402, 0.20736891492564988, 0.013685307258532538, -0.024371827339033106, -0.07233585420108031, 0.49291782026044645, 0.048917424863979306, 0.2263553910474094, 0.10839909954530379, -1.1957108711898896, -1.074771579950879, -1.1175823884839045, -0.23901621577757862, -0.12877260884038383, 0.23623861798820722, 0.17111767858219226, 0.46208690546761177, -0.23679486634226876, -0.53178862418379869, -0.34021620386249335, -0.23658495591681358, -0.22275756609764855, -0.20572232603908905, -0.14494733127712761, 0.042569660785953992, 0.077733070765218709, 0.20558191361174552, 0.031719635617051253, -0.031869312918226284, 0.0092446671691655703, 0.056907964871031128, 0.0068114015565279478, 0.20608602740074444, 0.023033890597355222, 0.064944626021130644, -0.089711600875347838, 0.051877409795188095, -0.22207073062343796, 0.24248276916859771, 0.82932242402320455, -0.0013771249391571728, -0.059139017637367147, -0.22067925957890699, -0.040068334939789486, 0.30677005181582889, 0.34490255487274107, 0.22221882441368751, 0.30818729583490434, 0.041656273199714877, 0.04389672863559383, -0.30032839778423015, -0.24246246508902861, -0.17809969240648099, -0.14126159805998126, -0.15553553242798068, -0.11510723629505018, 0.024565620333015844, 0.099324973861333238, 0.11314958231531824, 0.10920785431914558, -0.0027478677647314949, -0.002197448124614016, -0.069940656171551499, 0.14656177726216579, 0.078770189361086429, 0.10241250352514093, -0.021646587213105684, 0.019211160710794505, -0.26281055993233693, -0.055146819140509458, 0.35375643597531126, 0.22411418130009836, 0.3875457037899096, 0.25423051056794166, 0.30581901500051717, 0.085911462662090085, 0.39107302489471046, 0.24699055160378858, 0.29387297238508514, 0.15373347718831995, -0.002984582508486469, -0.017260207971634491, 0.072827255227658205, -0.062089135258224848, -0.11929552297831249, -0.14454547803177953, -0.095268264507681985, -0.10089614648569632, 0.048761457544342565, 0.09609679137720413, 0.10529567915508571, 0.012037966893712556, 0.076343100588013288, -0.20546035926376272, 0.13459193297647368, 0.025732944443593878, 0.15693288111736364, 0.043761647973181578, 0.083479299629684353, -0.15251693996845875, -0.10657849804550705, 0.038641816351084518, -0.10231188547257405, 0.21957600785318707, 0.264774413728534, 0.35686545376814865, 0.29428485506006929, 0.49934135456989248, 0.18285689914378289, 0.23675610338446562, 0.10353827744151976, 0.063107949091445251, 0.03846587209017991, 0.13661717625997899, 0.098122755354854277, -0.0039906200934582137, -0.09009439550122221, -0.16647262366552176, -0.19237746196753996, 0.026647194061990561, 0.048509383863749068, 0.1654716680991411, -0.035914795239386038, 0.099273739290017232, -0.11264804489487676, 0.14792025966567318, -0.093791526140286519, 0.10021979561886898, 0.0080449729031339574, 0.25399382193861558, -0.10951630791791984, -0.033548122233328939, -0.024275040060575473, -0.15565555640319179, -0.035231426543991154, 0.063485173587351437, 0.22814734409189322, 0.10684932807789806, 0.2355554633425988, 0.10407564589066262, 0.015525256999673128, -0.011913601076877599, -0.0039295920043740662, 0.044701593559494178, 0.16547295203389104, 0.15907957720488838, 0.074664630781852093, -0.04243906497357175, -0.11246394245376416, -0.16972427151540079, -0.21530290856092721, -0.15195750501651711, 0.40553391670472716, -0.05507255324487554, 0.18488826926783164, -0.03502892748503212, 0.37001387119519319, -0.15325722566754377, 0.27168929694820759, -0.059701216280397838, 0.48380889084850937, -0.13017614472815323, 0.047673421329954523, 0.071305584258896423, -0.15733503034508964, -0.079593566039511662, -0.075485820780456944, 0.06620598245919887, -0.0012785498169557718, 0.063827392702187832, -0.0024400785561267094, 0.050942947866382475, -0.16777938781510365, -0.092876049496631446, -0.010378011540593757, 0.1594331602275639, 0.19523869399925237, 0.18464942262011227, 0.063285121982437173, -0.077221658551183223, -0.1491589460269398, -0.17912928670535297, -0.11490318286815507, -0.11189726101521234, -0.20487634390276235, 0.76498375921014561, -0.23800865420158882, 0.74083633586796371, -0.083846748018997191, 0.46372256496136105, -0.16834959597660981, 0.80860396068755125, -0.25555617026146216, 0.19463913189037535, 0.30097794980879877, -0.16302064990391507, -0.10690976611351247, -0.13497815095121923, -0.049772201284698683, -0.079451894223961053, 0.040407604161455342, -0.09194915079908203, -0.14731166465811507, -0.26499922119954511, -0.15560186997026057, -0.069496867327866862, 0.16530147427910571, 0.22324548858793775, 0.26718136730575287, 0.19166419512490171, 0.060936923017668537, -0.088626234734120041, -0.14658150061325853, -0.15988330961851069, -0.18630425886720847, 0.20226767939927157, -0.086142375874942501, -0.77766311308853053, 1.4090153420038987, -0.3038886842868152, 1.2888777036518135, -0.074470758177722834, 1.2482190395029773, -0.80123249840125998, 0.47055407026248136, 0.75577199845745624, -0.11037652666672627, -0.054458369263067428, -0.19918107544886771, -0.10899116252888987, -0.15332031366957818, 0.043654486348545761, -0.022154991408309264, -0.15239448898889341, -0.19372066727324463, -0.023769000914279543, 0.24457812931884867, 0.51722906014629877, 0.4305115414461968, 0.4535547011943914, 0.3493581281435395, 0.21076698450898321, 0.063956239140020049, -0.043266091906771414, -0.12307402164456596, -0.17588597679362872, -0.057160335632577657, -0.0784239564694168, 0.14377922602722487, -0.28610637890062873, -1.3867297053543113, 2.7076021550256568, -0.12637740826622818, 2.0046873376560574, -1.442367549533677, 0.41516901914168741, 1.1637625900709285, 0.02187980097289477, 0.2119473473283329, -0.11885489129254229, -0.1159981397382039, -0.18899269201836941, -0.058557612447368006, -0.043992442353640485, -0.026879139952720663, -0.019298206516241499, 0.11425895652801879, -0.10204731321609413, 1.0976378910336273, 0.78083298172023552, 0.7892686156410853, 0.65585934200294294, 0.41963945036689065, 0.21495377802894691, 0.10907743849349204, -0.015003791740152183, -0.098108352324783196, -0.099983461914768382, -0.14074054993981988, -0.049222223079134708, -0.60225632344115432, 0.14822551318702831, -0.20779420774376042, -2.0348285284263787, 4.0251861194251459, -2.7420491756647705, 0.80731183784095106, 1.5256751899261984, -0.015777910213839702, 0.56481061463658855, 0.094745090670160736, 0.032305441115857418, -0.15496296066268442, -0.070898922964745509, -0.15185446167165811, -0.099013378837322308, -0.033839198092832617, 0.20170996830425536, 0.31395340400286426, 0.91804938453195506, 0.90837480132247328, 1.1212514777242175, 0.8111537128593137, 0.65461252772518352, 0.44812018281017851, 0.29338133862249183, 0.080942506543726575, -0.0048876135806632161, -0.042045437831147933, -0.048279129686226115, -0.13748504879992385, -0.22867414001479172, -0.65206021382919555, -1.4414816884582773, 0.34900156189272369, 1.2663064061664397, -4.4519069438082273, 2.3981175155339263, 2.0366543361516527, -0.11574419894478603, 0.9938253915317542, 0.40253059498542132, 0.29787521235777348, -0.048128801274628118, 0.001834095689180732, -0.063578064856638958, -0.14911097873279969, -0.17638384543546787, -0.15061392115741762, -0.13638564133647435, 0.3292785127452974, 0.45646012748955422, 0.0, -0.098380202448484569, 0.2889284460821786, 0.39981384774007012, 0.45036129401449043, 0.22152969012775114, 0.11073273247786891, 0.024117745722163984, -0.0050280129542534689, -0.087106960572679512, -0.083653448195472838, -0.51521426958714545, -0.86124262209127589, -0.78939851130304506, -0.74423225935393889, -1.1208061672534484, 0.0, 1.1208061672534437, 0.74423225935393811, 0.78939851130304262, 0.86124262209127656, 0.51521426958714389, 0.083653448195472491, 0.087106960572679332, 0.0050280129542534689, -0.02411774572216354, -0.11073273247786865, -0.22152969012775126, -0.45036129401449054, -0.39981384774006945, -0.28892844608217838, 0.098380202448484236, -0.90837480132241455, -0.45646012748952708, -0.32927851274525655, 0.13638564133649642, 0.15061392115742586, 0.17638384543547556, 0.14911097873280194, 0.063578064856639402, -0.0018340956891807838, 0.048128801274627743, -0.29787521235777292, -0.40253059498541977, -0.99382539153175098, 0.11574419894478773, -2.0366543361516536, -2.3981175155339201, 4.4519069438082379, -1.2663064061664346, -0.34900156189272086, 1.4414816884582851, 0.65206021382919577, 0.22867414001479336, 0.13748504879992438, 0.048279129686228148, 0.042045437831148495, 0.0048876135806649092, -0.08094250654372509, -0.29338133862248678, -0.44812018281017507, -0.6546125277251672, -0.81115371285928006, -1.1212514777241573, -1.0976378910335893, -0.91804938453192131, -0.31395340400284805, -0.20170996830424559, 0.033839198092839695, 0.09901337883732686, 0.1518544616716597, 0.070898922964745925, 0.15496296066268506, -0.032305441115858605, -0.09474509067015939, -0.56481061463658966, 0.01577791021384034, -1.5256751899262007, -0.80731183784094906, 2.7420491756647789, -4.0251861194251397, 2.0348285284263898, 0.20779420774376556, -0.14822551318702654, 0.60225632344115643, 0.049222223079135728, 0.14074054993982205, 0.099983461914770352, 0.098108352324783543, 0.015003791740153814, -0.10907743849349157, -0.21495377802894516, -0.41963945036688871, -0.65585934200294016, -0.78926861564106898, -0.78083298172020743, -0.24457812931883488, 0.10204731321609872, -0.11425895652800651, 0.019298206516249916, 0.026879139952725083, 0.04399244235364598, 0.058557612447370934, 0.18899269201837068, 0.11599813973820411, 0.11885489129254237, -0.21194734732833254, -0.021879800972893531, -1.1637625900709312, -0.4151690191416833, 1.4423675495336772, -2.0046873376560503, 0.12637740826623128, -2.7076021550256497, 1.3867297053543175, 0.28610637890063351, -0.14377922602722601, 0.078423956469422018, 0.057160335632579121, 0.1758859767936318, 0.12307402164456618, 0.043266091906772712, -0.063956239140019508, -0.21076698450897985, -0.34935812814353639, -0.45355470119438479, -0.43051154144618958, -0.51722906014628944, 0.15560186997025938, 0.02376900091427863, 0.1937206672732435, 0.15239448898889424, 0.022154991408310377, -0.043654486348542874, 0.15332031366958024, 0.10899116252889095, 0.19918107544886771, 0.054458369263066984, 0.11037652666672665, -0.75577199845745313, -0.47055407026248092, 0.80123249840126409, -1.2482190395029769, 0.074470758177730939, -1.2888777036518133, 0.30388868428682408, -1.4090153420038936, 0.77766311308853486, 0.086142375874943722, -0.20226767939927121, 0.18630425886721039, 0.15988330961851227, 0.14658150061325848, 0.088626234734120221, -0.060936923017667906, -0.19166419512490052, -0.26718136730575015, -0.22324548858793625, -0.16530147427910316, 0.069496867327866751, 0.16777938781510615, 0.26499922119954472, 0.14731166465811715, 0.091949150799082904, -0.040407604161453857, 0.07945189422396387, 0.049772201284700876, 0.13497815095122018, 0.10690976611351256, 0.16302064990391416, -0.30097794980879811, -0.19463913189037552, 0.25555617026146371, -0.80860396068754914, 0.16834959597661264, -0.46372256496135666, 0.083846748018996636, -0.7408363358679616, 0.23800865420159104, -0.76498375921014483, 0.20487634390276502, 0.11189726101521356, 0.11490318286815554, 0.17912928670535491, 0.14915894602693922, 0.077221658551183403, -0.063285121982436826, -0.18464942262010964, -0.19523869399925042, -0.15943316022756263, 0.01037801154059478, 0.09287604949663382, -0.015525256999667727, -0.050942947866376924, 0.0024400785561280833, -0.06382739270218761, 0.0012785498169549515, -0.066205982459197621, 0.075485820780458165, 0.079593566039511995, 0.1573350303450895, -0.071305584258897034, -0.047673421329955501, 0.13017614472815361, -0.48380889084851014, 0.05970121628039872, -0.27168929694820493, 0.1532572256675474, -0.37001387119519286, 0.035028927485033709, -0.18488826926782947, 0.055072553244877351, -0.40553391670472771, 0.15195750501651886, 0.21530290856092779, 0.16972427151540051, 0.11246394245376394, 0.042439064973571687, -0.07466463078185144, -0.159079577204887, -0.16547295203388937, -0.044701593559494109, 0.0039295920043746378, 0.011913601076878649, -0.18285689914377989, -0.10407564589066134, -0.23555546334259525, -0.10684932807789757, -0.22814734409189458, -0.063485173587349258, 0.035231426543992535, 0.15565555640319106, 0.02427504006057549, 0.033548122233326282, 0.10951630791791925, -0.25399382193861758, -0.0080449729031340841, -0.10021979561886678, 0.093791526140288961, -0.14792025966567243, 0.11264804489487593, -0.099273739290014568, 0.035914795239387988, -0.16547166809914049, -0.048509383863747611, -0.02664719406199113, 0.19237746196754099, 0.16647262366552154, 0.090094395501221572, 0.0039906200934596249, -0.098122755354853444, -0.1366171762599761, -0.038465872090180271, -0.063107949091446403, -0.10353827744152141, -0.2367561033844639, -0.39107302489471046, -0.4993413545698927, -0.29428485506006952, -0.35686545376814893, -0.26477441372853422, -0.21957600785318782, 0.10231188547257429, -0.038641816351083894, 0.10657849804550705, 0.15251693996845886, -0.083479299629685352, -0.043761647973181945, -0.1569328811173635, -0.025732944443590922, -0.13459193297646968, 0.2054603592637699, -0.076343100588013288, -0.012037966893705314, -0.10529567915508307, -0.096096791377201118, -0.048761457544342024, 0.10089614648569795, 0.095268264507682401, 0.14454547803178003, 0.11929552297831249, 0.062089135258225896, -0.072827255227657164, 0.017260207971635976, 0.0029845825084865137, -0.15373347718831978, -0.29387297238508514, -0.24699055160378858, -0.30677005181583211, -0.085911462662095636, -0.30581901500051922, -0.25423051056794305, -0.38754570378991321, -0.22411418130009808, -0.35375643597530843, 0.055146819140510416, 0.26281055993233621, -0.019211160710796572, 0.021646587213104713, -0.10241250352514171, -0.078770189361086179, -0.14656177726216213, 0.06994065617155748, 0.0021974481246246629, 0.002747867764730379, -0.10920785431913549, -0.11314958231531393, -0.099324973861329505, -0.024565620333014605, 0.11510723629505158, 0.15553553242798132, 0.1412615980599799, 0.1780996924064803, 0.24246246508902825, 0.30032839778422799, -0.043896728635589223, -0.041656273199716369, -0.30818729583490695, -0.22221882441369153, -0.34490255487274391, 0.23901621577757753, 0.040068334939789153, 0.22067925957890494, 0.059139017637366363, 0.0013771249391555669, -0.82932242402320322, -0.24248276916859551, 0.2220707306234446, -0.05187740979518813, 0.089711600875348782, -0.064944626021130755, -0.023033890597353883, -0.20608602740074317, -0.0068114015565181726, -0.056907964871020393, -0.0092446671691440163, 0.031869312918224861, -0.031719635617030659, -0.20558191361174011, -0.077733070765210868, -0.042569660785952056, 0.14494733127713064, 0.20572232603908944, 0.22275756609764749, 0.23658495591681294, 0.34021620386249518, 0.53178862418379935, 0.23679486634227159, -0.4620869054676115, -0.17111767858219507, -0.23623861798820922, 0.12877260884038208, 0.69010247253016699, 1.1175823884838996, 1.0747715799508781, 1.1957108711898863, -0.10839909954530788, -0.2263553910474054, -0.048917424863973949, -0.49291782026044056, 0.072335854201080588, 0.024371827339035017, -0.013685307258532536, -0.20736891492564691, -0.14292038700683141, -0.20318736992960118, 0.09738711454895084, -0.11463822183415182, 0.066392764898706338, -0.087906272749638886, -0.24871001073084317, -0.24716165183994784, 0.070818253229819925, 0.19552146385155544, 0.2667283201489779, 0.30564289179799059, 0.3354280050625516, 0.60106744735122974, 0.69730138646619622, 0.10657803670352221, -0.26597013575809814, -0.51663850122651156, 0.20353239335470413, 0.46612626705839527, 0.88179245186152555, 1.0591766157447142, 1.8155993788135401, 1.1338250057069015, 1.3365493166122591, 0.60566186502852537, -1.1434123865171271, -0.24404333943615408, -0.11036542395783162, 0.011397583876152599, -0.13747467644410641, -0.17507285276321236, -0.22950814490677501, -0.12352253662709391, -0.15992872157622667, 0.070404205425931329, -0.14847974776257952, -0.11769772351689584, -0.0043287613096706385, -0.01570204240179094, 0.0089756748769360926, 0.29363217368931571, 0.24220392956380496, 0.33450192958610414, 0.50614275317411517, 0.79818525223669812, 0.56259342729123207, -0.51618519149943443, -1.105930659634037, -0.36434278784189805, -0.25061306335904537, 0.49191197464707476, -0.55042973333868328, 0.33201271766592266, -1.2534804319442674, 1.8545676439466376, 2.7705947112358396, -0.65727781823869658, -0.44769863619371453, -0.72484131059467105, -0.19352569039907921, -0.06091583791907576, -0.075793328725683354, -0.18362798444373865, -0.10847923107858076, -0.4971843279255892, -0.26497067484015147, 0.12790446781792791, 0.30557543109041591, 0.010766872600696822, -0.17753959085018053, -0.04814578185160058, 0.007404938424997059, 0.19111004712688809, 0.26024004494781799, 0.38143909917016594, 0.62956014799324345, 0.63152717265524094, 0.50640814880924734, -0.28203486996779953, -1.481298784591466, -0.34444399750770943, 0.33223282315731145, -1.0635980503754157, -0.74327388531916416, -1.4203730522981521, -0.29452233058397176, 0.31054780878465887, 0.4425799571579111, 0.58851980199844711, -0.60890484535134703, -0.54015192300944392, -0.38389116569218451, 0.02852961095842791, -0.22272564345822352, 0.021237638325899852, -0.387784194546968, 0.021133356436687064, -0.70317235961626101, 0.56727270004732033, -0.037766801642101375, 0.06793846381428098, -0.54370981678606445, -0.070485969368251203, -0.02650526715020184, 0.26990648117357596, 0.2830749986604576, 0.32017932907632218, 0.48573187070286, 0.4386512882244713, 0.87865322612556163, -0.72553155869355623, 0.48040960369964236, -0.14688086473049994, -0.86361123753821778, 0.034562131954569586, -1.3606412475160699, -0.095775027331125598, -1.0236217631956728, -2.0668504460046977, 0.91046045526812469, 0.047649837051312177, -0.29915225181420874, -0.44192642538866073, -0.16705843369252318, -0.088135922159037081, -0.1055833934917848, -0.15296582393740679, -0.37808744252168625, -0.27971623762694292, 0.42301568032977793, 0.28749903579456393, 0.42643957249522774, -0.63308466384561635, -0.39563373733228846, -0.2486369819601503, 0.37438920939802361, 0.1651784382566546, 0.21235668984583117, 0.050683391882319691, 0.2929172313060312, 0.12600631152419559, 0.37020072416606892, -0.11933000679563836, -0.077869450453742661, 0.40059289889731342, 0.33639737707180556, -1.4411916754233998],
	"height": 32, 
	"width": 32,
	"top": 
		{
			"real": [6327.0074679827858, 12787.448651417644, -8580.1357782693794, -6564.4296251926053, 1064.8969915597925, -1614.7722808334524, -60.048119421842308, -221.12968025641604, -12.445754708845573, -62.940587713583341, 23.820578453457951, -28.525301748952867, 37.864280125154337, -85.844490405627994, 27.493814969643068, -48.151974443362732, 41.399660199307142, -48.151974443360345, 27.493814969642067, -85.844490405627866, 37.864280125154032, -28.525301748952689, 23.820578453458509, -62.940587713584037, -12.445754708845573, -221.12968025641445, -60.048119421842806, -1614.7722808334493, 1064.8969915597932, -6564.4296251926125, -8580.1357782693849, 12787.448651417659, -17213.595236981997, 544.07302669902936, -10829.417860945707, -5794.1219231083051, -1103.8692252742003, -1120.3666800727638, -106.61462896985108, -117.89522553300084, -39.308430893651213, -26.960578056534288, -11.025047422886351, -2.1850531713376355, -7.2952697383625882, -14.472211987615461, -14.23279965231924, 3.5205960317557246, -19.629747734378611, -14.131264529804582, -22.272265924680642, -17.401343902608428, -1.7416101263052008, 0.34733716754184635, -16.60063574625633, -32.47390190466588, -64.31481385096977, -84.034753639409303, -258.32278440436392, -714.30117659130417, 113.1165060355228, -2806.7151144576005, -10882.302955904926, -27817.100568112113, -27745.708494118069, -22841.420845008699, -8553.5264674688351, -4085.033989629072, -1748.9561003744159, -545.33543865452532, -146.45498278007594, -40.805440061891282, -50.060212982262158, -16.730489448484349, -23.62313915150434, 0.36714120063527833, -7.1882909197809326, 6.4142604093545659, -14.833291452397129, 3.4669422259569203, -16.161012153790594, -21.283130178011959, -13.244388638951026, -1.2754674400463286, 0.49184661171499777, -11.472717532816317, -17.530689402649369, -29.523444921912187, -36.983418680226812, -91.597351236026796, -144.17841735614732, -486.41083616652156, -239.1204206916959, 139.00893917602821, -7153.1577950265046, -18373.599790964956, -8415.9227315857388, -6467.5546779833858, -5469.6585676007244, -2789.7914675082047, -821.48267137489768, -514.71454200305448, -122.6780822655295, -35.554593402553344, -32.905184819607861, -16.875977506192179, -9.1243948190511883, -4.1802620318744168, 0.78316084097390803, -0.82473624462572925, -6.0277039354546789, -6.8502427898926159, -6.8858593350514123, -14.551844205848809, -8.4592989146599145, -1.9950695133570466, 1.5394495557011576, -9.232834653609892, -11.961754213185406, -20.558561534905806, -38.14482496917136, -57.160869905334089, -157.5554953403844, -411.20082432868492, -110.11930975746139, -463.64281724562954, -1210.9754315912523, -4810.1023052011815, -2624.9192342435695, -4516.897453633137, -3582.982491421491, -2119.7499173636902, -750.23472664477231, -159.86878938364373, -96.805728919101412, -16.935754226078267, -22.178078450833883, -9.0092227225989756, -5.4454852920506616, -2.5268882566736748, -2.6219523498948458, -2.0534180946008638, -6.4643064804236223, -8.7214065300148622, -7.0127031874072934, -7.7847619200438425, -0.78121801903708787, -0.11031060182209244, -3.4318959866990171, -4.568083040130742, -9.3160200641569482, -15.87900618307528, -23.382201868158507, -37.989404730637517, -121.95929165874175, -201.43809047465336, -567.30372690179445, -610.36312853782476, -1937.2376557226703, -2694.0942422163184, -3481.5355975420739, -3026.0617140239533, -2506.4916383888308, -1355.1576691715959, -468.0599091435185, -33.397814851582154, 18.545331481583979, -29.439943085485314, -11.922803368680741, -7.7174579848963036, -2.7888603302094261, -2.0545006330536419, -1.0224301618297007, -2.5290059501700397, -2.6199349314032494, -4.8828731457816774, -5.6140621268617785, -3.6146413255535528, -0.82967484502750599, -1.1631844631411599, -1.1736245693095499, -3.7427284368684024, -6.6178270656423424, -8.8039498431578131, -13.481606634721874, -26.682014936266803, -32.97802138197703, -190.87870662958537, -335.07671606134033, -876.95522185704988, -1470.8308615232113, -2413.1056871868645, -2329.4915082040015, -2151.9265781424592, -1438.5211303616525, -713.08152385953474, -130.56706965452, -28.862997769748436, 1.7115783105395304, -2.3079138134833856, -11.650001060370576, -2.1701895043697319, -1.7033561682904694, 0.11972955037883275, -0.5790790812653609, -0.45369004788794814, -4.0202584980239315, -2.2874964618085922, -4.0439693313887179, -2.7144116941037568, -0.78431497120559035, -0.63377862148075614, -0.83542887465582039, -2.5417481635934216, -3.4497798452119151, -5.2729359146939485, -9.3325337684514853, -2.3480777220919959, -30.998957295773433, -62.717085150656224, -255.55592612696097, -515.55403813953228, -1077.4118984564277, -1959.4321649356718, -996.17063256475433, -957.58296584245431, -646.48124546709357, -264.63237090275328, -80.518340163143705, 1.3577640380308329, -10.209813205700032, -1.6455702447745924, 0.041564105453412992, -2.1114336115237951, 0.094770419949782359, -0.59915948675603581, -0.042806075220647909, -1.4583889440112543, -1.0515624140257636, -2.6242610725724358, -1.9962698899057387, -2.6373580888952279, -0.39414295752688255, -0.80952098820947449, -0.80935504019781357, -1.8315981280862581, -2.3957781219887311, -3.7775973636187947, -1.2762438485839673, -5.8736187047076989, -1.7472058496177199, -39.26171578474986, -103.67045476207605, -221.97901463800724, -486.52939506954147, -770.86385201715837, -324.53401456188737, -340.76561269504333, -198.94197841299811, -116.98390967138687, -32.552002455687223, -2.8647426984892057, 3.4567160839115996, -2.3310052693731942, -0.31982529888503974, 1.0641170511547686, -1.1693860348016079, 0.40700212695667498, -1.0092937918537679, -0.034985154955161232, -1.1746986822405672, -2.2583319261560799, -2.3742700657768196, -2.0999344700147127, -1.3199204785521135, -0.00726121067659493, -0.21997349279604808, -1.6799449140427334, -2.573626149077699, -1.2749029797075579, -2.9722975102588807, 1.1149262389696764, -3.7825574143705132, -8.8112838568342262, -31.380656277665604, -80.815706494855448, -151.2920880811312, -231.73584987382, -71.719340760371239, -68.364029336894532, -82.304975309081328, -39.769136567332623, -12.693902195545155, 1.9842035662706039, -0.48894354077452629, 1.5673786316984977, -1.1528550937233366, -0.047905313676576855, 1.0650111541187497, -1.4670778837513785, 0.90154843827712783, -2.0067122081730173, -1.7180755446076856, -3.3483434682482898, -1.6317774897434336, -3.4708804264384949, -1.4694727348954268, -0.10257790692130256, -0.92889636381571783, -2.5451436559397584, -1.1303995452351283, -2.8871606625355204, -0.49805533537312113, -0.43871934228158149, 0.74909741969065036, 1.439791857975526, -13.026034555561825, -28.484337861014367, -36.895178406765908, -72.231190035838395, -26.809485534889244, -56.942733796520351, -36.280107429422031, -18.099079313675151, -3.2627913287121535, -0.27065475805048173, 1.1511525903295716, -0.1898870363801409, 0.97087220888025372, -1.1326412370424179, 0.19981301766363371, 2.3076802702931332, -2.5498407756566031, -0.55532623625253041, -4.5067864970337066, -3.1791416623515807, -4.4078100962970312, -3.3125592316970569, -0.86117313527739991, -1.5893272599995412, -2.966763176308445, -0.10263295233944174, -3.9090515756474873, -1.1809123553765606, -1.2038275093350199, 0.28624805719871799, 1.8536817132476691, 0.80720029239974944, -5.5769148242308617, -9.876045833403877, -26.746787584056406, -25.156847324745275, -59.858730768373135, -40.909481344220289, -31.301364606284917, -12.992896188265529, -3.3747756869001191, 2.018530777741562, -0.2260612077575776, 0.20594677690592242, -0.32403225688254972, 2.6342781156582364, -0.20787587650621794, 0.020021422684959465, 2.4168167113542753, -5.4711139391067487, -4.0162352275216753, -8.2614925402209369, -5.3597212899808353, -3.5618518868969149, -2.433206189931258, -3.72732750056158, 1.9796458045760836, -5.6194552495050392, -1.3533084788499918, -2.5312603283156982, -0.73577412998862446, 1.0534870856485199, 1.9641802030644013, 2.686394865901931, 0.15179077698100021, -13.505006616733285, -24.652619118640313, -46.540772018331772, -65.573862825648789, -62.198686950727755, -33.367481359773279, -15.462856466374785, 1.2764820376727259, 0.65238351077916601, 0.11426292455840634, -0.28574074744887695, 1.1004477970868616, 1.5327652909312646, 4.9327112002405187, -2.7503236900904393, -3.9754701567757182, -0.83451213573114202, -9.6859551174636032, -6.0006304228248837, -7.1318253263858704, -4.9856424549649869, -8.2198692881497966, 4.4471445589999075, -5.9124192136821829, -1.066228559248251, -4.5320020023541776, -2.2691032318803455, -0.29595929991781228, 0.95069246916243999, 2.9800299945570488, 4.1754888650460389, -3.9368165535394617, -16.752391317324459, -41.141712299851427, -60.643902512124761, -84.343164732157774, -54.074972316673119, -32.147836838432397, -3.8004568077904586, 0.60906370022349199, 0.96326571070502964, 0.12072436644318041, 0.86319547550846831, 1.1644302862121145, 2.3252453178811563, 0.4766448788746544, 4.2895158747096422, -8.0099398507205173, -11.261414242734404, -3.7327404661807368, -6.1601929909303115, -5.7506657339441176, -11.117751544185502, 4.3054115148233869, -8.2116085703478756, 1.5649721654809707, -5.692142411938895, -3.4949086671880489, -2.1697325908161673, -0.69541562648800392, 0.8151347377023449, 3.4913843961972888, 3.7128410928274609, -0.28461904914440361, -14.694115553922865, -40.784171797776878, -76.129097997930202, -42.446544168449137, -35.20072244442639, -7.6849685309209681, -0.86778876706269803, 1.7056687310546401, 0.51974952798739482, 1.1316759112288739, 1.2127800605381189, 2.2221214293211369, 0.8361427470500683, 0.099546606452808759, -3.1066939683116588, 2.4769973579809332, -11.745899626687375, -12.566716735550758, -4.7843722525441121, -8.6040588700645948, 5.3511034027408684, -15.66778198729919, 3.3911987930307137, -8.1259457896856588, -4.7980365887404339, -2.1471667518999764, -2.5087241573260579, -0.86097656871748596, 0.80139543608377761, 2.3927476350849495, 5.6561627225456101, 4.6250195847240709, -10.360873371570062, -32.183766942993408, -40.627648783043085, -17.95302681367091, 6.1859416444601623, 4.4451711191118575, 6.2133312512745986, 3.3587096432927233, 0.75569650762962715, 0.82429958430179118, 1.6770717987294814, 1.4875078542842981, 0.57506461301516931, -1.8616897808321822, -4.2923314886050523, -7.0161307894352376, 4.8526265686569623, -11.625945416074895, -21.07467865045702, 3.1434482955713889, -12.714871655934468, 2.366640700254353, -11.173661544979289, -6.475058123170597, -2.9596627855411386, -2.7630790459355632, -1.4122750319888788, -0.55802289067111654, 0.40509965601619852, 3.0549503122920978, 4.5519407117959005, 5.5044865911271481, 2.884340309618711, -2.0306279174386637, -12.290279126535582, 30.20785901727286, 12.45094729737127, 8.7415961086741216, 10.304484703022888, 4.2310313602871554, 1.8368366318675937, 1.9910666876255574, 0.99156303676388502, 0.31747940339256003, -0.60245605946597469, -1.5054245711483085, -5.2047479791857727, -4.6985425899868174, -6.4406057657264579, -2.4317965202694718, -0.31806110286890099, -34.614374984304249, -0.31806110286891309, -2.431796520269478, -6.440605765726465, -4.6985425899868325, -5.2047479791858065, -1.5054245711483181, -0.60245605946599046, 0.31747940339256003, 0.99156303676388657, 1.9910666876255707, 1.836836631867627, 4.2310313602871847, 10.304484703022929, 8.7415961086741465, 12.450947297371268, -17.953026813669211, -12.290279126534008, -2.0306279174386814, 2.8843403096185996, 5.504486591127181, 4.5519407117958774, 3.0549503122920303, 0.40509965601617365, -0.55802289067113198, -1.4122750319888866, -2.7630790459355659, -2.9596627855411324, -6.4750581231706095, -11.173661544979305, 2.3666407002543774, -12.714871655934495, 3.1434482955713383, -21.074678650457034, -11.625945416074918, 4.852626568656909, -7.0161307894352527, -4.2923314886050816, -1.8616897808321802, 0.57506461301515821, 1.4875078542843145, 1.6770717987294999, 0.82429958430183881, 0.75569650762972518, 3.3587096432928165, 6.2133312512752603, 4.4451711191129393, 6.1859416444606961, -42.446544168447332, -40.62764878304236, -32.183766942992868, -10.360873371569919, 4.6250195847241038, 5.6561627225455622, 2.3927476350849091, 0.80139543608374619, -0.86097656871749839, -2.5087241573260646, -2.1471667518999924, -4.7980365887404339, -8.1259457896856819, 3.3911987930307128, -15.667781987299181, 5.3511034027407849, -8.6040588700645682, -4.7843722525441965, -12.56671673555077, -11.745899626687423, 2.4769973579809226, -3.1066939683116837, 0.09954660645280862, 0.83614274705006209, 2.2221214293211515, 1.2127800605381271, 1.1316759112289154, 0.51974952798746277, 1.7056687310547414, -0.86778876706233132, -7.6849685309204459, -35.200722444424429, -84.343164732156296, -76.12909799792908, -40.784171797776416, -14.694115553922703, -0.28461904914431585, 3.7128410928274769, 3.4913843961972515, 0.81513473770227451, -0.69541562648801736, -2.1697325908161949, -3.4949086671880569, -5.6921424119389146, 1.5649721654809774, -8.2116085703478952, 4.3054115148233585, -11.117751544185527, -5.7506657339441034, -6.1601929909302848, -3.732740466180779, -11.261414242734437, -8.0099398507205191, 4.2895158747096467, 0.47664487887466933, 2.3252453178811465, 1.164430286212123, 0.86319547550848241, 0.12072436644322472, 0.96326571070516387, 0.60906370022364942, -3.8004568077899661, -32.147836838431445, -54.074972316672174, -65.573862825648646, -60.643902512124406, -41.141712299851122, -16.752391317324395, -3.9368165535393809, 4.1754888650460389, 2.9800299945570101, 0.95069246916240213, -0.29595929991782399, -2.2691032318803499, -4.5320020023541936, -1.0662285592482377, -5.9124192136821918, 4.4471445589998728, -8.2198692881497806, -4.9856424549649665, -7.1318253263858535, -6.0006304228248819, -9.685955117463573, -0.83451213573115879, -3.9754701567757316, -2.7503236900904167, 4.9327112002405231, 1.5327652909312637, 1.1004477970868634, -0.28574074744888678, 0.11426292455844969, 0.65238351077926593, 1.2764820376728394, -15.462856466374522, -33.367481359773095, -62.198686950727343, -59.858730768372553, -46.54077201833131, -24.652619118640224, -13.505006616733089, 0.15179077698109764, 2.6863948659019079, 1.9641802030643754, 1.0534870856484704, -0.73577412998863267, -2.5312603283157147, -1.3533084788499781, -5.6194552495050258, 1.979645804576063, -3.7273275005615623, -2.4332061899312447, -3.561851886896878, -5.3597212899808397, -8.2614925402208979, -4.0162352275216939, -5.471113939106738, 2.4168167113542718, 0.020021422684962133, -0.20787587650621156, 2.6342781156582284, -0.32403225688256132, 0.20594677690590416, -0.22606120775752253, 2.01853077774176, -3.3747756868998953, -12.992896188264998, -31.301364606284267, -40.909481344219984, -26.809485534888527, -25.156847324744817, -26.746787584056008, -9.8760458334037811, -5.576914824230828, 0.80720029239978064, 1.8536817132476344, 0.28624805719868845, -1.2038275093350328, -1.1809123553765482, -3.9090515756474855, -0.10263295233946072, -2.9667631763084428, -1.589327259999552, -0.86117313527738326, -3.3125592316970565, -4.4078100962970224, -3.179141662351582, -4.5067864970337235, -0.5553262362525373, -2.5498407756565928, 2.3076802702931301, 0.19981301766362944, -1.1326412370424508, 0.9708722088802425, -0.18988703638015317, 1.1511525903296145, -0.27065475805034434, -3.2627913287119403, -18.099079313674878, -36.280107429421662, -56.94273379651932, -71.719340760368894, -72.231190035836406, -36.895178406764366, -28.484337861013827, -13.026034555561461, 1.4397918579755735, 0.74909741969062116, -0.43871934228165033, -0.49805533537312413, -2.8871606625355364, -1.1303995452351521, -2.5451436559397544, -0.92889636381573193, -0.10257790692130979, -1.4694727348954375, -3.47088042643851, -1.6317774897434372, -3.3483434682483164, -1.7180755446077083, -2.0067122081730231, 0.90154843827713693, -1.4670778837513718, 1.0650111541187297, -0.047905313676639846, -1.1528550937233546, 1.5673786316984972, -0.48894354077444435, 1.9842035662707793, -12.693902195544938, -39.769136567331614, -82.304975309079381, -68.364029336892514, -324.53401456188737, -231.73584987382011, -151.29208808113108, -80.815706494855604, -31.380656277665615, -8.8112838568343115, -3.7825574143705687, 1.1149262389696379, -2.9722975102588807, -1.2749029797076188, -2.5736261490777141, -1.679944914042758, -0.21997349279605258, -0.0072612106766204651, -1.3199204785521295, -2.0999344700147602, -2.3742700657768196, -2.2583319261561177, -1.1746986822405874, -0.034985154955167297, -1.0092937918537661, 0.40700212695667115, -1.169386034801607, 1.0641170511547318, -0.31982529888503974, -2.3310052693731778, 3.4567160839116182, -2.8647426984891329, -32.552002455687209, -116.98390967138671, -198.94197841299811, -340.7656126950431, -996.17063256474341, -770.86385201715302, -486.52939506953675, -221.97901463800537, -103.67045476207502, -39.261715784749725, -1.7472058496176825, -5.8736187047078241, -1.2762438485839995, -3.7775973636188502, -2.3957781219887693, -1.831598128086283, -0.80935504019782156, -0.8095209882094927, -0.39414295752690548, -2.6373580888952821, -1.9962698899057312, -2.6242610725724247, -1.0515624140257607, -1.4583889440112356, -0.042806075220638506, -0.5991594867560418, 0.09477041994976447, -2.1114336115238088, 0.041564105453392161, -1.645570244774569, -10.20981320570001, 1.3577640380311771, -80.518340163142966, -264.63237090274987, -646.481245467088, -957.58296584244442, -2329.4915082039943, -1959.4321649356684, -1077.4118984564245, -515.55403813953228, -255.55592612696057, -62.717085150656416, -30.998957295773568, -2.3480777220922762, -9.3325337684514711, -5.2729359146941093, -3.4497798452119492, -2.5417481635934838, -0.83542887465582316, -0.63377862148080311, -0.78431497120560345, -2.7144116941037488, -4.0439693313887171, -2.2874964618085487, -4.0202584980238978, -0.45369004788789491, -0.57907908126534979, 0.1197295503788481, -1.7033561682904654, -2.1701895043697248, -11.650001060370577, -2.3079138134832218, 1.7115783105395919, -28.862997769747821, -130.56706965451951, -713.08152385953122, -1438.5211303616488, -2151.926578142451, -3481.535597542063, -2413.1056871868605, -1470.8308615232086, -876.95522185705033, -335.07671606133954, -190.87870662958562, -32.978021381977214, -26.682014936266988, -13.48160663472185, -8.8039498431579233, -6.6178270656423885, -3.7427284368684086, -1.1736245693095617, -1.1631844631411714, -0.82967484502748334, -3.6146413255534444, -5.614062126861783, -4.8828731457814465, -2.619934931403141, -2.5290059501698665, -1.0224301618296836, -2.0545006330535864, -2.7888603302093888, -7.7174579848962566, -11.922803368680738, -29.439943085484902, 18.545331481584157, -33.397814851580577, -468.05990914351662, -1355.1576691715877, -2506.491638388823, -3026.0617140239456, -2624.9192342435676, -2694.0942422163216, -1937.2376557226696, -610.36312853782647, -567.30372690179479, -201.43809047465459, -121.9592916587422, -37.989404730638029, -23.382201868158511, -15.879006183075566, -9.3160200641569801, -4.5680830401307739, -3.4318959866990371, -0.11031060182210287, -0.78121801903713106, -7.7847619200437572, -7.0127031874072889, -8.7214065300146117, -6.4643064804234296, -2.0534180946007163, -2.6219523498948099, -2.5268882566736321, -5.4454852920506234, -9.009222722598933, -22.178078450833912, -16.935754226078039, -96.805728919100844, -159.86878938364163, -750.23472664477129, -2119.7499173636857, -3582.9824914214882, -4516.8974536331352, -8415.9227315857224, -4810.1023052011687, -1210.9754315912437, -463.64281724563131, -110.11930975746253, -411.20082432868651, -157.55549534038482, -57.160869905334962, -38.144824969171324, -20.558561534906186, -11.961754213185522, -9.2328346536099755, 1.5394495557011911, -1.9950695133570939, -8.4592989146598381, -14.5518442058491, -6.8858593350514123, -6.8502427898925227, -6.0277039354547091, -0.82473624462553619, 0.7831608409739802, -4.1802620318743058, -9.1243948190510782, -16.875977506192154, -32.905184819607861, -35.55459340255284, -122.67808226552924, -514.71454200305027, -821.48267137489574, -2789.7914675081947, -5469.6585676007144, -6467.5546779833749, -27745.708494118051, -18373.599790964956, -7153.1577950265018, 139.0089391760178, -239.12042069169632, -486.41083616652713, -144.17841735614894, -91.597351236029397, -36.983418680226798, -29.52344492191359, -17.530689402649603, -11.472717532816715, 0.49184661171508715, -1.2754674400467305, -13.244388638951113, -21.283130178012485, -16.161012153790605, 3.4669422259560148, -14.833291452397047, 6.4142604093547071, -7.1882909197807701, 0.36714120063543831, -23.623139151504223, -16.730489448483766, -50.060212982262158, -40.805440061890259, -146.45498278007528, -545.33543865451918, -1748.9561003744159, -4085.0339896290589, -8553.5264674688297, -22841.42084500867, -17213.595236981979, -27817.100568112102, -10882.302955904914, -2806.7151144576032, 113.11650603552238, -714.3011765913102, -258.32278440436545, -84.034753639410752, -64.314813850969756, -32.473901904667066, -16.600635746256838, 0.34733716754136956, -1.7416101263050108, -17.401343902608698, -22.272265924680649, -14.131264529805808, -19.629747734378629, 3.5205960317556224, -14.232799652319452, -14.472211987615371, -7.2952697383626051, -2.1850531713375001, -11.025047422886134, -26.960578056534132, -39.308430893651277, -117.89522553299832, -106.61462896985047, -1120.3666800727583, -1103.8692252741987, -5794.1219231082987, -10829.417860945698, 544.0730266990613],
			"imag": [0.0, 39515.399789254865, -15382.502646592808, -2918.5213899411633, 1191.3150820979915, -345.80526987183259, -91.963497561164317, -108.06830259743781, -23.431327605037779, -16.610810822958811, -2.2742971526945692, -21.94540337447156, -21.272420402577179, -19.057735286082725, 52.376313120912741, 8.8521975026144215, 0.0, -8.8521975026153612, -52.376313120912044, 19.05773528608244, 21.272420402577229, 21.945403374471546, 2.2742971526945164, 16.61081082295847, 23.431327605037779, 108.06830259743377, 91.963497561167031, 345.80526987182992, -1191.3150820979911, 2918.521389941166, 15382.502646592799, -39515.399789254865, 16946.371225111547, 11272.400870696511, -1841.1630655848539, -1171.8258105148211, 109.26740577843201, 109.43221584454041, -206.10314812122442, -42.28539321936541, -65.249140172269108, -8.1960517939269071, -25.365956236318521, -12.488977779350739, -20.777136166915728, 10.939736173955986, 13.738393384077787, 18.982014759380824, -12.446635345723246, -8.8305069728752752, -14.016932746731957, 10.847407040619599, 18.949463773817904, 9.5491377266946333, 9.9160507928571491, 10.925693066643545, 29.597688207921799, 110.70270321520633, 119.64570653889598, -28.406380421737747, -832.38513354395832, 3868.3607546707453, 4625.1554139998552, 1299.266384884336, 11955.369188695569, -346.60702359457474, 2363.0865643328202, 202.32180136864196, -295.01076934839688, 277.44131247872377, -208.25011765184485, -68.536452109290167, -63.125416501511275, -30.589238972650307, -20.382558491276782, -12.902690844348575, 1.0182743702449766, 2.2874141051372452, 14.546101055958879, -1.6150967690531892, 0.87386354462209248, -13.38677146472326, 17.407635810762027, -0.60680891034428563, 12.950261495215786, -0.86756998254740836, 13.062832664150156, -2.136096668655318, 35.880437410281019, 66.543583791324124, 106.41042136702396, -154.61175360170367, -142.43138300706809, -204.04622542072212, 637.22651951043269, 14506.214536688893, 2087.241286517743, 2934.8250858413794, -540.57641351250766, 271.57679130866723, 537.49064424335052, 71.610686309506633, -82.566517160157844, -74.489552074506761, -57.142723569279489, -25.254222647826957, -12.544755138678799, -6.7708773337384622, -0.20770764759918051, 1.1194026551973495, 3.6890839097334878, -0.20461611038051675, -5.3737401851528386, -2.2636764639022453, 4.9832600695280087, 10.10754418440443, 2.544597152813191, 5.0447569422202223, 2.8189903732027388, 2.9920185974422946, 11.529259915073515, 53.348281783168488, 50.577306165813702, 119.57179721034167, -786.94393395792213, -901.86972095078409, 1074.2990124084633, -676.63432998511303, -1814.4894639161919, -1058.8873901892568, 349.63255334068964, 268.2484621242063, 380.4257804868011, 97.912476061205965, -71.661879904778658, -72.736940205390937, -37.286147332183255, -18.720186517652358, -9.5628328869678363, -8.2634536416369482, -0.19099280196160889, 0.28567330333833429, 0.071309220847330906, 1.775656575203522, 2.1386941287610384, -1.0231985430634363, 2.4480270844924137, 1.9878096211738889, 4.1535160740617325, 3.5521022242715827, 3.6019889835361654, -0.38778650675348675, 4.5934633035837322, 12.369503115173785, 94.400929285346393, -77.039516694541632, -317.96189631496532, -464.93982303098932, -1928.5847150696218, -1707.435501473529, -1583.8824730375936, -833.14970460709912, -242.65732454029356, 317.34459246185179, 69.371971565542168, -13.453603503282046, -58.678662168810511, -40.697925231357267, -20.16679423742438, -13.090865763493372, -7.6639325468155182, -3.9818184076004774, -1.1480426683317846, 3.4782462601712654, 3.3535274581593777, 1.1304420427842019, -0.78798091056569108, 1.3645618319176871, -1.2482103302418359, 2.6548043613808709, 2.0455422971726147, 3.3794759874708187, 0.28270713586437868, -0.67396364813071052, -2.4299863370655714, 20.048308524208917, 2.7323622379310764, 23.350930435926227, 19.428895667387472, -542.55543458513841, -969.72646934413422, -1881.6935115818319, -426.42488803140975, -203.12933548649579, 221.2759941924873, 75.498646737827528, 81.527654709232138, -23.228148927519229, -35.095892631083601, -18.113211298120703, -10.84781416147373, -7.2190125620904571, -4.6279710639736358, -2.4591204313834965, 0.58454842364750592, 0.9547463106026568, 2.4151219203224654, 0.35567626693527166, -0.34443735246553581, 0.10021534895843374, 0.62975751586612239, 0.075739057981468363, 2.5606009702294732, 0.33652577635989583, 1.0967346902818458, -2.0000864020848046, 1.451434335785166, -7.1043203483245918, 10.682010714917043, 63.119371696969466, -0.21915489532378957, -18.829394319190524, -151.38668525810633, -53.557614725234764, 319.98109193688521, 339.65571159114432, 137.34002448547074, 89.166061674211335, 5.5395407010458548, 3.1394961579749192, -15.790153056071546, -10.068399035154068, -5.990189510359599, -3.8184783724455591, -3.031311871551015, -1.7050468427375405, 0.29997994657424726, 1.0820090369221063, 1.186145834536469, 1.1035985643781976, -0.026686439684276222, -0.021861987241408937, -0.71069133238487792, 1.5408441736495715, 0.88964240698419117, 1.3226298476418663, -0.31341792844049038, 0.36542819178090652, -6.2831724147446009, -1.5019641274621849, 13.705577255286178, 14.08988446983488, 43.376064565045787, 54.204646228028693, 132.60719521227122, 62.432091745032416, 219.86853407025291, 133.19971898528303, 106.65962198554573, 32.509510578136677, -0.32173120932219279, -1.0472919151881939, 3.0400482541159932, -2.1373375769283371, -3.730023177462626, -3.658884080605465, -1.7579654575817145, -1.4081716233776314, 0.53847505259675243, 0.97164442609396484, 0.99557444173589427, 0.11126643861839057, 0.68343802732828218, -1.8968331338371984, 1.2370080984335854, 0.24616862215977253, 1.6488725749132858, 0.51751999590405229, 1.1293193043526017, -2.440127533596657, -2.1096176983280075, 0.86862341139232857, -3.2906850406637935, 10.529105330387669, 21.528607110729595, 53.864359931260871, 77.645971701549371, 219.35042572397626, 56.646725304489401, 72.597133152544643, 25.283726226154087, 9.5916945360518575, 3.5131066387109651, 7.8353712095885921, 3.7982495059531924, -0.1320379920173739, -2.6872144914167868, -3.9932995411602161, -3.2496097582258021, 0.34753129477634409, 0.51108563039490118, 1.5779290838292743, -0.32098662744154494, 0.85050436376706862, -0.95269533500567993, 1.2514468795435802, -0.80232514327112969, 0.9402998385797201, 0.083484537520043395, 2.9970442493787712, -1.3537504507858638, -0.49606931853204594, -0.40634793694041288, -3.2049709482452999, -0.90733505109423707, 2.4367446291982722, 14.425788131967863, 11.285893196605656, 41.383231407558732, 26.64930600456886, 3.49019745229235, -2.7278278900775033, -0.6780497768719117, 5.1972517053508067, 13.315592278460391, 8.5655340270495799, 2.7986942524720009, -1.3188307478897958, -2.9560147101356677, -3.5039625138893249, -3.2351264422424442, -1.7837191938553947, 4.1370294214229899, -0.48575889336608402, 1.5705428299533406, -0.28712766434912351, 3.0263722138472242, -1.2120159426024513, 2.3578685311613299, -0.57595981339550073, 5.0023110313506045, -1.3965343408401143, 0.57130018359553258, 0.97601539997779907, -2.5856117766371072, -1.4572886030272592, -1.697304402058907, 2.1030121366448049, -0.062995146217583023, 4.9612937854964008, -0.301351161950073, 9.1580358876592047, -26.774160253651129, -14.352442298363405, -1.3280628610826339, 14.662722831107068, 13.065714024917916, 9.0142686843581057, 2.3156698002103213, -2.1494090398895276, -3.4369058394752816, -3.2885833247038136, -1.5589303641797962, -1.2624013759488528, -1.9675974847606275, 6.6808538974877765, -1.9845455926326385, 5.8520209082315047, -0.64649466936933941, 3.7090325345277484, -1.4383189901623872, 7.6358217658181289, -2.5011370399824613, 2.0288771570791524, 3.3870661540364408, -2.1726948090167277, -1.6227282885568253, -2.3401345171732064, -1.0784728701462345, -2.329913042321786, 1.6766227476276099, -5.5208279800184377, -13.304914803323909, -34.683237345909106, -16.2208922311743, -7.5614574111833583, 14.803696771258469, 15.579335900760762, 15.161631552742872, 8.4660409590375174, 1.9742581617985508, -2.2318082441740326, -3.1677451000476946, -2.7136257844502993, -2.4663578849843404, 2.1470642674041458, -0.80807516468244989, -6.8039934755458935, 11.462761097859508, -2.3200072133134322, 9.6476195054900042, -0.58323258923086063, 10.466810618341768, -7.3966372849294499, 4.629755222962074, 7.8499060069144697, -1.2532724460122664, -0.71383693570895246, -3.0356422051110532, -1.9171318821546592, -3.2905248775997, 1.1638954652799918, -0.8003122215164804, -7.6686022187651925, -13.379436000591463, -2.0784151782651223, 18.753674553162941, 37.596939514973172, 28.201887912811504, 26.441177038828386, 17.313699289624569, 8.2605837012813357, 1.9157665349814501, -1.0360449197814665, -2.460835808457071, -2.9435912594789997, -0.73745892985465067, -0.80698208098757895, 1.3512050433752707, -2.4806623635392717, -10.931358459008862, 20.399475046734903, -0.93914753929729033, 15.633586230850142, -11.808527677086202, 3.7955244266493091, 11.440683264496995, 0.22625003249094855, 2.3910143241324033, -1.5433230899620785, -1.7524971656611896, -3.4392335008624597, -1.2102890230410412, -1.1333111335531953, -0.86689054652400055, -0.77102037498198228, 5.869418392294464, -6.6911708498309208, 60.884710948918006, 43.621563233816303, 43.489599527484941, 33.141784821271486, 18.338861076357606, 7.7096141949396086, 3.1020965354201242, -0.33651454595896624, -1.858665713174497, -1.559439785993801, -1.7180049365163976, -0.49470837698954684, -5.7499783777067037, 1.2816063498557866, -1.6438131382345036, -14.80449956699707, 30.383248800411909, -20.687082737158004, 6.4291237134149926, 13.719178799652914, -0.15202331710012035, 5.6708331746907428, 1.1091130063870853, 0.43083164420390874, -2.423604198850752, -1.2614169037455483, -3.1633275417854718, -2.5428479485652051, -1.0621152637056996, 7.4921468465754772, 13.826120615216594, 48.56895003285198, 43.655937980459306, 56.143788442077074, 39.839822974553684, 28.907966432346075, 17.226166967005444, 9.493352687280801, 2.1248307248495761, -0.10304029106189502, -0.73643011249607004, -0.68086203692422775, -1.5726895782452095, -2.38329292549688, -6.3654622280486342, -12.648471231222512, 2.6502987300644998, 9.1941379366153466, -33.28553680715055, 17.791788634489134, 16.331392880531652, -1.0332061538290742, 9.6376857080971341, 4.1689669632335153, 3.4112249849533103, -0.63064111926197686, 0.028356847121888181, -1.1968584419289052, -3.3957285823190806, -4.7459408986565164, -4.790016252397657, -5.1593354130915703, 13.957717184896774, 20.367299127198688, 0.0, -4.5388798707327584, 12.10851784859719, 15.801052170121357, 15.786196904526062, 6.4645339091427658, 2.6357128260629894, 0.48128762074186304, -0.08159176932681525, -1.1399410088753745, -0.93916966756638098, -5.4695359499377414, -8.4733779831544798, -6.8332707948903639, -5.8759130146162706, -8.1552266379296245, 0.0, 8.1552266379295908, 5.8759130146162661, 6.8332707948903488, 8.4733779831544869, 5.4695359499377316, 0.93916966756637688, 1.1399410088753721, 0.08159176932681525, -0.48128762074185355, -2.635712826062981, -6.4645339091427667, -15.786196904526072, -15.801052170121331, -12.108517848597181, 4.5388798707327416, -43.655937980456407, -20.367299127197448, -13.957717184895019, 5.1593354130924185, 4.7900162523979217, 4.7459408986567313, 3.395728582319133, 1.1968584419289152, -0.028356847121888983, 0.63064111926197186, -3.4112249849533058, -4.1689669632334958, -9.6376857080971128, 1.0332061538290882, -16.331392880531649, -17.79178863448908, 33.285536807150621, -9.1941379366153146, -2.6502987300644807, 12.648471231222583, 6.3654622280486368, 2.3832929254968982, 1.5726895782452166, 0.68086203692425595, 0.73643011249607926, 0.10304029106193066, -2.1248307248495362, -9.4933526872806269, -17.226166967005291, -28.907966432345297, -39.839822974551964, -56.143788442073777, -60.884710948915583, -48.568950032850019, -13.82612061521586, -7.4921468465751166, 1.0621152637059226, 2.5428479485653219, 3.1633275417855051, 1.261416903745556, 2.4236041988507613, -0.43083164420392467, -1.1091130063870698, -5.6708331746907525, 0.15202331710012659, -13.719178799652925, -6.4291237134149712, 20.687082737158036, -30.383248800411859, 14.804499566997148, 1.6438131382345447, -1.2816063498557717, 5.7499783777067242, 0.49470837698955733, 1.7180049365164254, 1.5594397859938318, 1.8586657131745035, 0.33651454595900265, -3.1020965354201109, -7.7096141949395376, -18.33886107635751, -33.141784821271301, -43.48959952748401, -43.621563233814584, -18.753674553161851, 6.6911708498312086, -5.8694183922938254, 0.77102037498232001, 0.86689054652414343, 1.1333111335533379, 1.2102890230411023, 3.4392335008624833, 1.7524971656611932, 1.5433230899620796, -2.3910143241323984, -0.22625003249093578, -11.440683264497009, -3.7955244266492731, 11.808527677086207, -15.633586230850069, 0.93914753929731287, -20.399475046734821, 10.931358459008916, 2.4806623635393117, -1.3512050433752816, 0.80698208098763236, 0.73745892985467021, 2.943591259479049, 2.4608358084570767, 1.0360449197814969, -1.9157665349814337, -8.2605837012812007, -17.313699289624388, -26.441177038827938, -28.201887912810978, -37.59693951497237, 16.220892231174151, 2.0784151782650429, 13.379436000591378, 7.6686022187652325, 0.80031222151651993, -1.1638954652799158, 3.290524877599744, 1.917131882154679, 3.0356422051110541, 0.71383693570894702, 1.2532724460122711, -7.849906006914436, -4.6297552229620669, 7.3966372849294793, -10.466810618341761, 0.58323258923092358, -9.6476195054900042, 2.3200072133134997, -11.462761097859458, 6.8039934755459344, 0.80807516468246154, -2.1470642674041431, 2.4663578849843657, 2.7136257844503273, 3.1677451000476933, 2.2318082441740374, -1.9742581617985304, -8.4660409590374517, -15.161631552742712, -15.579335900760643, -14.803696771258227, 7.5614574111833424, 26.774160253651477, 34.683237345909006, 13.304914803324097, 5.5208279800184936, -1.6766227476275497, 2.3299130423218712, 1.078472870146282, 2.3401345171732237, 1.6227282885568277, 2.1726948090167162, -3.3870661540364337, -2.0288771570791524, 2.5011370399824764, -7.6358217658181076, 1.4383189901624107, -3.7090325345277098, 0.64649466936933497, -5.8520209082314834, 1.984545592632657, -6.6808538974877711, 1.9675974847606519, 1.2624013759488664, 1.5589303641798025, 3.2885833247038483, 3.4369058394752718, 2.1494090398895325, -2.3156698002103084, -9.0142686843579654, -13.06571402491778, -14.662722831106908, 1.3280628610827629, 14.352442298363767, -3.4901974522911301, -9.158035887658194, 0.30135116195024236, -4.9612937854963866, 0.062995146217542555, -2.1030121366447649, 1.6973044020589363, 1.457288603027268, 2.5856117766371063, -0.97601539997780706, -0.57130018359554458, 1.396534340840117, -5.0023110313506107, 0.5759598133955085, -2.357868531161305, 1.2120159426024788, -3.0263722138472202, 0.28712766434913656, -1.5705428299533217, 0.48575889336609929, -4.1370294214229943, 1.783719193855416, 3.2351264422424548, 3.5039625138893205, 2.956014710135662, 1.3188307478897938, -2.7986942524719765, -8.5655340270494893, -13.315592278460258, -5.1972517053507898, 0.67804977687200962, 2.7278278900777337, -56.64672530448825, -26.649306004568476, -41.383231407558036, -11.285893196605604, -14.42578813196792, -2.4367446291981882, 0.90733505109427226, 3.2049709482452906, 0.40634793694041338, 0.49606931853200609, 1.3537504507858567, -2.9970442493787934, -0.083484537520044699, -0.94029983857969957, 0.80232514327114979, -1.2514468795435723, 0.95269533500567261, -0.85050436376704475, 0.32098662744156231, -1.5779290838292681, -0.51108563039488553, -0.3475312947763517, 3.2496097582258234, 3.9932995411602126, 2.687214491416765, 0.13203799201742056, -3.7982495059531578, -7.8353712095884145, -3.5131066387109939, -9.5916945360520085, -25.283726226154414, -72.597133152543805, -219.86853407025291, -219.35042572397646, -77.645971701549428, -53.864359931260992, -21.52860711072962, -10.52910533038772, 3.2906850406638011, -0.86862341139231525, 2.1096176983280075, 2.4401275335966615, -1.1293193043526162, -0.5175199959040564, -1.6488725749132833, -0.24616862215974425, -1.2370080984335483, 1.8968331338372646, -0.68343802732828218, -0.11126643861832354, -0.99557444173586918, -0.97164442609393387, -0.53847505259674655, 1.408171623377654, 1.757965457581725, 3.6588840806054854, 3.730023177462626, 2.1373375769283727, -3.0400482541159497, 1.0472919151882829, 0.32173120932219762, -32.509510578136599, -106.65962198554575, -133.199718985283, -319.98109193688754, -62.432091745036324, -132.60719521227176, -54.20464622802902, -43.376064565046129, -14.089884469834875, -13.705577255286062, 1.5019641274622118, 6.2831724147445849, -0.36542819178094682, 0.31341792844047633, -1.3226298476418761, -0.88964240698418728, -1.5408441736495315, 0.71069133238493809, 0.021861987241514846, 0.026686439684265401, -1.1035985643780957, -1.1861458345364231, -1.082009036922065, -0.29997994657423205, 1.7050468427375622, 3.031311871551031, 3.818478372445528, 5.9901895103595697, 10.068399035154069, 15.790153056071421, -3.1394961579745826, -5.539540701046052, -89.166061674211662, -137.34002448547281, -339.65571159114575, 426.42488803140685, 53.557614725234323, 151.38668525810476, 18.829394319190286, 0.21915489532353391, -63.119371696969402, -10.682010714916952, 7.1043203483248183, -1.4514343357851665, 2.0000864020848317, -1.0967346902818478, -0.33652577635987613, -2.5606009702294568, -0.075739057981359575, -0.6297575158660037, -0.1002153489582, 0.34443735246552043, -0.35567626693504045, -2.4151219203224019, -0.95474631060256077, -0.58454842364747928, 2.4591204313835524, 4.6279710639736518, 7.2190125620904322, 10.8478141614737, 18.113211298120788, 35.095892631083665, 23.228148927519459, -81.527654709232067, -75.498646737828622, -221.27599419248904, 203.12933548649244, 1583.8824730375886, 1881.6935115818235, 969.72646934413342, 542.55543458513785, -19.428895667388197, -23.350930435925818, -2.7323622379307726, -20.048308524208668, 2.4299863370655803, 0.67396364813076437, -0.28270713586437829, -3.3794759874707645, -2.0455422971725761, -2.6548043613806773, 1.248210330242034, -1.3645618319173671, 0.78798091056567598, -1.130442042783935, -3.3535274581592822, -3.4782462601711517, 1.1480426683318268, 3.9818184076005192, 7.6639325468155093, 13.090865763493181, 20.166794237424288, 40.697925231356948, 58.678662168810511, 13.453603503282435, -69.371971565542452, -317.34459246185418, 242.65732454028887, 833.14970460709446, 1814.4894639161919, 1707.4355014735293, 1928.5847150696216, 464.93982303099165, 317.96189631496537, 77.039516694542414, -94.400929285346379, -12.369503115173439, -4.5934633035837242, 0.38778650675346871, -3.6019889835361467, -3.5521022242715157, -4.1535160740616579, -1.9878096211735969, -2.4480270844921423, 1.0231985430638744, -2.1386941287610495, -1.7756565752032289, -0.071309220847206922, -0.28567330333819857, 0.19099280196170093, 8.2634536416369908, 9.5628328869678718, 18.720186517652159, 37.286147332183262, 72.736940205390795, 71.661879904778388, -97.912476061205524, -380.4257804868011, -268.24846212420823, -349.63255334068992, 1058.8873901892528, -2087.2412865177334, 676.63432998511416, -1074.2990124084556, 901.86972095078841, 786.94393395792224, -119.57179721034137, -50.577306165813212, -53.34828178316841, -11.529259915073451, -2.9920185974423683, -2.8189903732028481, -5.0447569422201788, -2.5445971528130604, -10.107544184404102, -4.9832600695276215, 2.2636764639027978, 5.3737401851528253, 0.20461611038107308, -3.6890839097334074, -1.119402655197085, 0.20770764759927202, 6.7708773337385892, 12.544755138678777, 25.254222647826818, 57.14272356927944, 74.489552074506946, 82.566517160157588, -71.610686309506534, -537.49064424335074, -271.57679130866813, 540.57641351250493, -2934.8250858413712, -11955.369188695569, -14506.214536688902, -637.22651951043315, 204.04622542072232, 142.43138300706894, 154.61175360170483, -106.41042136702355, -66.543583791323357, -35.880437410281012, 2.1360966686551617, -13.062832664150186, 0.86756998254746465, -12.950261495215663, 0.6068089103450538, -17.40763581076148, 13.386771464725289, -0.87386354462209659, 1.6150967690552112, -14.546101055958459, -2.2874141051365076, -1.0182743702449171, 12.902690844348964, 20.382558491276768, 30.589238972650698, 63.125416501511289, 68.536452109292355, 208.25011765184536, -277.4413124787215, 295.01076934839597, -202.32180136863923, -2363.0865643328207, 346.60702359456963, -16946.371225111554, -1299.266384884367, -4625.1554139998561, -3868.3607546707453, 832.38513354395968, 28.40638042173725, -119.64570653889508, -110.70270321520742, -29.597688207921749, -10.925693066643381, -9.9160507928571686, -9.5491377266944308, -18.949463773817815, -10.847407040619126, 14.016932746732627, 8.8305069728758134, 12.446635345723296, -18.982014759378298, -13.73839338407706, -10.939736173955323, 20.777136166915735, 12.48897777935125, 25.365956236318532, 8.1960517939270616, 65.249140172269151, 42.285393219366988, 206.10314812122587, -109.43221584453876, -109.26740577843286, 1171.8258105148195, 1841.1630655848473, -11272.400870696491]
		}
	}

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
		return {"real": [1.8229079259010603, 0.097810498648582461, -0.55840092137248587, -0.99970462842356578, 0.18757876559092043, -0.81617694863114465, -0.17457078018685562, 0.13822182613073089, -0.13830885288846723, 0.14088352498892928, -0.11242245121823281, 0.64190144530750459, -0.18081689212517704, 0.84757445423403044, -2.0367692338977426, 2.3450651085370726, -3.2227771639624789, 2.3450651085369945, -2.0367692338977101, 0.84757445423403854, -0.18081689212518082, 0.64190144530750537, -0.11242245121823641, 0.14088352498894169, -0.13830885288846723, 0.13822182613073003, -0.17457078018684977, -0.81617694863113666, 0.18757876559091927, -0.99970462842356267, -0.55840092137248509, 0.097810498648581323, -1.0960340088024074, -1.9119199452512301, -2.4095702665388479, -0.55162352804953241, -0.50505328014021589, -1.3068505835636635, -0.49437187443975589, 0.23127204626685588, 0.043350794355039197, -0.071787406154436809, 0.070854449837205943, 0.17221102955705567, 0.44602122877614064, 0.074148205591900399, -0.015611524439393865, -0.79896724757292914, -0.67155961060437053, -0.49375784053273253, 0.028167647498424205, -0.3191891366103583, 0.53582170174408217, 0.20183473326047152, 0.12710467168208503, -0.071400263514192097, 0.074560604448017792, -0.12451483496807111, 0.051358135035693774, -0.77282398113384443, -0.42160647485916963, -1.1311602269894514, -1.4625324828122208, 0.3337871926813808, -1.77011609742092, -1.4302518240108344, -3.0428213499062116, -0.60631225487833551, -0.13683987631719793, -2.3692424085383519, -0.34105804260324346, -0.25969657852057992, 0.23610433796619859, -0.27685168579683173, 0.16986402710259335, 0.073612585805396993, 0.57704911017089122, -0.059867579479423505, 0.51680219528175042, -1.0666730319382505, -0.0056552094670686828, -0.75809939060745812, -0.064701320250044561, -0.19832318162238824, 0.37732986906226257, 0.20777584924550152, 0.15451076629740465, -0.013991851319401968, 0.13841341497021592, -0.086883949036928532, 0.25261423619714551, -1.1991385138433881, -1.9867837341406693, -2.275962773839737, -3.1079150257531585, -2.3995834975192567, -2.2937692343725722, -2.1872173045799017, -1.3988308931230504, -2.2073957813815439, -1.9667941627002865, -1.6748432066635108, -0.92650772032564344, -0.054197237250052703, -0.18026213329416008, -0.15232124758200827, -0.016555865669302033, 0.31289505893870784, 0.42806542968274719, 0.23124350286854853, -0.087366382764607439, -0.12552132795947232, -0.12547908619418155, -0.38089709050886683, -0.28444076658768042, -0.11944152964360766, 0.12056136689031131, 0.21189843131890268, 0.16581598470154221, 0.13376820638890077, 0.22205496825803592, 0.15120100371874812, 0.12380717441381156, -1.2352596784322261, -2.2222759116849211, -3.3782856809989692, -3.415076124219421, -2.7282977589825297, -1.5576789730825455, -1.6478932560447972, -2.067907968457094, -2.004290735457912, -2.6427456963680775, -1.9309474679838621, -0.16864865516592528, -0.22642518078963322, -0.13321306237600422, -0.20692971953006373, -0.068344938706069003, 0.14493915164047724, 0.46505832474821007, 0.32789481378377733, 0.1852927254910838, -0.1356638873386786, -0.03585192275390197, -0.17203834043005656, -0.15954900238018477, -0.059581713131431221, -0.017228379259871054, 0.12402459410135006, 0.1524538089963059, 0.16271946063708961, 0.24817234249560427, 0.26053579199245763, -0.04769125558408293, -0.81459993031792033, -2.0740660744196808, -3.1544891598954261, -2.9212825837849565, -2.4077419089431702, -1.6411629435379833, -1.576697627349694, -1.8007661961299257, -2.0001525985045707, -1.5107274159689619, -1.2839600483166405, -0.63196711118813498, 0.31071574064221719, -0.21370915949408273, -0.16393119308951343, -0.097481704015839707, 0.13767875532837173, 0.23695911940697742, 0.36158774196732829, -0.00066962538216623158, -0.1026502520704758, -0.18176695609293456, -0.059120611570986824, -0.13702193484548986, -0.0073538013157976303, 0.020281061259494877, 0.15032501459982059, 0.16876214929227357, 0.18780650312631536, 0.16308782299108887, 0.18583847563977354, 0.44907296092364651, -0.020800703185301726, -1.4297091333258476, -2.4259185480628145, -2.4053777736536626, -1.9821307035675879, -1.3372642957080885, -1.2989780551182537, -1.3731553217305845, -1.2269479805895975, -1.2032897772528626, -0.22206046284030648, -0.18415548289109809, -0.23415549346578352, 0.077936325689887453, -0.21633114300736572, -0.059449722211757941, 0.013318329293146938, 0.28775437300883983, 0.21963323601338633, 0.16649953505637383, -0.18974789333555656, -0.17379580132236441, -0.23416130311702454, -0.13478379984035538, -0.13112027137758978, 0.033522350558872455, 0.13259733500476653, 0.171380750952115, 0.15737574769334917, 0.092477162456605533, 0.13448891283084696, 0.41161459424817443, 0.35609170613712005, -0.55316449850203808, -1.540851379466907, -1.8005308506197801, -1.5719273509294158, -0.94040577953316051, -0.83899416480020927, -0.77336416928591256, -0.66562411016509948, -0.4002640865408188, -0.36750971454913561, 0.2414435659750552, -0.065677188177910795, -0.21341675767851534, -0.041369287190265204, -0.087404842921799578, 0.04460147122538273, 0.19583406251777175, 0.1830038441344799, 0.012219595757112435, -0.034593273427629516, -0.14926486203867156, -0.036665364495836496, -0.1306231554860259, -0.086381624051938985, 0.0020423415177502173, 0.11239290885891448, 0.12781279786870536, 0.10954302373131516, 0.14996801038078228, 0.12965098836907352, 0.14324588543961356, 0.0567484033157079, -0.079342592710004017, -0.77145898274835445, -1.1705860882999304, -1.0754357146023004, -0.5463269466436349, -0.37732231762995055, -0.29185933229148303, -0.18245346577017127, -0.15252816280103537, 0.00992307413149221, -0.05334501261419268, 0.10643359538216246, -0.069635302172998029, -0.20853401810086858, 0.03871878333386132, 0.024793140061197767, 0.22215018549405419, 0.19090693911120471, 0.13458393481660855, -0.1226120784542075, -0.060406846903667433, -0.083060383383984554, -0.016925686434954099, -0.033352938195947639, 0.056474422402956102, 0.04873056181166667, 0.092098221631537164, 0.13542751998114597, 0.15540921558269635, 0.10094403852684107, 0.050489672984821425, 0.089840998861512991, 0.018445471788018183, -0.44280324831238471, -0.64559475523542686, -0.64123409592876457, -0.25571779361731761, -0.15489773108593363, -0.10375533557574061, -0.074018947274090252, -0.074021765277388324, -0.034956034554291714, 0.065331700319185393, -0.079299771847393716, 0.035725424097319471, -0.10252861876832269, -0.22107962950770202, 0.20755848067860572, 0.23157078159613848, 0.34013467279608883, 0.23914223921471078, 0.043591964044129211, -0.20186945117744784, 0.04172561648658725, -0.038784831650455286, 0.076248151019351923, -0.060276976551200255, -0.0031358189183758184, 0.13054366560393055, 0.16122088670834137, 0.12129220423951546, 0.064624059271846127, 0.063153633523538075, 0.036868954773612302, 0.025599835220982206, -0.17872521900892777, -0.37577894082797708, -0.33418602947194676, -0.19087946198724595, -0.092430559387195924, -0.15843188266072916, -0.1178716916883143, -0.079832857077627425, -0.038455609721169501, 0.015668866487966955, 0.0052656766019976578, -0.12562510603385343, -0.024970842739258457, -0.030574039563531708, -0.21969881405226874, 0.59191387060782108, 0.39965780946904006, 0.22624763974293111, 0.077143781693831126, 0.078542516808501189, -0.0038697706067326258, 0.21858339549378, 0.083870133819846815, -0.19149929243694441, 0.053673315180545467, 0.22201073984886688, 0.16922848807595664, 0.12511007660405662, 0.095111634855384236, 0.084195395624058103, 0.010195208908487656, -0.016589123313681509, -0.076922699191606214, -0.17023093289451025, -0.26998035777525775, -0.28189859430096476, -0.32749231042729776, -0.240474927671948, -0.27714150491609907, -0.16857870511456344, -0.056310601502134704, 0.026291702225850644, -0.028508101274427284, -0.066307061790986485, -0.27187198211633473, 0.066219257946262391, 0.32825613521942065, -0.21303758386300781, 1.1917438602108388, 0.2807025357241521, 0.23447144426975483, 0.16511529097099151, 0.40113579910945835, 0.017152293761210982, -0.1450564820739392, 0.13833755803781553, 0.2361453534315919, 0.16033553043559276, 0.17442784770871, 0.17988585089228476, 0.143828955260344, 0.07132752932041192, 0.016244981011210025, -0.013577696292888701, -0.024045478766089354, -0.11184718959298219, -0.14666574805211069, 0.0080876817899727359, -0.16842937423863127, -0.43543489379944889, -0.29975286851709859, -0.22753898297998879, -0.069036032916579657, 0.014977564920406507, -0.020420877906038481, -0.13524198281736244, -0.15739380447541659, -0.33401260934309918, 0.46815371603113554, 0.93021729768322625, -0.26733338229185055, 1.4166629302294091, 0.60664479608939625, 0.3603810860087503, 0.4605515924213614, -0.32071019427276837, 0.15916183580862947, 0.55142162929110317, 0.20419289205444074, 0.051921880744650394, 0.24679565757292954, 0.2706202610478356, 0.15590400545853877, 0.081859441051199647, -0.040980231107277158, 0.019596242113331462, 0.094364427919773758, 0.065278519802775978, -0.029838116901178446, 0.15435464918439099, -0.039386655944161249, -0.077796406016204619, -0.28158476919608044, -0.033110128022724852, 0.018548614200940845, 0.067046107651037731, -0.044245201781535203, -0.1525534131110006, -0.22929077462390082, -0.085302710712388263, -0.049302393683332231, 0.85744368463127818, 1.8448220136861364, -0.68744556831975012, 1.810880881855317, 0.66237039703709566, -0.31567909429421087, 0.83232217907475781, 0.97863365922997991, 0.30994126117364096, -0.041163173314528664, 0.17633262873947353, 0.23161854928102976, 0.25087704366702551, 0.19868696729956423, 0.093569887694449877, 0.032362324442922322, -0.0027507666136337679, 0.21821986304703905, 0.37880734420129814, 0.40096920495374666, 0.93561154193066887, 0.61326039955329958, 0.1638528799494483, 0.1009541629695858, 0.056601591846233243, 0.15561323638878471, 0.073000292812971587, -0.0055442453146915694, -0.13817032242271102, -0.11770539535407684, -0.096245457278447424, 0.46442894125096079, 0.45587938373772585, 1.3432089992982477, 2.5059762271849535, -0.93829697639874887, 0.6492144586928863, 0.79782532034480069, 1.3025551528258366, 0.94174974100732234, 0.099921469659734793, 0.28712786266920659, 0.15853680079243379, 0.130717335778855, 0.17042917695126153, 0.19986443324539621, 0.13725228360851915, 0.029723534135295476, 0.098143635338702864, 0.19047751491127032, 0.49335337973435212, 0.78089304412099847, 0.29686587428828037, 0.38131881367791126, 0.40643673652514922, 0.19053499830856688, 0.20033550195294633, 0.13287714582076576, 0.10533560171090586, 0.00085487897815388243, -0.049435296406267468, -0.081309411554979491, 0.057947716710403128, 0.48207744089263116, 1.2538880645112733, 1.2204758332556214, 0.87793863876625744, 1.8796293205435075, -0.45285576127696725, 2.2308682152547137, 1.2382711063757557, -0.035207936995945072, 0.88175672278306683, 0.55916031961657942, 0.18718127547628777, 0.011764673252274449, 0.068747006595272581, 0.13522321325294812, 0.17151312046437606, 0.10315365060575944, -0.0011239413451798732, 0.14993420590829387, 0.38959110228082239, 0.38845862264410469, 0.69716730182732189, 0.51802064393501412, 0.28837767001488912, 0.10583936790249669, 0.071016615670210698, 0.16001776032454934, 0.10715662619027419, 0.056188716759532117, -0.035825840155044517, 0.0061469917968111389, 0.089493877843564718, 0.68387295014825999, 1.1016519558168656, 1.3182383587355595, 0.66635382040153524, 0.54863673632097221, 4.0547770231048936, 0.54863673632097154, 0.66635382040153424, 1.3182383587355562, 1.101651955816866, 0.68387295014826144, 0.089493877843565064, 0.0061469917968106288, -0.035825840155044517, 0.056188716759530431, 0.10715662619027334, 0.16001776032454856, 0.071016615670210018, 0.10583936790249539, 0.28837767001488829, 0.51802064393501346, 0.29686587428830957, 0.38845862264412201, 0.38959110228084654, 0.14993420590831108, -0.001123941345177488, 0.10315365060576374, 0.17151312046437922, 0.13522321325295103, 0.068747006595273552, 0.011764673252275867, 0.18718127547628682, 0.55916031961657786, 0.88175672278306205, -0.035207936995944634, 1.2382711063757532, 2.2308682152547106, -0.45285576127696175, 1.8796293205435037, 0.87793863876625788, 1.2204758332556218, 1.2538880645112747, 0.48207744089263271, 0.057947716710405182, -0.081309411554979547, -0.04943529640626837, 0.0008548789781495917, 0.10533560171090255, 0.13287714582076099, 0.20033550195294705, 0.19053499830855697, 0.40643673652513423, 0.38131881367792647, 0.93561154193068807, 0.78089304412102711, 0.49335337973436416, 0.19047751491127579, 0.098143635338704696, 0.029723534135297252, 0.13725228360851988, 0.19986443324539666, 0.17042917695126267, 0.13071733577885625, 0.15853680079243432, 0.28712786266920415, 0.099921469659732226, 0.94174974100731712, 1.3025551528258328, 0.79782532034480169, 0.64921445869288619, -0.93829697639874454, 2.5059762271849548, 1.3432089992982421, 0.45587938373772335, 0.46442894125096235, -0.096245457278447175, -0.11770539535407766, -0.13817032242271216, -0.0055442453146945193, 0.073000292812969436, 0.15561323638878341, 0.056601591846233208, 0.10095416296958591, 0.16385287994945555, 0.61326039955330602, 0.15435464918440814, 0.40096920495376004, 0.37880734420131523, 0.21821986304704899, -0.0027507666136306606, 0.032362324442924542, 0.093569887694449336, 0.19868696729956342, 0.25087704366702551, 0.23161854928103059, 0.17633262873947425, -0.041163173314526666, 0.30994126117363635, 0.97863365922997669, 0.83232217907475781, -0.31567909429421592, 0.66237039703709699, 1.810880881855315, -0.68744556831974835, 1.8448220136861369, 0.85744368463127729, -0.049302393683329601, -0.085302710712388291, -0.22929077462390179, -0.15255341311100187, -0.044245201781539331, 0.067046107651035594, 0.018548614200940294, -0.033110128022720509, -0.28158476919607578, -0.077796406016200054, -0.039386655944146774, 0.0080876817899761342, -0.029838116901173162, 0.065278519802780599, 0.09436442791977824, 0.019596242113334855, -0.040980231107276652, 0.08185944105119855, 0.15590400545853553, 0.2706202610478356, 0.24679565757292907, 0.051921880744651677, 0.20419289205443947, 0.55142162929109917, 0.15916183580862936, -0.32071019427277109, 0.46055159242136157, 0.36038108600874996, 0.60664479608939803, 1.4166629302294049, -0.2673333822918505, 0.93021729768322625, 0.46815371603113448, -0.3340126093430979, -0.15739380447541709, -0.13524198281736302, -0.020420877906040739, 0.014977564920405115, -0.069036032916578546, -0.22753898297998629, -0.29975286851709465, -0.43543489379944272, -0.16842937423862725, -0.28189859430095965, -0.14666574805210519, -0.1118471895929717, -0.024045478766081197, -0.013577696292883971, 0.016244981011212731, 0.071327529320409616, 0.14382895526034015, 0.1798858508922834, 0.17442784770871067, 0.16033553043559218, 0.23614535343159299, 0.13833755803781575, -0.14505648207394348, 0.017152293761212339, 0.40113579910946001, 0.16511529097099317, 0.23447144426975502, 0.28070253572415382, 1.1917438602108381, -0.21303758386300692, 0.32825613521942509, 0.066219257946262128, -0.27187198211633529, -0.066307061790987387, -0.028508101274429792, 0.026291702225849072, -0.056310601502134003, -0.1685787051145608, -0.27714150491609657, -0.24047492767194564, -0.32749231042729471, -0.19087946198724157, -0.26998035777525148, -0.17023093289450597, -0.076922699191602426, -0.016589123313677224, 0.01019520890848913, 0.084195395624057118, 0.095111634855381461, 0.12511007660405613, 0.1692284880759545, 0.22201073984886613, 0.053673315180547035, -0.19149929243694658, 0.083870133819847037, 0.21858339549377928, -0.0038697706067313737, 0.078542516808500606, 0.077143781693833222, 0.22624763974292969, 0.39965780946904111, 0.59191387060782175, -0.21969881405226852, -0.030574039563530501, -0.024970842739259945, -0.12562510603385371, 0.0052656766019967011, 0.015668866487966397, -0.038455609721168606, -0.079832857077626357, -0.11787169168831266, -0.15843188266072725, -0.092430559387194119, -0.25571779361731145, -0.33418602947193976, -0.37577894082796842, -0.17872521900892277, 0.025599835220983438, 0.036868954773614897, 0.063153633523536298, 0.064624059271844544, 0.12129220423951372, 0.1612208867083402, 0.13054366560393141, -0.0031358189183775171, -0.060276976551199596, 0.076248151019351354, -0.038784831650455917, 0.041725616486585258, -0.20186945117744698, 0.043591964044126186, 0.23914223921470992, 0.34013467279608772, 0.23157078159613964, 0.20755848067860685, -0.22107962950770196, -0.1025286187683216, 0.035725424097318138, -0.079299771847393549, 0.065331700319185088, -0.034956034554288036, -0.074021765277385243, -0.074018947274086908, -0.10375533557573537, -0.15489773108592672, -0.5463269466436349, -0.64123409592876401, -0.64559475523542686, -0.44280324831238616, 0.018445471788017767, 0.089840998861510313, 0.050489672984820259, 0.10094403852683856, 0.15540921558269635, 0.13542751998114574, 0.092098221631536192, 0.04873056181166658, 0.056474422402955825, -0.033352938195949811, -0.016925686434957218, -0.083060383383990535, -0.060406846903667433, -0.1226120784542102, 0.13458393481660744, 0.19090693911120402, 0.22215018549405383, 0.024793140061198739, 0.038718783333861403, -0.20853401810086775, -0.069635302172998029, 0.1064335953821621, -0.053345012614191917, 0.0099230741314936706, -0.15252816280103507, -0.18245346577017069, -0.29185933229148298, -0.3773223176299495, -0.94040577953315341, -1.0754357146022915, -1.1705860882999222, -0.77145898274834734, -0.079342592710004489, 0.05674840331570382, 0.14324588543960787, 0.12965098836906794, 0.14996801038078103, 0.10954302373131049, 0.12781279786870486, 0.11239290885891398, 0.0020423415177517252, -0.086381624051941733, -0.13062315548602732, -0.036665364495841957, -0.14926486203867201, -0.034593273427634852, 0.012219595757109143, 0.18300384413447635, 0.1958340625177715, 0.044601471225384402, -0.08740484292179726, -0.041369287190262873, -0.21341675767851565, -0.065677188177906895, 0.24144356597505726, -0.36750971454912684, -0.40026408654081164, -0.66562411016509171, -0.77336416928590557, -0.83899416480020206, -1.3372642957080858, -1.5719273509294132, -1.8005308506197781, -1.5408513794669076, -0.5531644985020383, 0.35609170613711127, 0.4116145942481696, 0.13448891283084041, 0.092477162456604783, 0.15737574769334561, 0.17138075095211283, 0.13259733500476581, 0.033522350558872378, -0.13112027137759125, -0.13478379984035713, -0.23416130311702804, -0.17379580132236419, -0.18974789333555622, 0.16649953505637016, 0.21963323601338522, 0.28775437300883855, 0.013318329293152468, -0.059449722211754409, -0.21633114300735917, 0.077936325689886982, -0.23415549346577649, -0.18415548289109335, -0.2220604628402971, -1.203289777252857, -1.2269479805895944, -1.3731553217305832, -1.2989780551182524, -1.64116294353798, -1.9821307035675826, -2.4053777736536572, -2.4259185480628087, -1.4297091333258454, -0.020800703185307738, 0.44907296092364196, 0.1858384756397643, 0.16308782299108818, 0.18780650312631128, 0.16876214929227229, 0.15032501459981898, 0.020281061259495404, -0.0073538013157964212, -0.13702193484548603, -0.059120611570979247, -0.18176695609293375, -0.10265025207047287, -0.00066962538216844151, 0.36158774196732713, 0.23695911940697681, 0.13767875532837892, -0.097481704015832935, -0.1639311930895031, -0.2137091594940832, 0.3107157406422304, -0.63196711118812665, -1.2839600483166249, -1.5107274159689543, -2.0001525985045667, -1.8007661961299211, -1.5766976273496909, -1.557678973082544, -2.4077419089431698, -2.9212825837849552, -3.1544891598954266, -2.0740660744196822, -0.81459993031793032, -0.047691255584086843, 0.26053579199245114, 0.24817234249560396, 0.16271946063708537, 0.1524538089963024, 0.12402459410134949, -0.017228379259870755, -0.059581713131428661, -0.15954900238017725, -0.17203834043004781, -0.03585192275390215, -0.13566388733867182, 0.18529272549107739, 0.32789481378377766, 0.46505832474821029, 0.14493915164048596, -0.068344938706060163, -0.20692971953005135, -0.13321306237600447, -0.22642518078961474, -0.16864865516591712, -1.9309474679838514, -2.6427456963680735, -2.0042907354579094, -2.0679079684570931, -1.6478932560447959, -2.2937692343725686, -2.7282977589825266, -3.4150761242194196, -3.3782856809989692, -2.2222759116849189, -1.2352596784322352, 0.12380717441380877, 0.15120100371873849, 0.22205496825803597, 0.13376820638889372, 0.16581598470153905, 0.21189843131890046, 0.1205613668903118, -0.11944152964360859, -0.2844407665876833, -0.38089709050886922, -0.1254790861941803, -0.12552132795948226, -0.087366382764606329, 0.2312435028685467, 0.42806542968274885, 0.31289505893871633, -0.016555865669298363, -0.15232124758199445, -0.18026213329416074, -0.054197237250036744, -0.92650772032563145, -1.6748432066634964, -1.9667941627002861, -2.2073957813815404, -1.3988308931230464, -2.1872173045798968, -1.7701160974209202, -2.3995834975192563, -3.1079150257531603, -2.2759627738397428, -1.9867837341406698, -1.1991385138433992, 0.25261423619714135, -0.086883949036943853, 0.13841341497021575, -0.013991851319408978, 0.15451076629740176, 0.20777584924549833, 0.37732986906226257, -0.1983231816223982, -0.064701320250050057, -0.75809939060751286, -0.0056552094670687921, -1.0666730319382445, 0.5168021952817432, -0.059867579479421881, 0.57704911017089144, 0.073612585805408248, 0.16986402710259826, -0.27685168579682035, 0.23610433796619823, -0.25969657852055217, -0.34105804260323408, -2.3692424085383355, -0.13683987631719494, -0.60631225487832385, -3.0428213499062093, -1.4302518240108333, -1.0960340088024054, 0.33378719268138207, -1.462532482812221, -1.1311602269894572, -0.42160647485916913, -0.77282398113385165, 0.051358135035689895, -0.12451483496808054, 0.074560604448017945, -0.071400263514198398, 0.12710467168208478, 0.20183473326046905, 0.53582170174408328, -0.31918913661037829, 0.028167647498415164, -0.49375784053277538, -0.67155961060436897, -0.79896724757297555, -0.015611524439376389, 0.074148205591898927, 0.44602122877613765, 0.17221102955705844, 0.070854449837212188, -0.07178740615442418, 0.043350794355038948, 0.23127204626685866, -0.49437187443974595, -1.3068505835636535, -0.50505328014021666, -0.55162352804951942, -2.4095702665388461, -1.9119199452512292], "bottom": {"real": [4046.4241509904555, 28839.973879370627, 10191.512031448321, 4381.7455807293263, 2071.9548413915022, 1107.2825867454831, 528.34551553150311, 308.97330299730402, 185.81061014820492, 130.08108126519062, 87.65365496956511, 59.09553675383809, 43.506269455848397, 34.575222311681692, 30.798097452905282, 25.523061346781674, 25.951646714603154, 25.523061346781589, 30.798097452905211, 34.575222311681706, 43.506269455848361, 59.095536753838019, 87.653654969565167, 130.08108126519082, 185.81061014820492, 308.97330299730379, 528.34551553150334, 1107.2825867454833, 2071.9548413915031, 4381.7455807293318, 10191.512031448323, 28839.973879370646, 13493.224333003216, 16392.519951456161, 4871.8353885075767, 1571.3337493887716, 567.64096645153529, 373.6703632325283, 244.24660034041102, 142.79597933554817, 106.13580676907658, 75.858347622710525, 58.061322564190078, 39.854538473021549, 30.569538051408923, 25.094853941398878, 22.929757321982656, 20.808198660555963, 22.04888812794956, 23.622937534136554, 29.138683151168021, 38.082981074479143, 54.39934218587819, 77.826621492011839, 121.61239162949131, 177.63416429867098, 254.30481783551838, 430.47940336338183, 664.63525809030591, 1219.8477670929726, 1935.5749815900854, 3358.0980991141623, 6069.2175916916049, 8660.7039291701622, 15384.540019848313, 11175.737303494303, 2216.879483433469, 674.59859086304846, 308.57630937597452, 222.13525013253278, 144.62539946693838, 89.351789047349641, 66.200283784031811, 53.5880480094322, 38.104835124660447, 27.112718944065261, 23.033311632510099, 19.858863545618888, 19.408029208714364, 19.38215160767772, 20.871711217553681, 24.726583224259915, 29.429525390428484, 39.688247321389746, 54.026677368666491, 71.509189516532359, 109.7023701375058, 145.30501493896827, 183.84765943176359, 237.38092500065588, 353.51632607639505, 531.27032729465725, 719.17065363709912, 1367.9024800373177, 2857.7322293344778, 8625.0149751320059, 3926.8611003464521, 2444.3527388912776, 1028.8359899085383, 585.56166554295623, 332.57137935864864, 180.13762334769046, 105.17011934648103, 61.496465220623485, 45.504823244138095, 37.908460172493172, 30.846794326525625, 21.222093075405745, 18.718288087401802, 17.679602313216872, 17.409839934721365, 17.794391783727544, 18.55926931620083, 21.348409581307148, 24.39997962145603, 30.767061622228063, 38.103008129659166, 44.81251118779231, 61.577721983396955, 87.291485884508717, 106.99539363556599, 134.18057082099898, 169.37440787587974, 269.99443977661724, 364.56248799144709, 674.50839546082307, 1521.022929703357, 2634.7343778883865, 2024.849011267275, 1926.8239401023498, 1491.9478410044117, 611.83627918833088, 316.43682665588744, 155.99683828976544, 89.673379864750018, 50.013293885425135, 37.528009707176061, 32.4518569290627, 24.966146703509182, 19.130394004010906, 15.343856356149828, 14.843145659919786, 14.861292517540363, 15.036681247518919, 15.312687438440403, 17.138709070816013, 19.446116741695533, 22.850207518010233, 27.457440287528367, 32.581505308308088, 40.985078317877736, 54.412823137373685, 75.762437644265901, 94.733059346587339, 128.1467358253355, 182.29010502256293, 275.95498073034861, 527.32695578494008, 1132.5867520786235, 1866.4077869841046, 2266.7457843108455, 2107.8495169895441, 1234.6592459623437, 673.70954283481137, 266.6693703142779, 139.47307538222793, 66.730731113314476, 41.917980917088734, 31.2590211502941, 26.786032891522527, 20.35627716260823, 16.038244917569745, 14.499148814332527, 13.459360575928033, 13.144389071570192, 12.567429683418663, 12.230328765246885, 13.466217665828195, 15.328301760046475, 17.144679989146308, 19.68756841312236, 24.074134044705339, 32.727034612286992, 43.026808431859955, 59.193773906230369, 78.820512563030945, 92.994178544706472, 120.42091176843755, 201.9182636225097, 436.44287859172925, 877.8862778005057, 1439.6385876846614, 1649.9911393469049, 1699.4038415062987, 1039.2560892520887, 495.51661529689329, 235.81544665938515, 113.58561083280532, 60.921551746622946, 35.725757089786256, 25.024628727892466, 22.490208420088727, 17.759823791920191, 13.543616943986416, 12.938917306264663, 11.956364952724385, 11.421939705679733, 11.372903592178258, 11.032765269291394, 11.408229662647633, 12.481114469594095, 13.60275540468532, 14.91952183557448, 17.807798659576154, 23.277252196336814, 31.950664619854233, 47.416694920263616, 56.268912844615144, 64.959626427586997, 85.070809539003847, 130.82046704446515, 257.67571935262418, 627.46721263291658, 1194.1693767483914, 1080.1900960853154, 902.674413704009, 600.04055794738224, 333.23520458041997, 166.5653831933532, 88.946305547571072, 50.717393232745131, 31.897215329939996, 23.060146944216118, 18.579780562544169, 15.572760511446054, 13.273777678692191, 12.224913053368416, 11.68638594982613, 10.392044527527784, 10.422646713468026, 10.113778554702394, 10.225072497047023, 10.776357928238541, 11.471833692521193, 12.585855785544721, 15.131216045563061, 18.856673404562432, 24.858220592568422, 32.657280802203381, 43.037987696240307, 51.536289299313914, 59.08796022590117, 89.418846636419246, 168.44781050782811, 382.14409608709747, 745.27797642375992, 544.93523795856049, 546.63255943550212, 362.69938393816085, 222.4530875664997, 124.78354764285341, 69.155510455436144, 41.705006957506896, 26.952419331651356, 19.778555411511121, 17.743475715717917, 14.471795156401063, 12.765457059373892, 11.899864411981882, 10.85818004844373, 10.325708895539952, 9.5692719745256376, 9.2113480820863387, 9.0680329970290128, 9.7734432560375648, 10.488284402310196, 11.323197140674811, 13.23504887223821, 16.674941080314653, 20.771526297093455, 27.569417818570489, 33.103068481604573, 37.131609415223707, 47.964760430736398, 66.578817507603574, 119.94841754808802, 237.18123750436465, 409.50889944188236, 307.01018353832677, 288.66760291638428, 236.16368190120858, 154.32114106589464, 92.303773245695481, 55.468009578938926, 35.843010431224045, 24.692475316947775, 18.31794202383119, 15.815283825259236, 13.970653175227845, 12.321358605090134, 11.166914874614415, 10.532076178141539, 9.9738582700772742, 9.4395532322934326, 8.8524779931517035, 8.5960325163902862, 8.7233150994257276, 9.4605465058702709, 10.702831587760128, 11.695932356823622, 14.406509159208545, 18.893042693096525, 25.031728162044864, 28.237283751764654, 32.110154440123182, 38.781782989560291, 56.412497176172337, 92.156945934839797, 157.10935603874077, 244.24925081430641, 218.20881258539546, 216.90433976724358, 169.13695858014356, 112.62100758585845, 68.70530790516959, 45.982361360241526, 32.725373555898344, 22.221572369125827, 17.135020014783734, 14.281960328360523, 12.699315839076576, 11.637118060780567, 11.004832210877884, 10.393382355075936, 9.6259602166533789, 8.7652013845999868, 8.5650120282362092, 8.5854476517741869, 8.1851518687531879, 9.1270872628576836, 9.8383977040140795, 11.693775785132257, 13.287947209975439, 16.544820171465705, 21.672488061489553, 27.762087103200397, 29.796933806391767, 35.443188490268959, 51.826480475596476, 76.692136618774384, 114.45554660359461, 172.81330831382385, 150.57608076172548, 151.07347077509746, 119.80060075739978, 84.307080896770614, 55.59442395215062, 38.954469932130465, 27.855857296119165, 21.147383956632677, 16.095362427853317, 14.114901096214023, 12.272097096384341, 11.279235865220194, 10.45557624282722, 10.213403723979409, 9.4352540004127672, 9.059591562681522, 8.4285767722705884, 8.2189676916739653, 8.2483207838968369, 8.7272133851807343, 9.3853417746714207, 10.436988631508529, 11.737372360714012, 14.160123000210135, 18.959579242189701, 24.173697545434358, 27.627516713161423, 33.591531685669004, 45.297439984936638, 65.897539497304663, 88.610944521286385, 122.51594786973793, 102.9717174324289, 99.771144171631136, 80.254636450195903, 61.009511746666256, 44.786912913807178, 34.271024500323179, 25.65851527359349, 19.184194785168692, 15.369946764821139, 13.384363033613122, 12.174478369218367, 10.905903566261369, 10.181651684644681, 9.6408755952533021, 9.5742304532973588, 8.9763308722412098, 8.5493032688069821, 8.0644484764315241, 8.4276865988342919, 8.7290963397981098, 9.1210926884309647, 10.045472592156113, 11.11042960636143, 12.723025686618605, 15.905816263070196, 20.709491045732211, 24.791931496783274, 30.865414152401307, 41.835714185623189, 55.039237230593706, 69.947250962386548, 86.305656954166849, 70.246077416654487, 70.163190967731239, 60.941585457354833, 46.988681551588527, 37.426824229947464, 31.105114654781531, 24.717957509432271, 18.191253220796238, 14.40571246916225, 12.794837539520243, 11.45286867499644, 10.555233980671725, 10.138595490186225, 9.7617939326440126, 9.2945114067021706, 9.1978519570897408, 8.5269704682665068, 8.3694986947733589, 8.3900850601209847, 8.9019780110016278, 9.4993224051697176, 10.189344774081897, 11.038776504531349, 12.139382952337165, 14.296273465828305, 18.325479810549485, 23.245126565071455, 28.658675517780157, 38.227879918404916, 50.026933715114076, 59.913478880080035, 67.142884728350211, 60.673200962744687, 56.006191670589025, 48.952383807337931, 41.877289900824969, 35.563752651142892, 29.381802508508265, 23.323351055229473, 18.385352146785323, 14.386074460433269, 11.971768024825069, 10.813949701229296, 10.104265892334448, 9.7873837360525968, 9.7876450182420029, 9.3736570608881902, 9.1067837514303367, 8.8782742568475381, 8.4108604655156682, 8.5145291911969032, 9.1444638633789328, 9.5903687569174956, 10.050972673200409, 10.599176866339214, 12.029252308933458, 13.885440808202775, 16.933840539652099, 20.949767453800131, 27.392670445772911, 35.246945811604022, 44.844494652773115, 53.527920120533459, 59.511906457614529, 53.048047546158344, 49.667902591204928, 45.161821768091436, 39.040569237963304, 34.153498370766542, 28.812200326236947, 21.915204963295363, 16.825291542921018, 14.194481006765461, 11.707465544074312, 10.438485210613589, 9.8151245648739263, 9.283134914271356, 9.0821420578250009, 9.0470505359514384, 9.0924089982219396, 8.8466944313913523, 8.4735939062643375, 8.4980702515250215, 9.0113445722107848, 9.2898710387292809, 9.9575678866832327, 10.426127211956205, 11.223822839806607, 13.773251241827809, 16.688691177663944, 20.746301629724744, 26.320191080313084, 33.979868436578599, 42.0788988747152, 48.313306819757166, 52.481937610238305, 49.070609767594966, 49.766679020971374, 46.544272852318578, 40.229040805773415, 32.559839637781486, 26.180018982316895, 21.083604085221012, 16.97356072267355, 13.301411970448795, 11.264067238060504, 10.255581922596939, 9.6536213682112031, 9.2153774062964224, 8.7468110761182825, 8.4356542718375049, 8.7323846743622209, 8.8458599078381237, 8.7323846743622209, 8.4356542718375032, 8.7468110761182896, 9.2153774062964278, 9.653621368211212, 10.255581922596944, 11.264067238060512, 13.301411970448795, 16.973560722673543, 21.083604085221008, 26.180018982316881, 32.559839637781494, 40.22904080577338, 46.544272852318571, 49.766679020971331, 53.048047546158344, 52.481937610238198, 48.313306819757052, 42.0788988747152, 33.979868436578577, 26.320191080313087, 20.746301629724748, 16.688691177663959, 13.773251241827822, 11.22382283980661, 10.426127211956201, 9.9575678866832256, 9.2898710387292791, 9.0113445722107919, 8.4980702515250268, 8.4735939062643357, 8.8466944313913505, 9.0924089982219467, 9.0470505359514402, 9.0821420578250063, 9.2831349142713542, 9.815124564873928, 10.438485210613582, 11.707465544074319, 14.194481006765461, 16.825291542921001, 21.915204963295366, 28.81220032623694, 34.153498370766549, 39.040569237963282, 45.161821768091372, 49.667902591204999, 60.67320096274468, 59.511906457614572, 53.527920120533402, 44.844494652773072, 35.246945811604007, 27.392670445772925, 20.949767453800135, 16.933840539652095, 13.88544080820277, 12.029252308933453, 10.599176866339214, 10.0509726732004, 9.5903687569174885, 9.1444638633789328, 8.5145291911969103, 8.4108604655156718, 8.8782742568475346, 9.1067837514303385, 9.3736570608881848, 9.7876450182420012, 9.7873837360526021, 10.10426589233446, 10.813949701229305, 11.971768024825074, 14.386074460433273, 18.385352146785333, 23.323351055229466, 29.381802508508251, 35.563752651142877, 41.877289900824962, 48.952383807337874, 56.006191670588912, 70.246077416654288, 67.142884728350111, 59.913478880079964, 50.026933715114062, 38.227879918404923, 28.658675517780189, 23.24512656507147, 18.325479810549478, 14.296273465828305, 12.139382952337156, 11.038776504531354, 10.189344774081897, 9.4993224051697229, 8.9019780110016331, 8.3900850601209847, 8.3694986947733572, 8.5269704682665068, 9.197851957089739, 9.2945114067021635, 9.7617939326440144, 10.138595490186225, 10.555233980671725, 11.452868674996441, 12.794837539520238, 14.405712469162248, 18.191253220796249, 24.717957509432264, 31.105114654781534, 37.426824229947449, 46.988681551588492, 60.941585457354776, 70.163190967731154, 102.97171743242879, 86.305656954166807, 69.947250962386491, 55.039237230593784, 41.835714185623168, 30.865414152401325, 24.791931496783278, 20.709491045732214, 15.905816263070196, 12.723025686618604, 11.110429606361421, 10.045472592156107, 9.1210926884309735, 8.7290963397981116, 8.4276865988342937, 8.0644484764315258, 8.5493032688069821, 8.9763308722412134, 9.5742304532973623, 9.6408755952533056, 10.181651684644681, 10.905903566261369, 12.174478369218367, 13.384363033613125, 15.369946764821144, 19.184194785168689, 25.658515273593498, 34.271024500323144, 44.78691291380715, 61.009511746666178, 80.25463645019579, 99.771144171631008, 150.57608076172505, 122.51594786973776, 88.610944521286228, 65.897539497304635, 45.297439984936574, 33.591531685669025, 27.627516713161402, 24.173697545434354, 18.959579242189701, 14.160123000210131, 11.737372360714007, 10.436988631508525, 9.3853417746714172, 8.7272133851807325, 8.2483207838968262, 8.2189676916739689, 8.4285767722705902, 9.0595915626815202, 9.4352540004127654, 10.213403723979411, 10.455576242827226, 11.279235865220191, 12.272097096384336, 14.114901096214016, 16.095362427853331, 21.147383956632702, 27.855857296119162, 38.954469932130408, 55.594423952150585, 84.307080896770429, 119.80060075739968, 151.07347077509721, 218.20881258539524, 172.81330831382382, 114.45554660359451, 76.692136618774427, 51.826480475596433, 35.443188490268959, 29.796933806391745, 27.762087103200372, 21.672488061489549, 16.544820171465698, 13.287947209975444, 11.693775785132251, 9.8383977040140866, 9.1270872628576836, 8.1851518687531897, 8.5854476517741798, 8.5650120282362074, 8.7652013845999939, 9.6259602166533789, 10.393382355075921, 11.004832210877884, 11.637118060780562, 12.699315839076572, 14.281960328360505, 17.135020014783741, 22.221572369125806, 32.725373555898322, 45.982361360241477, 68.705307905169562, 112.62100758585837, 169.13695858014344, 216.90433976724287, 307.01018353832563, 244.24925081430612, 157.1093560387404, 92.156945934839754, 56.412497176172316, 38.781782989560298, 32.110154440123168, 28.237283751764654, 25.031728162044857, 18.893042693096504, 14.406509159208543, 11.695932356823613, 10.702831587760132, 9.4605465058702674, 8.7233150994257205, 8.5960325163902844, 8.8524779931517052, 9.4395532322934272, 9.9738582700772813, 10.53207617814155, 11.166914874614413, 12.321358605090143, 13.970653175227838, 15.815283825259229, 18.317942023831186, 24.692475316947778, 35.843010431224023, 55.468009578938812, 92.303773245695368, 154.32114106589427, 236.16368190120789, 288.66760291638354, 544.93523795856049, 409.50889944188282, 237.18123750436465, 119.9484175480882, 66.578817507603574, 47.964760430736455, 37.131609415223693, 33.103068481604559, 27.569417818570489, 20.771526297093434, 16.674941080314646, 13.235048872238199, 11.323197140674804, 10.488284402310184, 9.7734432560375648, 9.068032997029011, 9.2113480820863387, 9.5692719745256465, 10.325708895539957, 10.85818004844373, 11.899864411981884, 12.765457059373892, 14.471795156401072, 17.743475715717903, 19.778555411511121, 26.952419331651342, 41.705006957506882, 69.155510455435987, 124.78354764285341, 222.45308756649936, 362.69938393816079, 546.63255943550212, 1080.190096085312, 745.27797642375788, 382.14409608709587, 168.44781050782805, 89.418846636419218, 59.087960225901135, 51.536289299313893, 43.037987696240307, 32.657280802203374, 24.858220592568383, 18.8566734045624, 15.131216045563052, 12.585855785544725, 11.471833692521184, 10.776357928238532, 10.225072497047019, 10.113778554702403, 10.422646713468026, 10.39204452752778, 11.686385949826136, 12.224913053368411, 13.273777678692191, 15.572760511446033, 18.579780562544141, 23.060146944216122, 31.897215329939918, 50.717393232745025, 88.946305547570788, 166.56538319335294, 333.23520458041884, 600.04055794738088, 902.6744137040065, 1649.9911393469013, 1194.1693767483896, 627.46721263291568, 257.67571935262464, 130.82046704446515, 85.070809539003903, 64.95962642758694, 56.268912844615201, 47.416694920263595, 31.950664619854226, 23.277252196336782, 17.807798659576147, 14.919521835574468, 13.60275540468532, 12.481114469594081, 11.408229662647638, 11.032765269291394, 11.37290359217827, 11.421939705679749, 11.956364952724407, 12.938917306264656, 13.543616943986398, 17.759823791920141, 22.490208420088635, 25.024628727892473, 35.725757089786228, 60.92155174662291, 113.58561083280503, 235.81544665938503, 495.51661529689198, 1039.2560892520876, 1699.403841506296, 2266.7457843108423, 1439.6385876846614, 877.88627780050422, 436.44287859172971, 201.91826362250967, 120.42091176843758, 92.994178544706443, 78.820512563031016, 59.193773906230312, 43.026808431859891, 32.72703461228695, 24.074134044705318, 19.687568413122339, 17.144679989146301, 15.32830176004647, 13.466217665828177, 12.230328765246888, 12.567429683418707, 13.144389071570203, 13.459360575928054, 14.499148814332536, 16.038244917569731, 20.356277162608194, 26.786032891522385, 31.259021150294068, 41.917980917088691, 66.730731113314405, 139.47307538222745, 266.66937031427761, 673.70954283481024, 1234.659245962343, 2107.8495169895405, 2024.849011267276, 1866.4077869841062, 1132.5867520786235, 527.32695578494054, 275.9549807303485, 182.29010502256293, 128.14673582533564, 94.733059346587495, 75.762437644265887, 54.412823137373678, 40.985078317877729, 32.581505308308067, 27.457440287528364, 22.850207518010212, 19.446116741695526, 17.138709070816009, 15.312687438440404, 15.036681247518965, 14.861292517540395, 14.843145659919811, 15.343856356149836, 19.130394004010878, 24.966146703509185, 32.451856929062608, 37.528009707176075, 50.013293885425036, 89.673379864749862, 155.99683828976509, 316.43682665588739, 611.83627918833008, 1491.9478410044112, 1926.8239401023493, 3926.8611003464503, 2634.734377888386, 1521.0229297033557, 674.50839546082398, 364.56248799144686, 269.99443977661741, 169.37440787587963, 134.18057082099915, 106.99539363556599, 87.291485884508702, 61.577721983396906, 44.812511187792317, 38.103008129659166, 30.767061622228066, 24.399979621456033, 21.348409581307155, 18.55926931620083, 17.794391783727576, 17.409839934721397, 17.67960231321689, 18.718288087401788, 21.222093075405763, 30.846794326525586, 37.908460172493079, 45.504823244138095, 61.496465220623335, 105.17011934648093, 180.13762334768973, 332.57137935864853, 585.56166554295532, 1028.8359899085369, 2444.3527388912739, 15384.540019848309, 8625.0149751320096, 2857.732229334476, 1367.9024800373199, 719.17065363709889, 531.27032729465782, 353.51632607639499, 237.38092500065625, 183.84765943176362, 145.3050149389683, 109.70237013750581, 71.509189516532217, 54.026677368666469, 39.688247321389689, 29.429525390428473, 24.726583224260004, 20.871711217553678, 19.382151607677731, 19.408029208714364, 19.858863545618949, 23.033311632510113, 27.11271894406525, 38.10483512466044, 53.588048009431979, 66.200283784031811, 89.351789047349371, 144.62539946693829, 222.13525013253218, 308.57630937597452, 674.59859086304834, 2216.8794834334685, 11175.737303494294, 13493.224333003214, 8660.703929170164, 6069.217591691604, 3358.0980991141591, 1935.5749815900851, 1219.8477670929722, 664.63525809030602, 430.47940336338263, 254.30481783551838, 177.63416429867087, 121.61239162949126, 77.826621492011839, 54.399342185878204, 38.082981074479164, 29.138683151168006, 23.622937534136597, 22.04888812794956, 20.808198660555991, 22.92975732198266, 25.094853941398917, 30.569538051408909, 39.854538473021513, 58.061322564190043, 75.858347622710383, 106.13580676907651, 142.795979335548, 244.24660034041099, 373.67036323252819, 567.64096645153575, 1571.3337493887695, 4871.835388507573, 16392.519951456165], "imag": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "imag": [0.0, -1.343901621327011, 1.7218333249394571, 1.3937858919791224, -0.90478486773452105, 0.99560837280124848, 0.13374486301187097, 0.79781790598886937, 0.081235430122062774, 0.47338465820086184, -0.078534664439216209, 0.29500119331967589, -0.62479162763734286, 0.29517170974740459, -1.8712573358384692, 0.14096520515743682, 0.0, -0.14096520515741828, 1.8712573358384816, -0.29517170974737811, 0.62479162763733731, -0.29500119331966146, 0.078534664439223051, -0.47338465820085962, -0.081235430122062774, -0.79781790598886004, -0.13374486301187369, -0.99560837280124848, 0.90478486773452083, -1.3937858919791226, -1.7218333249394557, 1.3439016213270112, 1.5871307700950068, 0.56370110925886319, 1.2603198064423482, 2.9317402483699255, -0.84090846562801591, 0.28395441021550888, 1.0393523450590114, 0.83104911233799517, 0.57334259680943678, 0.30043904784975134, 0.29266755430531527, 0.082930104064024152, -0.36502835420313379, -0.76213554623438207, -0.54316838647957832, -0.66028179246101926, 0.20250391456576916, -0.059393044635645806, 0.9730252602081445, -0.01782962412134724, 0.18933865423621773, 0.011846708470834844, 0.014269719747672759, -0.16281560265463554, -0.24410560657714067, -0.34963232308526365, -0.32234943120999277, -0.6691127915152365, 0.14162995430492473, -0.96909874957635578, -1.0446282489208472, 1.3612809629252947, 0.70464907960903156, 1.644656498115789, 1.457626495523533, -0.6840361527612806, -0.68147470897196205, 0.73118573872942638, 1.2398159392319572, 1.2736175855463174, 0.65550663858936109, 0.45897332874861019, 0.24948129249627171, 0.22959418801218681, -0.67355449112520815, -0.78917379441405089, -0.83366315887398401, -0.022795944141155908, 0.15753196960053301, 0.50836195321582456, 0.16292155588892338, 0.14047533322536612, -0.029004083819245446, 0.042892010327960466, -0.084780328674450303, -0.13217055914433321, -0.30971168558439593, -0.44061350110378666, -0.59380988893293396, -0.46719027726302742, -1.2068396187631398, -0.94969408752542273, 0.28960616895899027, -0.40038203546320883, 0.55620249274438927, 0.14065731983379595, 1.390858139437829, -0.67833342052765033, -2.0926714021100303, 1.5120873610545131, 1.7251253398279642, 1.0499886203647506, 0.6413261932720733, 0.43315407205712014, 0.32584150801434064, 0.17968537990933128, -0.27887473465086693, -0.72646685328097149, -0.95200274282553721, -0.38747270801185796, 0.31172559850957127, 0.3167238274644899, 0.25925756638025876, 0.20404659434537992, 0.19201780058118942, 0.0025274006864131854, -0.20254250312507205, -0.30146681989018398, -0.45156398868756126, -0.71583959398165176, -0.78636343748881254, -1.3089140888320636, 0.41393919421363429, -0.92308378001125058, -0.96086768695066838, 0.99489496750979101, -0.39381772120025876, -0.59264738582705545, -1.1161873115341066, -0.38954314931717815, 0.15776662530084892, 0.39428020304678685, 1.7089894615168126, 0.92868491010646026, 0.350973234838865, 0.32125288047075679, 0.23669588269358602, 0.19592809956108717, -0.32646969875093118, -0.5617213523679232, -0.76596137582739887, -0.4848448097808058, 0.0035984972735877987, 0.36234031342999445, 0.02584515038201295, 0.38132345964413561, 0.29172235696712762, 0.10460468586389386, -0.14942504329756173, -0.23406484190568319, -0.59702583417138988, -0.64791716309340031, -1.1972380302487249, -0.37081056871520385, 0.31028937719203986, -0.11181138224479611, 0.050224150041196312, -0.59242819035998506, -0.4703174557375312, -0.55567065990801068, -0.18073895078348806, -0.07286620180284567, 0.9080135456055427, 1.3448759333642528, 0.56391746646770735, 0.68824563709365816, 0.27054447491545203, 0.18555506064923469, 0.21628766080629094, 0.089227696371118645, -0.1330464412169812, -0.51044075389216448, -0.57482956329522528, -0.49992842173388902, -0.0088882269741786465, -0.026119953804469152, 0.16649307508904443, 0.18021017930701566, 0.24129551707937363, 0.051414766220490717, -0.054409237913703348, -0.21354052285348152, -0.34065461819243753, -0.83215952955458006, -0.65455151443418824, -0.51711748874533736, -0.34193161983249143, 0.25991967791421511, -0.31922838969311168, -0.25096233231074472, -0.019538834540300996, 0.23386297177233037, 0.39736821511961345, 0.72603823847118543, 0.8168297825020705, 1.0763583447726135, 0.80611388127401196, -0.023349196100613815, 0.09911450222934183, 0.11136104528246665, 0.11912886110102348, 0.1510441091194204, -0.10294245821664937, -0.34339582552474845, -0.46071517851602106, -0.27454988477746128, -0.021291149638310566, 0.035818571775215378, 0.08165077597052256, 0.19593247304969552, 0.16021249355536668, 0.073411101811457824, -0.094413661460628892, -0.14774431296435828, -0.3788677957633147, -0.38953231590523063, -0.62892221563014938, -0.80219655994233319, 0.19764870263775744, -0.28620163890053252, 0.041738811618785537, -0.047502831671303453, 0.42759360787810174, 0.44353340330745888, 0.61232760985457502, 0.70207820166905466, 0.72192603666395361, 0.63928791416871467, 0.32589261306510392, 0.17268517789923485, -0.11832252230060911, 0.049391580905339259, 0.12347320818582375, 0.064697981434016727, -0.0067102091687047593, -0.27370819742589092, -0.26939466873920287, -0.25176222060998998, 0.0081310228529853402, 0.013089808045657288, 0.185105158015618, 0.11713478908555769, 0.20974664985683705, 0.048745778368168922, -0.0069359534603168627, -0.18083894269546222, -0.15907734702039189, -0.30490326972545728, -0.49525043110711681, -0.20633977154543071, -0.28929558460304977, 0.017255660868048289, 0.089250558912840242, 0.34349774583430781, 0.38277205043588519, 0.56772102070325814, 0.48811475177501612, 0.43659704639067964, 0.38858095560717315, 0.35469216713625445, 0.11095078972724678, -0.050354098986562471, 0.010426074631633324, -0.023032548262322892, 0.068558023511485697, 0.1199625535177883, -0.0044347552049944488, -0.14323623171577524, -0.2742488887234425, -0.15059247824174998, -0.18695930341705305, 0.068136880204083733, 0.049162011568203073, 0.16362595169702937, 0.078325720975578078, 0.11153460033842358, -0.10346450949096449, -0.039250261082814021, -0.12027128091306288, -0.23113762225192683, -0.07885965728132803, -0.25982980909746989, -0.11219308206942701, -0.19372413199270677, 0.1843821378255476, 0.22544536191476028, 0.22838873802709003, 0.11856768480607156, 0.20011010622694389, 0.16443500436191505, 0.13441036107213369, 0.15600995797323181, 0.029984980792926118, -0.017950425588896139, -0.095997178609832007, 0.045815559155676679, 0.050600401411128038, 0.062555070152262096, 0.095362679574156284, -0.25884721081868178, -0.19352665675464722, -0.35758313393883445, 0.057241994101256972, -0.074489797691212556, 0.15760636776309309, 0.077110294424560424, 0.21793581355625327, -0.085384156728057797, 0.054278095118519401, -0.063513516552257218, -0.13925876777247995, -0.053090482149624127, -0.088550664314818353, 0.097053178020475875, 0.021982682491266895, -0.032057043772553598, 0.011606155190390474, 0.20297398899260674, 0.087137707937781944, 0.14235450986309658, -0.0066344290522644652, 0.069443551113326479, 0.037974760198136455, 0.02723212012252952, -0.030406089689394462, -0.062891439826322393, -0.033462702565164315, -0.13091343010011852, 0.18662643567548856, 0.14580799486104234, -0.055902479292620696, -0.12813917376287484, -0.43706544906097528, -0.097926711565598012, -0.17130544619864244, 0.30727693305691806, -0.2953735036217468, 0.22056405751825581, -0.16529753202987246, 0.34047455883436423, -0.0020829156573361745, -0.14775664020163451, -0.074518551996532553, -0.14850320507536691, -0.057283952975165524, 0.064665418468806371, 0.23511892751228192, 0.11870789775778592, 0.0625549454189092, -0.031298024311669038, 0.0064402102662661845, -0.079082063664820082, 0.0553675188881671, 0.025089334126077875, 0.063800091749494747, 0.015988824093570549, -0.048545356942180602, -0.11558972094679192, -0.097487343329346582, -0.00049492928166827938, -0.18157168721539482, 0.33942288969170681, 0.30522386319855388, -0.54639589537101751, 0.013830571830100688, -0.38850732372171304, 0.223075916963486, -0.31865288748874443, 0.25745374979707547, -0.81885347149607268, 0.50855168910609783, 0.20195166784419227, -0.069785743671890318, 0.050884179954965268, -0.18377202523753672, -0.17303565260659334, -0.15924096907201105, 0.092146932205194695, 0.26379835890783954, 0.35934781180257075, 0.24329566614587647, 0.18564601960109514, 0.24223475523068938, 0.28967646870392649, 0.15967526911861643, 0.22365254766781259, 0.12185893624650075, 0.070105150765122456, -0.045495054958742086, -0.13016925945874308, -0.12331107551299306, -0.096585989040329473, 0.22919036999990153, -0.39865574246315477, 0.3675558227752026, 0.45597314967635888, -0.93227329954448013, 0.32110784375924512, -0.59160024067907024, 0.39469180639349893, -1.5810043928614619, 0.71926168426275527, -0.095920343398476549, -0.084877145937512208, 0.40399573862898452, -0.041743397742653787, -0.10303861084867461, -0.21220001866353477, -0.17318676777643013, 0.015792824133968684, 0.37994714934071439, 0.4573031649737595, 0.48491463219236358, 0.278045596991639, 0.33099751793182702, 0.073461819418744675, 0.30445717300203839, 0.34815332433352569, 0.27336662525128713, 0.050113511094951838, -0.059405844632707393, -0.16261143474742229, -0.10891422081227681, -0.075070297171157971, 0.15348950297637756, 0.63132994551184463, -0.93604459898777692, 0.42325697055405742, 1.1782712312395338, -1.6700526640562563, 0.67307548012867768, -2.0365876460209691, 0.69665186973993298, -0.3990336398782886, -0.77751104168880314, 0.5628167675812451, 0.044468991083659551, 0.081278132745909976, -0.070993394358423723, -0.091852860366211056, -0.10956166698887557, 0.072941493094735049, 0.35167328896657912, 0.63488067579895824, 0.56199684605205058, 0.60627707274502263, -0.018970197624819329, 0.37668655809680845, 0.22317003729918369, 0.17596357423928666, 0.18202109891962201, 0.038230887694388455, -0.10475039750351335, -0.15123171993121909, -0.11278544639649389, 0.054110895720760221, 0.23852479976301316, 0.30802887330694756, 0.9587111952302938, -1.4503952980081434, -0.061458391503499687, 2.1389978076683529, -3.5142346308062073, 1.6764175122847729, -0.63252660757872936, -1.1970497991660358, 0.46027494328631885, -0.38868529039399474, 0.063066133758830412, 0.085024034480974467, 0.047630852690686495, -0.022775175196356016, 0.011847923870825085, 0.13095780969018636, 0.39870906011464996, 0.54100133271840178, 0.62859642257501991, 0.12859489098386362, -0.17371304193339687, -0.77135662792152559, -0.35696964892202537, -0.15350152251372465, -0.081108427029901481, -0.12890403553126065, -0.14048874638904316, -0.18368108831833277, -0.13143015225876853, 0.037318187986402011, 0.39815350666418903, 0.44685069559938601, 0.29854169122462937, 1.0193515924216456, -2.1696976832709978, -1.5476694374721527, 4.1115013597100623, -1.6066056279080296, -1.1129988398741206, 0.94641351902713078, -0.66464487182371434, -0.22405122030787003, -0.16845135046504239, 0.10281428632219461, 0.12776142939872864, 0.10903691838775739, 0.097477148948306502, 0.19622512970077355, 0.37581890109000032, 0.58152174984392169, 0.57588244896775898, 0.56835821427965394, 0.0, -0.075660591040101741, -0.5319087481065502, -0.49066506338765509, -0.25388521774435541, -0.17759782612549996, -0.17342105765811164, -0.17172379067488869, -0.17163733194043357, -0.0096917261033460274, 0.23320936684713756, 0.61544163247884909, 0.23031783223894131, 0.4504667163321609, -0.25422186154383031, -1.2338903723029762, 0.0, 1.2338903723029679, 0.25422186154382892, -0.45046671633216256, -0.23031783223894184, -0.61544163247884998, -0.2332093668471385, 0.0096917261033450074, 0.17163733194043357, 0.17172379067488885, 0.17342105765811225, 0.17759782612550043, 0.25388521774435546, 0.49066506338765642, 0.53190874810654976, 0.075660591040102837, 0.17371304193345374, -0.56835821427958444, -0.57588244896772234, -0.58152174984391114, -0.37581890108999716, -0.19622512970076919, -0.097477148948305531, -0.10903691838775691, -0.12776142939873006, -0.10281428632219579, 0.16845135046504131, 0.22405122030786861, 0.66464487182371257, -0.94641351902713855, 1.1129988398741191, 1.6066056279080259, -4.1115013597100578, 1.5476694374721462, 2.1696976832709982, -1.0193515924216472, -0.29854169122463242, -0.44685069559938834, -0.39815350666419097, -0.037318187986404149, 0.13143015225876697, 0.18368108831833294, 0.14048874638904385, 0.12890403553126736, 0.081108427029909794, 0.15350152251374438, 0.35696964892206617, 0.77135662792155557, 0.018970197624865574, -0.12859489098383081, -0.62859642257500314, -0.54100133271839856, -0.39870906011464824, -0.13095780969018578, -0.011847923870824886, 0.022775175196357359, -0.047630852690687051, -0.085024034480974689, -0.063066133758832563, 0.38868529039399197, -0.46027494328632251, 1.1970497991660347, 0.63252660757872814, -1.6764175122847713, 3.5142346308062082, -2.1389978076683618, 0.061458391503496308, 1.4503952980081398, -0.95871119523029713, -0.30802887330694667, -0.2385247997630148, -0.054110895720761498, 0.11278544639649313, 0.15123171993121864, 0.1047503975035141, -0.038230887694384028, -0.18202109891961496, -0.17596357423927469, -0.2231700372991606, -0.37668655809676688, -0.33099751793180054, -0.60627707274499654, -0.56199684605203359, -0.63488067579895024, -0.35167328896657507, -0.072941493094733675, 0.1095616669888755, 0.091852860366211805, 0.07099339435842339, -0.08127813274590924, -0.044468991083660724, -0.56281676758124888, 0.77751104168880336, 0.39903363987828711, -0.69665186973992854, 2.0365876460209633, -0.67307548012867546, 1.6700526640562572, -1.17827123123954, -0.42325697055405653, 0.93604459898777859, -0.63132994551184651, -0.15348950297637845, 0.075070297171156097, 0.10891422081227575, 0.16261143474742193, 0.059405844632708517, -0.050113511094947612, -0.27336662525128258, -0.34815332433351742, -0.30445717300202041, -0.073461819418725136, -0.24223475523068566, -0.278045596991634, -0.48491463219235625, -0.45730316497375445, -0.37994714934071183, -0.015792824133968708, 0.17318676777642958, 0.21220001866353638, 0.10303861084867472, 0.04174339774265514, -0.40399573862898636, 0.084877145937511819, 0.095920343398476396, -0.71926168426275106, 1.5810043928614652, -0.39469180639349549, 0.59160024067907002, -0.32110784375924395, 0.93227329954447902, -0.4559731496763611, -0.36755582277520088, 0.39865574246315755, -0.22919036999990147, 0.096585989040328876, 0.12331107551299252, 0.1301692594587433, 0.045495054958742745, -0.070105150765121721, -0.12185893624649984, -0.22365254766781101, -0.15967526911861513, -0.28967646870392255, -0.0064402102662611729, -0.18564601960108706, -0.24329566614587189, -0.35934781180256659, -0.2637983589078372, -0.092146932205193599, 0.15924096907201093, 0.17303565260659445, 0.18377202523753683, -0.05088417995496395, 0.069785743671890568, -0.20195166784419286, -0.50855168910609727, 0.81885347149607191, -0.25745374979707175, 0.3186528874887527, -0.22307591696348483, 0.38850732372171648, -0.013830571830101068, 0.54639589537102196, -0.30522386319855499, -0.33942288969170481, 0.18157168721539607, 0.0004949292816654663, 0.097487343329345874, 0.11558972094679136, 0.04854535694218131, -0.015988824093569717, -0.06380009174949508, -0.025089334126078205, -0.055367518888164394, 0.079082063664820748, -0.087137707937777115, 0.031298024311669809, -0.062554945418906743, -0.1187078977577844, -0.23511892751228033, -0.064665418468805788, 0.057283952975166051, 0.14850320507536743, 0.074518551996532748, 0.14775664020163706, 0.0020829156573371555, -0.34047455883436323, 0.16529753202987046, -0.22056405751825445, 0.29537350362174863, -0.30727693305691484, 0.17130544619864224, 0.097926711565602301, 0.43706544906097711, 0.12813917376287753, 0.055902479292622584, -0.14580799486104357, -0.18662643567548898, 0.13091343010011883, 0.03346270256516358, 0.062891439826322837, 0.030406089689394671, -0.027232120122529239, -0.037974760198136892, -0.069443551113326632, 0.0066344290522653612, -0.14235450986309153, -0.22838873802708684, -0.2029739889926063, -0.011606155190393872, 0.032057043772551565, -0.021982682491265355, -0.097053178020474681, 0.088550664314818187, 0.053090482149624633, 0.13925876777248047, 0.063513516552260146, -0.054278095118517826, 0.08538415672805795, -0.21793581355625447, -0.077110294424558939, -0.15760636776309189, 0.074489797691215873, -0.057241994101257694, 0.35758313393883939, 0.19352665675464989, 0.25884721081868634, -0.095362679574154757, -0.062555070152259029, -0.050600401411129904, -0.04581555915567774, 0.095997178609832215, 0.0179504255888953, -0.029984980792924155, -0.15600995797322956, -0.13441036107213314, -0.16443500436191227, -0.20011010622694014, -0.1185676848060674, -0.38277205043588519, -0.22544536191476122, -0.18438213782554774, 0.19372413199270522, 0.11219308206942717, 0.25982980909746933, 0.078859657281328127, 0.23113762225192824, 0.12027128091306288, 0.03925026108281611, 0.10346450949096535, -0.11153460033842286, -0.078325720975578092, -0.16362595169702793, -0.049162011568201006, -0.06813688020407746, 0.18695930341705305, 0.15059247824175628, 0.27424888872344572, 0.14323623171577923, 0.0044347552049957819, -0.11996255351778637, -0.068558023511484198, 0.023032548262321723, -0.010426074631633324, 0.05035409898656467, -0.11095078972724633, -0.35469216713625396, -0.38858095560717304, -0.43659704639067964, -0.48811475177501651, -0.56772102070325836, -0.42759360787810491, -0.34349774583431025, -0.089250558912845224, -0.017255660868053985, 0.28929558460304938, 0.20633977154543065, 0.49525043110711575, 0.30490326972545867, 0.15907734702039197, 0.18083894269546641, 0.0069359534603191542, -0.048745778368166057, -0.20974664985683683, -0.11713478908555536, -0.18510515801561447, -0.013089808045645399, -0.0081310228529865667, 0.25176222061000281, 0.2693946687392072, 0.27370819742589902, 0.0067102091687078758, -0.064697981434012536, -0.12347320818582255, -0.049391580905336498, 0.11832252230060807, -0.17268517789922963, -0.32589261306509937, -0.639287914168712, -0.72192603666395261, -0.70207820166905555, -0.61232760985457479, -0.44353340330746277, 0.019538834540299969, 0.047502831671299713, -0.041738811618788646, 0.28620163890052958, -0.19764870263775797, 0.80219655994233652, 0.62892221563015416, 0.38953231590523568, 0.37886779576331475, 0.14774431296436413, 0.094413661460632833, -0.073411101811453133, -0.16021249355536557, -0.19593247304968892, -0.081650775970513151, -0.035818571775193361, 0.021291149638310077, 0.27454988477748077, 0.46071517851603194, 0.34339582552475939, 0.10294245821665464, -0.15104410911941546, -0.11912886110102075, -0.1113610452824651, -0.099114502229341719, 0.023349196100618572, -0.80611388127400851, -1.0763583447726097, -0.8168297825020715, -0.72603823847118742, -0.39736821511961523, -0.23386297177233123, 0.4703174557375292, 0.25096233231074278, 0.31922838969310624, -0.25991967791422005, 0.34193161983249054, 0.51711748874534202, 0.65455151443419168, 0.83215952955458772, 0.34065461819243747, 0.21354052285348993, 0.054409237913707532, -0.051414766220484194, -0.24129551707937194, -0.18021017930700467, -0.16649307508903324, 0.02611995380449984, 0.0088882269741778191, 0.49992842173391339, 0.57482956329523827, 0.51044075389218102, 0.13304644121698647, -0.089227696371110179, -0.21628766080628836, -0.18555506064923225, -0.27054447491545125, -0.68824563709364495, -0.56391746646770291, -1.3448759333642519, -0.90801354560554559, 0.072866201802841646, 0.18073895078348665, 0.55567065990800857, 0.39381772120025821, 0.59242819035998318, -0.05022415004119711, 0.11181138224479518, -0.31028937719203997, 0.3708105687152074, 1.1972380302487284, 0.6479171630934083, 0.5970258341713901, 0.23406484190569171, 0.1494250432975659, -0.10460468586388726, -0.29172235696712562, -0.38132345964412656, -0.02584515038199919, -0.36234031342997136, -0.0035984972735878563, 0.484844809780835, 0.76596137582741564, 0.56172135236794307, 0.32646969875093934, -0.19592809956107882, -0.23669588269358457, -0.32125288047075495, -0.35097323483886461, -0.92868491010645182, -1.7089894615168075, -0.39428020304678818, -0.15776662530084981, 0.38954314931717637, 1.1161873115341048, 0.59264738582705467, -0.5562024927443876, -0.99489496750979078, 0.9608676869506646, 0.92308378001124303, -0.4139391942136339, 1.3089140888320632, 0.78636343748881332, 0.71583959398165975, 0.45156398868756092, 0.30146681989019147, 0.20254250312507779, -0.0025274006864056797, -0.19201780058118689, -0.20404659434537004, -0.25925756638025355, -0.31672382746446043, -0.31172559850957088, 0.38747270801190198, 0.95200274282556019, 0.72646685328099436, 0.2788747346508717, -0.17968537990931685, -0.3258415080143367, -0.43315407205711348, -0.64132619327207141, -1.0499886203647348, -1.7251253398279605, -1.5120873610545145, 2.092671402110029, 0.678333420527655, -1.3908581394378237, -0.14065731983379445, -0.704649079609032, 0.40038203546320611, -0.28960616895899161, 0.94969408752542028, 1.2068396187631385, 0.4671902772630277, 0.59380988893293563, 0.44061350110379105, 0.30971168558439566, 0.13217055914433939, 0.084780328674454217, -0.042892010327952576, 0.029004083819250629, -0.14047533322535441, -0.16292155588890503, -0.50836195321575572, -0.15753196960053273, 0.022795944141262008, 0.83366315887402342, 0.78917379441409119, 0.67355449112521315, -0.2295941880121686, -0.24948129249626083, -0.45897332874859181, -0.65550663858936065, -1.2736175855462932, -1.2398159392319503, -0.73118573872941783, 0.68147470897196305, 0.68403615276129381, -1.4576264955235338, -1.6446564981157907, -1.587130770095007, -1.361280962925294, 1.044628248920846, 0.96909874957635356, -0.14162995430492481, 0.66911279151523617, 0.32234943120999365, 0.34963232308526704, 0.244105606577141, 0.16281560265463482, -0.014269719747667968, -0.011846708470826806, -0.18933865423621368, 0.017829624121361812, -0.97302526020811309, 0.059393044635753067, -0.20250391456577049, 0.6602817924610479, 0.54316838647960974, 0.76213554623441593, 0.36502835420313695, -0.082930104064008442, -0.29266755430530383, -0.30043904784973247, -0.57334259680943656, -0.83104911233797829, -1.039352345059011, -0.28395441021550044, 0.84090846562801602, -2.9317402483699175, -1.2603198064423498, -0.5637011092588653], "height": 32, "width": 32, "top": {"real": [7376.2586563979694, 2820.8522261533344, -5690.9497085395169, -4380.4513376296127, 388.6547315083493, -903.73852292232903, -92.233688854560938, 42.706854165930984, -25.699252344104405, 18.326281263011424, -9.8542387499157442, 37.933510453511431, -7.8666684309670254, 29.305075180843883, -62.728617354661907, 59.853240627388928, -83.636374399044939, 59.853240627386725, -62.728617354660756, 29.305075180844177, -7.8666684309671826, 37.933510453511431, -9.8542387499160657, 18.326281263013065, -25.699252344104405, 42.706854165930693, -92.233688854557883, -903.7385229223205, 388.65473150834708, -4380.4513376296045, -5690.9497085395114, 2820.8522261533035, -14789.032757371706, -31341.185848117759, -11739.029695619593, -866.78466658113393, -286.68893204831016, -488.33133225087568, -120.74864963582691, 33.024718339611894, 4.6010715329524166, -5.4456740109959769, 4.1139030671062393, 6.8633911029603265, 13.634662924808397, 1.860738389345556, -0.35796846682150263, -16.625069210775109, -14.807142725465134, -11.664010623894898, 0.82076815557037341, -12.155673848711613, 29.148348103795893, 15.708115389403888, 15.457503110539639, -12.683126140048403, 18.961120931859309, -53.601071866945205, 34.13442733448511, -942.72760774202175, -816.05094481379797, -3798.5470080468217, -8876.4278731043305, 2890.8320511623124, -27232.421940549859, -15984.118662988652, -6745.5682223604126, -409.0173927639226, -42.225544009425754, -526.29225504527119, -49.325655652906178, -23.20435390028933, 15.630174176003303, -14.835941429972856, 6.4726407463551725, 1.9958373496876167, 13.291351981828791, -1.1889020916883648, 10.030112101155916, -20.674418420848429, -0.1180338988714332, -18.745207674116038, -1.9041291470929314, -7.8710994817942428, 20.385879097388031, 14.857882580655026, 16.950197274587541, -2.033086164989526, 25.446982376231624, -20.624592190095939, 89.303256695009566, -637.06671072120571, -1428.8365567175017, -3113.2951228079887, -8881.5889351276946, -20696.443600183225, -9007.3131796291163, -5346.3306090002807, -1439.1675666408983, -1292.5663502582722, -654.09944760377277, -301.70227472838963, -97.440927522083996, -3.3329385156017457, -8.2027965131620153, -5.7742639473870323, -0.51069538319854635, 6.6402880636318233, 8.0126520330591013, 4.0882931682311625, -1.5210347396074151, -2.2335756869246048, -2.3288001542285928, -8.1315470965115093, -6.9403489082507335, -3.6748649027980562, 4.5937507427443531, 9.4957008241539675, 10.21057060635477, 11.676825499792781, 23.758858737501662, 20.288236987689611, 20.969766857125101, -333.51324485695324, -810.1584353673162, -2278.6820540988888, -5194.4090916202094, -7188.339898707115, -3154.0647285180166, -3175.2001764803263, -3085.2108289353805, -1226.2977859942123, -836.26206181721784, -301.22169990911055, -15.123294918373254, -11.324269109892445, -4.9992210979693361, -6.7152536525607003, -1.7063097661780617, 2.7727430774894133, 7.1357881321682148, 4.8669904821248817, 2.7536893948953045, -2.039934630711028, -0.54898928719761031, -2.9485150656567436, -3.1026085263061316, -1.3614545093317587, -0.47304719477880164, 4.0409079710738931, 6.2483313015723709, 8.8540252326547968, 18.802141623354618, 24.681352644731625, -6.1114787305120313, -148.49350684902615, -572.34886359995278, -1663.447165744248, -3308.6059534728529, -4493.8282478995061, -3720.0991836319017, -3323.4413322476125, -2223.3326338682518, -1347.5218927383742, -402.86472873295924, -179.07785660663581, -42.171627369153548, 13.024576486879551, -6.680339136637107, -4.3910663300422375, -1.9843645852297727, 2.2081255979025864, 3.4357055351949564, 4.8667397989738959, -0.0088018165553918268, -1.2900498248809058, -2.2230696316747851, -0.79613102395178958, -2.1003135650570957, -0.12607857026311342, 0.39928478103703097, 3.6189445517483683, 5.5230847011321824, 8.0807144322734796, 9.6537837209938342, 14.647883903859292, 41.761171107733581, -2.5048396429986766, -288.68438568639834, -1058.7748743456032, -2111.6481404168812, -2853.5518466904464, -2206.4742388833251, -2207.4882969003411, -1427.0600295974209, -607.97311048711572, -283.75431628355585, -25.222873313531675, -11.21903778037437, -8.3653822807976148, 1.9503276148055415, -4.8653324939916756, -1.0558165909594248, 0.18037835028025548, 3.7232300368774149, 2.6260151255238955, 1.901747650437611, -2.157984497724208, -1.9174482807780493, -2.671365924063863, -1.6822520344543337, -1.7835969801453151, 0.50013744114287995, 2.3612666445612516, 3.9892729615099713, 5.0282597338489978, 4.3849613992965208, 7.5675449146459712, 26.738330274504211, 30.293009711209869, -72.365238046453968, -397.03998761961856, -1129.7740740979677, -1877.1475049531305, -1015.8170093531105, -757.33856581211364, -464.04986763483271, -221.8093865245269, -66.670140953208971, -32.688631361988044, 12.245388279073117, -2.09491941357581, -4.9214217924247272, -0.76863227802399692, -1.3611346863617457, 0.59203001318831738, 2.3940543871676745, 2.1386535528573569, 0.12698658321630202, -0.36055346759858353, -1.509631760657328, -0.37490601010058217, -1.4076418772333708, -0.9909556252137327, 0.025704615807234758, 1.7006413859335137, 2.4101241863335301, 2.7230446482899899, 4.8975474263529586, 5.5799176422335819, 7.3823613929523022, 3.3531473980019464, -7.0947231292717241, -129.95057654055665, -447.33256260550814, -801.49855315264267, -297.71280467242298, -206.25666421819534, -105.85720001872387, -40.587336797783266, -19.033005269759897, 0.68623525685047748, -2.224754122223199, 2.8686428937153541, -1.3772856826259623, -3.7001182860738422, 0.56033030111271653, 0.31649576481826269, 2.6435570864758695, 2.0729019173667451, 1.3896745329326239, -1.1733083260901866, -0.5564284933709801, -0.75319429727185228, -0.16542223594150865, -0.34981510145177358, 0.63947101827441399, 0.64495136714903334, 1.5357324193076427, 2.8130362926385226, 4.2845415972556511, 3.3415574201637508, 1.8747628167747612, 4.3092019872505318, 1.2280777000161127, -53.113548920223614, -153.12296297306594, -262.59106890839882, -78.507966752468647, -44.713956729763169, -24.503242066462356, -11.422688403833899, -6.8324882374101472, -1.9389416594991726, 2.3416848160301655, -1.9581076589813595, 0.65441624739147974, -1.6215192060328243, -3.0886268279599727, 2.5574024719687731, 2.5859312055320047, 3.582324284715654, 2.3851708003164411, 0.41148866509477899, -1.7870448740379692, 0.35867475608513461, -0.33833230756510146, 0.72134917870519866, -0.6451343286468626, -0.036676325952571386, 1.8806785141996829, 3.0459530955995717, 3.0361534846987768, 1.8248078988499765, 2.0278729258957484, 1.4298438030821454, 1.444150632114136, -16.470770345398158, -59.038387406403551, -81.624687331130716, -41.65158074717607, -20.04858945819673, -26.796686775361913, -13.274828683787613, -5.4849410264677898, -1.7682797425272327, 0.51276950901621554, 0.11701161368370352, -2.1525887062494076, -0.35663258536781867, -0.3882693848937121, -2.5566610369397282, 6.5139128293303541, 4.1537964250038213, 2.1778507792771808, 0.67618078211604771, 0.67271760119275736, -0.033223712968477391, 1.7891382881043305, 0.76549003012129324, -1.8840461990319548, 0.62764371336603419, 2.9500669911593334, 2.7998549031057309, 2.7114466415734606, 2.640497491382968, 2.5087646302130264, 0.3613507110411972, -0.85975587552377708, -5.8993661554875496, -19.483874473281006, -46.656198806892085, -42.447185502078959, -49.475399988407517, -28.809040802191632, -23.364991274814315, -9.3720360014436217, -2.193549633075087, 0.73237790527535407, -0.60287176352488314, -1.0672361910519921, -3.8374461384037328, 0.81264916316705227, 3.7024783733454592, -2.2274307006673761, 12.171761179906976, 2.6484997231173142, 2.1242155181960216, 1.3916869062247985, 3.2969221728544564, 0.14147762112210061, -1.2659388719629114, 1.2983452624583423, 2.4646463691490883, 1.8819178233751466, 2.4699197782172551, 3.4105600445409938, 3.476877662739366, 1.970602508408192, 0.54569379437115284, -0.61503488296082265, -1.584537886719974, -9.9108851118855448, -17.968893142628509, 0.83280248396047341, -16.804391379900096, -34.94566909960443, -18.287776152890835, -10.19076861522101, -2.3659355754892188, 0.38430207827148843, -0.39175809943359002, -2.0786620762717161, -2.1066158183404973, -4.0664292874937455, 5.1056392812224729, 9.4711485160420441, -2.577327881134023, 13.563457368659881, 5.4454444116217209, 3.0810071966308192, 3.71409458782056, -2.7028450063821525, 1.3893389983926554, 5.0295677911697716, 2.0512141006459763, 0.57687440104333121, 3.1399874906463121, 4.3044361492909653, 3.2286926050373941, 2.0294536549063102, -1.2648718051872285, 0.81982278416560761, 5.1937461344056883, 4.5660530070978913, -2.5751982814314349, 10.842808636227273, -2.7634934625905125, -4.7410363255116081, -13.231297049532179, -1.2392069417375811, 0.57695677140757395, 1.6572428400911725, -0.80487566941313171, -2.1976406054664008, -2.9337382106235617, -0.97696074341019468, -0.52039830113476337, 8.6932746740913363, 18.008772340009436, -6.3894706762347742, 16.656214263229323, 5.6480128145892756, -2.6420757676626341, 6.9832538798624686, 8.7117753152913409, 2.944231966553327, -0.4194257648970201, 1.9464964791115495, 2.8117062685871983, 3.586606822562346, 3.6410340078674697, 2.1750438821370093, 0.92746135521083628, -0.10515597578954901, 10.916870623975495, 22.695665816423684, 26.922229107827643, 56.766547106622895, 34.346379481364103, 8.0209890672230593, 4.2276867493724737, 2.0129650120803855, 4.5721973792850843, 1.7026114564114816, -0.10193290249876912, -1.9877285465951933, -1.4091416884493304, -1.0407935339809435, 4.6927135104950821, 4.461866465996299, 13.14685287043932, 23.490161756370188, -8.5448676586843408, 5.7639040157862622, 6.7103974452754578, 11.090643871879529, 8.6117964749879281, 0.95828374077, 2.8859143014026349, 1.6803595914225926, 1.5724318132354216, 2.3664842485474589, 3.3844724421254813, 2.8754034241014996, 0.81420697505183059, 3.4592633965370854, 8.5418678989119741, 26.408180301615612, 46.472433795130719, 15.748155014076561, 18.939305693948317, 18.355423454953527, 7.4385947937208252, 6.8421582395566496, 3.8284829441665011, 2.3084513014265475, 0.014383588041353481, -0.70170837590258439, -0.9519271341888802, 0.60488638387036897, 4.7316501322768225, 11.640012070252736, 11.084534895769892, 7.9427552323827459, 17.090358547431578, -4.0062765415124373, 18.903471314461139, 10.522914852414784, -0.31727085194714888, 8.1914062421872558, 5.5678768421215832, 1.9515757898119943, 0.13204460835173984, 0.94686979396028259, 2.2566984460298456, 3.5582629306092612, 2.7150237945754423, -0.038191379039643265, 6.3090662882758242, 18.822434458740766, 20.387061197767007, 34.210424610695611, 25.78016711295075, 13.422328957688888, 4.2578162502068047, 2.3122896178400203, 4.1892680028045364, 2.2592478817037658, 0.95372259584702335, -0.47653425908969432, 0.069240128911087023, 0.91781179579556105, 6.6018505246928774, 10.152138543237006, 11.530381877152177, 5.6211304516254526, 4.7909070280413646, 35.867989503906792, 4.7909070280413584, 5.6211304516254428, 11.530381877152157, 10.152138543237017, 6.6018505246928978, 0.91781179579556504, 0.069240128911081333, -0.47653425908969432, 0.95372259584699437, 2.2592478817037476, 4.1892680028045142, 2.3122896178399985, 4.2578162502067478, 13.422328957688848, 25.780167112950689, 15.74815501407811, 20.387061197767874, 18.822434458741888, 6.309066288276548, -0.038191379039562191, 2.7150237945755555, 3.5582629306093274, 2.2566984460298958, 0.94686979396029702, 0.1320446083517558, 1.9515757898119841, 5.5678768421215636, 8.1914062421872096, -0.31727085194714522, 10.522914852414772, 18.903471314461111, -4.0062765415123884, 17.090358547431556, 7.9427552323827513, 11.084534895769902, 11.640012070252746, 4.7316501322768385, 0.60488638387038995, -0.9519271341888812, -0.70170837590259716, 0.014383588041281273, 2.3084513014264751, 3.8284829441663635, 6.8421582395566762, 7.4385947937204353, 18.355423454952824, 18.939305693949098, 56.76654710662406, 46.472433795132453, 26.408180301616227, 8.5418678989122103, 3.4592633965371484, 0.81420697505187978, 2.8754034241015152, 3.3844724421254879, 2.3664842485474735, 1.572431813235436, 1.6803595914225982, 2.8859143014026083, 0.95828374076997469, 8.6117964749878801, 11.090643871879506, 6.7103974452754693, 5.7639040157862587, -8.5448676586843018, 23.490161756370185, 13.146852870439265, 4.4618664659962768, 4.6927135104951034, -1.0407935339809418, -1.4091416884493408, -1.9877285465952099, -0.10193290249882341, 1.7026114564114307, 4.5721973792850434, 2.0129650120803833, 4.2276867493724772, 8.0209890672234039, 34.346379481364394, 10.842808636228447, 26.9222291078285, 22.695665816424683, 10.916870623975989, -0.10515597578943024, 0.92746135521090112, 2.1750438821369982, 3.6410340078674537, 3.5866068225623455, 2.8117062685872063, 1.9464964791115584, -0.41942576489699973, 2.9442319665532848, 8.7117753152913178, 6.9832538798624677, -2.6420757676626758, 5.6480128145892872, 16.656214263229302, -6.389470676234752, 18.008772340009443, 8.6932746740913274, -0.52039830113473562, -0.97696074341019512, -2.9337382106235728, -2.1976406054664195, -0.80487566941320732, 1.657242840091119, 0.57695677140755675, -1.2392069417374179, -13.231297049531948, -4.7410363255113248, -2.7634934625894938, 0.83280248396082224, -2.5751982814309775, 4.566053007098211, 5.1937461344059415, 0.81982278416574916, -1.2648718051872136, 2.0294536549062832, 3.2286926050373275, 4.3044361492909653, 3.1399874906463054, 0.57687440104334498, 2.0512141006459621, 5.0295677911697396, 1.3893389983926545, -2.7028450063821756, 3.7140945878205622, 3.0810071966308161, 5.4454444116217395, 13.563457368659845, -2.5773278811340234, 9.4711485160420441, 5.1056392812224614, -4.0664292874937296, -2.1066158183405044, -2.0786620762717254, -0.39175809943363327, 0.38430207827145285, -2.3659355754891784, -10.190768615220893, -18.287776152890569, -34.94566909960389, -16.804391379899673, -42.447185502078064, -17.968893142627813, -9.910885111884598, -1.5845378867194357, -0.61503488296060749, 0.5456937943712441, 1.9706025084081269, 3.4768776627392723, 3.4105600445409681, 2.4699197782172639, 1.881917823375139, 2.4646463691490985, 1.2983452624583438, -1.2659388719629485, 0.1414776211221116, 3.2969221728544715, 1.3916869062248129, 2.1242155181960229, 2.6484997231173293, 12.171761179906973, -2.2274307006673681, 3.702478373345508, 0.81264916316704883, -3.8374461384037382, -1.0672361910520076, -0.60287176352493688, 0.73237790527531033, -2.1935496330750563, -9.3720360014434689, -23.364991274814056, -28.809040802191326, -49.47539998840697, -41.651580747175068, -46.656198806890998, -19.483874473280501, -5.8993661554872627, -0.85975587552355426, 0.36135071104124949, 2.5087646302129953, 2.6404974913828889, 2.7114466415734491, 2.7998549031056945, 2.9500669911593249, 0.62764371336605218, -1.8840461990319775, 0.76549003012129535, 1.789138288104325, -0.033223712968466615, 0.67271760119275215, 0.67618078211606658, 2.1778507792771671, 4.1537964250038266, 6.5139128293303603, -2.5566610369397242, -0.38826938489369667, -0.35663258536783948, -2.1525887062494129, 0.11701161368368215, 0.51276950901619689, -1.7682797425271899, -5.4849410264677143, -13.274828683787417, -26.796686775361572, -20.048589458196275, -78.507966752466459, -81.624687331128925, -59.038387406402052, -16.470770345397689, 1.4441506321142048, 1.429843803082246, 2.0278729258956907, 1.8248078988499317, 3.0361534846987319, 3.045953095599546, 1.8806785141996951, -0.036676325952591224, -0.64513432864685583, 0.72134917870519299, -0.33833230756510668, 0.35867475608511745, -1.7870448740379619, 0.41148866509475018, 2.385170800316434, 3.582324284715646, 2.5859312055320172, 2.5574024719687887, -3.08862682795997, -1.6215192060328063, 0.65441624739145521, -1.9581076589813555, 2.3416848160301531, -1.9389416594989646, -6.8324882374098541, -11.422688403833355, -24.503242066461048, -44.713956729761051, -297.71280467242298, -262.59106890839888, -153.12296297306594, -53.113548920223877, 1.2280777000160852, 4.3092019872504084, 1.8747628167747172, 3.341557420163666, 4.2845415972556511, 2.8130362926385151, 1.5357324193076258, 0.64495136714903156, 0.63947101827441044, -0.34981510145179595, -0.16542223594153913, -0.75319429727190634, -0.5564284933709801, -1.1733083260902135, 1.3896745329326132, 2.0729019173667376, 2.6435570864758655, 0.31649576481827513, 0.56033030111271809, -3.7001182860738244, -1.3772856826259623, 2.8686428937153425, -2.2247541222231662, 0.68623525685057685, -19.033005269759858, -40.587336797783074, -105.85720001872383, -206.25666421819477, -1015.8170093530997, -801.4985531526338, -447.3325626055032, -129.9505765405554, -7.094723129271765, 3.3531473980017035, 7.3823613929520073, 5.5799176422333412, 4.8975474263529168, 2.7230446482898696, 2.4101241863335168, 1.700641385933505, 0.025704615807253747, -0.99095562521376346, -1.4076418772333852, -0.37490601010063784, -1.5096317606573337, -0.36055346759863915, 0.12698658321626774, 2.1386535528573165, 2.3940543871676701, 0.59203001318833959, -1.3611346863617075, -0.7686322780239524, -4.9214217924247352, -2.0949194135756803, 12.245388279073195, -32.688631361987156, -66.670140953207678, -221.8093865245236, -464.04986763482748, -757.33856581210489, -2206.474238883316, -1877.1475049531243, -1129.7740740979648, -397.03998761961947, -72.365238046453996, 30.293009711209137, 26.738330274503873, 7.5675449146456106, 4.3849613992964835, 5.0282597338488833, 3.9892729615099154, 2.3612666445612378, 0.50013744114287839, -1.7835969801453351, -1.6822520344543537, -2.6713659240639043, -1.9174482807780469, -2.1579844977242066, 1.9017476504375719, 2.6260151255238871, 3.7232300368773963, 0.18037835028033014, -1.0558165909593593, -4.8653324939915077, 1.9503276148055297, -8.3653822807973572, -11.219037780374073, -25.222873313530549, -283.75431628355437, -607.97311048711254, -1427.0600295974182, -2207.4882969003352, -3720.099183631889, -2853.5518466904387, -2111.648140416873, -1058.7748743456016, -288.68438568639789, -2.5048396429994018, 41.761171107733141, 14.647883903858578, 9.6537837209937827, 8.0807144322732913, 5.5230847011321327, 3.6189445517483261, 0.3992847810370409, -0.12607857026309263, -2.1003135650570361, -0.79613102395168645, -2.2230696316747758, -1.2900498248808734, -0.0088018165554208834, 4.8667397989738888, 3.4357055351949497, 2.2081255979026997, -1.9843645852296314, -4.3910663300419372, -6.6803391366371141, 13.024576486880093, -42.171627369152944, -179.07785660663302, -402.86472873295685, -1347.5218927383694, -2223.332633868245, -3323.4413322476003, -3154.0647285180148, -4493.8282478995088, -3308.6059534728515, -1663.4471657442498, -572.34886359995289, -148.49350684902797, -6.1114787305125393, 24.681352644731046, 18.802141623354593, 8.8540252326545641, 6.2483313015722262, 4.0409079710738718, -0.47304719477879342, -1.361454509331699, -3.1026085263059842, -2.948515065656593, -0.5489892871976132, -2.0399346307109321, 2.7536893948952148, 4.8669904821248942, 7.1357881321682211, 2.7727430774895763, -1.706309766177841, -6.7152536525602784, -4.9992210979693477, -11.324269109891496, -15.123294918372496, -301.22169990910822, -836.26206181721659, -1226.2977859942089, -3085.2108289353782, -3175.2001764803231, -9007.3131796291, -7188.3398987071041, -5194.4090916202022, -2278.6820540988915, -810.15843536731495, -333.51324485695591, 20.969766857124615, 20.288236987688347, 23.758858737501669, 11.676825499792164, 10.210570606354567, 9.4957008241538698, 4.5937507427443718, -3.6748649027980855, -6.9403489082508045, -8.1315470965115626, -2.3288001542285697, -2.2335756869247856, -1.5210347396073984, 4.088293168231135, 8.0126520330591262, 6.6402880636320099, -0.51069538319843244, -5.7742639473864941, -8.2027965131620455, -3.3329385156007563, -97.440927522082632, -301.70227472838576, -654.09944760377232, -1292.5663502582681, -1439.1675666408923, -5346.3306090002598, -27232.421940549855, -20696.443600183229, -8881.5889351276946, -3113.2951228080024, -1428.8365567175017, -637.0667107212123, 89.303256695008088, -20.624592190099609, 25.446982376231595, -2.0330861649905447, 16.950197274587225, 14.857882580654767, 20.385879097388024, -7.8710994817946256, -1.9041291470930921, -18.745207674117459, -0.11803389887143546, -20.674418420848326, 10.030112101155776, -1.1889020916883362, 13.291351981828802, 1.9958373496879209, 6.472640746355359, -14.835941429972186, 15.63017417600328, -23.204353900286776, -49.325655652904786, -526.29225504526619, -42.22554400942483, -409.0173927639147, -6745.5682223604063, -15984.118662988625, -14789.032757371675, 2890.8320511623242, -8876.4278731043305, -3798.5470080468367, -816.05094481379706, -942.72760774203016, 34.134427334482538, -53.601071866949361, 18.961120931859348, -12.683126140049515, 15.4575031105396, 15.708115389403696, 29.148348103795954, -12.155673848712381, 0.82076815557010951, -11.664010623895932, -14.807142725465098, -16.625069210776097, -0.357968466821102, 1.860738389345522, 13.634662924808296, 6.8633911029604313, 4.1139030671065999, -5.4456740109950088, 4.6010715329523864, 33.024718339612249, -120.74864963582446, -488.33133225087175, -286.68893204831085, -866.78466658111245, -11739.029695619576, -31341.185848117751], "imag": [0.0, -38758.087655514835, 17548.085047269142, 6107.2151726624015, -1874.673387120311, 1102.4198144208276, 70.663498597697227, 246.50443360377355, 15.094404836632346, 61.578388193120794, -6.883850379905633, 17.433253862249003, -27.182352905748338, 10.205627484635695, -57.631165788617082, 3.5978635789949243, 0.0, -3.5978635789944389, 57.631165788617331, -10.205627484634785, 27.182352905748068, -17.433253862248129, 6.883850379906236, -61.578388193120603, -15.094404836632346, -246.50443360377048, -70.663498597698691, -1102.4198144208278, 1874.6733871203112, -6107.2151726624097, -17548.085047269135, 38758.087655514864, 21415.511526704078, 9240.4816801838842, 6140.0706338628515, 4606.7423967050836, -477.33409412636456, 106.10534760670754, 253.85827683649731, 118.670471872242, 60.852179067446961, 22.790809731222598, 16.992665274593527, 3.3051410229913314, -11.158748163655874, -19.125680216300069, -12.454719286949617, -13.739274709476872, 4.4649861577324996, -1.4030381833900449, 28.352674755287939, -0.67900523797834378, 10.299898240809684, 0.92198929608587377, 1.7353747463970652, -28.921613512340663, -62.077231813228479, -150.50951383829744, -214.24479740751684, -816.21574466320703, 274.1353961963593, -3254.3286688062722, -6340.0761451284025, 11789.651384311641, 10840.701965194425, 18380.248977426931, 3231.3822724351476, -461.44982475214084, -210.28695062763435, 162.42212696600188, 179.30887547689923, 113.80000983072934, 43.394725496932487, 24.59548477602943, 9.5064435172576207, 6.2249226907652995, -15.514190495563678, -15.67209469704693, -16.179758937655365, -0.44183444538403649, 3.28796177703477, 12.57005414423841, 4.7947040656811843, 5.5752197676029693, -1.566994278876134, 3.0671728952871886, -9.3006029966239439, -19.205045070959127, -56.939768493357462, -104.59324045979437, -209.92149032340299, -248.20433151041027, -867.92363746103479, -1299.0888976028032, 827.61688284819274, -3453.3010516440099, 2184.1299326736716, 343.81610498084558, 1430.9649107108667, -397.20604751762147, -695.96261474413006, 272.38382351444113, 181.43163787734565, 64.570588674311324, 29.183435066681643, 16.420203889130576, 10.051165980763317, 3.8132998567254699, -5.2200576234926608, -12.843645059741645, -16.574215370008311, -6.8948411718648668, 5.7853993354930253, 6.7615499928711884, 6.3258793363865982, 6.2779141420300757, 7.316455816584333, 0.11325917153592484, -12.472105947256997, -26.315486653091728, -48.315266721271882, -96.05176533673017, -133.18984159990899, -353.39952612993443, 150.90670251969735, -622.62775933130001, -1461.5017842629939, 2621.2839732861958, -797.42142339187535, -1141.9271710506443, -1665.2932495998289, -238.3366310615267, 49.923170262409073, 61.506465075545492, 153.25086116745172, 46.446591336114025, 13.171326963991907, 10.42525251508628, 5.9093841314446687, 3.7481817410606739, -5.009304162269796, -8.3377118534842136, -11.383176063308646, -7.2904568591879206, 0.055102663998529922, 6.2100452165049633, 0.50258781153530074, 8.7133201843540995, 8.0099491969619425, 3.408178127748358, -6.1241971022028396, -12.736128845291272, -45.232132533425755, -61.3791750629996, -153.42214558232837, -67.595097514570796, 85.625899103861244, -58.961155821254636, 56.883206971067992, -1105.7125877167775, -1066.0901100808514, -1171.2701320923616, -223.1510166903665, -49.090655504704266, 242.13940044346495, 187.57398243385657, 37.630624824958112, 28.849867481961542, 8.4569554634773265, 4.9702839577388582, 4.4028115702250554, 1.4310556478305501, -1.929060150422355, -6.8702061592831818, -7.5557834297932249, -6.2828152868831211, -0.10870593803434039, -0.35173698335235887, 2.5520560959229499, 3.0896458550054593, 4.7505220002799033, 1.2377659738692817, -1.7806530124299274, -9.1879671692559626, -20.164632449396379, -65.591240653702698, -60.869480400000917, -62.271759486118263, -69.04223895420877, 113.44009243151515, -280.24622279593513, -361.29505764988915, -32.2389038646619, 397.42763261597736, 412.9673372382922, 359.76401050336045, 192.6210800054142, 122.25882006598455, 49.109708531705785, -0.83416770813231356, 2.4803036198391495, 2.5045331182816137, 2.1157075816863125, 2.0456835555591151, -1.3319639541688315, -4.1057658132159602, -5.2622609905014679, -3.122429370817716, -0.23490025627283884, 0.40862649299968534, 1.0190926814192749, 2.6652215067301066, 2.3902937959311288, 1.3072901204360872, -2.1976906085986245, -4.7205289930149936, -17.964658686821839, -21.918559933832515, -40.854552179344822, -68.24351076369831, 25.856495589804037, -73.74721318359471, 26.189735785049756, -56.726426890704197, 461.88238037931336, 400.36625478870423, 367.42140066372616, 233.95717316464078, 120.24788693419019, 56.86229814651989, 16.528423808469729, 5.5081763037408891, -2.7285347510623343, 0.91768473485835012, 1.922818700657754, 0.85878662181529319, -0.082031723657331246, -3.1986596327501684, -2.7995613930163934, -2.624028681216124, 0.082235364558318216, 0.13384423623927519, 1.9947594371394528, 1.3437508199980643, 2.6398410865992954, 0.73758290379789837, -0.13078900915043976, -4.4953343292506398, -5.1950335909144894, -13.12242317098767, -25.523369493146305, -12.192196214097944, -25.868477512213353, 2.9066782920883432, 34.106574161015573, 256.00130492151595, 208.58597838816522, 310.3347945923577, 177.03891975992664, 97.122360992021001, 48.488510187113192, 24.528917872852549, 4.6272034575157122, -1.3571647909533122, 0.20621269482631011, -0.40867746076362715, 0.99215767258594889, 1.5313768256641691, -0.052772985639764861, -1.5552847934304939, -2.8318141898835965, -1.44106038161314, -1.7221472209588695, 0.61786747800524422, 0.48048213041449506, 1.7161555169971148, 0.88689757979195871, 1.4761658864245926, -1.7252645996654892, -0.81528783024945528, -3.3158091950668926, -7.6513645380807835, -2.9281859927886749, -12.462674546124116, -7.4696827367159715, -23.236903073402107, 43.7319836231637, 92.321882041990349, 70.117668379783737, 34.226649356314077, 47.258739472197036, 25.375797504306092, 12.406583490274283, 8.6535618432690811, 1.0747519793409035, -0.44324044078252567, -1.7584707522262704, 0.72458607165998101, 0.70692065864217946, 0.77076345191259166, 1.0649069250197341, -2.7261985428418192, -1.9302074459527443, -3.3754250277859401, 0.50673349306549698, -0.64031672309299725, 1.374850007673434, 0.72950552648490297, 2.3325303094340692, -0.9986473214357906, 0.78195787446934228, -1.1999635798104886, -3.4858876190620522, -1.4991310089769327, -2.8433755069243221, 3.7638952884372583, 1.2400980139632869, -2.9542792497780144, 1.8234355680479359, 49.576244746235467, 19.014215780516388, 30.877310974744532, -1.1221271518157558, 7.8208026967228905, 2.609067592037944, 1.2521971880796572, -0.99505064345958283, -1.3975466814991453, -0.57338407820284554, -1.8697004151394911, 2.3700280505641378, 1.696784850403636, -0.61519740478736618, -1.3317994275810727, -4.2071746247346917, -0.85834734780410316, -1.4672332071937433, 2.6381100233578914, -2.4176769851497171, 2.0131074000190821, -1.6262628596018911, 3.9814331515508763, -0.027677673297514374, -2.444607041276003, -1.6150024285043403, -4.1227589144067673, -1.7068861549694658, 2.2919486155920237, 12.185386506158462, 9.103962312567619, 7.1597604706792799, -5.4087151249860161, 0.96974162117579055, -11.947201833901593, 6.6330620252490986, 2.1152085218133552, 3.546929348907518, 0.62283616740311709, -1.3522725353705505, -2.4444202103018355, -1.5690941230144015, -0.0069858778603680161, -2.2282653754616524, 3.8284308308873771, 3.1912913728027457, -5.5805618725494135, 0.13049495818795365, -3.5197176720292105, 1.8802124921714005, -2.6189977871286096, 2.1235611153433935, -7.1463089769422359, 4.7729314123471731, 2.1077672614040215, -0.81910125894631813, 0.72052624692713507, -3.4842402749887631, -4.1829115306886377, -4.3994325344570067, 3.0953565929079909, 11.949390330752637, 23.680136621529911, 21.558658775121675, 22.744598059672118, 24.943328767928129, 28.901352722188449, 12.814680673201753, 13.644932734111247, 5.45768556544121, 2.4025753394703617, -1.1673355625318591, -2.4971924284976894, -1.8952846661475429, -1.2927419412763479, 2.7902732019969552, -4.3477010834394934, 3.7423253621601038, 4.3959804108055893, -8.9257994152947724, 2.882370251254919, -5.0577698714645729, 3.1829717367300585, -13.324209534416688, 6.2785045354550411, -0.87489834284363188, -0.85263104321571348, 4.4885662153073236, -0.53110232172652128, -1.6389132121610095, -4.3945543864166812, -4.2936344828625694, 0.48745205753098192, 15.895360345460416, 25.169617383292081, 33.918445473292621, 23.996907911576923, 23.251277269359601, 5.1543156647143702, 18.554102826608389, 16.359265688234956, 10.231244633613841, 1.5587865083621433, -1.4683911434431964, -2.958105786087343, -1.5689869488245065, -0.96051225634847215, 1.7578951205789273, 6.6638352938822507, -9.4901775499106478, 4.1317473271038834, 10.951455398944859, -15.360897164532773, 5.739294741971535, -17.045217645164048, 5.8449684444103616, -3.5521886878464675, -7.3858280585812945, 5.7347340895196259, 0.4908832539545151, 0.98666637905349674, -1.0149409800154179, -1.6832477381822215, -2.5467748158366237, 2.0904065823844138, 13.443724261124899, 31.761133485201317, 33.671186166611122, 40.707191608760652, -1.1509826127936451, 21.096779572504321, 10.924705320167561, 7.3688776104039446, 6.4733533392666498, 1.1232923919614803, -2.4431302941492752, -2.7804484266994756, -1.6225398299131664, 0.6478030911844409, 2.5793951871330139, 3.1124056384095988, 9.3832743597685244, -14.195954313031031, -0.57608988546761064, 19.479390479219269, -31.200338855208866, 14.100113777774123, -5.3856662644378392, -10.946378631138824, 4.4142064356850845, -3.9066652322250062, 0.66844910598604979, 1.0227755630951001, 0.66137538568075327, -0.38567118503773246, 0.24821124990411303, 3.5872841231435211, 14.053276636456639, 24.260931372233497, 33.647459095648763, 7.6529271231588307, -9.2151377078706354, -38.311665858686638, -16.121399661234683, -5.9927868178298498, -2.7701365304211771, -3.7140088945870469, -3.0788396721523017, -3.0904878618769733, -1.8655827999533823, 0.43690140001808947, 4.1561194908680763, 4.3858952392085353, 2.7714027971729753, 9.257895969243517, -19.629364588289473, -14.072043519544888, 36.373196183604975, -13.61372365841147, -9.4583423311161248, 8.5284583277520429, -6.1744651457950592, -2.2310052363098367, -1.75629520897435, 1.1539693350814639, 1.7596902661237352, 1.8196834579374304, 2.022290334087173, 5.1646829084835781, 12.770276815017757, 24.46979490512981, 27.822785449092486, 29.828540342091252, 0.0, -3.7653763488297254, -24.757305904406468, -19.738984856989376, -8.2664619761594462, -4.6495144591838038, -3.656340919703911, -2.9147641885479052, -2.2830188616483764, -0.10916825448095578, 2.3916977668177819, 5.941240494184604, 2.1224657474819093, 3.9401472638367774, -2.1445277323266949, -10.774805376941604, 0.0, 10.774805376941531, 2.1445277323266829, -3.9401472638367951, -2.1224657474819155, -5.9412404941846173, -2.3916977668177926, 0.10916825448094437, 2.2830188616483764, 2.9147641885479065, 3.6563409197039234, 4.6495144591838136, 8.2664619761594498, 19.738984856989411, 24.75730590440644, 3.7653763488297773, 9.2151377078736516, -29.828540342087546, -27.822785449090652, -24.469794905129369, -12.770276815017642, -5.1646829084834636, -2.022290334087153, -1.8196834579374237, -1.7596902661237566, -1.1539693350814775, 1.7562952089743382, 2.2310052363098212, 6.1744651457950415, -8.5284583277521193, 9.4583423311161194, 13.613723658411436, -36.373196183604932, 14.07204351954484, 19.629364588289484, -9.2578959692435348, -2.7714027971730033, -4.3858952392085584, -4.1561194908680932, -0.43690140001811473, 1.8655827999533605, 3.0904878618769729, 3.0788396721523177, 3.7140088945872396, 2.7701365304214618, 5.9927868178306163, 16.121399661236502, 38.31166585868818, 1.1509826127964509, -7.6529271231568821, -33.647459095647825, -24.260931372233326, -14.053276636456571, -3.5872841231435073, -0.24821124990410889, 0.3856711850377551, -0.66137538568076071, -1.0227755630951023, -0.66844910598607266, 3.9066652322249751, -4.4142064356851165, 10.946378631138813, 5.3856662644378339, -14.100113777774116, 31.200338855208855, -19.479390479219351, 0.57608988546757856, 14.195954313030994, -9.3832743597685617, -3.1124056384095939, -2.5793951871330338, -0.64780309118445645, 1.6225398299131557, 2.7804484266994689, 2.4431302941492916, -1.1232923919613498, -6.4733533392663958, -7.368877610403441, -10.924705320166419, -21.096779572501951, -23.251277269357679, -40.707191608758833, -33.671186166610063, -31.761133485200901, -13.443724261124748, -2.0904065823843769, 2.5467748158366237, 1.6832477381822348, 1.0149409800154132, -0.98666637905348697, -0.49088325395452825, -5.734734089519665, 7.3858280585813008, 3.5521886878464564, -5.8449684444103243, 17.045217645163998, -5.7392947419715155, 15.360897164532778, -10.951455398944907, -4.1317473271038754, 9.4901775499106655, -6.6638352938822702, -1.7578951205789377, 0.96051225634844795, 1.5689869488244914, 2.9581057860873381, 1.4683911434432237, -1.5587865083620118, -10.231244633613667, -16.359265688234554, -18.554102826607274, -5.1543156647129926, -24.943328767927714, -23.996907911576475, -33.918445473292081, -25.169617383291836, -15.895360345460304, -0.48745205753098297, 4.2936344828625552, 4.3945543864167149, 1.6389132121610113, 0.53110232172653837, -4.4885662153073405, 0.85263104321570904, 0.87489834284363122, -6.2785045354550046, 13.324209534416719, -3.1829717367300314, 5.0577698714645702, -2.8823702512549096, 8.9257994152947653, -4.3959804108056124, -3.742325362160086, 4.3477010834395236, -2.7902732019969543, 1.2927419412763401, 1.8952846661475349, 2.4971924284976934, 1.1673355625318764, -2.4025753394703346, -5.4576855654411656, -13.644932734111133, -12.814680673201632, -28.901352722188015, -0.96974162117503315, -22.744598059671098, -21.558658775121231, -23.680136621529623, -11.949390330752514, -3.0953565929079563, 4.3994325344570004, 4.1829115306886644, 3.4842402749887649, -0.72052624692711631, 0.81910125894632069, -2.1077672614040264, -4.772931412347166, 7.1463089769422288, -2.1235611153433602, 2.6189977871286789, -1.8802124921713912, 3.5197176720292407, -0.1304949581879572, 5.5805618725494606, -3.191291372802759, -3.8284308308873531, 2.228265375461667, 0.0069858778603283057, 1.5690941230143916, 2.4444202103018267, 1.3522725353705702, -0.62283616740308378, -3.546929348907534, -2.1152085218133783, -6.6330620252487682, 11.947201833901675, -19.014215780515311, 5.4087151249861485, -7.159760470678993, -9.1039623125675071, -12.18538650615837, -2.2919486155920032, 1.7068861549694805, 4.1227589144067789, 1.6150024285043441, 2.4446070412760443, 0.027677673297527423, -3.981433151550863, 1.6262628596018724, -2.0131074000190696, 2.4176769851497326, -2.6381100233578612, 1.4672332071937413, 0.85834734780414157, 4.2071746247347095, 1.3317994275810989, 0.61519740478738694, -1.6967848504036496, -2.3700280505641422, 1.8697004151394931, 0.5733840782028331, 1.397546681499154, 0.99505064345958893, -1.2521971880796428, -2.6090675920379729, -7.8208026967229012, 1.1221271518159068, -30.877310974743335, -70.117668379782501, -49.576244746235311, -1.8234355680484657, 2.9542792497778261, -1.2400980139631994, -3.7638952884372125, 2.8433755069243154, 1.499131008976947, 3.4858876190620642, 1.1999635798105424, -0.78195787446931964, 0.9986473214357916, -2.332530309434083, -0.72950552648488864, -1.3748500076734225, 0.64031672309302556, -0.50673349306550342, 3.375425027785985, 1.930207445952772, 2.7261985428418698, -1.0649069250197167, -0.77076345191255435, -0.7069206586422051, -0.72458607165999755, 1.7584707522262737, 0.44324044078250502, -1.0747519793408324, -8.6535618432689372, -12.406583490274217, -25.375797504305602, -47.258739472196019, -34.226649356312784, -208.58597838816522, -92.321882041990833, -43.731983623163735, 23.236903073401958, 7.4696827367159822, 12.462674546124104, 2.9281859927886771, 7.6513645380808271, 3.3158091950668926, 0.8152878302494978, 1.7252645996655027, -1.4761658864245817, -0.88689757979195827, -1.7161555169970975, -0.48048213041447491, -0.61786747800518715, 1.7221472209588695, 1.4410603816132017, 2.8318141898836315, 1.5552847934305372, 0.05277298563978073, -1.5313768256641445, -0.9921576725859278, 0.40867746076360606, -0.20621269482631011, 1.3571647909533708, -4.6272034575156908, -24.528917872852457, -48.488510187113178, -97.122360992020845, -177.03891975992676, -310.33479459235781, -461.88238037931535, -256.00130492151709, -34.106574161017335, -2.9066782920893011, 25.868477512213314, 12.192196214097933, 25.523369493146241, 13.12242317098773, 5.1950335909144911, 4.4953343292507366, 0.13078900915048275, -0.73758290379785463, -2.6398410865992936, -1.3437508199980366, -1.9947594371394133, -0.13384423623915356, -0.082235364558330679, 2.6240286812162581, 2.7995613930164374, 3.1986596327502643, 0.082031723657369299, -0.85878662181523746, -1.9228187006577324, -0.91768473485829727, 2.7285347510623108, -5.5081763037407097, -16.528423808469462, -56.862298146519464, -120.24788693418984, -233.9571731646403, -367.42140066372525, -400.36625478870656, 32.238903864660138, 56.726426890699642, -26.189735785051667, 73.747213183594084, -25.856495589804108, 68.243510763698637, 40.854552179345092, 21.918559933832821, 17.964658686821831, 4.7205289930151793, 2.1976906085987129, -1.3072901204360032, -2.3902937959311101, -2.6652215067300165, -1.0190926814191563, -0.40862649299943438, 0.23490025627283342, 3.1224293708179411, 5.2622609905015993, 4.1057658132160988, 1.331963954168899, -2.0456835555590454, -2.1157075816862583, -2.504533118281568, -2.4803036198391473, 0.83416770813248287, -49.109708531705543, -122.25882006598383, -192.62108000541431, -359.76401050336045, -412.96733723829362, -397.42763261597815, 1066.0901100808455, 361.29505764988636, 280.2462227959299, -113.44009243151743, 69.042238954208585, 62.271759486118853, 60.869480400001216, 65.591240653703366, 20.164632449396354, 9.1879671692563107, 1.7806530124300617, -1.2377659738691233, -4.7505220002798652, -3.0896458550052697, -2.5520560959227772, 0.35173698335277165, 0.10870593803433028, 6.2828152868834488, 7.5557834297934026, 6.8702061592834163, 1.9290601504224327, -1.4310556478304128, -4.402811570224995, -4.9702839577387659, -8.4569554634772928, -28.849867481960956, -37.630624824957771, -187.57398243385583, -242.13940044346546, 49.090655504701473, 223.15101669036463, 1171.270132092355, 797.42142339187455, 1105.712587716775, -56.883206971068894, 58.961155821254195, -85.625899103861229, 67.595097514571449, 153.42214558232899, 61.379175063000453, 45.232132533425769, 12.736128845291734, 6.1241971022030093, -3.4081781277481404, -8.0099491969618857, -8.7133201843538846, -0.50258781153503296, -6.2100452165045663, -0.055102663998530817, 7.2904568591883807, 11.383176063308918, 8.3377118534845209, 5.009304162269923, -3.7481817410605087, -5.9093841314446331, -10.425252515086191, -13.171326963991898, -46.446591336113507, -153.25086116745101, -61.506465075545563, -49.92317026240935, 238.33663106152528, 1665.2932495998259, 1141.9271710506428, -2184.1299326736644, -2621.2839732861944, 1461.5017842629866, 622.62775933129569, -150.90670251969709, 353.39952612993454, 133.18984159990904, 96.051765336731378, 48.315266721271847, 26.315486653092378, 12.47210594725734, -0.11325917153558851, -7.3164558165842362, -6.2779141420297728, -6.325879336386472, -6.7615499928705614, -5.7853993354930182, 6.8948411718656626, 16.574215370008741, 12.843645059742064, 5.220057623492746, -3.813299856725167, -10.051165980763182, -16.420203889130285, -29.183435066681557, -64.570588674310201, -181.43163787734505, -272.38382351444022, 695.96261474412938, 397.20604751762363, -1430.9649107108592, -343.81610498084137, -10840.70196519443, 3453.3010516439876, -827.61688284819604, 1299.088897602802, 867.92363746103354, 248.20433151041067, 209.92149032340356, 104.5932404597956, 56.939768493357427, 19.205045070960029, 9.3006029966243737, -3.0671728952866175, 1.5669942788764133, -5.5752197676024959, -4.7947040656806426, -12.570054144236753, -3.2879617770347638, 0.44183444538609318, 16.179758937656128, 15.672094697047777, 15.514190495563801, -6.2249226907648021, -9.506443517257205, -24.595484776028343, -43.394725496932452, -113.80000983072682, -179.30887547689812, -162.42212696599955, 210.28695062763467, 461.44982475214965, -3231.3822724351485, -18380.248977426934, -21415.511526704078, -11789.651384311637, 6340.0761451283952, 3254.3286688062612, -274.13539619635947, 816.21574466320624, 214.24479740751747, 150.50951383829917, 62.077231813228565, 28.921613512340514, -1.7353747463964819, -0.92198929608524804, -10.299898240809465, 0.679005237978899, -28.352674755287008, 1.4030381833925814, -4.4649861577325289, 13.739274709477487, 12.454719286950338, 19.12568021630095, 11.158748163655963, -3.3051410229907021, -16.992665274592852, -22.790809731221124, -60.852179067446897, -118.67047187223945, -253.85827683649717, -106.10534760670436, 477.33409412636507, -4606.7423967050645, -6140.0706338628543, -9240.4816801839206]}};
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){
		return {"real": [3.0408379415611857, 0.37822261363137938, 1.1747173276627942, 0.87791572866957501, 0.27429578524536991, -0.26015038230887205, -0.04589694540462394, 0.18194913988848616, -0.19035992880648842, -0.050064472206627651, -0.016354960260506177, 0.073013903204916478, 0.15053197342937383, -0.47378158951033317, -0.33333577915227425, -0.30434085338299055, 0.26372284406307878, -0.30434085338299449, -0.33333577915227836, -0.47378158951033028, 0.15053197342937505, 0.073013903204915576, -0.016354960260505706, -0.050064472206628768, -0.19035992880648842, 0.18194913988848541, -0.045896945404624932, -0.2601503823088735, 0.27429578524536952, 0.87791572866957457, 1.1747173276627942, 0.3782226136313796, 1.5638480130127614, -1.0502161590016221, -0.28144140655806793, 0.66007876209063499, 0.25575295594566605, -0.11471557758718753, 0.22751157962613866, -0.29100003355994186, 0.29242994865853178, 0.14950061311078749, -0.02214037256893809, 0.034503572794411914, -0.17412889405901469, 0.060297128338254534, -0.49717312826403576, -0.10585857030501357, 0.082780177430083327, -0.11056584899062352, -0.72499416196392785, -0.15612863751308359, -0.36586758725441215, -0.19718551141955715, -0.043434328775718851, -0.060442748560529294, 0.1383233017601592, -0.071714399164362744, 0.31725814504248484, 0.16801904131477274, 0.58675004339129755, 1.5155025161072819, 0.99232752650122635, -1.0129349058609656, -1.6725083187014358, -0.66077224091757791, 2.2217962254133496, 0.98390492917013095, -0.16319024909703178, 0.67271651276019184, 0.16380771710007475, 0.21989373735679621, -0.12296413131763459, -0.18224776807046256, -0.011168077595514938, 0.10364961453623285, 0.1359801303077682, -0.26339593722715721, 0.039396952561874886, -0.33866696253626483, -0.0043101841409601402, 0.17740469505625342, -0.10830858623812685, -0.33186051211466239, 0.12060535717228799, 0.084703474730635803, -0.086262426064740078, -0.1297477439897661, -0.28426475792188655, 0.21965961682575447, 0.24955999100642301, 0.46804088594167448, -0.46946217188769823, -0.31724338121882617, 1.7716903674840139, 0.56577881124465312, 0.71512595047089234, 0.4910867492003736, 0.92310119575914651, -1.0939934957719639, 0.18102793706565934, 0.35484595526186652, 0.48676804973393767, -0.097923922056211768, -7.8200063684236368e-05, -0.016095705887683227, -0.084263209727683391, 0.0080331646697531477, -0.044853168166469837, 0.0062170702455977547, -0.15890945005602863, 0.22815908460498888, 0.17110516400703918, -0.29052216822588434, -0.18224178792918044, -0.018421573557969844, 0.032535239746583795, -0.08121081614537759, -0.029175915115094032, 0.092929862040843081, 0.16824405476099044, -0.24679227625704581, 0.00030176170486908785, 0.023943010115746295, -0.43281940369171445, -0.57166836623813821, 1.2482467538506352, 0.74385331371246666, 0.54787745216002559, 0.92898941300038174, 0.54473301805335128, -0.4877077226718825, -0.40370312470951597, 0.39096527623299848, 0.12644205243911047, 0.0424168022733412, 0.049219693586430309, -0.077748186566067037, -0.043614575991677208, -0.0041635061718157101, 0.07897222152752259, 0.053944973270972973, 0.11232623315704468, -0.070445625631503542, -0.072057201177642652, 0.12706805404252855, -0.13757198545862262, -0.31639223989443899, -0.029240486244660611, 0.10973045554309782, 0.04102655016489614, 0.01891084247324943, -0.056922369420476487, 0.030805208457151782, -0.1512000567754726, -0.058122663069861934, -0.30506910575481916, -0.79033868813295383, 0.026308878650124864, 1.7521122327973906, 0.64566220514793682, 0.40042515638418263, -0.33461208848408402, -0.55369429571770823, -0.030140868003777126, 0.27230784814155334, 0.008194429787378334, -0.030645866021173498, 0.023928227792328404, 0.090706510487419734, -0.021569631345745226, -0.0064127815367693367, -0.026343653609827326, 0.0079365608693974798, -0.18791450411345401, 0.14319521757460194, 0.17003550871316017, -0.24661106106331201, -0.21167593067635404, -0.098206750946426211, -0.048592759447365123, 0.0028129255950110439, 0.049868939755416952, 0.039023237394102607, -0.0036267311717218496, -0.12930461632538415, -0.067411320951837855, 0.010801205387038189, 0.074931291451028059, 0.0657071501308885, -0.22930577035731903, -0.34894672904561169, 0.37107135970432037, 0.49136473213042475, 0.10645611255411164, -0.27741376367012294, -0.015474080963115254, 0.13417678111594294, -0.00046677178847574514, -0.064152245495751381, 0.038292630722847554, 0.017696001575747813, 0.0052157631901947011, -0.023883294001795573, 0.00060518848897931612, -0.088395093514235953, -0.11757758027246699, -0.019555697374511325, 0.025650630137194243, -0.043746931993730094, -0.08846438922222799, -0.074442233736365312, -0.0099104052825428144, 0.064871673248634965, 0.03524540038796406, -0.0065163090427015676, -0.065286881502250399, 0.023130909787941502, -0.028452880392855154, -0.098638256951482817, -0.23382813425811513, -0.077933249962103476, 0.069575788839216612, 0.86635491100693507, 0.33668792873864722, 0.34253529215971401, -0.019122146869457048, -0.016521364547457899, 0.098161425946316522, -0.011130337821465129, -0.092543539386829035, -0.0046973120649884213, -0.0086885172531639618, 0.041915865623990751, 0.004043623749362439, -0.037907101781325205, -0.03902357631677511, -0.037690963997300889, -0.11419210623041842, -0.076732726183972602, 0.12573571356763677, 0.012633232837618465, -0.098942005293094951, -0.061888601165125671, -0.0090012900880717846, -0.014247675993027883, 0.027023228844142398, -0.0050282774165556453, -0.031667371615742887, -0.033818612421867206, -0.01148054478950835, 0.002410610826462259, 0.084402385062259444, 0.069824545029654947, 0.043930202648898894, 0.078872059827297045, 0.055053359776043469, 0.0133618922103162, 0.068453834537836655, 0.081701490128889276, -0.023034972903402569, -0.042406682273060693, 0.035148729718712253, -0.037569795749083354, -0.0041828274568459145, 0.012961699649937737, -0.015475583648045266, -0.027857672235467607, 0.011169867646763214, -0.052725469767566695, -0.0070148730067698924, 0.053188940442296044, -0.095289423698368528, 0.016377276604450954, -0.015232023889946105, -0.077682201861009353, -0.048207693014304241, 0.014396940553395536, 0.021075876818278678, -0.0024069559974744716, -0.016758259649352489, 0.031865879706987753, 0.032824623168326933, -0.074182732572421473, -0.080036865363297197, 0.055652716802045685, 0.11130862970905192, 0.072952972838101024, 0.035098396968263772, 0.070242479721294437, 0.040747896169172335, -0.022459274904977577, 0.014257984954846613, 0.019887732012022184, -0.040811004345713692, 0.0088191619820225595, 0.012579825412037176, 0.0010521231241174983, 0.006430724322423028, -0.0107697788586532, -0.065313535534231901, -0.062769573271966861, 0.11452944472315789, 0.040092306883550234, 0.12236977033818973, 0.13624403896529741, 0.027359429809611827, -0.0259369720098807, -0.021419082531908291, -0.02797214703330133, 0.0080320798501609496, 0.0013100558771969473, -0.0052561866064455981, -0.0097375289490629017, 0.028455863356249757, 0.056425701741664613, -0.0014166564531825356, -0.032528933027316242, -0.019619112630340951, 0.065700689463789611, -0.027574493612476551, -0.032810042710946841, -0.021337213333243964, 0.019592990080295629, -0.019759750092557201, -0.030135000999364853, 0.031698488621630008, 0.023522054710864718, -0.021766544372719836, -0.0029827434432790761, 0.0078373508878122541, -0.0028057606437618767, -0.033232550782043478, -0.070830818977105636, 0.059080455669844649, 0.36951320092865036, 0.091411128665944044, 0.16404233417264649, 0.062598270207454218, 0.044986403519809939, -0.081510896741027974, -0.042341618007147169, -0.019737461729971092, -0.0048974001169366831, 0.01654258945512711, 0.0088012977267579451, -0.013696041496545335, -0.0020268100930256635, 0.015845305908809133, 0.016458612619479462, 0.00059474001274681517, -0.078529066256991353, -0.013402803779002156, -0.0036013299995064228, 0.037573591582025043, -0.0076636494655425947, -0.0021144243161753088, 0.032140257903604356, 0.0203960516207237, -0.013294834505552555, 0.0021732333351695376, 0.015223562704661827, -0.01560949450401263, 0.015060609589555461, 0.099241248305729085, -0.19173261262163863, 0.2450151004066432, 0.26383919410790774, 0.33963060937430933, 0.34586223870135113, 0.1799263961717959, 0.13137374163691276, -0.036493858716968031, -0.041981936023927684, -0.060258932305754208, -0.0099079010405710068, -0.010024579181759819, 0.016637976300589805, 0.031629106230310143, -0.011441752446030828, -0.010113005489671789, -0.027490450999295705, -0.018258671855796018, 0.061296263921274532, 0.10180457538537498, 0.097647442588889397, 0.063246459754600901, 0.0018146068702083835, -0.012539173975430248, -0.008345642545901014, 0.020763503842579332, 0.035996162307667869, -0.015675575409266479, -0.029662747125522582, 0.021312770128680401, 0.08274253615935892, -0.10682054954404013, -0.033729052458342255, -0.12662108035586636, 0.18053751384272299, 0.70940599530087467, -0.21337246968950196, 0.09763637724258438, 0.15345959634626791, -0.11690110107335749, 0.030098075283007168, 0.034186076429122053, -0.021402902917041923, 0.0046349096026103891, 0.011776544425663813, -0.0089673934626629329, 0.025701507905379287, -0.029333520957471802, 0.0051215906448292756, -9.6207917787476249e-05, -0.027988212781709806, 0.093695296747695708, 0.10174972110658871, 0.1657472048824174, 0.097917377942654052, 0.0075790364114050627, 0.031051039914505564, 0.015692601846482499, -0.015197940538429407, 0.026154427883432859, 0.038178927860434288, 0.07391023019778703, 0.0062621769249755375, 0.14786394857966245, -0.24133125024592791, 0.31944609486771169, 0.50715637065140251, 0.3628700351691248, 1.3060302403517683, -0.51467834215318464, -0.23826829822593068, -0.0093468845104923252, 0.16015106243072727, 0.02805086056222977, -0.0035899004350242064, -0.0055435803643170143, -0.026732920924661639, -0.010772744125100176, -0.024390993371714485, 0.012627431507206405, -0.0087203787935273471, 0.017390054254405412, 0.12375300108425245, 0.24623032442851775, 0.32220608581938742, 0.14931322115435106, -0.030460558403777184, 0.017160725214558258, -0.0094839753900354314, -0.040937983123008212, 0.021461267056132466, 0.052605242734811673, 0.082583919156513017, 0.060994911510484674, 0.19212485777257118, 0.030490864773295545, 0.17592824054988929, 0.2988664581273196, -0.3440942993173739, 1.3210609586317499, 0.059297195869563314, 0.66450815180221101, -0.18837022473974091, 0.34310308052214539, 0.41335445680081984, 0.18880277280085617, -0.0025387166530481263, -0.027056960212979365, -0.014992917126512385, -0.065825070508153574, 0.0059924400617866053, 0.016058491686644451, 0.096318218677932735, 0.11648035795043635, 0.083105673180647682, 0.32671351148908129, 0.21720864831216413, 0.29412476851730657, 0.14853499339159934, 0.018970981025801619, -0.0063191769526926853, -0.01818046447321878, -0.033255690840711123, 0.042088106914846247, 0.11598544099090941, 0.13859711550376397, -0.01128947190338442, 0.086653868373652729, 0.5559656926196751, 0.37680556076813249, 0.88488899182435787, -1.1019114795534606, 1.0072326177374842, -0.25696609936231163, 0.22595605005106759, 0.20124367647634336, 0.25020565573121023, 0.15194580903531119, 0.054188690404279045, -0.031588472981034531, -0.072469006265441768, -0.025752917138555535, -0.0471489088024604, 0.079293556902861981, 0.16429646904639772, 0.19502382977708654, 0.21468548823411557, 0.26510515339808566, 0.4121092848683291, 0.24137856300787749, 0.039245063706659693, 0.01328784964664576, 0.063938494959291103, -0.056808918829038463, -0.039159725623022792, 0.028736615885883075, 0.075674855852819814, 0.10715382591497533, 0.29941075202959372, 0.24751816611443234, -0.14971685838339424, 0.92725020353048182, -0.58030730777587713, 1.4965419400087898, -0.58030730777587824, 0.92725020353048315, -0.1497168583833956, 0.24751816611443228, 0.29941075202959394, 0.10715382591497527, 0.075674855852819592, 0.028736615885883075, -0.039159725623022994, -0.05680891882903847, 0.063938494959291325, 0.013287849646645755, 0.039245063706659422, 0.24137856300787733, 0.41210928486832976, 0.32671351148908501, 0.21468548823411696, 0.19502382977708541, 0.16429646904639761, 0.079293556902861592, -0.047148908802460261, -0.025752917138555938, -0.072469006265442351, -0.031588472981034621, 0.054188690404279302, 0.15194580903531177, 0.25020565573121106, 0.20124367647634361, 0.22595605005106811, -0.25696609936231096, 1.007232617737484, -1.1019114795534584, 0.88488899182435599, 0.37680556076813088, 0.55596569261967799, 0.086653868373653353, -0.011289471903383815, 0.13859711550376486, 0.11598544099090989, 0.042088106914846005, -0.033255690840710936, -0.018180464473218153, -0.0063191769526928735, 0.018970981025801085, 0.14853499339159881, 0.2941247685173069, 0.21720864831216452, 0.24623032442851894, 0.083105673180647877, 0.11648035795043606, 0.096318218677932249, 0.016058491686644111, 0.0059924400617863598, -0.065825070508153657, -0.014992917126512623, -0.027056960212979545, -0.0025387166530475712, 0.18880277280085703, 0.41335445680082034, 0.34310308052214539, -0.18837022473973905, 0.66450815180220979, 0.059297195869561843, 1.3210609586317497, -0.34409429931737384, 0.2988664581273206, 0.17592824054988909, 0.030490864773296485, 0.19212485777257224, 0.06099491151048541, 0.082583919156513072, 0.052605242734811722, 0.021461267056132546, -0.040937983123008163, -0.0094839753900352007, 0.017160725214558203, -0.030460558403777944, 0.14931322115435064, 0.32220608581938709, 0.093695296747697082, 0.1237530010842532, 0.017390054254405134, -0.0087203787935278762, 0.012627431507206037, -0.024390993371714388, -0.010772744125100247, -0.026732920924662094, -0.0055435803643169856, -0.0035899004350241582, 0.028050860562230339, 0.16015106243072863, -0.0093468845104915464, -0.23826829822592965, -0.51467834215318398, 1.3060302403517683, 0.3628700351691248, 0.5071563706514024, 0.31944609486771208, -0.24133125024592691, 0.14786394857966259, 0.0062621769249767058, 0.073910230197787502, 0.038178927860434683, 0.026154427883432977, -0.015197940538429256, 0.015692601846482655, 0.031051039914505491, 0.0075790364114048233, 0.097917377942654316, 0.16574720488241704, 0.10174972110658852, 0.10180457538537414, -0.027988212781709362, -9.6207917787273747e-05, 0.0051215906448293215, -0.029333520957471861, 0.025701507905379183, -0.0089673934626627958, 0.01177654442566399, 0.0046349096026104134, -0.021402902917041607, 0.03418607642912222, 0.030098075283007585, -0.1169011010733573, 0.15345959634626896, 0.097636377242582312, -0.21337246968950468, 0.70940599530087356, 0.18053751384272154, -0.12662108035586525, -0.033729052458342325, -0.1068205495440398, 0.082742536159359198, 0.021312770128680637, -0.02966274712552271, -0.015675575409266458, 0.03599616230766798, 0.020763503842579301, -0.0083456425459010053, -0.012539173975430275, 0.001814606870208027, 0.063246459754600651, 0.097647442588889521, -0.013402803779000846, 0.061296263921273318, -0.018258671855796015, -0.027490450999295389, -0.010113005489671634, -0.011441752446030721, 0.031629106230310081, 0.016637976300589583, -0.010024579181759814, -0.0099079010405707553, -0.060258932305754062, -0.041981936023927795, -0.036493858716967892, 0.13137374163691345, 0.17992639617179582, 0.34586223870135102, 0.3396306093743105, 0.26383919410790552, 0.24501510040664315, -0.19173261262163757, 0.099241248305728891, 0.015060609589555881, -0.015609494504012908, 0.015223562704661735, 0.0021732333351695459, -0.013294834505552418, 0.02039605162072387, 0.032140257903604141, -0.0021144243161752658, -0.0076636494655425496, 0.037573591582025015, -0.0036013299995066783, -0.027574493612477238, -0.078529066256990701, 0.00059474001274650921, 0.016458612619479316, 0.015845305908809258, -0.0020268100930258088, -0.013696041496545191, 0.0088012977267581446, 0.016542589455127047, -0.0048974001169365296, -0.019737461729970797, -0.042341618007146614, -0.081510896741027863, 0.044986403519810654, 0.062598270207453191, 0.16404233417264671, 0.091411128665944058, 0.36951320092864953, 0.059080455669845232, -0.070830818977105567, -0.033232550782043346, -0.0028057606437617323, 0.0078373508878121518, -0.0029827434432791976, -0.021766544372719729, 0.023522054710864829, 0.031698488621629953, -0.030135000999364715, -0.019759750092557201, 0.019592990080295483, -0.021337213333244086, -0.032810042710946043, 0.035098396968265562, 0.065700689463788264, -0.019619112630341284, -0.032528933027315937, -0.001416656453182401, 0.056425701741664544, 0.028455863356249663, -0.0097375289490629503, -0.0052561866064455114, 0.0013100558771970501, 0.0080320798501610554, -0.027972147033301621, -0.021419082531907708, -0.025936972009880058, 0.027359429809612409, 0.13624403896529816, 0.12236977033819048, 0.040092306883550463, 0.11452944472315811, -0.062769573271967, -0.065313535534231998, -0.010769778858653123, 0.0064307243224230766, 0.0010521231241173155, 0.012579825412037126, 0.0088191619820226965, -0.040811004345713484, 0.019887732012021993, 0.014257984954846677, -0.022459274904977573, 0.040747896169171828, 0.070242479721293896, 0.055053359776043469, 0.072952972838101038, 0.11130862970905199, 0.055652716802045553, -0.080036865363297377, -0.074182732572421722, 0.032824623168326919, 0.031865879706987767, -0.016758259649352489, -0.0024069559974744621, 0.021075876818278654, 0.014396940553395566, -0.048207693014304456, -0.077682201861009201, -0.015232023889946197, 0.016377276604451121, -0.095289423698368528, 0.053188940442295753, -0.007014873006770006, -0.052725469767566646, 0.011169867646763318, -0.027857672235467666, -0.015475583648045285, 0.012961699649937817, -0.0041828274568459145, -0.037569795749083312, 0.035148729718712211, -0.042406682273060839, -0.023034972903402475, 0.081701490128889429, 0.068453834537836641, 0.013361892210316275, 0.33668792873864783, 0.078872059827295921, 0.043930202648898596, 0.069824545029654933, 0.084402385062259569, 0.0024106108264623457, -0.011480544789508253, -0.033818612421867275, -0.031667371615742741, -0.00502827741655568, 0.027023228844142416, -0.014247675993027993, -0.0090012900880712381, -0.061888601165125297, -0.098942005293094756, 0.01263323283761883, 0.12573571356763666, -0.076732726183971922, -0.11419210623041808, -0.037690963997301666, -0.039023576316775249, -0.037907101781325052, 0.0040436237493623132, 0.041915865623990772, -0.0086885172531639947, -0.0046973120649884377, -0.092543539386828647, -0.011130337821465186, 0.098161425946316272, -0.016521364547457937, -0.019122146869457519, 0.34253529215971379, 0.37107135970432042, 0.86635491100693385, 0.069575788839216376, -0.077933249962103462, -0.23382813425811527, -0.09863825695148333, -0.028452880392854651, 0.02313090978794155, -0.065286881502250455, -0.0065163090427018816, 0.035245400387964018, 0.064871673248635159, -0.009910405282542379, -0.074442233736364327, -0.088464389222228296, -0.043746931993730226, 0.025650630137194336, -0.019555697374510583, -0.11757758027246727, -0.088395093514236453, 0.00060518848897882292, -0.023883294001795972, 0.0052157631901946491, 0.017696001575747886, 0.038292630722847568, -0.064152245495751242, -0.00046677178847581285, 0.13417678111594261, -0.015474080963115183, -0.27741376367012288, 0.10645611255411111, 0.49136473213042497, 0.64566220514793704, -0.34894672904561197, -0.22930577035731828, 0.065707150130888653, 0.074931291451028587, 0.010801205387038527, -0.067411320951837883, -0.12930461632538409, -0.0036267311717218076, 0.039023237394102503, 0.049868939755416578, 0.0028129255950110478, -0.048592759447364742, -0.098206750946425017, -0.21167593067635238, -0.24661106106331246, 0.17003550871316073, 0.14319521757460188, -0.18791450411345456, 0.0079365608693964147, -0.026343653609827478, -0.0064127815367698198, -0.021569631345745438, 0.090706510487419845, 0.023928227792328456, -0.030645866021173446, 0.0081944297873781744, 0.27230784814155318, -0.030140868003777244, -0.55369429571770845, -0.33461208848408441, 0.40042515638418175, 0.54787745216002603, 1.7521122327973908, 0.02630887865012415, -0.7903386881329546, -0.30506910575481899, -0.058122663069862322, -0.1512000567754718, 0.030805208457151921, -0.056922369420476453, 0.018910842473248434, 0.041026550164896362, 0.10973045554309671, -0.029240486244660805, -0.3163922398944391, -0.13757198545862218, 0.12706805404252669, -0.072057201177643526, -0.070445625631504319, 0.11232623315704422, 0.053944973270972273, 0.078972221527521536, -0.00416350617181658, -0.043614575991677791, -0.077748186566067592, 0.049219693586430378, 0.042416802273341318, 0.12644205243911066, 0.39096527623299887, -0.40370312470951558, -0.48770772267188234, 0.54473301805335006, 0.92898941300038107, 0.71512595047089234, 0.74385331371246577, 1.2482467538506357, -0.57166836623813888, -0.43281940369171401, 0.023943010115746077, 0.00030176170486927514, -0.24679227625704431, 0.16824405476099039, 0.092929862040844205, -0.029175915115095267, -0.081210816145377299, 0.032535239746583337, -0.018421573557966798, -0.18224178792918325, -0.29052216822588622, 0.17110516400703951, 0.22815908460498383, -0.15890945005602886, 0.0062170702455973175, -0.044853168166470177, 0.0080331646697508995, -0.0842632097276826, -0.016095705887684088, -7.820006368420517e-05, -0.097923922056211893, 0.48676804973393806, 0.35484595526186524, 0.18102793706565945, -1.0939934957719641, 0.9231011957591454, 0.49108674920037432, -1.6725083187014362, 0.56577881124465212, 1.7716903674840145, -0.31724338121882639, -0.46946217188769945, 0.46804088594167398, 0.2495599910064237, 0.21965961682575341, -0.28426475792188616, -0.12974774398976752, -0.086262426064739897, 0.084703474730633041, 0.12060535717228706, -0.33186051211466344, -0.10830858623812538, 0.17740469505624151, -0.0043101841409599814, -0.33866696253627121, 0.0393969525618715, -0.26339593722715154, 0.13598013030776659, 0.10364961453623139, -0.011168077595515221, -0.18224776807046214, -0.12296413131763473, 0.21989373735679868, 0.16380771710007386, 0.67271651276019118, -0.16319024909703136, 0.98390492917013062, 2.2217962254133496, -0.66077224091757802, 1.5638480130127614, -1.0129349058609651, 0.99232752650122769, 1.5155025161072819, 0.58675004339129688, 0.16801904131477496, 0.31725814504248523, -0.071714399164359219, 0.13832330176015895, -0.060442748560523389, -0.043434328775720558, -0.19718551141955432, -0.36586758725441343, -0.15612863751307984, -0.72499416196393318, -0.11056584899062098, 0.082780177430082938, -0.10585857030502534, -0.49717312826403764, 0.060297128338251849, -0.1741288940590143, 0.034503572794408806, -0.022140372568936324, 0.14950061311078439, 0.29242994865853189, -0.29100003355994419, 0.22751157962613949, -0.11471557758718894, 0.25575295594566499, 0.66007876209063321, -0.28144140655806837, -1.050216159001623], "bottom": {"real": [5837.242024063461, 16421.190569053251, 8527.2275182117319, 3938.41845467232, 969.21000043764093, 269.87346390668256, 193.53992011404216, 135.14631901451781, 58.523829955616236, 29.311524302602624, 20.863281166035843, 14.808244655557742, 11.401757474781434, 9.6386493936653288, 8.0538591094176777, 7.4714398062124641, 7.2711776175262477, 7.4714398062124241, 8.0538591094176653, 9.638649393665327, 11.401757474781416, 14.808244655557761, 20.863281166035858, 29.311524302602734, 58.523829955616236, 135.14631901451779, 193.53992011404216, 269.87346390668273, 969.21000043764059, 3938.4184546723186, 8527.2275182117301, 16421.190569053259, 14982.474506443205, 4755.1985786680198, 3083.8642011691682, 1502.8058566448747, 596.26851293203197, 262.35520536881347, 201.52671733896852, 108.13603201941604, 57.999252895466505, 28.992297197792773, 19.233600066307524, 13.871180161098291, 10.761421361485239, 8.8506828512506655, 7.8125584926262617, 7.1234501229356377, 6.6618841738486525, 7.1762884709606958, 8.1416889804019927, 8.8663632607744063, 11.328672883224474, 14.773155762512141, 20.058056528572401, 28.688344099071909, 57.995376649220766, 126.94075502116374, 211.30702516808583, 262.54448595536269, 752.96024761972672, 2141.5368023327851, 3891.3661973657881, 5583.5460990085166, 9500.6528086677681, 4225.3848573287933, 1708.1934289355966, 562.9450489663958, 526.41420210821127, 290.26438540271903, 151.34732218304231, 89.304597077577796, 50.161041673414204, 27.913649363990057, 19.253723232543383, 14.310501425792925, 10.622538104620221, 8.6520747616015274, 7.6796432895344049, 6.9311889072641995, 6.5442165971044535, 6.8352472963781299, 7.2531587818267287, 8.8125700197174819, 10.256278085266516, 13.962876672312342, 18.680978544191657, 27.641611280844351, 51.70590284164593, 92.383035108628647, 175.23999552329536, 238.6238705323166, 446.2130896894364, 589.84950644143407, 1459.800700420838, 2983.6421667816849, 6639.6980670311659, 3615.9230624353354, 1045.9683029029898, 541.95698246733389, 551.2292078912385, 269.01748102372522, 121.81702466062521, 78.619304368994548, 46.266475261147157, 26.895860643920866, 18.966790938143397, 14.141216689343503, 10.624588727031869, 8.5120674584469107, 7.5084078178458054, 7.127942028564302, 6.5505226441602824, 6.5976614570745582, 7.5671769464103935, 8.4293753366132105, 10.446992271959362, 13.755112829750516, 18.515159362788847, 25.868606557166544, 43.593025933023839, 76.847860046206122, 125.03651194390009, 241.77755195523335, 523.08499299660048, 633.36555854289827, 855.69476790230692, 2473.0066947172836, 2803.9496552692158, 1850.6397468329815, 645.77314636959022, 447.00563976857688, 381.6372474267435, 196.7755433249871, 93.586816816137713, 72.612365740746853, 43.711482900929944, 27.782222145016455, 18.647268962291367, 13.844325818813939, 10.350953817244738, 8.7140342291788997, 7.3516641952705921, 6.886474159529909, 6.1226840838853605, 6.7186507131414492, 7.0148796268173141, 7.9020046012660439, 9.6536048586555445, 13.744699851401226, 17.872279960942961, 25.025889030797831, 38.775468597625853, 68.228616115874232, 97.806667851841851, 178.52012140604563, 362.80035213144055, 506.96305099601244, 508.39785887877764, 1271.7627571663681, 1970.0713813014595, 1211.9708052435174, 448.82610946730466, 388.91483700385658, 294.26646682781944, 147.68595350614527, 76.563818921604266, 57.53338100926053, 37.094893522892434, 25.168957624787666, 17.405368368923924, 12.931100650610183, 10.211256703797424, 8.3783082007702649, 6.8845647672161352, 6.2954630311895761, 6.1711525716900475, 6.2852637654745882, 7.1318002457288037, 7.8126464614985656, 9.3562580058102185, 12.456351018938477, 17.12365920646733, 22.851195586808732, 34.22708028584924, 57.273965595477058, 82.126801795962663, 114.0182287640494, 248.69630423497404, 396.25330408596494, 382.77662480077174, 646.86127060880278, 1066.1959535576209, 770.74521634546068, 344.77171326148743, 328.21152488387929, 223.6732358532505, 124.39997807543456, 66.042124980023658, 49.833499278727395, 36.080812354502541, 24.010000461569632, 16.241873057458708, 11.94801819096188, 9.663620823552634, 8.1734814269274114, 6.8263151892657215, 6.1094005534487641, 5.5560364128866686, 6.0895161225652297, 6.7371553850929349, 7.5614980494024309, 9.3035460399083956, 11.904089289656403, 15.753116847312391, 22.116186781807659, 33.401673308199264, 45.775772578430164, 60.542807604917392, 91.412240599681226, 164.58197575163385, 289.97996145010069, 367.09809735899603, 433.51729458889321, 538.99714678707312, 436.9735160339028, 214.45700003213321, 226.27353228768246, 190.72528880002966, 104.24105887361294, 63.096291028318397, 44.895692115573439, 34.378771692376986, 22.743616534455565, 14.943130070579064, 11.306154107321404, 9.490726177732828, 8.057539867813432, 6.6249917656310648, 5.80530835366394, 5.6727594087192097, 5.6803994552580717, 6.4512234217242401, 7.3091820969038412, 8.9053168517088785, 11.147020821533502, 13.978280110937801, 19.308076160210224, 27.380246565144393, 39.45337202937899, 53.823906577074318, 70.344986096434994, 125.18491111128095, 220.27402210338624, 239.02095964975129, 253.52805611791149, 337.90351459641266, 301.96557555412664, 163.14862666039761, 176.1964602722083, 155.2640157056349, 91.402170635856464, 57.9223709952281, 44.132906015519367, 31.477476121951593, 19.994026988386896, 14.669539930994308, 10.52228821405147, 8.9499245076841039, 7.4160858759377133, 6.0652235290917815, 5.5336836347972449, 5.3453345499720717, 5.5251998880295652, 6.049359333226362, 7.4989544637904162, 8.6441457110666775, 10.17217183387787, 12.922358897606493, 16.497840703497662, 24.473525343022239, 36.893225695749557, 46.488420049270196, 60.008949681859932, 101.55324863109907, 172.57213254679178, 186.99209153386954, 177.69050334329205, 224.71115213821386, 219.35401697656656, 131.98987419085088, 139.58612051732652, 133.97255559613592, 83.717667146076977, 52.48988401855501, 39.948149447326976, 29.992243301791387, 19.792293237610107, 13.550533437330548, 10.191515700191694, 8.7251285565258279, 7.0130966099588283, 6.0412905020539274, 5.1695609453883042, 5.2335464217738297, 5.2748937601741233, 5.9151189141762242, 6.6404924993384702, 8.2525633194354864, 9.86505065394757, 11.857247340871206, 15.821441128307118, 21.809722446513074, 33.204842604441232, 45.292100524348356, 53.588237099743992, 86.046570865333351, 138.34470513151498, 144.28338780744133, 137.47961624149846, 184.36194031651988, 195.75342807998493, 111.69248606852764, 108.22432115257934, 110.31477193613289, 70.737952758714727, 45.316084199866118, 35.221165127538775, 25.132656234698317, 17.808708328889288, 13.205138111505544, 9.8319756958291311, 8.3851869715659166, 6.6979147774695411, 5.5577949826186863, 5.0640136062157843, 4.915924071395172, 5.1747375238921238, 5.621849200313962, 6.3926522738336189, 7.8838556827841355, 9.5880495388903295, 11.2702077240605, 14.675031755421674, 19.961485602094882, 28.340133288775018, 38.071807302485439, 46.211805942072893, 70.896288173632385, 115.46517347822648, 119.73189294718243, 110.21299532100423, 137.49078682179271, 145.21239507063157, 90.736475500202033, 84.820134662984671, 87.028887735269166, 58.592780926558561, 39.140475702708279, 30.030590426700837, 23.561748558876776, 17.07171690133644, 12.059539847971436, 9.1303469917064106, 7.8824915696444915, 6.5574577163884546, 5.4508327472027114, 4.6319487889521351, 4.8556936697031698, 5.0952139895658046, 5.3626061482546099, 6.0231504777267588, 7.3929124540904754, 8.8697139145390977, 10.839689611405708, 13.484775054138881, 18.125520870461621, 25.51326521840107, 33.814821758723511, 43.000660712963757, 59.289067569698993, 89.523100480006264, 96.002834501641331, 88.248403951505949, 114.22377327036351, 136.39754784126862, 85.133937137494058, 70.757613581150778, 72.941136445046624, 50.417131404641061, 35.29732697897046, 27.270836476117434, 20.337170678571646, 15.328073102208975, 11.227626008224609, 8.8894703399043831, 7.3066732490559749, 6.1117570010797007, 5.2240396800825373, 4.6927944754047974, 4.4462691956761722, 4.8997943453914665, 5.030120352863074, 5.8504059853355139, 6.9021030785339024, 8.6936481048417669, 10.014300550884089, 12.783989981758968, 16.915182814597465, 23.037925870268026, 29.781501040175886, 36.137786628939317, 46.659613314406016, 72.542096884400053, 80.098309124706176, 76.772569487169434, 87.96931966600367, 100.35528192635977, 66.390743706670477, 56.297220892995071, 57.449776912893739, 42.311817158751616, 30.3950154293208, 24.633397231162515, 18.800000277532757, 13.906344724637259, 10.685561612392762, 8.7726633553262534, 7.3765778222647702, 6.0238006847876884, 5.2082074327498917, 4.5886719664559399, 4.6166410353959701, 4.6115148269570563, 4.9920772309179853, 5.6445124723515159, 6.7980683034043956, 7.4975962005340229, 9.6066586869080837, 12.06652313244911, 16.251663826300451, 21.003823940677318, 27.622933573071261, 33.836788273738165, 41.877854423447168, 58.532835369703733, 68.239320296767971, 62.326149739008642, 71.583830955139561, 81.611391861674278, 61.290606958364052, 49.963935495056425, 49.744027747354536, 38.555965139546075, 28.313241453630848, 22.404376161451804, 17.69007471646092, 13.348861556136391, 10.46674681432143, 8.1507364253451371, 6.7804933363165576, 5.7303247473649055, 4.9737961537641029, 4.6591603640435002, 4.3691273542401863, 4.5876440856805019, 4.8775279419312838, 5.5643157824289267, 6.5106424514611394, 7.6517258774697732, 9.3978270674435489, 12.208065227131403, 15.316902707006163, 20.982661610009878, 26.317869298031479, 32.313264556083666, 38.062860113666069, 50.105167484748129, 58.219661124046276, 59.861157680092496, 61.019020366450448, 69.642805168222978, 57.634563900118565, 46.967523109902231, 43.85887184820529, 34.957640557066753, 26.505039983640941, 21.71545909517323, 16.236775633007202, 12.875777825381771, 9.9834739610997616, 7.8930497070448, 6.6829715569803687, 5.6672193704500122, 5.0794246915518446, 4.681264046528276, 4.6186632297539427, 4.6211092904368423, 5.0897865773957403, 5.5691810710797096, 6.5035187317991277, 7.2014326998593701, 9.1703620437944053, 12.475838151915292, 15.6623920524898, 19.528853843427893, 25.077028045409381, 30.833489267211636, 39.113296407386123, 46.770991427918581, 55.937485646720255, 57.570245344451905, 57.637817589030213, 59.860391566610879, 52.776195682327739, 43.839296967027423, 39.833012832197511, 33.598213438023812, 26.072700016436322, 20.276975501521189, 16.195672497297036, 12.239826665071417, 9.6875213487165066, 7.7379543893933631, 6.3786782254807157, 5.5950259327840586, 5.1232903828272987, 4.5786592309737237, 4.5178908466513406, 4.578659230973722, 5.1232903828272978, 5.5950259327840595, 6.3786782254807148, 7.7379543893933684, 9.6875213487165084, 12.239826665071421, 16.195672497297036, 20.276975501521182, 26.072700016436304, 33.598213438023805, 39.833012832197511, 43.839296967027416, 52.776195682327739, 59.860391566610836, 61.019020366450441, 57.570245344451919, 55.937485646720255, 46.770991427918517, 39.113296407386116, 30.833489267211636, 25.077028045409371, 19.528853843427893, 15.662392052489803, 12.475838151915296, 9.1703620437944, 7.2014326998593674, 6.5035187317991294, 5.5691810710797114, 5.0897865773957385, 4.6211092904368405, 4.6186632297539418, 4.6812640465282733, 5.0794246915518446, 5.6672193704500087, 6.6829715569803696, 7.8930497070447982, 9.9834739610997651, 12.875777825381764, 16.236775633007209, 21.715459095173252, 26.505039983640959, 34.957640557066775, 43.858871848205247, 46.967523109902238, 57.634563900118593, 69.642805168222949, 71.583830955139618, 59.861157680092482, 58.21966112404624, 50.105167484748137, 38.062860113666083, 32.313264556083666, 26.317869298031482, 20.982661610009867, 15.316902707006161, 12.208065227131399, 9.3978270674435436, 7.6517258774697732, 6.5106424514611394, 5.5643157824289284, 4.8775279419312856, 4.587644085680501, 4.3691273542401872, 4.6591603640434966, 4.973796153764102, 5.7303247473649037, 6.7804933363165594, 8.1507364253451371, 10.466746814321423, 13.348861556136386, 17.69007471646092, 22.404376161451779, 28.313241453630852, 38.555965139546039, 49.744027747354508, 49.963935495056418, 61.290606958364073, 81.611391861674235, 87.969319666003628, 62.326149739008663, 68.239320296767957, 58.532835369703712, 41.877854423447168, 33.836788273738158, 27.622933573071283, 21.003823940677311, 16.251663826300444, 12.066523132449106, 9.6066586869080837, 7.4975962005340202, 6.7980683034043929, 5.6445124723515194, 4.9920772309179844, 4.6115148269570598, 4.6166410353959719, 4.5886719664559372, 5.2082074327498908, 6.0238006847876866, 7.3765778222647711, 8.7726633553262587, 10.685561612392764, 13.906344724637258, 18.80000027753276, 24.633397231162533, 30.395015429320793, 42.311817158751609, 57.449776912893732, 56.297220892995028, 66.390743706670506, 100.35528192635975, 114.22377327036349, 76.772569487169449, 80.098309124706219, 72.542096884400053, 46.659613314406002, 36.137786628939317, 29.781501040175893, 23.037925870268033, 16.915182814597468, 12.783989981758975, 10.014300550884082, 8.6936481048417651, 6.9021030785339006, 5.8504059853355228, 5.0301203528630678, 4.8997943453914612, 4.4462691956761731, 4.6927944754048019, 5.2240396800825328, 6.1117570010797033, 7.3066732490559732, 8.8894703399043813, 11.227626008224609, 15.32807310220897, 20.337170678571649, 27.270836476117438, 35.297326978970467, 50.417131404641083, 72.941136445046638, 70.757613581150821, 85.133937137494073, 136.39754784126856, 137.49078682179265, 88.248403951506006, 96.002834501641317, 89.523100480006221, 59.289067569698972, 43.000660712963743, 33.814821758723504, 25.51326521840107, 18.125520870461624, 13.484775054138884, 10.839689611405714, 8.8697139145391013, 7.3929124540904745, 6.0231504777267606, 5.362606148254609, 5.0952139895658073, 4.8556936697031734, 4.6319487889521325, 5.4508327472027096, 6.5574577163884502, 7.8824915696444933, 9.1303469917064124, 12.059539847971436, 17.071716901336433, 23.561748558876776, 30.030590426700826, 39.140475702708279, 58.592780926558504, 87.028887735269151, 84.820134662984628, 90.73647550020199, 145.21239507063157, 184.36194031652002, 110.2129953210042, 119.73189294718252, 115.4651734782265, 70.896288173632399, 46.211805942072878, 38.071807302485439, 28.340133288775018, 19.961485602094882, 14.675031755421674, 11.270207724060505, 9.5880495388903277, 7.8838556827841364, 6.3926522738336233, 5.6218492003139611, 5.1747375238921247, 4.9159240713951746, 5.0640136062157861, 5.5577949826186863, 6.697914777469534, 8.3851869715659184, 9.8319756958291471, 13.205138111505548, 17.808708328889303, 25.13265623469832, 35.221165127538775, 45.316084199866097, 70.737952758714712, 110.3147719361329, 108.22432115257941, 111.69248606852767, 195.75342807998487, 224.71115213821398, 137.47961624149852, 144.28338780744139, 138.3447051315149, 86.046570865333337, 53.588237099743992, 45.292100524348342, 33.204842604441232, 21.809722446513071, 15.82144112830712, 11.857247340871208, 9.86505065394757, 8.2525633194354864, 6.640492499338464, 5.9151189141762242, 5.2748937601741233, 5.2335464217738297, 5.1695609453883096, 6.0412905020539247, 7.0130966099588328, 8.725128556525835, 10.191515700191694, 13.550533437330545, 19.792293237610103, 29.992243301791408, 39.948149447327012, 52.489884018555003, 83.717667146076963, 133.97255559613592, 139.58612051732649, 131.98987419085091, 219.35401697656653, 337.90351459641266, 177.69050334329216, 186.99209153386957, 172.57213254679186, 101.55324863109904, 60.008949681859939, 46.488420049270182, 36.893225695749557, 24.473525343022239, 16.497840703497666, 12.922358897606497, 10.172171833877869, 8.6441457110666775, 7.4989544637904126, 6.0493593332263602, 5.5251998880295634, 5.3453345499720717, 5.5336836347972458, 6.0652235290917806, 7.4160858759377133, 8.949924507684111, 10.522288214051471, 14.669539930994311, 19.994026988386889, 31.477476121951593, 44.13290601551936, 57.922370995228107, 91.402170635856407, 155.2640157056349, 176.1964602722083, 163.14862666039767, 301.96557555412653, 538.99714678707278, 253.5280561179116, 239.02095964975135, 220.2740221033861, 125.18491111128091, 70.344986096434923, 53.823906577074332, 39.453372029378947, 27.380246565144397, 19.308076160210238, 13.978280110937792, 11.147020821533506, 8.9053168517088821, 7.3091820969038439, 6.4512234217242392, 5.6803994552580681, 5.6727594087192079, 5.8053083536639392, 6.6249917656310666, 8.0575398678134302, 9.4907261777328298, 11.306154107321403, 14.943130070579077, 22.743616534455558, 34.378771692377001, 44.895692115573446, 63.09629102831839, 104.241058873613, 190.72528880002952, 226.27353228768243, 214.45700003213315, 436.97351603390234, 1066.1959535576209, 433.51729458889332, 367.09809735899597, 289.97996145010086, 164.58197575163376, 91.412240599681198, 60.542807604917364, 45.775772578430157, 33.401673308199264, 22.116186781807642, 15.753116847312398, 11.904089289656401, 9.303546039908392, 7.5614980494024362, 6.7371553850929322, 6.0895161225652297, 5.5560364128866677, 6.1094005534487605, 6.8263151892657268, 8.1734814269274096, 9.6636208235526269, 11.948018190961893, 16.241873057458722, 24.010000461569639, 36.080812354502534, 49.833499278727416, 66.042124980023658, 124.39997807543459, 223.67323585325056, 328.21152488387946, 344.77171326148749, 770.74521634546022, 1970.0713813014588, 646.86127060880301, 382.77662480077169, 396.2533040859646, 248.69630423497387, 114.01822876404945, 82.126801795962692, 57.273965595476994, 34.227080285849233, 22.851195586808739, 17.12365920646733, 12.456351018938475, 9.3562580058102167, 7.8126464614985656, 7.1318002457288037, 6.2852637654745882, 6.1711525716900475, 6.2954630311895787, 6.8845647672161387, 8.3783082007702561, 10.211256703797417, 12.931100650610194, 17.405368368923916, 25.168957624787648, 37.094893522892434, 57.533381009260523, 76.563818921604266, 147.68595350614524, 294.26646682781944, 388.91483700385658, 448.82610946730478, 1211.9708052435162, 2803.9496552692158, 1271.7627571663686, 508.39785887877753, 506.96305099601244, 362.80035213144049, 178.52012140604566, 97.806667851841823, 68.228616115874146, 38.775468597625853, 25.025889030797838, 17.872279960942965, 13.74469985140124, 9.6536048586555427, 7.9020046012660456, 7.0148796268173159, 6.7186507131414386, 6.1226840838853631, 6.8864741595299055, 7.3516641952705939, 8.7140342291789032, 10.350953817244736, 13.844325818813926, 18.64726896229136, 27.782222145016434, 43.711482900929937, 72.612365740746867, 93.586816816137656, 196.7755433249871, 381.63724742674339, 447.00563976857711, 645.77314636959011, 1850.6397468329806, 6639.698067031165, 2473.0066947172841, 855.69476790230704, 633.36555854289816, 523.0849929966007, 241.77755195523349, 125.03651194390012, 76.847860046206094, 43.593025933023853, 25.868606557166554, 18.515159362788847, 13.755112829750496, 10.44699227195936, 8.4293753366132176, 7.5671769464103917, 6.5976614570745609, 6.5505226441602797, 7.1279420285643011, 7.5084078178458018, 8.5120674584469089, 10.624588727031863, 14.141216689343507, 18.966790938143404, 26.895860643920869, 46.266475261147157, 78.619304368994577, 121.81702466062518, 269.01748102372505, 551.22920789123827, 541.95698246733446, 1045.9683029029893, 3615.9230624353345, 9500.6528086677681, 2983.6421667816867, 1459.8007004208382, 589.84950644143373, 446.2130896894364, 238.62387053231652, 175.23999552329542, 92.383035108628548, 51.705902841645944, 27.641611280844312, 18.680978544191667, 13.962876672312348, 10.256278085266519, 8.8125700197175014, 7.2531587818267402, 6.8352472963781254, 6.5442165971044517, 6.9311889072641986, 7.6796432895344058, 8.6520747616015186, 10.622538104620222, 14.310501425792921, 19.253723232543386, 27.913649363990046, 50.161041673414196, 89.304597077577839, 151.34732218304231, 290.26438540271909, 526.41420210821127, 562.94504896639603, 1708.1934289355961, 4225.3848573287914, 14982.474506443201, 5583.5460990085194, 3891.3661973657854, 2141.5368023327842, 752.9602476197266, 262.54448595536314, 211.30702516808589, 126.94075502116375, 57.995376649220773, 28.688344099071898, 20.058056528572401, 14.773155762512143, 11.328672883224492, 8.8663632607744169, 8.1416889804020052, 7.1762884709607109, 6.6618841738486552, 7.1234501229356262, 7.8125584926262608, 8.8506828512506655, 10.761421361485221, 13.871180161098282, 19.233600066307527, 28.992297197792769, 57.999252895466505, 108.13603201941609, 201.52671733896852, 262.35520536881353, 596.26851293203185, 1502.8058566448742, 3083.8642011691672, 4755.1985786680179], "imag": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "imag": [0.0, -0.13871927675086548, -0.55827571496092165, -0.85383263724083092, -0.46701193383615952, 0.047809537946767316, -0.3426920474802197, 0.15831589374137059, 0.20589774809377467, -0.21944378817656213, -0.12654666933988368, -0.19544466487854822, -0.096446269450190733, -0.2265628704083768, 0.10840537931386109, -0.055457499657790024, 0.0, 0.055457499657784036, -0.10840537931384955, 0.22656287040837902, 0.096446269450189581, 0.19544466487854698, 0.1265466693398799, 0.21944378817656165, -0.20589774809377467, -0.15831589374137045, 0.34269204748022014, -0.047809537946767663, 0.46701193383615958, 0.85383263724082981, 0.55827571496092188, 0.13871927675086551, -1.279550584464304, -0.80695903119669909, -0.5066002982483182, -1.4561178571661, -0.13414323846201096, -0.25055297311154978, -0.64027404819684697, -0.19951473048424853, 0.33137912963317689, -0.047498243759329373, -0.24064979253244873, 0.1395435157196932, 0.17789090203786645, -0.044374683774468404, -0.36806933922228663, 0.19528135326361654, 0.32999646269142918, -0.13015393203002068, 0.1959681784626765, 0.28571835588367483, 0.22705801052414751, -0.14508578389537852, 0.23457709892354506, 0.21163882649779878, -0.20150153854805303, 0.060946718066345364, 0.31004041285864392, -0.26258387187077481, 0.13955938857309563, -0.2449447076348287, 0.068510051090992716, -1.1758121586434307, -1.3682011726001491, -1.6899938281650106, -0.75019268688655194, 0.68911282851752931, 0.44086751164178845, -0.23155959034339019, -0.54510315877084203, 0.26585764990704713, 0.2624959582084973, -0.045146091846171167, 0.011517786678353055, -0.057907844320373422, 0.076854124253010955, 0.0035092112107953564, -0.23588030048916386, -0.048277840380711062, -0.21489820671404902, 0.26817287178185911, -0.027468417557455105, 0.29873174456545087, 0.072899207479288589, 0.023829771073631354, 0.0066491170121291982, 0.0048298736467919092, -0.13057930804766787, -0.26946209593128789, 0.39240115086507854, 0.85317721061416651, -0.11752989424299426, 0.99998707389668307, 0.55787436167296656, -1.0314907737559058, -1.5043263157657751, -1.3830149751777026, -0.20446853801739454, -0.28364033101911829, 0.68303147161529054, 0.03902721990981517, -0.18273076418691683, -0.013466871818696777, 0.028891896132398606, -0.068621242214500722, -0.026792869524675422, 0.18842973810535804, 0.068392282535087487, -0.17097210848547728, -0.23288712244734344, -0.31416612358708279, 0.27284169211913839, -0.072438990225411531, 0.1202436118466384, 0.067443262257117789, -0.0040452326400191837, -0.15231382612170316, 0.020438609938141238, 0.10773227995476008, -0.1646961578394999, -0.034526357222664054, 0.34045699686317549, 0.3582562672018631, 0.50203282214727851, -0.90050578840564854, 1.1141651843864948, -1.0547694551235964, 0.15113295529591572, -0.42011997382980693, -1.1306687523196075, 0.59904899563122349, 0.12782476119556421, -0.26469201284371935, -0.0028564673365734715, 0.25878855026626812, 0.00078645201341040851, -0.17181320075266995, 0.013143422355015144, 0.050238396740841747, 0.072156922858987921, 0.041604673982592558, -0.0112715468909201, -0.016101389694688766, -0.31269363662275068, 0.094974334151300396, -0.067869387966968731, 0.14811752790953986, 0.010724993842567176, -0.071495661604357427, -0.037154193600070516, 0.05779163337935353, 0.094937931062917286, -0.1272883333159909, -0.017408469796284951, 0.62003762386212868, 0.074417004563971767, -0.12904495334293709, -1.4636084587609224, -0.036743730082780299, -0.77470195486186, -0.60686918965332004, 0.62872636200456622, -0.46894237369717673, -0.18368617361305525, 0.26816260026693856, 0.13447215443394772, 0.041008154934057489, -0.017107991149299187, -0.0680369475996533, -0.01240601732954733, 0.059356927461924558, 0.12615835751185028, 0.053672308552617974, 0.037749743592242362, -0.10597138547480481, 0.022172258797336697, -0.058681894939636686, 0.12792055300624736, -0.060154323470105943, 0.032298308999269151, -0.015701976416949814, 0.0007367446231764113, 0.07712597645572114, 0.055644084876628218, -0.065981740018919821, -0.14567847379973994, 0.039540586335773356, 0.24917063867041539, -0.6432675339043068, 0.36754664039982821, -0.069649876974948205, 0.2952063874323651, -0.011417685121456805, -1.0450941798657123, -0.17374602795438093, 0.19930768818407893, -0.1556206112582631, 0.055817128538076119, 0.17900936499027481, 0.0052374024484263433, -0.042596098823283683, -0.020834261928533829, 0.036686593450547957, 0.00076880260958178746, 0.061719692477810909, 0.027700064466885506, 0.10661165850403151, -0.13945785164947772, -0.050544258155460708, -0.11937846922953205, 0.034399558837173369, 0.02521789889898339, -0.0047468618190418272, -0.028256857448446509, 0.029239764799856467, 0.046539635523190424, -0.033316423902485758, -0.15842957449053302, 0.14741145606308881, 0.1752194519195491, -0.075629282019522973, -0.91968716746889456, -0.45504702044764878, -0.12177128356890227, -0.10462001130261206, 0.1804016527269576, -0.047005347129142915, -0.19200701617075638, 0.1133507155810588, 0.14315736053243958, -0.067545520465919412, -0.0022066601859379556, 0.0084001340729883862, 0.0049338006978182497, 0.016196236751475263, 0.066419574069183293, -0.012240235365542763, 0.014433128838537781, 0.023674926554515096, -0.017114978073907605, -0.14379898617791109, 0.084303725772385638, 0.0056779923265117766, 0.048321020114327755, 0.022849248448590556, 0.012395399307186424, 0.023865191872962568, -0.0060375152678495622, -0.021897165586045375, -0.092173327221095822, -0.17587869380621102, 0.091992925322100877, 0.014980171338571357, 0.0086063527817299007, 0.098130362913165001, 0.130338354535672, 0.094203305677599436, -0.19730813245926024, -0.10041080102702246, 0.075932042745803577, 0.021134287621881041, -0.059575532325244519, 0.0082992125422013917, 0.015272751179096435, 0.0090248536114060952, -0.019251438395354602, -0.015788972597383853, 0.003250945662643008, 0.032968975479440332, -0.015058032290062954, 0.017643635220692015, -0.068857003169531444, 0.030070570566209365, -0.12793975070954616, -0.043534834876013277, 0.0017423598025251587, 0.028592812647173952, 0.0036967486190428137, 0.0090453167838253218, -0.016259252101333162, -0.0052076817297827191, 0.018046490267575967, -0.026168992315517926, -0.083077034868877908, 0.032798990212655046, -0.027546636940189637, -0.12409557570816734, -0.0088356071822206419, -0.034333260533212014, 0.056177295075322577, 0.057994393113440637, -0.032566171451921935, -0.010465798382464413, 0.020079425427313443, -0.017396471253638312, -0.017870360905994483, 0.010919865739753416, 0.012363627500514531, -0.014313215415815719, 0.034201557920817111, 0.10796975372596095, 0.21064351401911494, -0.046016401957029461, -0.083803307026608195, -0.15128619138644472, -0.070745415327885988, -0.06951503451164355, 0.070638418064815661, -0.0080019035626016123, 0.02654845111893607, 0.019862790828204354, -0.0038698355762961699, -0.020866890117519677, -0.0048084432749845906, -0.0036451640963975299, -0.0026341276434262537, -0.0023099396961399252, 0.043908100663757832, 0.096772033742844044, 0.04918905117971889, 0.070600771528734244, -0.026773628633603139, -0.05973226936448265, 0.013552286601009756, 0.0032289712715403013, -0.023046337829044056, -0.010405151723131599, 0.019427096259341661, 0.018256051683800133, -0.056759870222018213, -0.032960560091393032, -0.017399004273096801, 0.12185282737260948, 0.037984234337547759, -0.12270039394272629, -0.055947445070994896, 0.04621845892784341, -0.1857137618225036, -0.063810892086947277, 0.07053672326645595, 0.03906718120738633, 0.01577517031413787, -0.0047456570119124219, -0.019801411975277249, 0.024637199092487311, 0.019457415538283646, -0.0067710516924983765, -0.028346017012320548, -0.0065098329229195291, -0.0013352981567293612, -0.023151697315085987, -0.06519950655383687, -0.1042256990435297, -0.023224778901070588, 0.0072963544312097499, -0.034708386400909293, -0.0023809918522597964, 0.016167541663812009, -0.0054340236987463174, 0.0027208109883995382, 0.0066841964011560553, -0.023932611476630623, -0.039005803210705049, 0.016396390506166533, 0.058067983872416511, 0.15112210885707694, 0.091953539825334094, -0.30878981646904202, 0.23773808023122034, -0.11496619447060334, -0.15410637679425881, 0.16398523681965352, -0.042160123131605852, -0.0057838899052936009, 0.021159112170606904, -0.00089194024953267548, -0.043632529695206895, 0.025594278576058532, 0.04827977682701759, 0.008656372871138766, -0.025123508323013247, -0.021222695138498154, 0.012727342518660707, 0.0027327273075534982, 0.016727222825244921, -0.062351999721191126, -0.095086485134993501, 0.009789315676701096, 0.020526538310240195, -0.0017729650965628652, 0.0042367342426148282, 0.0096918161659650896, -0.014518052118829046, -0.0045810353743419062, -0.069451504639382974, -0.036289590762181183, 0.22708969966074724, 0.3665342673930222, -0.59625762091850343, 0.36774772058649913, 0.2627894192943519, -0.10703484463450727, -0.13950623949894417, -0.080806137493453625, -0.018761372187400087, -0.14807112835842171, 0.015533054933596769, -0.013156170331620851, 0.033053795814988449, 0.012901798319361097, 0.00377273404398293, -0.0087050725477761486, -0.026200884444946355, -0.069983120002794802, -0.045851102565308888, -0.0080215915074989454, -0.048063119818621811, -0.055909188302307122, 0.015567334119352533, -0.069113723063989038, -0.0072474243428621863, 0.042526562044161449, 0.039806904605142766, -0.027582495505149615, 0.0049261433754253488, -0.04754279011762625, -0.074122351214929355, 0.22223052073714245, -0.0077417273670608014, -0.080825286420915882, 0.62390518555370134, -0.18988737165776209, -0.013310214088767865, -0.13538196037364333, -0.38370084094404533, -0.32853605615928166, -0.23095349816725769, 0.0024573680892555631, -0.060148519255615616, 0.030360401196840837, -0.0084214745912351684, 0.033027304906486414, 0.030739864021722699, 0.0097039926999964547, -0.060698557392036313, -0.04746519227839175, -0.053530300822357386, -0.046174234082698239, 0.0052112044634668644, 0.020596160958060543, -0.15878906772803425, -0.02193329327109424, 0.0079342423803948989, 0.027919450264392773, 0.0070430807013025284, 0.020085011074200358, -0.075935043112063852, -0.041652272773957957, 0.16889959178925665, 0.18647295463827135, 0.014154913289577202, 0.060521107576468509, -0.63637312336837226, 0.90191957381577925, 0.27922666018549325, -0.48673882008850766, -0.33370031357259311, -0.3513559741645329, -0.2622745616761345, -0.17197492325356289, -0.0057315027931728107, -0.04469091820910031, 0.053283308768024513, 0.039465599946438043, -0.014174493080162808, -0.04946368453866596, -0.022857667990750397, -0.16881304090125779, -0.080812526909499666, 0.00058234446045326367, 0.084338425974376116, -0.12518231680881081, -0.040506406338050263, -0.08374410530080309, -0.001350704062862842, 0.030200114248426838, 0.042299889130269351, 0.011310849850443803, 0.081759178445920677, 0.035289563063634108, -0.12268118169149339, 0.058157249768416797, 0.19453030659557169, -0.32019695139960919, 1.2621857571853639, 0.24947885513851267, -0.86827138009746829, -0.26346017480935824, -0.40312000272498982, -0.22820944406317872, 0.0813299683314989, 0.0038871367161771898, -0.10891614598123801, 0.00043800911235750134, -0.043289297526922212, 0.012593343881888895, -0.0042686636670869688, -0.008833188472774969, -0.024141666831206311, -0.03923653338217388, -0.25435751708422283, 0.0, 0.13106581900761921, 0.22441332039311174, -0.094768447018961463, 0.0024812204443016074, 0.036286268392045858, 0.0056698536823630895, -0.010705526315732189, 0.082044918512892334, 0.0010532751265284197, 0.015101105715477795, 0.090653505450224631, 0.27613653682211553, 0.17494988738073455, 0.30956821269851931, 0.034540476362705901, 0.0, -0.034540476362701966, -0.30956821269851847, -0.17494988738073411, -0.27613653682211575, -0.090653505450227129, -0.015101105715478274, -0.0010532751265287738, -0.082044918512892334, 0.010705526315732109, -0.0056698536823632534, -0.036286268392045982, -0.0024812204443015839, 0.094768447018961921, -0.22441332039311199, -0.13106581900761924, -0.00058234446045052997, 0.25435751708422299, 0.039236533382173068, 0.024141666831206714, 0.0088331884727747174, 0.0042686636670865837, -0.012593343881888968, 0.04328929752692242, -0.00043800911235742604, 0.1089161459812379, -0.0038871367161778295, -0.081329968331500163, 0.22820944406317803, 0.40312000272499021, 0.26346017480936107, 0.86827138009747229, -0.24947885513851314, -1.2621857571853632, 0.32019695139960752, -0.19453030659557399, -0.058157249768416672, 0.12268118169149329, -0.035289563063634503, -0.081759178445920649, -0.011310849850443772, -0.042299889130268831, -0.030200114248426623, 0.0013507040628626303, 0.083744105300802674, 0.040506406338050895, 0.12518231680881103, -0.084338425974375644, 0.046174234082696289, 0.08081252690949875, 0.16881304090125832, 0.022857667990750261, 0.04946368453866589, 0.014174493080162815, -0.039465599946438334, -0.053283308768024965, 0.044690918209100129, 0.0057315027931725314, 0.1719749232535624, 0.26227456167613394, 0.3513559741645329, 0.33370031357259339, 0.48673882008850966, -0.27922666018549408, -0.90191957381578058, 0.63637312336837637, -0.060521107576467635, -0.014154913289577215, -0.18647295463827063, -0.16889959178925743, 0.041652272773958374, 0.075935043112064518, -0.020085011074200423, -0.0070430807013025249, -0.02791945026439252, -0.0079342423803949891, 0.021933293271094115, 0.15878906772803389, -0.02059616095805995, -0.0052112044634673969, 0.008021591507499164, 0.05353030082235833, 0.047465192278390397, 0.060698557392036064, -0.0097039926999963107, -0.030739864021722747, -0.033027304906486449, 0.008421474591235165, -0.03036040119684083, 0.060148519255615165, -0.0024573680892551967, 0.23095349816725866, 0.32853605615928261, 0.38370084094404566, 0.13538196037364647, 0.01331021408876858, 0.18988737165776171, -0.62390518555369734, 0.080825286420916714, 0.0077417273670609497, -0.22223052073714233, 0.074122351214929452, 0.047542790117626306, -0.0049261433754249724, 0.027582495505149737, -0.039806904605142586, -0.042526562044161428, 0.0072474243428622999, 0.069113723063988594, -0.015567334119352927, 0.055909188302305984, 0.048063119818621922, -0.0027327273075535455, 0.045851102565308353, 0.069983120002795093, 0.026200884444945973, 0.0087050725477759057, -0.0037727340439829347, -0.012901798319361227, -0.033053795814988754, 0.013156170331620811, -0.015533054933596691, 0.14807112835842184, 0.018761372187400604, 0.080806137493454139, 0.13950623949894433, 0.10703484463450816, -0.26278941929435246, -0.36774772058649907, 0.59625762091850687, -0.36653426739302131, -0.22708969966074771, 0.036289590762181079, 0.069451504639383266, 0.0045810353743422905, 0.014518052118829408, -0.0096918161659651156, -0.0042367342426148941, 0.0017729650965627938, -0.020526538310240098, -0.0097893156767009607, 0.095086485134992974, 0.062351999721190751, -0.01672722282524514, 0.065199506553837216, -0.012727342518659639, 0.021222695138497675, 0.025123508323013449, -0.0086563728711387469, -0.048279776827017555, -0.025594278576058595, 0.04363252969520693, 0.00089194024953267417, -0.021159112170607019, 0.0057838899052937813, 0.042160123131606046, -0.16398523681965352, 0.15410637679425865, 0.11496619447060411, -0.23773808023122042, 0.30878981646904247, -0.091953539825333053, -0.15112210885707561, -0.058067983872415838, -0.016396390506166002, 0.039005803210705077, 0.023932611476630637, -0.006684196401155907, -0.0027208109883995707, 0.0054340236987462662, -0.016167541663812044, 0.0023809918522598732, 0.034708386400909043, -0.0072963544312100569, 0.023224778901069786, 0.10422569904352962, -0.049189051179719279, 0.023151697315084544, 0.0013352981567299367, 0.0065098329229194736, 0.02834601701232067, 0.0067710516924982707, -0.019457415538283694, -0.024637199092487305, 0.019801411975277225, 0.0047456570119127489, -0.015775170314137797, -0.03906718120738624, -0.070536723266456214, 0.063810892086946833, 0.18571376182250354, -0.046218458927843417, 0.055947445070994993, 0.1227003939427266, -0.037984234337547038, -0.12185282737260873, 0.01739900427309727, 0.032960560091392817, 0.056759870222018227, -0.018256051683799891, -0.019427096259341584, 0.010405151723131587, 0.023046337829044038, -0.0032289712715403299, -0.013552286601009622, 0.059732269364482463, 0.026773628633603028, -0.070600771528734632, 0.008835607182220432, -0.096772033742842878, -0.043908100663758234, 0.0023099396961402566, 0.0026341276434262424, 0.0036451640963978101, 0.004808443274984581, 0.020866890117519587, 0.0038698355762962896, -0.019862790828204292, -0.026548451118935872, 0.0080019035626017337, -0.0706384180648158, 0.069515034511643051, 0.070745415327885364, 0.15128619138644453, 0.083803307026608292, 0.046016401957029593, -0.21064351401911435, -0.10796975372596025, -0.034201557920816583, 0.01431321541581594, -0.012363627500514576, -0.010919865739753575, 0.017870360905994497, 0.017396471253638378, -0.02007942542731345, 0.01046579838246435, 0.032566171451921762, -0.05799439311344054, -0.056177295075322847, 0.034333260533212451, -0.130338354535672, 0.12409557570816747, 0.027546636940189641, -0.032798990212655137, 0.083077034868877978, 0.026168992315517999, -0.018046490267575984, 0.005207681729782772, 0.016259252101333162, -0.009045316783825131, -0.0036967486190426836, -0.028592812647173869, -0.0017423598025251908, 0.043534834876013409, 0.12793975070954686, -0.030070570566209584, 0.068857003169531444, -0.017643635220692303, 0.015058032290063167, -0.032968975479440069, -0.0032509456626426633, 0.015788972597383943, 0.019251438395354474, -0.0090248536114061126, -0.015272751179096435, -0.0082992125422014836, 0.059575532325244533, -0.021134287621881149, -0.075932042745803632, 0.10041080102702246, 0.19730813245926007, -0.094203305677599283, 0.12177128356890216, -0.098130362913164085, -0.0086063527817301141, -0.014980171338571052, -0.091992925322100572, 0.17587869380621152, 0.092173327221095724, 0.021897165586045479, 0.0060375152678496429, -0.02386519187296254, -0.012395399307185896, -0.022849248448590303, -0.048321020114327692, -0.0056779923265118269, -0.084303725772385735, 0.1437989861779114, 0.017114978073907855, -0.023674926554513819, -0.014433128838537597, 0.012240235365543381, -0.066419574069182918, -0.016196236751474646, -0.0049338006978182185, -0.0084001340729884851, 0.0022066601859378697, 0.067545520465919467, -0.1431573605324398, -0.11335071558105927, 0.19200701617075636, 0.047005347129143109, -0.18040165272695829, 0.10462001130261284, -0.2952063874323646, 0.45504702044764878, 0.91968716746889512, 0.075629282019523555, -0.17521945191954877, -0.14741145606308895, 0.15842957449053352, 0.033316423902485841, -0.046539635523190549, -0.029239764799856394, 0.028256857448446561, 0.0047468618190423398, -0.025217898898983061, -0.034399558837173737, 0.11937846922953181, 0.050544258155460854, 0.1394578516494776, -0.10661165850403005, -0.027700064466883865, -0.061719692477810832, -0.00076880260958129979, -0.036686593450547596, 0.020834261928534131, 0.042596098823283357, -0.0052374024484263546, -0.17900936499027453, -0.055817128538076279, 0.1556206112582631, -0.19930768818407885, 0.17374602795438115, 1.0450941798657116, 0.011417685121456564, 0.77470195486186011, 0.069649876974948843, -0.36754664039982721, 0.64326753390430735, -0.24917063867041553, -0.039540586335773169, 0.14567847379973992, 0.065981740018920196, -0.055644084876628218, -0.07712597645572139, -0.00073674462317611055, 0.015701976416950342, -0.032298308999268784, 0.060154323470106401, -0.12792055300624763, 0.058681894939637193, -0.022172258797336572, 0.105971385474807, -0.037749743592242278, -0.053672308552617946, -0.12615835751184992, -0.059356927461923663, 0.012406017329547145, 0.068036947599653702, 0.017107991149299284, -0.041008154934057878, -0.13447215443394772, -0.26816260026693878, 0.18368617361305564, 0.46894237369717728, -0.62872636200456533, 0.60686918965331993, -0.15113295529591578, 0.036743730082780514, 1.463608458760923, 0.12904495334293731, -0.074417004563971351, -0.62003762386212891, 0.017408469796284774, 0.1272883333159911, -0.094937931062917147, -0.057791633379354237, 0.037154193600070003, 0.071495661604358593, -0.010724993842566222, -0.14811752790953939, 0.067869387966970118, -0.094974334151300438, 0.31269363662275046, 0.01610138969469304, 0.011271546890921311, -0.0416046739825933, -0.072156922858987255, -0.050238396740841143, -0.013143422355014638, 0.17181320075266959, -0.00078645201341033847, -0.2587885502662679, 0.0028564673365731054, 0.26469201284371935, -0.12782476119556443, -0.59904899563122194, 1.130668752319608, 0.4201199738298067, 1.5043263157657745, 1.0547694551235969, -1.1141651843864939, 0.90050578840564954, -0.50203282214727829, -0.35825626720186354, -0.34045699686317654, 0.034526357222664658, 0.16469615783949973, -0.10773227995476188, -0.020438609938140839, 0.15231382612170388, 0.0040452326400209297, -0.067443262257115694, -0.120243611846639, 0.072438990225412794, -0.27284169211913811, 0.31416612358708496, 0.23288712244734694, 0.17097210848547523, -0.068392282535087695, -0.1884297381053561, 0.026792869524674363, 0.068621242214500999, -0.028891896132398506, 0.01346687181869554, 0.18273076418691644, -0.039027219909814823, -0.68303147161529132, 0.28364033101911773, 0.20446853801739462, 1.3830149751777017, 1.3682011726001495, 1.0314907737559074, -0.55787436167296611, -0.99998707389668362, 0.11752989424299397, -0.85317721061416762, -0.39240115086507799, 0.26946209593128989, 0.13057930804766765, -0.0048298736467919578, -0.0066491170121302217, -0.023829771073630532, -0.072899207479286424, -0.29873174456544577, 0.027468417557455698, -0.26817287178186705, 0.21489820671404794, 0.048277840380711166, 0.23588030048916517, -0.0035092112107956196, -0.076854124253010928, 0.057907844320372041, -0.011517786678353752, 0.045146091846170348, -0.2624959582084973, -0.26585764990704652, 0.54510315877084026, 0.23155959034339049, -0.44086751164178861, -0.68911282851752897, 0.75019268688655205, 1.6899938281650098, 1.2795505844643045, 1.1758121586434311, -0.068510051090992494, 0.24494470763482898, -0.13955938857309558, 0.26258387187077409, -0.31004041285864437, -0.060946718066343622, 0.20150153854805294, -0.21163882649779717, -0.23457709892354675, 0.14508578389537688, -0.22705801052414679, -0.2857183558836735, -0.19596817846267664, 0.13015393203001066, -0.32999646269142935, -0.19528135326362211, 0.36806933922229168, 0.044374683774465004, -0.17789090203786717, -0.13954351571969323, 0.24064979253244634, 0.047498243759330878, -0.33137912963317673, 0.19951473048424839, 0.64027404819684597, 0.25055297311154973, 0.13414323846201037, 1.4561178571660989, 0.50660029824831798, 0.80695903119669876], "height": 32, "width": 32, "top": {"real": [17750.107020847583, 6210.8656159662787, 10017.081922566327, 3457.5995074393513, 265.850218137708, -70.207684810343054, -8.882891147089472, 24.589756503786479, -11.140592103834141, -1.46746599378154, -0.34121813437428317, 1.0812077419156148, 1.7163290532419633, -4.5666146304635689, -2.6846394014203829, -2.2738643666223468, 1.917575640981823, -2.2738643666223641, -2.6846394014204122, -4.5666146304635395, 1.7163290532419744, 1.0812077419156028, -0.34121813437427356, -1.4674659937815784, -11.140592103834141, 24.589756503786372, -8.8828911470896639, -70.20768481034348, 265.8502181377076, 3457.5995074393486, 10017.081922566325, 6210.8656159662851, 23430.31298691556, -4993.9863865787011, -867.92707841112326, 991.9702295167051, 152.49743471969379, -30.096228916888641, 45.849661798659078, -31.467588946689009, 16.960718546454469, 4.334366206560186, -0.42583907131000093, 0.47860527443285728, -1.8738744001784808, 0.5336707597630499, -3.8841941455247579, -0.75407824565303971, 0.55147195392985549, -0.79345242739339283, -5.9026769793174889, -1.384293215600769, -4.1447942145798233, -2.9130522743117342, -0.87120822186396762, -1.7340023689981476, 8.0221119849442548, -9.1034799758133218, 67.038874839272566, 44.112472832699858, 441.79945796279685, 3245.5044122716786, 3861.5097933424754, -5655.7687421695537, -15889.920855591003, -2792.0170209163471, 3795.2577126849956, 553.88440852995757, -85.905664770254234, 195.26564512659746, 24.791859336013662, 19.637521614531401, -6.1680089153590449, -5.0872002952886746, -0.21502707506361318, 1.4832779566036471, 1.4444541156654906, -2.278921340791467, 0.30255454236990775, -2.3473646939882187, -0.02820677859184775, 1.2126049622480428, -0.78557937342030726, -2.9245439997897638, 1.236962081731878, 1.1827041713801927, -1.6114665304853286, -3.5864367039316236, -14.698165954413065, 20.29282209316159, 43.732891706759197, 111.68572777077691, -209.48016621032312, -187.12585183373633, 2586.3148393820152, 1688.0815183011628, 4748.2203910254093, 1775.7319020900284, 965.53459113591498, -592.89741380746352, 99.787886354888371, 95.459765036004825, 59.296635518443523, -7.6987106331430111, -0.0036180413118668542, -0.43290786252066471, -1.598202682681902, 0.11359872229615781, -0.47654646487314006, 0.052920121324431191, -1.1931569571302629, 1.6263047283546588, 1.1208282513608689, -1.916766911729648, -1.3790558562903064, -0.15528235781115707, 0.33989539819890602, -1.1170639390757935, -0.54019671791116586, 2.4039660385463359, 7.3342674422729397, -18.965458306286095, 0.037731231015075362, 5.7888823722245277, -226.40133474887324, -362.07505408372458, 1068.1182163210274, 1839.5542246985658, 1536.2207931138801, 1719.2247320855465, 351.77395499971544, -218.00810259302051, -154.06814929171503, 76.932404651951941, 11.83330919947551, 3.0799843602247936, 2.1514657945922595, -2.1600173905506583, -0.81329272919310069, -0.057640935991259419, 0.81743781787660708, 0.47007834357539929, 0.82578474649026179, -0.485121980563267, -0.44118347877967812, 0.85372587191033056, -0.96505091801449949, -2.5001329354507269, -0.28227610008090631, 1.5082121759974054, 0.73323799037869442, 0.47326064521443867, -2.2071915479661444, 2.1017967421924912, -14.788373732218277, -10.376064867674437, -110.67917899227207, -400.67251265606825, 13.375377575225066, 2228.271084047331, 1272.0006323499422, 485.30359922269918, -150.18264185504094, -215.33992676901764, -8.8694467345951651, 40.216044199991913, 0.62739683840663496, -1.763160286154926, 0.88761506214793773, 2.2829883187502253, -0.37542737915458396, -0.082924323502338942, -0.2690018095258665, 0.066494953017985289, -1.2937095742683771, 0.90148019848405447, 1.049315066873844, -1.5500155662664761, -1.5096304544124948, -0.76725462527686761, -0.45464639460382006, 0.03503878860161394, 0.85393872935961013, 0.89172763012310696, -0.12413241898971583, -7.4057881467564117, -5.5362761946156125, 1.231534306746803, 18.635135255424384, 26.03667534143711, -87.772888824715437, -225.72012452523001, 395.63478219787083, 378.71701677039351, 36.703056312438811, -91.050394397947159, -3.4611377608751717, 16.691588629055683, -0.030826600791664327, -3.1969308796412692, 1.3816292236713215, 0.42488100600164197, 0.084713763632908196, -0.28535803119354425, 0.0058483120842748731, -0.72249565507011926, -0.80262162213105104, -0.11947358836291604, 0.14251583505573939, -0.26639764768858409, -0.59599833623749066, -0.56289480519068613, -0.092201911820288446, 0.77223819072116529, 0.55522491064190738, -0.14411590791637013, -2.1806910872492855, 1.0588352659849944, -1.722617263430356, -9.0167440767821265, -38.483896322518888, -22.599080819691828, 25.541139705127691, 375.57983717352784, 181.47383294778024, 149.67885098073037, -4.1008782517976057, -3.7383475143657869, 18.721866312633942, -1.1602382001305473, -5.8391540939420112, -0.21088907624048864, -0.29870055099180226, 0.95331837446181378, 0.060424395643205529, -0.42858353450158043, -0.37036207729837234, -0.30369644506457261, -0.75652176347658984, -0.44545713631522388, 0.71326845215283508, 0.071761808928956311, -0.63829698193917794, -0.45235505563855871, -0.080159340308425753, -0.15881914095274483, 0.37773826228539636, -0.097086363313521495, -0.86706044290909523, -1.3342582973973045, -0.61792777020441481, 0.16957438507140327, 10.565905071599056, 15.380533375221102, 10.500239194747859, 19.996280010030237, 18.60272375866586, 4.0348314717803326, 11.168149094486143, 14.395513359675057, -3.576502394652771, -3.8760628092228431, 2.0358977627782506, -1.6580642648165547, -0.13166485139511078, 0.2591565726162201, -0.22701969228044258, -0.29312645623416966, 0.099969472199353857, -0.39101661164543228, -0.042546772814251566, 0.29433076927773894, -0.50935384874181677, 0.090487726861141621, -0.092143985882572388, -0.58253529440268437, -0.41671432281001702, 0.14644815319126417, 0.2723500443275419, -0.039709576626662156, -0.41013369223337515, 1.1756350920235048, 1.5259648698081887, -4.4516278662013118, -8.128003687892722, 9.6041080205516938, 20.813833475064627, 12.963050463991683, 7.8870012209429445, 15.407970089260955, 5.3783096889109112, -3.1350030536179672, 1.9101786820520572, 1.6649545288728531, -2.1421648847872561, 0.35230920085802159, 0.37729718445187704, 0.020823929394603979, 0.087139744957248078, -0.10976037032555666, -0.56986899401739111, -0.44020908152219312, 0.69190564661152409, 0.20725962387572397, 0.64042787368671816, 0.71867283099896739, 0.16183428074791173, -0.17223426808716463, -0.17676233483878773, -0.27594664738318686, 0.095238357444986099, 0.020726971935864241, -0.11463597101365795, -0.32333311610982368, 1.2888258236383847, 3.0237538834517612, -0.12189842989060286, -4.5002056479068653, -2.8307120360813536, 9.0325055742836575, -5.0836871456416608, -6.4226783361185662, -2.3832064029645541, 2.1204380507892151, -2.1797923249754283, -2.1316882770768921, 1.4364513793862836, 0.82847417311036753, -0.54705107713687473, -0.053118808001263999, 0.10349330090189141, -0.027586170457780668, -0.27866115184949369, -0.4744187891270259, 0.32835706009268834, 1.8712198771790323, 0.44937016780231559, 0.8488760221500451, 0.35191803530681381, 0.28758243475250972, -0.6426201464805843, -0.40597353100929789, -0.22244529364246871, -0.071869502235051647, 0.33021466122988641, 0.24942995069051274, -0.5214330526633183, -0.093662554700336673, 1.1233733739102922, 1.9003965613191238, 0.07120934753760759, -8.6549236119446178, -1.8427620371931031, -0.52295775466804406, 3.4092952720370122, -0.65003177967723336, -0.1840159964371442, 1.8831870902689825, 0.7983111628921199, -0.39925172982701851, 0.051205177403033819, 0.2598923527237304, -0.18824332097783142, 0.13750859145926242, 0.78226830313090512, -1.2572785001190825, 1.3355363328556911, 1.2220896356262305, 1.6491421999762639, 1.7622421170936717, 0.96487439834416744, 0.79128381470112286, -0.26979590260649117, -0.37236776211072153, -0.65318812250908376, -0.13360581679076858, -0.1817007191765827, 0.4244891020544192, 1.0695325895656689, -0.49200291489349485, -0.59959066580988751, -2.4610304070506381, -1.7528842523917616, 5.4092974592427554, 11.628502736704702, 13.318871722095572, 5.3844201289172418, 0.12839725172390623, -0.91462159985003533, -0.4207633568928546, 0.73289618436063231, 0.98164545606019249, -0.31879685258307294, -0.45467275635234927, 0.23929181220408463, 0.73553732103708702, -0.78050285180289647, -0.20614377250205779, -0.66147354811396541, 0.84722544756444751, 3.1542100241342745, -1.0454812204468338, 0.49112272834774079, 0.89780094097137775, -0.80686344960242362, 0.26166207514350009, 0.34234964401672252, -0.27361449647202374, 0.078400343257288022, 0.27130715748636108, -0.26706243773596255, 0.92879560872659372, -1.3686907450256593, 0.37153092475944227, -0.0077060915391855903, -2.1487270106054996, 8.2423115107991176, 10.211121947580189, 11.004080199445575, 5.512476255300478, 0.43541395104991965, 1.3138259234516578, 0.47697687525002369, -0.37437690637871951, 0.49170325146724819, 0.53092933204425685, 0.78977231856458541, 0.054935970034302541, 1.0907299238052364, -1.4537313504920895, 1.6637415256529431, 2.3271742206176285, 1.6752406948773604, 6.0227778178364675, -2.5693140331095292, -1.3449083811022362, -0.063540759326359386, 1.2007479971921078, 0.26947504329539196, -0.043317616642408706, -0.090092404474960294, -0.56149356452164179, -0.29757479536733583, -0.82531287850485402, 0.52880973840083989, -0.51042849628299192, 1.1866854822445434, 7.7130480762288167, 17.626109919920186, 26.29568713002228, 9.1514979514586194, -1.521929375229722, 0.85364359123771261, -0.365663824522519, -1.1590870007863963, 0.48082630002696519, 0.93059067445638155, 1.1024013035834523, 0.63841829574218301, 1.5659590764611497, 0.20674310541385973, 1.0081259505833966, 1.4865008399227626, -1.6031905208728288, 5.7718835709767413, 0.2720344299284404, 3.2411570780563994, -1.0481514144590243, 2.2338214812745694, 3.1628749936702945, 1.7743358086362808, -0.03099281849361625, -0.41442882712954171, -0.31459130661253104, -1.7323756021672925, 0.19363530105298493, 0.61123212270521721, 4.8260404786904152, 6.7814469674820135, 4.974801806376985, 19.935738411546794, 15.127019575257112, 16.951752765718286, 6.976320734749117, 0.83204582564536733, -0.22090351652873133, -0.48187393778382737, -0.72216259413318939, 0.68337514879437744, 1.4934027691778771, 1.3836806937153638, -0.089108362899698895, 0.57910533764344185, 3.1507795425198797, 1.9139554692796912, 4.1423990225960203, -5.0893580330573318, 4.6545320074577088, -1.3079026033800338, 1.2583901568403451, 1.3087920196200225, 1.8018391908724931, 1.3933980798910508, 0.67604933114803067, -0.49475104816844406, -1.4152366315362725, -0.64580662533466104, -1.4537653735214031, 3.1014323943375786, 7.6843087454063586, 10.909142678924193, 12.359496229531475, 15.280082473470735, 24.669023160454167, 12.739042274822818, 1.7204760023261643, 0.52929508548715176, 2.1482192005482723, -1.481161898887601, -0.79404079710432474, 0.46540881956838565, 0.92624711854277975, 1.0380549761479756, 2.3168267428989626, 1.5788387366050483, -0.83766970523004924, 4.7505720502223729, -2.6570294115495297, 6.7612131323955511, -2.6570294115495336, 4.7505720502223783, -0.83766970523005702, 1.5788387366050476, 2.3168267428989657, 1.0380549761479752, 0.9262471185427773, 0.46540881956838565, -0.79404079710432862, -1.4811618988876001, 2.148219200548279, 0.52929508548715154, 1.7204760023261518, 12.739042274822809, 24.669023160454188, 19.935738411547018, 12.35949622953156, 10.909142678924129, 7.6843087454063417, 3.101432394337563, -1.4537653735213987, -0.64580662533467093, -1.4152366315362839, -0.49475104816844562, 0.67604933114803401, 1.3933980798910552, 1.8018391908724987, 1.3087920196200247, 1.2583901568403484, -1.3079026033800301, 4.6545320074577061, -5.0893580330573203, 4.1423990225960088, 1.913955469279683, 3.1507795425198943, 0.57910533764344618, -0.089108362899694094, 1.3836806937153729, 1.4934027691778826, 0.68337514879437378, -0.72216259413318618, -0.4818739377838111, -0.22090351652873805, 0.83204582564534302, 6.976320734749093, 16.951752765718314, 15.127019575257133, 17.626109919920285, 4.9748018063769956, 6.7814469674819922, 4.8260404786903921, 0.61123212270520444, 0.19363530105297699, -1.7323756021672947, -0.31459130661253587, -0.41442882712954437, -0.030992818493609464, 1.7743358086362877, 3.162874993670298, 2.2338214812745694, -1.0481514144590143, 3.241157078056395, 0.27203442992843363, 5.7718835709767413, -1.6031905208728274, 1.4865008399227673, 1.0081259505833953, 0.20674310541386615, 1.5659590764611582, 0.63841829574219022, 1.1024013035834526, 0.93059067445638244, 0.48082630002696636, -1.1590870007863949, -0.36566382452250978, 0.85364359123770939, -1.5219293752297598, 9.1514979514585963, 26.295687130022237, 8.2423115107992349, 7.7130480762288673, 1.1866854822445243, -0.51042849628302267, 0.52880973840082446, -0.82531287850485058, -0.297574795367338, -0.56149356452165111, -0.090092404474959795, -0.043317616642408116, 0.26947504329539745, 1.2007479971921178, -0.063540759326354057, -1.3449083811022313, -2.5693140331095257, 6.0227778178364719, 1.675240694877361, 2.3271742206176271, 1.6637415256529449, -1.4537313504920832, 1.0907299238052377, 0.054935970034312817, 0.78977231856459063, 0.53092933204426229, 0.49170325146725052, -0.37437690637871607, 0.4769768752500283, 1.3138259234516545, 0.43541395104990577, 5.5124762553004887, 11.004080199445557, 10.211121947580168, 11.628502736704604, -2.1487270106054663, -0.0077060915391693741, 0.37153092475944555, -1.3686907450256616, 0.92879560872659006, -0.26706243773595856, 0.27130715748636525, 0.078400343257288438, -0.27361449647201985, 0.34234964401672396, 0.26166207514350365, -0.80686344960242218, 0.8978009409713853, 0.49112272834772974, -1.045481220446846, 3.1542100241342701, 0.84722544756444151, -0.66147354811395898, -0.20614377250205829, -0.7805028518028938, 0.73553732103708935, 0.23929181220408727, -0.45467275635235105, -0.31879685258307255, 0.98164545606019549, 0.73289618436063131, -0.42076335689285432, -0.91462159985003766, 0.12839725172388108, 5.3844201289172204, 13.318871722095585, -1.8427620371929223, 5.4092974592426515, -1.7528842523917609, -2.4610304070506088, -0.59959066580987819, -0.49200291489348996, 1.0695325895656664, 0.42448910205441354, -0.18170071917658262, -0.13360581679076522, -0.65318812250908243, -0.3723677621107227, -0.26979590260649017, 0.7912838147011273, 0.96487439834416677, 1.7622421170936722, 1.6491421999762705, 1.2220896356262196, 1.3355363328556904, -1.2572785001190749, 0.78226830313090379, 0.13750859145926628, -0.18824332097783478, 0.25989235272372874, 0.051205177403034013, -0.39925172982701423, 0.79831116289212645, 1.8831870902689678, -0.18401599643714045, -0.65003177967722925, 3.4092952720370082, -0.52295775466808114, -5.0836871456417914, -8.654923611944545, 0.071209347537571008, 1.9003965613191072, 1.1233733739103013, -0.093662554700343362, -0.52143305266331286, 0.24942995069051838, 0.33021466122988513, -0.071869502235049398, -0.22244529364246549, -0.40597353100929245, -0.64262014648058341, 0.28758243475251449, 0.35191803530680799, 0.84887602215004632, 0.44937016780231587, 1.8712198771790289, 0.32835706009269156, -0.47441878912702484, -0.27866115184949264, -0.027586170457779294, 0.1034933009018901, -0.053118808001266206, -0.54705107713687218, 0.82847417311037153, 1.4364513793862805, -2.1316882770768819, -2.1797923249754287, 2.1204380507892009, -2.3832064029645679, -6.4226783361184081, 7.8870012209433504, 9.0325055742834763, -2.8307120360814029, -4.5002056479068191, -0.12189842989059124, 3.0237538834517572, 1.2888258236383801, -0.32333311610982529, -0.11463597101365604, 0.020726971935865871, 0.09523835744498739, -0.27594664738318975, -0.17676233483878293, -0.17223426808716019, 0.16183428074791517, 0.71867283099897139, 0.64042787368672205, 0.20725962387572536, 0.69190564661152509, -0.44020908152219435, -0.56986899401739244, -0.10976037032555588, 0.087139744957248716, 0.020823929394600361, 0.37729718445187588, 0.35230920085802736, -2.142164884787245, 1.6649545288728365, 1.9101786820520659, -3.1350030536179658, 5.3783096889108455, 15.40797008926083, 18.60272375866586, 12.963050463991696, 20.813833475064644, 9.604108020551676, -8.1280036878927362, -4.4516278662013278, 1.5259648698081876, 1.1756350920235052, -0.41013369223337515, -0.039709576626662003, 0.27235004432754167, 0.14644815319126442, -0.41671432281001886, -0.58253529440268281, -0.092143985882572915, 0.090487726861142509, -0.50935384874181677, 0.29433076927773738, -0.042546772814252246, -0.39101661164543189, 0.09996947219935487, -0.29312645623417033, -0.22701969228044291, 0.2591565726162216, -0.13166485139511078, -1.6580642648165524, 2.0358977627782484, -3.8760628092228537, -3.5765023946527563, 14.395513359675084, 11.168149094486147, 4.034831471780354, 181.47383294778047, 19.996280010029963, 10.50023919474779, 15.38053337522109, 10.565905071599067, 0.16957438507140921, -0.6179277702044097, -1.3342582973973056, -0.86706044290909146, -0.097086363313522245, 0.37773826228539636, -0.1588191409527461, -0.080159340308420923, -0.45235505563855616, -0.63829698193917661, 0.071761808928958337, 0.71326845215283419, -0.44545713631521988, -0.75652176347658784, -0.30369644506457882, -0.37036207729837373, -0.42858353450157866, 0.060424395643203697, 0.953318374461814, -0.29870055099180354, -0.21088907624048941, -5.8391540939419864, -1.1602382001305538, 18.721866312633882, -3.7383475143657954, -4.100878251797706, 149.67885098073012, 395.63478219787089, 375.57983717352744, 25.541139705127598, -22.599080819691835, -38.483896322518888, -9.0167440767821709, -1.7226172634303247, 1.0588352659849967, -2.1806910872492873, -0.14411590791637696, 0.55522491064190693, 0.77223819072116739, -0.092201911820284366, -0.56289480519067914, -0.59599833623749254, -0.26639764768858487, 0.14251583505573989, -0.11947358836291141, -0.80262162213105359, -0.72249565507012325, 0.0058483120842701027, -0.28535803119354936, 0.084713763632907418, 0.42488100600164375, 1.3816292236713219, -3.1969308796412634, -0.030826600791668796, 16.691588629055648, -3.4611377608751566, -91.050394397947187, 36.703056312438633, 378.71701677039351, 1272.0006323499422, -225.72012452523026, -87.772888824715139, 26.036675341437149, 18.635135255424501, 1.2315343067468421, -5.536276194615616, -7.4057881467564011, -0.12413241898971436, 0.89172763012310496, 0.8539387293596038, 0.035038788601613982, -0.4546463946038164, -0.76725462527685828, -1.509630454412483, -1.550015566266479, 1.0493150668738473, 0.90148019848405436, -1.2937095742683813, 0.066494953017976297, -0.26900180952586789, -0.082924323502345257, -0.37542737915458746, 2.2829883187502267, 0.88761506214793962, -1.7631602861549227, 0.62739683840662275, 40.216044199991877, -8.8694467345952006, -215.33992676901772, -150.18264185504114, 485.3035992226977, 1536.2207931138814, 2228.2710840473319, 13.3753775752247, -400.67251265606865, -110.679178992272, -10.376064867674508, -14.788373732218197, 2.1017967421924983, -2.207191547966143, 0.47326064521441386, 0.73323799037869852, 1.5082121759973919, -0.28227610008090809, -2.5001329354507282, -0.96505091801449672, 0.8537258719103169, -0.44118347877968372, -0.48512198056327205, 0.82578474649025857, 0.47007834357539341, 0.81743781787659597, -0.057640935991271409, -0.81329272919311113, -2.1600173905506721, 2.1514657945922622, 3.0799843602248034, 11.833309199475522, 76.932404651952027, -154.06814929171483, -218.00810259302057, 351.77395499971459, 1719.2247320855445, 4748.2203910254084, 1839.554224698564, 1068.1182163210278, -362.07505408372486, -226.40133474887313, 5.7888823722244789, 0.037731231015098787, -18.965458306285971, 7.3342674422729388, 2.4039660385463657, -0.54019671791118873, -1.1170639390757879, 0.33989539819890108, -0.15528235781113153, -1.3790558562903272, -1.9167669117296613, 1.1208282513608707, 1.6263047283546224, -1.193156957130264, 0.052920121324427458, -0.4765464648731435, 0.11359872229612604, -1.5982026826818876, -0.43290786252068791, -0.0036180413118654109, -7.6987106331430244, 59.296635518443559, 95.459765036004427, 99.787886354888386, -592.89741380746432, 965.53459113591339, 1775.7319020900306, -15889.920855591006, 1688.0815183011607, 2586.3148393820165, -187.12585183373636, -209.48016621032366, 111.68572777077674, 43.732891706759332, 20.292822093161472, -14.698165954413049, -3.5864367039316574, -1.611466530485326, 1.1827041713801545, 1.2369620817318689, -2.9245439997897797, -0.78557937342029793, 1.2126049622479607, -0.028206778591846705, -2.3473646939882631, 0.30255454236988177, -2.278921340791416, 1.4444541156654738, 1.483277956603626, -0.21502707506361871, -5.0872002952886604, -6.168008915359052, 19.637521614531632, 24.791859336013527, 195.26564512659732, -85.905664770254006, 553.88440852995757, 3795.2577126849942, -2792.0170209163462, 23430.312986915553, -5655.7687421695537, 3861.5097933424781, 3245.5044122716772, 441.79945796279628, 44.112472832700512, 67.038874839272665, -9.1034799758128742, 8.0221119849442406, -1.7340023689979776, -0.87120822186400182, -2.9130522743116929, -4.1447942145798446, -1.3842932156007377, -5.9026769793175413, -0.7934524273933764, 0.55147195392985315, -0.75407824565312243, -3.8841941455247726, 0.53367075976302614, -1.8738744001784735, 0.47860527443281381, -0.42583907130996707, 4.3343662065600954, 16.960718546454476, -31.467588946689279, 45.849661798659248, -30.096228916889014, 152.4974347196931, 991.97022951670215, -867.92707841112428, -4993.9863865787029], "imag": [0.0, -2277.9356791272003, -4760.5440393641002, -3362.7502157108247, -452.6326365977277, 12.902525613472081, -66.324591493039264, 21.395810280639775, 12.049924797684376, -6.4322319301924828, -2.6401787430633603, -2.8941924141450355, -1.0996569736184965, -2.1837600734887777, 0.87308165169681873, -0.4143473704962265, 0.0, 0.41434737049617953, -0.87308165169672458, 2.1837600734887985, 1.0996569736184816, 2.8941924141450213, 2.6401787430632839, 6.4322319301924944, -12.049924797684376, -21.395810280639751, 66.32459149303935, -12.902525613472182, 452.63263659772764, 3362.7502157108197, 4760.5440393641011, 2277.9356791272016, -19170.834011440937, -3837.2504381898657, -1562.2865240696121, -2188.2624437144, -79.985389317630222, -65.73387671644744, -129.03232713044309, -21.574731283989859, 19.219741943874205, -1.3770831994436832, -4.6285618656089973, 1.9356332468609161, 1.914358953204174, -0.39274625271235863, -2.8755632420164114, 1.3910769799127469, 2.1983982122300691, -0.93402216187723952, 1.5955119590990243, 2.5332827335358816, 2.5722659267438073, -2.1433748844126024, 4.7051607105169868, 6.0715674792926295, -11.686157623491814, 7.736622407403881, 65.513717323045199, -68.939947660481394, 105.08267177765576, -524.55810593663, 266.59769699529215, -6565.2013915603111, -12998.804313286138, -7140.8743305075541, -1281.4742181751476, 387.93265499317204, 232.0789193763446, -67.213502175129548, -82.499903393484686, 23.742310304940581, 13.167070698799225, -1.2601921779485123, 0.22176027695648487, -0.82869028871129857, 0.81638586337482588, 0.030361957750051641, -1.8114765667849664, -0.33462283171345614, -1.4063404110660631, 1.8330278968089115, -0.19923279402973898, 2.6325944160953934, 0.74767454410312451, 0.33273215463055067, 0.1242120122414053, 0.13350548988021607, -6.7517210150420688, -24.893726268864828, 68.764375920932309, 203.58844824671789, -52.443377241039173, 589.84188198577237, 814.38538391702434, -3077.5993672243876, -9988.2725309741327, -5000.8757444384873, -213.86760970710961, -153.72085790515706, 376.50689706328353, 10.499004391497454, -22.259718007212538, -1.0587560944123571, 1.3367261976572533, -1.845627367813951, -0.50817475490747221, 2.6646257572641145, 0.72663987403826902, -1.4553261209412862, -1.7486114908592469, -2.2393579162674944, 1.7872556824974239, -0.4779279337995983, 0.90990468751900189, 0.56850457149088529, -0.042260514128558184, -2.0950938638350283, 0.37842412015856491, 2.7868839636562086, -7.1796038797667068, -2.6532766677526052, 42.569555354666804, 86.618323256686423, 262.60583525697274, -570.34935164465662, 953.3853188584327, -2608.4519239039555, 423.76919790180068, -777.49072200787271, -730.15551768721184, 267.77827954485849, 48.782690015655945, -52.084914641107339, -0.26732768536918228, 18.791248861451912, 0.034376983736590996, -4.7733525107569852, 0.2450889317389604, 0.69551673309505335, 0.74689297610787508, 0.36254455317814038, -0.082864627703290866, -0.11088180406499534, -1.9145243520823481, 0.63809937787576865, -0.47609558693404908, 1.1704253870693357, 0.1035348526676573, -0.98268640942924379, -0.66403014974353547, 1.4462870038602533, 3.6812627646537175, -8.6847068298461885, -1.7026644231740631, 110.68919188818327, 26.998515460375977, -65.421023262373453, -744.09540667092062, -46.729307478653496, -1526.2181503116453, -735.50774046161519, 282.18880697804167, -182.37864683063907, -54.052681314235201, 39.603849315110104, 10.295701682078779, 2.359337802307917, -0.63461911007383953, -1.7124190510555728, -0.21593130161202514, 0.76755040332111413, 1.2882353738829533, 0.44968314290067118, 0.25989055470659483, -0.66713893962057369, 0.13682839189736165, -0.36883118795348507, 0.91230383136371929, -0.46996446240256329, 0.30219131214854422, -0.19558932994062075, 0.012615763849470061, 1.762420772813289, 1.9045345605049635, -3.7790359077733253, -11.964107143689581, 4.5083476182968525, 61.96781696120042, -254.89688572081204, 140.68826246910922, -45.053807917761794, 314.74785574475101, -8.8001261891015723, -360.31891091191073, -57.025448777424479, 44.579795546563595, -19.359200628613657, 3.6862817789376683, 8.9206630611283089, 0.18896973496668307, -1.0227323524081069, -0.33838743748909134, 0.43833208591156991, 0.0074294169071561673, 0.50446476014305897, 0.1890893708139402, 0.65133332546862077, -0.77483290182744535, -0.30779007494077709, -0.80427129683389309, 0.26011219704759059, 0.23461588343644721, -0.056507066939534729, -0.44513357712322738, 0.64667209976975049, 1.5545017016282721, -1.5250850436867627, -9.5917712473092696, 13.475211488788412, 28.837963587037802, -21.930976284520067, -337.61540934331555, -197.27075321520147, -65.634374404237917, -45.716174186409042, 38.688397244662028, -10.636065931319841, -36.620593610799475, 11.815798616251305, 9.0326984830007095, -3.0325028906240825, -0.075862266735019127, 0.19104942819406223, 0.073726425569811863, 0.18311714867084192, 0.63036999033226249, -0.098626184449280729, 0.095619359707605045, 0.13744024889930673, -0.097089152898782338, -0.81683568275166918, 0.54386217024143169, 0.041501479859297266, 0.43031399471588661, 0.25470104821283102, 0.17326636360277617, 0.46079094226119127, -0.16530865667454481, -0.86391702025516282, -4.9611285532463629, -12.372184270457062, 11.516126179313906, 3.2997425925449804, 2.0570987009733872, 24.878800155519915, 44.041788084316849, 28.446155418037641, -32.190550839656126, -17.692027714058376, 11.789513877445387, 1.9317197634824401, -3.4507560855810171, 0.36626836712779354, 0.48074766055651602, 0.18044316667269442, -0.28240974426973131, -0.16613612027343372, 0.029095718259237995, 0.24450075339721422, -0.091330331747513635, 0.097634295479075664, -0.36806371804963284, 0.16614591312540511, -0.77395352504544712, -0.3264657443238585, 0.015061212014132833, 0.29085100346092985, 0.047770712409502418, 0.14922819541222396, -0.39792121836056477, -0.1921281774085053, 0.83895281997413806, -1.5703737430868945, -8.4367427775736452, 5.6601916863792336, -5.1510032561702124, -22.050605310259861, -1.9854594697574779, -7.5311386138630718, 7.4148341093741337, 8.0952123464619365, -4.3629732153959058, -0.87617222540110651, 1.0539667118389069, -0.69495683349647086, -0.53597221218340763, 0.21612918483653182, 0.16753374785242167, -0.14587335963051168, 0.2984129896925935, 0.75720231383362635, 1.2725586605629424, -0.23788459440434945, -0.43858849762191893, -0.79801858694486538, -0.41846754429723099, -0.46161406526582383, 0.58294801786464678, -0.078939183973068427, 0.31479155143425391, 0.31425797573231379, -0.084400039832661436, -0.69288180199641103, -0.21778449617622889, -0.19533791786522492, -0.22665765093841067, -0.31956792613405932, 6.3352095159571435, 13.304182061875538, 9.0685889178215753, 13.820343051841526, -2.9904131431626517, -6.4644843028741459, 1.4950174056035006, 0.22841081726546483, -1.0443697855595202, -0.36648156701751267, 0.48825453192442753, 0.32511669967392476, -0.74952192547288132, -0.32406742573949188, -0.14589390394899102, 0.81615985313544603, 0.21110858701983537, -0.62135646441400272, -0.27503339195756299, 0.23916839371037824, -1.0440547633891395, -0.40792084439497517, 0.55610134656922072, 0.37457806876122546, 0.17778944632276653, -0.069642667350154328, -0.39526560004564598, 0.69822150614317735, 0.740778974977921, -0.31290252683747921, -2.0096273906801638, -0.75165898775917361, -0.15987777595408992, -2.5516179078608778, -8.9643314564796608, -15.134863386021781, -2.1073345817546003, 0.61887776540407591, -3.0206322635570779, -0.13950893398737912, 0.63280527166495781, -0.16318694006603662, 0.06410706438489891, 0.11411070867346804, -0.2886162817684455, -0.35613651800395313, 0.12924440993745664, 0.38077834891929796, 0.82374133978448782, 0.42592408743381815, -1.4993887570975311, 1.2113263922466315, -0.61651842130949264, -0.92820589700907985, 1.2123284995709924, -0.37394823077908607, -0.062695571319925397, 0.28532586796592635, -0.016166881608109255, -1.1132083022635739, 0.86546596809253507, 2.0760623026361933, 0.51322827606545562, -2.2491343600113889, -2.0374388890600263, 1.1231676638159473, 0.31214242438772172, 2.2815521755579042, -5.3082712246609329, -6.7280927719717081, 0.71404381047788856, 1.0348891792697787, -0.062580928735681385, 0.11553928672311624, 0.19710411955257187, -0.22253376417909151, -0.05143415191355815, -0.61738709055352659, -0.26515618204121805, 1.3879170617746586, 1.9147895569711311, -2.7981144693643607, 1.6351053618238791, 1.2876141106871726, -0.53839815046157202, -0.81616813855627257, -0.55773229035800009, -0.16310476776122179, -1.4828287822897712, 0.19857441865721279, -0.22253902629935005, 0.76149089771667944, 0.38423492006819204, 0.13633825788919049, -0.40617531895308634, -1.9006670978622686, -5.6055295794952666, -3.5201069577585091, -0.70565394755327504, -4.8233879396582013, -3.7118525914264513, 0.87639764763224848, -3.9705679716456896, -0.3066516936670704, 1.2925955094882555, 0.98057929368147423, -0.5185509231518588, 0.068504647941653091, -0.50802141302695303, -0.65025043431383311, 1.6393007306999561, -0.046634622615140439, -0.42095485749155304, 2.8628962346767608, -0.87664183209871016, -0.061380249620325719, -0.67583720185830587, -2.165804182360429, -2.2334105499018988, -1.7315960703588726, 0.023607096501577673, -0.72578349898044647, 0.49340703388266716, -0.17688316963519096, 0.91231104952944475, 1.0401382704665323, 0.40638239361664558, -3.5528586670065754, -3.2389924588328527, -3.336337544628424, -3.3053285670589143, 0.42529364953930032, 1.2623512061316915, -7.9337267372836493, -1.0910503490681764, 0.30591237262721482, 0.79049013658839029, 0.15779582936744363, 0.35530534658354934, -1.0136463777621887, -0.43596379336607172, 1.3766560550226186, 1.2643786263280588, 0.081112249920068616, 0.30101965208538256, -2.9649644331404845, 3.940601481283172, 1.2809925361642973, -2.3740821954043603, -1.8568139214134618, -2.2875531209700912, -2.0068530505793203, -1.6161905886738603, -0.069970559948539499, -0.68452644609555957, 1.1180256373411306, 1.0386505011587546, -0.45802414484767806, -1.8827293053017495, -1.1452872829873149, -9.8282380345909921, -4.8375314158562777, 0.035534088492687292, 5.8735645683280717, -7.2148282372822923, -1.9024855757814658, -3.6729219824305321, -0.04721742712852893, 0.80045523566507781, 0.91856151213872683, 0.18365173124028911, 1.0527130168554166, 0.35231243394437906, -0.96832866520995176, 0.38866324603453256, 1.1024459216780036, -1.6264163010988006, 5.9086248051519128, 1.1522588148293589, -4.0123769411888297, -1.3409560614230069, -2.2450482885496141, -1.484164394238348, 0.58569229342098317, 0.035646451001070931, -1.3588202093923047, 0.006860270440306241, -0.84539036438792836, 0.31580363771161246, -0.13161779536446233, -0.34549511895795371, -1.1291296924180168, -2.1947930228924113, -14.643424663744323, 0.0, 7.8456512467946364, 11.843681310787776, -4.1545820919682566, 0.098834485797376734, 1.2191537903053737, 0.14782839419733967, -0.21707569483499198, 1.3287726303022269, 0.012891904979339022, 0.146292284007916, 0.70147269041246085, 1.7613861146868823, 0.97884915683286033, 1.5860078469473597, 0.15814907094033309, 0.0, -0.158149070940315, -1.5860078469473551, -0.978849156832858, -1.7613861146868832, -0.70147269041248062, -0.14629228400792066, -0.012891904979343359, -1.3287726303022269, 0.21707569483499028, -0.14782839419734384, -1.2191537903053777, -0.098834485797375804, 4.1545820919682752, -11.843681310787789, -7.8456512467946329, -0.035534088492520481, 14.643424663744339, 2.194793022892366, 1.1291296924180338, 0.34549511895794383, 0.13161779536445045, -0.31580363771161418, 0.84539036438793247, -0.0068602704403050632, 1.3588202093923036, -0.035646451001076773, -0.58569229342099216, 1.484164394238344, 2.2450482885496172, 1.3409560614230207, 4.0123769411888466, -1.1522588148293609, -5.9086248051519057, 1.6264163010987922, -1.102445921678016, -0.38866324603453178, 0.96832866520995076, -0.35231243394438311, -1.0527130168554157, -0.18365173124028866, -0.91856151213871651, -0.80045523566507271, 0.047217427128521561, 3.6729219824305099, 1.9024855757814958, 7.21482823728231, -5.8735645683280371, 3.3053285670587775, 4.8375314158562217, 9.828238034591017, 1.1452872829873084, 1.8827293053017478, 0.45802414484767828, -1.0386505011587623, -1.1180256373411397, 0.68452644609555668, 0.069970559948536071, 1.6161905886738546, 2.0068530505793158, 2.2875531209700912, 1.856813921413464, 2.3740821954043709, -1.2809925361643011, -3.9406014812831787, 2.9649644331405014, -0.30101965208537818, -0.081112249920068671, -1.2643786263280541, -1.3766560550226248, 0.43596379336607571, 1.0136463777621971, -0.35530534658355051, -0.15779582936744335, -0.79049013658838307, -0.30591237262721799, 1.0910503490681696, 7.9337267372836298, -1.2623512061316555, -0.42529364953934357, 0.70565394755329391, 3.336337544628484, 3.2389924588327594, 3.5528586670065589, -0.40638239361663953, -1.0401382704665338, -0.91231104952944642, 0.17688316963519082, -0.49340703388266682, 0.72578349898044092, -0.023607096501574151, 1.7315960703588795, 2.2334105499019046, 2.1658041823604322, 0.67583720185832141, 0.061380249620329064, 0.87664183209870872, -2.8628962346767408, 0.4209548574915572, 0.046634622615141327, -1.6393007306999556, 0.65025043431383445, 0.50802141302695369, -0.068504647941647845, 0.51855092315186113, -0.98057929368147057, -1.2925955094882546, 0.30665169366707518, 3.9705679716456634, -0.8763976476322699, 3.7118525914263776, 4.8233879396582111, -0.31214242438772705, 3.5201069577584692, 5.6055295794952924, 1.9006670978622411, 0.40617531895307485, -0.13633825788919066, -0.38423492006819598, -0.76149089771668665, 0.22253902629934941, -0.1985744186572119, 1.4828287822897714, 0.16310476776122626, 0.55773229035800354, 0.8161681385562749, 0.5383981504615758, -1.2876141106871739, -1.6351053618238793, 2.7981144693643794, -1.9147895569711246, -1.3879170617746619, 0.26515618204121727, 0.61738709055352903, 0.051434151913562459, 0.22253376417909698, -0.19710411955257243, -0.11553928672311804, 0.062580928735678887, -1.0348891792697743, -0.71404381047787879, 6.7280927719716743, 5.3082712246609018, -2.2815521755579335, 8.9643314564797052, -1.1231676638158536, 2.0374388890599802, 2.2491343600114058, -0.51322827606545429, -2.0760623026361911, -0.86546596809253695, 1.1132083022635748, 0.016166881608109234, -0.28532586796592802, 0.062695571319927382, 0.37394823077908801, -1.2123284995709924, 0.92820589700907918, 0.61651842130949663, -1.2113263922466326, 1.4993887570975342, -0.42592408743381316, -0.82374133978448039, -0.38077834891929335, -0.12924440993745251, 0.35613651800395341, 0.28861628176844567, -0.11411070867346547, -0.064107064384899673, 0.16318694006603501, -0.63280527166495915, 0.13950893398738348, 3.0206322635570557, -0.61887776540410167, 2.1073345817545266, 15.134863386021769, -9.0685889178216552, 2.5516179078607184, 0.15987777595415892, 0.75165898775916729, 2.0096273906801727, 0.31290252683747422, -0.74077897497792289, -0.69822150614317713, 0.39526560004564548, 0.069642667350159129, -0.1777894463227658, -0.37457806876122451, -0.55610134656922283, 0.40792084439497267, 1.0440547633891391, -0.23916839371037832, 0.2750333919575636, 0.62135646441400449, -0.21110858701983135, -0.81615985313544015, 0.14589390394899499, 0.32406742573949032, 0.74952192547288177, -0.32511669967392071, -0.48825453192442569, 0.36648156701751228, 1.0443697855595189, -0.22841081726546683, -1.4950174056034862, 6.4644843028741308, 2.9904131431626397, -13.820343051841599, 1.9854594697574315, -13.304182061875386, -6.3352095159572039, 0.3195679261341049, 0.22665765093840967, 0.19533791786523994, 0.21778449617622839, 0.69288180199640803, 0.084400039832664031, -0.31425797573231284, -0.31479155143425158, 0.078939183973069621, -0.58294801786464789, 0.46161406526582016, 0.41846754429722727, 0.79801858694486438, 0.43858849762191948, 0.23788459440435036, -1.2725586605629382, -0.75720231383362191, -0.29841298969258917, 0.14587335963051393, -0.16753374785242225, -0.21612918483653495, 0.53597221218340851, 0.69495683349647419, -1.0539667118389073, 0.87617222540110107, 4.3629732153958827, -8.0952123464619206, -7.414834109374171, 7.5311386138631651, -44.041788084316849, 22.050605310259897, 5.1510032561702142, -5.6601916863792514, 8.4367427775736488, 1.5703737430868991, -0.83895281997413862, 0.19212817740850727, 0.39792121836056477, -0.14922819541222082, -0.047770712409500753, -0.2908510034609289, -0.015061212014133111, 0.32646574432385927, 0.77395352504545112, -0.16614591312540627, 0.36806371804963284, -0.097634295479077288, 0.091330331747514912, -0.24450075339721231, -0.029095718259234932, 0.16613612027343472, 0.28240974426972948, -0.18044316667269469, -0.48074766055651602, -0.36626836712779753, 3.4507560855810189, -1.9317197634824488, -11.789513877445398, 17.692027714058376, 32.190550839656112, -28.446155418037584, 65.634374404237818, -24.878800155519698, -2.0570987009734387, -3.2997425925449106, -11.516126179313863, 12.372184270457085, 4.9611285532463585, 0.86391702025516592, 0.16530865667454706, -0.46079094226119116, -0.1732663636027687, -0.25470104821282824, -0.43031399471588622, -0.041501479859297648, -0.54386217024143224, 0.81683568275167029, 0.097089152898783726, -0.13744024889929929, -0.095619359707603865, 0.098626184449285684, -0.63036999033225893, -0.18311714867083492, -0.07372642556981146, -0.19104942819406445, 0.075862266735016198, 3.0325028906240856, -9.0326984830007238, -11.815798616251362, 36.620593610799446, 10.636065931319884, -38.68839724466217, 45.716174186409333, -314.74785574475044, 197.27075321520152, 337.61540934331566, 21.930976284520245, -28.837963587037731, -13.475211488788421, 9.5917712473092944, 1.5250850436867665, -1.5545017016282761, -0.64667209976974838, 0.44513357712322837, 0.056507066939540815, -0.23461588343644407, -0.26011219704759359, 0.8042712968338912, 0.30779007494077798, 0.77483290182744469, -0.65133332546861145, -0.18908937081392915, -0.50446476014305819, -0.0074294169071514489, -0.43833208591156614, 0.3383874374890965, 1.0227323524080993, -0.18896973496668346, -8.9206630611282982, -3.6862817789376785, 19.35920062861366, -44.579795546563581, 57.025448777424586, 360.31891091191056, 8.8001261891013822, 1526.2181503116453, 45.053807917762221, -140.68826246910882, 254.89688572081207, -61.967816961200398, -4.5083476182968329, 11.964107143689583, 3.7790359077733431, -1.9045345605049631, -1.7624207728132955, -0.01261576384946491, 0.19558932994062728, -0.30219131214854072, 0.4699644624025669, -0.91230383136372128, 0.36883118795348824, -0.13682839189736087, 0.66713893962058779, -0.25989055470659439, -0.44968314290067052, -1.2882353738829488, -0.76755040332110314, 0.21593130161202181, 1.7124190510555817, 0.6346191100738432, -2.3593378023079388, -10.295701682078779, -39.603849315110132, 54.052681314235315, 182.3786468306393, -282.18880697804133, 735.50774046161428, -423.76919790180091, 46.72930747865378, 744.09540667092074, 65.421023262373566, -26.998515460375824, -110.68919188818332, 1.7026644231740455, 8.6847068298461902, -3.6812627646537122, -1.4462870038602713, 0.66403014974352648, 0.98268640942926089, -0.10353485266764806, -1.1704253870693322, 0.47609558693405896, -0.63809937787576798, 1.9145243520823476, 0.11088180406502474, 0.082864627703299776, -0.36254455317814699, -0.74689297610786809, -0.69551673309504447, -0.24508893173895085, 4.773352510756971, -0.034376983736587929, -18.791248861451901, 0.26732768536914786, 52.084914641107339, -48.782690015656009, -267.77827954485792, 730.15551768721207, 777.49072200787191, 9988.2725309741272, 2608.4519239039569, -953.38531885843202, 570.34935164465708, -262.60583525697274, -86.61832325668658, -42.569555354666946, 2.6532766677526505, 7.1796038797667014, -2.7868839636562561, -0.37842412015855753, 2.0950938638350354, 0.042260514128576405, -0.56850457149086808, -0.90990468751900622, 0.4779279337996068, -1.7872556824974217, 2.239357916267509, 1.748611490859272, 1.4553261209412682, -0.72663987403827102, -2.6646257572640879, 0.50817475490745234, 1.8456273678139588, -1.3367261976572486, 1.0587560944122603, 22.259718007212488, -10.499004391497355, -376.50689706328382, 153.72085790515695, 213.86760970710961, 5000.8757444384837, 12998.804313286144, 3077.5993672243935, -814.38538391702389, -589.84188198577237, 52.443377241039045, -203.58844824671809, -68.764375920932238, 24.893726268864992, 6.7517210150420599, -0.13350548988021724, -0.12421201224142447, -0.33273215463053935, -0.74767454410310241, -2.6325944160953538, 0.19923279402974362, -1.8330278968089646, 1.4063404110660558, 0.33462283171345686, 1.8114765667849764, -0.030361957750053889, -0.81638586337482577, 0.82869028871127859, -0.22176027695649836, 1.260192177948489, -13.167070698799225, -23.742310304940538, 82.499903393484416, 67.213502175129648, -232.07891937634469, -387.93265499317204, 1281.4742181751474, 7140.8743305075477, 19170.83401144094, 6565.2013915603166, -266.59769699529113, 524.55810593663034, -105.08267177765569, 68.939947660481323, -65.513717323045299, -7.7366224074036598, 11.686157623491809, -6.0715674792925807, -4.7051607105170206, 2.1433748844125784, -2.5722659267438033, -2.5332827335358727, -1.5955119590990279, 0.93402216187716958, -2.1983982122300714, -1.3910769799127845, 2.875563242016451, 0.39274625271232855, -1.9143589532041787, -1.9356332468609148, 4.6285618656089529, 1.3770831994437265, -19.219741943874194, 21.574731283989856, 129.03232713044289, 65.73387671644744, 79.985389317629867, 2188.2624437143977, 1562.286524069611, 3837.2504381898625]}};
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";var numeric= false?function(){}:exports;typeof global!="undefined"&&(global.numeric=numeric),numeric.version="1.2.6",numeric.bench=function(t,n){var r,i,s,o;typeof n=="undefined"&&(n=15),s=.5,r=new Date;for(;;){s*=2;for(o=s;o>3;o-=4)t(),t(),t(),t();while(o>0)t(),o--;i=new Date;if(i-r>n)break}for(o=s;o>3;o-=4)t(),t(),t(),t();while(o>0)t(),o--;return i=new Date,1e3*(3*s-1)/(i-r)},numeric._myIndexOf=function(t){var n=this.length,r;for(r=0;r<n;++r)if(this[r]===t)return r;return-1},numeric.myIndexOf=Array.prototype.indexOf?Array.prototype.indexOf:numeric._myIndexOf,numeric.Function=Function,numeric.precision=4,numeric.largeArray=50,numeric.prettyPrint=function(t){function n(e){if(e===0)return"0";if(isNaN(e))return"NaN";if(e<0)return"-"+n(-e);if(isFinite(e)){var t=Math.floor(Math.log(e)/Math.log(10)),r=e/Math.pow(10,t),i=r.toPrecision(numeric.precision);return parseFloat(i)===10&&(t++,r=1,i=r.toPrecision(numeric.precision)),parseFloat(i).toString()+"e"+t.toString()}return"Infinity"}function i(e){var t;if(typeof e=="undefined")return r.push(Array(numeric.precision+8).join(" ")),!1;if(typeof e=="string")return r.push('"'+e+'"'),!1;if(typeof e=="boolean")return r.push(e.toString()),!1;if(typeof e=="number"){var s=n(e),o=e.toPrecision(numeric.precision),u=parseFloat(e.toString()).toString(),a=[s,o,u,parseFloat(o).toString(),parseFloat(u).toString()];for(t=1;t<a.length;t++)a[t].length<s.length&&(s=a[t]);return r.push(Array(numeric.precision+8-s.length).join(" ")+s),!1}if(e===null)return r.push("null"),!1;if(typeof e=="function"){r.push(e.toString());var f=!1;for(t in e)e.hasOwnProperty(t)&&(f?r.push(",\n"):r.push("\n{"),f=!0,r.push(t),r.push(": \n"),i(e[t]));return f&&r.push("}\n"),!0}if(e instanceof Array){if(e.length>numeric.largeArray)return r.push("...Large Array..."),!0;var f=!1;r.push("[");for(t=0;t<e.length;t++)t>0&&(r.push(","),f&&r.push("\n ")),f=i(e[t]);return r.push("]"),!0}r.push("{");var f=!1;for(t in e)e.hasOwnProperty(t)&&(f&&r.push(",\n"),f=!0,r.push(t),r.push(": \n"),i(e[t]));return r.push("}"),!0}var r=[];return i(t),r.join("")},numeric.parseDate=function(t){function n(e){if(typeof e=="string")return Date.parse(e.replace(/-/g,"/"));if(e instanceof Array){var t=[],r;for(r=0;r<e.length;r++)t[r]=n(e[r]);return t}throw new Error("parseDate: parameter must be arrays of strings")}return n(t)},numeric.parseFloat=function(t){function n(e){if(typeof e=="string")return parseFloat(e);if(e instanceof Array){var t=[],r;for(r=0;r<e.length;r++)t[r]=n(e[r]);return t}throw new Error("parseFloat: parameter must be arrays of strings")}return n(t)},numeric.parseCSV=function(t){var n=t.split("\n"),r,i,s=[],o=/(([^'",]*)|('[^']*')|("[^"]*")),/g,u=/^\s*(([+-]?[0-9]+(\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\.[0-9]+)?(e[+-]?[0-9]+)?))\s*$/,a=function(e){return e.substr(0,e.length-1)},f=0;for(i=0;i<n.length;i++){var l=(n[i]+",").match(o),c;if(l.length>0){s[f]=[];for(r=0;r<l.length;r++)c=a(l[r]),u.test(c)?s[f][r]=parseFloat(c):s[f][r]=c;f++}}return s},numeric.toCSV=function(t){var n=numeric.dim(t),r,i,s,o,u,a;s=n[0],o=n[1],a=[];for(r=0;r<s;r++){u=[];for(i=0;i<s;i++)u[i]=t[r][i].toString();a[r]=u.join(", ")}return a.join("\n")+"\n"},numeric.getURL=function(t){var n=new XMLHttpRequest;return n.open("GET",t,!1),n.send(),n},numeric.imageURL=function(t){function n(e){var t=e.length,n,r,i,s,o,u,a,f,l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",c="";for(n=0;n<t;n+=3)r=e[n],i=e[n+1],s=e[n+2],o=r>>2,u=((r&3)<<4)+(i>>4),a=((i&15)<<2)+(s>>6),f=s&63,n+1>=t?a=f=64:n+2>=t&&(f=64),c+=l.charAt(o)+l.charAt(u)+l.charAt(a)+l.charAt(f);return c}function r(e,t,n){typeof t=="undefined"&&(t=0),typeof n=="undefined"&&(n=e.length);var r=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117],i=-1,s=0,o=e.length,u;for(u=t;u<n;u++)s=(i^e[u])&255,i=i>>>8^r[s];return i^-1}var i=t[0].length,s=t[0][0].length,o,u,a,f,l,c,h,p,d,v,m,g=[137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,s>>24&255,s>>16&255,s>>8&255,s&255,i>>24&255,i>>16&255,i>>8&255,i&255,8,2,0,0,0,-1,-2,-3,-4,-5,-6,-7,-8,73,68,65,84,8,29];m=r(g,12,29),g[29]=m>>24&255,g[30]=m>>16&255,g[31]=m>>8&255,g[32]=m&255,o=1,u=0;for(p=0;p<i;p++){p<i-1?g.push(0):g.push(1),c=3*s+1+(p===0)&255,h=3*s+1+(p===0)>>8&255,g.push(c),g.push(h),g.push(~c&255),g.push(~h&255),p===0&&g.push(0);for(d=0;d<s;d++)for(f=0;f<3;f++)c=t[f][p][d],c>255?c=255:c<0?c=0:c=Math.round(c),o=(o+c)%65521,u=(u+o)%65521,g.push(c);g.push(0)}return v=(u<<16)+o,g.push(v>>24&255),g.push(v>>16&255),g.push(v>>8&255),g.push(v&255),l=g.length-41,g[33]=l>>24&255,g[34]=l>>16&255,g[35]=l>>8&255,g[36]=l&255,m=r(g,37),g.push(m>>24&255),g.push(m>>16&255),g.push(m>>8&255),g.push(m&255),g.push(0),g.push(0),g.push(0),g.push(0),g.push(73),g.push(69),g.push(78),g.push(68),g.push(174),g.push(66),g.push(96),g.push(130),"data:image/png;base64,"+n(g)},numeric._dim=function(t){var n=[];while(typeof t=="object")n.push(t.length),t=t[0];return n},numeric.dim=function(t){var n,r;if(typeof t=="object")return n=t[0],typeof n=="object"?(r=n[0],typeof r=="object"?numeric._dim(t):[t.length,n.length]):[t.length];return[]},numeric.mapreduce=function(t,n){return Function("x","accum","_s","_k",'if(typeof accum === "undefined") accum = '+n+";\n"+'if(typeof x === "number") { var xi = x; '+t+"; return accum; }\n"+'if(typeof _s === "undefined") _s = numeric.dim(x);\n'+'if(typeof _k === "undefined") _k = 0;\n'+"var _n = _s[_k];\n"+"var i,xi;\n"+"if(_k < _s.length-1) {\n"+"    for(i=_n-1;i>=0;i--) {\n"+"        accum = arguments.callee(x[i],accum,_s,_k+1);\n"+"    }"+"    return accum;\n"+"}\n"+"for(i=_n-1;i>=1;i-=2) { \n"+"    xi = x[i];\n"+"    "+t+";\n"+"    xi = x[i-1];\n"+"    "+t+";\n"+"}\n"+"if(i === 0) {\n"+"    xi = x[i];\n"+"    "+t+"\n"+"}\n"+"return accum;")},numeric.mapreduce2=function(t,n){return Function("x","var n = x.length;\nvar i,xi;\n"+n+";\n"+"for(i=n-1;i!==-1;--i) { \n"+"    xi = x[i];\n"+"    "+t+";\n"+"}\n"+"return accum;")},numeric.same=function same(e,t){var n,r;if(e instanceof Array&&t instanceof Array){r=e.length;if(r!==t.length)return!1;for(n=0;n<r;n++){if(e[n]===t[n])continue;if(typeof e[n]!="object")return!1;if(!same(e[n],t[n]))return!1}return!0}return!1},numeric.rep=function(t,n,r){typeof r=="undefined"&&(r=0);var i=t[r],s=Array(i),o;if(r===t.length-1){for(o=i-2;o>=0;o-=2)s[o+1]=n,s[o]=n;return o===-1&&(s[0]=n),s}for(o=i-1;o>=0;o--)s[o]=numeric.rep(t,n,r+1);return s},numeric.dotMMsmall=function(t,n){var r,i,s,o,u,a,f,l,c,h,p,d,v,m;o=t.length,u=n.length,a=n[0].length,f=Array(o);for(r=o-1;r>=0;r--){l=Array(a),c=t[r];for(s=a-1;s>=0;s--){h=c[u-1]*n[u-1][s];for(i=u-2;i>=1;i-=2)p=i-1,h+=c[i]*n[i][s]+c[p]*n[p][s];i===0&&(h+=c[0]*n[0][s]),l[s]=h}f[r]=l}return f},numeric._getCol=function(t,n,r){var i=t.length,s;for(s=i-1;s>0;--s)r[s]=t[s][n],--s,r[s]=t[s][n];s===0&&(r[0]=t[0][n])},numeric.dotMMbig=function(t,n){var r=numeric._getCol,i=n.length,s=Array(i),o=t.length,u=n[0].length,a=new Array(o),f,l=numeric.dotVV,c,h,p,d;--i,--o;for(c=o;c!==-1;--c)a[c]=Array(u);--u;for(c=u;c!==-1;--c){r(n,c,s);for(h=o;h!==-1;--h)d=0,f=t[h],a[h][c]=l(f,s)}return a},numeric.dotMV=function(t,n){var r=t.length,i=n.length,s,o=Array(r),u=numeric.dotVV;for(s=r-1;s>=0;s--)o[s]=u(t[s],n);return o},numeric.dotVM=function(t,n){var r,i,s,o,u,a,f,l,c,h,p,d,v,m,g,y,b,w,E;o=t.length,u=n[0].length,f=Array(u);for(s=u-1;s>=0;s--){h=t[o-1]*n[o-1][s];for(i=o-2;i>=1;i-=2)p=i-1,h+=t[i]*n[i][s]+t[p]*n[p][s];i===0&&(h+=t[0]*n[0][s]),f[s]=h}return f},numeric.dotVV=function(t,n){var r,i=t.length,s,o=t[i-1]*n[i-1];for(r=i-2;r>=1;r-=2)s=r-1,o+=t[r]*n[r]+t[s]*n[s];return r===0&&(o+=t[0]*n[0]),o},numeric.dot=function(t,n){var r=numeric.dim;switch(r(t).length*1e3+r(n).length){case 2002:return n.length<10?numeric.dotMMsmall(t,n):numeric.dotMMbig(t,n);case 2001:return numeric.dotMV(t,n);case 1002:return numeric.dotVM(t,n);case 1001:return numeric.dotVV(t,n);case 1e3:return numeric.mulVS(t,n);case 1:return numeric.mulSV(t,n);case 0:return t*n;default:throw new Error("numeric.dot only works on vectors and matrices")}},numeric.diag=function(t){var n,r,i,s=t.length,o=Array(s),u;for(n=s-1;n>=0;n--){u=Array(s),r=n+2;for(i=s-1;i>=r;i-=2)u[i]=0,u[i-1]=0;i>n&&(u[i]=0),u[n]=t[n];for(i=n-1;i>=1;i-=2)u[i]=0,u[i-1]=0;i===0&&(u[0]=0),o[n]=u}return o},numeric.getDiag=function(e){var t=Math.min(e.length,e[0].length),n,r=Array(t);for(n=t-1;n>=1;--n)r[n]=e[n][n],--n,r[n]=e[n][n];return n===0&&(r[0]=e[0][0]),r},numeric.identity=function(t){return numeric.diag(numeric.rep([t],1))},numeric.pointwise=function(t,n,r){typeof r=="undefined"&&(r="");var i=[],s,o=/\[i\]$/,u,a="",f=!1;for(s=0;s<t.length;s++)o.test(t[s])?(u=t[s].substring(0,t[s].length-3),a=u):u=t[s],u==="ret"&&(f=!0),i.push(u);return i[t.length]="_s",i[t.length+1]="_k",i[t.length+2]='if(typeof _s === "undefined") _s = numeric.dim('+a+");\n"+'if(typeof _k === "undefined") _k = 0;\n'+"var _n = _s[_k];\n"+"var i"+(f?"":", ret = Array(_n)")+";\n"+"if(_k < _s.length-1) {\n"+"    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee("+t.join(",")+",_s,_k+1);\n"+"    return ret;\n"+"}\n"+r+"\n"+"for(i=_n-1;i!==-1;--i) {\n"+"    "+n+"\n"+"}\n"+"return ret;",Function.apply(null,i)},numeric.pointwise2=function(t,n,r){typeof r=="undefined"&&(r="");var i=[],s,o=/\[i\]$/,u,a="",f=!1;for(s=0;s<t.length;s++)o.test(t[s])?(u=t[s].substring(0,t[s].length-3),a=u):u=t[s],u==="ret"&&(f=!0),i.push(u);return i[t.length]="var _n = "+a+".length;\n"+"var i"+(f?"":", ret = Array(_n)")+";\n"+r+"\n"+"for(i=_n-1;i!==-1;--i) {\n"+n+"\n"+"}\n"+"return ret;",Function.apply(null,i)},numeric._biforeach=function _biforeach(e,t,n,r,i){if(r===n.length-1){i(e,t);return}var s,o=n[r];for(s=o-1;s>=0;s--)_biforeach(typeof e=="object"?e[s]:e,typeof t=="object"?t[s]:t,n,r+1,i)},numeric._biforeach2=function _biforeach2(e,t,n,r,i){if(r===n.length-1)return i(e,t);var s,o=n[r],u=Array(o);for(s=o-1;s>=0;--s)u[s]=_biforeach2(typeof e=="object"?e[s]:e,typeof t=="object"?t[s]:t,n,r+1,i);return u},numeric._foreach=function _foreach(e,t,n,r){if(n===t.length-1){r(e);return}var i,s=t[n];for(i=s-1;i>=0;i--)_foreach(e[i],t,n+1,r)},numeric._foreach2=function _foreach2(e,t,n,r){if(n===t.length-1)return r(e);var i,s=t[n],o=Array(s);for(i=s-1;i>=0;i--)o[i]=_foreach2(e[i],t,n+1,r);return o},numeric.ops2={add:"+",sub:"-",mul:"*",div:"/",mod:"%",and:"&&",or:"||",eq:"===",neq:"!==",lt:"<",gt:">",leq:"<=",geq:">=",band:"&",bor:"|",bxor:"^",lshift:"<<",rshift:">>",rrshift:">>>"},numeric.opseq={addeq:"+=",subeq:"-=",muleq:"*=",diveq:"/=",modeq:"%=",lshifteq:"<<=",rshifteq:">>=",rrshifteq:">>>=",bandeq:"&=",boreq:"|=",bxoreq:"^="},numeric.mathfuns=["abs","acos","asin","atan","ceil","cos","exp","floor","log","round","sin","sqrt","tan","isNaN","isFinite"],numeric.mathfuns2=["atan2","pow","max","min"],numeric.ops1={neg:"-",not:"!",bnot:"~",clone:""},numeric.mapreducers={any:["if(xi) return true;","var accum = false;"],all:["if(!xi) return false;","var accum = true;"],sum:["accum += xi;","var accum = 0;"],prod:["accum *= xi;","var accum = 1;"],norm2Squared:["accum += xi*xi;","var accum = 0;"],norminf:["accum = max(accum,abs(xi));","var accum = 0, max = Math.max, abs = Math.abs;"],norm1:["accum += abs(xi)","var accum = 0, abs = Math.abs;"],sup:["accum = max(accum,xi);","var accum = -Infinity, max = Math.max;"],inf:["accum = min(accum,xi);","var accum = Infinity, min = Math.min;"]},function(){var e,t;for(e=0;e<numeric.mathfuns2.length;++e)t=numeric.mathfuns2[e],numeric.ops2[t]=t;for(e in numeric.ops2)if(numeric.ops2.hasOwnProperty(e)){t=numeric.ops2[e];var n,r,i="";numeric.myIndexOf.call(numeric.mathfuns2,e)!==-1?(i="var "+t+" = Math."+t+";\n",n=function(e,n,r){return e+" = "+t+"("+n+","+r+")"},r=function(e,n){return e+" = "+t+"("+e+","+n+")"}):(n=function(e,n,r){return e+" = "+n+" "+t+" "+r},numeric.opseq.hasOwnProperty(e+"eq")?r=function(e,n){return e+" "+t+"= "+n}:r=function(e,n){return e+" = "+e+" "+t+" "+n}),numeric[e+"VV"]=numeric.pointwise2(["x[i]","y[i]"],n("ret[i]","x[i]","y[i]"),i),numeric[e+"SV"]=numeric.pointwise2(["x","y[i]"],n("ret[i]","x","y[i]"),i),numeric[e+"VS"]=numeric.pointwise2(["x[i]","y"],n("ret[i]","x[i]","y"),i),numeric[e]=Function("var n = arguments.length, i, x = arguments[0], y;\nvar VV = numeric."+e+"VV, VS = numeric."+e+"VS, SV = numeric."+e+"SV;\n"+"var dim = numeric.dim;\n"+"for(i=1;i!==n;++i) { \n"+"  y = arguments[i];\n"+'  if(typeof x === "object") {\n'+'      if(typeof y === "object") x = numeric._biforeach2(x,y,dim(x),0,VV);\n'+"      else x = numeric._biforeach2(x,y,dim(x),0,VS);\n"+'  } else if(typeof y === "object") x = numeric._biforeach2(x,y,dim(y),0,SV);\n'+"  else "+r("x","y")+"\n"+"}\nreturn x;\n"),numeric[t]=numeric[e],numeric[e+"eqV"]=numeric.pointwise2(["ret[i]","x[i]"],r("ret[i]","x[i]"),i),numeric[e+"eqS"]=numeric.pointwise2(["ret[i]","x"],r("ret[i]","x"),i),numeric[e+"eq"]=Function("var n = arguments.length, i, x = arguments[0], y;\nvar V = numeric."+e+"eqV, S = numeric."+e+"eqS\n"+"var s = numeric.dim(x);\n"+"for(i=1;i!==n;++i) { \n"+"  y = arguments[i];\n"+'  if(typeof y === "object") numeric._biforeach(x,y,s,0,V);\n'+"  else numeric._biforeach(x,y,s,0,S);\n"+"}\nreturn x;\n")}for(e=0;e<numeric.mathfuns2.length;++e)t=numeric.mathfuns2[e],delete numeric.ops2[t];for(e=0;e<numeric.mathfuns.length;++e)t=numeric.mathfuns[e],numeric.ops1[t]=t;for(e in numeric.ops1)numeric.ops1.hasOwnProperty(e)&&(i="",t=numeric.ops1[e],numeric.myIndexOf.call(numeric.mathfuns,e)!==-1&&Math.hasOwnProperty(t)&&(i="var "+t+" = Math."+t+";\n"),numeric[e+"eqV"]=numeric.pointwise2(["ret[i]"],"ret[i] = "+t+"(ret[i]);",i),numeric[e+"eq"]=Function("x",'if(typeof x !== "object") return '+t+"x\n"+"var i;\n"+"var V = numeric."+e+"eqV;\n"+"var s = numeric.dim(x);\n"+"numeric._foreach(x,s,0,V);\n"+"return x;\n"),numeric[e+"V"]=numeric.pointwise2(["x[i]"],"ret[i] = "+t+"(x[i]);",i),numeric[e]=Function("x",'if(typeof x !== "object") return '+t+"(x)\n"+"var i;\n"+"var V = numeric."+e+"V;\n"+"var s = numeric.dim(x);\n"+"return numeric._foreach2(x,s,0,V);\n"));for(e=0;e<numeric.mathfuns.length;++e)t=numeric.mathfuns[e],delete numeric.ops1[t];for(e in numeric.mapreducers)numeric.mapreducers.hasOwnProperty(e)&&(t=numeric.mapreducers[e],numeric[e+"V"]=numeric.mapreduce2(t[0],t[1]),numeric[e]=Function("x","s","k",t[1]+'if(typeof x !== "object") {'+"    xi = x;\n"+t[0]+";\n"+"    return accum;\n"+"}"+'if(typeof s === "undefined") s = numeric.dim(x);\n'+'if(typeof k === "undefined") k = 0;\n'+"if(k === s.length-1) return numeric."+e+"V(x);\n"+"var xi;\n"+"var n = x.length, i;\n"+"for(i=n-1;i!==-1;--i) {\n"+"   xi = arguments.callee(x[i]);\n"+t[0]+";\n"+"}\n"+"return accum;\n"))}(),numeric.truncVV=numeric.pointwise(["x[i]","y[i]"],"ret[i] = round(x[i]/y[i])*y[i];","var round = Math.round;"),numeric.truncVS=numeric.pointwise(["x[i]","y"],"ret[i] = round(x[i]/y)*y;","var round = Math.round;"),numeric.truncSV=numeric.pointwise(["x","y[i]"],"ret[i] = round(x/y[i])*y[i];","var round = Math.round;"),numeric.trunc=function(t,n){return typeof t=="object"?typeof n=="object"?numeric.truncVV(t,n):numeric.truncVS(t,n):typeof n=="object"?numeric.truncSV(t,n):Math.round(t/n)*n},numeric.inv=function(t){var n=numeric.dim(t),r=Math.abs,i=n[0],s=n[1],o=numeric.clone(t),u,a,f=numeric.identity(i),l,c,h,p,d,t;for(p=0;p<s;++p){var v=-1,m=-1;for(h=p;h!==i;++h)d=r(o[h][p]),d>m&&(v=h,m=d);a=o[v],o[v]=o[p],o[p]=a,c=f[v],f[v]=f[p],f[p]=c,t=a[p];for(d=p;d!==s;++d)a[d]/=t;for(d=s-1;d!==-1;--d)c[d]/=t;for(h=i-1;h!==-1;--h)if(h!==p){u=o[h],l=f[h],t=u[p];for(d=p+1;d!==s;++d)u[d]-=a[d]*t;for(d=s-1;d>0;--d)l[d]-=c[d]*t,--d,l[d]-=c[d]*t;d===0&&(l[0]-=c[0]*t)}}return f},numeric.det=function(t){var n=numeric.dim(t);if(n.length!==2||n[0]!==n[1])throw new Error("numeric: det() only works on square matrices");var r=n[0],i=1,s,o,u,a=numeric.clone(t),f,l,c,h,p,d,v;for(o=0;o<r-1;o++){u=o;for(s=o+1;s<r;s++)Math.abs(a[s][o])>Math.abs(a[u][o])&&(u=s);u!==o&&(h=a[u],a[u]=a[o],a[o]=h,i*=-1),f=a[o];for(s=o+1;s<r;s++){l=a[s],c=l[o]/f[o];for(u=o+1;u<r-1;u+=2)p=u+1,l[u]-=f[u]*c,l[p]-=f[p]*c;u!==r&&(l[u]-=f[u]*c)}if(f[o]===0)return 0;i*=f[o]}return i*a[o][o]},numeric.transpose=function(t){var n,r,i=t.length,s=t[0].length,o=Array(s),u,a,f;for(r=0;r<s;r++)o[r]=Array(i);for(n=i-1;n>=1;n-=2){a=t[n],u=t[n-1];for(r=s-1;r>=1;--r)f=o[r],f[n]=a[r],f[n-1]=u[r],--r,f=o[r],f[n]=a[r],f[n-1]=u[r];r===0&&(f=o[0],f[n]=a[0],f[n-1]=u[0])}if(n===0){u=t[0];for(r=s-1;r>=1;--r)o[r][0]=u[r],--r,o[r][0]=u[r];r===0&&(o[0][0]=u[0])}return o},numeric.negtranspose=function(t){var n,r,i=t.length,s=t[0].length,o=Array(s),u,a,f;for(r=0;r<s;r++)o[r]=Array(i);for(n=i-1;n>=1;n-=2){a=t[n],u=t[n-1];for(r=s-1;r>=1;--r)f=o[r],f[n]=-a[r],f[n-1]=-u[r],--r,f=o[r],f[n]=-a[r],f[n-1]=-u[r];r===0&&(f=o[0],f[n]=-a[0],f[n-1]=-u[0])}if(n===0){u=t[0];for(r=s-1;r>=1;--r)o[r][0]=-u[r],--r,o[r][0]=-u[r];r===0&&(o[0][0]=-u[0])}return o},numeric._random=function _random(e,t){var n,r=e[t],i=Array(r),s;if(t===e.length-1){s=Math.random;for(n=r-1;n>=1;n-=2)i[n]=s(),i[n-1]=s();return n===0&&(i[0]=s()),i}for(n=r-1;n>=0;n--)i[n]=_random(e,t+1);return i},numeric.random=function(t){return numeric._random(t,0)},numeric.norm2=function(t){return Math.sqrt(numeric.norm2Squared(t))},numeric.linspace=function(t,n,r){typeof r=="undefined"&&(r=Math.max(Math.round(n-t)+1,1));if(r<2)return r===1?[t]:[];var i,s=Array(r);r--;for(i=r;i>=0;i--)s[i]=(i*n+(r-i)*t)/r;return s},numeric.getBlock=function(t,n,r){function s(e,t){var o,u=n[t],a=r[t]-u,f=Array(a);if(t===i.length-1){for(o=a;o>=0;o--)f[o]=e[o+u];return f}for(o=a;o>=0;o--)f[o]=s(e[o+u],t+1);return f}var i=numeric.dim(t);return s(t,0)},numeric.setBlock=function(t,n,r,i){function o(e,t,i){var u,a=n[i],f=r[i]-a;if(i===s.length-1)for(u=f;u>=0;u--)e[u+a]=t[u];for(u=f;u>=0;u--)o(e[u+a],t[u],i+1)}var s=numeric.dim(t);return o(t,i,0),t},numeric.getRange=function(t,n,r){var i=n.length,s=r.length,o,u,a=Array(i),f,l;for(o=i-1;o!==-1;--o){a[o]=Array(s),f=a[o],l=t[n[o]];for(u=s-1;u!==-1;--u)f[u]=l[r[u]]}return a},numeric.blockMatrix=function(t){var n=numeric.dim(t);if(n.length<4)return numeric.blockMatrix([t]);var r=n[0],i=n[1],s,o,u,a,f;s=0,o=0;for(u=0;u<r;++u)s+=t[u][0].length;for(a=0;a<i;++a)o+=t[0][a][0].length;var l=Array(s);for(u=0;u<s;++u)l[u]=Array(o);var c=0,h,p,d,v,m;for(u=0;u<r;++u){h=o;for(a=i-1;a!==-1;--a){f=t[u][a],h-=f[0].length;for(d=f.length-1;d!==-1;--d){m=f[d],p=l[c+d];for(v=m.length-1;v!==-1;--v)p[h+v]=m[v]}}c+=t[u][0].length}return l},numeric.tensor=function(t,n){if(typeof t=="number"||typeof n=="number")return numeric.mul(t,n);var r=numeric.dim(t),i=numeric.dim(n);if(r.length!==1||i.length!==1)throw new Error("numeric: tensor product is only defined for vectors");var s=r[0],o=i[0],u=Array(s),a,f,l,c;for(f=s-1;f>=0;f--){a=Array(o),c=t[f];for(l=o-1;l>=3;--l)a[l]=c*n[l],--l,a[l]=c*n[l],--l,a[l]=c*n[l],--l,a[l]=c*n[l];while(l>=0)a[l]=c*n[l],--l;u[f]=a}return u},numeric.T=function(t,n){this.x=t,this.y=n},numeric.t=function(t,n){return new numeric.T(t,n)},numeric.Tbinop=function(t,n,r,i,s){var o=numeric.indexOf;if(typeof s!="string"){var u;s="";for(u in numeric)numeric.hasOwnProperty(u)&&(t.indexOf(u)>=0||n.indexOf(u)>=0||r.indexOf(u)>=0||i.indexOf(u)>=0)&&u.length>1&&(s+="var "+u+" = numeric."+u+";\n")}return Function(["y"],"var x = this;\nif(!(y instanceof numeric.T)) { y = new numeric.T(y); }\n"+s+"\n"+"if(x.y) {"+"  if(y.y) {"+"    return new numeric.T("+i+");\n"+"  }\n"+"  return new numeric.T("+r+");\n"+"}\n"+"if(y.y) {\n"+"  return new numeric.T("+n+");\n"+"}\n"+"return new numeric.T("+t+");\n")},numeric.T.prototype.add=numeric.Tbinop("add(x.x,y.x)","add(x.x,y.x),y.y","add(x.x,y.x),x.y","add(x.x,y.x),add(x.y,y.y)"),numeric.T.prototype.sub=numeric.Tbinop("sub(x.x,y.x)","sub(x.x,y.x),neg(y.y)","sub(x.x,y.x),x.y","sub(x.x,y.x),sub(x.y,y.y)"),numeric.T.prototype.mul=numeric.Tbinop("mul(x.x,y.x)","mul(x.x,y.x),mul(x.x,y.y)","mul(x.x,y.x),mul(x.y,y.x)","sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))"),numeric.T.prototype.reciprocal=function(){var t=numeric.mul,n=numeric.div;if(this.y){var r=numeric.add(t(this.x,this.x),t(this.y,this.y));return new numeric.T(n(this.x,r),n(numeric.neg(this.y),r))}return new T(n(1,this.x))},numeric.T.prototype.div=function div(e){e instanceof numeric.T||(e=new numeric.T(e));if(e.y)return this.mul(e.reciprocal());var div=numeric.div;return this.y?new numeric.T(div(this.x,e.x),div(this.y,e.x)):new numeric.T(div(this.x,e.x))},numeric.T.prototype.dot=numeric.Tbinop("dot(x.x,y.x)","dot(x.x,y.x),dot(x.x,y.y)","dot(x.x,y.x),dot(x.y,y.x)","sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))"),numeric.T.prototype.transpose=function(){var t=numeric.transpose,n=this.x,r=this.y;return r?new numeric.T(t(n),t(r)):new numeric.T(t(n))},numeric.T.prototype.transjugate=function(){var t=numeric.transpose,n=this.x,r=this.y;return r?new numeric.T(t(n),numeric.negtranspose(r)):new numeric.T(t(n))},numeric.Tunop=function(t,n,r){return typeof r!="string"&&(r=""),Function("var x = this;\n"+r+"\n"+"if(x.y) {"+"  "+n+";\n"+"}\n"+t+";\n")},numeric.T.prototype.exp=numeric.Tunop("return new numeric.T(ex)","return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex))","var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;"),numeric.T.prototype.conj=numeric.Tunop("return new numeric.T(x.x);","return new numeric.T(x.x,numeric.neg(x.y));"),numeric.T.prototype.neg=numeric.Tunop("return new numeric.T(neg(x.x));","return new numeric.T(neg(x.x),neg(x.y));","var neg = numeric.neg;"),numeric.T.prototype.sin=numeric.Tunop("return new numeric.T(numeric.sin(x.x))","return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));"),numeric.T.prototype.cos=numeric.Tunop("return new numeric.T(numeric.cos(x.x))","return x.exp().add(x.neg().exp()).div(2);"),numeric.T.prototype.abs=numeric.Tunop("return new numeric.T(numeric.abs(x.x));","return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));","var mul = numeric.mul;"),numeric.T.prototype.log=numeric.Tunop("return new numeric.T(numeric.log(x.x));","var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\nreturn new numeric.T(numeric.log(r.x),theta.x);"),numeric.T.prototype.norm2=numeric.Tunop("return numeric.norm2(x.x);","var f = numeric.norm2Squared;\nreturn Math.sqrt(f(x.x)+f(x.y));"),numeric.T.prototype.inv=function(){var t=this;if(typeof t.y=="undefined")return new numeric.T(numeric.inv(t.x));var n=t.x.length,r,i,s,o=numeric.identity(n),u=numeric.rep([n,n],0),a=numeric.clone(t.x),f=numeric.clone(t.y),l,c,h,p,d,v,m,g,r,i,s,y,b,w,E,S,x,T;for(r=0;r<n;r++){w=a[r][r],E=f[r][r],y=w*w+E*E,s=r;for(i=r+1;i<n;i++)w=a[i][r],E=f[i][r],b=w*w+E*E,b>y&&(s=i,y=b);s!==r&&(T=a[r],a[r]=a[s],a[s]=T,T=f[r],f[r]=f[s],f[s]=T,T=o[r],o[r]=o[s],o[s]=T,T=u[r],u[r]=u[s],u[s]=T),l=a[r],c=f[r],d=o[r],v=u[r],w=l[r],E=c[r];for(i=r+1;i<n;i++)S=l[i],x=c[i],l[i]=(S*w+x*E)/y,c[i]=(x*w-S*E)/y;for(i=0;i<n;i++)S=d[i],x=v[i],d[i]=(S*w+x*E)/y,v[i]=(x*w-S*E)/y;for(i=r+1;i<n;i++){h=a[i],p=f[i],m=o[i],g=u[i],w=h[r],E=p[r];for(s=r+1;s<n;s++)S=l[s],x=c[s],h[s]-=S*w-x*E,p[s]-=x*w+S*E;for(s=0;s<n;s++)S=d[s],x=v[s],m[s]-=S*w-x*E,g[s]-=x*w+S*E}}for(r=n-1;r>0;r--){d=o[r],v=u[r];for(i=r-1;i>=0;i--){m=o[i],g=u[i],w=a[i][r],E=f[i][r];for(s=n-1;s>=0;s--)S=d[s],x=v[s],m[s]-=w*S-E*x,g[s]-=w*x+E*S}}return new numeric.T(o,u)},numeric.T.prototype.get=function(t){var n=this.x,r=this.y,i=0,s,o=t.length;if(r){while(i<o)s=t[i],n=n[s],r=r[s],i++;return new numeric.T(n,r)}while(i<o)s=t[i],n=n[s],i++;return new numeric.T(n)},numeric.T.prototype.set=function(t,n){var r=this.x,i=this.y,s=0,o,u=t.length,a=n.x,f=n.y;if(u===0)return f?this.y=f:i&&(this.y=undefined),this.x=r,this;if(f){i||(i=numeric.rep(numeric.dim(r),0),this.y=i);while(s<u-1)o=t[s],r=r[o],i=i[o],s++;return o=t[s],r[o]=a,i[o]=f,this}if(i){while(s<u-1)o=t[s],r=r[o],i=i[o],s++;return o=t[s],r[o]=a,a instanceof Array?i[o]=numeric.rep(numeric.dim(a),0):i[o]=0,this}while(s<u-1)o=t[s],r=r[o],s++;return o=t[s],r[o]=a,this},numeric.T.prototype.getRows=function(t,n){var r=n-t+1,i,s=Array(r),o,u=this.x,a=this.y;for(i=t;i<=n;i++)s[i-t]=u[i];if(a){o=Array(r);for(i=t;i<=n;i++)o[i-t]=a[i];return new numeric.T(s,o)}return new numeric.T(s)},numeric.T.prototype.setRows=function(t,n,r){var i,s=this.x,o=this.y,u=r.x,a=r.y;for(i=t;i<=n;i++)s[i]=u[i-t];if(a){o||(o=numeric.rep(numeric.dim(s),0),this.y=o);for(i=t;i<=n;i++)o[i]=a[i-t]}else if(o)for(i=t;i<=n;i++)o[i]=numeric.rep([u[i-t].length],0);return this},numeric.T.prototype.getRow=function(t){var n=this.x,r=this.y;return r?new numeric.T(n[t],r[t]):new numeric.T(n[t])},numeric.T.prototype.setRow=function(t,n){var r=this.x,i=this.y,s=n.x,o=n.y;return r[t]=s,o?(i||(i=numeric.rep(numeric.dim(r),0),this.y=i),i[t]=o):i&&(i=numeric.rep([s.length],0)),this},numeric.T.prototype.getBlock=function(t,n){var r=this.x,i=this.y,s=numeric.getBlock;return i?new numeric.T(s(r,t,n),s(i,t,n)):new numeric.T(s(r,t,n))},numeric.T.prototype.setBlock=function(t,n,r){r instanceof numeric.T||(r=new numeric.T(r));var i=this.x,s=this.y,o=numeric.setBlock,u=r.x,a=r.y;if(a)return s||(this.y=numeric.rep(numeric.dim(this),0),s=this.y),o(i,t,n,u),o(s,t,n,a),this;o(i,t,n,u),s&&o(s,t,n,numeric.rep(numeric.dim(u),0))},numeric.T.rep=function(t,n){var r=numeric.T;n instanceof r||(n=new r(n));var i=n.x,s=n.y,o=numeric.rep;return s?new r(o(t,i),o(t,s)):new r(o(t,i))},numeric.T.diag=function diag(e){e instanceof numeric.T||(e=new numeric.T(e));var t=e.x,n=e.y,diag=numeric.diag;return n?new numeric.T(diag(t),diag(n)):new numeric.T(diag(t))},numeric.T.eig=function(){if(this.y)throw new Error("eig: not implemented for complex matrices.");return numeric.eig(this.x)},numeric.T.identity=function(t){return new numeric.T(numeric.identity(t))},numeric.T.prototype.getDiag=function(){var t=numeric,n=this.x,r=this.y;return r?new t.T(t.getDiag(n),t.getDiag(r)):new t.T(t.getDiag(n))},numeric.house=function(t){var n=numeric.clone(t),r=t[0]>=0?1:-1,i=r*numeric.norm2(t);n[0]+=i;var s=numeric.norm2(n);if(s===0)throw new Error("eig: internal error");return numeric.div(n,s)},numeric.toUpperHessenberg=function(t){var n=numeric.dim(t);if(n.length!==2||n[0]!==n[1])throw new Error("numeric: toUpperHessenberg() only works on square matrices");var r=n[0],i,s,o,u,a,f=numeric.clone(t),l,c,h,p,d=numeric.identity(r),v;for(s=0;s<r-2;s++){u=Array(r-s-1);for(i=s+1;i<r;i++)u[i-s-1]=f[i][s];if(numeric.norm2(u)>0){a=numeric.house(u),l=numeric.getBlock(f,[s+1,s],[r-1,r-1]),c=numeric.tensor(a,numeric.dot(a,l));for(i=s+1;i<r;i++){h=f[i],p=c[i-s-1];for(o=s;o<r;o++)h[o]-=2*p[o-s]}l=numeric.getBlock(f,[0,s+1],[r-1,r-1]),c=numeric.tensor(numeric.dot(l,a),a);for(i=0;i<r;i++){h=f[i],p=c[i];for(o=s+1;o<r;o++)h[o]-=2*p[o-s-1]}l=Array(r-s-1);for(i=s+1;i<r;i++)l[i-s-1]=d[i];c=numeric.tensor(a,numeric.dot(a,l));for(i=s+1;i<r;i++){v=d[i],p=c[i-s-1];for(o=0;o<r;o++)v[o]-=2*p[o]}}}return{H:f,Q:d}},numeric.epsilon=2.220446049250313e-16,numeric.QRFrancis=function(e,t){typeof t=="undefined"&&(t=1e4),e=numeric.clone(e);var n=numeric.clone(e),r=numeric.dim(e),i=r[0],s,o,u,a,f,l,c,h,p,d=numeric.identity(i),v,m,g,y,b,w,E,S,x;if(i<3)return{Q:d,B:[[0,i-1]]};var T=numeric.epsilon;for(x=0;x<t;x++){for(E=0;E<i-1;E++)if(Math.abs(e[E+1][E])<T*(Math.abs(e[E][E])+Math.abs(e[E+1][E+1]))){var N=numeric.QRFrancis(numeric.getBlock(e,[0,0],[E,E]),t),C=numeric.QRFrancis(numeric.getBlock(e,[E+1,E+1],[i-1,i-1]),t);g=Array(E+1);for(w=0;w<=E;w++)g[w]=d[w];y=numeric.dot(N.Q,g);for(w=0;w<=E;w++)d[w]=y[w];g=Array(i-E-1);for(w=E+1;w<i;w++)g[w-E-1]=d[w];y=numeric.dot(C.Q,g);for(w=E+1;w<i;w++)d[w]=y[w-E-1];return{Q:d,B:N.B.concat(numeric.add(C.B,E+1))}}u=e[i-2][i-2],a=e[i-2][i-1],f=e[i-1][i-2],l=e[i-1][i-1],h=u+l,c=u*l-a*f,p=numeric.getBlock(e,[0,0],[2,2]);if(h*h>=4*c){var k,L;k=.5*(h+Math.sqrt(h*h-4*c)),L=.5*(h-Math.sqrt(h*h-4*c)),p=numeric.add(numeric.sub(numeric.dot(p,p),numeric.mul(p,k+L)),numeric.diag(numeric.rep([3],k*L)))}else p=numeric.add(numeric.sub(numeric.dot(p,p),numeric.mul(p,h)),numeric.diag(numeric.rep([3],c)));s=[p[0][0],p[1][0],p[2][0]],o=numeric.house(s),g=[e[0],e[1],e[2]],y=numeric.tensor(o,numeric.dot(o,g));for(w=0;w<3;w++){m=e[w],b=y[w];for(S=0;S<i;S++)m[S]-=2*b[S]}g=numeric.getBlock(e,[0,0],[i-1,2]),y=numeric.tensor(numeric.dot(g,o),o);for(w=0;w<i;w++){m=e[w],b=y[w];for(S=0;S<3;S++)m[S]-=2*b[S]}g=[d[0],d[1],d[2]],y=numeric.tensor(o,numeric.dot(o,g));for(w=0;w<3;w++){v=d[w],b=y[w];for(S=0;S<i;S++)v[S]-=2*b[S]}var A;for(E=0;E<i-2;E++){for(S=E;S<=E+1;S++)if(Math.abs(e[S+1][S])<T*(Math.abs(e[S][S])+Math.abs(e[S+1][S+1]))){var N=numeric.QRFrancis(numeric.getBlock(e,[0,0],[S,S]),t),C=numeric.QRFrancis(numeric.getBlock(e,[S+1,S+1],[i-1,i-1]),t);g=Array(S+1);for(w=0;w<=S;w++)g[w]=d[w];y=numeric.dot(N.Q,g);for(w=0;w<=S;w++)d[w]=y[w];g=Array(i-S-1);for(w=S+1;w<i;w++)g[w-S-1]=d[w];y=numeric.dot(C.Q,g);for(w=S+1;w<i;w++)d[w]=y[w-S-1];return{Q:d,B:N.B.concat(numeric.add(C.B,S+1))}}A=Math.min(i-1,E+3),s=Array(A-E);for(w=E+1;w<=A;w++)s[w-E-1]=e[w][E];o=numeric.house(s),g=numeric.getBlock(e,[E+1,E],[A,i-1]),y=numeric.tensor(o,numeric.dot(o,g));for(w=E+1;w<=A;w++){m=e[w],b=y[w-E-1];for(S=E;S<i;S++)m[S]-=2*b[S-E]}g=numeric.getBlock(e,[0,E+1],[i-1,A]),y=numeric.tensor(numeric.dot(g,o),o);for(w=0;w<i;w++){m=e[w],b=y[w];for(S=E+1;S<=A;S++)m[S]-=2*b[S-E-1]}g=Array(A-E);for(w=E+1;w<=A;w++)g[w-E-1]=d[w];y=numeric.tensor(o,numeric.dot(o,g));for(w=E+1;w<=A;w++){v=d[w],b=y[w-E-1];for(S=0;S<i;S++)v[S]-=2*b[S]}}}throw new Error("numeric: eigenvalue iteration does not converge -- increase maxiter?")},numeric.eig=function(t,n){var r=numeric.toUpperHessenberg(t),i=numeric.QRFrancis(r.H,n),s=numeric.T,o=t.length,u,a,f=!1,l=i.B,c=numeric.dot(i.Q,numeric.dot(r.H,numeric.transpose(i.Q))),h=new s(numeric.dot(i.Q,r.Q)),p,d=l.length,v,m,g,y,b,w,E,S,x,T,N,C,k,L,A=Math.sqrt;for(a=0;a<d;a++){u=l[a][0];if(u!==l[a][1]){v=u+1,m=c[u][u],g=c[u][v],y=c[v][u],b=c[v][v];if(g===0&&y===0)continue;w=-m-b,E=m*b-g*y,S=w*w-4*E,S>=0?(w<0?x=-0.5*(w-A(S)):x=-0.5*(w+A(S)),k=(m-x)*(m-x)+g*g,L=y*y+(b-x)*(b-x),k>L?(k=A(k),N=(m-x)/k,C=g/k):(L=A(L),N=y/L,C=(b-x)/L),p=new s([[C,-N],[N,C]]),h.setRows(u,v,p.dot(h.getRows(u,v)))):(x=-0.5*w,T=.5*A(-S),k=(m-x)*(m-x)+g*g,L=y*y+(b-x)*(b-x),k>L?(k=A(k+T*T),N=(m-x)/k,C=g/k,x=0,T/=k):(L=A(L+T*T),N=y/L,C=(b-x)/L,x=T/L,T=0),p=new s([[C,-N],[N,C]],[[x,
	T],[T,-x]]),h.setRows(u,v,p.dot(h.getRows(u,v))))}}var O=h.dot(t).dot(h.transjugate()),o=t.length,M=numeric.T.identity(o);for(v=0;v<o;v++)if(v>0)for(a=v-1;a>=0;a--){var _=O.get([a,a]),D=O.get([v,v]);if(!numeric.neq(_.x,D.x)&&!numeric.neq(_.y,D.y)){M.setRow(v,M.getRow(a));continue}x=O.getRow(a).getBlock([a],[v-1]),T=M.getRow(v).getBlock([a],[v-1]),M.set([v,a],O.get([a,v]).neg().sub(x.dot(T)).div(_.sub(D)))}for(v=0;v<o;v++)x=M.getRow(v),M.setRow(v,x.div(x.norm2()));return M=M.transpose(),M=h.transjugate().dot(M),{lambda:O.getDiag(),E:M}},numeric.ccsSparse=function(t){var n=t.length,r,i,s,o,u=[];for(s=n-1;s!==-1;--s){i=t[s];for(o in i){o=parseInt(o);while(o>=u.length)u[u.length]=0;i[o]!==0&&u[o]++}}var r=u.length,a=Array(r+1);a[0]=0;for(s=0;s<r;++s)a[s+1]=a[s]+u[s];var f=Array(a[r]),l=Array(a[r]);for(s=n-1;s!==-1;--s){i=t[s];for(o in i)i[o]!==0&&(u[o]--,f[a[o]+u[o]]=s,l[a[o]+u[o]]=i[o])}return[a,f,l]},numeric.ccsFull=function(t){var n=t[0],r=t[1],i=t[2],s=numeric.ccsDim(t),o=s[0],u=s[1],a,f,l,c,h,p=numeric.rep([o,u],0);for(a=0;a<u;a++){l=n[a],c=n[a+1];for(f=l;f<c;++f)p[r[f]][a]=i[f]}return p},numeric.ccsTSolve=function(t,n,r,i,s){function h(e){var t;if(r[e]!==0)return;r[e]=1;for(t=o[e];t<o[e+1];++t)h(u[t]);s[c]=e,++c}var o=t[0],u=t[1],a=t[2],f=o.length-1,l=Math.max,c=0;typeof i=="undefined"&&(r=numeric.rep([f],0)),typeof i=="undefined"&&(i=numeric.linspace(0,r.length-1)),typeof s=="undefined"&&(s=[]);var p,d,v,m,g,y,b,w,E;for(p=i.length-1;p!==-1;--p)h(i[p]);s.length=c;for(p=s.length-1;p!==-1;--p)r[s[p]]=0;for(p=i.length-1;p!==-1;--p)d=i[p],r[d]=n[d];for(p=s.length-1;p!==-1;--p){d=s[p],v=o[d],m=l(o[d+1],v);for(g=v;g!==m;++g)if(u[g]===d){r[d]/=a[g];break}E=r[d];for(g=v;g!==m;++g)y=u[g],y!==d&&(r[y]-=E*a[g])}return r},numeric.ccsDFS=function(t){this.k=Array(t),this.k1=Array(t),this.j=Array(t)},numeric.ccsDFS.prototype.dfs=function(t,n,r,i,s,o){var u=0,a,f=s.length,l=this.k,c=this.k1,h=this.j,p,d;if(i[t]!==0)return;i[t]=1,h[0]=t,l[0]=p=n[t],c[0]=d=n[t+1];for(;;)if(p>=d){s[f]=h[u];if(u===0)return;++f,--u,p=l[u],d=c[u]}else a=o[r[p]],i[a]===0?(i[a]=1,l[u]=p,++u,h[u]=a,p=n[a],c[u]=d=n[a+1]):++p},numeric.ccsLPSolve=function(t,n,r,i,s,o,u){var a=t[0],f=t[1],l=t[2],c=a.length-1,h=0,p=n[0],d=n[1],v=n[2],m,g,y,b,w,E,S,x,T,N,C,k;g=p[s],y=p[s+1],i.length=0;for(m=g;m<y;++m)u.dfs(o[d[m]],a,f,r,i,o);for(m=i.length-1;m!==-1;--m)r[i[m]]=0;for(m=g;m!==y;++m)b=o[d[m]],r[b]=v[m];for(m=i.length-1;m!==-1;--m){b=i[m],E=a[b],S=a[b+1];for(x=E;x<S;++x)if(o[f[x]]===b){r[b]/=l[x];break}k=r[b];for(x=E;x<S;++x)T=o[f[x]],T!==b&&(r[T]-=k*l[x])}return r},numeric.ccsLUP1=function(t,n){var r=t[0].length-1,i=[numeric.rep([r+1],0),[],[]],s=[numeric.rep([r+1],0),[],[]],o=i[0],u=i[1],a=i[2],f=s[0],l=s[1],c=s[2],h=numeric.rep([r],0),p=numeric.rep([r],0),d,v,m,g,y,b,w,E,S,x,T=numeric.ccsLPSolve,N=Math.max,C=Math.abs,k=numeric.linspace(0,r-1),L=numeric.linspace(0,r-1),A=new numeric.ccsDFS(r);typeof n=="undefined"&&(n=1);for(d=0;d<r;++d){T(i,t,h,p,d,L,A),b=-1,w=-1;for(v=p.length-1;v!==-1;--v){m=p[v];if(m<=d)continue;E=C(h[m]),E>b&&(w=m,b=E)}C(h[d])<n*b&&(v=k[d],b=k[w],k[d]=b,L[b]=d,k[w]=v,L[v]=w,b=h[d],h[d]=h[w],h[w]=b),b=o[d],w=f[d],S=h[d],u[b]=k[d],a[b]=1,++b;for(v=p.length-1;v!==-1;--v)m=p[v],E=h[m],p[v]=0,h[m]=0,m<=d?(l[w]=m,c[w]=E,++w):(u[b]=k[m],a[b]=E/S,++b);o[d+1]=b,f[d+1]=w}for(v=u.length-1;v!==-1;--v)u[v]=L[u[v]];return{L:i,U:s,P:k,Pinv:L}},numeric.ccsDFS0=function(t){this.k=Array(t),this.k1=Array(t),this.j=Array(t)},numeric.ccsDFS0.prototype.dfs=function(t,n,r,i,s,o,u){var a=0,f,l=s.length,c=this.k,h=this.k1,p=this.j,d,v;if(i[t]!==0)return;i[t]=1,p[0]=t,c[0]=d=n[o[t]],h[0]=v=n[o[t]+1];for(;;){if(isNaN(d))throw new Error("Ow!");if(d>=v){s[l]=o[p[a]];if(a===0)return;++l,--a,d=c[a],v=h[a]}else f=r[d],i[f]===0?(i[f]=1,c[a]=d,++a,p[a]=f,f=o[f],d=n[f],h[a]=v=n[f+1]):++d}},numeric.ccsLPSolve0=function(t,n,r,i,s,o,u,a){var f=t[0],l=t[1],c=t[2],h=f.length-1,p=0,d=n[0],v=n[1],m=n[2],g,y,b,w,E,S,x,T,N,C,k,L;y=d[s],b=d[s+1],i.length=0;for(g=y;g<b;++g)a.dfs(v[g],f,l,r,i,o,u);for(g=i.length-1;g!==-1;--g)w=i[g],r[u[w]]=0;for(g=y;g!==b;++g)w=v[g],r[w]=m[g];for(g=i.length-1;g!==-1;--g){w=i[g],N=u[w],S=f[w],x=f[w+1];for(T=S;T<x;++T)if(l[T]===N){r[N]/=c[T];break}L=r[N];for(T=S;T<x;++T)r[l[T]]-=L*c[T];r[N]=L}},numeric.ccsLUP0=function(t,n){var r=t[0].length-1,i=[numeric.rep([r+1],0),[],[]],s=[numeric.rep([r+1],0),[],[]],o=i[0],u=i[1],a=i[2],f=s[0],l=s[1],c=s[2],h=numeric.rep([r],0),p=numeric.rep([r],0),d,v,m,g,y,b,w,E,S,x,T=numeric.ccsLPSolve0,N=Math.max,C=Math.abs,k=numeric.linspace(0,r-1),L=numeric.linspace(0,r-1),A=new numeric.ccsDFS0(r);typeof n=="undefined"&&(n=1);for(d=0;d<r;++d){T(i,t,h,p,d,L,k,A),b=-1,w=-1;for(v=p.length-1;v!==-1;--v){m=p[v];if(m<=d)continue;E=C(h[k[m]]),E>b&&(w=m,b=E)}C(h[k[d]])<n*b&&(v=k[d],b=k[w],k[d]=b,L[b]=d,k[w]=v,L[v]=w),b=o[d],w=f[d],S=h[k[d]],u[b]=k[d],a[b]=1,++b;for(v=p.length-1;v!==-1;--v)m=p[v],E=h[k[m]],p[v]=0,h[k[m]]=0,m<=d?(l[w]=m,c[w]=E,++w):(u[b]=k[m],a[b]=E/S,++b);o[d+1]=b,f[d+1]=w}for(v=u.length-1;v!==-1;--v)u[v]=L[u[v]];return{L:i,U:s,P:k,Pinv:L}},numeric.ccsLUP=numeric.ccsLUP0,numeric.ccsDim=function(t){return[numeric.sup(t[1])+1,t[0].length-1]},numeric.ccsGetBlock=function(t,n,r){var i=numeric.ccsDim(t),s=i[0],o=i[1];typeof n=="undefined"?n=numeric.linspace(0,s-1):typeof n=="number"&&(n=[n]),typeof r=="undefined"?r=numeric.linspace(0,o-1):typeof r=="number"&&(r=[r]);var u,a,f,l=n.length,c,h=r.length,p,d,v,m=numeric.rep([o],0),g=[],y=[],b=[m,g,y],w=t[0],E=t[1],S=t[2],x=numeric.rep([s],0),T=0,N=numeric.rep([s],0);for(c=0;c<h;++c){d=r[c];var C=w[d],k=w[d+1];for(u=C;u<k;++u)p=E[u],N[p]=1,x[p]=S[u];for(u=0;u<l;++u)v=n[u],N[v]&&(g[T]=u,y[T]=x[n[u]],++T);for(u=C;u<k;++u)p=E[u],N[p]=0;m[c+1]=T}return b},numeric.ccsDot=function(t,n){var r=t[0],i=t[1],s=t[2],o=n[0],u=n[1],a=n[2],f=numeric.ccsDim(t),l=numeric.ccsDim(n),c=f[0],h=f[1],p=l[1],d=numeric.rep([c],0),v=numeric.rep([c],0),m=Array(c),g=numeric.rep([p],0),y=[],b=[],w=[g,y,b],E,S,x,T,N,C,k,L,A,O,M;for(x=0;x!==p;++x){T=o[x],N=o[x+1],A=0;for(S=T;S<N;++S){O=u[S],M=a[S],C=r[O],k=r[O+1];for(E=C;E<k;++E)L=i[E],v[L]===0&&(m[A]=L,v[L]=1,A+=1),d[L]=d[L]+s[E]*M}T=g[x],N=T+A,g[x+1]=N;for(S=A-1;S!==-1;--S)M=T+S,E=m[S],y[M]=E,b[M]=d[E],v[E]=0,d[E]=0;g[x+1]=g[x]+A}return w},numeric.ccsLUPSolve=function(t,n){var r=t.L,i=t.U,s=t.P,o=n[0],u=!1;typeof o!="object"&&(n=[[0,n.length],numeric.linspace(0,n.length-1),n],o=n[0],u=!0);var a=n[1],f=n[2],l=r[0].length-1,c=o.length-1,h=numeric.rep([l],0),p=Array(l),d=numeric.rep([l],0),v=Array(l),m=numeric.rep([c+1],0),g=[],y=[],b=numeric.ccsTSolve,w,E,S,x,T,N,C=0;for(w=0;w<c;++w){T=0,S=o[w],x=o[w+1];for(E=S;E<x;++E)N=t.Pinv[a[E]],v[T]=N,d[N]=f[E],++T;v.length=T,b(r,d,h,v,p);for(E=v.length-1;E!==-1;--E)d[v[E]]=0;b(i,h,d,p,v);if(u)return d;for(E=p.length-1;E!==-1;--E)h[p[E]]=0;for(E=v.length-1;E!==-1;--E)N=v[E],g[C]=N,y[C]=d[N],d[N]=0,++C;m[w+1]=C}return[m,g,y]},numeric.ccsbinop=function(t,n){return typeof n=="undefined"&&(n=""),Function("X","Y","var Xi = X[0], Xj = X[1], Xv = X[2];\nvar Yi = Y[0], Yj = Y[1], Yv = Y[2];\nvar n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\nvar Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\nvar x = numeric.rep([m],0),y = numeric.rep([m],0);\nvar xk,yk,zk;\nvar i,j,j0,j1,k,p=0;\n"+n+"for(i=0;i<n;++i) {\n"+"  j0 = Xi[i]; j1 = Xi[i+1];\n"+"  for(j=j0;j!==j1;++j) {\n"+"    k = Xj[j];\n"+"    x[k] = 1;\n"+"    Zj[p] = k;\n"+"    ++p;\n"+"  }\n"+"  j0 = Yi[i]; j1 = Yi[i+1];\n"+"  for(j=j0;j!==j1;++j) {\n"+"    k = Yj[j];\n"+"    y[k] = Yv[j];\n"+"    if(x[k] === 0) {\n"+"      Zj[p] = k;\n"+"      ++p;\n"+"    }\n"+"  }\n"+"  Zi[i+1] = p;\n"+"  j0 = Xi[i]; j1 = Xi[i+1];\n"+"  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\n"+"  j0 = Zi[i]; j1 = Zi[i+1];\n"+"  for(j=j0;j!==j1;++j) {\n"+"    k = Zj[j];\n"+"    xk = x[k];\n"+"    yk = y[k];\n"+t+"\n"+"    Zv[j] = zk;\n"+"  }\n"+"  j0 = Xi[i]; j1 = Xi[i+1];\n"+"  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\n"+"  j0 = Yi[i]; j1 = Yi[i+1];\n"+"  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\n"+"}\n"+"return [Zi,Zj,Zv];")},function(){var k,A,B,C;for(k in numeric.ops2)isFinite(eval("1"+numeric.ops2[k]+"0"))?A="[Y[0],Y[1],numeric."+k+"(X,Y[2])]":A="NaN",isFinite(eval("0"+numeric.ops2[k]+"1"))?B="[X[0],X[1],numeric."+k+"(X[2],Y)]":B="NaN",isFinite(eval("1"+numeric.ops2[k]+"0"))&&isFinite(eval("0"+numeric.ops2[k]+"1"))?C="numeric.ccs"+k+"MM(X,Y)":C="NaN",numeric["ccs"+k+"MM"]=numeric.ccsbinop("zk = xk "+numeric.ops2[k]+"yk;"),numeric["ccs"+k]=Function("X","Y",'if(typeof X === "number") return '+A+";\n"+'if(typeof Y === "number") return '+B+";\n"+"return "+C+";\n")}(),numeric.ccsScatter=function(t){var n=t[0],r=t[1],i=t[2],s=numeric.sup(r)+1,o=n.length,u=numeric.rep([s],0),a=Array(o),f=Array(o),l=numeric.rep([s],0),c;for(c=0;c<o;++c)l[r[c]]++;for(c=0;c<s;++c)u[c+1]=u[c]+l[c];var h=u.slice(0),p,d;for(c=0;c<o;++c)d=r[c],p=h[d],a[p]=n[c],f[p]=i[c],h[d]=h[d]+1;return[u,a,f]},numeric.ccsGather=function(t){var n=t[0],r=t[1],i=t[2],s=n.length-1,o=r.length,u=Array(o),a=Array(o),f=Array(o),l,c,h,p,d;d=0;for(l=0;l<s;++l){h=n[l],p=n[l+1];for(c=h;c!==p;++c)a[d]=l,u[d]=r[c],f[d]=i[c],++d}return[u,a,f]},numeric.sdim=function dim(e,t,n){typeof t=="undefined"&&(t=[]);if(typeof e!="object")return t;typeof n=="undefined"&&(n=0),n in t||(t[n]=0),e.length>t[n]&&(t[n]=e.length);var r;for(r in e)e.hasOwnProperty(r)&&dim(e[r],t,n+1);return t},numeric.sclone=function clone(e,t,n){typeof t=="undefined"&&(t=0),typeof n=="undefined"&&(n=numeric.sdim(e).length);var r,i=Array(e.length);if(t===n-1){for(r in e)e.hasOwnProperty(r)&&(i[r]=e[r]);return i}for(r in e)e.hasOwnProperty(r)&&(i[r]=clone(e[r],t+1,n));return i},numeric.sdiag=function(t){var n=t.length,r,i=Array(n),s,o,u;for(r=n-1;r>=1;r-=2)s=r-1,i[r]=[],i[r][r]=t[r],i[s]=[],i[s][s]=t[s];return r===0&&(i[0]=[],i[0][0]=t[r]),i},numeric.sidentity=function(t){return numeric.sdiag(numeric.rep([t],1))},numeric.stranspose=function(t){var n=[],r=t.length,i,s,o;for(i in t){if(!t.hasOwnProperty(i))continue;o=t[i];for(s in o){if(!o.hasOwnProperty(s))continue;typeof n[s]!="object"&&(n[s]=[]),n[s][i]=o[s]}}return n},numeric.sLUP=function(t,n){throw new Error("The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.")},numeric.sdotMM=function(t,n){var r=t.length,i=n.length,s=numeric.stranspose(n),o=s.length,u,a,f,l,c,h,p=Array(r),d;for(f=r-1;f>=0;f--){d=[],u=t[f];for(c=o-1;c>=0;c--){h=0,a=s[c];for(l in u){if(!u.hasOwnProperty(l))continue;l in a&&(h+=u[l]*a[l])}h&&(d[c]=h)}p[f]=d}return p},numeric.sdotMV=function(t,n){var r=t.length,i,s,o,u=Array(r),a;for(s=r-1;s>=0;s--){i=t[s],a=0;for(o in i){if(!i.hasOwnProperty(o))continue;n[o]&&(a+=i[o]*n[o])}a&&(u[s]=a)}return u},numeric.sdotVM=function(t,n){var r,i,s,o,u=[],a;for(r in t){if(!t.hasOwnProperty(r))continue;s=n[r],o=t[r];for(i in s){if(!s.hasOwnProperty(i))continue;u[i]||(u[i]=0),u[i]+=o*s[i]}}return u},numeric.sdotVV=function(t,n){var r,i=0;for(r in t)t[r]&&n[r]&&(i+=t[r]*n[r]);return i},numeric.sdot=function(t,n){var r=numeric.sdim(t).length,i=numeric.sdim(n).length,s=r*1e3+i;switch(s){case 0:return t*n;case 1001:return numeric.sdotVV(t,n);case 2001:return numeric.sdotMV(t,n);case 1002:return numeric.sdotVM(t,n);case 2002:return numeric.sdotMM(t,n);default:throw new Error("numeric.sdot not implemented for tensors of order "+r+" and "+i)}},numeric.sscatter=function(t){var n=t[0].length,r,i,s,o=t.length,u=[],a;for(i=n-1;i>=0;--i){if(!t[o-1][i])continue;a=u;for(s=0;s<o-2;s++)r=t[s][i],a[r]||(a[r]=[]),a=a[r];a[t[s][i]]=t[s+1][i]}return u},numeric.sgather=function gather(e,t,n){typeof t=="undefined"&&(t=[]),typeof n=="undefined"&&(n=[]);var r,i,s;r=n.length;for(i in e)if(e.hasOwnProperty(i)){n[r]=parseInt(i),s=e[i];if(typeof s=="number"){if(s){if(t.length===0)for(i=r+1;i>=0;--i)t[i]=[];for(i=r;i>=0;--i)t[i].push(n[i]);t[r+1].push(s)}}else gather(s,t,n)}return n.length>r&&n.pop(),t},numeric.cLU=function(t){var n=t[0],r=t[1],i=t[2],s=n.length,o=0,u,a,f,l,c,h;for(u=0;u<s;u++)n[u]>o&&(o=n[u]);o++;var p=Array(o),d=Array(o),v=numeric.rep([o],Infinity),m=numeric.rep([o],-Infinity),g,y,b;for(f=0;f<s;f++)u=n[f],a=r[f],a<v[u]&&(v[u]=a),a>m[u]&&(m[u]=a);for(u=0;u<o-1;u++)m[u]>m[u+1]&&(m[u+1]=m[u]);for(u=o-1;u>=1;u--)v[u]<v[u-1]&&(v[u-1]=v[u]);var w=0,E=0;for(u=0;u<o;u++)d[u]=numeric.rep([m[u]-v[u]+1],0),p[u]=numeric.rep([u-v[u]],0),w+=u-v[u]+1,E+=m[u]-u+1;for(f=0;f<s;f++)u=n[f],d[u][r[f]-v[u]]=i[f];for(u=0;u<o-1;u++){l=u-v[u],g=d[u];for(a=u+1;v[a]<=u&&a<o;a++){c=u-v[a],h=m[u]-u,y=d[a],b=y[c]/g[l];if(b){for(f=1;f<=h;f++)y[f+c]-=b*g[f+l];p[a][u-v[a]]=b}}}var g=[],y=[],S=[],x=[],T=[],N=[],s,C,k;s=0,C=0;for(u=0;u<o;u++){l=v[u],c=m[u],k=d[u];for(a=u;a<=c;a++)k[a-l]&&(g[s]=u,y[s]=a,S[s]=k[a-l],s++);k=p[u];for(a=l;a<u;a++)k[a-l]&&(x[C]=u,T[C]=a,N[C]=k[a-l],C++);x[C]=u,T[C]=u,N[C]=1,C++}return{U:[g,y,S],L:[x,T,N]}},numeric.cLUsolve=function(t,n){var r=t.L,i=t.U,s=numeric.clone(n),o=r[0],u=r[1],a=r[2],f=i[0],l=i[1],c=i[2],h=f.length,p=o.length,d=s.length,v,m,g;g=0;for(v=0;v<d;v++){while(u[g]<v)s[v]-=a[g]*s[u[g]],g++;g++}g=h-1;for(v=d-1;v>=0;v--){while(l[g]>v)s[v]-=c[g]*s[l[g]],g--;s[v]/=c[g],g--}return s},numeric.cgrid=function(t,n){typeof t=="number"&&(t=[t,t]);var r=numeric.rep(t,-1),i,s,o;if(typeof n!="function")switch(n){case"L":n=function(e,n){return e>=t[0]/2||n<t[1]/2};break;default:n=function(e,t){return!0}}o=0;for(i=1;i<t[0]-1;i++)for(s=1;s<t[1]-1;s++)n(i,s)&&(r[i][s]=o,o++);return r},numeric.cdelsq=function(t){var n=[[-1,0],[0,-1],[0,1],[1,0]],r=numeric.dim(t),i=r[0],s=r[1],o,u,a,f,l,c=[],h=[],p=[];for(o=1;o<i-1;o++)for(u=1;u<s-1;u++){if(t[o][u]<0)continue;for(a=0;a<4;a++){f=o+n[a][0],l=u+n[a][1];if(t[f][l]<0)continue;c.push(t[o][u]),h.push(t[f][l]),p.push(-1)}c.push(t[o][u]),h.push(t[o][u]),p.push(4)}return[c,h,p]},numeric.cdotMV=function(t,n){var r,i=t[0],s=t[1],o=t[2],u,a=i.length,f;f=0;for(u=0;u<a;u++)i[u]>f&&(f=i[u]);f++,r=numeric.rep([f],0);for(u=0;u<a;u++)r[i[u]]+=o[u]*n[s[u]];return r},numeric.Spline=function(t,n,r,i,s){this.x=t,this.yl=n,this.yr=r,this.kl=i,this.kr=s},numeric.Spline.prototype._at=function(t,n){var r=this.x,i=this.yl,s=this.yr,o=this.kl,u=this.kr,t,a,f,l,c=numeric.add,h=numeric.sub,p=numeric.mul;a=h(p(o[n],r[n+1]-r[n]),h(s[n+1],i[n])),f=c(p(u[n+1],r[n]-r[n+1]),h(s[n+1],i[n])),l=(t-r[n])/(r[n+1]-r[n]);var d=l*(1-l);return c(c(c(p(1-l,i[n]),p(l,s[n+1])),p(a,d*(1-l))),p(f,d*l))},numeric.Spline.prototype.at=function(t){if(typeof t=="number"){var n=this.x,r=n.length,i,s,o,u=Math.floor,a,f,l;i=0,s=r-1;while(s-i>1)o=u((i+s)/2),n[o]<=t?i=o:s=o;return this._at(t,i)}var r=t.length,c,h=Array(r);for(c=r-1;c!==-1;--c)h[c]=this.at(t[c]);return h},numeric.Spline.prototype.diff=function(){var t=this.x,n=this.yl,r=this.yr,i=this.kl,s=this.kr,o=n.length,u,a,f,l=i,c=s,h=Array(o),p=Array(o),d=numeric.add,v=numeric.mul,m=numeric.div,g=numeric.sub;for(u=o-1;u!==-1;--u)a=t[u+1]-t[u],f=g(r[u+1],n[u]),h[u]=m(d(v(f,6),v(i[u],-4*a),v(s[u+1],-2*a)),a*a),p[u+1]=m(d(v(f,-6),v(i[u],2*a),v(s[u+1],4*a)),a*a);return new numeric.Spline(t,l,c,h,p)},numeric.Spline.prototype.roots=function(){function t(e){return e*e}function n(e,t,n,r,i){var s=n*2-(t-e),o=-r*2+(t-e),u=(i+1)*.5,a=u*(1-u);return(1-u)*e+u*t+s*a*(1-u)+o*a*u}var r=[],i=this.x,s=this.yl,o=this.yr,u=this.kl,a=this.kr;typeof s[0]=="number"&&(s=[s],o=[o],u=[u],a=[a]);var f=s.length,l=i.length-1,c,h,p,d,v,m,g,y,b,w,r=Array(f),E,S,x,T,N,C,k,L,A,O,M,_,D,P,H,B,j,F=Math.sqrt;for(c=0;c!==f;++c){g=s[c],y=o[c],b=u[c],w=a[c],E=[];for(h=0;h!==l;h++){h>0&&y[h]*g[h]<0&&E.push(i[h]),A=i[h+1]-i[h],O=i[h],T=g[h],N=y[h+1],S=b[h]/A,x=w[h+1]/A,L=t(S-x+3*(T-N))+12*x*T,C=x+3*T+2*S-3*N,k=3*(x+S+2*(T-N)),L<=0?(_=C/k,_>i[h]&&_<i[h+1]?M=[i[h],_,i[h+1]]:M=[i[h],i[h+1]]):(_=(C-F(L))/k,D=(C+F(L))/k,M=[i[h]],_>i[h]&&_<i[h+1]&&M.push(_),D>i[h]&&D<i[h+1]&&M.push(D),M.push(i[h+1])),H=M[0],_=this._at(H,h);for(p=0;p<M.length-1;p++){B=M[p+1],D=this._at(B,h);if(_===0){E.push(H),H=B,_=D;continue}if(D===0||_*D>0){H=B,_=D;continue}var I=0;for(;;){j=(_*B-D*H)/(_-D);if(j<=H||j>=B)break;P=this._at(j,h);if(P*D>0)B=j,D=P,I===-1&&(_*=.5),I=-1;else{if(!(P*_>0))break;H=j,_=P,I===1&&(D*=.5),I=1}}E.push(j),H=M[p+1],_=this._at(H,h)}D===0&&E.push(B)}r[c]=E}return typeof this.yl[0]=="number"?r[0]:r},numeric.spline=function(t,n,r,i){var s=t.length,o=[],u=[],a=[],f,l=numeric.sub,c=numeric.mul,h=numeric.add;for(f=s-2;f>=0;f--)u[f]=t[f+1]-t[f],a[f]=l(n[f+1],n[f]);if(typeof r=="string"||typeof i=="string")r=i="periodic";var p=[[],[],[]];switch(typeof r){case"undefined":o[0]=c(3/(u[0]*u[0]),a[0]),p[0].push(0,0),p[1].push(0,1),p[2].push(2/u[0],1/u[0]);break;case"string":o[0]=h(c(3/(u[s-2]*u[s-2]),a[s-2]),c(3/(u[0]*u[0]),a[0])),p[0].push(0,0,0),p[1].push(s-2,0,1),p[2].push(1/u[s-2],2/u[s-2]+2/u[0],1/u[0]);break;default:o[0]=r,p[0].push(0),p[1].push(0),p[2].push(1)}for(f=1;f<s-1;f++)o[f]=h(c(3/(u[f-1]*u[f-1]),a[f-1]),c(3/(u[f]*u[f]),a[f])),p[0].push(f,f,f),p[1].push(f-1,f,f+1),p[2].push(1/u[f-1],2/u[f-1]+2/u[f],1/u[f]);switch(typeof i){case"undefined":o[s-1]=c(3/(u[s-2]*u[s-2]),a[s-2]),p[0].push(s-1,s-1),p[1].push(s-2,s-1),p[2].push(1/u[s-2],2/u[s-2]);break;case"string":p[1][p[1].length-1]=0;break;default:o[s-1]=i,p[0].push(s-1),p[1].push(s-1),p[2].push(1)}typeof o[0]!="number"?o=numeric.transpose(o):o=[o];var d=Array(o.length);if(typeof r=="string")for(f=d.length-1;f!==-1;--f)d[f]=numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(p)),o[f]),d[f][s-1]=d[f][0];else for(f=d.length-1;f!==-1;--f)d[f]=numeric.cLUsolve(numeric.cLU(p),o[f]);return typeof n[0]=="number"?d=d[0]:d=numeric.transpose(d),new numeric.Spline(t,n,n,d,d)},numeric.fftpow2=function fftpow2(e,t){var n=e.length;if(n===1)return;var r=Math.cos,i=Math.sin,s,o,u=Array(n/2),a=Array(n/2),f=Array(n/2),l=Array(n/2);o=n/2;for(s=n-1;s!==-1;--s)--o,f[o]=e[s],l[o]=t[s],--s,u[o]=e[s],a[o]=t[s];fftpow2(u,a),fftpow2(f,l),o=n/2;var c,h=-6.283185307179586/n,p,d;for(s=n-1;s!==-1;--s)--o,o===-1&&(o=n/2-1),c=h*s,p=r(c),d=i(c),e[s]=u[o]+p*f[o]-d*l[o],t[s]=a[o]+p*l[o]+d*f[o]},numeric._ifftpow2=function _ifftpow2(e,t){var n=e.length;if(n===1)return;var r=Math.cos,i=Math.sin,s,o,u=Array(n/2),a=Array(n/2),f=Array(n/2),l=Array(n/2);o=n/2;for(s=n-1;s!==-1;--s)--o,f[o]=e[s],l[o]=t[s],--s,u[o]=e[s],a[o]=t[s];_ifftpow2(u,a),_ifftpow2(f,l),o=n/2;var c,h=6.283185307179586/n,p,d;for(s=n-1;s!==-1;--s)--o,o===-1&&(o=n/2-1),c=h*s,p=r(c),d=i(c),e[s]=u[o]+p*f[o]-d*l[o],t[s]=a[o]+p*l[o]+d*f[o]},numeric.ifftpow2=function(t,n){numeric._ifftpow2(t,n),numeric.diveq(t,t.length),numeric.diveq(n,n.length)},numeric.convpow2=function(t,n,r,i){numeric.fftpow2(t,n),numeric.fftpow2(r,i);var s,o=t.length,u,a,f,l;for(s=o-1;s!==-1;--s)u=t[s],f=n[s],a=r[s],l=i[s],t[s]=u*a-f*l,n[s]=u*l+f*a;numeric.ifftpow2(t,n)},numeric.T.prototype.fft=function(){var t=this.x,n=this.y,r=t.length,i=Math.log,s=i(2),o=Math.ceil(i(2*r-1)/s),u=Math.pow(2,o),a=numeric.rep([u],0),f=numeric.rep([u],0),l=Math.cos,c=Math.sin,h,p=-3.141592653589793/r,d,v=numeric.rep([u],0),m=numeric.rep([u],0),g=Math.floor(r/2);for(h=0;h<r;h++)v[h]=t[h];if(typeof n!="undefined")for(h=0;h<r;h++)m[h]=n[h];a[0]=1;for(h=1;h<=u/2;h++)d=p*h*h,a[h]=l(d),f[h]=c(d),a[u-h]=l(d),f[u-h]=c(d);var y=new numeric.T(v,m),b=new numeric.T(a,f);return y=y.mul(b),numeric.convpow2(y.x,y.y,numeric.clone(b.x),numeric.neg(b.y)),y=y.mul(b),y.x.length=r,y.y.length=r,y},numeric.T.prototype.ifft=function(){var t=this.x,n=this.y,r=t.length,i=Math.log,s=i(2),o=Math.ceil(i(2*r-1)/s),u=Math.pow(2,o),a=numeric.rep([u],0),f=numeric.rep([u],0),l=Math.cos,c=Math.sin,h,p=3.141592653589793/r,d,v=numeric.rep([u],0),m=numeric.rep([u],0),g=Math.floor(r/2);for(h=0;h<r;h++)v[h]=t[h];if(typeof n!="undefined")for(h=0;h<r;h++)m[h]=n[h];a[0]=1;for(h=1;h<=u/2;h++)d=p*h*h,a[h]=l(d),f[h]=c(d),a[u-h]=l(d),f[u-h]=c(d);var y=new numeric.T(v,m),b=new numeric.T(a,f);return y=y.mul(b),numeric.convpow2(y.x,y.y,numeric.clone(b.x),numeric.neg(b.y)),y=y.mul(b),y.x.length=r,y.y.length=r,y.div(r)},numeric.gradient=function(t,n){var r=n.length,i=t(n);if(isNaN(i))throw new Error("gradient: f(x) is a NaN!");var s=Math.max,o,u=numeric.clone(n),a,f,l=Array(r),c=numeric.div,h=numeric.sub,p,d,s=Math.max,v=.001,m=Math.abs,g=Math.min,y,b,w,E=0,S,x,T;for(o=0;o<r;o++){var N=s(1e-6*i,1e-8);for(;;){++E;if(E>20)throw new Error("Numerical gradient fails");u[o]=n[o]+N,a=t(u),u[o]=n[o]-N,f=t(u),u[o]=n[o];if(isNaN(a)||isNaN(f)){N/=16;continue}l[o]=(a-f)/(2*N),y=n[o]-N,b=n[o],w=n[o]+N,S=(a-i)/N,x=(i-f)/N,T=s(m(l[o]),m(i),m(a),m(f),m(y),m(b),m(w),1e-8),p=g(s(m(S-l[o]),m(x-l[o]),m(S-x))/T,N/T);if(!(p>v))break;N/=16}}return l},numeric.uncmin=function(t,n,r,i,s,o,u){var a=numeric.gradient;typeof u=="undefined"&&(u={}),typeof r=="undefined"&&(r=1e-8),typeof i=="undefined"&&(i=function(e){return a(t,e)}),typeof s=="undefined"&&(s=1e3),n=numeric.clone(n);var f=n.length,l=t(n),c,h;if(isNaN(l))throw new Error("uncmin: f(x0) is a NaN!");var p=Math.max,d=numeric.norm2;r=p(r,numeric.epsilon);var v,m,g,y=u.Hinv||numeric.identity(f),b=numeric.dot,w=numeric.inv,E=numeric.sub,S=numeric.add,x=numeric.tensor,T=numeric.div,N=numeric.mul,C=numeric.all,k=numeric.isFinite,L=numeric.neg,A=0,O,M,_,D,P,H,B,j,F,I,q,R,U="";m=i(n);while(A<s){if(typeof o=="function"&&o(A,n,l,m,y)){U="Callback returned true";break}if(!C(k(m))){U="Gradient has Infinity or NaN";break}v=L(b(y,m));if(!C(k(v))){U="Search direction has Infinity or NaN";break}I=d(v);if(I<r){U="Newton step smaller than tol";break}F=1,h=b(m,v),_=n;while(A<s){if(F*I<r)break;M=N(v,F),_=S(n,M),c=t(_);if(c-l>=.1*F*h||isNaN(c)){F*=.5,++A;continue}break}if(F*I<r){U="Line search step size smaller than tol";break}if(A===s){U="maxit reached during line search";break}g=i(_),D=E(g,m),B=b(D,M),P=b(y,D),y=E(S(y,N((B+b(D,P))/(B*B),x(M,M))),T(S(x(P,M),x(M,P)),B)),n=_,l=c,m=g,++A}return{solution:n,f:l,gradient:m,invHessian:y,iterations:A,message:U}},numeric.Dopri=function(t,n,r,i,s,o,u){this.x=t,this.y=n,this.f=r,this.ymid=i,this.iterations=s,this.events=u,this.message=o},numeric.Dopri.prototype._at=function(t,n){function r(e){return e*e}var i=this,s=i.x,o=i.y,u=i.f,a=i.ymid,f=s.length,l,c,h,p,d,v,t,m=Math.floor,g,y=.5,b=numeric.add,w=numeric.mul,E=numeric.sub,S,x,T;return l=s[n],c=s[n+1],p=o[n],d=o[n+1],g=c-l,h=l+y*g,v=a[n],S=E(u[n],w(p,1/(l-h)+2/(l-c))),x=E(u[n+1],w(d,1/(c-h)+2/(c-l))),T=[r(t-c)*(t-h)/r(l-c)/(l-h),r(t-l)*r(t-c)/r(l-h)/r(c-h),r(t-l)*(t-h)/r(c-l)/(c-h),(t-l)*r(t-c)*(t-h)/r(l-c)/(l-h),(t-c)*r(t-l)*(t-h)/r(l-c)/(c-h)],b(b(b(b(w(p,T[0]),w(v,T[1])),w(d,T[2])),w(S,T[3])),w(x,T[4]))},numeric.Dopri.prototype.at=function(t){var n,r,i,s=Math.floor;if(typeof t!="number"){var o=t.length,u=Array(o);for(n=o-1;n!==-1;--n)u[n]=this.at(t[n]);return u}var a=this.x;n=0,r=a.length-1;while(r-n>1)i=s(.5*(n+r)),a[i]<=t?n=i:r=i;return this._at(t,n)},numeric.dopri=function(t,n,r,i,s,o,u){typeof s=="undefined"&&(s=1e-6),typeof o=="undefined"&&(o=1e3);var a=[t],f=[r],l=[i(t,r)],c,h,p,d,v,m,g=[],y=.2,b=[.075,.225],w=[44/45,-56/15,32/9],E=[19372/6561,-25360/2187,64448/6561,-212/729],S=[9017/3168,-355/33,46732/5247,49/176,-5103/18656],x=[35/384,0,500/1113,125/192,-2187/6784,11/84],T=[.10013431883002395,0,.3918321794184259,-0.02982460176594817,.05893268337240795,-0.04497888809104361,.023904308236133973],N=[.2,.3,.8,8/9,1,1],C=[-71/57600,0,71/16695,-71/1920,17253/339200,-22/525,.025],k=0,L,A,O=(n-t)/10,M=0,_=numeric.add,D=numeric.mul,P,H,B=Math.max,j=Math.min,F=Math.abs,I=numeric.norminf,q=Math.pow,R=numeric.any,U=numeric.lt,z=numeric.and,W=numeric.sub,X,V,$,J=new numeric.Dopri(a,f,l,g,-1,"");typeof u=="function"&&(X=u(t,r));while(t<n&&M<o){++M,t+O>n&&(O=n-t),c=i(t+N[0]*O,_(r,D(y*O,l[k]))),h=i(t+N[1]*O,_(_(r,D(b[0]*O,l[k])),D(b[1]*O,c))),p=i(t+N[2]*O,_(_(_(r,D(w[0]*O,l[k])),D(w[1]*O,c)),D(w[2]*O,h))),d=i(t+N[3]*O,_(_(_(_(r,D(E[0]*O,l[k])),D(E[1]*O,c)),D(E[2]*O,h)),D(E[3]*O,p))),v=i(t+N[4]*O,_(_(_(_(_(r,D(S[0]*O,l[k])),D(S[1]*O,c)),D(S[2]*O,h)),D(S[3]*O,p)),D(S[4]*O,d))),P=_(_(_(_(_(r,D(l[k],O*x[0])),D(h,O*x[2])),D(p,O*x[3])),D(d,O*x[4])),D(v,O*x[5])),m=i(t+O,P),L=_(_(_(_(_(D(l[k],O*C[0]),D(h,O*C[2])),D(p,O*C[3])),D(d,O*C[4])),D(v,O*C[5])),D(m,O*C[6])),typeof L=="number"?H=F(L):H=I(L);if(H>s){O=.2*O*q(s/H,.25);if(t+O===t){J.msg="Step size became too small";break}continue}g[k]=_(_(_(_(_(_(r,D(l[k],O*T[0])),D(h,O*T[2])),D(p,O*T[3])),D(d,O*T[4])),D(v,O*T[5])),D(m,O*T[6])),++k,a[k]=t+O,f[k]=P,l[k]=m;if(typeof u=="function"){var K,Q=t,G=t+.5*O,Y;V=u(G,g[k-1]),$=z(U(X,0),U(0,V)),R($)||(Q=G,G=t+O,X=V,V=u(G,P),$=z(U(X,0),U(0,V)));if(R($)){var Z,et,tt,nt,rt=0,it=1,st=1;for(;;){if(typeof X=="number")Y=(st*V*Q-it*X*G)/(st*V-it*X);else{Y=G;for(A=X.length-1;A!==-1;--A)X[A]<0&&V[A]>0&&(Y=j(Y,(st*V[A]*Q-it*X[A]*G)/(st*V[A]-it*X[A])))}if(Y<=Q||Y>=G)break;K=J._at(Y,k-1),nt=u(Y,K),tt=z(U(X,0),U(0,nt)),R(tt)?(G=Y,V=nt,$=tt,st=1,rt===-1?it*=.5:it=1,rt=-1):(Q=Y,X=nt,it=1,rt===1?st*=.5:st=1,rt=1)}return P=J._at(.5*(t+Y),k-1),J.f[k]=i(Y,K),J.x[k]=Y,J.y[k]=K,J.ymid[k-1]=P,J.events=$,J.iterations=M,J}}t+=O,r=P,X=V,O=j(.8*O*q(s/H,.25),4*O)}return J.iterations=M,J},numeric.LU=function(e,t){t=t||!1;var n=Math.abs,r,i,s,o,u,a,f,l,c,h=e.length,p=h-1,d=new Array(h);t||(e=numeric.clone(e));for(s=0;s<h;++s){f=s,a=e[s],c=n(a[s]);for(i=s+1;i<h;++i)o=n(e[i][s]),c<o&&(c=o,f=i);d[s]=f,f!=s&&(e[s]=e[f],e[f]=a,a=e[s]),u=a[s];for(r=s+1;r<h;++r)e[r][s]/=u;for(r=s+1;r<h;++r){l=e[r];for(i=s+1;i<p;++i)l[i]-=l[s]*a[i],++i,l[i]-=l[s]*a[i];i===p&&(l[i]-=l[s]*a[i])}}return{LU:e,P:d}},numeric.LUsolve=function(t,n){var r,i,s=t.LU,o=s.length,u=numeric.clone(n),a=t.P,f,l,c,h;for(r=o-1;r!==-1;--r)u[r]=n[r];for(r=0;r<o;++r){f=a[r],a[r]!==r&&(h=u[r],u[r]=u[f],u[f]=h),l=s[r];for(i=0;i<r;++i)u[r]-=u[i]*l[i]}for(r=o-1;r>=0;--r){l=s[r];for(i=r+1;i<o;++i)u[r]-=u[i]*l[i];u[r]/=l[r]}return u},numeric.solve=function(t,n,r){return numeric.LUsolve(numeric.LU(t,r),n)},numeric.echelonize=function(t){var n=numeric.dim(t),r=n[0],i=n[1],s=numeric.identity(r),o=Array(r),u,a,f,l,c,h,p,d,v=Math.abs,m=numeric.diveq;t=numeric.clone(t);for(u=0;u<r;++u){f=0,c=t[u],h=s[u];for(a=1;a<i;++a)v(c[f])<v(c[a])&&(f=a);o[u]=f,m(h,c[f]),m(c,c[f]);for(a=0;a<r;++a)if(a!==u){p=t[a],d=p[f];for(l=i-1;l!==-1;--l)p[l]-=c[l]*d;p=s[a];for(l=r-1;l!==-1;--l)p[l]-=h[l]*d}}return{I:s,A:t,P:o}},numeric.__solveLP=function(t,n,r,i,s,o,u){var a=numeric.sum,f=numeric.log,l=numeric.mul,c=numeric.sub,h=numeric.dot,p=numeric.div,d=numeric.add,v=t.length,m=r.length,g,y=!1,b,w=0,E=1,S,x,T=numeric.transpose(n),N=numeric.svd,C=numeric.transpose,k=numeric.leq,L=Math.sqrt,A=Math.abs,O=numeric.muleq,M=numeric.norminf,_=numeric.any,D=Math.min,P=numeric.all,H=numeric.gt,B=Array(v),j=Array(m),F=numeric.rep([m],1),I,q=numeric.solve,R=c(r,h(n,o)),U,z=h(t,t),W;for(U=w;U<s;++U){var X,V,$;for(X=m-1;X!==-1;--X)j[X]=p(n[X],R[X]);var J=C(j);for(X=v-1;X!==-1;--X)B[X]=a(J[X]);E=.25*A(z/h(t,B));var K=100*L(z/h(B,B));if(!isFinite(E)||E>K)E=K;W=d(t,l(E,B)),I=h(J,j);for(X=v-1;X!==-1;--X)I[X][X]+=1;$=q(I,p(W,E),!0);var Q=p(R,h(n,$)),G=1;for(X=m-1;X!==-1;--X)Q[X]<0&&(G=D(G,-0.999*Q[X]));g=c(o,l($,G)),R=c(r,h(n,g));if(!P(H(R,0)))return{solution:o,message:"",iterations:U};o=g;if(E<i)return{solution:g,message:"",iterations:U};if(u){var Y=h(t,W),Z=h(n,W);y=!0;for(X=m-1;X!==-1;--X)if(Y*Z[X]<0){y=!1;break}}else o[v-1]>=0?y=!1:y=!0;if(y)return{solution:g,message:"Unbounded",iterations:U}}return{solution:o,message:"maximum iteration count exceeded",iterations:U}},numeric._solveLP=function(t,n,r,i,s){var o=t.length,u=r.length,a,f=numeric.sum,l=numeric.log,c=numeric.mul,h=numeric.sub,p=numeric.dot,d=numeric.div,v=numeric.add,m=numeric.rep([o],0).concat([1]),g=numeric.rep([u,1],-1),y=numeric.blockMatrix([[n,g]]),b=r,a=numeric.rep([o],0).concat(Math.max(0,numeric.sup(numeric.neg(r)))+1),w=numeric.__solveLP(m,y,b,i,s,a,!1),E=numeric.clone(w.solution);E.length=o;var S=numeric.inf(h(r,p(n,E)));if(S<0)return{solution:NaN,message:"Infeasible",iterations:w.iterations};var x=numeric.__solveLP(t,n,r,i,s-w.iterations,E,!0);return x.iterations+=w.iterations,x},numeric.solveLP=function(t,n,r,i,s,o,u){typeof u=="undefined"&&(u=1e3),typeof o=="undefined"&&(o=numeric.epsilon);if(typeof i=="undefined")return numeric._solveLP(t,n,r,o,u);var a=i.length,f=i[0].length,l=n.length,c=numeric.echelonize(i),h=numeric.rep([f],0),p=c.P,d=[],v;for(v=p.length-1;v!==-1;--v)h[p[v]]=1;for(v=f-1;v!==-1;--v)h[v]===0&&d.push(v);var m=numeric.getRange,g=numeric.linspace(0,a-1),y=numeric.linspace(0,l-1),b=m(i,g,d),w=m(n,y,p),E=m(n,y,d),S=numeric.dot,x=numeric.sub,T=S(w,c.I),N=x(E,S(T,b)),C=x(r,S(T,s)),k=Array(p.length),L=Array(d.length);for(v=p.length-1;v!==-1;--v)k[v]=t[p[v]];for(v=d.length-1;v!==-1;--v)L[v]=t[d[v]];var A=x(L,S(k,S(c.I,b))),O=numeric._solveLP(A,N,C,o,u),M=O.solution;if(M!==M)return O;var _=S(c.I,x(s,S(b,M))),D=Array(t.length);for(v=p.length-1;v!==-1;--v)D[p[v]]=_[v];for(v=d.length-1;v!==-1;--v)D[d[v]]=M[v];return{solution:D,message:O.message,iterations:O.iterations}},numeric.MPStoLP=function(t){function y(e){throw new Error("MPStoLP: "+e+"\nLine "+s+": "+t[s]+"\nCurrent state: "+r[n]+"\n")}t instanceof String&&t.split("\n");var n=0,r=["Initial state","NAME","ROWS","COLUMNS","RHS","BOUNDS","ENDATA"],i=t.length,s,o,u,a=0,f={},l=[],c=0,h={},p=0,d,v=[],m=[],g=[];for(s=0;s<i;++s){u=t[s];var b=u.match(/\S*/g),w=[];for(o=0;o<b.length;++o)b[o]!==""&&w.push(b[o]);if(w.length===0)continue;for(o=0;o<r.length;++o)if(u.substr(0,r[o].length)===r[o])break;if(o<r.length){n=o,o===1&&(d=w[1]);if(o===6)return{name:d,c:v,A:numeric.transpose(m),b:g,rows:f,vars:h};continue}switch(n){case 0:case 1:y("Unexpected line");case 2:switch(w[0]){case"N":a===0?a=w[1]:y("Two or more N rows");break;case"L":f[w[1]]=c,l[c]=1,g[c]=0,++c;break;case"G":f[w[1]]=c,l[c]=-1,g[c]=0,++c;break;case"E":f[w[1]]=c,l[c]=0,g[c]=0,++c;break;default:y("Parse error "+numeric.prettyPrint(w))}break;case 3:h.hasOwnProperty(w[0])||(h[w[0]]=p,v[p]=0,m[p]=numeric.rep([c],0),++p);var E=h[w[0]];for(o=1;o<w.length;o+=2){if(w[o]===a){v[E]=parseFloat(w[o+1]);continue}var S=f[w[o]];m[E][S]=(l[S]<0?-1:1)*parseFloat(w[o+1])}break;case 4:for(o=1;o<w.length;o+=2)g[f[w[o]]]=(l[f[w[o]]]<0?-1:1)*parseFloat(w[o+1]);break;case 5:break;case 6:y("Internal error")}}y("Reached end of file without ENDATA")},numeric.seedrandom={pow:Math.pow,random:Math.random},function(e,t,n,r,i,s,o){function u(e){var t,r,i=this,s=e.length,o=0,u=i.i=i.j=i.m=0;i.S=[],i.c=[],s||(e=[s++]);while(o<n)i.S[o]=o++;for(o=0;o<n;o++)t=i.S[o],u=l(u+t+e[o%s]),r=i.S[u],i.S[o]=r,i.S[u]=t;i.g=function(t){var r=i.S,s=l(i.i+1),o=r[s],u=l(i.j+o),a=r[u];r[s]=a,r[u]=o;var f=r[l(o+a)];while(--t)s=l(s+1),o=r[s],u=l(u+o),a=r[u],r[s]=a,r[u]=o,f=f*n+r[l(o+a)];return i.i=s,i.j=u,f},i.g(n)}function a(e,t,n,r,i){n=[],i=typeof e;if(t&&i=="object")for(r in e)if(r.indexOf("S")<5)try{n.push(a(e[r],t-1))}catch(s){}return n.length?n:e+(i!="string"?"\0":"")}function f(e,t,n,r){e+="",n=0;for(r=0;r<e.length;r++)t[l(r)]=l((n^=t[l(r)]*19)+e.charCodeAt(r));e="";for(r in t)e+=String.fromCharCode(t[r]);return e}function l(e){return e&n-1}t.seedrandom=function(c,h){var p=[],d;return c=f(a(h?[c,e]:arguments.length?c:[(new Date).getTime(),e,window],3),p),d=new u(p),f(d.S,e),t.random=function(){var t=d.g(r),u=o,a=0;while(t<i)t=(t+a)*n,u*=n,a=d.g(1);while(t>=s)t/=2,u/=2,a>>>=1;return(t+a)/u},c},o=t.pow(n,r),i=t.pow(2,i),s=i*2,f(t.random(),e)}([],numeric.seedrandom,256,6,52),function(e){function t(e){if(typeof e!="object")return e;var n=[],r,i=e.length;for(r=0;r<i;r++)n[r+1]=t(e[r]);return n}function n(e){if(typeof e!="object")return e;var t=[],r,i=e.length;for(r=1;r<i;r++)t[r-1]=n(e[r]);return t}function r(e,t,n){var r,i,s,o,u;for(s=1;s<=n;s+=1){e[s][s]=1/e[s][s],u=-e[s][s];for(r=1;r<s;r+=1)e[r][s]=u*e[r][s];o=s+1;if(n<o)break;for(i=o;i<=n;i+=1){u=e[s][i],e[s][i]=0;for(r=1;r<=s;r+=1)e[r][i]=e[r][i]+u*e[r][s]}}}function i(e,t,n,r){var i,s,o,u;for(s=1;s<=n;s+=1){u=0;for(i=1;i<s;i+=1)u+=e[i][s]*r[i];r[s]=(r[s]-u)/e[s][s]}for(o=1;o<=n;o+=1){s=n+1-o,r[s]=r[s]/e[s][s],u=-r[s];for(i=1;i<s;i+=1)r[i]=r[i]+u*e[i][s]}}function s(e,t,n,r){var i,s,o,u,a,f;for(s=1;s<=n;s+=1){r[1]=s,f=0,o=s-1;if(o<1){f=e[s][s]-f;if(f<=0)break;e[s][s]=Math.sqrt(f)}else{for(u=1;u<=o;u+=1){a=e[u][s];for(i=1;i<u;i+=1)a-=e[i][s]*e[i][u];a/=e[u][u],e[u][s]=a,f+=a*a}f=e[s][s]-f;if(f<=0)break;e[s][s]=Math.sqrt(f)}r[1]=0}}function o(e,t,n,o,u,a,f,l,c,h,p,d,v,m,g,y){function V(){m[1]=m[1]+1,E=L;for(b=1;b<=h;b+=1){E+=1,P=-l[b];for(w=1;w<=o;w+=1)P+=f[w][b]*u[w];Math.abs(P)<U&&(P=0);if(b>p)g[E]=P;else{g[E]=-Math.abs(P);if(P>0){for(w=1;w<=o;w+=1)f[w][b]=-f[w][b];l[b]=-l[b]}}}for(b=1;b<=v;b+=1)g[L+d[b]]=0;O=0,D=0;for(b=1;b<=h;b+=1)g[L+b]<D*g[_+b]&&(O=b,D=g[L+b]/g[_+b]);return O===0?999:0}function $(){for(b=1;b<=o;b+=1){P=0;for(w=1;w<=o;w+=1)P+=e[w][b]*f[w][O];g[b]=P}S=N;for(b=1;b<=o;b+=1)g[S+b]=0;for(w=v+1;w<=o;w+=1)for(b=1;b<=o;b+=1)g[S+b]=g[S+b]+e[b][w]*g[w];q=!0;for(b=v;b>=1;b-=1){P=g[b],E=k+b*(b+3)/2,S=E-b;for(w=b+1;w<=v;w+=1)P-=g[E]*g[C+w],E+=w;P/=g[S],g[C+b]=P;if(d[b]<p)break;if(P<0)break;q=!1,T=b}if(!q){H=g[A+T]/g[C+T];for(b=1;b<=v;b+=1){if(d[b]<p)break;if(g[C+b]<0)break;D=g[A+b]/g[C+b],D<
	H&&(H=D,T=b)}}P=0;for(b=N+1;b<=N+o;b+=1)P+=g[b]*g[b];if(Math.abs(P)<=U){if(q)return y[1]=1,999;for(b=1;b<=v;b+=1)g[A+b]=g[A+b]-H*g[C+b];return g[A+v+1]=g[A+v+1]+H,700}P=0;for(b=1;b<=o;b+=1)P+=g[N+b]*f[b][O];B=-g[L+O]/P,R=!0,q||H<B&&(B=H,R=!1);for(b=1;b<=o;b+=1)u[b]=u[b]+B*g[N+b],Math.abs(u[b])<U&&(u[b]=0);a[1]=a[1]+B*P*(B/2+g[A+v+1]);for(b=1;b<=v;b+=1)g[A+b]=g[A+b]-B*g[C+b];g[A+v+1]=g[A+v+1]+B;if(!R){P=-l[O];for(w=1;w<=o;w+=1)P+=u[w]*f[w][O];if(O>p)g[L+O]=P;else{g[L+O]=-Math.abs(P);if(P>0){for(w=1;w<=o;w+=1)f[w][O]=-f[w][O];l[O]=-l[O]}}return 700}v+=1,d[v]=O,E=k+(v-1)*v/2+1;for(b=1;b<=v-1;b+=1)g[E]=g[b],E+=1;if(v===o)g[E]=g[o];else{for(b=o;b>=v+1;b-=1){if(g[b]===0)break;j=Math.max(Math.abs(g[b-1]),Math.abs(g[b])),F=Math.min(Math.abs(g[b-1]),Math.abs(g[b])),g[b-1]>=0?D=Math.abs(j*Math.sqrt(1+F*F/(j*j))):D=-Math.abs(j*Math.sqrt(1+F*F/(j*j))),j=g[b-1]/D,F=g[b]/D;if(j===1)break;if(j===0){g[b-1]=F*D;for(w=1;w<=o;w+=1)D=e[w][b-1],e[w][b-1]=e[w][b],e[w][b]=D}else{g[b-1]=D,I=F/(1+j);for(w=1;w<=o;w+=1)D=j*e[w][b-1]+F*e[w][b],e[w][b]=I*(e[w][b-1]+D)-e[w][b],e[w][b-1]=D}}g[E]=g[v]}return 0}function J(){E=k+T*(T+1)/2+1,S=E+T;if(g[S]===0)return 798;j=Math.max(Math.abs(g[S-1]),Math.abs(g[S])),F=Math.min(Math.abs(g[S-1]),Math.abs(g[S])),g[S-1]>=0?D=Math.abs(j*Math.sqrt(1+F*F/(j*j))):D=-Math.abs(j*Math.sqrt(1+F*F/(j*j))),j=g[S-1]/D,F=g[S]/D;if(j===1)return 798;if(j===0){for(b=T+1;b<=v;b+=1)D=g[S-1],g[S-1]=g[S],g[S]=D,S+=b;for(b=1;b<=o;b+=1)D=e[b][T],e[b][T]=e[b][T+1],e[b][T+1]=D}else{I=F/(1+j);for(b=T+1;b<=v;b+=1)D=j*g[S-1]+F*g[S],g[S]=I*(g[S-1]+D)-g[S],g[S-1]=D,S+=b;for(b=1;b<=o;b+=1)D=j*e[b][T]+F*e[b][T+1],e[b][T+1]=I*(e[b][T]+D)-e[b][T+1],e[b][T]=D}return 0}function K(){S=E-T;for(b=1;b<=T;b+=1)g[S]=g[E],E+=1,S+=1;return g[A+T]=g[A+T+1],d[T]=d[T+1],T+=1,T<v?797:0}function Q(){return g[A+v]=g[A+v+1],g[A+v+1]=0,d[v]=0,v-=1,m[2]=m[2]+1,0}var b,w,E,S,x,T,N,C,k,L,A,O,M,_,D,P,H,B,j,F,I,q,R,U,z,W,X;M=Math.min(o,h),E=2*o+M*(M+5)/2+2*h+1,U=1e-60;do U+=U,z=1+.1*U,W=1+.2*U;while(z<=1||W<=1);for(b=1;b<=o;b+=1)g[b]=t[b];for(b=o+1;b<=E;b+=1)g[b]=0;for(b=1;b<=h;b+=1)d[b]=0;x=[];if(y[1]===0){s(e,n,o,x);if(x[1]!==0){y[1]=2;return}i(e,n,o,t),r(e,n,o)}else{for(w=1;w<=o;w+=1){u[w]=0;for(b=1;b<=w;b+=1)u[w]=u[w]+e[b][w]*t[b]}for(w=1;w<=o;w+=1){t[w]=0;for(b=w;b<=o;b+=1)t[w]=t[w]+e[w][b]*u[b]}}a[1]=0;for(w=1;w<=o;w+=1){u[w]=t[w],a[1]=a[1]+g[w]*u[w],g[w]=0;for(b=w+1;b<=o;b+=1)e[b][w]=0}a[1]=-a[1]/2,y[1]=0,N=o,C=N+o,A=C+M,k=A+M+1,L=k+M*(M+1)/2,_=L+h;for(b=1;b<=h;b+=1){P=0;for(w=1;w<=o;w+=1)P+=f[w][b]*f[w][b];g[_+b]=Math.sqrt(P)}v=0,m[1]=0,m[2]=0,X=0;for(;;){X=V();if(X===999)return;for(;;){X=$();if(X===0)break;if(X===999)return;if(X===700)if(T===v)Q();else{for(;;){J(),X=K();if(X!==797)break}Q()}}}}function u(e,r,i,s,u,a){e=t(e),r=t(r),i=t(i);var f,l,c,h,p,d=[],v=[],m=[],g=[],y=[],b;u=u||0,a=a?t(a):[undefined,0],s=s?t(s):[],l=e.length-1,c=i[1].length-1;if(!s)for(f=1;f<=c;f+=1)s[f]=0;for(f=1;f<=c;f+=1)v[f]=0;h=0,p=Math.min(l,c);for(f=1;f<=l;f+=1)m[f]=0;d[1]=0;for(f=1;f<=2*l+p*(p+5)/2+2*c+1;f+=1)g[f]=0;for(f=1;f<=2;f+=1)y[f]=0;return o(e,r,l,l,m,d,i,s,l,c,u,v,h,y,g,a),b="",a[1]===1&&(b="constraints are inconsistent, no solution!"),a[1]===2&&(b="matrix D in quadratic function is not positive definite!"),{solution:n(m),value:n(d),unconstrained_solution:n(r),iterations:n(y),iact:n(v),message:b}}e.solveQP=u}(numeric),numeric.svd=function(t){function g(e,t){return e=Math.abs(e),t=Math.abs(t),e>t?e*Math.sqrt(1+t*t/e/e):t==0?e:t*Math.sqrt(1+e*e/t/t)}var n,r=numeric.epsilon,i=1e-64/r,s=50,o=0,u=0,a=0,f=0,l=0,c=numeric.clone(t),h=c.length,p=c[0].length;if(h<p)throw"Need more rows than columns";var d=new Array(p),v=new Array(p);for(u=0;u<p;u++)d[u]=v[u]=0;var m=numeric.rep([p,p],0),y=0,b=0,w=0,E=0,S=0,x=0,T=0;for(u=0;u<p;u++){d[u]=b,T=0,l=u+1;for(a=u;a<h;a++)T+=c[a][u]*c[a][u];if(T<=i)b=0;else{y=c[u][u],b=Math.sqrt(T),y>=0&&(b=-b),w=y*b-T,c[u][u]=y-b;for(a=l;a<p;a++){T=0;for(f=u;f<h;f++)T+=c[f][u]*c[f][a];y=T/w;for(f=u;f<h;f++)c[f][a]+=y*c[f][u]}}v[u]=b,T=0;for(a=l;a<p;a++)T+=c[u][a]*c[u][a];if(T<=i)b=0;else{y=c[u][u+1],b=Math.sqrt(T),y>=0&&(b=-b),w=y*b-T,c[u][u+1]=y-b;for(a=l;a<p;a++)d[a]=c[u][a]/w;for(a=l;a<h;a++){T=0;for(f=l;f<p;f++)T+=c[a][f]*c[u][f];for(f=l;f<p;f++)c[a][f]+=T*d[f]}}S=Math.abs(v[u])+Math.abs(d[u]),S>E&&(E=S)}for(u=p-1;u!=-1;u+=-1){if(b!=0){w=b*c[u][u+1];for(a=l;a<p;a++)m[a][u]=c[u][a]/w;for(a=l;a<p;a++){T=0;for(f=l;f<p;f++)T+=c[u][f]*m[f][a];for(f=l;f<p;f++)m[f][a]+=T*m[f][u]}}for(a=l;a<p;a++)m[u][a]=0,m[a][u]=0;m[u][u]=1,b=d[u],l=u}for(u=p-1;u!=-1;u+=-1){l=u+1,b=v[u];for(a=l;a<p;a++)c[u][a]=0;if(b!=0){w=c[u][u]*b;for(a=l;a<p;a++){T=0;for(f=l;f<h;f++)T+=c[f][u]*c[f][a];y=T/w;for(f=u;f<h;f++)c[f][a]+=y*c[f][u]}for(a=u;a<h;a++)c[a][u]=c[a][u]/b}else for(a=u;a<h;a++)c[a][u]=0;c[u][u]+=1}r*=E;for(f=p-1;f!=-1;f+=-1)for(var N=0;N<s;N++){var C=!1;for(l=f;l!=-1;l+=-1){if(Math.abs(d[l])<=r){C=!0;break}if(Math.abs(v[l-1])<=r)break}if(!C){o=0,T=1;var k=l-1;for(u=l;u<f+1;u++){y=T*d[u],d[u]=o*d[u];if(Math.abs(y)<=r)break;b=v[u],w=g(y,b),v[u]=w,o=b/w,T=-y/w;for(a=0;a<h;a++)S=c[a][k],x=c[a][u],c[a][k]=S*o+x*T,c[a][u]=-S*T+x*o}}x=v[f];if(l==f){if(x<0){v[f]=-x;for(a=0;a<p;a++)m[a][f]=-m[a][f]}break}if(N>=s-1)throw"Error: no convergence.";E=v[l],S=v[f-1],b=d[f-1],w=d[f],y=((S-x)*(S+x)+(b-w)*(b+w))/(2*w*S),b=g(y,1),y<0?y=((E-x)*(E+x)+w*(S/(y-b)-w))/E:y=((E-x)*(E+x)+w*(S/(y+b)-w))/E,o=1,T=1;for(u=l+1;u<f+1;u++){b=d[u],S=v[u],w=T*b,b=o*b,x=g(y,w),d[u-1]=x,o=y/x,T=w/x,y=E*o+b*T,b=-E*T+b*o,w=S*T,S*=o;for(a=0;a<p;a++)E=m[a][u-1],x=m[a][u],m[a][u-1]=E*o+x*T,m[a][u]=-E*T+x*o;x=g(y,w),v[u-1]=x,o=y/x,T=w/x,y=o*b+T*S,E=-T*b+o*S;for(a=0;a<h;a++)S=c[a][u-1],x=c[a][u],c[a][u-1]=S*o+x*T,c[a][u]=-S*T+x*o}d[l]=0,d[f]=y,v[f]=E}for(u=0;u<v.length;u++)v[u]<r&&(v[u]=0);for(u=0;u<p;u++)for(a=u-1;a>=0;a--)if(v[a]<v[u]){o=v[a],v[a]=v[u],v[u]=o;for(f=0;f<c.length;f++)n=c[f][u],c[f][u]=c[f][a],c[f][a]=n;for(f=0;f<m.length;f++)n=m[f][u],m[f][u]=m[f][a],m[f][a]=n;u=a}return{U:c,S:v,V:m}};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;"use strict";

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){
	return{

	  svmFilter : function() {
	  
	  var _fft, fft_filters, responses, biases;
	  var fft_size, filterLength, filter_width, search_width, num_patches;
	  var temp_imag_part, temp_real_part;
	  
	  // fft function
	  this.fft_inplace = function(array, _im_part) {
	      // in-place
	      
	      if (typeof _im_part == "undefined") {
	        _im_part = temp_imag_part;
	      }
	      
	      for (var i = 0;i < filterLength;i++) {
	        _im_part[i] = 0.0;
	      }
	      
	      _fft.real_fft2d(array,_im_part);
	      
	      return [array, _im_part];
	  }
	  
	  this.ifft = function(rn, cn) {
	      // in-place
	      _fft.real_ifft2d(rn, cn);
	      return rn;
	  }
	  
	  var complex_mult_inplace = function(cn1, cn2) {
	      // in-place, cn1 is the one modified
	      var temp1, temp2;
	      for (var r = 0;r < filterLength;r++) {
	          temp1 = (cn1[0][r]*cn2[0][r]) - (cn1[1][r]*cn2[1][r]);
	          temp2 = (cn1[0][r]*cn2[1][r]) + (cn1[1][r]*cn2[0][r]);
	          cn1[0][r] = temp1;
	          cn1[1][r] = temp2;
	      }
	  }
	  
	  this.init = function(filter_input, bias_input, numPatches, filterWidth, searchWidth) {
	    
	    var temp, fft, offset;
	    
	    // calculate needed size of fft (has to be power of two)
	    fft_size = upperPowerOfTwo(filterWidth-1+searchWidth);
	    filterLength = fft_size*fft_size;
	    _fft = new FFT();
	    _fft.init(fft_size);
	    fft_filters = Array(numPatches);
	    var fft_filter;
	    var edge = (filterWidth-1)/2;
	    
	    for (var i = 0;i < numPatches;i++) {
	      var flar_fi0 = new Float64Array(filterLength);
	      var flar_fi1 = new Float64Array(filterLength);
	      
	      // load filter 
	      var xOffset, yOffset;
	      for (var j = 0;j < filterWidth;j++) {
	        for (var k = 0;k < filterWidth;k++) {
	          // TODO : rotate filter
	          
	          xOffset = k < edge ? (fft_size-edge) : (-edge);
	          yOffset = j < edge ? (fft_size-edge) : (-edge);
	          flar_fi0[k+xOffset+((j+yOffset)*fft_size)] = filter_input[i][(filterWidth-1-j)+((filterWidth-1-k)*filterWidth)];
	          
	          /*xOffset = k < edge ? (fft_size-edge) : (-edge);
	          yOffset = j < edge ? (fft_size-edge) : (-edge);
	          flar_fi0[k+xOffset+((j+yOffset)*fft_size)] = filter_input[i][k+(j*filterWidth)];*/
	          
	          //console.log(k + ","+ j+":" + (k+xOffset+((j+yOffset)*fft_size)))
	        }
	      }

	      // fft it and store
	      fft_filter = this.fft_inplace(flar_fi0, flar_fi1);
	      fft_filters[i] = fft_filter;

	    }
	    
	    // set up biases
	    biases = new Float64Array(numPatches);
	    for (var i = 0;i < numPatches;i++) {
	      biases[i] = bias_input[i];
	    }
	    
	    responses = Array(numPatches);
	    temp_imag_part = Array(numPatches);
	    for (var i = 0;i < numPatches;i++) {
	      responses[i] = new Float64Array(searchWidth*searchWidth);
	      temp_imag_part[i] = new Float64Array(searchWidth*searchWidth);
	    }
	    temp_real_part = new Float64Array(filterLength);
	    
	    num_patches = numPatches;
	    filter_width = filterWidth;
	    search_width = searchWidth;
	  }
	  
	  this.getResponses = function(patches) {
	    var response, temp, edge;
	    var patch_width = filter_width-1+search_width;
	    for (var i = 0;i < num_patches;i++) {
	      // reset zeroes in temp_real_part
	      for (var j = 0;j < fft_size*fft_size;j++) {
	        temp_real_part[j] = 0.0;
	      }
	      
	      // normalize patches to 0-1
	      patches[i] = normalizePatches(patches[i]);
	      
	      // patch must be padded (with zeroes) to match fft size
	      for (var j = 0;j < patch_width;j++) {
	        for (var k = 0;k < patch_width;k++) {
	          temp_real_part[j + (fft_size*k)] = patches[i][k + (patch_width*j)];
	        }
	      }
	      
	      //drawData(document.getElementById('sketch').getContext('2d'), temp_real_part, 32, 32, false, 0, 0);
	      
	      // fft it
	      response = this.fft_inplace(temp_real_part);
	      
	      // multiply pointwise with filter
	      complex_mult_inplace(response, fft_filters[i]);
	      
	      // inverse fft it
	      response = this.ifft(response[0], response[1]);
	      
	      // crop out edges
	      edge = (filter_width-1)/2;
	      for (var j = 0;j < search_width;j++) {
	        for (var k = 0;k < search_width;k++) {
	          responses[i][j + (k*search_width)] = response[edge + k + ((j+edge)*(fft_size))];
	        }
	      }

	      // add bias
	      for (var j = 0;j < search_width*search_width;j++) {
	        responses[i][j] += biases[i];
	      }
	      
	      // logistic transformation
	      responses[i] = logisticResponse(responses[i]);
	      
	      /*responses[i] = new Float64Array(32*32)
	      for (var j = 0;j < 32;j++) {
	        for (var k = 0;k < 32;k++) {
	          responses[i][k + (j*(32))] = response[k + (j*(32))]
	        }
	      }*/
	      
	      // normalization?
	      inplaceNormalizeFilterMatrix(responses[i]);
	    }
	    
	    return responses;
	  }
	  
	  var normalizePatches = function(patch) {
	    var patch_width = filter_width-1+search_width;
	    var max = 0;
	    var min = 1000;
	    var value;
	    for (var j = 0;j < patch_width;j++) {
	      for (var k = 0;k < patch_width;k++) {
	        value = patch[k + (patch_width*j)]
	        if (value < min) {
	          min = value;
	        }
	        if (value > max) {
	          max = value;
	        }
	      }
	    }
	    var scale = max-min;
	    for (var j = 0;j < patch_width;j++) {
	      for (var k = 0;k < patch_width;k++) {
	        patch[k + (patch_width*j)] = (patch[k + (patch_width*j)]-min)/scale;
	      }
	    }
	    return patch;
	  }
	  
	  var logisticResponse = function(response) {
	    // create probability by doing logistic transformation
	    for (var j = 0;j < search_width;j++) {
	      for (var k = 0;k < search_width;k++) {
	        response[j + (k*search_width)] = 1.0/(1.0 + Math.exp(- (response[j + (k*search_width)] - 1.0 )));
	      }
	    }
	    return response
	  }
	  
	  var upperPowerOfTwo = function(x) {
	    x--;
	    x |= x >> 1;
	    x |= x >> 2;
	    x |= x >> 4;
	    x |= x >> 8;
	    x |= x >> 16;
	    x++;
	    return x;
	  }
	  
	  var inplaceNormalizeFilterMatrix = function(response) {
	    // normalize responses to lie within [0,1]
	    var msize = response.length;
	    var max = 0;
	    var min = 1;
	    
	    for (var i = 0;i < msize;i++) {
	      max = response[i] > max ? response[i] : max;
	      min = response[i] < min ? response[i] : min;
	    }
	    var dist = max-min;
	    
	    if (dist == 0) {
	      console.log("a patchresponse was monotone, causing normalization to fail. Leaving it unchanged.")
	    } else {
	      for (var i = 0;i < msize;i++) {
	        response[i] = (response[i]-min)/dist;
	      }
	    }
	  }

	  /**
	   * Fast Fourier Transform
	   * 1D-FFT/IFFT, 2D-FFT/IFFT (radix-2)
	   * 
	   * @author ryo / github.com/wellflat
	   * Based on https://github.com/wellflat/javascript-labs with some tiny optimizations
	   */

	  function FFT() {
	    
	    var _n = 0,          // order
	        _bitrev = null,  // bit reversal table
	        _cstb = null;    // sin/cos table
	    var _tre, _tim;
	    
	    this.init = function (n) {
	      if(n !== 0 && (n & (n - 1)) === 0) {
	        _n = n;
	        _setVariables();
	        _makeBitReversal();
	        _makeCosSinTable();
	      } else {
	        throw new Error("init: radix-2 required");
	      }
	    }
	      
	    // 1D-FFT
	    this.fft1d = function (re, im) {
	      fft(re, im, 1);
	    }
	      
	    // 1D-IFFT
	    this.ifft1d = function (re, im) {
	      var n = 1/_n;
	      fft(re, im, -1);
	      for(var i=0; i<_n; i++) {
	        re[i] *= n;
	        im[i] *= n;
	      }
	    }
	    
	    // 2D-FFT
	    this.fft2d = function (re, im) {
	      var i = 0;
	      // x-axis
	      for(var y=0; y<_n; y++) {
	        i = y*_n;
	        for(var x1=0; x1<_n; x1++) {
	          _tre[x1] = re[x1 + i];
	          _tim[x1] = im[x1 + i];
	        }
	        this.fft1d(_tre, _tim);
	        for(var x2=0; x2<_n; x2++) {
	          re[x2 + i] = _tre[x2];
	          im[x2 + i] = _tim[x2];
	        }
	      }
	      
	      // y-axis
	      for(var x=0; x<_n; x++) {
	        for(var y1=0; y1<_n; y1++) {
	          i = x + y1*_n;
	          _tre[y1] = re[i];
	          _tim[y1] = im[i];
	        }
	        this.fft1d(_tre, _tim);
	        for(var y2=0; y2<_n; y2++) {
	          i = x + y2*_n;
	          re[i] = _tre[y2];
	          im[i] = _tim[y2];
	        }
	      }
	    }
	    
	    // 2D-IFFT
	    this.ifft2d = function (re, im) {
	      var i = 0;
	      // x-axis
	      for(var y=0; y<_n; y++) {
	        i = y*_n;
	        for(var x1=0; x1<_n; x1++) {
	          _tre[x1] = re[x1 + i];
	          _tim[x1] = im[x1 + i];
	        }
	        this.ifft1d(_tre, _tim);
	        for(var x2=0; x2<_n; x2++) {
	          re[x2 + i] = _tre[x2];
	          im[x2 + i] = _tim[x2];
	        }
	      }
	      // y-axis
	      for(var x=0; x<_n; x++) {
	        for(var y1=0; y1<_n; y1++) {
	          i = x + y1*_n;
	          _tre[y1] = re[i];
	          _tim[y1] = im[i];
	        }
	        this.ifft1d(_tre, _tim);
	        for(var y2=0; y2<_n; y2++) {
	          i = x + y2*_n;
	          re[i] = _tre[y2];
	          im[i] = _tim[y2];
	        }
	      }
	    }
	    
	    // 2D-IFFT, real-valued
	    // only outputs the real valued part
	    this.real_ifft2d = function (re, im) {
	      var i2;
	      var i = 0;
	      // x-axis
	      for(var y=0; y<_n; y++) {
	        i = y*_n;
	        for(var x1=0; x1<_n; x1++) {
	          _tre[x1] = re[x1 + i];
	          _tim[x1] = im[x1 + i];
	        }
	        this.ifft1d(_tre, _tim);
	        for(var x2=0; x2<_n; x2++) {
	          re[x2 + i] = _tre[x2];
	          im[x2 + i] = _tim[x2];
	        }
	      }
	      // y-axis
	      var halfn = _n/2;
	      var rowIdx = 0;
	      for(var x=0; x<_n; x+=2) {
	        //untangle
	        i = x;
	        i2 = x+1;
	        _tre[0] = re[0 + i];
	        _tim[0] = re[0 + i2];
	        _tre[_n/2] = re[(halfn*_n) + i];
	        _tim[_n/2] = re[(halfn*_n) + i2];
	        for (var x2=1;x2<halfn;x2++) {
	          rowIdx = x2*_n
	          _tre[x2] = re[rowIdx+i] - im[rowIdx + i2];
	          _tre[_n - x2] = re[rowIdx+i] + im[rowIdx + i2];
	          _tim[x2] = im[rowIdx+i] + re[rowIdx+i2];
	          _tim[_n - x2] = re[rowIdx+i2] - im[rowIdx+i];
	        }
	        this.ifft1d(_tre, _tim);
	        for(var y2=0; y2<_n; y2++) {
	          i = x + y2*_n;
	          i2 = (x + 1) + y2*_n;
	          re[i] = _tre[y2];
	          re[i2] = _tim[y2];
	        }
	      }
	    }
	    
	    // 2D-FFT, real-valued only
	    // ignores the imaginary input
	    //   see:
	    // http://www.inf.fu-berlin.de/lehre/SS12/SP-Par/download/fft1.pdf
	    // http://cnx.org/content/m12021/latest/
	    // http://images.apple.com/acg/pdf/g4fft.pdf
	    // http://www.ti.com/lit/an/spra291/spra291.pdf
	    this.real_fft2d = function (re, im) {
	      var i = 0, i2 = 0;
	      var fftlen = (_n*_n)-1;
	      // x-axis
	      for(var y=0; y<_n; y += 2) {
	        i = y*_n;
	        i2 = (y+1)*_n;
	        // tangle
	        for(var x1=0; x1<_n; x1++) {
	          _tre[x1] = re[x1 + i];
	          _tim[x1] = re[x1 + i2];
	        }
	        this.fft1d(_tre, _tim);
	        // untangle
	        re[0 + i] = _tre[0];
	        re[0 + i2] = _tim[0];
	        im[0 + i] = 0;
	        im[0 + i2] = 0;
	        re[_n/2 + i] = _tre[_n/2];
	        re[_n/2 + i2] = _tim[_n/2];
	        im[_n/2 + i] = 0;
	        im[_n/2 + i2] = 0;
	        for(var x2=1;x2<(_n/2);x2++) {
	          re[x2 + i] = 0.5 * (_tre[x2] + _tre[_n - x2]);
	          im[x2 + i] = 0.5 * (_tim[x2] - _tim[_n - x2]);
	          re[x2 + i2] = 0.5 * (_tim[x2] + _tim[_n - x2]);
	          im[x2 + i2] = -0.5 * (_tre[x2] - _tre[_n - x2]);
	          re[(_n-x2) + i] = re[x2 + i];
	          im[(_n-x2) + i] = -im[x2 + i];
	          re[(_n-x2) + i2] = re[x2 + i2];
	          im[(_n-x2) + i2] = -im[x2 + i2];
	        }
	      }
	      // y-axis
	      for(var x=0; x<_n; x++) {
	        for(var y1=0; y1<_n; y1++) {
	          i = x + y1*_n;
	          _tre[y1] = re[i];
	          _tim[y1] = im[i];
	        }
	        this.fft1d(_tre, _tim);
	        for(var y2=0; y2<_n; y2++) {
	          i = x + y2*_n;
	          re[i] = _tre[y2];
	          im[i] = _tim[y2];
	        }
	      }
	    }
	    
	    // core operation of FFT
	    function fft(re, im, inv) {
	      var d, h, ik, m, tmp, wr, wi, xr, xi,
	          n4 = _n >> 2;
	      // bit reversal
	      for(var l=0; l<_n; l++) {
	        m = _bitrev[l];
	        if(l < m) {
	          tmp = re[l];
	          re[l] = re[m];
	          re[m] = tmp;
	          tmp = im[l];
	          im[l] = im[m];
	          im[m] = tmp;
	        }
	      }
	      // butterfly operation
	      //butfly(re,im,inv,n4);
	      for(var k=1; k<_n; k<<=1) {
	        h = 0;
	        d = _n/(k << 1);
	        for(var j=0; j<k; j++) {
	          wr = _cstb[h + n4];
	          wi = inv*_cstb[h];
	          for(var i=j; i<_n; i+=(k<<1)) {
	            ik = i + k;
	            xr = wr*re[ik] + wi*im[ik];
	            xi = wr*im[ik] - wi*re[ik];
	            re[ik] = re[i] - xr;
	            re[i] += xr;
	            im[ik] = im[i] - xi;
	            im[i] += xi;
	          }
	          h += d;
	        }
	      }
	    }
	    
	    function butfly(re, im, inv, n4) {
	      var h,d,wr,wi,ik,xr,xi;
	      for(var k=1; k<_n; k<<=1) {
	        h = 0;
	        d = _n/(k << 1);
	        for(var j=0; j<k; j++) {
	          wr = _cstb[h + n4];
	          wi = inv*_cstb[h];
	          for(var i=j; i<_n; i+=(k<<1)) {
	            ik = i + k;
	            xr = wr*re[ik] + wi*im[ik];
	            xi = wr*im[ik] - wi*re[ik];
	            re[ik] = re[i] - xr;
	            re[i] += xr;
	            im[ik] = im[i] - xi;
	            im[i] += xi;
	          }
	          h += d;
	        }
	      }
	    }
	    
	    // set variables
	    function _setVariables() {
	      if(typeof Uint8Array !== 'undefined') {
	        _bitrev = new Uint8Array(_n);
	      } else {
	        _bitrev = new Array(_n);
	      }
	      if(typeof Float64Array !== 'undefined') {
	        _cstb = new Float64Array(_n*1.25);
	        _tre = new Float64Array(_n);
	        _tim = new Float64Array(_n);
	      } else {
	        _cstb = new Array(_n*1.25);
	        _tre = new Array(_n);
	        _tim = new Array(_n);
	      }
	    }
	    
	    // make bit reversal table
	    function _makeBitReversal() {
	      var i = 0,
	          j = 0,
	          k = 0;
	      _bitrev[0] = 0;
	      while(++i < _n) {
	        k = _n >> 1;
	        while(k <= j) {
	          j -= k;
	          k >>= 1;
	        }
	        j += k;
	        _bitrev[i] = j;
	      }
	    }
	    
	    // make trigonometric function table
	    function _makeCosSinTable() {
	      var n2 = _n >> 1,
	          n4 = _n >> 2,
	          n8 = _n >> 3,
	          n2p4 = n2 + n4,
	          t = Math.sin(Math.PI/_n),
	          dc = 2*t*t,
	          ds = Math.sqrt(dc*(2 - dc)),
	          c = _cstb[n4] = 1,
	          s = _cstb[0] = 0;
	      t = 2*dc;
	      for(var i=1; i<n8; i++) {
	        c -= dc;
	        dc += t*c;
	        s += ds;
	        ds -= t*s;
	        _cstb[i] = s;
	        _cstb[n4 - i] = c;
	      }
	      if(n8 !== 0) {
	        _cstb[n8] = Math.sqrt(0.5);
	      }
	      for(var j=0; j<n4; j++) {
	        _cstb[n2 - j]  = _cstb[j];
	      }
	      for(var k=0; k<n2p4; k++) {
	        _cstb[k + n2] = -_cstb[k];
	      }
	    }
	  }
	}
	}}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(10)], __WEBPACK_AMD_DEFINE_RESULT__ = function(webglUtils){
	return {
	webglFilter : function() {

	  /*
	   * Textures:
	   * 0 : raw filter
	   * 1 : patches
	   * 2 : finished response
	   * 3 : grad/lbp treated patches 
	   * 4 : sobel filter
	   * 5 : lbp filter
	   * 
	   * Routing:
	   *         (              )  0/4/5 --\
	   *         (              )          _\|
	   * 1 ----> ( ---------->3 ) ----------> 2
	   *         lbpResponse/      patchResponse
	   *         gradientResponse  
	   */

	  var gl, canvas;
	  var filterWidth, filterHeight, patchWidth, patchHeight, numPatches, canvasWidth, canvasHeight;
	  var patchResponseProgram, patchDrawProgram;
	  var fbo, numBlocks, patchTex;
	  var drawRectBuffer, drawLayerBuffer, drawImageBuffer, rttTexture;
	  var texCoordBuffer, texCoordLocation, apositionBuffer;
	  var newCanvasWidth, newCanvasBlockHeight, newCanvasHeight;
	  var drawOutRectangles, drawOutImages, drawOutLayer;
	  var patchCells, textureWidth, textureHeight, patchSize, patchArray;
	  var biases;
	  
	  var lbpResponseProgram;
	  var lbo, lbpTexCoordLocation, lbpTexCoordBuffer, lbpPositionLocation, lbpAPositionBuffer;

	  var gradientResponseProgram;
	  var gbo, gradTexCoordLocation, gradTexCoordBuffer, gradPositionLocation, gradAPositionBuffer;

	  var lbpInit = false;
	  var sobelInit = false;
	  var rawInit = false;

	  var lbpResponseVS = [
	    "attribute vec2 a_texCoord;",
	    "attribute vec2 a_position;",
	    "",
	    "varying vec2 v_texCoord;",
	    "",
	    "void main() {",
	    "   // transform coordinates to regular coordinates",
	    "   gl_Position = vec4(a_position,0.0,1.0);",
	    " ",
	    "   // pass the texCoord to the fragment shader",
	    "   v_texCoord = a_texCoord;",
	    "}"
	  ].join('\n');
	  var lbpResponseFS;

	  var gradientResponseVS = [
	    "attribute vec2 a_texCoord;",
	    "attribute vec2 a_position;",
	    "",
	    "varying vec2 v_texCoord;",
	    "",
	    "void main() {",
	    "   // transform coordinates to regular coordinates",
	    "   gl_Position = vec4(a_position,0.0,1.0);",
	    " ",
	    "   // pass the texCoord to the fragment shader",
	    "   v_texCoord = a_texCoord;",
	    "}"
	  ].join('\n');
	  var gradientResponseFS;
	  
	  var patchResponseVS;
	  var patchResponseFS;
	  
	  var drawResponsesVS = [
	    "attribute vec2 a_texCoord_draw;",
	    "attribute vec2 a_position_draw;",
	    "attribute float a_patchChoice_draw;",
	    "",
	    "uniform vec2 u_resolutiondraw;",
	    "",
	    "varying vec2 v_texCoord;",
	    "varying float v_select;",
	    "",
	    "void main() {",
	    "   // convert the rectangle from pixels to 0.0 to 1.0",
	    "   vec2 zeroToOne = a_position_draw / u_resolutiondraw;",
	    "",
	    "   // convert from 0->1 to 0->2",
	    "   vec2 zeroToTwo = zeroToOne * 2.0;",
	    "",
	    "   // convert from 0->2 to -1->+1 (clipspace)",
	    "   vec2 clipSpace = zeroToTwo - 1.0;",
	    "   ",
	    "   // transform coordinates to regular coordinates",
	    "   gl_Position = vec4(clipSpace * vec2(1.0, 1.0), 0, 1);",
	    "",
	    "   // pass the texCoord to the fragment shader",
	    "   v_texCoord = a_texCoord_draw;",
	    "   ",
	    "   v_select = a_patchChoice_draw;",
	    "}"
	  ].join('\n');
	  
	  var drawResponsesFS = [
	    "precision mediump float;",
	    "",
	    "// our responses",
	    "uniform sampler2D u_responses;",
	    "",
	    "// the texCoords passed in from the vertex shader.",
	    "varying vec2 v_texCoord;",
	    "varying float v_select;",
	    "",
	    "const vec4 bit_shift = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);",
	    "const vec4 bit_mask  = vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);",
	    "",
	    "// packing code from here http://stackoverflow.com/questions/9882716/packing-float-into-vec4-how-does-this-code-work",
	    "void main() {",
	    "  vec4 colorSum = texture2D(u_responses, v_texCoord);",
	    "  float value = 0.0;",
	    "  if (v_select < 0.1) {",
	    "    value = colorSum[0];",
	    "  } else if (v_select > 0.9 && v_select < 1.1) {",
	    "    value = colorSum[1];",
	    "  } else if (v_select > 1.9 && v_select < 2.1) {",
	    "    value = colorSum[2];",
	    "  } else if (v_select > 2.9 && v_select < 3.1) {",
	    "    value = colorSum[3];",
	    "  } else {",
	    "    value = 1.0;",
	    "  }",
	    "  ",
	    "  vec4 res = fract(value * bit_shift);",
	    "  res -= res.xxyz * bit_mask;",
	    "  ",
	    "  //gl_FragColor = vec4(value, value, value, value);",
	    "  //gl_FragColor = vec4(1.0, value, 1.0, 1.0);",
	    "  gl_FragColor = res;",
	    "}"
	  ].join('\n');
	  
	  this.init = function(filters, bias, nP, pW, pH, fW, fH) {
	    // we assume filterVector goes from left to right, rowwise, i.e. row-major order

	    if (fW != fH) {
	      alert("filter width and height must be same size!");
	      return;
	    }
	    
	    // if filter width is not odd, alert
	    if (fW % 2 == 0 || fH % 2 == 0) {
	      alert("filters used in svm must be of odd dimensions!");
	      return;
	    }
	    
	    // setup variables
	    biases = bias;
	    filterWidth = fW;
	    filterHeight = fH;
	    patchWidth = pW;
	    patchHeight = pH;
	    numPatches = nP;
	    numBlocks = Math.floor(numPatches / 4) + Math.ceil((numPatches % 4)/4);
	    canvasWidth = patchWidth;
	    canvasHeight = patchHeight*numBlocks;
	    newCanvasWidth = patchWidth-filterWidth+1;
	    newCanvasBlockHeight = patchHeight-filterWidth+1;
	    newCanvasHeight = newCanvasBlockHeight*numPatches;
	    patchCells = (Math.floor(numPatches / 4) + Math.ceil((numPatches % 4)/4));
	    textureWidth = patchWidth;
	    textureHeight = patchHeight*patchCells;
	    patchSize = patchWidth*patchHeight;
	    patchArray = new Float32Array(patchSize*patchCells*4);
	    var opp = [1/patchWidth, 1/(patchHeight*numBlocks)];

	    // write out shaders
	    patchResponseFS = [
	      "precision mediump float;",
	      "",
	      "const vec2 u_onePixelPatches = vec2("+(1/patchWidth).toFixed(10)+","+(1/(patchHeight*numBlocks)).toFixed(10)+");",
	      "const vec2 u_onePixelFilters = vec2("+(1/filterWidth).toFixed(10)+","+(1/(filterHeight*numBlocks)).toFixed(10)+");",
	      "const float u_halffilterwidth = "+((filterWidth-1.0)/2).toFixed(1)+";",
	      "const float u_halffilterheight = "+((filterHeight-1.0)/2).toFixed(1)+";",
	      "",
	      "// our patches",
	      "uniform sampler2D u_patches;",
	      "// our filters",
	      "uniform sampler2D u_filters;",
	      "",
	      "// the texCoords passed in from the vertex shader.",
	      "varying vec2 v_texCoord;",
	      "varying vec2 v_texCoordFilters; // this should give us correct filter",
	      "",
	      "void main() {",
	      "  vec4 colorSum = vec4(0.0, 0.0, 0.0, 0.0);",
	      "  vec4 maxn = vec4(0.0, 0.0, 0.0, 0.0);",
	      "  vec4 minn = vec4(256.0, 256.0, 256.0, 256.0);",
	      "  vec4 scale = vec4(0.0, 0.0, 0.0, 0.0);",
	      "  vec4 patchValue = vec4(0.0, 0.0, 0.0, 0.0);",
	      "  vec4 filterValue = vec4(0.0, 0.0, 0.0, 0.0);",
	      "  vec4 filterTemp = vec4(0.0, 0.0, 0.0, 0.0);",
	      "  for (int w = 0;w < "+filterWidth+";w++) {",
	      "    for (int h = 0;h < "+filterHeight+";h++) {",
	      "      patchValue = texture2D(u_patches, v_texCoord + u_onePixelPatches * vec2(float(w)-u_halffilterwidth, float(h)-u_halffilterheight));",
	      "      filterValue = texture2D(u_filters, v_texCoordFilters + u_onePixelFilters * vec2(float(w)-u_halffilterwidth, float(h)-u_halffilterheight));",
	      "      maxn = max(patchValue, maxn);",
	      "      minn = min(patchValue, minn);",
	      "      colorSum += patchValue*filterValue;",
	      "      filterTemp += filterValue;",
	      "    } ",
	      "  }",
	      "  scale = maxn-minn;",
	      "  colorSum = (colorSum-(minn*filterTemp))/scale;",
	      "  // logistic transformation",
	      "  colorSum = 1.0/(1.0 + exp(- (colorSum) ));",
	      "  gl_FragColor = colorSum;",
	      "}"
	    ].join('\n');
	    
	    patchResponseVS = [
	      "attribute vec2 a_texCoord;",
	      "attribute vec2 a_position;",
	      "",
	      "const vec2 u_resolution = vec2("+canvasWidth.toFixed(1)+","+canvasHeight.toFixed(1)+");",
	      "const float u_patchHeight = "+(1/numBlocks).toFixed(10)+";",
	      "const float u_filterHeight = "+(1/numBlocks).toFixed(10)+";",
	      "const vec2 u_midpoint = vec2(0.5 ,"+(1/(numBlocks*2)).toFixed(10)+");",
	      "",
	      "varying vec2 v_texCoord;",
	      "varying vec2 v_texCoordFilters;",
	      "",
	      "void main() {",
	      "   // convert the rectangle from pixels to 0.0 to 1.0",
	      "   vec2 zeroToOne = a_position / u_resolution;",
	      "",
	      "   // convert from 0->1 to 0->2",
	      "   vec2 zeroToTwo = zeroToOne * 2.0;",
	      "",
	      "   // convert from 0->2 to -1->+1 (clipspace)",
	      "   vec2 clipSpace = zeroToTwo - 1.0;",
	      "   ",
	      "   // transform coordinates to regular coordinates",
	      "   gl_Position = vec4(clipSpace * vec2(1.0, 1.0), 0, 1);",
	      " ",
	      "   // pass the texCoord to the fragment shader",
	      "   v_texCoord = a_texCoord;",
	      "   ",
	      "   // set the filtertexture coordinate based on number filter to use",
	      "   v_texCoordFilters = u_midpoint + vec2(0.0, u_filterHeight * floor(a_texCoord[1]/u_patchHeight));",
	      "}"
	    ].join('\n');

	    if ('lbp' in filters) {
	      // lbpResponseFragment
	      lbpResponseFS = [
	        "precision mediump float;",
	        "",
	        "uniform vec2 u_onePixelPatches;",
	        "",
	        "// our patches",
	        "uniform sampler2D u_patches;",
	        "",
	        "// the texCoords passed in from the vertex shader.",
	        "varying vec2 v_texCoord;",
	        "",
	        "void main() {",
	        "  vec4 topLeft = texture2D(u_patches, v_texCoord + vec2(-"+opp[0].toFixed(5)+", -"+opp[1].toFixed(5)+"));",
	        "  vec4 topMid = texture2D(u_patches, v_texCoord + vec2(0.0, -"+opp[1].toFixed(5)+"));",
	        "  vec4 topRight = texture2D(u_patches, v_texCoord + vec2("+opp[0].toFixed(5)+", -"+opp[1].toFixed(5)+"));",
	        "  vec4 midLeft = texture2D(u_patches, v_texCoord + vec2(-"+opp[0].toFixed(5)+", 0.0));",
	        "  vec4 midMid = texture2D(u_patches, v_texCoord);",
	        "  vec4 midRight = texture2D(u_patches, v_texCoord + vec2("+opp[0].toFixed(5)+", 0.0));",
	        "  vec4 bottomLeft = texture2D(u_patches, v_texCoord + vec2(-"+opp[0].toFixed(5)+", "+opp[1].toFixed(5)+"));",
	        "  vec4 bottomMid = texture2D(u_patches, v_texCoord + vec2(0.0, "+opp[1].toFixed(5)+"));",
	        "  vec4 bottomRight = texture2D(u_patches, v_texCoord + vec2("+opp[0].toFixed(5)+", "+opp[1].toFixed(5)+"));",
	        "  vec4 lbp = step(midMid, midRight)*1.0 + step(midMid, topRight)*2.0 + step(midMid, topMid)*4.0;",
	        "  lbp = lbp + step(midMid, topLeft)*8.0 + step(midMid, midLeft)*16.0 + step(midMid, bottomLeft)*32.0;",
	        "  lbp = lbp + step(midMid, bottomMid)*64.0 + step(midMid, bottomRight)*128.0;",
	        "  gl_FragColor = lbp;",
	        "}"
	      ].join('\n');
	    }

	    if ('sobel' in filters) {
	      // gradResponseFragment
	      gradientResponseFS = [
	        "precision mediump float;",
	        "",
	        "uniform vec2 u_onePixelPatches;",
	        "",
	        "// our patches",
	        "uniform sampler2D u_patches;",
	        "",
	        "// the texCoords passed in from the vertex shader.",
	        "varying vec2 v_texCoord;",
	        "",
	        "void main() {",
	        "  vec4 bottomLeft = texture2D(u_patches, v_texCoord + vec2(-"+opp[0].toFixed(5)+", "+opp[1].toFixed(5)+"));",
	        "  vec4 bottomRight = texture2D(u_patches, v_texCoord + vec2("+opp[0].toFixed(5)+", "+opp[1].toFixed(5)+"));",
	        "  vec4 topLeft = texture2D(u_patches, v_texCoord + vec2(-"+opp[0].toFixed(5)+", -"+opp[1].toFixed(5)+"));",
	        "  vec4 topRight = texture2D(u_patches, v_texCoord + vec2("+opp[0].toFixed(5)+", -"+opp[1].toFixed(5)+"));",
	        "  vec4 dx = (",
	        "    bottomLeft +",
	        "    (texture2D(u_patches, v_texCoord + vec2(-"+opp[0].toFixed(5)+", 0.0))*vec4(2.0,2.0,2.0,2.0)) +",
	        "    topLeft -",
	        "    bottomRight -",
	        "    (texture2D(u_patches, v_texCoord + vec2("+opp[0].toFixed(5)+", 0.0))*vec4(2.0,2.0,2.0,2.0)) -",
	        "    topRight)/4.0;",
	        "  vec4 dy = (",
	        "    bottomLeft +",
	        "    (texture2D(u_patches, v_texCoord + vec2(0.0, "+opp[1].toFixed(5)+"))*vec4(2.0,2.0,2.0,2.0)) +",
	        "    bottomRight -",
	        "    topLeft -",
	        "    (texture2D(u_patches, v_texCoord + vec2(0.0, -"+opp[1].toFixed(5)+"))*vec4(2.0,2.0,2.0,2.0)) -",
	        "    topRight)/4.0;",
	        "  vec4 gradient = sqrt((dx*dx) + (dy*dy));",
	        "  gl_FragColor = gradient;",
	        "}"
	      ].join('\n');
	    }

	    //create webglcanvas
	    canvas = document.createElement('canvas')
	    canvas.setAttribute('width', (patchWidth-filterWidth+1)+"px");
	    canvas.setAttribute('height', ((patchHeight-filterHeight+1)*numPatches)+"px");
	    canvas.setAttribute('id', 'renderCanvas');
	    canvas.setAttribute('style', 'display:none;');
	    document.body.appendChild(canvas);
	    // TODO : isolate this library from webgl-util.js
	    gl = setupWebGL(canvas, {premultipliedAlpha: false, preserveDrawingBuffer : true, antialias : false});
	    

	    // check for float textures support and fail if not
	    if (!gl.getExtension("OES_texture_float")) {
	      alert("Your graphics card does not support floating point textures! :(");
	      return;
	    }
	    
	    /** insert filters into textures **/
	    if ('raw' in filters) {
	      insertFilter(filters['raw'], gl.TEXTURE0)
	      rawInit = true;
	    }
	    if ('sobel' in filters) {
	      insertFilter(filters['sobel'], gl.TEXTURE4)
	      sobelInit = true;
	    }
	    if ('lbp' in filters) {
	      insertFilter(filters['lbp'], gl.TEXTURE5)
	      lbpInit = true;
	    }

	    /** calculate vertices for calculating responses **/
	    
	    // vertex rectangles to draw out
	    var rectangles = [];
	    var halfFilter = (filterWidth-1)/2;
	    var yOffset;
	    for (var i = 0;i < numBlocks;i++) {
	      yOffset = i*patchHeight;
	      //first triangle
	      rectangles = rectangles.concat(
	        [halfFilter, yOffset+halfFilter, 
	        patchWidth-halfFilter, yOffset+halfFilter,
	        halfFilter, yOffset+patchHeight-halfFilter]
	      );
	      //second triangle
	      rectangles = rectangles.concat(
	        [halfFilter, yOffset+patchHeight-halfFilter, 
	        patchWidth-halfFilter, yOffset+halfFilter,
	        patchWidth-halfFilter, yOffset+patchHeight-halfFilter]
	      );
	    }
	    rectangles = new Float32Array(rectangles);
	    
	    // image rectangles to draw out
	    var irectangles = [];
	    for (var i = 0;i < rectangles.length;i++) {
	      if (i % 2 == 0) {
	        irectangles[i] = rectangles[i]/canvasWidth;
	      } else {
	        irectangles[i] = rectangles[i]/canvasHeight;
	      }
	    }
	    irectangles = new Float32Array(irectangles);

	    if ('lbp' in filters || 'sobel' in filters) {
	      var topCoord = 1.0 - 2/(patchHeight*numBlocks);
	      var bottomCoord = 1.0 - 2/numBlocks + 2/(patchHeight*numBlocks);
	      var yOffset;
	      // calculate position of vertex rectangles for gradient/lbp program
	      var gradRectangles = [];
	      for (var i = 0;i < numBlocks;i++) {
	        yOffset = i * (2/numBlocks);
	        //first triangle
	        gradRectangles = gradRectangles.concat(
	          [-1.0, topCoord - yOffset, 
	          1.0, topCoord - yOffset,
	          -1.0, bottomCoord - yOffset]
	        );
	        //second triangle
	        gradRectangles = gradRectangles.concat(
	          [-1.0, bottomCoord - yOffset, 
	          1.0, topCoord - yOffset,
	          1.0, bottomCoord - yOffset]
	        );
	      }
	      gradRectangles = new Float32Array(gradRectangles);
	      
	      topCoord = 1.0 - 1/(patchHeight*numBlocks);
	      bottomCoord = 1.0 - 1/numBlocks + 1/(patchHeight*numBlocks);
	      // calculate position of image rectangles to draw out
	      var gradIRectangles = [];
	      for (var i = 0;i < numBlocks;i++) {
	        yOffset = i * (1/numBlocks);
	        //first triangle
	        gradIRectangles = gradIRectangles.concat(
	          [0.0, topCoord - yOffset, 
	          1.0, topCoord - yOffset,
	          0.0, bottomCoord - yOffset]
	        );
	        //second triangle
	        gradIRectangles = gradIRectangles.concat(
	          [0.0, bottomCoord - yOffset, 
	          1.0, topCoord - yOffset,
	          1.0, bottomCoord - yOffset]
	        );
	      }
	      gradIRectangles = new Float32Array(gradIRectangles);
	    }

	    // vertices for drawing out responses

	    // drawOutRectangles
	    drawOutRectangles = new Float32Array(12*numPatches);
	    var yOffset, indexOffset;
	    for (var i = 0;i < numPatches;i++) {
	      yOffset = i*newCanvasBlockHeight;
	      indexOffset = i*12;
	      
	      //first triangle
	      drawOutRectangles[indexOffset] = 0.0;
	      drawOutRectangles[indexOffset+1] = yOffset;
	      drawOutRectangles[indexOffset+2] = newCanvasWidth;
	      drawOutRectangles[indexOffset+3] = yOffset;
	      drawOutRectangles[indexOffset+4] = 0.0;
	      drawOutRectangles[indexOffset+5] = yOffset+newCanvasBlockHeight;
	      
	      //second triangle
	      drawOutRectangles[indexOffset+6] = 0.0;
	      drawOutRectangles[indexOffset+7] = yOffset+newCanvasBlockHeight;
	      drawOutRectangles[indexOffset+8] = newCanvasWidth;
	      drawOutRectangles[indexOffset+9] = yOffset;
	      drawOutRectangles[indexOffset+10] = newCanvasWidth;
	      drawOutRectangles[indexOffset+11] = yOffset+newCanvasBlockHeight;
	    }
	    
	    // images
	    drawOutImages = new Float32Array(numPatches*12);
	    var halfFilterWidth = ((filterWidth-1)/2)/patchWidth;
	    var halfFilterHeight = ((filterWidth-1)/2)/(patchHeight*patchCells);
	    var patchHeightT = patchHeight / (patchHeight*patchCells);
	    for (var i = 0;i < numPatches;i++) {
	      yOffset = Math.floor(i / 4)*patchHeightT;
	      indexOffset = i*12;
	      
	      //first triangle
	      drawOutImages[indexOffset] = halfFilterWidth;
	      drawOutImages[indexOffset+1] = yOffset+halfFilterHeight;
	      drawOutImages[indexOffset+2] = 1.0-halfFilterWidth;
	      drawOutImages[indexOffset+3] = yOffset+halfFilterHeight;
	      drawOutImages[indexOffset+4] = halfFilterWidth;
	      drawOutImages[indexOffset+5] = yOffset+patchHeightT-halfFilterHeight;
	      
	      //second triangle
	      drawOutImages[indexOffset+6] = halfFilterWidth;
	      drawOutImages[indexOffset+7] = yOffset+patchHeightT-halfFilterHeight;
	      drawOutImages[indexOffset+8] = 1.0-halfFilterWidth;
	      drawOutImages[indexOffset+9] = yOffset+halfFilterHeight;
	      drawOutImages[indexOffset+10] = 1.0-halfFilterWidth;
	      drawOutImages[indexOffset+11] = yOffset+patchHeightT-halfFilterHeight;
	    }
	    
	    // layer
	    drawOutLayer = new Float32Array(numPatches*6);
	    var layernum;
	    for (var i = 0;i < numPatches;i++) {
	      layernum = i % 4;
	      indexOffset = i*6;
	      drawOutLayer[indexOffset] = layernum;
	      drawOutLayer[indexOffset+1] = layernum;
	      drawOutLayer[indexOffset+2] = layernum;
	      drawOutLayer[indexOffset+3] = layernum;
	      drawOutLayer[indexOffset+4] = layernum;
	      drawOutLayer[indexOffset+5] = layernum;
	    }
	    
	    /** set up programs and load attributes etc **/

	    if ('sobel' in filters) {
	      var grVertexShader = loadShader(gl, gradientResponseVS, gl.VERTEX_SHADER);
	      var grFragmentShader = loadShader(gl, gradientResponseFS, gl.FRAGMENT_SHADER);
	      gradientResponseProgram = createProgram(gl, [grVertexShader, grFragmentShader]);
	      gl.useProgram(gradientResponseProgram);

	      // set up vertices with rectangles
	      gradPositionLocation = gl.getAttribLocation(gradientResponseProgram, "a_position");
	      gradAPositionBuffer = gl.createBuffer();
	      gl.bindBuffer(gl.ARRAY_BUFFER, gradAPositionBuffer);
	      gl.bufferData(gl.ARRAY_BUFFER, gradRectangles, gl.STATIC_DRAW);
	      gl.enableVertexAttribArray(gradPositionLocation);
	      gl.vertexAttribPointer(gradPositionLocation, 2, gl.FLOAT, false, 0, 0);
	      
	      // set up texture positions
	      gradTexCoordLocation = gl.getAttribLocation(gradientResponseProgram, "a_texCoord");
	      gradTexCoordBuffer = gl.createBuffer();
	      gl.bindBuffer(gl.ARRAY_BUFFER, gradTexCoordBuffer);
	      gl.bufferData(gl.ARRAY_BUFFER, gradIRectangles, gl.STATIC_DRAW);
	      gl.enableVertexAttribArray(gradTexCoordLocation);
	      gl.vertexAttribPointer(gradTexCoordLocation, 2, gl.FLOAT, false, 0, 0);
	      
	      // set up patches texture in gradientResponseProgram
	      gl.uniform1i(gl.getUniformLocation(gradientResponseProgram, "u_patches"), 1);
	    }
	    if ('lbp' in filters) {
	      var lbpVertexShader = loadShader(gl, lbpResponseVS, gl.VERTEX_SHADER);
	      var lbpFragmentShader = loadShader(gl, lbpResponseFS, gl.FRAGMENT_SHADER);
	      lbpResponseProgram = createProgram(gl, [lbpVertexShader, lbpFragmentShader]);
	      gl.useProgram(lbpResponseProgram);

	      // set up vertices with rectangles
	      lbpPositionLocation = gl.getAttribLocation(lbpResponseProgram, "a_position");
	      lbpAPositionBuffer = gl.createBuffer();
	      gl.bindBuffer(gl.ARRAY_BUFFER, lbpAPositionBuffer);
	      gl.bufferData(gl.ARRAY_BUFFER, gradRectangles, gl.STATIC_DRAW);
	      gl.enableVertexAttribArray(lbpPositionLocation);
	      gl.vertexAttribPointer(lbpPositionLocation, 2, gl.FLOAT, false, 0, 0);
	      
	      // set up texture positions
	      gradTexCoordLocation = gl.getAttribLocation(lbpResponseProgram, "a_texCoord");
	      lbpTexCoordBuffer = gl.createBuffer();
	      gl.bindBuffer(gl.ARRAY_BUFFER, lbpTexCoordBuffer);
	      gl.bufferData(gl.ARRAY_BUFFER, gradIRectangles, gl.STATIC_DRAW);
	      gl.enableVertexAttribArray(lbpTexCoordLocation);
	      gl.vertexAttribPointer(lbpTexCoordLocation, 2, gl.FLOAT, false, 0, 0);

	      // set up patches texture in lbpResponseProgram
	      gl.uniform1i(gl.getUniformLocation(lbpResponseProgram, "u_patches"), 1);
	    }

	    // setup patchdraw program
	    var drVertexShader = loadShader(gl, drawResponsesVS, gl.VERTEX_SHADER);
	    var drFragmentShader = loadShader(gl, drawResponsesFS, gl.FRAGMENT_SHADER);
	    patchDrawProgram = createProgram(gl, [drVertexShader, drFragmentShader]);
	    gl.useProgram(patchDrawProgram);
	    
	    // set the resolution/dimension of the canvas
	    var resolutionLocation = gl.getUniformLocation(patchDrawProgram, "u_resolutiondraw");
	    gl.uniform2f(resolutionLocation, newCanvasWidth, newCanvasHeight);
	    
	    // set u_responses
	    var responsesLocation = gl.getUniformLocation(patchDrawProgram, "u_responses");
	    gl.uniform1i(responsesLocation, 2);
	    
	    // setup patchresponse program
	    var prVertexShader = loadShader(gl, patchResponseVS, gl.VERTEX_SHADER);
	    var prFragmentShader = loadShader(gl, patchResponseFS, gl.FRAGMENT_SHADER);
	    patchResponseProgram = createProgram(gl, [prVertexShader, prFragmentShader]);
	    gl.useProgram(patchResponseProgram);
	    
	    // set up vertices with rectangles
	    var positionLocation = gl.getAttribLocation(patchResponseProgram, "a_position");
	    apositionBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, apositionBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, rectangles, gl.STATIC_DRAW);
	    gl.enableVertexAttribArray(positionLocation);
	    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
	    
	    // set up texture positions
	    texCoordLocation = gl.getAttribLocation(patchResponseProgram, "a_texCoord");
	    texCoordBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, irectangles, gl.STATIC_DRAW);
	    gl.enableVertexAttribArray(texCoordLocation);
	    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);

	    if ('lbp' in filters || 'sobel' in filters) {
	      // set up gradient/lbp buffer (also used for lbp)
	      gl.activeTexture(gl.TEXTURE3);
	      var gradients = gl.createTexture();
	      gl.bindTexture(gl.TEXTURE_2D, gradients);
	      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, patchWidth, patchHeight*numBlocks, 0, gl.RGBA, gl.FLOAT, null);
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

	      // set up gradient/lbp framebuffer
	      gbo = gl.createFramebuffer();
	      gl.bindFramebuffer(gl.FRAMEBUFFER, gbo);
	      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, gradients, 0);
	    }

	    // set up buffer to draw to
	    gl.activeTexture(gl.TEXTURE2);
	    rttTexture = gl.createTexture();
	    gl.bindTexture(gl.TEXTURE_2D, rttTexture);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, patchWidth, patchHeight*numBlocks, 0, gl.RGBA, gl.FLOAT, null);
	    
	    // set up response framebuffer
	    fbo = gl.createFramebuffer();
	    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
	    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, rttTexture, 0);

	    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);

	    /* initialize some textures and buffers used later on */

	    patchTex = gl.createTexture();
	    drawRectBuffer = gl.createBuffer();
	    drawImageBuffer = gl.createBuffer();
	    drawLayerBuffer = gl.createBuffer();
	  }

	  this.getRawResponses = function(patches) {
	    // TODO: check patches correct length/dimension
	    
	    insertPatches(patches);
	    
	    // switch to correct program
	    gl.useProgram(patchResponseProgram);

	    // set u_patches to point to texture 1
	    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, "u_patches"), 1);

	    // set u_filters to point to correct filter
	    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, "u_filters"), 0);
	      
	    // set up vertices with rectangles
	    var positionLocation = gl.getAttribLocation(patchResponseProgram, "a_position");
	    gl.bindBuffer(gl.ARRAY_BUFFER, apositionBuffer);
	    gl.enableVertexAttribArray(positionLocation);
	    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
	    
	    // set up texture positions
	    var texCoordLocation = gl.getAttribLocation(patchResponseProgram, "a_texCoord");
	    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
	    gl.enableVertexAttribArray(texCoordLocation);
	    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);
	    
	    // set framebuffer to the original one if not already using it
	    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
	    
	    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);
	    
	    gl.clearColor(0.0, 0.0, 0.0, 1.0);
	    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)
	    
	    // draw to framebuffer
	    gl.drawArrays(gl.TRIANGLES, 0, patchCells*6);
	    
	    //gl.finish();
	    
	    var responses = drawOut('raw');

	    return responses;
	  }

	  this.getSobelResponses = function(patches) {
	    // check that it is initialized
	    if (!sobelInit) return;

	    insertPatches(patches);

	    /* do sobel filter on patches */

	    // switch to correct program
	    gl.useProgram(gradientResponseProgram);

	    // set up vertices with rectangles
	    var gradPositionLocation = gl.getAttribLocation(gradientResponseProgram, "a_position");
	    gl.bindBuffer(gl.ARRAY_BUFFER, gradAPositionBuffer);
	    gl.enableVertexAttribArray(gradPositionLocation);
	    gl.vertexAttribPointer(gradPositionLocation, 2, gl.FLOAT, false, 0, 0);
	    
	    // set up texture positions
	    var gradTexCoordLocation = gl.getAttribLocation(gradientResponseProgram, "a_texCoord");
	    gl.bindBuffer(gl.ARRAY_BUFFER, gradTexCoordBuffer);
	    gl.enableVertexAttribArray(gradTexCoordLocation);
	    gl.vertexAttribPointer(gradTexCoordLocation, 2, gl.FLOAT, false, 0, 0);

	    // set framebuffer to the original one if not already using it
	    gl.bindFramebuffer(gl.FRAMEBUFFER, gbo);

	    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);

	    gl.clearColor(0.0, 0.0, 0.0, 1.0);
	    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)

	    // draw to framebuffer
	    gl.drawArrays(gl.TRIANGLES, 0, patchCells*6);

	    /* calculate responses */

	    gl.useProgram(patchResponseProgram);
	    
	    // set patches and filters to point to correct textures
	    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, "u_filters"), 4);
	    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, "u_patches"), 3);

	    var positionLocation = gl.getAttribLocation(patchResponseProgram, "a_position");
	    gl.bindBuffer(gl.ARRAY_BUFFER, apositionBuffer);
	    gl.enableVertexAttribArray(positionLocation);
	    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

	    // set up texture positions
	    var texCoordLocation = gl.getAttribLocation(patchResponseProgram, "a_texCoord");
	    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
	    gl.enableVertexAttribArray(texCoordLocation);
	    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);
	    
	    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
	    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);

	    gl.clearColor(0.0, 0.0, 0.0, 1.0);
	    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)
	    
	    // draw to framebuffer
	    gl.drawArrays(gl.TRIANGLES, 0, patchCells*6);

	    /* get the responses */

	    var responses = drawOut('sobel');

	    return responses;
	  }

	  this.getLBPResponses = function(patches) {
	    // check that it is initialized
	    if (!lbpInit) return;

	    insertPatches(patches);

	     /* do sobel filter on patches */

	    // switch to correct program
	    gl.useProgram(lbpResponseProgram);

	    // set up vertices with rectangles
	    var lbpPositionLocation = gl.getAttribLocation(lbpResponseProgram, "a_position");
	    gl.bindBuffer(gl.ARRAY_BUFFER, lbpAPositionBuffer);
	    gl.enableVertexAttribArray(lbpPositionLocation);
	    gl.vertexAttribPointer(lbpPositionLocation, 2, gl.FLOAT, false, 0, 0);
	    
	    // set up texture positions
	    var lbpTexCoordLocation = gl.getAttribLocation(lbpResponseProgram, "a_texCoord");
	    gl.bindBuffer(gl.ARRAY_BUFFER, lbpTexCoordBuffer);
	    gl.enableVertexAttribArray(lbpTexCoordLocation);
	    gl.vertexAttribPointer(lbpTexCoordLocation, 2, gl.FLOAT, false, 0, 0);

	    // set framebuffer to the original one if not already using it
	    gl.bindFramebuffer(gl.FRAMEBUFFER, gbo);

	    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);

	    gl.clearColor(0.0, 0.0, 0.0, 1.0);
	    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)

	    // draw to framebuffer
	    gl.drawArrays(gl.TRIANGLES, 0, patchCells*6);

	    /* calculate responses */

	    gl.useProgram(patchResponseProgram);

	    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, "u_filters"), 5);
	    gl.uniform1i(gl.getUniformLocation(patchResponseProgram, "u_patches"), 3);

	    var positionLocation = gl.getAttribLocation(patchResponseProgram, "a_position");
	    gl.bindBuffer(gl.ARRAY_BUFFER, apositionBuffer);
	    gl.enableVertexAttribArray(positionLocation);
	    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

	    // set up texture positions
	    var texCoordLocation = gl.getAttribLocation(patchResponseProgram, "a_texCoord");
	    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
	    gl.enableVertexAttribArray(texCoordLocation);
	    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);
	    
	    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
	    gl.viewport(0, 0, patchWidth, patchHeight*numBlocks);

	    gl.clearColor(0.0, 0.0, 0.0, 1.0);
	    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)
	    
	    // draw to framebuffer
	    gl.drawArrays(gl.TRIANGLES, 0, patchCells*6);

	    /* get the responses */

	    var responses = drawOut('lbp');

	    return responses;
	  }

	  var insertPatches = function(patches) {
	    // pass patches into texture, each patch in either r, g, b or a
	    var patchArrayIndex = 0;
	    var patchesIndex1 = 0;
	    var patchesIndex2 = 0;
	    for (var i = 0;i < patchCells;i++) {
	      for (var j = 0;j < patchHeight;j++) {
	        for (var k = 0;k < patchWidth;k++) {
	          patchesIndex1 = i*4;
	          patchesIndex2 = (j*patchWidth) + k;
	          patchArrayIndex = ((patchSize*i) + patchesIndex2)*4;
	          
	          //set r with first patch
	          if (patchesIndex1 < numPatches) {
	            patchArray[patchArrayIndex] = patches[patchesIndex1][patchesIndex2];
	          } else {
	            patchArray[patchArrayIndex] = 0;
	          }
	          //set g with 2nd patch
	          if (patchesIndex1+1 < numPatches) {
	            patchArray[patchArrayIndex + 1] = patches[patchesIndex1+1][patchesIndex2];
	          } else {
	            patchArray[patchArrayIndex + 1] = 0;
	          }
	          //set b with 3rd patch
	          if (patchesIndex1+2 < numPatches) {
	            patchArray[patchArrayIndex + 2] = patches[patchesIndex1+2][patchesIndex2];
	          } else {
	            patchArray[patchArrayIndex + 2] = 0;
	          }
	          //set a with 4th patch
	          if (patchesIndex1+3 < numPatches) {
	            patchArray[patchArrayIndex + 3] = patches[patchesIndex1+3][patchesIndex2];
	          } else {
	            patchArray[patchArrayIndex + 3] = 0;
	          }
	        }
	      }
	    }
	    
	    // pass texture into an uniform
	    gl.activeTexture(gl.TEXTURE1);
	    gl.bindTexture(gl.TEXTURE_2D, patchTex);
	    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureWidth, textureHeight, 0, gl.RGBA, gl.FLOAT, patchArray);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	  }

	  var insertFilter = function(filter, textureNum) {
	    var filterSize = filterWidth*filterHeight;
	    var filterArray = new Float32Array(filterSize*(numBlocks)*4);
	    for (var i = 0;i < numBlocks;i++) {
	      for (var j = 0;j < filterHeight;j++) {
	        for (var k = 0;k < filterWidth;k++) {
	          //set r with first filter
	          if (i*4 < filter.length) {
	            filterArray[((filterSize*i) + (j*filterWidth) + k)*4] = filter[i*4][(j*filterWidth) + k];
	          } else {
	            filterArray[((filterSize*i) + (j*filterWidth) + k)*4] = 0;
	          }
	          //set g with 2nd filter
	          if ((i*4 + 1) < filter.length) {
	            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 1] = filter[(i*4)+1][(j*filterWidth) + k];
	          } else {
	            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 1] = 0;
	          }
	          //set b with 3rd filter
	          if ((i*4 + 2) < filter.length) {
	            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 2] = filter[(i*4)+2][(j*filterWidth) + k];
	          } else {
	            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 2] = 0;
	          }
	          //set a with 4th filter
	          if ((i*4 + 3) < filter.length) {
	            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 3] = filter[(i*4)+3][(j*filterWidth) + k];
	          } else {
	            filterArray[((filterSize*i) + (j*filterWidth) + k)*4 + 3] = 0;
	          }
	        }
	      }
	    }

	    gl.activeTexture(textureNum);
	    var filterTexture = gl.createTexture();
	    gl.bindTexture(gl.TEXTURE_2D, filterTexture);
	    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, filterWidth, filterHeight*numBlocks, 0, gl.RGBA, gl.FLOAT, filterArray);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	  }

	  var drawOut = function(type) {
	    // switch programs
	    gl.useProgram(patchDrawProgram);
	    
	    // bind canvas buffer
	    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
	    gl.viewport(0, 0, newCanvasWidth, newCanvasHeight);
	    
	    gl.clearColor(0.0, 0.0, 0.0, 1.0);
	    gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER)

	    gl.bindBuffer(gl.ARRAY_BUFFER, drawRectBuffer);
	    gl.bufferData(
	      gl.ARRAY_BUFFER, 
	      drawOutRectangles, 
	      gl.STATIC_DRAW);
	    var positionLocation = gl.getAttribLocation(patchDrawProgram, "a_position_draw");
	    gl.enableVertexAttribArray(positionLocation);
	    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
	    
	    gl.bindBuffer(gl.ARRAY_BUFFER, drawImageBuffer);
	    gl.bufferData(
	      gl.ARRAY_BUFFER, 
	      drawOutImages, 
	      gl.STATIC_DRAW);
	    var textureLocation = gl.getAttribLocation(patchDrawProgram, "a_texCoord_draw");
	    gl.enableVertexAttribArray(textureLocation);
	    gl.vertexAttribPointer(textureLocation, 2, gl.FLOAT, false, 0, 0);
	    
	    gl.bindBuffer(gl.ARRAY_BUFFER, drawLayerBuffer);
	    gl.bufferData(
	      gl.ARRAY_BUFFER, 
	      drawOutLayer, 
	      gl.STATIC_DRAW);
	    var layerLocation = gl.getAttribLocation(patchDrawProgram, "a_patchChoice_draw");
	    gl.enableVertexAttribArray(layerLocation);
	    gl.vertexAttribPointer(layerLocation, 1, gl.FLOAT, false, 0, 0);
	    
	    // draw out
	    gl.drawArrays(gl.TRIANGLES, 0, numPatches*6);

	    var responses = getOutput();
	    
	    responses = unpackToFloat(responses);
	    
	    // split
	    responses = splitArray(responses, numPatches);
	    
	    // add bias
	    responses = addBias(responses, biases[type]);
	    
	    // normalize responses to lie within [0,1]
	    var rl = responses.length;
	    
	    for (var i = 0;i < rl;i++) {
	      responses[i] = normalizeFilterMatrix(responses[i]);
	    }

	    return responses;
	  }
	  
	  var addBias = function(responses, bias) {
	    // do a little trick to add bias in the logit function
	    var biasMult;
	    for (var i = 0;i < responses.length;i++) {
	      biasMult = Math.exp(bias[i]);
	      for (var j = 0;j < responses[i].length;j++) {
	        responses[i][j] = 1/(1+((1-responses[i][j])/(responses[i][j]*biasMult)));
	      }
	    }
	    return responses;
	  }
	  
	  var splitArray = function(array, parts) {
	    var sp = [];
	    var al = array.length;
	    var splitlength = al/parts;
	    var ta = [];
	    for (var i = 0;i < al;i++) {
	      if (i % splitlength == 0) {
	        if (i != 0) {
	          sp.push(ta);
	        }
	        ta = [];
	      }
	      ta.push(array[i]); 
	    }
	    sp.push(ta);
	    return sp;
	  }
	  
	  var getOutput = function() {
	    // get data
	    var pixelValues = new Uint8Array(4*canvas.width*canvas.height);
	    var data = gl.readPixels(0, 0, canvas.width, canvas.height, gl.RGBA, gl.UNSIGNED_BYTE, pixelValues);
	    // return
	    return pixelValues;
	  }
	  
	  var unpackToFloat = function(array) {
	    // convert packed floats to proper floats : see http://stackoverflow.com/questions/9882716/packing-float-into-vec4-how-does-this-code-work
	    var newArray = [];
	    var al = array.length;
	    for (var i = 0;i < al;i+=4) {
	      newArray[(i / 4) >> 0] = ((array[i]/(256*256*256*256))+(array[i+1]/(256*256*256))+(array[i+2]/(256*256))+(array[i+3]/256));
	    }
	    return newArray;
	  }
	  
	  var normalizeFilterMatrix = function(response) {
	    // normalize responses to lie within [0,1]
	    var msize = response.length;
	    var max = 0;
	    var min = 1;
	    
	    for (var i = 0;i < msize;i++) {
	      max = response[i] > max ? response[i] : max;
	      min = response[i] < min ? response[i] : min;
	    }
	    var dist = max-min;
	    
	    if (dist == 0) {
	      console.log("a patchresponse was monotone, causing normalization to fail. Leaving it unchanged.")
	      response = response.map(function() {return 1});
	    } else {
	      for (var i = 0;i < msize;i++) {
	        response[i] = (response[i]-min)/dist;
	      }
	    }
	    
	    return response
	  }
	}
	}
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 10 */
/***/ function(module, exports) {

	/*
	 * Copyright (c) 2011, Gregg Tavares
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * * Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * * Redistributions in binary form must reproduce the above copyright notice,
	 *   this list of conditions and the following disclaimer in the documentation
	 *   and/or other materials provided with the distribution.
	 *
	 *  * Neither the name of greggman.com nor the names of its contributors
	 *   may be used to endorse or promote products derived from this software
	 *   without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
	 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
	 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
	 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
	 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
	 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
	 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function() {
	  
	  /**
	   * Wrapped logging function.
	   * @param {string} msg The message to log.
	   */
	  var log = function(msg) {
	    if (window.console && window.console.log) {
	      window.console.log(msg);
	    }
	  };

	  /**
	   * Wrapped logging function.
	   * @param {string} msg The message to log.
	   */
	  var error = function(msg) {
	    if (window.console) {
	      if (window.console.error) {
	        window.console.error(msg);
	      }
	      else if (window.console.log) {
	        window.console.log(msg);
	      }
	    }
	    throw msg;
	  };

	  /**
	   * Turn off all logging.
	   */
	  var loggingOff = function() {
	    log = function() {};
	    error = function() {};
	  };

	  /**
	   * Check if the page is embedded.
	   * @return {boolean} True of we are in an iframe
	   */
	  var isInIFrame = function() {
	    return window != window.top;
	  };

	  /**
	   * Converts a WebGL enum to a string
	   * @param {!WebGLContext} gl The WebGLContext to use.
	   * @param {number} value The enum value.
	   * @return {string} The enum as a string.
	   */
	  var glEnumToString = function(gl, value) {
	    for (var p in gl) {
	      if (gl[p] == value) {
	        return p;
	      }
	    }
	    return "0x" + value.toString(16);
	  };

	  /**
	   * Creates the HTLM for a failure message
	   * @param {string} canvasContainerId id of container of th
	   *        canvas.
	   * @return {string} The html.
	   */
	  var makeFailHTML = function(msg) {
	    return '' +
	      '<table style="background-color: #8CE; width: 100%; height: 100%;"><tr>' +
	      '<td align="center">' +
	      '<div style="display: table-cell; vertical-align: middle;">' +
	      '<div style="">' + msg + '</div>' +
	      '</div>' +
	      '</td></tr></table>';
	  };

	  /**
	   * Mesasge for getting a webgl browser
	   * @type {string}
	   */
	  var GET_A_WEBGL_BROWSER = '' +
	    'This page requires a browser that supports WebGL.<br/>' +
	    '<a href="http://get.webgl.org">Click here to upgrade your browser.</a>';

	  /**
	   * Mesasge for need better hardware
	   * @type {string}
	   */
	  var OTHER_PROBLEM = '' +
	    "It doesn't appear your computer can support WebGL.<br/>" +
	    '<a href="http://get.webgl.org/troubleshooting/">Click here for more information.</a>';

	  /**
	   * Creates a webgl context. If creation fails it will
	   * change the contents of the container of the <canvas>
	   * tag to an error message with the correct links for WebGL.
	   * @param {Element} canvas. The canvas element to create a
	   *     context from.
	   * @param {WebGLContextCreationAttirbutes} opt_attribs Any
	   *     creation attributes you want to pass in.
	   * @return {WebGLRenderingContext} The created context.
	   */
	  var setupWebGL = function(canvas, opt_attribs) {
	    function showLink(str) {
	      var container = canvas.parentNode;
	      if (container) {
	        container.innerHTML = makeFailHTML(str);
	      }
	    };

	    if (!window.WebGLRenderingContext) {
	      //showLink(GET_A_WEBGL_BROWSER);
	      return null;
	    }

	    var context = create3DContext(canvas, opt_attribs);
	    if (!context) {
	      //showLink(OTHER_PROBLEM);
	      return null;
	    }
	    return context;
	  };

	  /**
	   * Creates a webgl context.
	   * @param {!Canvas} canvas The canvas tag to get context
	   *     from. If one is not passed in one will be created.
	   * @return {!WebGLContext} The created context.
	   */
	  var create3DContext = function(canvas, opt_attribs) {
	    var names = ["webgl", "experimental-webgl"];
	    var context = null;
	    for (var ii = 0; ii < names.length; ++ii) {
	      try {
	        context = canvas.getContext(names[ii], opt_attribs);
	      } catch(e) {}
	      if (context) {
	        break;
	      }
	    }
	    return context;
	  }

	  var updateCSSIfInIFrame = function() {
	    if (isInIFrame()) {
	      document.body.className = "iframe";
	    }
	  };

	  /**
	   * Gets a WebGL context.
	   * makes its backing store the size it is displayed.
	   */
	  var getWebGLContext = function(canvas) {
	    if (isInIFrame()) {
	      updateCSSIfInIFrame();

	      // make the canvas backing store the size it's displayed.
	      canvas.width = canvas.clientWidth;
	      canvas.height = canvas.clientHeight;
	    }

	    var gl = setupWebGL(canvas);
	    return gl;
	  };

	  /**
	   * Loads a shader.
	   * @param {!WebGLContext} gl The WebGLContext to use.
	   * @param {string} shaderSource The shader source.
	   * @param {number} shaderType The type of shader.
	   * @param {function(string): void) opt_errorCallback callback for errors.
	   * @return {!WebGLShader} The created shader.
	   */
	  var loadShader = function(gl, shaderSource, shaderType, opt_errorCallback) {
	    var errFn = opt_errorCallback || error;
	    // Create the shader object
	    var shader = gl.createShader(shaderType);

	    // Load the shader source
	    gl.shaderSource(shader, shaderSource);

	    // Compile the shader
	    gl.compileShader(shader);

	    // Check the compile status
	    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
	    if (!compiled) {
	      // Something went wrong during compilation; get the error
	      var lastError = gl.getShaderInfoLog(shader);
	      errFn("*** Error compiling shader '" + shader + "':" + lastError);
	      gl.deleteShader(shader);
	      return null;
	    }

	    return shader;
	  }

	  /**
	   * Creates a program, attaches shaders, binds attrib locations, links the
	   * program and calls useProgram.
	   * @param {!Array.<!WebGLShader>} shaders The shaders to attach
	   * @param {!Array.<string>} opt_attribs The attribs names.
	   * @param {!Array.<number>} opt_locations The locations for the attribs.
	   */
	  var loadProgram = function(gl, shaders, opt_attribs, opt_locations) {
	    var program = gl.createProgram();
	    for (var ii = 0; ii < shaders.length; ++ii) {
	      gl.attachShader(program, shaders[ii]);
	    }
	    if (opt_attribs) {
	      for (var ii = 0; ii < opt_attribs.length; ++ii) {
	        gl.bindAttribLocation(
	            program,
	            opt_locations ? opt_locations[ii] : ii,
	            opt_attribs[ii]);
	      }
	    }
	    gl.linkProgram(program);

	    // Check the link status
	    var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
	    if (!linked) {
	        // something went wrong with the link
	        var lastError = gl.getProgramInfoLog (program);
	        error("Error in program linking:" + lastError);

	        gl.deleteProgram(program);
	        return null;
	    }
	    return program;
	  };

	  /**
	   * Loads a shader from a script tag.
	   * @param {!WebGLContext} gl The WebGLContext to use.
	   * @param {string} scriptId The id of the script tag.
	   * @param {number} opt_shaderType The type of shader. If not passed in it will
	   *     be derived from the type of the script tag.
	   * @param {function(string): void) opt_errorCallback callback for errors.
	   * @return {!WebGLShader} The created shader.
	   */
	  var createShaderFromScript = function(
	      gl, scriptId, opt_shaderType, opt_errorCallback) {
	    var shaderSource = "";
	    var shaderType;
	    var shaderScript = document.getElementById(scriptId);
	    if (!shaderScript) {
	      throw("*** Error: unknown script element" + scriptId);
	    }
	    shaderSource = shaderScript.text;

	    if (!opt_shaderType) {
	      if (shaderScript.type == "x-shader/x-vertex") {
	        shaderType = gl.VERTEX_SHADER;
	      } else if (shaderScript.type == "x-shader/x-fragment") {
	        shaderType = gl.FRAGMENT_SHADER;
	      } else if (shaderType != gl.VERTEX_SHADER && shaderType != gl.FRAGMENT_SHADER) {
	        throw("*** Error: unknown shader type");
	        return null;
	      }
	    }

	    return loadShader(
	        gl, shaderSource, opt_shaderType ? opt_shaderType : shaderType,
	        opt_errorCallback);
	  };

	  /* export functions */
	  window.setupWebGL = setupWebGL;
	  window.createProgram = loadProgram;
	  window.createShaderFromScriptElement = createShaderFromScript;
	  window.getWebGLContext = getWebGLContext;
	  window.updateCSSIfInIFrame = updateCSSIfInIFrame;
	  window.loadShader = loadShader;

	}());

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// simple wrapper for jsfeat face detector
	// requires jsfeat
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function(jsfeat){
	return{ jsfeatFace: function(image) {
	  
	  var img_u8,work_canvas,work_ctx,ii_sum,ii_sqsum,ii_tilted,edg;
	  
	  var w = image.width;
	  var h = image.height;
	  
	  if (image.tagName == 'VIDEO' || image.tagName == 'IMG') {
	    work_canvas = document.createElement('canvas');
	    work_canvas.height = h;
	    work_canvas.width = w;
	    work_ctx = work_canvas.getContext('2d');
	  } else if (image.tagName == 'CANVAS') {
	    work_ctx = image.getContext('2d');
	  }
	  
	  img_u8 = new jsfeat.matrix_t(w, h, jsfeat.U8_t | jsfeat.C1_t);
	  ii_sum = new Int32Array((w+1)*(h+1));
	  ii_sqsum = new Int32Array((w+1)*(h+1));
	  ii_tilted = new Int32Array((w+1)*(h+1));

	    /**
	 * this cascade is derived from https://github.com/mtschirs/js-objectdetect implementation
	 * @author Martin Tschirsich / http://www.tu-darmstadt.de/~m_t
	 */
	  
	  var classifier = {complexClassifiers:[{simpleClassifiers:[{features:[[3,7,14,4,-1.],[3,9,14,2,2.]],threshold:4.0141958743333817e-003,right_val:0.8378106951713562,left_val:0.0337941907346249},{features:[[1,2,18,4,-1.],[7,2,6,4,3.]],threshold:0.0151513395830989,right_val:0.7488812208175659,left_val:0.1514132022857666},{features:[[1,7,15,9,-1.],[1,10,15,3,3.]],threshold:4.2109931819140911e-003,right_val:0.6374819874763489,left_val:0.0900492817163467}],threshold:0.8226894140243530},{simpleClassifiers:[{features:[[5,6,2,6,-1.],[5,9,2,3,2.]],threshold:1.6227109590545297e-003,right_val:0.7110946178436279,left_val:0.0693085864186287},{features:[[7,5,6,3,-1.],[9,5,2,3,3.]],threshold:2.2906649392098188e-003,right_val:0.6668692231178284,left_val:0.1795803010463715},{features:[[4,0,12,9,-1.],[4,3,12,3,3.]],threshold:5.0025708042085171e-003,right_val:0.6554006934165955,left_val:0.1693672984838486},{features:[[6,9,10,8,-1.],[6,13,10,4,2.]],threshold:7.9659894108772278e-003,right_val:0.0914145186543465,left_val:0.5866332054138184},{features:[[3,6,14,8,-1.],[3,10,14,4,2.]],threshold:-3.5227010957896709e-003,right_val:0.6031895875930786,left_val:0.1413166970014572},{features:[[14,1,6,10,-1.],[14,1,3,10,2.]],threshold:0.0366676896810532,right_val:0.7920318245887756,left_val:0.3675672113895416},{features:[[7,8,5,12,-1.],[7,12,5,4,3.]],threshold:9.3361474573612213e-003,right_val:0.2088509947061539,left_val:0.6161385774612427},{features:[[1,1,18,3,-1.],[7,1,6,3,3.]],threshold:8.6961314082145691e-003,right_val:0.6360273957252502,left_val:0.2836230993270874},{features:[[1,8,17,2,-1.],[1,9,17,1,2.]],threshold:1.1488880263641477e-003,right_val:0.5800700783729553,left_val:0.2223580926656723},{features:[[16,6,4,2,-1.],[16,7,4,1,2.]],threshold:-2.1484689787030220e-003,right_val:0.5787054896354675,left_val:0.2406464070081711},{features:[[5,17,2,2,-1.],[5,18,2,1,2.]],threshold:2.1219060290604830e-003,right_val:0.1362237036228180,left_val:0.5559654831886292},{features:[[14,2,6,12,-1.],[14,2,3,12,2.]],threshold:-0.0939491465687752,right_val:0.4717740118503571,left_val:0.8502737283706665},{features:[[4,0,4,12,-1.],[4,0,2,6,2.],[6,6,2,6,2.]],threshold:1.3777789426967502e-003,right_val:0.2834529876708984,left_val:0.5993673801422119},{features:[[2,11,18,8,-1.],[8,11,6,8,3.]],threshold:0.0730631574988365,right_val:0.7060034275054932,left_val:0.4341886043548584},{features:[[5,7,10,2,-1.],[5,8,10,1,2.]],threshold:3.6767389974556863e-004,right_val:0.6051574945449829,left_val:0.3027887940406799},{features:[[15,11,5,3,-1.],[15,12,5,1,3.]],threshold:-6.0479710809886456e-003,right_val:0.5675256848335266,left_val:0.1798433959484100}],threshold:6.9566087722778320},{simpleClassifiers:[{features:[[5,3,10,9,-1.],[5,6,10,3,3.]],threshold:-0.0165106896311045,right_val:0.1424857974052429,left_val:0.6644225120544434},{features:[[9,4,2,14,-1.],[9,11,2,7,2.]],threshold:2.7052499353885651e-003,right_val:0.1288477033376694,left_val:0.6325352191925049},{features:[[3,5,4,12,-1.],[3,9,4,4,3.]],threshold:2.8069869149476290e-003,right_val:0.6193193197250366,left_val:0.1240288019180298},{features:[[4,5,12,5,-1.],[8,5,4,5,3.]],threshold:-1.5402400167658925e-003,right_val:0.5670015811920166,left_val:0.1432143002748489},{features:[[5,6,10,8,-1.],[5,10,10,4,2.]],threshold:-5.6386279175058007e-004,right_val:0.5905207991600037,left_val:0.1657433062791824},{features:[[8,0,6,9,-1.],[8,3,6,3,3.]],threshold:1.9253729842603207e-003,right_val:0.5738824009895325,left_val:0.2695507109165192},{features:[[9,12,1,8,-1.],[9,16,1,4,2.]],threshold:-5.0214841030538082e-003,right_val:0.5782774090766907,left_val:0.1893538981676102},{features:[[0,7,20,6,-1.],[0,9,20,2,3.]],threshold:2.6365420781075954e-003,right_val:0.5695425868034363,left_val:0.2309329062700272},{features:[[7,0,6,17,-1.],[9,0,2,17,3.]],threshold:-1.5127769438549876e-003,right_val:0.5956642031669617,left_val:0.2759602069854736},{features:[[9,0,6,4,-1.],[11,0,2,4,3.]],threshold:-0.0101574398577213,right_val:0.5522047281265259,left_val:0.1732538044452667},{features:[[5,1,6,4,-1.],[7,1,2,4,3.]],threshold:-0.0119536602869630,right_val:0.5559014081954956,left_val:0.1339409947395325},{features:[[12,1,6,16,-1.],[14,1,2,16,3.]],threshold:4.8859491944313049e-003,right_val:0.6188849210739136,left_val:0.3628703951835632},{features:[[0,5,18,8,-1.],[0,5,9,4,2.],[9,9,9,4,2.]],threshold:-0.0801329165697098,right_val:0.5475944876670837,left_val:0.0912110507488251},{features:[[8,15,10,4,-1.],[13,15,5,2,2.],[8,17,5,2,2.]],threshold:1.0643280111253262e-003,right_val:0.5711399912834168,left_val:0.3715142905712128},{features:[[3,1,4,8,-1.],[3,1,2,4,2.],[5,5,2,4,2.]],threshold:-1.3419450260698795e-003,right_val:0.3318097889423370,left_val:0.5953313708305359},{features:[[3,6,14,10,-1.],[10,6,7,5,2.],[3,11,7,5,2.]],threshold:-0.0546011403203011,right_val:0.5602846145629883,left_val:0.1844065934419632},{features:[[2,1,6,16,-1.],[4,1,2,16,3.]],threshold:2.9071690514683723e-003,right_val:0.6131715178489685,left_val:0.3594244122505188},{features:[[0,18,20,2,-1.],[0,19,20,1,2.]],threshold:7.4718717951327562e-004,right_val:0.3459562957286835,left_val:0.5994353294372559},{features:[[8,13,4,3,-1.],[8,14,4,1,3.]],threshold:4.3013808317482471e-003,right_val:0.6990845203399658,left_val:0.4172652065753937},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:4.5017572119832039e-003,right_val:0.7801457047462463,left_val:0.4509715139865875},{features:[[0,12,9,6,-1.],[0,14,9,2,3.]],threshold:0.0241385009139776,right_val:0.1319826990365982,left_val:0.5438212752342224}],threshold:9.4985427856445313},{simpleClassifiers:[{features:[[5,7,3,4,-1.],[5,9,3,2,2.]],threshold:1.9212230108678341e-003,right_val:0.6199870705604553,left_val:0.1415266990661621},{features:[[9,3,2,16,-1.],[9,11,2,8,2.]],threshold:-1.2748669541906565e-004,right_val:0.1884928941726685,left_val:0.6191074252128601},{features:[[3,6,13,8,-1.],[3,10,13,4,2.]],threshold:5.1409931620582938e-004,right_val:0.5857927799224854,left_val:0.1487396955490112},{features:[[12,3,8,2,-1.],[12,3,4,2,2.]],threshold:4.1878609918057919e-003,right_val:0.6359239816665649,left_val:0.2746909856796265},{features:[[8,8,4,12,-1.],[8,12,4,4,3.]],threshold:5.1015717908740044e-003,right_val:0.2175628989934921,left_val:0.5870851278305054},{features:[[11,3,8,6,-1.],[15,3,4,3,2.],[11,6,4,3,2.]],threshold:-2.1448440384119749e-003,right_val:0.2979590892791748,left_val:0.5880944728851318},{features:[[7,1,6,19,-1.],[9,1,2,19,3.]],threshold:-2.8977119363844395e-003,right_val:0.5876647233963013,left_val:0.2373327016830444},{features:[[9,0,6,4,-1.],[11,0,2,4,3.]],threshold:-0.0216106791049242,right_val:0.5194202065467835,left_val:0.1220654994249344},{features:[[3,1,9,3,-1.],[6,1,3,3,3.]],threshold:-4.6299318782985210e-003,right_val:0.5817409157752991,left_val:0.2631230950355530},{features:[[8,15,10,4,-1.],[13,15,5,2,2.],[8,17,5,2,2.]],threshold:5.9393711853772402e-004,right_val:0.5698544979095459,left_val:0.3638620078563690},{features:[[0,3,6,10,-1.],[3,3,3,10,2.]],threshold:0.0538786612451077,right_val:0.7559366226196289,left_val:0.4303531050682068},{features:[[3,4,15,15,-1.],[3,9,15,5,3.]],threshold:1.8887349870055914e-003,right_val:0.5613427162170410,left_val:0.2122603058815002},{features:[[6,5,8,6,-1.],[6,7,8,2,3.]],threshold:-2.3635339457541704e-003,right_val:0.2642767131328583,left_val:0.5631849169731140},{features:[[4,4,12,10,-1.],[10,4,6,5,2.],[4,9,6,5,2.]],threshold:0.0240177996456623,right_val:0.2751705944538117,left_val:0.5797107815742493},{features:[[6,4,4,4,-1.],[8,4,2,4,2.]],threshold:2.0543030404951423e-004,right_val:0.5752568840980530,left_val:0.2705242037773132},{features:[[15,11,1,2,-1.],[15,12,1,1,2.]],threshold:8.4790197433903813e-004,right_val:0.2334876954555512,left_val:0.5435624718666077},{features:[[3,11,2,2,-1.],[3,12,2,1,2.]],threshold:1.4091329649090767e-003,right_val:0.2063155025243759,left_val:0.5319424867630005},{features:[[16,11,1,3,-1.],[16,12,1,1,3.]],threshold:1.4642629539594054e-003,right_val:0.3068861067295075,left_val:0.5418980717658997},{features:[[3,15,6,4,-1.],[3,15,3,2,2.],[6,17,3,2,2.]],threshold:1.6352549428120255e-003,right_val:0.6112868189811707,left_val:0.3695372939109802},{features:[[6,7,8,2,-1.],[6,8,8,1,2.]],threshold:8.3172752056270838e-004,right_val:0.6025236248970032,left_val:0.3565036952495575},{features:[[3,11,1,3,-1.],[3,12,1,1,3.]],threshold:-2.0998890977352858e-003,right_val:0.5362827181816101,left_val:0.1913982033729553},{features:[[6,0,12,2,-1.],[6,1,12,1,2.]],threshold:-7.4213981861248612e-004,right_val:0.5529310107231140,left_val:0.3835555016994476},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:3.2655049581080675e-003,right_val:0.7101895809173584,left_val:0.4312896132469177},{features:[[7,15,6,2,-1.],[7,16,6,1,2.]],threshold:8.9134991867467761e-004,right_val:0.6391963958740234,left_val:0.3984830975532532},{features:[[0,5,4,6,-1.],[0,7,4,2,3.]],threshold:-0.0152841797098517,right_val:0.5433713793754578,left_val:0.2366732954978943},{features:[[4,12,12,2,-1.],[8,12,4,2,3.]],threshold:4.8381411470472813e-003,right_val:0.3239189088344574,left_val:0.5817500948905945},{features:[[6,3,1,9,-1.],[6,6,1,3,3.]],threshold:-9.1093179071322083e-004,right_val:0.2911868989467621,left_val:0.5540593862533569},{features:[[10,17,3,2,-1.],[11,17,1,2,3.]],threshold:-6.1275060288608074e-003,right_val:0.5196629166603088,left_val:0.1775255054235458},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-4.4576259097084403e-004,right_val:0.5533593893051148,left_val:0.3024170100688934},{features:[[7,6,6,4,-1.],[9,6,2,4,3.]],threshold:0.0226465407758951,right_val:0.6975377202033997,left_val:0.4414930939674377},{features:[[7,17,3,2,-1.],[8,17,1,2,3.]],threshold:-1.8804960418492556e-003,right_val:0.5497952103614807,left_val:0.2791394889354706},{features:[[10,17,3,3,-1.],[11,17,1,3,3.]],threshold:7.0889107882976532e-003,right_val:0.2385547012090683,left_val:0.5263199210166931},{features:[[8,12,3,2,-1.],[8,13,3,1,2.]],threshold:1.7318050377070904e-003,right_val:0.6983600854873657,left_val:0.4319379031658173},{features:[[9,3,6,2,-1.],[11,3,2,2,3.]],threshold:-6.8482700735330582e-003,right_val:0.5390920042991638,left_val:0.3082042932510376},{features:[[3,11,14,4,-1.],[3,13,14,2,2.]],threshold:-1.5062530110299122e-005,right_val:0.3120366036891937,left_val:0.5521922111511231},{features:[[1,10,18,4,-1.],[10,10,9,2,2.],[1,12,9,2,2.]],threshold:0.0294755697250366,right_val:0.1770603060722351,left_val:0.5401322841644287},{features:[[0,10,3,3,-1.],[0,11,3,1,3.]],threshold:8.1387329846620560e-003,right_val:0.1211019009351730,left_val:0.5178617835044861},{features:[[9,1,6,6,-1.],[11,1,2,6,3.]],threshold:0.0209429506212473,right_val:0.3311221897602081,left_val:0.5290294289588928},{features:[[8,7,3,6,-1.],[9,7,1,6,3.]],threshold:-9.5665529370307922e-003,right_val:0.4451968967914581,left_val:0.7471994161605835}],threshold:18.4129695892333980},{simpleClassifiers:[{features:[[1,0,18,9,-1.],[1,3,18,3,3.]],threshold:-2.8206960996612906e-004,right_val:0.6076732277870178,left_val:0.2064086049795151},{features:[[12,10,2,6,-1.],[12,13,2,3,2.]],threshold:1.6790600493550301e-003,right_val:0.1255383938550949,left_val:0.5851997137069702},{features:[[0,5,19,8,-1.],[0,9,19,4,2.]],threshold:6.9827912375330925e-004,right_val:0.5728961229324341,left_val:0.0940184295177460},{features:[[7,0,6,9,-1.],[9,0,2,9,3.]],threshold:7.8959012171253562e-004,right_val:0.5694308876991272,left_val:0.1781987994909287},{features:[[5,3,6,1,-1.],[7,3,2,1,3.]],threshold:-2.8560499195009470e-003,right_val:0.5788664817810059,left_val:0.1638399064540863},{features:[[11,3,6,1,-1.],[13,3,2,1,3.]],threshold:-3.8122469559311867e-003,right_val:0.5508564710617065,left_val:0.2085440009832382},{features:[[5,10,4,6,-1.],[5,13,4,3,2.]],threshold:1.5896620461717248e-003,right_val:0.1857215017080307,left_val:0.5702760815620422},{features:[[11,3,6,1,-1.],[13,3,2,1,3.]],threshold:0.0100783398374915,right_val:0.2189770042896271,left_val:0.5116943120956421},{features:[[4,4,12,6,-1.],[4,6,12,2,3.]],threshold:-0.0635263025760651,right_val:0.4043813049793243,left_val:0.7131379842758179},{features:[[15,12,2,6,-1.],[15,14,2,2,3.]],threshold:-9.1031491756439209e-003,right_val:0.5463973283767700,left_val:0.2567181885242462},{features:[[9,3,2,2,-1.],[10,3,1,2,2.]],threshold:-2.4035000242292881e-003,right_val:0.5590974092483521,left_val:0.1700665950775147},{features:[[9,3,3,1,-1.],[10,3,1,1,3.]],threshold:1.5226360410451889e-003,right_val:0.2619054019451141,left_val:0.5410556793212891},{features:[[1,1,4,14,-1.],[3,1,2,14,2.]],threshold:0.0179974399507046,right_val:0.6535220742225647,left_val:0.3732436895370483},{features:[[9,0,4,4,-1.],[11,0,2,2,2.],[9,2,2,2,2.]],threshold:-6.4538191072642803e-003,right_val:0.5537446141242981,left_val:0.2626481950283051},{features:[[7,5,1,14,-1.],[7,12,1,7,2.]],threshold:-0.0118807600811124,right_val:0.5544745922088623,left_val:0.2003753930330277},{features:[[19,0,1,4,-1.],[19,2,1,2,2.]],threshold:1.2713660253211856e-003,right_val:0.3031975924968720,left_val:0.5591902732849121},{features:[[5,5,6,4,-1.],[8,5,3,4,2.]],threshold:1.1376109905540943e-003,right_val:0.5646508932113648,left_val:0.2730407118797302},{features:[[9,18,3,2,-1.],[10,18,1,2,3.]],threshold:-4.2651998810470104e-003,right_val:0.5461820960044861,left_val:0.1405909061431885},{features:[[8,18,3,2,-1.],[9,18,1,2,3.]],threshold:-2.9602861031889915e-003,right_val:0.5459290146827698,left_val:0.1795035004615784},{features:[[4,5,12,6,-1.],[4,7,12,2,3.]],threshold:-8.8448226451873779e-003,right_val:0.2809219956398010,left_val:0.5736783146858215},{features:[[3,12,2,6,-1.],[3,14,2,2,3.]],threshold:-6.6430689767003059e-003,right_val:0.5503826141357422,left_val:0.2370675951242447},{features:[[10,8,2,12,-1.],[10,12,2,4,3.]],threshold:3.9997808635234833e-003,right_val:0.3304282128810883,left_val:0.5608199834823608},{features:[[7,18,3,2,-1.],[8,18,1,2,3.]],threshold:-4.1221720166504383e-003,right_val:0.5378993153572083,left_val:0.1640105992555618},{features:[[9,0,6,2,-1.],[11,0,2,2,3.]],threshold:0.0156249096617103,right_val:0.2288603931665421,left_val:0.5227649211883545},{features:[[5,11,9,3,-1.],[5,12,9,1,3.]],threshold:-0.0103564197197557,right_val:0.4252927899360657,left_val:0.7016193866729736},{features:[[9,0,6,2,-1.],[11,0,2,2,3.]],threshold:-8.7960809469223022e-003,right_val:0.5355830192565918,left_val:0.2767347097396851},{features:[[1,1,18,5,-1.],[7,1,6,5,3.]],threshold:0.1622693985700607,right_val:0.7442579269409180,left_val:0.4342240095138550},{features:[[8,0,4,4,-1.],[10,0,2,2,2.],[8,2,2,2,2.]],threshold:4.5542530715465546e-003,right_val:0.2582125067710877,left_val:0.5726485848426819},{features:[[3,12,1,3,-1.],[3,13,1,1,3.]],threshold:-2.1309209987521172e-003,right_val:0.5361018776893616,left_val:0.2106848061084747},{features:[[8,14,5,3,-1.],[8,15,5,1,3.]],threshold:-0.0132084200158715,right_val:0.4552468061447144,left_val:0.7593790888786316},{features:[[5,4,10,12,-1.],[5,4,5,6,2.],[10,10,5,6,2.]],threshold:-0.0659966766834259,right_val:0.5344039797782898,left_val:0.1252475976943970},{features:[[9,6,9,12,-1.],[9,10,9,4,3.]],threshold:7.9142656177282333e-003,right_val:0.5601043105125427,left_val:0.3315384089946747},{features:[[2,2,12,14,-1.],[2,2,6,7,2.],[8,9,6,7,2.]],threshold:0.0208942797034979,right_val:0.2768838107585907,left_val:0.5506049990653992}],threshold:15.3241395950317380},{simpleClassifiers:[{features:[[4,7,12,2,-1.],[8,7,4,2,3.]],threshold:1.1961159761995077e-003,right_val:0.6156241297721863,left_val:0.1762690991163254},{features:[[7,4,6,4,-1.],[7,6,6,2,2.]],threshold:-1.8679830245673656e-003,right_val:0.1832399964332581,left_val:0.6118106842041016},{features:[[4,5,11,8,-1.],[4,9,11,4,2.]],threshold:-1.9579799845814705e-004,right_val:0.5723816156387329,left_val:0.0990442633628845},{features:[[3,10,16,4,-1.],[3,12,16,2,2.]],threshold:-8.0255657667294145e-004,right_val:0.2377282977104187,left_val:0.5579879879951477},{features:[[0,0,16,2,-1.],[0,1,16,1,2.]],threshold:-2.4510810617357492e-003,right_val:0.5858935117721558,left_val:0.2231457978487015},{features:[[7,5,6,2,-1.],[9,5,2,2,3.]],threshold:5.0361850298941135e-004,right_val:0.5794103741645813,left_val:0.2653993964195252},{features:[[3,2,6,10,-1.],[3,2,3,5,2.],[6,7,3,5,2.]],threshold:4.0293349884450436e-003,right_val:0.2484865039587021,left_val:0.5803827047348023},{features:[[10,5,8,15,-1.],[10,10,8,5,3.]],threshold:-0.0144517095759511,right_val:0.5484204888343811,left_val:0.1830351948738098},{features:[[3,14,8,6,-1.],[3,14,4,3,2.],[7,17,4,3,2.]],threshold:2.0380979403853416e-003,right_val:0.6051092743873596,left_val:0.3363558948040009},{features:[[14,2,2,2,-1.],[14,3,2,1,2.]],threshold:-1.6155190533027053e-003,right_val:0.5441246032714844,left_val:0.2286642044782639},{features:[[1,10,7,6,-1.],[1,13,7,3,2.]],threshold:3.3458340913057327e-003,right_val:0.2392338067293167,left_val:0.5625913143157959},{features:[[15,4,4,3,-1.],[15,4,2,3,2.]],threshold:1.6379579901695251e-003,right_val:0.5964621901512146,left_val:0.3906993865966797},{features:[[2,9,14,6,-1.],[2,9,7,3,2.],[9,12,7,3,2.]],threshold:0.0302512105554342,right_val:0.1575746983289719,left_val:0.5248482227325440},{features:[[5,7,10,4,-1.],[5,9,10,2,2.]],threshold:0.0372519902884960,right_val:0.6748418807983398,left_val:0.4194310903549194},{features:[[6,9,8,8,-1.],[6,9,4,4,2.],[10,13,4,4,2.]],threshold:-0.0251097902655602,right_val:0.5473451018333435,left_val:0.1882549971342087},{features:[[14,1,3,2,-1.],[14,2,3,1,2.]],threshold:-5.3099058568477631e-003,right_val:0.5227110981941223,left_val:0.1339973062276840},{features:[[1,4,4,2,-1.],[3,4,2,2,2.]],threshold:1.2086479691788554e-003,right_val:0.6109635829925537,left_val:0.3762088119983673},{features:[[11,10,2,8,-1.],[11,14,2,4,2.]],threshold:-0.0219076797366142,right_val:0.5404006838798523,left_val:0.2663142979145050},{features:[[0,0,5,3,-1.],[0,1,5,1,3.]],threshold:5.4116579703986645e-003,right_val:0.2232273072004318,left_val:0.5363578796386719},{features:[[2,5,18,8,-1.],[11,5,9,4,2.],[2,9,9,4,2.]],threshold:0.0699463263154030,right_val:0.2453698068857193,left_val:0.5358232855796814},{features:[[6,6,1,6,-1.],[6,9,1,3,2.]],threshold:3.4520021290518343e-004,right_val:0.5376930236816406,left_val:0.2409671992063522},{features:[[19,1,1,3,-1.],[19,2,1,1,3.]],threshold:1.2627709656953812e-003,right_val:0.3155693113803864,left_val:0.5425856709480286},{features:[[7,6,6,6,-1.],[9,6,2,6,3.]],threshold:0.0227195098996162,right_val:0.6597865223884583,left_val:0.4158405959606171},{features:[[19,1,1,3,-1.],[19,2,1,1,3.]],threshold:-1.8111000536009669e-003,right_val:0.5505244731903076,left_val:0.2811253070831299},{features:[[3,13,2,3,-1.],[3,14,2,1,3.]],threshold:3.3469670452177525e-003,right_val:0.1891465038061142,left_val:0.5260028243064880},{features:[[8,4,8,12,-1.],[12,4,4,6,2.],[8,10,4,6,2.]],threshold:4.0791751234792173e-004,right_val:0.3344210088253021,left_val:0.5673509240150452},{features:[[5,2,6,3,-1.],[7,2,2,3,3.]],threshold:0.0127347996458411,right_val:0.2395612001419067,left_val:0.5343592166900635},{features:[[6,1,9,10,-1.],[6,6,9,5,2.]],threshold:-7.3119727894663811e-003,right_val:0.4022207856178284,left_val:0.6010890007019043},{features:[[0,4,6,12,-1.],[2,4,2,12,3.]],threshold:-0.0569487512111664,right_val:0.4543190896511078,left_val:0.8199151158332825},{features:[[15,13,2,3,-1.],[15,14,2,1,3.]],threshold:-5.0116591155529022e-003,right_val:0.5357710719108582,left_val:0.2200281023979187},{features:[[7,14,5,3,-1.],[7,15,5,1,3.]],threshold:6.0334368608891964e-003,right_val:0.7181751132011414,left_val:0.4413081109523773},{features:[[15,13,3,3,-1.],[15,14,3,1,3.]],threshold:3.9437441155314445e-003,right_val:0.2791733145713806,left_val:0.5478860735893250},{features:[[6,14,8,3,-1.],[6,15,8,1,3.]],threshold:-3.6591119132936001e-003,right_val:0.3989723920822144,left_val:0.6357867717742920},{features:[[15,13,3,3,-1.],[15,14,3,1,3.]],threshold:-3.8456181064248085e-003,right_val:0.5300664901733398,left_val:0.3493686020374298},{features:[[2,13,3,3,-1.],[2,14,3,1,3.]],threshold:-7.1926261298358440e-003,right_val:0.5229672789573669,left_val:0.1119614988565445},{features:[[4,7,12,12,-1.],[10,7,6,6,2.],[4,13,6,6,2.]],threshold:-0.0527989417314529,right_val:0.5453451275825501,left_val:0.2387102991342545},{features:[[9,7,2,6,-1.],[10,7,1,6,2.]],threshold:-7.9537667334079742e-003,right_val:0.4439376890659332,left_val:0.7586917877197266},{features:[[8,9,5,2,-1.],[8,10,5,1,2.]],threshold:-2.7344180271029472e-003,right_val:0.5489321947097778,left_val:0.2565476894378662},{features:[[8,6,3,4,-1.],[9,6,1,4,3.]],threshold:-1.8507939530536532e-003,right_val:0.4252474904060364,left_val:0.6734347939491272},{features:[[9,6,2,8,-1.],[9,10,2,4,2.]],threshold:0.0159189198166132,right_val:0.2292661964893341,left_val:0.5488352775573731},{features:[[7,7,3,6,-1.],[8,7,1,6,3.]],threshold:-1.2687679845839739e-003,right_val:0.4022389948368073,left_val:0.6104331016540527},{features:[[11,3,3,3,-1.],[12,3,1,3,3.]],threshold:6.2883910723030567e-003,right_val:0.1536193042993546,left_val:0.5310853123664856},{features:[[5,4,6,1,-1.],[7,4,2,1,3.]],threshold:-6.2259892001748085e-003,right_val:0.5241606235504150,left_val:0.1729111969470978},{features:[[5,6,10,3,-1.],[5,7,10,1,3.]],threshold:-0.0121325999498367,right_val:0.4325182139873505,left_val:0.6597759723663330}],threshold:21.0106391906738280},{simpleClassifiers:[{features:[[7,3,6,9,-1.],[7,6,6,3,3.]],threshold:-3.9184908382594585e-003,right_val:0.1469330936670303,left_val:0.6103435158729553},{features:[[6,7,9,1,-1.],[9,7,3,1,3.]],threshold:1.5971299726516008e-003,right_val:0.5896466970443726,left_val:0.2632363140583038},{features:[[2,8,16,8,-1.],[2,12,16,4,2.]],threshold:0.0177801102399826,right_val:0.1760361939668655,left_val:0.5872874259948731},{features:[[14,6,2,6,-1.],[14,9,2,3,2.]],threshold:6.5334769897162914e-004,right_val:0.5596066117286682,left_val:0.1567801982164383},{features:[[1,5,6,15,-1.],[1,10,6,5,3.]],threshold:-2.8353091329336166e-004,right_val:0.5732036232948303,left_val:0.1913153976202011},{features:[[10,0,6,9,-1.],[10,3,6,3,3.]],threshold:1.6104689566418529e-003,right_val:0.5623080730438232,left_val:0.2914913892745972},{features:[[6,6,7,14,-1.],[6,13,7,7,2.]],threshold:-0.0977506190538406,right_val:0.5648233294487000,left_val:0.1943476945161820},{features:[[13,7,3,6,-1.],[13,9,3,2,3.]],threshold:5.5182358482852578e-004,right_val:0.5504639744758606,left_val:0.3134616911411285},{features:[[1,8,15,4,-1.],[6,8,5,4,3.]],threshold:-0.0128582203760743,right_val:0.5760142803192139,left_val:0.2536481916904450},{features:[[11,2,3,10,-1.],[11,7,3,5,2.]],threshold:4.1530239395797253e-003,right_val:0.3659774065017700,left_val:0.5767722129821777},{features:[[3,7,4,6,-1.],[3,9,4,2,3.]],threshold:1.7092459602281451e-003,right_val:0.5918939113616943,left_val:0.2843191027641296},{features:[[13,3,6,10,-1.],[15,3,2,10,3.]],threshold:7.5217359699308872e-003,right_val:0.6183109283447266,left_val:0.4052427113056183},{features:[[5,7,8,10,-1.],[5,7,4,5,2.],[9,12,4,5,2.]],threshold:2.2479810286313295e-003,right_val:0.3135401010513306,left_val:0.5783755183219910},{features:[[4,4,12,12,-1.],[10,4,6,6,2.],[4,10,6,6,2.]],threshold:0.0520062111318111,right_val:0.1916636973619461,left_val:0.5541312098503113},{features:[[1,4,6,9,-1.],[3,4,2,9,3.]],threshold:0.0120855299755931,right_val:0.6644591093063355,left_val:0.4032655954360962},{features:[[11,3,2,5,-1.],[11,3,1,5,2.]],threshold:1.4687820112158079e-005,right_val:0.5709382891654968,left_val:0.3535977900028229},{features:[[7,3,2,5,-1.],[8,3,1,5,2.]],threshold:7.1395188570022583e-006,right_val:0.5610269904136658,left_val:0.3037444949150085},{features:[[10,14,2,3,-1.],[10,15,2,1,3.]],threshold:-4.6001640148460865e-003,right_val:0.4580326080322266,left_val:0.7181087136268616},{features:[[5,12,6,2,-1.],[8,12,3,2,2.]],threshold:2.0058949012309313e-003,right_val:0.2953684031963348,left_val:0.5621951818466187},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:4.5050270855426788e-003,right_val:0.7619017958641052,left_val:0.4615387916564941},{features:[[4,11,12,6,-1.],[4,14,12,3,2.]],threshold:0.0117468303069472,right_val:0.1772529035806656,left_val:0.5343837141990662},{features:[[11,11,5,9,-1.],[11,14,5,3,3.]],threshold:-0.0583163388073444,right_val:0.5340772271156311,left_val:0.1686245948076248},{features:[[6,15,3,2,-1.],[6,16,3,1,2.]],threshold:2.3629379575140774e-004,right_val:0.6026803851127625,left_val:0.3792056143283844},{features:[[11,0,3,5,-1.],[12,0,1,5,3.]],threshold:-7.8156180679798126e-003,right_val:0.5324323773384094,left_val:0.1512867063283920},{features:[[5,5,6,7,-1.],[8,5,3,7,2.]],threshold:-0.0108761601150036,right_val:0.5319945216178894,left_val:0.2081822007894516},{features:[[13,0,1,9,-1.],[13,3,1,3,3.]],threshold:-2.7745519764721394e-003,right_val:0.5210328102111816,left_val:0.4098246991634369},{features:[[3,2,4,8,-1.],[3,2,2,4,2.],[5,6,2,4,2.]],threshold:-7.8276381827890873e-004,right_val:0.3478842079639435,left_val:0.5693274140357971},{features:[[13,12,4,6,-1.],[13,14,4,2,3.]],threshold:0.0138704096898437,right_val:0.2257698029279709,left_val:0.5326750874519348},{features:[[3,12,4,6,-1.],[3,14,4,2,3.]],threshold:-0.0236749108880758,right_val:0.5200707912445068,left_val:0.1551305055618286},{features:[[13,11,3,4,-1.],[13,13,3,2,2.]],threshold:-1.4879409718560055e-005,right_val:0.3820176124572754,left_val:0.5500566959381104},{features:[[4,4,4,3,-1.],[4,5,4,1,3.]],threshold:3.6190641112625599e-003,right_val:0.6639748215675354,left_val:0.4238683879375458},{features:[[7,5,11,8,-1.],[7,9,11,4,2.]],threshold:-0.0198171101510525,right_val:0.5382357835769653,left_val:0.2150038033723831},{features:[[7,8,3,4,-1.],[8,8,1,4,3.]],threshold:-3.8154039066284895e-003,right_val:0.4215297102928162,left_val:0.6675711274147034},{features:[[9,1,6,1,-1.],[11,1,2,1,3.]],threshold:-4.9775829538702965e-003,right_val:0.5386328101158142,left_val:0.2267289012670517},{features:[[5,5,3,3,-1.],[5,6,3,1,3.]],threshold:2.2441020701080561e-003,right_val:0.6855735778808594,left_val:0.4308691024780273},{features:[[0,9,20,6,-1.],[10,9,10,3,2.],[0,12,10,3,2.]],threshold:0.0122824599966407,right_val:0.3467479050159454,left_val:0.5836614966392517},{features:[[8,6,3,5,-1.],[9,6,1,5,3.]],threshold:-2.8548699337989092e-003,right_val:0.4311453998088837,left_val:0.7016944885253906},{features:[[11,0,1,3,-1.],[11,1,1,1,3.]],threshold:-3.7875669077038765e-003,right_val:0.5224946141242981,left_val:0.2895345091819763},{features:[[4,2,4,2,-1.],[4,3,4,1,2.]],threshold:-1.2201230274513364e-003,right_val:0.5481644868850708,left_val:0.2975570857524872},{features:[[12,6,4,3,-1.],[12,7,4,1,3.]],threshold:0.0101605998352170,right_val:0.8182697892189026,left_val:0.4888817965984345},{features:[[5,0,6,4,-1.],[7,0,2,4,3.]],threshold:-0.0161745697259903,right_val:0.5239992737770081,left_val:0.1481492966413498},{features:[[9,7,3,8,-1.],[10,7,1,8,3.]],threshold:0.0192924607545137,right_val:0.7378190755844116,left_val:0.4786309897899628},{features:[[9,7,2,2,-1.],[10,7,1,2,2.]],threshold:-3.2479539513587952e-003,right_val:0.4470643997192383,left_val:0.7374222874641419},{features:[[6,7,14,4,-1.],[13,7,7,2,2.],[6,9,7,2,2.]],threshold:-9.3803480267524719e-003,right_val:0.5537996292114258,left_val:0.3489154875278473},{features:[[0,5,3,6,-1.],[0,7,3,2,3.]],threshold:-0.0126061299815774,right_val:0.5315443277359009,left_val:0.2379686981439591},{features:[[13,11,3,4,-1.],[13,13,3,2,2.]],threshold:-0.0256219301372766,right_val:0.5138769745826721,left_val:0.1964688003063202},{features:[[4,11,3,4,-1.],[4,13,3,2,2.]],threshold:-7.5741496402770281e-005,right_val:0.3365853130817413,left_val:0.5590522885322571},{features:[[5,9,12,8,-1.],[11,9,6,4,2.],[5,13,6,4,2.]],threshold:-0.0892108827829361,right_val:0.5162634849548340,left_val:0.0634046569466591},{features:[[9,12,1,3,-1.],[9,13,1,1,3.]],threshold:-2.7670480776578188e-003,right_val:0.4490706026554108,left_val:0.7323467731475830},{features:[[10,15,2,4,-1.],[10,17,2,2,2.]],threshold:2.7152578695677221e-004,right_val:0.5985518097877502,left_val:0.4114834964275360}],threshold:23.9187908172607420},{simpleClassifiers:[{features:[[7,7,6,1,-1.],[9,7,2,1,3.]],threshold:1.4786219689995050e-003,right_val:0.6643316745758057,left_val:0.2663545012474060},{features:[[12,3,6,6,-1.],[15,3,3,3,2.],[12,6,3,3,2.]],threshold:-1.8741659587249160e-003,right_val:0.2518512904644013,left_val:0.6143848896026611},{features:[[0,4,10,6,-1.],[0,6,10,2,3.]],threshold:-1.7151009524241090e-003,right_val:0.2397463023662567,left_val:0.5766341090202332},{features:[[8,3,8,14,-1.],[12,3,4,7,2.],[8,10,4,7,2.]],threshold:-1.8939269939437509e-003,right_val:0.2529144883155823,left_val:0.5682045817375183},{features:[[4,4,7,15,-1.],[4,9,7,5,3.]],threshold:-5.3006052039563656e-003,right_val:0.5556079745292664,left_val:0.1640675961971283},{features:[[12,2,6,8,-1.],[15,2,3,4,2.],[12,6,3,4,2.]],threshold:-0.0466625317931175,right_val:0.4762830138206482,left_val:0.6123154163360596},{features:[[2,2,6,8,-1.],[2,2,3,4,2.],[5,6,3,4,2.]],threshold:-7.9431332414969802e-004,right_val:0.2839404046535492,left_val:0.5707858800888062},{features:[[2,13,18,7,-1.],[8,13,6,7,3.]],threshold:0.0148916700854898,right_val:0.6006367206573486,left_val:0.4089672863483429},{features:[[4,3,8,14,-1.],[4,3,4,7,2.],[8,10,4,7,2.]],threshold:-1.2046529445797205e-003,right_val:0.2705289125442505,left_val:0.5712450742721558},{features:[[18,1,2,6,-1.],[18,3,2,2,3.]],threshold:6.0619381256401539e-003,right_val:0.3262225985527039,left_val:0.5262504220008850},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-2.5286648888140917e-003,right_val:0.4199256896972656,left_val:0.6853830814361572},{features:[[18,1,2,6,-1.],[18,3,2,2,3.]],threshold:-5.9010218828916550e-003,right_val:0.5434812903404236,left_val:0.3266282081604004},{features:[[0,1,2,6,-1.],[0,3,2,2,3.]],threshold:5.6702760048210621e-003,right_val:0.2319003939628601,left_val:0.5468410849571228},{features:[[1,5,18,6,-1.],[1,7,18,2,3.]],threshold:-3.0304100364446640e-003,right_val:0.2708238065242767,left_val:0.5570667982101440},{features:[[0,2,6,7,-1.],[3,2,3,7,2.]],threshold:2.9803649522364140e-003,right_val:0.5890625715255737,left_val:0.3700568974018097},{features:[[7,3,6,14,-1.],[7,10,6,7,2.]],threshold:-0.0758405104279518,right_val:0.5419948101043701,left_val:0.2140070050954819},{features:[[3,7,13,10,-1.],[3,12,13,5,2.]],threshold:0.0192625392228365,right_val:0.2726590037345886,left_val:0.5526772141456604},{features:[[11,15,2,2,-1.],[11,16,2,1,2.]],threshold:1.8888259364757687e-004,right_val:0.6017209887504578,left_val:0.3958011865615845},{features:[[2,11,16,4,-1.],[2,11,8,2,2.],[10,13,8,2,2.]],threshold:0.0293695498257875,right_val:0.1435758024454117,left_val:0.5241373777389526},{features:[[13,7,6,4,-1.],[16,7,3,2,2.],[13,9,3,2,2.]],threshold:1.0417619487270713e-003,right_val:0.5929983258247376,left_val:0.3385409116744995},{features:[[6,10,3,9,-1.],[6,13,3,3,3.]],threshold:2.6125640142709017e-003,right_val:0.3021597862243652,left_val:0.5485377907752991},{features:[[14,6,1,6,-1.],[14,9,1,3,2.]],threshold:9.6977467183023691e-004,right_val:0.5532032847404480,left_val:0.3375276029109955},{features:[[5,10,4,1,-1.],[7,10,2,1,2.]],threshold:5.9512659208849072e-004,right_val:0.3359399139881134,left_val:0.5631743073463440},{features:[[3,8,15,5,-1.],[8,8,5,5,3.]],threshold:-0.1015655994415283,right_val:0.5230425000190735,left_val:0.0637350380420685},{features:[[1,6,5,4,-1.],[1,8,5,2,2.]],threshold:0.0361566990613937,right_val:0.1029528975486755,left_val:0.5136963129043579},{features:[[3,1,17,6,-1.],[3,3,17,2,3.]],threshold:3.4624140243977308e-003,right_val:0.5558289289474487,left_val:0.3879320025444031},{features:[[6,7,8,2,-1.],[10,7,4,2,2.]],threshold:0.0195549800992012,right_val:0.1875859946012497,left_val:0.5250086784362793},{features:[[9,7,3,2,-1.],[10,7,1,2,3.]],threshold:-2.3121440317481756e-003,right_val:0.4679641127586365,left_val:0.6672028899192810},{features:[[8,7,3,2,-1.],[9,7,1,2,3.]],threshold:-1.8605289515107870e-003,right_val:0.4334670901298523,left_val:0.7163379192352295},{features:[[8,9,4,2,-1.],[8,10,4,1,2.]],threshold:-9.4026362057775259e-004,right_val:0.5650203227996826,left_val:0.3021360933780670},{features:[[8,8,4,3,-1.],[8,9,4,1,3.]],threshold:-5.2418331615626812e-003,right_val:0.5250256061553955,left_val:0.1820009052753449},{features:[[9,5,6,4,-1.],[9,5,3,4,2.]],threshold:1.1729019752237946e-004,right_val:0.5445973277091980,left_val:0.3389188051223755},{features:[[8,13,4,3,-1.],[8,14,4,1,3.]],threshold:1.1878840159624815e-003,right_val:0.6253563165664673,left_val:0.4085349142551422},{features:[[4,7,12,6,-1.],[10,7,6,3,2.],[4,10,6,3,2.]],threshold:-0.0108813596889377,right_val:0.5700082778930664,left_val:0.3378399014472961},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:1.7354859737679362e-003,right_val:0.6523038744926453,left_val:0.4204635918140411},{features:[[9,7,3,3,-1.],[9,8,3,1,3.]],threshold:-6.5119052305817604e-003,right_val:0.5428143739700317,left_val:0.2595216035842896},{features:[[7,4,3,8,-1.],[8,4,1,8,3.]],threshold:-1.2136430013924837e-003,right_val:0.3977893888950348,left_val:0.6165143847465515},{features:[[10,0,3,6,-1.],[11,0,1,6,3.]],threshold:-0.0103542404249310,right_val:0.5219504833221436,left_val:0.1628028005361557},{features:[[6,3,4,8,-1.],[8,3,2,8,2.]],threshold:5.5858830455690622e-004,right_val:0.5503574013710022,left_val:0.3199650943279266},{features:[[14,3,6,13,-1.],[14,3,3,13,2.]],threshold:0.0152996499091387,right_val:0.6122388243675232,left_val:0.4103994071483612},{features:[[8,13,3,6,-1.],[8,16,3,3,2.]],threshold:-0.0215882100164890,right_val:0.5197384953498840,left_val:0.1034912988543510},{features:[[14,3,6,13,-1.],[14,3,3,13,2.]],threshold:-0.1283462941646576,right_val:0.4893102943897247,left_val:0.8493865132331848},{features:[[0,7,10,4,-1.],[0,7,5,2,2.],[5,9,5,2,2.]],threshold:-2.2927189711481333e-003,right_val:0.5471575260162354,left_val:0.3130157887935638},{features:[[14,3,6,13,-1.],[14,3,3,13,2.]],threshold:0.0799151062965393,right_val:0.6073989272117615,left_val:0.4856320917606354},{features:[[0,3,6,13,-1.],[3,3,3,13,2.]],threshold:-0.0794410929083824,right_val:0.4624533057212830,left_val:0.8394674062728882},{features:[[9,1,4,1,-1.],[9,1,2,1,2.]],threshold:-5.2800010889768600e-003,right_val:0.5306698083877564,left_val:0.1881695985794067},{features:[[8,0,2,1,-1.],[9,0,1,1,2.]],threshold:1.0463109938427806e-003,right_val:0.2583065927028656,left_val:0.5271229147911072},{features:[[10,16,4,4,-1.],[12,16,2,2,2.],[10,18,2,2,2.]],threshold:2.6317298761568964e-004,right_val:0.5735440850257874,left_val:0.4235304892063141},{features:[[9,6,2,3,-1.],[10,6,1,3,2.]],threshold:-3.6173160187900066e-003,right_val:0.4495444893836975,left_val:0.6934396028518677},{features:[[4,5,12,2,-1.],[8,5,4,2,3.]],threshold:0.0114218797534704,right_val:0.4138193130493164,left_val:0.5900921225547791},{features:[[8,7,3,5,-1.],[9,7,1,5,3.]],threshold:-1.9963278900831938e-003,right_val:0.4327239990234375,left_val:0.6466382741928101}],threshold:24.5278797149658200},{simpleClassifiers:[{features:[[6,4,8,6,-1.],[6,6,8,2,3.]],threshold:-9.9691245704889297e-003,right_val:0.2482212036848068,left_val:0.6142324209213257},{features:[[9,5,2,12,-1.],[9,11,2,6,2.]],threshold:7.3073059320449829e-004,right_val:0.2321965992450714,left_val:0.5704951882362366},{features:[[4,6,6,8,-1.],[4,10,6,4,2.]],threshold:6.4045301405712962e-004,right_val:0.5814933180809021,left_val:0.2112251967191696},{features:[[12,2,8,5,-1.],[12,2,4,5,2.]],threshold:4.5424019917845726e-003,right_val:0.5866311788558960,left_val:0.2950482070446014},{features:[[0,8,18,3,-1.],[0,9,18,1,3.]],threshold:9.2477443104144186e-005,right_val:0.5791326761245728,left_val:0.2990990877151489},{features:[[8,12,4,8,-1.],[8,16,4,4,2.]],threshold:-8.6603146046400070e-003,right_val:0.5635542273521423,left_val:0.2813029885292053},{features:[[0,2,8,5,-1.],[4,2,4,5,2.]],threshold:8.0515816807746887e-003,right_val:0.6054757237434387,left_val:0.3535369038581848},{features:[[13,11,3,4,-1.],[13,13,3,2,2.]],threshold:4.3835240649059415e-004,right_val:0.2731510996818543,left_val:0.5596532225608826},{features:[[5,11,6,1,-1.],[7,11,2,1,3.]],threshold:-9.8168973636347800e-005,right_val:0.3638561069965363,left_val:0.5978031754493713},{features:[[11,3,3,1,-1.],[12,3,1,1,3.]],threshold:-1.1298790341243148e-003,right_val:0.5432729125022888,left_val:0.2755252122879028},{features:[[7,13,5,3,-1.],[7,14,5,1,3.]],threshold:6.4356150105595589e-003,right_val:0.7069833278656006,left_val:0.4305641949176788},{features:[[11,11,7,6,-1.],[11,14,7,3,2.]],threshold:-0.0568293295800686,right_val:0.5294997096061707,left_val:0.2495242953300476},{features:[[2,11,7,6,-1.],[2,14,7,3,2.]],threshold:4.0668169967830181e-003,right_val:0.2497723996639252,left_val:0.5478553175926209},{features:[[12,14,2,6,-1.],[12,16,2,2,3.]],threshold:4.8164798499783501e-005,right_val:0.5706356167793274,left_val:0.3938601016998291},{features:[[8,14,3,3,-1.],[8,15,3,1,3.]],threshold:6.1795017682015896e-003,right_val:0.7394766807556152,left_val:0.4407606124877930},{features:[[11,0,3,5,-1.],[12,0,1,5,3.]],threshold:6.4985752105712891e-003,right_val:0.2479152977466583,left_val:0.5445243120193481},{features:[[6,1,4,9,-1.],[8,1,2,9,2.]],threshold:-1.0211090557277203e-003,right_val:0.5338971018791199,left_val:0.2544766962528229},{features:[[10,3,6,1,-1.],[12,3,2,1,3.]],threshold:-5.4247528314590454e-003,right_val:0.5324069261550903,left_val:0.2718858122825623},{features:[[8,8,3,4,-1.],[8,10,3,2,2.]],threshold:-1.0559899965301156e-003,right_val:0.5534508824348450,left_val:0.3178288042545319},{features:[[8,12,4,2,-1.],[8,13,4,1,2.]],threshold:6.6465808777138591e-004,right_val:0.6558194160461426,left_val:0.4284219145774841},{features:[[5,18,4,2,-1.],[5,19,4,1,2.]],threshold:-2.7524109464138746e-004,right_val:0.3810262978076935,left_val:0.5902860760688782},{features:[[2,1,18,6,-1.],[2,3,18,2,3.]],threshold:4.2293202131986618e-003,right_val:0.5709385871887207,left_val:0.3816489875316620},{features:[[6,0,3,2,-1.],[7,0,1,2,3.]],threshold:-3.2868210691958666e-003,right_val:0.5259544253349304,left_val:0.1747743934392929},{features:[[13,8,6,2,-1.],[16,8,3,1,2.],[13,9,3,1,2.]],threshold:1.5611879643984139e-004,right_val:0.5725612044334412,left_val:0.3601722121238709},{features:[[6,10,3,6,-1.],[6,13,3,3,2.]],threshold:-7.3621381488919724e-006,right_val:0.3044497072696686,left_val:0.5401858091354370},{features:[[0,13,20,4,-1.],[10,13,10,2,2.],[0,15,10,2,2.]],threshold:-0.0147672500461340,right_val:0.5573434829711914,left_val:0.3220770061016083},{features:[[7,7,6,5,-1.],[9,7,2,5,3.]],threshold:0.0244895908981562,right_val:0.6518812775611877,left_val:0.4301528036594391},{features:[[11,0,2,2,-1.],[11,1,2,1,2.]],threshold:-3.7652091123163700e-004,right_val:0.5598236918449402,left_val:0.3564583063125610},{features:[[1,8,6,2,-1.],[1,8,3,1,2.],[4,9,3,1,2.]],threshold:7.3657688517414499e-006,right_val:0.5561897754669190,left_val:0.3490782976150513},{features:[[0,2,20,2,-1.],[10,2,10,1,2.],[0,3,10,1,2.]],threshold:-0.0150999398902059,right_val:0.5335299968719482,left_val:0.1776272058486939},{features:[[7,14,5,3,-1.],[7,15,5,1,3.]],threshold:-3.8316650316119194e-003,right_val:0.4221394062042236,left_val:0.6149687767028809},{features:[[7,13,6,6,-1.],[10,13,3,3,2.],[7,16,3,3,2.]],threshold:0.0169254001230001,right_val:0.2166585028171539,left_val:0.5413014888763428},{features:[[9,12,2,3,-1.],[9,13,2,1,3.]],threshold:-3.0477850232273340e-003,right_val:0.4354617893695831,left_val:0.6449490785598755},{features:[[16,11,1,6,-1.],[16,13,1,2,3.]],threshold:3.2140589319169521e-003,right_val:0.3523217141628265,left_val:0.5400155186653137},{features:[[3,11,1,6,-1.],[3,13,1,2,3.]],threshold:-4.0023201145231724e-003,right_val:0.5338417291641235,left_val:0.2774524092674255},{features:[[4,4,14,12,-1.],[11,4,7,6,2.],[4,10,7,6,2.]],threshold:7.4182129465043545e-003,right_val:0.3702817857265472,left_val:0.5676739215850830},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:-8.8764587417244911e-003,right_val:0.4583688974380493,left_val:0.7749221920967102},{features:[[12,3,3,3,-1.],[13,3,1,3,3.]],threshold:2.7311739977449179e-003,right_val:0.3996661007404327,left_val:0.5338721871376038},{features:[[6,6,8,3,-1.],[6,7,8,1,3.]],threshold:-2.5082379579544067e-003,right_val:0.3777498900890350,left_val:0.5611963272094727},{features:[[12,3,3,3,-1.],[13,3,1,3,3.]],threshold:-8.0541074275970459e-003,right_val:0.5179182887077332,left_val:0.2915228903293610},{features:[[3,1,4,10,-1.],[3,1,2,5,2.],[5,6,2,5,2.]],threshold:-9.7938813269138336e-004,right_val:0.3700192868709564,left_val:0.5536432862281799},{features:[[5,7,10,2,-1.],[5,7,5,2,2.]],threshold:-5.8745909482240677e-003,right_val:0.5679376125335693,left_val:0.3754391074180603},{features:[[8,7,3,3,-1.],[9,7,1,3,3.]],threshold:-4.4936719350516796e-003,right_val:0.4480949938297272,left_val:0.7019699215888977},{features:[[15,12,2,3,-1.],[15,13,2,1,3.]],threshold:-5.4389229044318199e-003,right_val:0.5313386917114258,left_val:0.2310364991426468},{features:[[7,8,3,4,-1.],[8,8,1,4,3.]],threshold:-7.5094640487805009e-004,right_val:0.4129343032836914,left_val:0.5864868760108948},{features:[[13,4,1,12,-1.],[13,10,1,6,2.]],threshold:1.4528800420521293e-005,right_val:0.5619621276855469,left_val:0.3732407093048096},{features:[[4,5,12,12,-1.],[4,5,6,6,2.],[10,11,6,6,2.]],threshold:0.0407580696046352,right_val:0.2720521986484528,left_val:0.5312091112136841},{features:[[7,14,7,3,-1.],[7,15,7,1,3.]],threshold:6.6505931317806244e-003,right_val:0.6693493723869324,left_val:0.4710015952587128},{features:[[3,12,2,3,-1.],[3,13,2,1,3.]],threshold:4.5759351924061775e-003,right_val:0.1637275964021683,left_val:0.5167819261550903},{features:[[3,2,14,2,-1.],[10,2,7,1,2.],[3,3,7,1,2.]],threshold:6.5269311890006065e-003,right_val:0.2938531935214996,left_val:0.5397608876228333},{features:[[0,1,3,10,-1.],[1,1,1,10,3.]],threshold:-0.0136603796854615,right_val:0.4532200098037720,left_val:0.7086488008499146},{features:[[9,0,6,5,-1.],[11,0,2,5,3.]],threshold:0.0273588690906763,right_val:0.3589231967926025,left_val:0.5206481218338013},{features:[[5,7,6,2,-1.],[8,7,3,2,2.]],threshold:6.2197551596909761e-004,right_val:0.5441123247146606,left_val:0.3507075905799866},{features:[[7,1,6,10,-1.],[7,6,6,5,2.]],threshold:-3.3077080734074116e-003,right_val:0.4024891853332520,left_val:0.5859522819519043},{features:[[1,1,18,3,-1.],[7,1,6,3,3.]],threshold:-0.0106311095878482,right_val:0.4422602951526642,left_val:0.6743267178535461},{features:[[16,3,3,6,-1.],[16,5,3,2,3.]],threshold:0.0194416493177414,right_val:0.1797904968261719,left_val:0.5282716155052185}],threshold:27.1533508300781250},{simpleClassifiers:[{features:[[6,3,7,6,-1.],[6,6,7,3,2.]],threshold:-5.5052167735993862e-003,right_val:0.2626559138298035,left_val:0.5914731025695801},{features:[[4,7,12,2,-1.],[8,7,4,2,3.]],threshold:1.9562279339879751e-003,right_val:0.5741627216339111,left_val:0.2312581986188889},{features:[[0,4,17,10,-1.],[0,9,17,5,2.]],threshold:-8.8924784213304520e-003,right_val:0.5626654028892517,left_val:0.1656530052423477},{features:[[3,4,15,16,-1.],[3,12,15,8,2.]],threshold:0.0836383774876595,right_val:0.1957294940948486,left_val:0.5423449873924255},{features:[[7,15,6,4,-1.],[7,17,6,2,2.]],threshold:1.2282270472496748e-003,right_val:0.5992503762245178,left_val:0.3417904078960419},{features:[[15,2,4,9,-1.],[15,2,2,9,2.]],threshold:5.7629169896245003e-003,right_val:0.6079903841018677,left_val:0.3719581961631775},{features:[[2,3,3,2,-1.],[2,4,3,1,2.]],threshold:-1.6417410224676132e-003,right_val:0.5576915740966797,left_val:0.2577486038208008},{features:[[13,6,7,9,-1.],[13,9,7,3,3.]],threshold:3.4113149158656597e-003,right_val:0.5514171719551086,left_val:0.2950749099254608},{features:[[8,11,4,3,-1.],[8,12,4,1,3.]],threshold:-0.0110693201422691,right_val:0.4477078914642334,left_val:0.7569358944892883},{features:[[0,2,20,6,-1.],[10,2,10,3,2.],[0,5,10,3,2.]],threshold:0.0348659716546535,right_val:0.2669621109962463,left_val:0.5583708882331848},{features:[[3,2,6,10,-1.],[3,2,3,5,2.],[6,7,3,5,2.]],threshold:6.5701099811121821e-004,right_val:0.2988890111446381,left_val:0.5627313256263733},{features:[[13,10,3,4,-1.],[13,12,3,2,2.]],threshold:-0.0243391301482916,right_val:0.5108863115310669,left_val:0.2771185040473938},{features:[[4,10,3,4,-1.],[4,12,3,2,2.]],threshold:5.9435202274471521e-004,right_val:0.3120341897010803,left_val:0.5580651760101318},{features:[[7,5,6,3,-1.],[9,5,2,3,3.]],threshold:2.2971509024500847e-003,right_val:0.5679075717926025,left_val:0.3330250084400177},{features:[[7,6,6,8,-1.],[7,10,6,4,2.]],threshold:-3.7801829166710377e-003,right_val:0.5344808101654053,left_val:0.2990534901618958},{features:[[0,11,20,6,-1.],[0,14,20,3,2.]],threshold:-0.1342066973447800,right_val:0.5392568111419678,left_val:0.1463858932256699},{features:[[4,13,4,6,-1.],[4,13,2,3,2.],[6,16,2,3,2.]],threshold:7.5224548345431685e-004,right_val:0.5692734718322754,left_val:0.3746953904628754},{features:[[6,0,8,12,-1.],[10,0,4,6,2.],[6,6,4,6,2.]],threshold:-0.0405455417931080,right_val:0.5484297871589661,left_val:0.2754747867584229},{features:[[2,0,15,2,-1.],[2,1,15,1,2.]],threshold:1.2572970008477569e-003,right_val:0.5756075978279114,left_val:0.3744584023952484},{features:[[9,12,2,3,-1.],[9,13,2,1,3.]],threshold:-7.4249948374927044e-003,right_val:0.4728231132030487,left_val:0.7513859272003174},{features:[[3,12,1,2,-1.],[3,13,1,1,2.]],threshold:5.0908129196614027e-004,right_val:0.2932321131229401,left_val:0.5404896736145020},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-1.2808450264856219e-003,right_val:0.4273349046707153,left_val:0.6169779896736145},{features:[[7,3,3,1,-1.],[8,3,1,1,3.]],threshold:-1.8348860321566463e-003,right_val:0.5206472277641296,left_val:0.2048496007919312},{features:[[17,7,3,6,-1.],[17,9,3,2,3.]],threshold:0.0274848695844412,right_val:0.1675522029399872,left_val:0.5252984762191773},{features:[[7,2,3,2,-1.],[8,2,1,2,3.]],threshold:2.2372419480234385e-003,right_val:0.2777658104896545,left_val:0.5267782807350159},{features:[[11,4,5,3,-1.],[11,5,5,1,3.]],threshold:-8.8635291904211044e-003,right_val:0.4812048971652985,left_val:0.6954557895660400},{features:[[4,4,5,3,-1.],[4,5,5,1,3.]],threshold:4.1753971017897129e-003,right_val:0.6349195837974548,left_val:0.4291887879371643},{features:[[19,3,1,2,-1.],[19,4,1,1,2.]],threshold:-1.7098189564421773e-003,right_val:0.5361248850822449,left_val:0.2930536866188049},{features:[[5,5,4,3,-1.],[5,6,4,1,3.]],threshold:6.5328548662364483e-003,right_val:0.7409694194793701,left_val:0.4495325088500977},{features:[[17,7,3,6,-1.],[17,9,3,2,3.]],threshold:-9.5372907817363739e-003,right_val:0.5416501760482788,left_val:0.3149119913578033},{features:[[0,7,3,6,-1.],[0,9,3,2,3.]],threshold:0.0253109894692898,right_val:0.1311707943677902,left_val:0.5121892094612122},{features:[[14,2,6,9,-1.],[14,5,6,3,3.]],threshold:0.0364609695971012,right_val:0.2591339945793152,left_val:0.5175911784172058},{features:[[0,4,5,6,-1.],[0,6,5,2,3.]],threshold:0.0208543296903372,right_val:0.1582316011190414,left_val:0.5137140154838562},{features:[[10,5,6,2,-1.],[12,5,2,2,3.]],threshold:-8.7207747856155038e-004,right_val:0.4398978948593140,left_val:0.5574309825897217},{features:[[4,5,6,2,-1.],[6,5,2,2,3.]],threshold:-1.5227000403683633e-005,right_val:0.3708069920539856,left_val:0.5548940896987915},{features:[[8,1,4,6,-1.],[8,3,4,2,3.]],threshold:-8.4316509310156107e-004,right_val:0.5554211139678955,left_val:0.3387419879436493},{features:[[0,2,3,6,-1.],[0,4,3,2,3.]],threshold:3.6037859972566366e-003,right_val:0.3411171138286591,left_val:0.5358061790466309},{features:[[6,6,8,3,-1.],[6,7,8,1,3.]],threshold:-6.8057891912758350e-003,right_val:0.4345862865447998,left_val:0.6125202775001526},{features:[[0,1,5,9,-1.],[0,4,5,3,3.]],threshold:-0.0470216609537601,right_val:0.5193738937377930,left_val:0.2358165979385376},{features:[[16,0,4,15,-1.],[16,0,2,15,2.]],threshold:-0.0369541086256504,right_val:0.4760943949222565,left_val:0.7323111295700073},{features:[[1,10,3,2,-1.],[1,11,3,1,2.]],threshold:1.0439479956403375e-003,right_val:0.3411330878734589,left_val:0.5419455170631409},{features:[[14,4,1,10,-1.],[14,9,1,5,2.]],threshold:-2.1050689974799752e-004,right_val:0.5554947257041931,left_val:0.2821694016456604},{features:[[0,1,4,12,-1.],[2,1,2,12,2.]],threshold:-0.0808315873146057,right_val:0.4697434902191162,left_val:0.9129930138587952},{features:[[11,11,4,2,-1.],[11,11,2,2,2.]],threshold:-3.6579059087671340e-004,right_val:0.3978292942047119,left_val:0.6022670269012451},{features:[[5,11,4,2,-1.],[7,11,2,2,2.]],threshold:-1.2545920617412776e-004,right_val:0.3845539987087250,left_val:0.5613213181495667},{features:[[3,8,15,5,-1.],[8,8,5,5,3.]],threshold:-0.0687864869832993,right_val:0.5300496816635132,left_val:0.2261611968278885},{features:[[0,0,6,10,-1.],[3,0,3,10,2.]],threshold:0.0124157899990678,right_val:0.5828812122344971,left_val:0.4075691998004913},{features:[[11,4,3,2,-1.],[12,4,1,2,3.]],threshold:-4.7174817882478237e-003,right_val:0.5267757773399353,left_val:0.2827253937721252},{features:[[8,12,3,8,-1.],[8,16,3,4,2.]],threshold:0.0381368584930897,right_val:0.1023615971207619,left_val:0.5074741244316101},{features:[[8,14,5,3,-1.],[8,15,5,1,3.]],threshold:-2.8168049175292253e-003,right_val:0.4359692931175232,left_val:0.6169006824493408},{features:[[7,14,4,3,-1.],[7,15,4,1,3.]],threshold:8.1303603947162628e-003,right_val:0.7606095075607300,left_val:0.4524433016777039},{features:[[11,4,3,2,-1.],[12,4,1,2,3.]],threshold:6.0056019574403763e-003,right_val:0.1859712004661560,left_val:0.5240408778190613},{features:[[3,15,14,4,-1.],[3,15,7,2,2.],[10,17,7,2,2.]],threshold:0.0191393196582794,right_val:0.2332071959972382,left_val:0.5209379196166992},{features:[[2,2,16,4,-1.],[10,2,8,2,2.],[2,4,8,2,2.]],threshold:0.0164457596838474,right_val:0.3264234960079193,left_val:0.5450702905654907},{features:[[0,8,6,12,-1.],[3,8,3,12,2.]],threshold:-0.0373568907380104,right_val:0.4533241987228394,left_val:0.6999046802520752},{features:[[5,7,10,2,-1.],[5,7,5,2,2.]],threshold:-0.0197279006242752,right_val:0.5412809848785400,left_val:0.2653664946556091},{features:[[9,7,2,5,-1.],[10,7,1,5,2.]],threshold:6.6972579807043076e-003,right_val:0.7138652205467224,left_val:0.4480566084384918},{features:[[13,7,6,4,-1.],[16,7,3,2,2.],[13,9,3,2,2.]],threshold:7.4457528535276651e-004,right_val:0.5471320152282715,left_val:0.4231350123882294},{features:[[0,13,8,2,-1.],[0,14,8,1,2.]],threshold:1.1790640419349074e-003,right_val:0.3130455017089844,left_val:0.5341702103614807},{features:[[13,7,6,4,-1.],[16,7,3,2,2.],[13,9,3,2,2.]],threshold:0.0349806100130081,right_val:0.3430530130863190,left_val:0.5118659734725952},{features:[[1,7,6,4,-1.],[1,7,3,2,2.],[4,9,3,2,2.]],threshold:5.6859792675822973e-004,right_val:0.5468639731407166,left_val:0.3532187044620514},{features:[[12,6,1,12,-1.],[12,12,1,6,2.]],threshold:-0.0113406497985125,right_val:0.5348700881004334,left_val:0.2842353880405426},{features:[[9,5,2,6,-1.],[10,5,1,6,2.]],threshold:-6.6228108480572701e-003,right_val:0.4492664933204651,left_val:0.6883640289306641},{features:[[14,12,2,3,-1.],[14,13,2,1,3.]],threshold:-8.0160330981016159e-003,right_val:0.5224308967590332,left_val:0.1709893941879273},{features:[[4,12,2,3,-1.],[4,13,2,1,3.]],threshold:1.4206819469109178e-003,right_val:0.2993383109569550,left_val:0.5290846228599548},{features:[[8,12,4,3,-1.],[8,13,4,1,3.]],threshold:-2.7801711112260818e-003,right_val:0.4460499882698059,left_val:0.6498854160308838},{features:[[5,2,2,4,-1.],[5,2,1,2,2.],[6,4,1,2,2.]],threshold:-1.4747589593753219e-003,right_val:0.5388113260269165,left_val:0.3260438144207001},{features:[[5,5,11,3,-1.],[5,6,11,1,3.]],threshold:-0.0238303393125534,right_val:0.4801219999790192,left_val:0.7528941035270691},{features:[[7,6,4,12,-1.],[7,12,4,6,2.]],threshold:6.9369790144264698e-003,right_val:0.3261427879333496,left_val:0.5335165858268738},{features:[[12,13,8,5,-1.],[12,13,4,5,2.]],threshold:8.2806255668401718e-003,right_val:0.5737829804420471,left_val:0.4580394029617310},{features:[[7,6,1,12,-1.],[7,12,1,6,2.]],threshold:-0.0104395002126694,right_val:0.5233827829360962,left_val:0.2592320144176483}],threshold:34.5541114807128910},{simpleClassifiers:[{features:[[1,2,6,3,-1.],[4,2,3,3,2.]],threshold:7.2006587870419025e-003,right_val:0.6849808096885681,left_val:0.3258886039257050},{features:[[9,5,6,10,-1.],[12,5,3,5,2.],[9,10,3,5,2.]],threshold:-2.8593589086085558e-003,right_val:0.2537829875946045,left_val:0.5838881134986877},{features:[[5,5,8,12,-1.],[5,5,4,6,2.],[9,11,4,6,2.]],threshold:6.8580528022721410e-004,right_val:0.2812424004077911,left_val:0.5708081722259522},{features:[[0,7,20,6,-1.],[0,9,20,2,3.]],threshold:7.9580191522836685e-003,right_val:0.5544260740280151,left_val:0.2501051127910614},{features:[[4,2,2,2,-1.],[4,3,2,1,2.]],threshold:-1.2124150525778532e-003,right_val:0.5433350205421448,left_val:0.2385368049144745},{features:[[4,18,12,2,-1.],[8,18,4,2,3.]],threshold:7.9426132142543793e-003,right_val:0.6220757961273193,left_val:0.3955070972442627},{features:[[7,4,4,16,-1.],[7,12,4,8,2.]],threshold:2.4630590341985226e-003,right_val:0.2992357909679413,left_val:0.5639708042144775},{features:[[7,6,7,8,-1.],[7,10,7,4,2.]],threshold:-6.0396599583327770e-003,right_val:0.5411676764488220,left_val:0.2186512947082520},{features:[[6,3,3,1,-1.],[7,3,1,1,3.]],threshold:-1.2988339876756072e-003,right_val:0.5364584922790527,left_val:0.2350706011056900},{features:[[11,15,2,4,-1.],[11,17,2,2,2.]],threshold:2.2299369447864592e-004,right_val:0.5729606151580811,left_val:0.3804112970829010},{features:[[3,5,4,8,-1.],[3,9,4,4,2.]],threshold:1.4654280385002494e-003,right_val:0.5258268713951111,left_val:0.2510167956352234},{features:[[7,1,6,12,-1.],[7,7,6,6,2.]],threshold:-8.1210042117163539e-004,right_val:0.3851158916950226,left_val:0.5992823839187622},{features:[[4,6,6,2,-1.],[6,6,2,2,3.]],threshold:-1.3836020370945334e-003,right_val:0.3636586964130402,left_val:0.5681396126747131},{features:[[16,4,4,6,-1.],[16,6,4,2,3.]],threshold:-0.0279364492744207,right_val:0.5377560257911682,left_val:0.1491317003965378},{features:[[3,3,5,2,-1.],[3,4,5,1,2.]],threshold:-4.6919551095925272e-004,right_val:0.5572484731674194,left_val:0.3692429959774017},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-4.9829659983515739e-003,right_val:0.4532504081726074,left_val:0.6758509278297424},{features:[[2,16,4,2,-1.],[2,17,4,1,2.]],threshold:1.8815309740602970e-003,right_val:0.2932539880275726,left_val:0.5368022918701172},{features:[[7,13,6,6,-1.],[10,13,3,3,2.],[7,16,3,3,2.]],threshold:-0.0190675500780344,right_val:0.5330067276954651,left_val:0.1649377048015595},{features:[[7,0,3,4,-1.],[8,0,1,4,3.]],threshold:-4.6906559728085995e-003,right_val:0.5119361877441406,left_val:0.1963925957679749},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:5.9777139686048031e-003,right_val:0.7008398175239563,left_val:0.4671171903610230},{features:[[0,4,4,6,-1.],[0,6,4,2,3.]],threshold:-0.0333031304180622,right_val:0.5104162096977234,left_val:0.1155416965484619},{features:[[5,6,12,3,-1.],[9,6,4,3,3.]],threshold:0.0907441079616547,right_val:0.1306173056364059,left_val:0.5149660110473633},{features:[[7,6,6,14,-1.],[9,6,2,14,3.]],threshold:9.3555898638442159e-004,right_val:0.5439859032630920,left_val:0.3605481088161469},{features:[[9,7,3,3,-1.],[10,7,1,3,3.]],threshold:0.0149016501381993,right_val:0.7687569856643677,left_val:0.4886212050914764},{features:[[6,12,2,4,-1.],[6,14,2,2,2.]],threshold:6.1594118596985936e-004,right_val:0.3240939080715179,left_val:0.5356813073158264},{features:[[10,12,7,6,-1.],[10,14,7,2,3.]],threshold:-0.0506709888577461,right_val:0.5230404138565064,left_val:0.1848621964454651},{features:[[1,0,15,2,-1.],[1,1,15,1,2.]],threshold:6.8665749859064817e-004,right_val:0.5517945885658264,left_val:0.3840579986572266},{features:[[14,0,6,6,-1.],[14,0,3,6,2.]],threshold:8.3712432533502579e-003,right_val:0.6131753921508789,left_val:0.4288564026355743},{features:[[5,3,3,1,-1.],[6,3,1,1,3.]],threshold:-1.2953069526702166e-003,right_val:0.5280737876892090,left_val:0.2913674116134644},{features:[[14,0,6,6,-1.],[14,0,3,6,2.]],threshold:-0.0419416800141335,right_val:0.4856030941009522,left_val:0.7554799914360046},{features:[[0,3,20,10,-1.],[0,8,20,5,2.]],threshold:-0.0235293805599213,right_val:0.5256081223487854,left_val:0.2838279902935028},{features:[[14,0,6,6,-1.],[14,0,3,6,2.]],threshold:0.0408574491739273,right_val:0.6277297139167786,left_val:0.4870935082435608},{features:[[0,0,6,6,-1.],[3,0,3,6,2.]],threshold:-0.0254068691283464,right_val:0.4575029015541077,left_val:0.7099707722663879},{features:[[19,15,1,2,-1.],[19,16,1,1,2.]],threshold:-4.1415440500713885e-004,right_val:0.5469412207603455,left_val:0.4030886888504028},{features:[[0,2,4,8,-1.],[2,2,2,8,2.]],threshold:0.0218241196125746,right_val:0.6768701076507568,left_val:0.4502024054527283},{features:[[2,1,18,4,-1.],[11,1,9,2,2.],[2,3,9,2,2.]],threshold:0.0141140399500728,right_val:0.3791700005531311,left_val:0.5442860722541809},{features:[[8,12,1,2,-1.],[8,13,1,1,2.]],threshold:6.7214590671937913e-005,right_val:0.5873476266860962,left_val:0.4200463891029358},{features:[[5,2,10,6,-1.],[10,2,5,3,2.],[5,5,5,3,2.]],threshold:-7.9417638480663300e-003,right_val:0.5585265755653381,left_val:0.3792561888694763},{features:[[9,7,2,4,-1.],[10,7,1,4,2.]],threshold:-7.2144409641623497e-003,right_val:0.4603548943996429,left_val:0.7253103852272034},{features:[[9,7,3,3,-1.],[10,7,1,3,3.]],threshold:2.5817339774221182e-003,right_val:0.5900238752365112,left_val:0.4693301916122437},{features:[[4,5,12,8,-1.],[8,5,4,8,3.]],threshold:0.1340931951999664,right_val:0.1808844953775406,left_val:0.5149213075637817},{features:[[15,15,4,3,-1.],[15,16,4,1,3.]],threshold:2.2962710354477167e-003,right_val:0.3717867136001587,left_val:0.5399743914604187},{features:[[8,18,3,1,-1.],[9,18,1,1,3.]],threshold:-2.1575849968940020e-003,right_val:0.5148863792419434,left_val:0.2408495992422104},{features:[[9,13,4,3,-1.],[9,14,4,1,3.]],threshold:-4.9196188338100910e-003,right_val:0.4738740026950836,left_val:0.6573588252067566},{features:[[7,13,4,3,-1.],[7,14,4,1,3.]],threshold:1.6267469618469477e-003,right_val:0.6303114295005798,left_val:0.4192821979522705},{features:[[19,15,1,2,-1.],[19,16,1,1,2.]],threshold:3.3413388882763684e-004,right_val:0.3702101111412048,left_val:0.5540298223495483},{features:[[0,15,8,4,-1.],[0,17,8,2,2.]],threshold:-0.0266980808228254,right_val:0.5101410746574402,left_val:0.1710917949676514},{features:[[9,3,6,4,-1.],[11,3,2,4,3.]],threshold:-0.0305618792772293,right_val:0.5168793797492981,left_val:0.1904218047857285},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:2.8511548880487680e-003,right_val:0.6313853859901428,left_val:0.4447506964206696},{features:[[3,14,14,6,-1.],[3,16,14,2,3.]],threshold:-0.0362114794552326,right_val:0.5377349257469177,left_val:0.2490727007389069},{features:[[6,3,6,6,-1.],[6,6,6,3,2.]],threshold:-2.4115189444273710e-003,right_val:0.3664236962795258,left_val:0.5381243228912354},{features:[[5,11,10,6,-1.],[5,14,10,3,2.]],threshold:-7.7253201743587852e-004,right_val:0.3541550040245056,left_val:0.5530232191085815},{features:[[3,10,3,4,-1.],[4,10,1,4,3.]],threshold:2.9481729143299162e-004,right_val:0.5667243003845215,left_val:0.4132699072360992},{features:[[13,9,2,2,-1.],[13,9,1,2,2.]],threshold:-6.2334560789167881e-003,right_val:0.5198668837547302,left_val:0.0987872332334518},{features:[[5,3,6,4,-1.],[7,3,2,4,3.]],threshold:-0.0262747295200825,right_val:0.5028107166290283,left_val:0.0911274924874306},{features:[[9,7,3,3,-1.],[10,7,1,3,3.]],threshold:5.3212260827422142e-003,right_val:0.6222720742225647,left_val:0.4726648926734924},{features:[[2,12,2,3,-1.],[2,13,2,1,3.]],threshold:-4.1129058226943016e-003,right_val:0.5137804746627808,left_val:0.2157457023859024},{features:[[9,8,3,12,-1.],[9,12,3,4,3.]],threshold:3.2457809429615736e-003,right_val:0.3721776902675629,left_val:0.5410770773887634},{features:[[3,14,4,6,-1.],[3,14,2,3,2.],[5,17,2,3,2.]],threshold:-0.0163597092032433,right_val:0.4685291945934296,left_val:0.7787874937057495},{features:[[16,15,2,2,-1.],[16,16,2,1,2.]],threshold:3.2166109303943813e-004,right_val:0.4240373969078064,left_val:0.5478987097740173},{features:[[2,15,2,2,-1.],[2,16,2,1,2.]],threshold:6.4452440710738301e-004,right_val:0.3501324951648712,left_val:0.5330560803413391},{features:[[8,12,4,3,-1.],[8,13,4,1,3.]],threshold:-7.8909732401371002e-003,right_val:0.4726569056510925,left_val:0.6923521161079407},{features:[[0,7,20,1,-1.],[10,7,10,1,2.]],threshold:0.0483362115919590,right_val:0.0757492035627365,left_val:0.5055900216102600},{features:[[7,6,8,3,-1.],[7,6,4,3,2.]],threshold:-7.5178127735853195e-004,right_val:0.5538573861122131,left_val:0.3783741891384125},{features:[[5,7,8,2,-1.],[9,7,4,2,2.]],threshold:-2.4953910615295172e-003,right_val:0.5359612107276917,left_val:0.3081651031970978},{features:[[9,7,3,5,-1.],[10,7,1,5,3.]],threshold:-2.2385010961443186e-003,right_val:0.4649342894554138,left_val:0.6633958816528320},{features:[[8,7,3,5,-1.],[9,7,1,5,3.]],threshold:-1.7988430336117744e-003,right_val:0.4347187876701355,left_val:0.6596844792366028},{features:[[11,1,3,5,-1.],[12,1,1,5,3.]],threshold:8.7860915809869766e-003,right_val:0.2315579950809479,left_val:0.5231832861900330},{features:[[6,2,3,6,-1.],[7,2,1,6,3.]],threshold:3.6715380847454071e-003,right_val:0.2977376878261566,left_val:0.5204250216484070},{features:[[14,14,6,5,-1.],[14,14,3,5,2.]],threshold:-0.0353364497423172,right_val:0.4861505031585693,left_val:0.7238878011703491},{features:[[9,8,2,2,-1.],[9,9,2,1,2.]],threshold:-6.9189240457490087e-004,right_val:0.5229824781417847,left_val:0.3105022013187408},{features:[[10,7,1,3,-1.],[10,8,1,1,3.]],threshold:-3.3946109469980001e-003,right_val:0.5210173726081848,left_val:0.3138968050479889},{features:[[6,6,2,2,-1.],[6,6,1,1,2.],[7,7,1,1,2.]],threshold:9.8569283727556467e-004,right_val:0.6585097908973694,left_val:0.4536580145359039},{features:[[2,11,18,4,-1.],[11,11,9,2,2.],[2,13,9,2,2.]],threshold:-0.0501631014049053,right_val:0.5198916792869568,left_val:0.1804454028606415},{features:[[6,6,2,2,-1.],[6,6,1,1,2.],[7,7,1,1,2.]],threshold:-2.2367259953171015e-003,right_val:0.4651359021663666,left_val:0.7255702018737793},{features:[[0,15,20,2,-1.],[0,16,20,1,2.]],threshold:7.4326287722215056e-004,right_val:0.5898545980453491,left_val:0.4412921071052551},{features:[[4,14,2,3,-1.],[4,15,2,1,3.]],threshold:-9.3485182151198387e-004,right_val:0.5366017818450928,left_val:0.3500052988529205},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:0.0174979399889708,right_val:0.8315284848213196,left_val:0.4912194907665253},{features:[[8,7,2,3,-1.],[8,8,2,1,3.]],threshold:-1.5200000489130616e-003,right_val:0.5370560288429260,left_val:0.3570275902748108},{features:[[9,10,2,3,-1.],[9,11,2,1,3.]],threshold:7.8003940870985389e-004,right_val:0.5967335104942322,left_val:0.4353772103786469}],threshold:39.1072883605957030},{simpleClassifiers:[{features:[[5,4,10,4,-1.],[5,6,10,2,2.]],threshold:-9.9945552647113800e-003,right_val:0.3054533004760742,left_val:0.6162583231925964},{features:[[9,7,6,4,-1.],[12,7,3,2,2.],[9,9,3,2,2.]],threshold:-1.1085229925811291e-003,right_val:0.3155578076839447,left_val:0.5818294882774353},{features:[[4,7,3,6,-1.],[4,9,3,2,3.]],threshold:1.0364380432292819e-003,right_val:0.5692911744117737,left_val:0.2552052140235901},{features:[[11,15,4,4,-1.],[13,15,2,2,2.],[11,17,2,2,2.]],threshold:6.8211311008781195e-004,right_val:0.5934931039810181,left_val:0.3685089945793152},{features:[[7,8,4,2,-1.],[7,9,4,1,2.]],threshold:-6.8057340104132891e-004,right_val:0.5474792122840881,left_val:0.2332392036914825},{features:[[13,1,4,3,-1.],[13,1,2,3,2.]],threshold:2.6068789884448051e-004,right_val:0.5667545795440674,left_val:0.3257457017898560},{features:[[5,15,4,4,-1.],[5,15,2,2,2.],[7,17,2,2,2.]],threshold:5.1607372006401420e-004,right_val:0.5845472812652588,left_val:0.3744716942310333},{features:[[9,5,4,7,-1.],[9,5,2,7,2.]],threshold:8.5007521556690335e-004,right_val:0.5522807240486145,left_val:0.3420371115207672},{features:[[5,6,8,3,-1.],[9,6,4,3,2.]],threshold:-1.8607829697430134e-003,right_val:0.5375424027442932,left_val:0.2804419994354248},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-1.5033970121294260e-003,right_val:0.5498952269554138,left_val:0.2579050958156586},{features:[[7,15,5,3,-1.],[7,16,5,1,3.]],threshold:2.3478909861296415e-003,right_val:0.6313710808753967,left_val:0.4175156056880951},{features:[[11,10,4,3,-1.],[11,10,2,3,2.]],threshold:-2.8880240279249847e-004,right_val:0.4052666127681732,left_val:0.5865169763565064},{features:[[6,9,8,10,-1.],[6,14,8,5,2.]],threshold:8.9405477046966553e-003,right_val:0.2318654060363770,left_val:0.5211141109466553},{features:[[10,11,6,2,-1.],[10,11,3,2,2.]],threshold:-0.0193277392536402,right_val:0.5241525769233704,left_val:0.2753432989120483},{features:[[4,11,6,2,-1.],[7,11,3,2,2.]],threshold:-2.0202060113660991e-004,right_val:0.3677195906639099,left_val:0.5722978711128235},{features:[[11,3,8,1,-1.],[11,3,4,1,2.]],threshold:2.1179069299250841e-003,right_val:0.5542430877685547,left_val:0.4466108083724976},{features:[[6,3,3,2,-1.],[7,3,1,2,3.]],threshold:-1.7743760254234076e-003,right_val:0.5300959944725037,left_val:0.2813253104686737},{features:[[14,5,6,5,-1.],[14,5,3,5,2.]],threshold:4.2234458960592747e-003,right_val:0.5795428156852722,left_val:0.4399709999561310},{features:[[7,5,2,12,-1.],[7,11,2,6,2.]],threshold:-0.0143752200528979,right_val:0.5292059183120728,left_val:0.2981117963790894},{features:[[8,11,4,3,-1.],[8,12,4,1,3.]],threshold:-0.0153491804376245,right_val:0.4748171865940094,left_val:0.7705215215682983},{features:[[4,1,2,3,-1.],[5,1,1,3,2.]],threshold:1.5152279956964776e-005,right_val:0.5576897263526917,left_val:0.3718844056129456},{features:[[18,3,2,6,-1.],[18,5,2,2,3.]],threshold:-9.1293919831514359e-003,right_val:0.5286766886711121,left_val:0.3615196049213409},{features:[[0,3,2,6,-1.],[0,5,2,2,3.]],threshold:2.2512159775942564e-003,right_val:0.3486298024654388,left_val:0.5364704728126526},{features:[[9,12,2,3,-1.],[9,13,2,1,3.]],threshold:-4.9696918576955795e-003,right_val:0.4676836133003235,left_val:0.6927651762962341},{features:[[7,13,4,3,-1.],[7,14,4,1,3.]],threshold:-0.0128290103748441,right_val:0.4660735130310059,left_val:0.7712153792381287},{features:[[18,0,2,6,-1.],[18,2,2,2,3.]],threshold:-9.3660065904259682e-003,right_val:0.5351287722587585,left_val:0.3374983966350555},{features:[[0,0,2,6,-1.],[0,2,2,2,3.]],threshold:3.2452319283038378e-003,right_val:0.3289610147476196,left_val:0.5325189828872681},{features:[[8,14,6,3,-1.],[8,15,6,1,3.]],threshold:-0.0117235602810979,right_val:0.4754300117492676,left_val:0.6837652921676636},{features:[[7,4,2,4,-1.],[8,4,1,4,2.]],threshold:2.9257940695970319e-005,right_val:0.5360502004623413,left_val:0.3572087883949280},{features:[[8,5,4,6,-1.],[8,7,4,2,3.]],threshold:-2.2244219508138485e-005,right_val:0.3552064001560211,left_val:0.5541427135467529},{features:[[6,4,2,2,-1.],[7,4,1,2,2.]],threshold:5.0881509669125080e-003,right_val:0.1256462037563324,left_val:0.5070844292640686},{features:[[3,14,14,4,-1.],[10,14,7,2,2.],[3,16,7,2,2.]],threshold:0.0274296794086695,right_val:0.1625818014144898,left_val:0.5269560217857361},{features:[[6,15,6,2,-1.],[6,15,3,1,2.],[9,16,3,1,2.]],threshold:-6.4142867922782898e-003,right_val:0.4584197103977203,left_val:0.7145588994026184},{features:[[14,15,6,2,-1.],[14,16,6,1,2.]],threshold:3.3479959238320589e-003,right_val:0.3494696915149689,left_val:0.5398612022399902},{features:[[2,12,12,8,-1.],[2,16,12,4,2.]],threshold:-0.0826354920864105,right_val:0.5160226225852966,left_val:0.2439192980527878},{features:[[7,7,7,2,-1.],[7,8,7,1,2.]],threshold:1.0261740535497665e-003,right_val:0.5767908096313477,left_val:0.3886891901493073},{features:[[0,2,18,2,-1.],[0,3,18,1,2.]],threshold:-1.6307090409100056e-003,right_val:0.5347700715065002,left_val:0.3389458060264587},{features:[[9,6,2,5,-1.],[9,6,1,5,2.]],threshold:2.4546680506318808e-003,right_val:0.6387246847152710,left_val:0.4601413905620575},{features:[[7,5,3,8,-1.],[8,5,1,8,3.]],threshold:-9.9476519972085953e-004,right_val:0.4120396077632904,left_val:0.5769879221916199},{features:[[9,6,3,4,-1.],[10,6,1,4,3.]],threshold:0.0154091902077198,right_val:0.7089822292327881,left_val:0.4878709018230438},{features:[[4,13,3,2,-1.],[4,14,3,1,2.]],threshold:1.1784400558099151e-003,right_val:0.2895244956016541,left_val:0.5263553261756897},{features:[[9,4,6,3,-1.],[11,4,2,3,3.]],threshold:-0.0277019198983908,right_val:0.5219606757164002,left_val:0.1498828977346420},{features:[[5,4,6,3,-1.],[7,4,2,3,3.]],threshold:-0.0295053999871016,right_val:0.4999816119670868,left_val:0.0248933192342520},{features:[[14,11,5,2,-1.],[14,12,5,1,2.]],threshold:4.5159430010244250e-004,right_val:0.4029662907123566,left_val:0.5464622974395752},{features:[[1,2,6,9,-1.],[3,2,2,9,3.]],threshold:7.1772639639675617e-003,right_val:0.5866296887397766,left_val:0.4271056950092316},{features:[[14,6,6,13,-1.],[14,6,3,13,2.]],threshold:-0.0741820484399796,right_val:0.4919027984142304,left_val:0.6874179244041443},{features:[[3,6,14,8,-1.],[3,6,7,4,2.],[10,10,7,4,2.]],threshold:-0.0172541607171297,right_val:0.5348739027976990,left_val:0.3370676040649414},{features:[[16,0,4,11,-1.],[16,0,2,11,2.]],threshold:0.0148515598848462,right_val:0.6129904985427856,left_val:0.4626792967319489},{features:[[3,4,12,12,-1.],[3,4,6,6,2.],[9,10,6,6,2.]],threshold:0.0100020002573729,right_val:0.3423453867435455,left_val:0.5346122980117798},{features:[[11,4,5,3,-1.],[11,5,5,1,3.]],threshold:2.0138120744377375e-003,right_val:0.5824304223060608,left_val:0.4643830060958862},{features:[[4,11,4,2,-1.],[4,12,4,1,2.]],threshold:1.5135470312088728e-003,right_val:0.2856149971485138,left_val:0.5196396112442017},{features:[[10,7,2,2,-1.],[10,7,1,2,2.]],threshold:3.1381431035697460e-003,right_val:0.5958529710769653,left_val:0.4838162958621979},{features:[[8,7,2,2,-1.],[9,7,1,2,2.]],threshold:-5.1450440660119057e-003,right_val:0.4741412103176117,left_val:0.8920302987098694},{features:[[9,17,3,2,-1.],[10,17,1,2,3.]],threshold:-4.4736708514392376e-003,right_val:0.5337278842926025,left_val:0.2033942937850952},{features:[[5,6,3,3,-1.],[5,7,3,1,3.]],threshold:1.9628470763564110e-003,right_val:0.6725863218307495,left_val:0.4571633934974670},{features:[[10,0,3,3,-1.],[11,0,1,3,3.]],threshold:5.4260450415313244e-003,right_val:0.2845670878887177,left_val:0.5271108150482178},{features:[[5,6,6,2,-1.],[5,6,3,1,2.],[8,7,3,1,2.]],threshold:4.9611460417509079e-004,right_val:0.5718597769737244,left_val:0.4138312935829163},{features:[[12,16,4,3,-1.],[12,17,4,1,3.]],threshold:9.3728788197040558e-003,right_val:0.2804847061634064,left_val:0.5225151181221008},{features:[[3,12,3,2,-1.],[3,13,3,1,2.]],threshold:6.0500897234305739e-004,right_val:0.3314523994922638,left_val:0.5236768722534180},{features:[[9,12,3,2,-1.],[9,13,3,1,2.]],threshold:5.6792551185935736e-004,right_val:0.6276971101760864,left_val:0.4531059861183167},{features:[[1,11,16,4,-1.],[1,11,8,2,2.],[9,13,8,2,2.]],threshold:0.0246443394571543,right_val:0.2017143964767456,left_val:0.5130851864814758},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:-0.0102904504165053,right_val:0.4876641035079956,left_val:0.7786595225334168},{features:[[4,4,5,3,-1.],[4,5,5,1,3.]],threshold:2.0629419013857841e-003,right_val:0.5881264209747315,left_val:0.4288598895072937},{features:[[12,16,4,3,-1.],[12,17,4,1,3.]],threshold:-5.0519481301307678e-003,right_val:0.5286008715629578,left_val:0.3523977994918823},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:-5.7692620903253555e-003,right_val:0.4588094055652618,left_val:0.6841086149215698},{features:[[9,0,2,2,-1.],[9,1,2,1,2.]],threshold:-4.5789941214025021e-004,right_val:0.5485978126525879,left_val:0.3565520048141480},{features:[[8,9,4,2,-1.],[8,10,4,1,2.]],threshold:-7.5918837683275342e-004,right_val:0.5254197120666504,left_val:0.3368793129920960},{features:[[8,8,4,3,-1.],[8,9,4,1,3.]],threshold:-1.7737259622663260e-003,right_val:0.5454015135765076,left_val:0.3422161042690277},{features:[[0,13,6,3,-1.],[2,13,2,3,3.]],threshold:-8.5610467940568924e-003,right_val:0.4485856890678406,left_val:0.6533612012863159},{features:[[16,14,3,2,-1.],[16,15,3,1,2.]],threshold:1.7277270089834929e-003,right_val:0.3925352990627289,left_val:0.5307580232620239},{features:[[1,18,18,2,-1.],[7,18,6,2,3.]],threshold:-0.0281996093690395,right_val:0.4588584005832672,left_val:0.6857458949089050},{features:[[16,14,3,2,-1.],[16,15,3,1,2.]],threshold:-1.7781109781935811e-003,right_val:0.5369856953620911,left_val:0.4037851095199585},{features:[[1,14,3,2,-1.],[1,15,3,1,2.]],threshold:3.3177141449414194e-004,right_val:0.3705750107765198,left_val:0.5399798750877380},{features:[[7,14,6,3,-1.],[7,15,6,1,3.]],threshold:2.6385399978607893e-003,right_val:0.6452730894088745,left_val:0.4665437042713165},{features:[[5,14,8,3,-1.],[5,15,8,1,3.]],threshold:-2.1183069329708815e-003,right_val:0.4064677059650421,left_val:0.5914781093597412},{features:[[10,6,4,14,-1.],[10,6,2,14,2.]],threshold:-0.0147732896730304,right_val:0.5294762849807739,left_val:0.3642038106918335},{features:[[6,6,4,14,-1.],[8,6,2,14,2.]],threshold:-0.0168154407292604,right_val:0.5144972801208496,left_val:0.2664231956005096},{features:[[13,5,2,3,-1.],[13,6,2,1,3.]],threshold:-6.3370140269398689e-003,right_val:0.4852097928524017,left_val:0.6779531240463257},{features:[[7,16,6,1,-1.],[9,16,2,1,3.]],threshold:-4.4560048991115764e-005,right_val:0.4153054058551788,left_val:0.5613964796066284},{features:[[9,12,3,3,-1.],[9,13,3,1,3.]],threshold:-1.0240620467811823e-003,right_val:0.4566304087638855,left_val:0.5964478254318237},{features:[[7,0,3,3,-1.],[8,0,1,3,3.]],threshold:-2.3161689750850201e-003,right_val:0.5188159942626953,left_val:0.2976115047931671},{features:[[4,0,16,18,-1.],[4,9,16,9,2.]],threshold:0.5321757197380066,right_val:0.2202631980180740,left_val:0.5187839269638062},{features:[[1,1,16,14,-1.],[1,8,16,7,2.]],threshold:-0.1664305031299591,right_val:0.5060343146324158,left_val:0.1866022944450378},{features:[[3,9,15,4,-1.],[8,9,5,4,3.]],threshold:0.1125352978706360,right_val:0.1185022965073586,left_val:0.5212125182151794},{features:[[6,12,7,3,-1.],[6,13,7,1,3.]],threshold:9.3046864494681358e-003,right_val:0.6826149225234985,left_val:0.4589937031269074},{features:[[14,15,2,3,-1.],[14,16,2,1,3.]],threshold:-4.6255099587142467e-003,right_val:0.5225008726119995,left_val:0.3079940974712372},{features:[[2,3,16,14,-1.],[2,3,8,7,2.],[10,10,8,7,2.]],threshold:-0.1111646965146065,right_val:0.5080801844596863,left_val:0.2101044058799744},{features:[[16,2,4,18,-1.],[18,2,2,9,2.],[16,11,2,9,2.]],threshold:-0.0108884396031499,right_val:0.4790464043617249,left_val:0.5765355229377747},{features:[[4,15,2,3,-1.],[4,16,2,1,3.]],threshold:5.8564301580190659e-003,right_val:0.1563598960638046,left_val:0.5065100193023682},{features:[[16,2,4,18,-1.],[18,2,2,9,2.],[16,11,2,9,2.]],threshold:0.0548543892800808,right_val:0.7230510711669922,left_val:0.4966914951801300},{features:[[1,1,8,3,-1.],[1,2,8,1,3.]],threshold:-0.0111973397433758,right_val:0.5098798274993897,left_val:0.2194979041814804},{features:[[8,11,4,3,-1.],[8,12,4,1,3.]],threshold:4.4069071300327778e-003,right_val:0.6770902872085571,left_val:0.4778401851654053},{features:[[5,11,5,9,-1.],[5,14,5,3,3.]],threshold:-0.0636652931571007,right_val:0.5081024169921875,left_val:0.1936362981796265},{features:[[16,0,4,11,-1.],[16,0,2,11,2.]],threshold:-9.8081491887569427e-003,right_val:0.4810341000556946,left_val:0.5999063253402710},{features:[[7,0,6,1,-1.],[9,0,2,1,3.]],threshold:-2.1717099007219076e-003,right_val:0.5235472917556763,left_val:0.3338333964347839},{features:[[16,3,3,7,-1.],[17,3,1,7,3.]],threshold:-0.0133155202493072,right_val:0.4919213056564331,left_val:0.6617069840431213},{features:[[1,3,3,7,-1.],[2,3,1,7,3.]],threshold:2.5442079640924931e-003,right_val:0.6082184910774231,left_val:0.4488744139671326},{features:[[7,8,6,12,-1.],[7,12,6,4,3.]],threshold:0.0120378397405148,right_val:0.3292432129383087,left_val:0.5409392118453980},{features:[[0,0,4,11,-1.],[2,0,2,11,2.]],threshold:-0.0207010507583618,right_val:0.4594995975494385,left_val:0.6819120049476624},{features:[[14,0,6,20,-1.],[14,0,3,20,2.]],threshold:0.0276082791388035,right_val:0.5767282843589783,left_val:0.4630792140960693},{features:[[0,3,1,2,-1.],[0,4,1,1,2.]],threshold:1.2370620388537645e-003,right_val:0.2635016143321991,left_val:0.5165379047393799},{features:[[5,5,10,8,-1.],[10,5,5,4,2.],[5,9,5,4,2.]],threshold:-0.0376693382859230,right_val:0.5278980135917664,left_val:0.2536393105983734},{features:[[4,7,12,4,-1.],[4,7,6,2,2.],[10,9,6,2,2.]],threshold:-1.8057259730994701e-003,right_val:0.5517500042915344,left_val:0.3985156118869782}],threshold:50.6104812622070310},{simpleClassifiers:[{features:[[2,1,6,4,-1.],[5,1,3,4,2.]],threshold:4.4299028813838959e-003,right_val:0.6335226297378540,left_val:0.2891018092632294},{features:[[9,7,6,4,-1.],[12,7,3,2,2.],[9,9,3,2,2.]],threshold:-2.3813319858163595e-003,right_val:0.3477487862110138,left_val:0.6211789250373840},{features:[[5,6,2,6,-1.],[5,9,2,3,2.]],threshold:2.2915711160749197e-003,right_val:0.5582118034362793,left_val:0.2254412025213242},{features:[[9,16,6,4,-1.],[12,16,3,2,2.],[9,18,3,2,2.]],threshold:9.9457940086722374e-004,right_val:0.5930070877075195,left_val:0.3711710870265961},{features:[[9,4,2,12,-1.],[9,10,2,6,2.]],threshold:7.7164667891338468e-004,right_val:0.3347995877265930,left_val:0.5651720166206360},{features:[[7,1,6,18,-1.],[9,1,2,18,3.]],threshold:-1.1386410333216190e-003,right_val:0.5508630871772766,left_val:0.3069126009941101},{features:[[4,12,12,2,-1.],[8,12,4,2,3.]],threshold:-1.6403039626311511e-004,right_val:0.3699047863483429,left_val:0.5762827992439270},{features:[[8,8,6,2,-1.],[8,9,6,1,2.]],threshold:2.9793529392918572e-005,right_val:0.5437911152839661,left_val:0.2644244134426117},{features:[[8,0,3,6,-1.],[9,0,1,6,3.]],threshold:8.5774902254343033e-003,right_val:0.1795724928379059,left_val:0.5051138997077942},{features:[[11,18,3,2,-1.],[11,19,3,1,2.]],threshold:-2.6032689493149519e-004,right_val:0.4446826875209808,left_val:0.5826969146728516},{features:[[1,1,17,4,-1.],[1,3,17,2,2.]],threshold:-6.1404630541801453e-003,right_val:0.5346971750259399,left_val:0.3113852143287659},{features:[[11,8,4,12,-1.],[11,8,2,12,2.]],threshold:-0.0230869501829147,right_val:0.5331197977066040,left_val:0.3277946114540100},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:-0.0142436502501369,right_val:0.4588063061237335,left_val:0.7381709814071655},{features:[[12,3,2,17,-1.],[12,3,1,17,2.]],threshold:0.0194871295243502,right_val:0.2274471968412399,left_val:0.5256630778312683},{features:[[4,7,6,1,-1.],[6,7,2,1,3.]],threshold:-9.6681108698248863e-004,right_val:0.3815006911754608,left_val:0.5511230826377869},{features:[[18,3,2,3,-1.],[18,4,2,1,3.]],threshold:3.1474709976464510e-003,right_val:0.2543726861476898,left_val:0.5425636768341065},{features:[[8,4,3,4,-1.],[8,6,3,2,2.]],threshold:-1.8026070029009134e-004,right_val:0.3406304121017456,left_val:0.5380191802978516},{features:[[4,5,12,10,-1.],[4,10,12,5,2.]],threshold:-6.0266260989010334e-003,right_val:0.5420572161674500,left_val:0.3035801947116852},{features:[[5,18,4,2,-1.],[7,18,2,2,2.]],threshold:4.4462960795499384e-004,right_val:0.5660110116004944,left_val:0.3990997076034546},{features:[[17,2,3,6,-1.],[17,4,3,2,3.]],threshold:2.2609760053455830e-003,right_val:0.3940688073635101,left_val:0.5562806725502014},{features:[[7,7,6,6,-1.],[9,7,2,6,3.]],threshold:0.0511330589652061,right_val:0.7118561863899231,left_val:0.4609653949737549},{features:[[17,2,3,6,-1.],[17,4,3,2,3.]],threshold:-0.0177863091230392,right_val:0.5322144031524658,left_val:0.2316166013479233},{features:[[8,0,3,4,-1.],[9,0,1,4,3.]],threshold:-4.9679628573358059e-003,right_val:0.5122029185295105,left_val:0.2330771982669830},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:2.0667689386755228e-003,right_val:0.6455488204956055,left_val:0.4657444059848785},{features:[[0,12,6,3,-1.],[0,13,6,1,3.]],threshold:7.4413768015801907e-003,right_val:0.2361633926630020,left_val:0.5154392123222351},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:-3.6277279723435640e-003,right_val:0.4476661086082459,left_val:0.6219773292541504},{features:[[3,12,2,3,-1.],[3,13,2,1,3.]],threshold:-5.3530759178102016e-003,right_val:0.5102208256721497,left_val:0.1837355047464371},{features:[[5,6,12,7,-1.],[9,6,4,7,3.]],threshold:0.1453091949224472,right_val:0.1535930931568146,left_val:0.5145987272262573},{features:[[0,2,3,6,-1.],[0,4,3,2,3.]],threshold:2.4394490756094456e-003,right_val:0.3624661862850189,left_val:0.5343660116195679},{features:[[14,6,1,3,-1.],[14,7,1,1,3.]],threshold:-3.1283390708267689e-003,right_val:0.4845592081546783,left_val:0.6215007901191711},{features:[[2,0,3,14,-1.],[3,0,1,14,3.]],threshold:1.7940260004252195e-003,right_val:0.5824198126792908,left_val:0.4299261868000031},{features:[[12,14,5,6,-1.],[12,16,5,2,3.]],threshold:0.0362538211047649,right_val:0.1439467966556549,left_val:0.5260334014892578},{features:[[4,14,5,6,-1.],[4,16,5,2,3.]],threshold:-5.1746722310781479e-003,right_val:0.5287045240402222,left_val:0.3506538867950440},{features:[[11,10,2,2,-1.],[12,10,1,1,2.],[11,11,1,1,2.]],threshold:6.5383297624066472e-004,right_val:0.6122040152549744,left_val:0.4809640944004059},{features:[[5,0,3,14,-1.],[6,0,1,14,3.]],threshold:-0.0264802295714617,right_val:0.5045586228370667,left_val:0.1139362007379532},{features:[[10,15,2,3,-1.],[10,16,2,1,3.]],threshold:-3.0440660193562508e-003,right_val:0.4794734120368958,left_val:0.6352095007896423},{features:[[0,2,2,3,-1.],[0,3,2,1,3.]],threshold:3.6993520334362984e-003,right_val:0.2498510926961899,left_val:0.5131118297576904},{features:[[5,11,12,6,-1.],[5,14,12,3,2.]],threshold:-3.6762931267730892e-004,right_val:0.3709532022476196,left_val:0.5421394705772400},{features:[[6,11,3,9,-1.],[6,14,3,3,3.]],threshold:-0.0413822606205940,right_val:0.5081691741943359,left_val:0.1894959956407547},{features:[[11,10,2,2,-1.],[12,10,1,1,2.],[11,11,1,1,2.]],threshold:-1.0532729793339968e-003,right_val:0.4783608913421631,left_val:0.6454367041587830},{features:[[5,6,1,3,-1.],[5,7,1,1,3.]],threshold:-2.1648600231856108e-003,right_val:0.4499826133251190,left_val:0.6215031147003174},{features:[[4,9,13,3,-1.],[4,10,13,1,3.]],threshold:-5.6747748749330640e-004,right_val:0.5419334769248962,left_val:0.3712610900402069},{features:[[1,7,15,6,-1.],[6,7,5,6,3.]],threshold:0.1737584024667740,right_val:0.1215742006897926,left_val:0.5023643970489502},{features:[[4,5,12,6,-1.],[8,5,4,6,3.]],threshold:-2.9049699660390615e-003,right_val:0.5381883978843689,left_val:0.3240267932415009},{features:[[8,10,4,3,-1.],[8,11,4,1,3.]],threshold:1.2299539521336555e-003,right_val:0.5703486204147339,left_val:0.4165507853031158},{features:[[15,14,1,3,-1.],[15,15,1,1,3.]],threshold:-5.4329237900674343e-004,right_val:0.5547549128532410,left_val:0.3854042887687683},{features:[[1,11,5,3,-1.],[1,12,5,1,3.]],threshold:-8.3297258242964745e-003,right_val:0.5097082853317261,left_val:0.2204494029283524},{features:[[7,1,7,12,-1.],[7,7,7,6,2.]],threshold:-1.0417630255687982e-004,right_val:0.4303036034107208,left_val:0.5607066154479981},{features:[[0,1,6,10,-1.],[0,1,3,5,2.],[3,6,3,5,2.]],threshold:0.0312047004699707,right_val:0.6982004046440125,left_val:0.4621657133102417},{features:[[16,1,4,3,-1.],[16,2,4,1,3.]],threshold:7.8943502157926559e-003,right_val:0.2269068062305450,left_val:0.5269594192504883},{features:[[5,5,2,3,-1.],[5,6,2,1,3.]],threshold:-4.3645310215651989e-003,right_val:0.4537956118583679,left_val:0.6359223127365112},{features:[[12,2,3,5,-1.],[13,2,1,5,3.]],threshold:7.6793059706687927e-003,right_val:0.2740483880043030,left_val:0.5274767875671387},{features:[[0,3,4,6,-1.],[0,5,4,2,3.]],threshold:-0.0254311393946409,right_val:0.5071732997894287,left_val:0.2038519978523254},{features:[[8,12,4,2,-1.],[8,13,4,1,2.]],threshold:8.2000601105391979e-004,right_val:0.6119868159294128,left_val:0.4587455093860626},{features:[[8,18,3,1,-1.],[9,18,1,1,3.]],threshold:2.9284600168466568e-003,right_val:0.2028204947710037,left_val:0.5071274042129517},{features:[[11,10,2,2,-1.],[12,10,1,1,2.],[11,11,1,1,2.]],threshold:4.5256470912136137e-005,right_val:0.5430821776390076,left_val:0.4812104105949402},{features:[[7,10,2,2,-1.],[7,10,1,1,2.],[8,11,1,1,2.]],threshold:1.3158309739083052e-003,right_val:0.6779323220252991,left_val:0.4625813961029053},{features:[[11,11,4,4,-1.],[11,13,4,2,2.]],threshold:1.5870389761403203e-003,right_val:0.3431465029716492,left_val:0.5386291742324829},{features:[[8,12,3,8,-1.],[9,12,1,8,3.]],threshold:-0.0215396601706743,right_val:0.5003222823143005,left_val:0.0259425006806850},{features:[[13,0,6,3,-1.],[13,1,6,1,3.]],threshold:0.0143344802781940,right_val:0.1590632945299149,left_val:0.5202844738960266},{features:[[8,8,3,4,-1.],[9,8,1,4,3.]],threshold:-8.3881383761763573e-003,right_val:0.4648044109344482,left_val:0.7282481193542481},{features:[[5,7,10,10,-1.],[10,7,5,5,2.],[5,12,5,5,2.]],threshold:9.1906841844320297e-003,right_val:0.3923191130161285,left_val:0.5562356710433960},{features:[[3,18,8,2,-1.],[3,18,4,1,2.],[7,19,4,1,2.]],threshold:-5.8453059755265713e-003,right_val:0.4629127979278565,left_val:0.6803392767906189},{features:[[10,2,6,8,-1.],[12,2,2,8,3.]],threshold:-0.0547077991068363,right_val:0.5206125974655151,left_val:0.2561671137809753},{features:[[4,2,6,8,-1.],[6,2,2,8,3.]],threshold:9.1142775490880013e-003,right_val:0.3053877055644989,left_val:0.5189620256423950},{features:[[11,0,3,7,-1.],[12,0,1,7,3.]],threshold:-0.0155750000849366,right_val:0.5169094800949097,left_val:0.1295074969530106},{features:[[7,11,2,1,-1.],[8,11,1,1,2.]],threshold:-1.2050600344082341e-004,right_val:0.4230825006961823,left_val:0.5735098123550415},{features:[[15,14,1,3,-1.],[15,15,1,1,3.]],threshold:1.2273970060050488e-003,right_val:0.4079791903495789,left_val:0.5289878249168396},{features:[[7,15,2,2,-1.],[7,15,1,1,2.],[8,16,1,1,2.]],threshold:-1.2186600361019373e-003,right_val:0.4574409127235413,left_val:0.6575639843940735},{features:[[15,14,1,3,-1.],[15,15,1,1,3.]],threshold:-3.3256649039685726e-003,right_val:0.5195019841194153,left_val:0.3628047108650208},{features:[[6,0,3,7,-1.],[7,0,1,7,3.]],threshold:-0.0132883097976446,right_val:0.5043488740921021,left_val:0.1284265965223312},{features:[[18,1,2,7,-1.],[18,1,1,7,2.]],threshold:-3.3839771058410406e-003,right_val:0.4757505953311920,left_val:0.6292240023612976},{features:[[2,0,8,20,-1.],[2,10,8,10,2.]],threshold:-0.2195422053337097,right_val:0.5065013766288757,left_val:0.1487731933593750},{features:[[3,0,15,6,-1.],[3,2,15,2,3.]],threshold:4.9111708067357540e-003,right_val:0.5665838718414307,left_val:0.4256102144718170},{features:[[4,3,12,2,-1.],[4,4,12,1,2.]],threshold:-1.8744950648397207e-004,right_val:0.5586857199668884,left_val:0.4004144072532654},{features:[[16,0,4,5,-1.],[16,0,2,5,2.]],threshold:-5.2178641781210899e-003,right_val:0.4812706112861633,left_val:0.6009116172790527},{features:[[7,0,3,4,-1.],[8,0,1,4,3.]],threshold:-1.1111519997939467e-003,right_val:0.5287089943885803,left_val:0.3514933884143829},{features:[[16,0,4,5,-1.],[16,0,2,5,2.]],threshold:4.4036400504410267e-003,right_val:0.5924085974693298,left_val:0.4642275869846344},{features:[[1,7,6,13,-1.],[3,7,2,13,3.]],threshold:0.1229949966073036,right_val:0.0691524818539619,left_val:0.5025529265403748},{features:[[16,0,4,5,-1.],[16,0,2,5,2.]],threshold:-0.0123135102912784,right_val:0.4934012889862061,left_val:0.5884591937065125},{features:[[0,0,4,5,-1.],[2,0,2,5,2.]],threshold:4.1471039876341820e-003,right_val:0.5893477797508240,left_val:0.4372239112854004},{features:[[14,12,3,6,-1.],[14,14,3,2,3.]],threshold:-3.5502649843692780e-003,right_val:0.5396270155906677,left_val:0.4327551126480103},{features:[[3,12,3,6,-1.],[3,14,3,2,3.]],threshold:-0.0192242693156004,right_val:0.5068330764770508,left_val:0.1913134008646011},{features:[[16,1,4,3,-1.],[16,2,4,1,3.]],threshold:1.4395059552043676e-003,right_val:0.4243533015251160,left_val:0.5308178067207336},{features:[[8,7,2,10,-1.],[8,7,1,5,2.],[9,12,1,5,2.]],threshold:-6.7751999013125896e-003,right_val:0.4540086090564728,left_val:0.6365395784378052},{features:[[11,11,4,4,-1.],[11,13,4,2,2.]],threshold:7.0119630545377731e-003,right_val:0.3026199936866760,left_val:0.5189834237098694},{features:[[0,1,4,3,-1.],[0,2,4,1,3.]],threshold:5.4014651104807854e-003,right_val:0.2557682991027832,left_val:0.5105062127113342},{features:[[13,4,1,3,-1.],[13,5,1,1,3.]],threshold:9.0274988906458020e-004,right_val:0.5861827731132507,left_val:0.4696914851665497},{features:[[7,15,3,5,-1.],[8,15,1,5,3.]],threshold:0.0114744501188397,right_val:0.1527177989482880,left_val:0.5053645968437195},{features:[[9,7,3,5,-1.],[10,7,1,5,3.]],threshold:-6.7023430019617081e-003,right_val:0.4890604019165039,left_val:0.6508980989456177},{features:[[8,7,3,5,-1.],[9,7,1,5,3.]],threshold:-2.0462959073483944e-003,right_val:0.4514600038528442,left_val:0.6241816878318787},{features:[[10,6,4,14,-1.],[10,6,2,14,2.]],threshold:-9.9951568990945816e-003,right_val:0.5400953888893127,left_val:0.3432781100273132},{features:[[0,5,5,6,-1.],[0,7,5,2,3.]],threshold:-0.0357007086277008,right_val:0.5074077844619751,left_val:0.1878059059381485},{features:[[9,5,6,4,-1.],[9,5,3,4,2.]],threshold:4.5584561303257942e-004,right_val:0.5402569770812988,left_val:0.3805277049541473},{features:[[0,0,18,10,-1.],[6,0,6,10,3.]],threshold:-0.0542606003582478,right_val:0.4595097005367279,left_val:0.6843714714050293},{features:[[10,6,4,14,-1.],[10,6,2,14,2.]],threshold:6.0600461438298225e-003,right_val:0.4500527977943420,left_val:0.5502905249595642},{features:[[6,6,4,14,-1.],[8,6,2,14,2.]],threshold:-6.4791832119226456e-003,right_val:0.5310757160186768,left_val:0.3368858098983765},{features:[[13,4,1,3,-1.],[13,5,1,1,3.]],threshold:-1.4939469983801246e-003,right_val:0.4756175875663757,left_val:0.6487640142440796},{features:[[5,1,2,3,-1.],[6,1,1,3,2.]],threshold:1.4610530342906713e-005,right_val:0.5451064109802246,left_val:0.4034579098224640},{features:[[18,1,2,18,-1.],[19,1,1,9,2.],[18,10,1,9,2.]],threshold:-7.2321938350796700e-003,right_val:0.4824739992618561,left_val:0.6386873722076416},{features:[[2,1,4,3,-1.],[2,2,4,1,3.]],threshold:-4.0645818226039410e-003,right_val:0.5157335996627808,left_val:0.2986421883106232},{features:[[18,1,2,18,-1.],[19,1,1,9,2.],[18,10,1,9,2.]],threshold:0.0304630808532238,right_val:0.7159956097602844,left_val:0.5022199749946594},{features:[[1,14,4,6,-1.],[1,14,2,3,2.],[3,17,2,3,2.]],threshold:-8.0544911324977875e-003,right_val:0.4619275033473969,left_val:0.6492452025413513},{features:[[10,11,7,6,-1.],[10,13,7,2,3.]],threshold:0.0395051389932632,right_val:0.2450613975524902,left_val:0.5150570869445801},{features:[[0,10,6,10,-1.],[0,10,3,5,2.],[3,15,3,5,2.]],threshold:8.4530208259820938e-003,right_val:0.6394037008285523,left_val:0.4573669135570526},{features:[[11,0,3,4,-1.],[12,0,1,4,3.]],threshold:-1.1688120430335402e-003,right_val:0.5483661293983460,left_val:0.3865512013435364},{features:[[5,10,5,6,-1.],[5,13,5,3,2.]],threshold:2.8070670086890459e-003,right_val:0.2701480090618134,left_val:0.5128579139709473},{features:[[14,6,1,8,-1.],[14,10,1,4,2.]],threshold:4.7365209320560098e-004,right_val:0.5387461185455322,left_val:0.4051581919193268},{features:[[1,7,18,6,-1.],[1,7,9,3,2.],[10,10,9,3,2.]],threshold:0.0117410803213716,right_val:0.3719413876533508,left_val:0.5295950174331665},{features:[[9,7,2,2,-1.],[9,7,1,2,2.]],threshold:3.1833238899707794e-003,right_val:0.6895126104354858,left_val:0.4789406955242157},{features:[[5,9,4,5,-1.],[7,9,2,5,2.]],threshold:7.0241501089185476e-004,right_val:0.3918080925941467,left_val:0.5384489297866821}],threshold:54.6200714111328130},{simpleClassifiers:[{features:[[7,6,6,3,-1.],[9,6,2,3,3.]],threshold:0.0170599296689034,right_val:0.7142534852027893,left_val:0.3948527872562408},{features:[[1,0,18,4,-1.],[7,0,6,4,3.]],threshold:0.0218408405780792,right_val:0.6090016961097717,left_val:0.3370316028594971},{features:[[7,15,2,4,-1.],[7,17,2,2,2.]],threshold:2.4520049919374287e-004,right_val:0.5987902283668518,left_val:0.3500576019287109},{features:[[1,0,19,9,-1.],[1,3,19,3,3.]],threshold:8.3272606134414673e-003,right_val:0.5697240829467773,left_val:0.3267528116703033},{features:[[3,7,3,6,-1.],[3,9,3,2,3.]],threshold:5.7148298947140574e-004,right_val:0.5531656742095947,left_val:0.3044599890708923},{features:[[13,7,4,4,-1.],[15,7,2,2,2.],[13,9,2,2,2.]],threshold:6.7373987985774875e-004,right_val:0.5672631263732910,left_val:0.3650012016296387},{features:[[3,7,4,4,-1.],[3,7,2,2,2.],[5,9,2,2,2.]],threshold:3.4681590477703139e-005,right_val:0.5388727188110352,left_val:0.3313541114330292},{features:[[9,6,10,8,-1.],[9,10,10,4,2.]],threshold:-5.8563398197293282e-003,right_val:0.5498778820037842,left_val:0.2697942852973938},{features:[[3,8,14,12,-1.],[3,14,14,6,2.]],threshold:8.5102273151278496e-003,right_val:0.2762879133224487,left_val:0.5269358158111572},{features:[[6,5,10,12,-1.],[11,5,5,6,2.],[6,11,5,6,2.]],threshold:-0.0698172077536583,right_val:0.5259246826171875,left_val:0.2909603118896484},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-8.6113670840859413e-004,right_val:0.4073697924613953,left_val:0.5892577171325684},{features:[[9,5,6,5,-1.],[9,5,3,5,2.]],threshold:9.7149249631911516e-004,right_val:0.5415862202644348,left_val:0.3523564040660858},{features:[[9,4,2,4,-1.],[9,6,2,2,2.]],threshold:-1.4727490452060010e-005,right_val:0.3503156006336212,left_val:0.5423017740249634},{features:[[9,5,6,5,-1.],[9,5,3,5,2.]],threshold:0.0484202913939953,right_val:0.3411195874214172,left_val:0.5193945765495300},{features:[[5,5,6,5,-1.],[8,5,3,5,2.]],threshold:1.3257140526548028e-003,right_val:0.5335376262664795,left_val:0.3157769143581390},{features:[[11,2,6,1,-1.],[13,2,2,1,3.]],threshold:1.4922149603080470e-005,right_val:0.5536553859710693,left_val:0.4451299905776978},{features:[[3,2,6,1,-1.],[5,2,2,1,3.]],threshold:-2.7173398993909359e-003,right_val:0.5248088836669922,left_val:0.3031741976737976},{features:[[13,5,2,3,-1.],[13,6,2,1,3.]],threshold:2.9219500720500946e-003,right_val:0.6606041789054871,left_val:0.4781453013420105},{features:[[0,10,1,4,-1.],[0,12,1,2,2.]],threshold:-1.9804988987743855e-003,right_val:0.5287625193595886,left_val:0.3186308145523071},{features:[[13,5,2,3,-1.],[13,6,2,1,3.]],threshold:-4.0012109093368053e-003,right_val:0.4749928116798401,left_val:0.6413596868515015},{features:[[8,18,3,2,-1.],[9,18,1,2,3.]],threshold:-4.3491991236805916e-003,right_val:0.5098996758460999,left_val:0.1507498025894165},{features:[[6,15,9,2,-1.],[6,16,9,1,2.]],threshold:1.3490889687091112e-003,right_val:0.5881167054176331,left_val:0.4316158890724182},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:0.0185970701277256,right_val:0.9089794158935547,left_val:0.4735553860664368},{features:[[18,4,2,4,-1.],[18,6,2,2,2.]],threshold:-1.8562379991635680e-003,right_val:0.5577837228775024,left_val:0.3553189039230347},{features:[[5,5,2,3,-1.],[5,6,2,1,3.]],threshold:2.2940430790185928e-003,right_val:0.6580877900123596,left_val:0.4500094950199127},{features:[[15,16,3,2,-1.],[15,17,3,1,2.]],threshold:2.9982850537635386e-004,right_val:0.3975878953933716,left_val:0.5629242062568665},{features:[[0,0,3,9,-1.],[0,3,3,3,3.]],threshold:3.5455459728837013e-003,right_val:0.3605485856533051,left_val:0.5381547212600708},{features:[[9,7,3,3,-1.],[9,8,3,1,3.]],threshold:9.6104722470045090e-003,right_val:0.1796745955944061,left_val:0.5255997180938721},{features:[[8,7,3,3,-1.],[8,8,3,1,3.]],threshold:-6.2783220782876015e-003,right_val:0.5114030241966248,left_val:0.2272856980562210},{features:[[9,5,2,6,-1.],[9,5,1,6,2.]],threshold:3.4598479978740215e-003,right_val:0.6608219146728516,left_val:0.4626308083534241},{features:[[8,6,3,4,-1.],[9,6,1,4,3.]],threshold:-1.3112019514665008e-003,right_val:0.4436857998371124,left_val:0.6317539811134338},{features:[[7,6,8,12,-1.],[11,6,4,6,2.],[7,12,4,6,2.]],threshold:2.6876179035753012e-003,right_val:0.4054022133350372,left_val:0.5421109795570374},{features:[[5,6,8,12,-1.],[5,6,4,6,2.],[9,12,4,6,2.]],threshold:3.9118169806897640e-003,right_val:0.3273454904556274,left_val:0.5358477830886841},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:-0.0142064504325390,right_val:0.4975781142711639,left_val:0.7793576717376709},{features:[[2,16,3,2,-1.],[2,17,3,1,2.]],threshold:7.1705528534948826e-004,right_val:0.3560903966426849,left_val:0.5297319889068604},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:1.6635019565001130e-003,right_val:0.5816481709480286,left_val:0.4678094089031220},{features:[[2,12,6,6,-1.],[2,14,6,2,3.]],threshold:3.3686188980937004e-003,right_val:0.3446420133113861,left_val:0.5276734232902527},{features:[[7,13,6,3,-1.],[7,14,6,1,3.]],threshold:0.0127995302900672,right_val:0.7472159266471863,left_val:0.4834679961204529},{features:[[6,14,6,3,-1.],[6,15,6,1,3.]],threshold:3.3901201095432043e-003,right_val:0.6401721239089966,left_val:0.4511859118938446},{features:[[14,15,5,3,-1.],[14,16,5,1,3.]],threshold:4.7070779837667942e-003,right_val:0.3555220961570740,left_val:0.5335658788681030},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:1.4819339849054813e-003,right_val:0.5772724151611328,left_val:0.4250707030296326},{features:[[14,15,5,3,-1.],[14,16,5,1,3.]],threshold:-6.9995759986341000e-003,right_val:0.5292900204658508,left_val:0.3003320097923279},{features:[[5,3,6,2,-1.],[7,3,2,2,3.]],threshold:0.0159390103071928,right_val:0.1675581932067871,left_val:0.5067319273948669},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:7.6377349905669689e-003,right_val:0.7085601091384888,left_val:0.4795069992542267},{features:[[1,15,5,3,-1.],[1,16,5,1,3.]],threshold:6.7334040068089962e-003,right_val:0.2162470072507858,left_val:0.5133113265037537},{features:[[8,13,4,6,-1.],[10,13,2,3,2.],[8,16,2,3,2.]],threshold:-0.0128588099032640,right_val:0.5251371860504150,left_val:0.1938841938972473},{features:[[7,8,3,3,-1.],[8,8,1,3,3.]],threshold:-6.2270800117403269e-004,right_val:0.4197868108749390,left_val:0.5686538219451904},{features:[[12,0,5,4,-1.],[12,2,5,2,2.]],threshold:-5.2651681471616030e-004,right_val:0.5429695844650269,left_val:0.4224168956279755},{features:[[0,2,20,2,-1.],[0,2,10,1,2.],[10,3,10,1,2.]],threshold:0.0110750999301672,right_val:0.2514517903327942,left_val:0.5113775134086609},{features:[[1,0,18,4,-1.],[7,0,6,4,3.]],threshold:-0.0367282517254353,right_val:0.4849618971347809,left_val:0.7194662094116211},{features:[[4,3,6,1,-1.],[6,3,2,1,3.]],threshold:-2.8207109426148236e-004,right_val:0.5394446253776550,left_val:0.3840261995792389},{features:[[4,18,13,2,-1.],[4,19,13,1,2.]],threshold:-2.7489690110087395e-003,right_val:0.4569182097911835,left_val:0.5937088727951050},{features:[[2,10,3,6,-1.],[2,12,3,2,3.]],threshold:0.0100475195795298,right_val:0.2802298069000244,left_val:0.5138576030731201},{features:[[14,12,6,8,-1.],[17,12,3,4,2.],[14,16,3,4,2.]],threshold:-8.1497840583324432e-003,right_val:0.4636121094226837,left_val:0.6090037226676941},{features:[[4,13,10,6,-1.],[4,13,5,3,2.],[9,16,5,3,2.]],threshold:-6.8833888508379459e-003,right_val:0.5254660248756409,left_val:0.3458611071109772},{features:[[14,12,1,2,-1.],[14,13,1,1,2.]],threshold:-1.4039360394235700e-005,right_val:0.4082083106040955,left_val:0.5693104267120361},{features:[[8,13,4,3,-1.],[8,14,4,1,3.]],threshold:1.5498419525101781e-003,right_val:0.5806517004966736,left_val:0.4350537061691284},{features:[[14,12,2,2,-1.],[14,13,2,1,2.]],threshold:-6.7841499112546444e-003,right_val:0.5182775259017944,left_val:0.1468873023986816},{features:[[4,12,2,2,-1.],[4,13,2,1,2.]],threshold:2.1705629478674382e-004,right_val:0.3456174135208130,left_val:0.5293524265289307},{features:[[8,12,9,2,-1.],[8,13,9,1,2.]],threshold:3.1198898795992136e-004,right_val:0.5942413806915283,left_val:0.4652450978755951},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:5.4507530294358730e-003,right_val:0.7024846076965332,left_val:0.4653508961200714},{features:[[11,10,3,6,-1.],[11,13,3,3,2.]],threshold:-2.5818689027801156e-004,right_val:0.3768967092037201,left_val:0.5497295260429382},{features:[[5,6,9,12,-1.],[5,12,9,6,2.]],threshold:-0.0174425393342972,right_val:0.5457497835159302,left_val:0.3919087946414948},{features:[[11,10,3,6,-1.],[11,13,3,3,2.]],threshold:-0.0453435294330120,right_val:0.5154908895492554,left_val:0.1631357073783875},{features:[[6,10,3,6,-1.],[6,13,3,3,2.]],threshold:1.9190689781680703e-003,right_val:0.2791895866394043,left_val:0.5145897865295410},{features:[[5,4,11,3,-1.],[5,5,11,1,3.]],threshold:-6.0177869163453579e-003,right_val:0.4756332933902741,left_val:0.6517636179924011},{features:[[7,1,5,10,-1.],[7,6,5,5,2.]],threshold:-4.0720738470554352e-003,right_val:0.4092685878276825,left_val:0.5514652729034424},{features:[[2,8,18,2,-1.],[2,9,18,1,2.]],threshold:3.9855059003457427e-004,right_val:0.5285550951957703,left_val:0.3165240883827210},{features:[[7,17,5,3,-1.],[7,18,5,1,3.]],threshold:-6.5418570302426815e-003,right_val:0.4652808904647827,left_val:0.6853377819061279},{features:[[5,9,12,1,-1.],[9,9,4,1,3.]],threshold:3.4845089539885521e-003,right_val:0.4502759873867035,left_val:0.5484588146209717},{features:[[0,14,6,6,-1.],[0,14,3,3,2.],[3,17,3,3,2.]],threshold:-0.0136967804282904,right_val:0.4572555124759674,left_val:0.6395779848098755},{features:[[5,9,12,1,-1.],[9,9,4,1,3.]],threshold:-0.0173471402376890,right_val:0.5181614756584168,left_val:0.2751072943210602},{features:[[3,9,12,1,-1.],[7,9,4,1,3.]],threshold:-4.0885428898036480e-003,right_val:0.5194984078407288,left_val:0.3325636088848114},{features:[[14,10,6,7,-1.],[14,10,3,7,2.]],threshold:-9.4687901437282562e-003,right_val:0.4851819872856140,left_val:0.5942280888557434},{features:[[1,0,16,2,-1.],[1,1,16,1,2.]],threshold:1.7084840219467878e-003,right_val:0.5519806146621704,left_val:0.4167110919952393},{features:[[10,9,10,9,-1.],[10,12,10,3,3.]],threshold:9.4809094443917274e-003,right_val:0.4208514988422394,left_val:0.5433894991874695},{features:[[0,1,10,2,-1.],[5,1,5,2,2.]],threshold:-4.7389650717377663e-003,right_val:0.4560655057430267,left_val:0.6407189965248108},{features:[[17,3,2,3,-1.],[17,4,2,1,3.]],threshold:6.5761050209403038e-003,right_val:0.2258227020502091,left_val:0.5214555263519287},{features:[[1,3,2,3,-1.],[1,4,2,1,3.]],threshold:-2.1690549328923225e-003,right_val:0.5156704783439636,left_val:0.3151527941226959},{features:[[9,7,3,6,-1.],[10,7,1,6,3.]],threshold:0.0146601703017950,right_val:0.6689941287040710,left_val:0.4870837032794952},{features:[[6,5,4,3,-1.],[8,5,2,3,2.]],threshold:1.7231999663636088e-004,right_val:0.5251078009605408,left_val:0.3569748997688294},{features:[[7,5,6,6,-1.],[9,5,2,6,3.]],threshold:-0.0218037609010935,right_val:0.4966329932212830,left_val:0.8825920820236206},{features:[[3,4,12,12,-1.],[3,4,6,6,2.],[9,10,6,6,2.]],threshold:-0.0947361066937447,right_val:0.5061113834381104,left_val:0.1446162015199661},{features:[[9,2,6,15,-1.],[11,2,2,15,3.]],threshold:5.5825551971793175e-003,right_val:0.4238066077232361,left_val:0.5396478772163391},{features:[[2,2,6,17,-1.],[4,2,2,17,3.]],threshold:1.9517090404406190e-003,right_val:0.5497786998748779,left_val:0.4170410931110382},{features:[[14,10,6,7,-1.],[14,10,3,7,2.]],threshold:0.0121499001979828,right_val:0.5664274096488953,left_val:0.4698367118835449},{features:[[0,10,6,7,-1.],[3,10,3,7,2.]],threshold:-7.5169620104134083e-003,right_val:0.4463135898113251,left_val:0.6267772912979126},{features:[[9,2,6,15,-1.],[11,2,2,15,3.]],threshold:-0.0716679096221924,right_val:0.5221003293991089,left_val:0.3097011148929596},{features:[[5,2,6,15,-1.],[7,2,2,15,3.]],threshold:-0.0882924199104309,right_val:0.5006365180015564,left_val:0.0811238884925842},{features:[[17,9,3,6,-1.],[17,11,3,2,3.]],threshold:0.0310630798339844,right_val:0.1282255947589874,left_val:0.5155503749847412},{features:[[6,7,6,6,-1.],[8,7,2,6,3.]],threshold:0.0466218404471874,right_val:0.7363960742950440,left_val:0.4699777960777283},{features:[[1,10,18,6,-1.],[10,10,9,3,2.],[1,13,9,3,2.]],threshold:-0.0121894897893071,right_val:0.5518996715545654,left_val:0.3920530080795288},{features:[[0,9,10,9,-1.],[0,12,10,3,3.]],threshold:0.0130161102861166,right_val:0.3685136139392853,left_val:0.5260658264160156},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:-3.4952899441123009e-003,right_val:0.4716280996799469,left_val:0.6339294910430908},{features:[[5,12,3,4,-1.],[5,14,3,2,2.]],threshold:-4.4015039748046547e-005,right_val:0.3776184916496277,left_val:0.5333027243614197},{features:[[3,3,16,12,-1.],[3,9,16,6,2.]],threshold:-0.1096649020910263,right_val:0.5198346972465515,left_val:0.1765342056751251},{features:[[1,1,12,12,-1.],[1,1,6,6,2.],[7,7,6,6,2.]],threshold:-9.0279558207839727e-004,right_val:0.3838908076286316,left_val:0.5324159860610962},{features:[[10,4,2,4,-1.],[11,4,1,2,2.],[10,6,1,2,2.]],threshold:7.1126641705632210e-004,right_val:0.5755224227905273,left_val:0.4647929966449738},{features:[[0,9,10,2,-1.],[0,9,5,1,2.],[5,10,5,1,2.]],threshold:-3.1250279862433672e-003,right_val:0.5166770815849304,left_val:0.3236708939075470},{features:[[9,11,3,3,-1.],[9,12,3,1,3.]],threshold:2.4144679773598909e-003,right_val:0.6459717750549316,left_val:0.4787439107894898},{features:[[3,12,9,2,-1.],[3,13,9,1,2.]],threshold:4.4391240226104856e-004,right_val:0.6010255813598633,left_val:0.4409308135509491},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-2.2611189342569560e-004,right_val:0.5493255853652954,left_val:0.4038113951683044}],threshold:50.1697311401367190},{simpleClassifiers:[{features:[[3,4,13,6,-1.],[3,6,13,2,3.]],threshold:-0.0469012893736362,right_val:0.3743801116943359,left_val:0.6600171923637390},{features:[[9,7,6,4,-1.],[12,7,3,2,2.],[9,9,3,2,2.]],threshold:-1.4568349579349160e-003,right_val:0.3437797129154205,left_val:0.5783991217613220},{features:[[1,0,6,8,-1.],[4,0,3,8,2.]],threshold:5.5598369799554348e-003,right_val:0.5908216238021851,left_val:0.3622266948223114},{features:[[9,5,2,12,-1.],[9,11,2,6,2.]],threshold:7.3170487303286791e-004,right_val:0.2873558104038239,left_val:0.5500419139862061},{features:[[4,4,3,10,-1.],[4,9,3,5,2.]],threshold:1.3318009441718459e-003,right_val:0.5431019067764282,left_val:0.2673169970512390},{features:[[6,17,8,3,-1.],[6,18,8,1,3.]],threshold:2.4347059661522508e-004,right_val:0.5741388797760010,left_val:0.3855027854442596},{features:[[0,5,10,6,-1.],[0,7,10,2,3.]],threshold:-3.0512469820678234e-003,right_val:0.3462845087051392,left_val:0.5503209829330444},{features:[[13,2,3,2,-1.],[13,3,3,1,2.]],threshold:-6.8657199153676629e-004,right_val:0.5429509282112122,left_val:0.3291221857070923},{features:[[7,5,4,5,-1.],[9,5,2,5,2.]],threshold:1.4668200165033340e-003,right_val:0.5351811051368713,left_val:0.3588382005691528},{features:[[12,14,3,6,-1.],[12,16,3,2,3.]],threshold:3.2021870720200241e-004,right_val:0.5700234174728394,left_val:0.4296841919422150},{features:[[1,11,8,2,-1.],[1,12,8,1,2.]],threshold:7.4122188379988074e-004,right_val:0.3366870880126953,left_val:0.5282164812088013},{features:[[7,13,6,3,-1.],[7,14,6,1,3.]],threshold:3.8330298848450184e-003,right_val:0.6257336139678955,left_val:0.4559567868709564},{features:[[0,5,3,6,-1.],[0,7,3,2,3.]],threshold:-0.0154564399272203,right_val:0.5129452943801880,left_val:0.2350116968154907},{features:[[13,2,3,2,-1.],[13,3,3,1,2.]],threshold:2.6796779129654169e-003,right_val:0.4155062139034271,left_val:0.5329415202140808},{features:[[4,14,4,6,-1.],[4,14,2,3,2.],[6,17,2,3,2.]],threshold:2.8296569362282753e-003,right_val:0.5804538130760193,left_val:0.4273087978363037},{features:[[13,2,3,2,-1.],[13,3,3,1,2.]],threshold:-3.9444249123334885e-003,right_val:0.5202686190605164,left_val:0.2912611961364746},{features:[[8,2,4,12,-1.],[8,6,4,4,3.]],threshold:2.7179559692740440e-003,right_val:0.3585677146911621,left_val:0.5307688117027283},{features:[[14,0,6,8,-1.],[17,0,3,4,2.],[14,4,3,4,2.]],threshold:5.9077627956867218e-003,right_val:0.5941585898399353,left_val:0.4703775048255920},{features:[[7,17,3,2,-1.],[8,17,1,2,3.]],threshold:-4.2240349575877190e-003,right_val:0.5088796019554138,left_val:0.2141567021608353},{features:[[8,12,4,2,-1.],[8,13,4,1,2.]],threshold:4.0725888684391975e-003,right_val:0.6841061115264893,left_val:0.4766413867473602},{features:[[6,0,8,12,-1.],[6,0,4,6,2.],[10,6,4,6,2.]],threshold:0.0101495301350951,right_val:0.3748497068881989,left_val:0.5360798835754395},{features:[[14,0,2,10,-1.],[15,0,1,5,2.],[14,5,1,5,2.]],threshold:-1.8864999583456665e-004,right_val:0.3853805065155029,left_val:0.5720130205154419},{features:[[5,3,8,6,-1.],[5,3,4,3,2.],[9,6,4,3,2.]],threshold:-4.8864358104765415e-003,right_val:0.5340958833694458,left_val:0.3693122863769531},{features:[[14,0,6,10,-1.],[17,0,3,5,2.],[14,5,3,5,2.]],threshold:0.0261584799736738,right_val:0.6059989929199219,left_val:0.4962374866008759},{features:[[9,14,1,2,-1.],[9,15,1,1,2.]],threshold:4.8560759751126170e-004,right_val:0.6012468934059143,left_val:0.4438945949077606},{features:[[15,10,4,3,-1.],[15,11,4,1,3.]],threshold:0.0112687097862363,right_val:0.1840388029813767,left_val:0.5244250297546387},{features:[[8,14,2,3,-1.],[8,15,2,1,3.]],threshold:-2.8114619199186563e-003,right_val:0.4409897029399872,left_val:0.6060283780097961},{features:[[3,13,14,4,-1.],[10,13,7,2,2.],[3,15,7,2,2.]],threshold:-5.6112729944288731e-003,right_val:0.5589237213134766,left_val:0.3891170918941498},{features:[[1,10,4,3,-1.],[1,11,4,1,3.]],threshold:8.5680093616247177e-003,right_val:0.2062619030475617,left_val:0.5069345831871033},{features:[[9,11,6,1,-1.],[11,11,2,1,3.]],threshold:-3.8172779022715986e-004,right_val:0.4192610979080200,left_val:0.5882201790809631},{features:[[5,11,6,1,-1.],[7,11,2,1,3.]],threshold:-1.7680290329735726e-004,right_val:0.4003368914127350,left_val:0.5533605813980103},{features:[[3,5,16,15,-1.],[3,10,16,5,3.]],threshold:6.5112537704408169e-003,right_val:0.5444191098213196,left_val:0.3310146927833557},{features:[[6,12,4,2,-1.],[8,12,2,2,2.]],threshold:-6.5948683186434209e-005,right_val:0.3944905996322632,left_val:0.5433831810951233},{features:[[4,4,12,10,-1.],[10,4,6,5,2.],[4,9,6,5,2.]],threshold:6.9939051754772663e-003,right_val:0.4192714095115662,left_val:0.5600358247756958},{features:[[8,6,3,4,-1.],[9,6,1,4,3.]],threshold:-4.6744439750909805e-003,right_val:0.4604960978031158,left_val:0.6685466766357422},{features:[[8,12,4,8,-1.],[10,12,2,4,2.],[8,16,2,4,2.]],threshold:0.0115898502990603,right_val:0.2926830053329468,left_val:0.5357121229171753},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:0.0130078401416540,right_val:0.7307463288307190,left_val:0.4679817855358124},{features:[[12,2,3,2,-1.],[13,2,1,2,3.]],threshold:-1.1008579749614000e-003,right_val:0.5415065288543701,left_val:0.3937501013278961},{features:[[8,15,3,2,-1.],[8,16,3,1,2.]],threshold:6.0472649056464434e-004,right_val:0.5604041218757629,left_val:0.4242376089096069},{features:[[6,0,9,14,-1.],[9,0,3,14,3.]],threshold:-0.0144948400557041,right_val:0.5293182730674744,left_val:0.3631210029125214},{features:[[9,6,2,3,-1.],[10,6,1,3,2.]],threshold:-5.3056948818266392e-003,right_val:0.4621821045875549,left_val:0.6860452294349670},{features:[[10,8,2,3,-1.],[10,9,2,1,3.]],threshold:-8.1829127157106996e-004,right_val:0.5420439243316650,left_val:0.3944096863269806},{features:[[0,9,4,6,-1.],[0,11,4,2,3.]],threshold:-0.0190775208175182,right_val:0.5037891864776611,left_val:0.1962621957063675},{features:[[6,0,8,2,-1.],[6,1,8,1,2.]],threshold:3.5549470339901745e-004,right_val:0.5613973140716553,left_val:0.4086259007453919},{features:[[6,14,7,3,-1.],[6,15,7,1,3.]],threshold:1.9679730758070946e-003,right_val:0.5926123261451721,left_val:0.4489121139049530},{features:[[8,10,8,9,-1.],[8,13,8,3,3.]],threshold:6.9189141504466534e-003,right_val:0.3728385865688324,left_val:0.5335925817489624},{features:[[5,2,3,2,-1.],[6,2,1,2,3.]],threshold:2.9872779268771410e-003,right_val:0.2975643873214722,left_val:0.5111321210861206},{features:[[14,1,6,8,-1.],[17,1,3,4,2.],[14,5,3,4,2.]],threshold:-6.2264618463814259e-003,right_val:0.4824537932872772,left_val:0.5541489720344544},{features:[[0,1,6,8,-1.],[0,1,3,4,2.],[3,5,3,4,2.]],threshold:0.0133533002808690,right_val:0.6414797902107239,left_val:0.4586423933506012},{features:[[1,2,18,6,-1.],[10,2,9,3,2.],[1,5,9,3,2.]],threshold:0.0335052385926247,right_val:0.3429994881153107,left_val:0.5392425060272217},{features:[[9,3,2,1,-1.],[10,3,1,1,2.]],threshold:-2.5294460356235504e-003,right_val:0.5013315081596375,left_val:0.1703713983297348},{features:[[13,2,4,6,-1.],[15,2,2,3,2.],[13,5,2,3,2.]],threshold:-1.2801629491150379e-003,right_val:0.4697405099868774,left_val:0.5305461883544922},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:7.0687388069927692e-003,right_val:0.6436504721641541,left_val:0.4615545868873596},{features:[[13,5,1,3,-1.],[13,6,1,1,3.]],threshold:9.6880499040707946e-004,right_val:0.6043894290924072,left_val:0.4833599030971527},{features:[[2,16,5,3,-1.],[2,17,5,1,3.]],threshold:3.9647659286856651e-003,right_val:0.3231816887855530,left_val:0.5187637209892273},{features:[[13,2,4,6,-1.],[15,2,2,3,2.],[13,5,2,3,2.]],threshold:-0.0220577307045460,right_val:0.5200980901718140,left_val:0.4079256951808929},{features:[[3,2,4,6,-1.],[3,2,2,3,2.],[5,5,2,3,2.]],threshold:-6.6906312713399529e-004,right_val:0.3815600872039795,left_val:0.5331609249114990},{features:[[13,5,1,2,-1.],[13,6,1,1,2.]],threshold:-6.7009328631684184e-004,right_val:0.4688901901245117,left_val:0.5655422210693359},{features:[[5,5,2,2,-1.],[5,6,2,1,2.]],threshold:7.4284552829340100e-004,right_val:0.6287400126457214,left_val:0.4534381031990051},{features:[[13,9,2,2,-1.],[13,9,1,2,2.]],threshold:2.2227810695767403e-003,right_val:0.3303655982017517,left_val:0.5350633263587952},{features:[[5,9,2,2,-1.],[6,9,1,2,2.]],threshold:-5.4130521602928638e-003,right_val:0.5005434751510620,left_val:0.1113687008619309},{features:[[13,17,3,2,-1.],[13,18,3,1,2.]],threshold:-1.4520040167553816e-005,right_val:0.4325133860111237,left_val:0.5628737807273865},{features:[[6,16,4,4,-1.],[6,16,2,2,2.],[8,18,2,2,2.]],threshold:2.3369169502984732e-004,right_val:0.5447791218757629,left_val:0.4165835082530975},{features:[[9,16,2,3,-1.],[9,17,2,1,3.]],threshold:4.2894547805190086e-003,right_val:0.6778649091720581,left_val:0.4860391020774841},{features:[[0,13,9,6,-1.],[0,15,9,2,3.]],threshold:5.9103150852024555e-003,right_val:0.3612113893032074,left_val:0.5262305140495300},{features:[[9,14,2,6,-1.],[9,17,2,3,2.]],threshold:0.0129005396738648,right_val:0.3250288069248200,left_val:0.5319377183914185},{features:[[9,15,2,3,-1.],[9,16,2,1,3.]],threshold:4.6982979401946068e-003,right_val:0.6665925979614258,left_val:0.4618245065212250},{features:[[1,10,18,6,-1.],[1,12,18,2,3.]],threshold:0.0104398597031832,right_val:0.3883604109287262,left_val:0.5505670905113220},{features:[[8,11,4,2,-1.],[8,12,4,1,2.]],threshold:3.0443191062659025e-003,right_val:0.7301844954490662,left_val:0.4697853028774262},{features:[[7,9,6,2,-1.],[7,10,6,1,2.]],threshold:-6.1593751888722181e-004,right_val:0.5464984178543091,left_val:0.3830839097499847},{features:[[8,8,2,3,-1.],[8,9,2,1,3.]],threshold:-3.4247159492224455e-003,right_val:0.5089530944824219,left_val:0.2566300034523010},{features:[[17,5,3,4,-1.],[18,5,1,4,3.]],threshold:-9.3538565561175346e-003,right_val:0.4940795898437500,left_val:0.6469966173171997},{features:[[1,19,18,1,-1.],[7,19,6,1,3.]],threshold:0.0523389987647533,right_val:0.7878770828247070,left_val:0.4745982885360718},{features:[[9,0,3,2,-1.],[10,0,1,2,3.]],threshold:3.5765620414167643e-003,right_val:0.2748498022556305,left_val:0.5306664705276489},{features:[[1,8,1,6,-1.],[1,10,1,2,3.]],threshold:7.1555317845195532e-004,right_val:0.4041908979415894,left_val:0.5413125753402710},{features:[[12,17,8,3,-1.],[12,17,4,3,2.]],threshold:-0.0105166798457503,right_val:0.4815283119678497,left_val:0.6158512234687805},{features:[[0,5,3,4,-1.],[1,5,1,4,3.]],threshold:7.7347927726805210e-003,right_val:0.7028980851173401,left_val:0.4695805907249451},{features:[[9,7,2,3,-1.],[9,8,2,1,3.]],threshold:-4.3226778507232666e-003,right_val:0.5304684042930603,left_val:0.2849566042423248},{features:[[7,11,2,2,-1.],[7,11,1,1,2.],[8,12,1,1,2.]],threshold:-2.5534399319440126e-003,right_val:0.4688892066478729,left_val:0.7056984901428223},{features:[[11,3,2,5,-1.],[11,3,1,5,2.]],threshold:1.0268510231981054e-004,right_val:0.5573464035987854,left_val:0.3902932107448578},{features:[[7,3,2,5,-1.],[8,3,1,5,2.]],threshold:7.1395188570022583e-006,right_val:0.5263987779617310,left_val:0.3684231936931610},{features:[[15,13,2,3,-1.],[15,14,2,1,3.]],threshold:-1.6711989883333445e-003,right_val:0.5387271046638489,left_val:0.3849175870418549},{features:[[5,6,2,3,-1.],[5,7,2,1,3.]],threshold:4.9260449595749378e-003,right_val:0.7447251081466675,left_val:0.4729771912097931},{features:[[4,19,15,1,-1.],[9,19,5,1,3.]],threshold:4.3908702209591866e-003,right_val:0.5591921806335449,left_val:0.4809181094169617},{features:[[1,19,15,1,-1.],[6,19,5,1,3.]],threshold:-0.0177936293184757,right_val:0.4676927030086517,left_val:0.6903678178787231},{features:[[15,13,2,3,-1.],[15,14,2,1,3.]],threshold:2.0469669252634048e-003,right_val:0.3308162093162537,left_val:0.5370690226554871},{features:[[5,0,4,15,-1.],[7,0,2,15,2.]],threshold:0.0298914890736341,right_val:0.3309059143066406,left_val:0.5139865279197693},{features:[[9,6,2,5,-1.],[9,6,1,5,2.]],threshold:1.5494900289922953e-003,right_val:0.6078342795372009,left_val:0.4660237133502960},{features:[[9,5,2,7,-1.],[10,5,1,7,2.]],threshold:1.4956969534978271e-003,right_val:0.5863919854164124,left_val:0.4404835999011993},{features:[[16,11,3,3,-1.],[16,12,3,1,3.]],threshold:9.5885928021743894e-004,right_val:0.4208523035049439,left_val:0.5435971021652222},{features:[[1,11,3,3,-1.],[1,12,3,1,3.]],threshold:4.9643701640889049e-004,right_val:0.4000622034072876,left_val:0.5370578169822693},{features:[[6,6,8,3,-1.],[6,7,8,1,3.]],threshold:-2.7280810754746199e-003,right_val:0.4259642958641052,left_val:0.5659412741661072},{features:[[0,15,6,2,-1.],[0,16,6,1,2.]],threshold:2.3026480339467525e-003,right_val:0.3350869119167328,left_val:0.5161657929420471},{features:[[1,0,18,6,-1.],[7,0,6,6,3.]],threshold:0.2515163123607636,right_val:0.7147309780120850,left_val:0.4869661927223206},{features:[[6,0,3,4,-1.],[7,0,1,4,3.]],threshold:-4.6328022144734859e-003,right_val:0.5083789825439453,left_val:0.2727448940277100},{features:[[14,10,4,10,-1.],[16,10,2,5,2.],[14,15,2,5,2.]],threshold:-0.0404344908893108,right_val:0.5021767020225525,left_val:0.6851438879966736},{features:[[3,2,3,2,-1.],[4,2,1,2,3.]],threshold:1.4972220014897175e-005,right_val:0.5522555112838745,left_val:0.4284465014934540},{features:[[11,2,2,2,-1.],[11,3,2,1,2.]],threshold:-2.4050309730228037e-004,right_val:0.5390074849128723,left_val:0.4226118922233582},{features:[[2,10,4,10,-1.],[2,10,2,5,2.],[4,15,2,5,2.]],threshold:0.0236578397452831,right_val:0.7504366040229797,left_val:0.4744631946086884},{features:[[0,13,20,6,-1.],[10,13,10,3,2.],[0,16,10,3,2.]],threshold:-8.1449104472994804e-003,right_val:0.5538362860679627,left_val:0.4245058894157410},{features:[[0,5,2,15,-1.],[1,5,1,15,2.]],threshold:-3.6992130335420370e-003,right_val:0.4529713094234467,left_val:0.5952357053756714},{features:[[1,7,18,4,-1.],[10,7,9,2,2.],[1,9,9,2,2.]],threshold:-6.7718601785600185e-003,right_val:0.5473399758338928,left_val:0.4137794077396393},{features:[[0,0,2,17,-1.],[1,0,1,17,2.]],threshold:4.2669530957937241e-003,right_val:0.5797994136810303,left_val:0.4484114944934845},{features:[[2,6,16,6,-1.],[10,6,8,3,2.],[2,9,8,3,2.]],threshold:1.7791989957913756e-003,right_val:0.4432444870471954,left_val:0.5624858736991882},{features:[[8,14,1,3,-1.],[8,15,1,1,3.]],threshold:1.6774770338088274e-003,right_val:0.6364241838455200,left_val:0.4637751877307892},{features:[[8,15,4,2,-1.],[8,16,4,1,2.]],threshold:1.1732629500329494e-003,right_val:0.5914415717124939,left_val:0.4544503092765808},{features:[[5,2,8,2,-1.],[5,2,4,1,2.],[9,3,4,1,2.]],threshold:8.6998171173036098e-004,right_val:0.3885917961597443,left_val:0.5334752798080444},{features:[[6,11,8,6,-1.],[6,14,8,3,2.]],threshold:7.6378340600058436e-004,right_val:0.3744941949844360,left_val:0.5398585200309753},{features:[[9,13,2,2,-1.],[9,14,2,1,2.]],threshold:1.5684569370932877e-004,right_val:0.5614616274833679,left_val:0.4317873120307922},{features:[[18,4,2,6,-1.],[18,6,2,2,3.]],threshold:-0.0215113703161478,right_val:0.5185542702674866,left_val:0.1785925030708313},{features:[[9,12,2,2,-1.],[9,13,2,1,2.]],threshold:1.3081369979772717e-004,right_val:0.5682849884033203,left_val:0.4342499077320099},{features:[[18,4,2,6,-1.],[18,6,2,2,3.]],threshold:0.0219920407980680,right_val:0.2379394024610519,left_val:0.5161716938018799},{features:[[9,13,1,3,-1.],[9,14,1,1,3.]],threshold:-8.0136500764638186e-004,right_val:0.4466426968574524,left_val:0.5986763238906860},{features:[[18,4,2,6,-1.],[18,6,2,2,3.]],threshold:-8.2736099138855934e-003,right_val:0.5251057147979736,left_val:0.4108217954635620},{features:[[0,4,2,6,-1.],[0,6,2,2,3.]],threshold:3.6831789184361696e-003,right_val:0.3397518098354340,left_val:0.5173814296722412},{features:[[9,12,3,3,-1.],[9,13,3,1,3.]],threshold:-7.9525681212544441e-003,right_val:0.4845924079418182,left_val:0.6888983249664307},{features:[[3,13,2,3,-1.],[3,14,2,1,3.]],threshold:1.5382299898192286e-003,right_val:0.3454113900661469,left_val:0.5178567171096802},{features:[[13,13,4,3,-1.],[13,14,4,1,3.]],threshold:-0.0140435304492712,right_val:0.5188667774200440,left_val:0.1678421050310135},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:1.4315890148282051e-003,right_val:0.5655773878097534,left_val:0.4368256926536560},{features:[[5,2,10,6,-1.],[5,4,10,2,3.]],threshold:-0.0340142287313938,right_val:0.4959217011928558,left_val:0.7802296280860901},{features:[[3,13,4,3,-1.],[3,14,4,1,3.]],threshold:-0.0120272999629378,right_val:0.5032231807708740,left_val:0.1585101038217545},{features:[[3,7,15,5,-1.],[8,7,5,5,3.]],threshold:0.1331661939620972,right_val:0.2755128145217896,left_val:0.5163304805755615},{features:[[3,7,12,2,-1.],[7,7,4,2,3.]],threshold:-1.5221949433907866e-003,right_val:0.5214552283287048,left_val:0.3728317916393280},{features:[[10,3,3,9,-1.],[11,3,1,9,3.]],threshold:-9.3929271679371595e-004,right_val:0.4511165022850037,left_val:0.5838379263877869},{features:[[8,6,4,6,-1.],[10,6,2,6,2.]],threshold:0.0277197398245335,right_val:0.7331544756889343,left_val:0.4728286862373352},{features:[[9,7,4,3,-1.],[9,8,4,1,3.]],threshold:3.1030150130391121e-003,right_val:0.4101563096046448,left_val:0.5302202105522156},{features:[[0,9,4,9,-1.],[2,9,2,9,2.]],threshold:0.0778612196445465,right_val:0.1272961944341660,left_val:0.4998334050178528},{features:[[9,13,3,5,-1.],[10,13,1,5,3.]],threshold:-0.0158549398183823,right_val:0.5165656208992004,left_val:0.0508333593606949},{features:[[7,7,6,3,-1.],[9,7,2,3,3.]],threshold:-4.9725300632417202e-003,right_val:0.4684231877326965,left_val:0.6798133850097656},{features:[[9,7,3,5,-1.],[10,7,1,5,3.]],threshold:-9.7676506265997887e-004,right_val:0.4788931906223297,left_val:0.6010771989822388},{features:[[5,7,8,2,-1.],[9,7,4,2,2.]],threshold:-2.4647710379213095e-003,right_val:0.5220503807067871,left_val:0.3393397927284241},{features:[[5,9,12,2,-1.],[9,9,4,2,3.]],threshold:-6.7937700077891350e-003,right_val:0.5239663124084473,left_val:0.4365136921405792},{features:[[5,6,10,3,-1.],[10,6,5,3,2.]],threshold:0.0326080210506916,right_val:0.2425214946269989,left_val:0.5052723884582520},{features:[[10,12,3,1,-1.],[11,12,1,1,3.]],threshold:-5.8514421107247472e-004,right_val:0.4758574068546295,left_val:0.5733973979949951},{features:[[0,1,11,15,-1.],[0,6,11,5,3.]],threshold:-0.0296326000243425,right_val:0.5263597965240479,left_val:0.3892289102077484}],threshold:66.6691207885742190},{simpleClassifiers:[{features:[[1,0,18,6,-1.],[7,0,6,6,3.]],threshold:0.0465508513152599,right_val:0.6240522861480713,left_val:0.3276950120925903},{features:[[7,7,6,1,-1.],[9,7,2,1,3.]],threshold:7.9537127166986465e-003,right_val:0.6942939162254334,left_val:0.4256485104560852},{features:[[5,16,6,4,-1.],[5,16,3,2,2.],[8,18,3,2,2.]],threshold:6.8221561377868056e-004,right_val:0.5900732874870300,left_val:0.3711487054824829},{features:[[6,5,9,8,-1.],[6,9,9,4,2.]],threshold:-1.9348249770700932e-004,right_val:0.5300545096397400,left_val:0.2041133940219879},{features:[[5,10,2,6,-1.],[5,13,2,3,2.]],threshold:-2.6710508973337710e-004,right_val:0.3103179037570953,left_val:0.5416126251220703},{features:[[7,6,8,10,-1.],[11,6,4,5,2.],[7,11,4,5,2.]],threshold:2.7818060480058193e-003,right_val:0.3467069864273071,left_val:0.5277832746505737},{features:[[5,6,8,10,-1.],[5,6,4,5,2.],[9,11,4,5,2.]],threshold:-4.6779078547842801e-004,right_val:0.3294492065906525,left_val:0.5308231115341187},{features:[[9,5,2,2,-1.],[9,6,2,1,2.]],threshold:-3.0335160772665404e-005,right_val:0.3852097094058991,left_val:0.5773872733116150},{features:[[5,12,8,2,-1.],[5,13,8,1,2.]],threshold:7.8038009814918041e-004,right_val:0.6150057911872864,left_val:0.4317438900470734},{features:[[10,2,8,2,-1.],[10,3,8,1,2.]],threshold:-4.2553851380944252e-003,right_val:0.5324292778968811,left_val:0.2933903932571411},{features:[[4,0,2,10,-1.],[4,0,1,5,2.],[5,5,1,5,2.]],threshold:-2.4735610350035131e-004,right_val:0.3843030035495758,left_val:0.5468844771385193},{features:[[9,10,2,2,-1.],[9,11,2,1,2.]],threshold:-1.4724259381182492e-004,right_val:0.5755587220191956,left_val:0.4281542897224426},{features:[[2,8,15,3,-1.],[2,9,15,1,3.]],threshold:1.1864770203828812e-003,right_val:0.5471466183662415,left_val:0.3747301101684570},{features:[[8,13,4,3,-1.],[8,14,4,1,3.]],threshold:2.3936580400913954e-003,right_val:0.6111528873443604,left_val:0.4537783861160278},{features:[[7,2,3,2,-1.],[8,2,1,2,3.]],threshold:-1.5390539774671197e-003,right_val:0.5189538002014160,left_val:0.2971341907978058},{features:[[7,13,6,3,-1.],[7,14,6,1,3.]],threshold:-7.1968790143728256e-003,right_val:0.4726476967334747,left_val:0.6699066758155823},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-4.1499789222143590e-004,right_val:0.5260317921638489,left_val:0.3384954035282135},{features:[[17,2,3,6,-1.],[17,4,3,2,3.]],threshold:4.4359830208122730e-003,right_val:0.3920140862464905,left_val:0.5399122238159180},{features:[[1,5,3,4,-1.],[2,5,1,4,3.]],threshold:2.6606200262904167e-003,right_val:0.6119617819786072,left_val:0.4482578039169312},{features:[[14,8,4,6,-1.],[14,10,4,2,3.]],threshold:-1.5287200221791863e-003,right_val:0.5340266227722168,left_val:0.3711237907409668},{features:[[1,4,3,8,-1.],[2,4,1,8,3.]],threshold:-4.7397250309586525e-003,right_val:0.4455145001411438,left_val:0.6031088232994080},{features:[[8,13,4,6,-1.],[8,16,4,3,2.]],threshold:-0.0148291299119592,right_val:0.5341861844062805,left_val:0.2838754057884216},{features:[[3,14,2,2,-1.],[3,15,2,1,2.]],threshold:9.2275557108223438e-004,right_val:0.3361653983592987,left_val:0.5209547281265259},{features:[[14,8,4,6,-1.],[14,10,4,2,3.]],threshold:0.0835298076272011,right_val:0.0811644494533539,left_val:0.5119969844818115},{features:[[2,8,4,6,-1.],[2,10,4,2,3.]],threshold:-7.5633148662745953e-004,right_val:0.5189831256866455,left_val:0.3317120075225830},{features:[[10,14,1,6,-1.],[10,17,1,3,2.]],threshold:9.8403859883546829e-003,right_val:0.2334959059953690,left_val:0.5247598290443420},{features:[[7,5,3,6,-1.],[8,5,1,6,3.]],threshold:-1.5953830443322659e-003,right_val:0.4295622110366821,left_val:0.5750094056129456},{features:[[11,2,2,6,-1.],[12,2,1,3,2.],[11,5,1,3,2.]],threshold:3.4766020689858124e-005,right_val:0.5564029216766357,left_val:0.4342445135116577},{features:[[6,6,6,5,-1.],[8,6,2,5,3.]],threshold:0.0298629105091095,right_val:0.6579188108444214,left_val:0.4579147100448608},{features:[[17,1,3,6,-1.],[17,3,3,2,3.]],threshold:0.0113255903124809,right_val:0.3673888146877289,left_val:0.5274311900138855},{features:[[8,7,3,5,-1.],[9,7,1,5,3.]],threshold:-8.7828645482659340e-003,right_val:0.4642167091369629,left_val:0.7100368738174439},{features:[[9,18,3,2,-1.],[10,18,1,2,3.]],threshold:4.3639959767460823e-003,right_val:0.2705877125263214,left_val:0.5279216170310974},{features:[[8,18,3,2,-1.],[9,18,1,2,3.]],threshold:4.1804728098213673e-003,right_val:0.2449083030223846,left_val:0.5072525143623352},{features:[[12,3,5,2,-1.],[12,4,5,1,2.]],threshold:-4.5668511302210391e-004,right_val:0.5548691153526306,left_val:0.4283105134963989},{features:[[7,1,5,12,-1.],[7,7,5,6,2.]],threshold:-3.7140368949621916e-003,right_val:0.4103653132915497,left_val:0.5519387722015381},{features:[[1,0,18,4,-1.],[7,0,6,4,3.]],threshold:-0.0253042895346880,right_val:0.4869889020919800,left_val:0.6867002248764038},{features:[[4,2,2,2,-1.],[4,3,2,1,2.]],threshold:-3.4454080741852522e-004,right_val:0.5287693142890930,left_val:0.3728874027729034},{features:[[11,14,4,2,-1.],[13,14,2,1,2.],[11,15,2,1,2.]],threshold:-8.3935231668874621e-004,right_val:0.4616062045097351,left_val:0.6060152053833008},{features:[[0,2,3,6,-1.],[0,4,3,2,3.]],threshold:0.0172800496220589,right_val:0.1819823980331421,left_val:0.5049635767936707},{features:[[9,7,2,3,-1.],[9,8,2,1,3.]],threshold:-6.3595077954232693e-003,right_val:0.5232778787612915,left_val:0.1631239950656891},{features:[[5,5,1,3,-1.],[5,6,1,1,3.]],threshold:1.0298109846189618e-003,right_val:0.6176549196243286,left_val:0.4463278055191040},{features:[[10,10,6,1,-1.],[10,10,3,1,2.]],threshold:1.0117109632119536e-003,right_val:0.4300698935985565,left_val:0.5473384857177734},{features:[[4,10,6,1,-1.],[7,10,3,1,2.]],threshold:-0.0103088002651930,right_val:0.5000867247581482,left_val:0.1166985034942627},{features:[[9,17,3,3,-1.],[9,18,3,1,3.]],threshold:5.4682018235325813e-003,right_val:0.6719213724136353,left_val:0.4769287109375000},{features:[[4,14,1,3,-1.],[4,15,1,1,3.]],threshold:-9.1696460731327534e-004,right_val:0.5178164839744568,left_val:0.3471089899539948},{features:[[12,5,3,3,-1.],[12,6,3,1,3.]],threshold:2.3922820109874010e-003,right_val:0.6216310858726502,left_val:0.4785236120223999},{features:[[4,5,12,3,-1.],[4,6,12,1,3.]],threshold:-7.5573818758130074e-003,right_val:0.4410085082054138,left_val:0.5814796090126038},{features:[[9,8,2,3,-1.],[9,9,2,1,3.]],threshold:-7.7024032361805439e-004,right_val:0.5465722084045410,left_val:0.3878000080585480},{features:[[4,9,3,3,-1.],[5,9,1,3,3.]],threshold:-8.7125990539789200e-003,right_val:0.4995836019515991,left_val:0.1660051047801971},{features:[[6,0,9,17,-1.],[9,0,3,17,3.]],threshold:-0.0103063201531768,right_val:0.5274233818054199,left_val:0.4093391001224518},{features:[[9,12,1,3,-1.],[9,13,1,1,3.]],threshold:-2.0940979011356831e-003,right_val:0.4572280049324036,left_val:0.6206194758415222},{features:[[9,5,2,15,-1.],[9,10,2,5,3.]],threshold:6.8099051713943481e-003,right_val:0.4155600070953369,left_val:0.5567759275436401},{features:[[8,14,2,3,-1.],[8,15,2,1,3.]],threshold:-1.0746059706434608e-003,right_val:0.4353024959564209,left_val:0.5638927817344666},{features:[[10,14,1,3,-1.],[10,15,1,1,3.]],threshold:2.1550289820879698e-003,right_val:0.6749758124351502,left_val:0.4826265871524811},{features:[[7,1,6,5,-1.],[9,1,2,5,3.]],threshold:0.0317423194646835,right_val:0.1883248984813690,left_val:0.5048379898071289},{features:[[0,0,20,2,-1.],[0,0,10,2,2.]],threshold:-0.0783827230334282,right_val:0.5260158181190491,left_val:0.2369548976421356},{features:[[2,13,5,3,-1.],[2,14,5,1,3.]],threshold:5.7415119372308254e-003,right_val:0.2776469886302948,left_val:0.5048828721046448},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-2.9014600440859795e-003,right_val:0.4693317115306854,left_val:0.6238604784011841},{features:[[2,5,9,15,-1.],[2,10,9,5,3.]],threshold:-2.6427931152284145e-003,right_val:0.5169777274131775,left_val:0.3314141929149628},{features:[[5,0,12,10,-1.],[11,0,6,5,2.],[5,5,6,5,2.]],threshold:-0.1094966009259224,right_val:0.5183441042900085,left_val:0.2380045056343079},{features:[[5,1,2,3,-1.],[6,1,1,3,2.]],threshold:7.4075913289561868e-005,right_val:0.5362150073051453,left_val:0.4069635868072510},{features:[[10,7,6,1,-1.],[12,7,2,1,3.]],threshold:-5.0593802006915212e-004,right_val:0.4374594092369080,left_val:0.5506706237792969},{features:[[3,1,2,10,-1.],[3,1,1,5,2.],[4,6,1,5,2.]],threshold:-8.2131777890026569e-004,right_val:0.4209375977516174,left_val:0.5525709986686707},{features:[[13,7,2,1,-1.],[13,7,1,1,2.]],threshold:-6.0276539443293586e-005,right_val:0.4748266041278839,left_val:0.5455474853515625},{features:[[4,13,4,6,-1.],[4,15,4,2,3.]],threshold:6.8065142259001732e-003,right_val:0.3424577116966248,left_val:0.5157995820045471},{features:[[13,7,2,1,-1.],[13,7,1,1,2.]],threshold:1.7202789895236492e-003,right_val:0.6331263780593872,left_val:0.5013207793235779},{features:[[5,7,2,1,-1.],[6,7,1,1,2.]],threshold:-1.3016929733566940e-004,right_val:0.4226869940757752,left_val:0.5539718270301819},{features:[[2,12,18,4,-1.],[11,12,9,2,2.],[2,14,9,2,2.]],threshold:-4.8016388900578022e-003,right_val:0.5430780053138733,left_val:0.4425095021724701},{features:[[5,7,2,2,-1.],[5,7,1,1,2.],[6,8,1,1,2.]],threshold:-2.5399310979992151e-003,right_val:0.4697605073451996,left_val:0.7145782113075256},{features:[[16,3,4,2,-1.],[16,4,4,1,2.]],threshold:-1.4278929447755218e-003,right_val:0.5399605035781860,left_val:0.4070445001125336},{features:[[0,2,2,18,-1.],[0,2,1,9,2.],[1,11,1,9,2.]],threshold:-0.0251425504684448,right_val:0.4747352004051209,left_val:0.7884690761566162},{features:[[1,2,18,4,-1.],[10,2,9,2,2.],[1,4,9,2,2.]],threshold:-3.8899609353393316e-003,right_val:0.5577110052108765,left_val:0.4296191930770874},{features:[[9,14,1,3,-1.],[9,15,1,1,3.]],threshold:4.3947459198534489e-003,right_val:0.7023944258689880,left_val:0.4693162143230438},{features:[[2,12,18,4,-1.],[11,12,9,2,2.],[2,14,9,2,2.]],threshold:0.0246784202754498,right_val:0.3812510073184967,left_val:0.5242322087287903},{features:[[0,12,18,4,-1.],[0,12,9,2,2.],[9,14,9,2,2.]],threshold:0.0380476787686348,right_val:0.1687828004360199,left_val:0.5011739730834961},{features:[[11,4,5,3,-1.],[11,5,5,1,3.]],threshold:7.9424865543842316e-003,right_val:0.6369568109512329,left_val:0.4828582108020783},{features:[[6,4,7,3,-1.],[6,5,7,1,3.]],threshold:-1.5110049862414598e-003,right_val:0.4487667977809906,left_val:0.5906485915184021},{features:[[13,17,3,3,-1.],[13,18,3,1,3.]],threshold:6.4201741479337215e-003,right_val:0.2990570068359375,left_val:0.5241097807884216},{features:[[8,1,3,4,-1.],[9,1,1,4,3.]],threshold:-2.9802159406244755e-003,right_val:0.5078489780426025,left_val:0.3041465878486633},{features:[[11,4,2,4,-1.],[11,4,1,4,2.]],threshold:-7.4580078944563866e-004,right_val:0.5256826281547546,left_val:0.4128139019012451},{features:[[0,17,9,3,-1.],[3,17,3,3,3.]],threshold:-0.0104709500446916,right_val:0.4494296014308929,left_val:0.5808395147323608},{features:[[11,0,2,8,-1.],[12,0,1,4,2.],[11,4,1,4,2.]],threshold:9.3369204550981522e-003,right_val:0.2658948898315430,left_val:0.5246552824974060},{features:[[0,8,6,12,-1.],[0,8,3,6,2.],[3,14,3,6,2.]],threshold:0.0279369000345469,right_val:0.7087256908416748,left_val:0.4674955010414124},{features:[[10,7,4,12,-1.],[10,13,4,6,2.]],threshold:7.4277678504586220e-003,right_val:0.3758518099784851,left_val:0.5409486889839172},{features:[[5,3,8,14,-1.],[5,10,8,7,2.]],threshold:-0.0235845092684031,right_val:0.5238550901412964,left_val:0.3758639991283417},{features:[[14,10,6,1,-1.],[14,10,3,1,2.]],threshold:1.1452640173956752e-003,right_val:0.5804247260093689,left_val:0.4329578876495361},{features:[[0,4,10,4,-1.],[0,6,10,2,2.]],threshold:-4.3468660442158580e-004,right_val:0.3873069882392883,left_val:0.5280618071556091},{features:[[10,0,5,8,-1.],[10,4,5,4,2.]],threshold:0.0106485402211547,right_val:0.5681251883506775,left_val:0.4902113080024719},{features:[[8,1,4,8,-1.],[8,1,2,4,2.],[10,5,2,4,2.]],threshold:-3.9418050437234342e-004,right_val:0.4318251013755798,left_val:0.5570880174636841},{features:[[9,11,6,1,-1.],[11,11,2,1,3.]],threshold:-1.3270479394122958e-004,right_val:0.4343554973602295,left_val:0.5658439993858337},{features:[[8,9,3,4,-1.],[9,9,1,4,3.]],threshold:-2.0125510636717081e-003,right_val:0.4537523984909058,left_val:0.6056739091873169},{features:[[18,4,2,6,-1.],[18,6,2,2,3.]],threshold:2.4854319635778666e-003,right_val:0.4138010144233704,left_val:0.5390477180480957},{features:[[8,8,3,4,-1.],[9,8,1,4,3.]],threshold:1.8237880431115627e-003,right_val:0.5717188715934753,left_val:0.4354828894138336},{features:[[7,1,13,3,-1.],[7,2,13,1,3.]],threshold:-0.0166566595435143,right_val:0.5216122865676880,left_val:0.3010913133621216},{features:[[7,13,6,1,-1.],[9,13,2,1,3.]],threshold:8.0349558265879750e-004,right_val:0.3818396925926209,left_val:0.5300151109695435},{features:[[12,11,3,6,-1.],[12,13,3,2,3.]],threshold:3.4170378930866718e-003,right_val:0.4241400063037872,left_val:0.5328028798103333},{features:[[5,11,6,1,-1.],[7,11,2,1,3.]],threshold:-3.6222729249857366e-004,right_val:0.4186977148056030,left_val:0.5491728186607361},{features:[[1,4,18,10,-1.],[10,4,9,5,2.],[1,9,9,5,2.]],threshold:-0.1163002029061317,right_val:0.5226451158523560,left_val:0.1440722048282623},{features:[[8,6,4,9,-1.],[8,9,4,3,3.]],threshold:-0.0146950101479888,right_val:0.4715717136859894,left_val:0.7747725248336792},{features:[[8,6,4,3,-1.],[8,7,4,1,3.]],threshold:2.1972130052745342e-003,right_val:0.3315644860267639,left_val:0.5355433821678162},{features:[[8,7,3,3,-1.],[9,7,1,3,3.]],threshold:-4.6965209185145795e-004,right_val:0.4458136856555939,left_val:0.5767235159873962},{features:[[14,15,4,3,-1.],[14,16,4,1,3.]],threshold:6.5144998952746391e-003,right_val:0.3647888898849487,left_val:0.5215674042701721},{features:[[5,10,3,10,-1.],[6,10,1,10,3.]],threshold:0.0213000606745481,right_val:0.1567950993776321,left_val:0.4994204938411713},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:3.1881409231573343e-003,right_val:0.6287270188331604,left_val:0.4742200076580048},{features:[[0,8,1,6,-1.],[0,10,1,2,3.]],threshold:9.0019777417182922e-004,right_val:0.3943752050399780,left_val:0.5347954034805298},{features:[[10,15,1,3,-1.],[10,16,1,1,3.]],threshold:-5.1772277802228928e-003,right_val:0.5013138055801392,left_val:0.6727191805839539},{features:[[2,15,4,3,-1.],[2,16,4,1,3.]],threshold:-4.3764649890363216e-003,right_val:0.5128793120384216,left_val:0.3106675148010254},{features:[[18,3,2,8,-1.],[19,3,1,4,2.],[18,7,1,4,2.]],threshold:2.6299960445612669e-003,right_val:0.5755215883255005,left_val:0.4886310100555420},{features:[[0,3,2,8,-1.],[0,3,1,4,2.],[1,7,1,4,2.]],threshold:-2.0458688959479332e-003,right_val:0.4558076858520508,left_val:0.6025794148445129},{features:[[3,7,14,10,-1.],[10,7,7,5,2.],[3,12,7,5,2.]],threshold:0.0694827064871788,right_val:0.2185259014368057,left_val:0.5240747928619385},{features:[[0,7,19,3,-1.],[0,8,19,1,3.]],threshold:0.0240489393472672,right_val:0.2090622037649155,left_val:0.5011867284774780},{features:[[12,6,3,3,-1.],[12,7,3,1,3.]],threshold:3.1095340382307768e-003,right_val:0.7108548283576965,left_val:0.4866712093353272},{features:[[0,6,1,3,-1.],[0,7,1,1,3.]],threshold:-1.2503260513767600e-003,right_val:0.5156195163726807,left_val:0.3407891094684601},{features:[[12,6,3,3,-1.],[12,7,3,1,3.]],threshold:-1.0281190043315291e-003,right_val:0.4439432024955750,left_val:0.5575572252273560},{features:[[5,6,3,3,-1.],[5,7,3,1,3.]],threshold:-8.8893622159957886e-003,right_val:0.4620442092418671,left_val:0.6402000784873962},{features:[[8,2,4,2,-1.],[8,3,4,1,2.]],threshold:-6.1094801640138030e-004,right_val:0.5448899865150452,left_val:0.3766441941261292},{features:[[6,3,4,12,-1.],[8,3,2,12,2.]],threshold:-5.7686357758939266e-003,right_val:0.5133677124977112,left_val:0.3318648934364319},{features:[[13,6,2,3,-1.],[13,7,2,1,3.]],threshold:1.8506490159779787e-003,right_val:0.6406934857368469,left_val:0.4903570115566254},{features:[[0,10,20,4,-1.],[0,12,20,2,2.]],threshold:-0.0997994691133499,right_val:0.5015562176704407,left_val:0.1536051034927368},{features:[[2,0,17,14,-1.],[2,7,17,7,2.]],threshold:-0.3512834906578064,right_val:0.5174378752708435,left_val:0.0588231310248375},{features:[[0,0,6,10,-1.],[0,0,3,5,2.],[3,5,3,5,2.]],threshold:-0.0452445708215237,right_val:0.4677872955799103,left_val:0.6961488723754883},{features:[[14,6,6,4,-1.],[14,6,3,4,2.]],threshold:0.0714815780520439,right_val:0.1038092970848084,left_val:0.5167986154556274},{features:[[0,6,6,4,-1.],[3,6,3,4,2.]],threshold:2.1895780228078365e-003,right_val:0.5532060861587524,left_val:0.4273078143596649},{features:[[13,2,7,2,-1.],[13,3,7,1,2.]],threshold:-5.9242651332169771e-004,right_val:0.5276389122009277,left_val:0.4638943970203400},{features:[[0,2,7,2,-1.],[0,3,7,1,2.]],threshold:1.6788389766588807e-003,right_val:0.3932034969329834,left_val:0.5301648974418640},{features:[[6,11,14,2,-1.],[13,11,7,1,2.],[6,12,7,1,2.]],threshold:-2.2163488902151585e-003,right_val:0.4757033884525299,left_val:0.5630694031715393},{features:[[8,5,2,2,-1.],[8,5,1,1,2.],[9,6,1,1,2.]],threshold:1.1568699846975505e-004,right_val:0.5535702705383301,left_val:0.4307535886764526},{features:[[13,9,2,3,-1.],[13,9,1,3,2.]],threshold:-7.2017288766801357e-003,right_val:0.5193064212799072,left_val:0.1444882005453110},{features:[[1,1,3,12,-1.],[2,1,1,12,3.]],threshold:8.9081272017210722e-004,right_val:0.5593621134757996,left_val:0.4384432137012482},{features:[[17,4,1,3,-1.],[17,5,1,1,3.]],threshold:1.9605009583756328e-004,right_val:0.4705956876277924,left_val:0.5340415835380554},{features:[[2,4,1,3,-1.],[2,5,1,1,3.]],threshold:5.2022142335772514e-004,right_val:0.3810079097747803,left_val:0.5213856101036072},{features:[[14,5,1,3,-1.],[14,6,1,1,3.]],threshold:9.4588572392240167e-004,right_val:0.6130738854408264,left_val:0.4769414961338043},{features:[[7,16,2,3,-1.],[7,17,2,1,3.]],threshold:9.1698471806012094e-005,right_val:0.5429363250732422,left_val:0.4245009124279022},{features:[[8,13,4,6,-1.],[10,13,2,3,2.],[8,16,2,3,2.]],threshold:2.1833200007677078e-003,right_val:0.4191075861454010,left_val:0.5457730889320374},{features:[[5,5,1,3,-1.],[5,6,1,1,3.]],threshold:-8.6039671441540122e-004,right_val:0.4471659958362579,left_val:0.5764588713645935},{features:[[16,0,4,20,-1.],[16,0,2,20,2.]],threshold:-0.0132362395524979,right_val:0.4695009887218475,left_val:0.6372823119163513},{features:[[5,1,2,6,-1.],[5,1,1,3,2.],[6,4,1,3,2.]],threshold:4.3376701069064438e-004,right_val:0.3945829868316650,left_val:0.5317873954772949}],threshold:67.6989212036132810},{simpleClassifiers:[{features:[[5,4,10,4,-1.],[5,6,10,2,2.]],threshold:-0.0248471498489380,right_val:0.3873311877250671,left_val:0.6555516719818115},{features:[[15,2,4,12,-1.],[15,2,2,12,2.]],threshold:6.1348611488938332e-003,right_val:0.5973997712135315,left_val:0.3748072087764740},{features:[[7,6,4,12,-1.],[7,12,4,6,2.]],threshold:6.4498498104512691e-003,right_val:0.2548811137676239,left_val:0.5425491929054260},{features:[[14,5,1,8,-1.],[14,9,1,4,2.]],threshold:6.3491211039945483e-004,right_val:0.5387253761291504,left_val:0.2462442070245743},{features:[[1,4,14,10,-1.],[1,4,7,5,2.],[8,9,7,5,2.]],threshold:1.4023890253156424e-003,right_val:0.3528657853603363,left_val:0.5594322085380554},{features:[[11,6,6,14,-1.],[14,6,3,7,2.],[11,13,3,7,2.]],threshold:3.0044000595808029e-004,right_val:0.5765938162803650,left_val:0.3958503901958466},{features:[[3,6,6,14,-1.],[3,6,3,7,2.],[6,13,3,7,2.]],threshold:1.0042409849120304e-004,right_val:0.5534998178482056,left_val:0.3698996901512146},{features:[[4,9,15,2,-1.],[9,9,5,2,3.]],threshold:-5.0841490738093853e-003,right_val:0.5547800064086914,left_val:0.3711090981960297},{features:[[7,14,6,3,-1.],[7,15,6,1,3.]],threshold:-0.0195372607558966,right_val:0.4579297006130219,left_val:0.7492755055427551},{features:[[6,3,14,4,-1.],[13,3,7,2,2.],[6,5,7,2,2.]],threshold:-7.4532740654831287e-006,right_val:0.3904069960117340,left_val:0.5649787187576294},{features:[[1,9,15,2,-1.],[6,9,5,2,3.]],threshold:-3.6079459823668003e-003,right_val:0.5267801284790039,left_val:0.3381088078022003},{features:[[6,11,8,9,-1.],[6,14,8,3,3.]],threshold:2.0697501022368670e-003,right_val:0.3714388906955719,left_val:0.5519291162490845},{features:[[7,4,3,8,-1.],[8,4,1,8,3.]],threshold:-4.6463840408250690e-004,right_val:0.4113566875457764,left_val:0.5608214735984802},{features:[[14,6,2,6,-1.],[14,9,2,3,2.]],threshold:7.5490452582016587e-004,right_val:0.5329356193542481,left_val:0.3559206128120422},{features:[[5,7,6,4,-1.],[5,7,3,2,2.],[8,9,3,2,2.]],threshold:-9.8322238773107529e-004,right_val:0.3763205111026764,left_val:0.5414795875549316},{features:[[1,1,18,19,-1.],[7,1,6,19,3.]],threshold:-0.0199406407773495,right_val:0.4705299139022827,left_val:0.6347903013229370},{features:[[1,2,6,5,-1.],[4,2,3,5,2.]],threshold:3.7680300883948803e-003,right_val:0.5563716292381287,left_val:0.3913489878177643},{features:[[12,17,6,2,-1.],[12,18,6,1,2.]],threshold:-9.4528505578637123e-003,right_val:0.5215116739273071,left_val:0.2554892897605896},{features:[[2,17,6,2,-1.],[2,18,6,1,2.]],threshold:2.9560849070549011e-003,right_val:0.3063920140266419,left_val:0.5174679160118103},{features:[[17,3,3,6,-1.],[17,5,3,2,3.]],threshold:9.1078737750649452e-003,right_val:0.2885963022708893,left_val:0.5388448238372803},{features:[[8,17,3,3,-1.],[8,18,3,1,3.]],threshold:1.8219229532405734e-003,right_val:0.5852196812629700,left_val:0.4336043000221252},{features:[[10,13,2,6,-1.],[10,16,2,3,2.]],threshold:0.0146887395530939,right_val:0.2870005965232849,left_val:0.5287361741065979},{features:[[7,13,6,3,-1.],[7,14,6,1,3.]],threshold:-0.0143879903480411,right_val:0.4647370874881744,left_val:0.7019448876380920},{features:[[17,3,3,6,-1.],[17,5,3,2,3.]],threshold:-0.0189866498112679,right_val:0.5247011780738831,left_val:0.2986552119255066},{features:[[8,13,2,3,-1.],[8,14,2,1,3.]],threshold:1.1527639580890536e-003,right_val:0.5931661725044251,left_val:0.4323473870754242},{features:[[9,3,6,2,-1.],[11,3,2,2,3.]],threshold:0.0109336702153087,right_val:0.3130319118499756,left_val:0.5286864042282105},{features:[[0,3,3,6,-1.],[0,5,3,2,3.]],threshold:-0.0149327302351594,right_val:0.5084077119827271,left_val:0.2658419013023377},{features:[[8,5,4,6,-1.],[8,7,4,2,3.]],threshold:-2.9970539617352188e-004,right_val:0.3740724027156830,left_val:0.5463526844978333},{features:[[5,5,3,2,-1.],[5,6,3,1,2.]],threshold:4.1677621193230152e-003,right_val:0.7435721755027771,left_val:0.4703496992588043},{features:[[10,1,3,4,-1.],[11,1,1,4,3.]],threshold:-6.3905320130288601e-003,right_val:0.5280538201332092,left_val:0.2069258987903595},{features:[[1,2,5,9,-1.],[1,5,5,3,3.]],threshold:4.5029609464108944e-003,right_val:0.3483543097972870,left_val:0.5182648897171021},{features:[[13,6,2,3,-1.],[13,7,2,1,3.]],threshold:-9.2040365561842918e-003,right_val:0.4932360053062439,left_val:0.6803777217864990},{features:[[0,6,14,3,-1.],[7,6,7,3,2.]],threshold:0.0813272595405579,right_val:0.2253051996231079,left_val:0.5058398842811585},{features:[[2,11,18,8,-1.],[2,15,18,4,2.]],threshold:-0.1507928073406220,right_val:0.5264679789543152,left_val:0.2963424921035767},{features:[[5,6,2,3,-1.],[5,7,2,1,3.]],threshold:3.3179009333252907e-003,right_val:0.7072932124137878,left_val:0.4655495882034302},{features:[[10,6,4,2,-1.],[12,6,2,1,2.],[10,7,2,1,2.]],threshold:7.7402801252901554e-004,right_val:0.5668237805366516,left_val:0.4780347943305969},{features:[[6,6,4,2,-1.],[6,6,2,1,2.],[8,7,2,1,2.]],threshold:6.8199541419744492e-004,right_val:0.5722156763076782,left_val:0.4286996126174927},{features:[[10,1,3,4,-1.],[11,1,1,4,3.]],threshold:5.3671570494771004e-003,right_val:0.3114621937274933,left_val:0.5299307107925415},{features:[[7,1,2,7,-1.],[8,1,1,7,2.]],threshold:9.7018666565418243e-005,right_val:0.5269461870193481,left_val:0.3674638867378235},{features:[[4,2,15,14,-1.],[4,9,15,7,2.]],threshold:-0.1253408938646317,right_val:0.5245791077613831,left_val:0.2351492047309876},{features:[[8,7,3,2,-1.],[9,7,1,2,3.]],threshold:-5.2516269497573376e-003,right_val:0.4693767130374908,left_val:0.7115936875343323},{features:[[2,3,18,4,-1.],[11,3,9,2,2.],[2,5,9,2,2.]],threshold:-7.8342109918594360e-003,right_val:0.5409085750579834,left_val:0.4462651014328003},{features:[[9,7,2,2,-1.],[10,7,1,2,2.]],threshold:-1.1310069821774960e-003,right_val:0.4417662024497986,left_val:0.5945618748664856},{features:[[13,9,2,3,-1.],[13,9,1,3,2.]],threshold:1.7601120052859187e-003,right_val:0.3973453044891357,left_val:0.5353249907493591},{features:[[5,2,6,2,-1.],[7,2,2,2,3.]],threshold:-8.1581249833106995e-004,right_val:0.5264726877212524,left_val:0.3760268092155457},{features:[[9,5,2,7,-1.],[9,5,1,7,2.]],threshold:-3.8687589112669230e-003,right_val:0.4749819934368134,left_val:0.6309912800788879},{features:[[5,9,2,3,-1.],[6,9,1,3,2.]],threshold:1.5207129763439298e-003,right_val:0.3361223936080933,left_val:0.5230181813240051},{features:[[6,0,14,18,-1.],[6,9,14,9,2.]],threshold:0.5458673834800720,right_val:0.1172635033726692,left_val:0.5167139768600464},{features:[[2,16,6,3,-1.],[2,17,6,1,3.]],threshold:0.0156501904129982,right_val:0.1393294930458069,left_val:0.4979439079761505},{features:[[9,7,3,6,-1.],[10,7,1,6,3.]],threshold:-0.0117318602278829,right_val:0.4921196103096008,left_val:0.7129650712013245},{features:[[7,8,4,3,-1.],[7,9,4,1,3.]],threshold:-6.1765122227370739e-003,right_val:0.5049701929092407,left_val:0.2288102954626083},{features:[[7,12,6,3,-1.],[7,13,6,1,3.]],threshold:2.2457661107182503e-003,right_val:0.6048725843429565,left_val:0.4632433950901032},{features:[[9,12,2,3,-1.],[9,13,2,1,3.]],threshold:-5.1915869116783142e-003,right_val:0.4602192938327789,left_val:0.6467421054840088},{features:[[7,12,6,2,-1.],[9,12,2,2,3.]],threshold:-0.0238278806209564,right_val:0.5226079225540161,left_val:0.1482000946998596},{features:[[5,11,4,6,-1.],[5,14,4,3,2.]],threshold:1.0284580057486892e-003,right_val:0.3375957012176514,left_val:0.5135489106178284},{features:[[11,12,7,2,-1.],[11,13,7,1,2.]],threshold:-0.0100788502022624,right_val:0.5303567051887512,left_val:0.2740561068058014},{features:[[6,10,8,6,-1.],[6,10,4,3,2.],[10,13,4,3,2.]],threshold:2.6168930344283581e-003,right_val:0.3972454071044922,left_val:0.5332670807838440},{features:[[11,10,3,4,-1.],[11,12,3,2,2.]],threshold:5.4385367548093200e-004,right_val:0.4063411951065064,left_val:0.5365604162216187},{features:[[9,16,2,3,-1.],[9,17,2,1,3.]],threshold:5.3510512225329876e-003,right_val:0.6889045834541321,left_val:0.4653759002685547},{features:[[13,3,1,9,-1.],[13,6,1,3,3.]],threshold:-1.5274790348485112e-003,right_val:0.3624723851680756,left_val:0.5449501276016235},{features:[[1,13,14,6,-1.],[1,15,14,2,3.]],threshold:-0.0806244164705276,right_val:0.5000287294387817,left_val:0.1656087040901184},{features:[[13,6,1,6,-1.],[13,9,1,3,2.]],threshold:0.0221920292824507,right_val:0.2002808004617691,left_val:0.5132731199264526},{features:[[0,4,3,8,-1.],[1,4,1,8,3.]],threshold:7.3100631125271320e-003,right_val:0.6366536021232605,left_val:0.4617947936058044},{features:[[18,0,2,18,-1.],[18,0,1,18,2.]],threshold:-6.4063072204589844e-003,right_val:0.4867860972881317,left_val:0.5916250944137573},{features:[[2,3,6,2,-1.],[2,4,6,1,2.]],threshold:-7.6415040530264378e-004,right_val:0.5315797924995422,left_val:0.3888409137725830},{features:[[9,0,8,6,-1.],[9,2,8,2,3.]],threshold:7.6734489994123578e-004,right_val:0.5605279803276062,left_val:0.4159064888954163},{features:[[6,6,1,6,-1.],[6,9,1,3,2.]],threshold:6.1474501853808761e-004,right_val:0.5120148062705994,left_val:0.3089022040367127},{features:[[14,8,6,3,-1.],[14,9,6,1,3.]],threshold:-5.0105270929634571e-003,right_val:0.5207306146621704,left_val:0.3972199857234955},{features:[[0,0,2,18,-1.],[1,0,1,18,2.]],threshold:-8.6909132078289986e-003,right_val:0.4608575999736786,left_val:0.6257408261299133},{features:[[1,18,18,2,-1.],[10,18,9,1,2.],[1,19,9,1,2.]],threshold:-0.0163914598524570,right_val:0.5242266058921814,left_val:0.2085209935903549},{features:[[3,15,2,2,-1.],[3,16,2,1,2.]],threshold:4.0973909199237823e-004,right_val:0.3780320882797241,left_val:0.5222427248954773},{features:[[8,14,5,3,-1.],[8,15,5,1,3.]],threshold:-2.5242289993911982e-003,right_val:0.4611890017986298,left_val:0.5803927183151245},{features:[[8,14,2,3,-1.],[8,15,2,1,3.]],threshold:5.0945312250405550e-004,right_val:0.5846015810966492,left_val:0.4401271939277649},{features:[[12,3,3,3,-1.],[13,3,1,3,3.]],threshold:1.9656419754028320e-003,right_val:0.4184590876102448,left_val:0.5322325229644775},{features:[[7,5,6,2,-1.],[9,5,2,2,3.]],threshold:5.6298897834494710e-004,right_val:0.5234565734863281,left_val:0.3741844892501831},{features:[[15,5,5,2,-1.],[15,6,5,1,2.]],threshold:-6.7946797935292125e-004,right_val:0.5356478095054627,left_val:0.4631041884422302},{features:[[0,5,5,2,-1.],[0,6,5,1,2.]],threshold:7.2856349870562553e-003,right_val:0.2377564013004303,left_val:0.5044670104980469},{features:[[17,14,1,6,-1.],[17,17,1,3,2.]],threshold:-0.0174594894051552,right_val:0.5050435066223145,left_val:0.7289121150970459},{features:[[2,9,9,3,-1.],[5,9,3,3,3.]],threshold:-0.0254217498004436,right_val:0.4678100049495697,left_val:0.6667134761810303},{features:[[12,3,3,3,-1.],[13,3,1,3,3.]],threshold:-1.5647639520466328e-003,right_val:0.5323626995086670,left_val:0.4391759037971497},{features:[[0,0,4,18,-1.],[2,0,2,18,2.]],threshold:0.0114443600177765,right_val:0.5680012106895447,left_val:0.4346440136432648},{features:[[17,6,1,3,-1.],[17,7,1,1,3.]],threshold:-6.7352550104260445e-004,right_val:0.5296812057495117,left_val:0.4477140903472900},{features:[[2,14,1,6,-1.],[2,17,1,3,2.]],threshold:9.3194209039211273e-003,right_val:0.7462607026100159,left_val:0.4740200042724609},{features:[[19,8,1,2,-1.],[19,9,1,1,2.]],threshold:1.3328490604180843e-004,right_val:0.4752134978771210,left_val:0.5365061759948731},{features:[[5,3,3,3,-1.],[6,3,1,3,3.]],threshold:-7.8815799206495285e-003,right_val:0.5015255212783814,left_val:0.1752219051122665},{features:[[9,16,2,3,-1.],[9,17,2,1,3.]],threshold:-5.7985680177807808e-003,right_val:0.4896200895309448,left_val:0.7271236777305603},{features:[[2,6,1,3,-1.],[2,7,1,1,3.]],threshold:-3.8922499516047537e-004,right_val:0.5344941020011902,left_val:0.4003908932209015},{features:[[12,4,8,2,-1.],[16,4,4,1,2.],[12,5,4,1,2.]],threshold:-1.9288610201328993e-003,right_val:0.4803955852985382,left_val:0.5605612993240356},{features:[[0,4,8,2,-1.],[0,4,4,1,2.],[4,5,4,1,2.]],threshold:8.4214154630899429e-003,right_val:0.7623608708381653,left_val:0.4753246903419495},{features:[[2,16,18,4,-1.],[2,18,18,2,2.]],threshold:8.1655876711010933e-003,right_val:0.4191643893718720,left_val:0.5393261909484863},{features:[[7,15,2,4,-1.],[7,17,2,2,2.]],threshold:4.8280550981871784e-004,right_val:0.5399821996688843,left_val:0.4240800142288208},{features:[[4,0,14,3,-1.],[4,1,14,1,3.]],threshold:-2.7186630759388208e-003,right_val:0.5424923896789551,left_val:0.4244599938392639},{features:[[0,0,4,20,-1.],[2,0,2,20,2.]],threshold:-0.0125072300434113,right_val:0.4550411105155945,left_val:0.5895841717720032},{features:[[12,4,4,8,-1.],[14,4,2,4,2.],[12,8,2,4,2.]],threshold:-0.0242865197360516,right_val:0.5189179778099060,left_val:0.2647134959697723},{features:[[6,7,2,2,-1.],[6,7,1,1,2.],[7,8,1,1,2.]],threshold:-2.9676330741494894e-003,right_val:0.4749749898910523,left_val:0.7347682714462280},{features:[[10,6,2,3,-1.],[10,7,2,1,3.]],threshold:-0.0125289997085929,right_val:0.5177599787712097,left_val:0.2756049931049347},{features:[[8,7,3,2,-1.],[8,8,3,1,2.]],threshold:-1.0104000102728605e-003,right_val:0.5144724249839783,left_val:0.3510560989379883},{features:[[8,2,6,12,-1.],[8,8,6,6,2.]],threshold:-2.1348530426621437e-003,right_val:0.4667319953441620,left_val:0.5637925863265991},{features:[[4,0,11,12,-1.],[4,4,11,4,3.]],threshold:0.0195642597973347,right_val:0.6137639880180359,left_val:0.4614573121070862},{features:[[14,9,6,11,-1.],[16,9,2,11,3.]],threshold:-0.0971463471651077,right_val:0.5193555951118469,left_val:0.2998378872871399},{features:[[0,14,4,3,-1.],[0,15,4,1,3.]],threshold:4.5014568604528904e-003,right_val:0.3045755922794342,left_val:0.5077884793281555},{features:[[9,10,2,3,-1.],[9,11,2,1,3.]],threshold:6.3706971704959869e-003,right_val:0.6887500882148743,left_val:0.4861018955707550},{features:[[5,11,3,2,-1.],[5,12,3,1,2.]],threshold:-9.0721528977155685e-003,right_val:0.5017563104629517,left_val:0.1673395931720734},{features:[[9,15,3,3,-1.],[10,15,1,3,3.]],threshold:-5.3537208586931229e-003,right_val:0.5242633223533630,left_val:0.2692756950855255},{features:[[8,8,3,4,-1.],[9,8,1,4,3.]],threshold:-0.0109328404068947,right_val:0.4736028909683228,left_val:0.7183864116668701},{features:[[9,15,3,3,-1.],[10,15,1,3,3.]],threshold:8.2356072962284088e-003,right_val:0.2389862984418869,left_val:0.5223966836929321},{features:[[7,7,3,2,-1.],[8,7,1,2,3.]],threshold:-1.0038160253316164e-003,right_val:0.4433943033218384,left_val:0.5719355940818787},{features:[[2,10,16,4,-1.],[10,10,8,2,2.],[2,12,8,2,2.]],threshold:4.0859128348529339e-003,right_val:0.4148836135864258,left_val:0.5472841858863831},{features:[[2,3,4,17,-1.],[4,3,2,17,2.]],threshold:0.1548541933298111,right_val:0.0610615983605385,left_val:0.4973812103271484},{features:[[15,13,2,7,-1.],[15,13,1,7,2.]],threshold:2.0897459762636572e-004,right_val:0.5423889160156250,left_val:0.4709174036979675},{features:[[2,2,6,1,-1.],[5,2,3,1,2.]],threshold:3.3316991175524890e-004,right_val:0.5300992131233215,left_val:0.4089626967906952},{features:[[5,2,12,4,-1.],[9,2,4,4,3.]],threshold:-0.0108134001493454,right_val:0.4957334101200104,left_val:0.6104369759559631},{features:[[6,0,8,12,-1.],[6,0,4,6,2.],[10,6,4,6,2.]],threshold:0.0456560105085373,right_val:0.2866660058498383,left_val:0.5069689154624939},{features:[[13,7,2,2,-1.],[14,7,1,1,2.],[13,8,1,1,2.]],threshold:1.2569549726322293e-003,right_val:0.6318171024322510,left_val:0.4846917092800140},{features:[[0,12,20,6,-1.],[0,14,20,2,3.]],threshold:-0.1201507002115250,right_val:0.4980959892272949,left_val:0.0605261400341988},{features:[[14,7,2,3,-1.],[14,7,1,3,2.]],threshold:-1.0533799650147557e-004,right_val:0.4708042144775391,left_val:0.5363109707832336},{features:[[0,8,9,12,-1.],[3,8,3,12,3.]],threshold:-0.2070319056510925,right_val:0.4979098141193390,left_val:0.0596603304147720},{features:[[3,0,16,2,-1.],[3,0,8,2,2.]],threshold:1.2909180077258497e-004,right_val:0.5377997756004334,left_val:0.4712977111339569},{features:[[6,15,3,3,-1.],[6,16,3,1,3.]],threshold:3.8818528992123902e-004,right_val:0.5534191131591797,left_val:0.4363538026809692},{features:[[8,15,6,3,-1.],[8,16,6,1,3.]],threshold:-2.9243610333651304e-003,right_val:0.4825215935707092,left_val:0.5811185836791992},{features:[[0,10,1,6,-1.],[0,12,1,2,3.]],threshold:8.3882332546636462e-004,right_val:0.4038138985633850,left_val:0.5311700105667114},{features:[[10,9,4,3,-1.],[10,10,4,1,3.]],threshold:-1.9061550265178084e-003,right_val:0.5260015130043030,left_val:0.3770701885223389},{features:[[9,15,2,3,-1.],[9,16,2,1,3.]],threshold:8.9514348655939102e-003,right_val:0.7682183980941773,left_val:0.4766167998313904},{features:[[5,7,10,1,-1.],[5,7,5,1,2.]],threshold:0.0130834598094225,right_val:0.3062222003936768,left_val:0.5264462828636169},{features:[[4,0,12,19,-1.],[10,0,6,19,2.]],threshold:-0.2115933001041412,right_val:0.4695810079574585,left_val:0.6737198233604431},{features:[[0,6,20,6,-1.],[10,6,10,3,2.],[0,9,10,3,2.]],threshold:3.1493250280618668e-003,right_val:0.4386953115463257,left_val:0.5644835233688355},{features:[[3,6,2,2,-1.],[3,6,1,1,2.],[4,7,1,1,2.]],threshold:3.9754100725986063e-004,right_val:0.5895630121231079,left_val:0.4526061117649078},{features:[[15,6,2,2,-1.],[16,6,1,1,2.],[15,7,1,1,2.]],threshold:-1.3814480043947697e-003,right_val:0.4942413866519928,left_val:0.6070582270622253},{features:[[3,6,2,2,-1.],[3,6,1,1,2.],[4,7,1,1,2.]],threshold:-5.8122188784182072e-004,right_val:0.4508252143859863,left_val:0.5998213291168213},{features:[[14,4,1,12,-1.],[14,10,1,6,2.]],threshold:-2.3905329871922731e-003,right_val:0.5223848223686218,left_val:0.4205588996410370},{features:[[2,5,16,10,-1.],[2,5,8,5,2.],[10,10,8,5,2.]],threshold:0.0272689294070005,right_val:0.3563301861286163,left_val:0.5206447243690491},{features:[[9,17,3,2,-1.],[10,17,1,2,3.]],threshold:-3.7658358924090862e-003,right_val:0.5218814015388489,left_val:0.3144704103469849},{features:[[1,4,2,2,-1.],[1,5,2,1,2.]],threshold:-1.4903489500284195e-003,right_val:0.5124437212944031,left_val:0.3380196094512940},{features:[[5,0,15,5,-1.],[10,0,5,5,3.]],threshold:-0.0174282304942608,right_val:0.4919725954532623,left_val:0.5829960703849793},{features:[[0,0,15,5,-1.],[5,0,5,5,3.]],threshold:-0.0152780301868916,right_val:0.4617887139320374,left_val:0.6163144707679749},{features:[[11,2,2,17,-1.],[11,2,1,17,2.]],threshold:0.0319956094026566,right_val:0.1712764054536820,left_val:0.5166357159614563},{features:[[7,2,2,17,-1.],[8,2,1,17,2.]],threshold:-3.8256710395216942e-003,right_val:0.5131387710571289,left_val:0.3408012092113495},{features:[[15,11,2,9,-1.],[15,11,1,9,2.]],threshold:-8.5186436772346497e-003,right_val:0.4997941851615906,left_val:0.6105518937110901},{features:[[3,11,2,9,-1.],[4,11,1,9,2.]],threshold:9.0641621500253677e-004,right_val:0.5582311153411865,left_val:0.4327270984649658},{features:[[5,16,14,4,-1.],[5,16,7,4,2.]],threshold:0.0103448498994112,right_val:0.5452420115470886,left_val:0.4855653047561646}],threshold:69.2298736572265630},{simpleClassifiers:[{features:[[1,4,18,1,-1.],[7,4,6,1,3.]],threshold:7.8981826081871986e-003,right_val:0.5946462154388428,left_val:0.3332524895668030},{features:[[13,7,6,4,-1.],[16,7,3,2,2.],[13,9,3,2,2.]],threshold:1.6170160379260778e-003,right_val:0.5577868819236755,left_val:0.3490641117095947},{features:[[9,8,2,12,-1.],[9,12,2,4,3.]],threshold:-5.5449741194024682e-004,right_val:0.3291530013084412,left_val:0.5542566180229187},{features:[[12,1,6,6,-1.],[12,3,6,2,3.]],threshold:1.5428980113938451e-003,right_val:0.5545979142189026,left_val:0.3612579107284546},{features:[[5,2,6,6,-1.],[5,2,3,3,2.],[8,5,3,3,2.]],threshold:-1.0329450014978647e-003,right_val:0.5576140284538269,left_val:0.3530139029026032},{features:[[9,16,6,4,-1.],[12,16,3,2,2.],[9,18,3,2,2.]],threshold:7.7698158565908670e-004,right_val:0.5645321011543274,left_val:0.3916778862476349},{features:[[1,2,18,3,-1.],[7,2,6,3,3.]],threshold:0.1432030051946640,right_val:0.7023633122444153,left_val:0.4667482078075409},{features:[[7,4,9,10,-1.],[7,9,9,5,2.]],threshold:-7.3866490274667740e-003,right_val:0.5289257764816284,left_val:0.3073684871196747},{features:[[5,9,4,4,-1.],[7,9,2,4,2.]],threshold:-6.2936742324382067e-004,right_val:0.4037049114704132,left_val:0.5622118115425110},{features:[[11,10,3,6,-1.],[11,13,3,3,2.]],threshold:7.8893528552725911e-004,right_val:0.3557874858379364,left_val:0.5267661213874817},{features:[[7,11,5,3,-1.],[7,12,5,1,3.]],threshold:-0.0122280502691865,right_val:0.4625549912452698,left_val:0.6668320894241333},{features:[[7,11,6,6,-1.],[10,11,3,3,2.],[7,14,3,3,2.]],threshold:3.5420239437371492e-003,right_val:0.3869673013687134,left_val:0.5521438121795654},{features:[[0,0,10,9,-1.],[0,3,10,3,3.]],threshold:-1.0585320414975286e-003,right_val:0.5320926904678345,left_val:0.3628678023815155},{features:[[13,14,1,6,-1.],[13,16,1,2,3.]],threshold:1.4935660146875307e-005,right_val:0.5363323092460632,left_val:0.4632444977760315},{features:[[0,2,3,6,-1.],[0,4,3,2,3.]],threshold:5.2537708543241024e-003,right_val:0.3265708982944489,left_val:0.5132231712341309},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:-8.2338023930788040e-003,right_val:0.4774140119552612,left_val:0.6693689823150635},{features:[[6,14,1,6,-1.],[6,16,1,2,3.]],threshold:2.1866810129722580e-005,right_val:0.5457931160926819,left_val:0.4053862094879150},{features:[[9,15,2,3,-1.],[9,16,2,1,3.]],threshold:-3.8150229956954718e-003,right_val:0.4793178141117096,left_val:0.6454995870590210},{features:[[6,4,3,3,-1.],[7,4,1,3,3.]],threshold:1.1105879675596952e-003,right_val:0.3529678881168366,left_val:0.5270407199859619},{features:[[9,0,11,3,-1.],[9,1,11,1,3.]],threshold:-5.7707689702510834e-003,right_val:0.5352957844734192,left_val:0.3803547024726868},{features:[[0,6,20,3,-1.],[0,7,20,1,3.]],threshold:-3.0158339068293571e-003,right_val:0.3887133002281189,left_val:0.5339403152465820},{features:[[10,1,1,2,-1.],[10,2,1,1,2.]],threshold:-8.5453689098358154e-004,right_val:0.5273603796958923,left_val:0.3564616143703461},{features:[[9,6,2,6,-1.],[10,6,1,6,2.]],threshold:0.0110505102202296,right_val:0.6849737763404846,left_val:0.4671907126903534},{features:[[5,8,12,1,-1.],[9,8,4,1,3.]],threshold:0.0426058396697044,right_val:0.0702200904488564,left_val:0.5151473283767700},{features:[[3,8,12,1,-1.],[7,8,4,1,3.]],threshold:-3.0781750101596117e-003,right_val:0.5152602195739746,left_val:0.3041661083698273},{features:[[9,7,3,5,-1.],[10,7,1,5,3.]],threshold:-5.4815728217363358e-003,right_val:0.4897229969501495,left_val:0.6430295705795288},{features:[[3,9,6,2,-1.],[6,9,3,2,2.]],threshold:3.1881860923022032e-003,right_val:0.3826209902763367,left_val:0.5307493209838867},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:3.5947180003859103e-004,right_val:0.5421904921531677,left_val:0.4650047123432159},{features:[[7,0,6,1,-1.],[9,0,2,1,3.]],threshold:-4.0705031715333462e-003,right_val:0.5079116225242615,left_val:0.2849679887294769},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:-0.0145941702648997,right_val:0.5128461718559265,left_val:0.2971645891666412},{features:[[7,10,2,1,-1.],[8,10,1,1,2.]],threshold:-1.1947689927183092e-004,right_val:0.4343082010746002,left_val:0.5631098151206970},{features:[[6,4,9,13,-1.],[9,4,3,13,3.]],threshold:-6.9344649091362953e-004,right_val:0.5359959006309509,left_val:0.4403578042984009},{features:[[6,8,4,2,-1.],[6,9,4,1,2.]],threshold:1.4834799912932795e-005,right_val:0.5164697766304016,left_val:0.3421008884906769},{features:[[16,2,4,6,-1.],[16,2,2,6,2.]],threshold:9.0296985581517220e-003,right_val:0.6114075183868408,left_val:0.4639343023300171},{features:[[0,17,6,3,-1.],[0,18,6,1,3.]],threshold:-8.0640818923711777e-003,right_val:0.5075494050979614,left_val:0.2820158898830414},{features:[[10,10,3,10,-1.],[10,15,3,5,2.]],threshold:0.0260621197521687,right_val:0.2688778042793274,left_val:0.5208905935287476},{features:[[8,7,3,5,-1.],[9,7,1,5,3.]],threshold:0.0173146594315767,right_val:0.6738539934158325,left_val:0.4663713872432709},{features:[[10,4,4,3,-1.],[10,4,2,3,2.]],threshold:0.0226666405797005,right_val:0.2212723940610886,left_val:0.5209349989891052},{features:[[8,4,3,8,-1.],[9,4,1,8,3.]],threshold:-2.1965929772704840e-003,right_val:0.4538190066814423,left_val:0.6063101291656494},{features:[[6,6,9,13,-1.],[9,6,3,13,3.]],threshold:-9.5282476395368576e-003,right_val:0.5247430801391602,left_val:0.4635204970836639},{features:[[6,0,8,12,-1.],[6,0,4,6,2.],[10,6,4,6,2.]],threshold:8.0943619832396507e-003,right_val:0.3913882076740265,left_val:0.5289440155029297},{features:[[14,2,6,8,-1.],[16,2,2,8,3.]],threshold:-0.0728773325681686,right_val:0.4990234971046448,left_val:0.7752001881599426},{features:[[6,0,3,6,-1.],[7,0,1,6,3.]],threshold:-6.9009521976113319e-003,right_val:0.5048090219497681,left_val:0.2428039014339447},{features:[[14,2,6,8,-1.],[16,2,2,8,3.]],threshold:-0.0113082397729158,right_val:0.4842376112937927,left_val:0.5734364986419678},{features:[[0,5,6,6,-1.],[0,8,6,3,2.]],threshold:0.0596132017672062,right_val:0.2524977028369904,left_val:0.5029836297035217},{features:[[9,12,6,2,-1.],[12,12,3,1,2.],[9,13,3,1,2.]],threshold:-2.8624620754271746e-003,right_val:0.4898459911346436,left_val:0.6073045134544373},{features:[[8,17,3,2,-1.],[9,17,1,2,3.]],threshold:4.4781449250876904e-003,right_val:0.2220316976308823,left_val:0.5015289187431335},{features:[[11,6,2,2,-1.],[12,6,1,1,2.],[11,7,1,1,2.]],threshold:-1.7513240454718471e-003,right_val:0.4933868944644928,left_val:0.6614428758621216},{features:[[1,9,18,2,-1.],[7,9,6,2,3.]],threshold:0.0401634201407433,right_val:0.3741044998168945,left_val:0.5180878043174744},{features:[[11,6,2,2,-1.],[12,6,1,1,2.],[11,7,1,1,2.]],threshold:3.4768949262797832e-004,right_val:0.5818032026290894,left_val:0.4720416963100433},{features:[[3,4,12,8,-1.],[7,4,4,8,3.]],threshold:2.6551650371402502e-003,right_val:0.5221335887908936,left_val:0.3805010914802551},{features:[[13,11,5,3,-1.],[13,12,5,1,3.]],threshold:-8.7706279009580612e-003,right_val:0.5231295228004456,left_val:0.2944166064262390},{features:[[9,10,2,3,-1.],[9,11,2,1,3.]],threshold:-5.5122091434895992e-003,right_val:0.4722816944122315,left_val:0.7346177101135254},{features:[[14,7,2,3,-1.],[14,7,1,3,2.]],threshold:6.8672042107209563e-004,right_val:0.4242413043975830,left_val:0.5452876091003418},{features:[[5,4,1,3,-1.],[5,5,1,1,3.]],threshold:5.6019669864326715e-004,right_val:0.5601285099983215,left_val:0.4398862123489380},{features:[[13,4,2,3,-1.],[13,5,2,1,3.]],threshold:2.4143769405782223e-003,right_val:0.6136621832847595,left_val:0.4741686880588532},{features:[[5,4,2,3,-1.],[5,5,2,1,3.]],threshold:-1.5680900542065501e-003,right_val:0.4516409933567047,left_val:0.6044552922248840},{features:[[9,8,2,3,-1.],[9,9,2,1,3.]],threshold:-3.6827491130679846e-003,right_val:0.5294982194900513,left_val:0.2452459037303925},{features:[[8,9,2,2,-1.],[8,10,2,1,2.]],threshold:-2.9409190756268799e-004,right_val:0.5251451134681702,left_val:0.3732838034629822},{features:[[15,14,1,4,-1.],[15,16,1,2,2.]],threshold:4.2847759323194623e-004,right_val:0.4065535068511963,left_val:0.5498809814453125},{features:[[3,12,2,2,-1.],[3,13,2,1,2.]],threshold:-4.8817070201039314e-003,right_val:0.4999957084655762,left_val:0.2139908969402313},{features:[[12,15,2,2,-1.],[13,15,1,1,2.],[12,16,1,1,2.]],threshold:2.7272020815871656e-004,right_val:0.5813428759574890,left_val:0.4650287032127380},{features:[[9,13,2,2,-1.],[9,14,2,1,2.]],threshold:2.0947199664078653e-004,right_val:0.5572792887687683,left_val:0.4387486875057221},{features:[[4,11,14,9,-1.],[4,14,14,3,3.]],threshold:0.0485011897981167,right_val:0.3212889134883881,left_val:0.5244972705841065},{features:[[7,13,4,3,-1.],[7,14,4,1,3.]],threshold:-4.5166411437094212e-003,right_val:0.4545882046222687,left_val:0.6056813001632690},{features:[[15,14,1,4,-1.],[15,16,1,2,2.]],threshold:-0.0122916800901294,right_val:0.5152214169502258,left_val:0.2040929049253464},{features:[[4,14,1,4,-1.],[4,16,1,2,2.]],threshold:4.8549679922871292e-004,right_val:0.3739503026008606,left_val:0.5237604975700378},{features:[[14,0,6,13,-1.],[16,0,2,13,3.]],threshold:0.0305560491979122,right_val:0.5938246250152588,left_val:0.4960533976554871},{features:[[4,1,2,12,-1.],[4,1,1,6,2.],[5,7,1,6,2.]],threshold:-1.5105320198927075e-004,right_val:0.4145204126834869,left_val:0.5351303815841675},{features:[[11,14,6,6,-1.],[14,14,3,3,2.],[11,17,3,3,2.]],threshold:2.4937440175563097e-003,right_val:0.5514941215515137,left_val:0.4693366885185242},{features:[[3,14,6,6,-1.],[3,14,3,3,2.],[6,17,3,3,2.]],threshold:-0.0123821301385760,right_val:0.4681667983531952,left_val:0.6791396737098694},{features:[[14,17,3,2,-1.],[14,18,3,1,2.]],threshold:-5.1333461888134480e-003,right_val:0.5229160189628601,left_val:0.3608739078044891},{features:[[3,17,3,2,-1.],[3,18,3,1,2.]],threshold:5.1919277757406235e-004,right_val:0.3633613884449005,left_val:0.5300073027610779},{features:[[14,0,6,13,-1.],[16,0,2,13,3.]],threshold:0.1506042033433914,right_val:0.2211782038211823,left_val:0.5157316923141480},{features:[[0,0,6,13,-1.],[2,0,2,13,3.]],threshold:7.7144149690866470e-003,right_val:0.5776609182357788,left_val:0.4410496950149536},{features:[[10,10,7,6,-1.],[10,12,7,2,3.]],threshold:9.4443522393703461e-003,right_val:0.3756650090217590,left_val:0.5401855111122131},{features:[[6,15,2,2,-1.],[6,15,1,1,2.],[7,16,1,1,2.]],threshold:2.5006249779835343e-004,right_val:0.5607374906539917,left_val:0.4368270933628082},{features:[[6,11,8,6,-1.],[10,11,4,3,2.],[6,14,4,3,2.]],threshold:-3.3077150583267212e-003,right_val:0.5518230795860291,left_val:0.4244799017906189},{features:[[7,6,2,2,-1.],[7,6,1,1,2.],[8,7,1,1,2.]],threshold:7.4048910755664110e-004,right_val:0.5900576710700989,left_val:0.4496962130069733},{features:[[2,2,16,6,-1.],[10,2,8,3,2.],[2,5,8,3,2.]],threshold:0.0440920516848564,right_val:0.3156355023384094,left_val:0.5293493270874023},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:3.3639909233897924e-003,right_val:0.5848662257194519,left_val:0.4483296871185303},{features:[[11,7,3,10,-1.],[11,12,3,5,2.]],threshold:-3.9760079234838486e-003,right_val:0.5483639240264893,left_val:0.4559507071971893},{features:[[6,7,3,10,-1.],[6,12,3,5,2.]],threshold:2.7716930489987135e-003,right_val:0.3792484104633331,left_val:0.5341786146163940},{features:[[10,7,3,2,-1.],[11,7,1,2,3.]],threshold:-2.4123019829858094e-004,right_val:0.4576973021030426,left_val:0.5667188763618469},{features:[[8,12,4,2,-1.],[8,13,4,1,2.]],threshold:4.9425667384639382e-004,right_val:0.5628787279129028,left_val:0.4421244859695435},{features:[[10,1,1,3,-1.],[10,2,1,1,3.]],threshold:-3.8876468897797167e-004,right_val:0.5391063094139099,left_val:0.4288370907306671},{features:[[1,2,4,18,-1.],[1,2,2,9,2.],[3,11,2,9,2.]],threshold:-0.0500488989055157,right_val:0.4703742861747742,left_val:0.6899513006210327},{features:[[12,4,4,12,-1.],[12,10,4,6,2.]],threshold:-0.0366354808211327,right_val:0.5191826224327087,left_val:0.2217779010534287},{features:[[0,0,1,6,-1.],[0,2,1,2,3.]],threshold:2.4273579474538565e-003,right_val:0.3497397899627686,left_val:0.5136224031448364},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:1.9558030180633068e-003,right_val:0.6408380866050720,left_val:0.4826192855834961},{features:[[8,7,4,3,-1.],[8,8,4,1,3.]],threshold:-1.7494610510766506e-003,right_val:0.5272685289382935,left_val:0.3922835886478424},{features:[[10,7,3,2,-1.],[11,7,1,2,3.]],threshold:0.0139550799503922,right_val:0.8416504859924316,left_val:0.5078201889991760},{features:[[7,7,3,2,-1.],[8,7,1,2,3.]],threshold:-2.1896739781368524e-004,right_val:0.4314234852790833,left_val:0.5520489811897278},{features:[[9,4,6,1,-1.],[11,4,2,1,3.]],threshold:-1.5131309628486633e-003,right_val:0.5382571220397949,left_val:0.3934605121612549},{features:[[8,7,2,3,-1.],[9,7,1,3,2.]],threshold:-4.3622800149023533e-003,right_val:0.4736475944519043,left_val:0.7370628714561462},{features:[[12,7,8,6,-1.],[16,7,4,3,2.],[12,10,4,3,2.]],threshold:0.0651605874300003,right_val:0.3281595110893250,left_val:0.5159279704093933},{features:[[0,7,8,6,-1.],[0,7,4,3,2.],[4,10,4,3,2.]],threshold:-2.3567399475723505e-003,right_val:0.5172886252403259,left_val:0.3672826886177063},{features:[[18,2,2,10,-1.],[19,2,1,5,2.],[18,7,1,5,2.]],threshold:0.0151466596871614,right_val:0.6687604188919067,left_val:0.5031493902206421},{features:[[0,2,6,4,-1.],[3,2,3,4,2.]],threshold:-0.0228509604930878,right_val:0.4709596931934357,left_val:0.6767519712448120},{features:[[9,4,6,1,-1.],[11,4,2,1,3.]],threshold:4.8867650330066681e-003,right_val:0.4059878885746002,left_val:0.5257998108863831},{features:[[7,15,2,2,-1.],[7,15,1,1,2.],[8,16,1,1,2.]],threshold:1.7619599821045995e-003,right_val:0.6688278913497925,left_val:0.4696272909641266},{features:[[11,13,1,6,-1.],[11,16,1,3,2.]],threshold:-1.2942519970238209e-003,right_val:0.5344281792640686,left_val:0.4320712983608246},{features:[[8,13,1,6,-1.],[8,16,1,3,2.]],threshold:0.0109299495816231,right_val:0.1637486070394516,left_val:0.4997706115245819},{features:[[14,3,2,1,-1.],[14,3,1,1,2.]],threshold:2.9958489903947338e-005,right_val:0.5633224248886108,left_val:0.4282417893409729},{features:[[8,15,2,3,-1.],[8,16,2,1,3.]],threshold:-6.5884361974895000e-003,right_val:0.4700526893138886,left_val:0.6772121191024780},{features:[[12,15,7,4,-1.],[12,17,7,2,2.]],threshold:3.2527779694646597e-003,right_val:0.4536148905754089,left_val:0.5313397049903870},{features:[[4,14,12,3,-1.],[4,15,12,1,3.]],threshold:-4.0435739792883396e-003,right_val:0.4413388967514038,left_val:0.5660061836242676},{features:[[10,3,3,2,-1.],[11,3,1,2,3.]],threshold:-1.2523540062829852e-003,right_val:0.5356451869010925,left_val:0.3731913864612579},{features:[[4,12,2,2,-1.],[4,13,2,1,2.]],threshold:1.9246719602961093e-004,right_val:0.3738811016082764,left_val:0.5189986228942871},{features:[[10,11,4,6,-1.],[10,14,4,3,2.]],threshold:-0.0385896712541580,right_val:0.5188810825347900,left_val:0.2956373989582062},{features:[[7,13,2,2,-1.],[7,13,1,1,2.],[8,14,1,1,2.]],threshold:1.5489870565943420e-004,right_val:0.5509533286094666,left_val:0.4347135126590729},{features:[[4,11,14,4,-1.],[11,11,7,2,2.],[4,13,7,2,2.]],threshold:-0.0337638482451439,right_val:0.5195475816726685,left_val:0.3230330049991608},{features:[[1,18,18,2,-1.],[7,18,6,2,3.]],threshold:-8.2657067105174065e-003,right_val:0.4552114009857178,left_val:0.5975489020347595},{features:[[11,18,2,2,-1.],[12,18,1,1,2.],[11,19,1,1,2.]],threshold:1.4481440302915871e-005,right_val:0.5497426986694336,left_val:0.4745678007602692},{features:[[7,18,2,2,-1.],[7,18,1,1,2.],[8,19,1,1,2.]],threshold:1.4951299817766994e-005,right_val:0.5480644106864929,left_val:0.4324473142623901},{features:[[12,18,8,2,-1.],[12,19,8,1,2.]],threshold:-0.0187417995184660,right_val:0.5178533196449280,left_val:0.1580052971839905},{features:[[7,14,6,2,-1.],[7,15,6,1,2.]],threshold:1.7572239739820361e-003,right_val:0.5773764252662659,left_val:0.4517636895179749},{features:[[8,12,4,8,-1.],[10,12,2,4,2.],[8,16,2,4,2.]],threshold:-3.1391119118779898e-003,right_val:0.5460842251777649,left_val:0.4149647951126099},{features:[[4,9,3,3,-1.],[4,10,3,1,3.]],threshold:6.6656779381446540e-005,right_val:0.5293084979057312,left_val:0.4039090871810913},{features:[[7,10,6,2,-1.],[9,10,2,2,3.]],threshold:6.7743421532213688e-003,right_val:0.6121956110000610,left_val:0.4767651855945587},{features:[[5,0,4,15,-1.],[7,0,2,15,2.]],threshold:-7.3868161998689175e-003,right_val:0.5187280774116516,left_val:0.3586258888244629},{features:[[8,6,12,14,-1.],[12,6,4,14,3.]],threshold:0.0140409301966429,right_val:0.5576155781745911,left_val:0.4712139964103699},{features:[[5,16,3,3,-1.],[5,17,3,1,3.]],threshold:-5.5258329957723618e-003,right_val:0.5039281249046326,left_val:0.2661027014255524},{features:[[8,1,12,19,-1.],[12,1,4,19,3.]],threshold:0.3868423998355866,right_val:0.2525899112224579,left_val:0.5144339799880981},{features:[[3,0,3,2,-1.],[3,1,3,1,2.]],threshold:1.1459240340627730e-004,right_val:0.5423371195793152,left_val:0.4284994900226593},{features:[[10,12,4,5,-1.],[10,12,2,5,2.]],threshold:-0.0184675697237253,right_val:0.5213062167167664,left_val:0.3885835111141205},{features:[[6,12,4,5,-1.],[8,12,2,5,2.]],threshold:-4.5907011372037232e-004,right_val:0.4235909879207611,left_val:0.5412563085556030},{features:[[11,11,2,2,-1.],[12,11,1,1,2.],[11,12,1,1,2.]],threshold:1.2527540093287826e-003,right_val:0.6624091267585754,left_val:0.4899305105209351},{features:[[0,2,3,6,-1.],[0,4,3,2,3.]],threshold:1.4910609461367130e-003,right_val:0.4040051996707916,left_val:0.5286778211593628},{features:[[11,11,2,2,-1.],[12,11,1,1,2.],[11,12,1,1,2.]],threshold:-7.5435562757775187e-004,right_val:0.4795120060443878,left_val:0.6032990217208862},{features:[[7,6,4,10,-1.],[7,11,4,5,2.]],threshold:-6.9478838704526424e-003,right_val:0.5373504161834717,left_val:0.4084401130676270},{features:[[11,11,2,2,-1.],[12,11,1,1,2.],[11,12,1,1,2.]],threshold:2.8092920547351241e-004,right_val:0.5759382247924805,left_val:0.4846062958240509},{features:[[2,13,5,2,-1.],[2,14,5,1,2.]],threshold:9.6073717577382922e-004,right_val:0.3554979860782623,left_val:0.5164741277694702},{features:[[11,11,2,2,-1.],[12,11,1,1,2.],[11,12,1,1,2.]],threshold:-2.6883929967880249e-004,right_val:0.4731765985488892,left_val:0.5677582025527954},{features:[[7,11,2,2,-1.],[7,11,1,1,2.],[8,12,1,1,2.]],threshold:2.1599370520561934e-003,right_val:0.7070567011833191,left_val:0.4731487035751343},{features:[[14,13,3,3,-1.],[14,14,3,1,3.]],threshold:5.6235301308333874e-003,right_val:0.2781791985034943,left_val:0.5240243077278137},{features:[[3,13,3,3,-1.],[3,14,3,1,3.]],threshold:-5.0243991427123547e-003,right_val:0.5062304139137268,left_val:0.2837013900279999},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:-9.7611639648675919e-003,right_val:0.4934569001197815,left_val:0.7400717735290527},{features:[[8,7,3,3,-1.],[8,8,3,1,3.]],threshold:4.1515100747346878e-003,right_val:0.3407008051872253,left_val:0.5119131207466126},{features:[[13,5,3,3,-1.],[13,6,3,1,3.]],threshold:6.2465080991387367e-003,right_val:0.6579058766365051,left_val:0.4923788011074066},{features:[[0,9,5,3,-1.],[0,10,5,1,3.]],threshold:-7.0597478188574314e-003,right_val:0.5032842159271240,left_val:0.2434711009263992},{features:[[13,5,3,3,-1.],[13,6,3,1,3.]],threshold:-2.0587709732353687e-003,right_val:0.4695087075233460,left_val:0.5900310873985291},{features:[[9,12,2,8,-1.],[9,12,1,4,2.],[10,16,1,4,2.]],threshold:-2.4146060459315777e-003,right_val:0.5189201831817627,left_val:0.3647317886352539},{features:[[11,7,2,2,-1.],[12,7,1,1,2.],[11,8,1,1,2.]],threshold:-1.4817609917372465e-003,right_val:0.4940128028392792,left_val:0.6034948229789734},{features:[[0,16,6,4,-1.],[3,16,3,4,2.]],threshold:-6.3016400672495365e-003,right_val:0.4560427963733673,left_val:0.5818989872932434},{features:[[10,6,2,3,-1.],[10,7,2,1,3.]],threshold:3.4763428848236799e-003,right_val:0.3483993113040924,left_val:0.5217475891113281},{features:[[9,5,2,6,-1.],[9,7,2,2,3.]],threshold:-0.0222508702427149,right_val:0.5032082796096802,left_val:0.2360700070858002},{features:[[12,15,8,4,-1.],[12,15,4,4,2.]],threshold:-0.0306125506758690,right_val:0.4914919137954712,left_val:0.6499186754226685},{features:[[0,14,8,6,-1.],[4,14,4,6,2.]],threshold:0.0130574796348810,right_val:0.5683764219284058,left_val:0.4413323104381561},{features:[[9,0,3,2,-1.],[10,0,1,2,3.]],threshold:-6.0095742810517550e-004,right_val:0.5333483219146729,left_val:0.4359731078147888},{features:[[4,15,4,2,-1.],[6,15,2,2,2.]],threshold:-4.1514250915497541e-004,right_val:0.4326060116291046,left_val:0.5504062771797180},{features:[[12,7,3,13,-1.],[13,7,1,13,3.]],threshold:-0.0137762902304530,right_val:0.5201548933982849,left_val:0.4064112901687622},{features:[[5,7,3,13,-1.],[6,7,1,13,3.]],threshold:-0.0322965085506439,right_val:0.4977194964885712,left_val:0.0473519712686539},{features:[[9,6,3,9,-1.],[9,9,3,3,3.]],threshold:0.0535569787025452,right_val:0.6666939258575440,left_val:0.4881733059883118},{features:[[4,4,7,12,-1.],[4,10,7,6,2.]],threshold:8.1889545544981956e-003,right_val:0.4240820109844208,left_val:0.5400037169456482},{features:[[12,12,2,2,-1.],[13,12,1,1,2.],[12,13,1,1,2.]],threshold:2.1055320394225419e-004,right_val:0.5563852787017822,left_val:0.4802047908306122},{features:[[6,12,2,2,-1.],[6,12,1,1,2.],[7,13,1,1,2.]],threshold:-2.4382730480283499e-003,right_val:0.4773685038089752,left_val:0.7387793064117432},{features:[[8,9,4,2,-1.],[10,9,2,1,2.],[8,10,2,1,2.]],threshold:3.2835570164024830e-003,right_val:0.3171291947364807,left_val:0.5288546085357666},{features:[[3,6,2,2,-1.],[3,6,1,1,2.],[4,7,1,1,2.]],threshold:2.3729570675641298e-003,right_val:0.7060170769691467,left_val:0.4750812947750092},{features:[[16,6,3,2,-1.],[16,7,3,1,2.]],threshold:-1.4541699783876538e-003,right_val:0.5330739021301270,left_val:0.3811730146408081}],threshold:79.2490768432617190},{simpleClassifiers:[{features:[[0,7,19,4,-1.],[0,9,19,2,2.]],threshold:0.0557552389800549,right_val:0.6806036829948425,left_val:0.4019156992435455},{features:[[10,2,10,1,-1.],[10,2,5,1,2.]],threshold:2.4730248842388391e-003,right_val:0.5965719819068909,left_val:0.3351148962974548},{features:[[9,4,2,12,-1.],[9,10,2,6,2.]],threshold:-3.5031698644161224e-004,right_val:0.3482286930084229,left_val:0.5557708144187927},{features:[[12,18,4,1,-1.],[12,18,2,1,2.]],threshold:5.4167630150914192e-004,right_val:0.5693380832672119,left_val:0.4260858893394470},{features:[[1,7,6,4,-1.],[1,7,3,2,2.],[4,9,3,2,2.]],threshold:7.7193678589537740e-004,right_val:0.5433688759803772,left_val:0.3494240045547485},{features:[[12,0,6,13,-1.],[14,0,2,13,3.]],threshold:-1.5999219613149762e-003,right_val:0.5484359264373779,left_val:0.4028499126434326},{features:[[2,0,6,13,-1.],[4,0,2,13,3.]],threshold:-1.1832080053864047e-004,right_val:0.5425465106964111,left_val:0.3806901872158051},{features:[[10,5,8,8,-1.],[10,9,8,4,2.]],threshold:3.2909031142480671e-004,right_val:0.5429521799087524,left_val:0.2620100080966950},{features:[[8,3,2,5,-1.],[9,3,1,5,2.]],threshold:2.9518108931370080e-004,right_val:0.5399264097213745,left_val:0.3799768984317780},{features:[[8,4,9,1,-1.],[11,4,3,1,3.]],threshold:9.0466710389591753e-005,right_val:0.5440226197242737,left_val:0.4433645009994507},{features:[[3,4,9,1,-1.],[6,4,3,1,3.]],threshold:1.5007190086180344e-005,right_val:0.5409119725227356,left_val:0.3719654977321625},{features:[[1,0,18,10,-1.],[7,0,6,10,3.]],threshold:0.1393561065196991,right_val:0.4479042887687683,left_val:0.5525395870208740},{features:[[7,17,5,3,-1.],[7,18,5,1,3.]],threshold:1.6461990308016539e-003,right_val:0.5772169828414917,left_val:0.4264501035213471},{features:[[7,11,6,1,-1.],[9,11,2,1,3.]],threshold:4.9984431825578213e-004,right_val:0.5685871243476868,left_val:0.4359526038169861},{features:[[2,2,3,2,-1.],[2,3,3,1,2.]],threshold:-1.0971280280500650e-003,right_val:0.5205408930778503,left_val:0.3390136957168579},{features:[[8,12,4,2,-1.],[8,13,4,1,2.]],threshold:6.6919892560690641e-004,right_val:0.5980659723281860,left_val:0.4557456076145172},{features:[[6,10,3,6,-1.],[6,13,3,3,2.]],threshold:8.6471042595803738e-004,right_val:0.2944033145904541,left_val:0.5134841203689575},{features:[[11,4,2,4,-1.],[11,4,1,4,2.]],threshold:-2.7182599296793342e-004,right_val:0.5377181172370911,left_val:0.3906578123569489},{features:[[7,4,2,4,-1.],[8,4,1,4,2.]],threshold:3.0249499104684219e-005,right_val:0.5225688815116882,left_val:0.3679609894752502},{features:[[9,6,2,4,-1.],[9,6,1,4,2.]],threshold:-8.5225896909832954e-003,right_val:0.4892365038394928,left_val:0.7293102145195007},{features:[[6,13,8,3,-1.],[6,14,8,1,3.]],threshold:1.6705560265108943e-003,right_val:0.5696138143539429,left_val:0.4345324933528900},{features:[[9,15,3,4,-1.],[10,15,1,4,3.]],threshold:-7.1433838456869125e-003,right_val:0.5225623846054077,left_val:0.2591280043125153},{features:[[9,2,2,17,-1.],[10,2,1,17,2.]],threshold:-0.0163193698972464,right_val:0.4651575982570648,left_val:0.6922279000282288},{features:[[7,0,6,1,-1.],[9,0,2,1,3.]],threshold:4.8034260980784893e-003,right_val:0.3286302983760834,left_val:0.5352262854576111},{features:[[8,15,3,4,-1.],[9,15,1,4,3.]],threshold:-7.5421929359436035e-003,right_val:0.5034546256065369,left_val:0.2040544003248215},{features:[[7,13,7,3,-1.],[7,14,7,1,3.]],threshold:-0.0143631100654602,right_val:0.4889059066772461,left_val:0.6804888844490051},{features:[[8,16,3,3,-1.],[9,16,1,3,3.]],threshold:8.9063588529825211e-004,right_val:0.3895480930805206,left_val:0.5310695767402649},{features:[[6,2,8,10,-1.],[6,7,8,5,2.]],threshold:-4.4060191139578819e-003,right_val:0.4372426867485046,left_val:0.5741562843322754},{features:[[2,5,8,8,-1.],[2,9,8,4,2.]],threshold:-1.8862540309783071e-004,right_val:0.5098205208778381,left_val:0.2831785976886749},{features:[[14,16,2,2,-1.],[14,17,2,1,2.]],threshold:-3.7979281041771173e-003,right_val:0.5246580243110657,left_val:0.3372507989406586},{features:[[4,16,2,2,-1.],[4,17,2,1,2.]],threshold:1.4627049677073956e-004,right_val:0.3911710083484650,left_val:0.5306674242019653},{features:[[10,11,4,6,-1.],[10,14,4,3,2.]],threshold:-4.9164638767251745e-005,right_val:0.3942720890045166,left_val:0.5462496280670166},{features:[[6,11,4,6,-1.],[6,14,4,3,2.]],threshold:-0.0335825011134148,right_val:0.5048211812973023,left_val:0.2157824039459229},{features:[[10,14,1,3,-1.],[10,15,1,1,3.]],threshold:-3.5339309833943844e-003,right_val:0.4872696995735169,left_val:0.6465312242507935},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:5.0144111737608910e-003,right_val:0.6248074769973755,left_val:0.4617668092250824},{features:[[10,0,4,6,-1.],[12,0,2,3,2.],[10,3,2,3,2.]],threshold:0.0188173707574606,right_val:0.2000052034854889,left_val:0.5220689177513123},{features:[[0,3,20,2,-1.],[0,4,20,1,2.]],threshold:-1.3434339780360460e-003,right_val:0.5301619768142700,left_val:0.4014537930488586},{features:[[12,0,8,2,-1.],[16,0,4,1,2.],[12,1,4,1,2.]],threshold:1.7557960236445069e-003,right_val:0.5653169751167297,left_val:0.4794039130210877},{features:[[2,12,10,8,-1.],[2,16,10,4,2.]],threshold:-0.0956374630331993,right_val:0.5006706714630127,left_val:0.2034195065498352},{features:[[17,7,2,10,-1.],[18,7,1,5,2.],[17,12,1,5,2.]],threshold:-0.0222412291914225,right_val:0.5046340227127075,left_val:0.7672473192214966},{features:[[1,7,2,10,-1.],[1,7,1,5,2.],[2,12,1,5,2.]],threshold:-0.0155758196488023,right_val:0.4755851030349731,left_val:0.7490342259407044},{features:[[15,10,3,6,-1.],[15,12,3,2,3.]],threshold:5.3599118255078793e-003,right_val:0.4004670977592468,left_val:0.5365303754806519},{features:[[4,4,6,2,-1.],[6,4,2,2,3.]],threshold:-0.0217634998261929,right_val:0.4964174926280975,left_val:0.0740154981613159},{features:[[0,5,20,6,-1.],[0,7,20,2,3.]],threshold:-0.1656159013509750,right_val:0.5218086242675781,left_val:0.2859103083610535},{features:[[0,0,8,2,-1.],[0,0,4,1,2.],[4,1,4,1,2.]],threshold:1.6461320046801120e-004,right_val:0.5380793213844299,left_val:0.4191615879535675},{features:[[1,0,18,4,-1.],[7,0,6,4,3.]],threshold:-8.9077502489089966e-003,right_val:0.4877404868602753,left_val:0.6273192763328552},{features:[[1,13,6,2,-1.],[1,14,6,1,2.]],threshold:8.6346449097618461e-004,right_val:0.3671025931835175,left_val:0.5159940719604492},{features:[[10,8,3,4,-1.],[11,8,1,4,3.]],threshold:-1.3751760125160217e-003,right_val:0.4579083919525147,left_val:0.5884376764297485},{features:[[6,1,6,1,-1.],[8,1,2,1,3.]],threshold:-1.4081239933148026e-003,right_val:0.5139945149421692,left_val:0.3560509979724884},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:-3.9342888630926609e-003,right_val:0.4664272069931030,left_val:0.5994288921356201},{features:[[1,6,18,2,-1.],[10,6,9,2,2.]],threshold:-0.0319669283926487,right_val:0.5144183039665222,left_val:0.3345462083816528},{features:[[15,11,1,2,-1.],[15,12,1,1,2.]],threshold:-1.5089280168467667e-005,right_val:0.4414057135581970,left_val:0.5582656264305115},{features:[[6,5,1,2,-1.],[6,6,1,1,2.]],threshold:5.1994470413774252e-004,right_val:0.6168993711471558,left_val:0.4623680114746094},{features:[[13,4,1,3,-1.],[13,5,1,1,3.]],threshold:-3.4220460802316666e-003,right_val:0.4974805116653442,left_val:0.6557074785232544},{features:[[2,15,1,2,-1.],[2,16,1,1,2.]],threshold:1.7723299970384687e-004,right_val:0.3901908099651337,left_val:0.5269501805305481},{features:[[12,4,4,3,-1.],[12,5,4,1,3.]],threshold:1.5716759953647852e-003,right_val:0.5790457725524902,left_val:0.4633373022079468},{features:[[0,0,7,3,-1.],[0,1,7,1,3.]],threshold:-8.9041329920291901e-003,right_val:0.5053591132164002,left_val:0.2689608037471771},{features:[[9,12,6,2,-1.],[9,12,3,2,2.]],threshold:4.0677518700249493e-004,right_val:0.4329898953437805,left_val:0.5456603169441223},{features:[[5,4,2,3,-1.],[5,5,2,1,3.]],threshold:6.7604780197143555e-003,right_val:0.6689761877059937,left_val:0.4648993909358978},{features:[[18,4,2,3,-1.],[18,5,2,1,3.]],threshold:2.9100088868290186e-003,right_val:0.3377839922904968,left_val:0.5309703946113586},{features:[[3,0,8,6,-1.],[3,2,8,2,3.]],threshold:1.3885459629818797e-003,right_val:0.5349133014678955,left_val:0.4074738919734955},{features:[[0,2,20,6,-1.],[10,2,10,3,2.],[0,5,10,3,2.]],threshold:-0.0767642632126808,right_val:0.5228242278099060,left_val:0.1992176026105881},{features:[[4,7,2,4,-1.],[5,7,1,4,2.]],threshold:-2.2688310127705336e-004,right_val:0.4253072142601013,left_val:0.5438501834869385},{features:[[3,10,15,2,-1.],[8,10,5,2,3.]],threshold:-6.3094152137637138e-003,right_val:0.5378909707069397,left_val:0.4259178936481476},{features:[[3,0,12,11,-1.],[9,0,6,11,2.]],threshold:-0.1100727990269661,right_val:0.4721749126911163,left_val:0.6904156804084778},{features:[[13,0,2,6,-1.],[13,0,1,6,2.]],threshold:2.8619659133255482e-004,right_val:0.5548306107521057,left_val:0.4524914920330048},{features:[[0,19,2,1,-1.],[1,19,1,1,2.]],threshold:2.9425329557852820e-005,right_val:0.4236463904380798,left_val:0.5370373725891113},{features:[[16,10,4,10,-1.],[18,10,2,5,2.],[16,15,2,5,2.]],threshold:-0.0248865708708763,right_val:0.4969303905963898,left_val:0.6423557996749878},{features:[[4,8,10,3,-1.],[4,9,10,1,3.]],threshold:0.0331488512456417,right_val:0.1613811999559403,left_val:0.4988475143909454},{features:[[14,12,3,3,-1.],[14,13,3,1,3.]],threshold:7.8491691965609789e-004,right_val:0.4223009049892426,left_val:0.5416026115417481},{features:[[0,10,4,10,-1.],[0,10,2,5,2.],[2,15,2,5,2.]],threshold:4.7087189741432667e-003,right_val:0.6027557849884033,left_val:0.4576328992843628},{features:[[18,3,2,6,-1.],[18,5,2,2,3.]],threshold:2.4144479539245367e-003,right_val:0.4422498941421509,left_val:0.5308973193168640},{features:[[6,6,1,3,-1.],[6,7,1,1,3.]],threshold:1.9523180089890957e-003,right_val:0.6663324832916260,left_val:0.4705634117126465},{features:[[7,7,7,2,-1.],[7,8,7,1,2.]],threshold:1.3031980488449335e-003,right_val:0.5526962280273438,left_val:0.4406126141548157},{features:[[0,3,2,6,-1.],[0,5,2,2,3.]],threshold:4.4735497795045376e-003,right_val:0.3301498889923096,left_val:0.5129023790359497},{features:[[11,1,3,1,-1.],[12,1,1,1,3.]],threshold:-2.6652868837118149e-003,right_val:0.5175036191940308,left_val:0.3135471045970917},{features:[[5,0,2,6,-1.],[6,0,1,6,2.]],threshold:1.3666770246345550e-004,right_val:0.5306876897811890,left_val:0.4119370877742767},{features:[[1,1,18,14,-1.],[7,1,6,14,3.]],threshold:-0.0171264503151178,right_val:0.4836578965187073,left_val:0.6177806258201599},{features:[[4,6,8,3,-1.],[8,6,4,3,2.]],threshold:-2.6601430727168918e-004,right_val:0.5169736742973328,left_val:0.3654330968856812},{features:[[9,12,6,2,-1.],[9,12,3,2,2.]],threshold:-0.0229323804378510,right_val:0.5163992047309876,left_val:0.3490915000438690},{features:[[5,12,6,2,-1.],[8,12,3,2,2.]],threshold:2.3316550068557262e-003,right_val:0.3709389865398407,left_val:0.5166299939155579},{features:[[10,7,3,5,-1.],[11,7,1,5,3.]],threshold:0.0169256608933210,right_val:0.8053988218307495,left_val:0.5014736056327820},{features:[[7,7,3,5,-1.],[8,7,1,5,3.]],threshold:-8.9858826249837875e-003,right_val:0.4657020866870880,left_val:0.6470788717269898},{features:[[13,0,3,10,-1.],[14,0,1,10,3.]],threshold:-0.0118746999651194,right_val:0.5258755087852478,left_val:0.3246378898620606},{features:[[4,11,3,2,-1.],[4,12,3,1,2.]],threshold:1.9350569345988333e-004,right_val:0.3839643895626068,left_val:0.5191941857337952},{features:[[17,3,3,6,-1.],[18,3,1,6,3.]],threshold:5.8713490143418312e-003,right_val:0.6187043190002441,left_val:0.4918133914470673},{features:[[1,8,18,10,-1.],[1,13,18,5,2.]],threshold:-0.2483879029750824,right_val:0.4988150000572205,left_val:0.1836802959442139},{features:[[13,0,3,10,-1.],[14,0,1,10,3.]],threshold:0.0122560001909733,right_val:0.3632029891014099,left_val:0.5227053761482239},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:8.3990179700776935e-004,right_val:0.5774148106575012,left_val:0.4490250051021576},{features:[[16,3,3,7,-1.],[17,3,1,7,3.]],threshold:2.5407369248569012e-003,right_val:0.5858299136161804,left_val:0.4804787039756775},{features:[[4,0,3,10,-1.],[5,0,1,10,3.]],threshold:-0.0148224299773574,right_val:0.5023537278175354,left_val:0.2521049976348877},{features:[[16,3,3,7,-1.],[17,3,1,7,3.]],threshold:-5.7973959483206272e-003,right_val:0.4853715002536774,left_val:0.5996695756912231},{features:[[0,9,1,2,-1.],[0,10,1,1,2.]],threshold:7.2662148158997297e-004,right_val:0.3671779930591583,left_val:0.5153716802597046},{features:[[18,1,2,10,-1.],[18,1,1,10,2.]],threshold:-0.0172325801104307,right_val:0.4994656145572662,left_val:0.6621719002723694},{features:[[0,1,2,10,-1.],[1,1,1,10,2.]],threshold:7.8624086454510689e-003,right_val:0.6256101727485657,left_val:0.4633395075798035},{features:[[10,16,3,4,-1.],[11,16,1,4,3.]],threshold:-4.7343620099127293e-003,right_val:0.5281885266304016,left_val:0.3615573048591614},{features:[[2,8,3,3,-1.],[3,8,1,3,3.]],threshold:8.3048478700220585e-004,right_val:0.5550957918167114,left_val:0.4442889094352722},{features:[[11,0,2,6,-1.],[12,0,1,3,2.],[11,3,1,3,2.]],threshold:7.6602199114859104e-003,right_val:0.2613354921340942,left_val:0.5162935256958008},{features:[[7,0,2,6,-1.],[7,0,1,3,2.],[8,3,1,3,2.]],threshold:-4.1048377752304077e-003,right_val:0.5019031763076782,left_val:0.2789632081985474},{features:[[16,3,3,7,-1.],[17,3,1,7,3.]],threshold:4.8512578941881657e-003,right_val:0.5661668181419373,left_val:0.4968984127044678},{features:[[1,3,3,7,-1.],[2,3,1,7,3.]],threshold:9.9896453320980072e-004,right_val:0.5551813244819641,left_val:0.4445607960224152},{features:[[14,1,6,16,-1.],[16,1,2,16,3.]],threshold:-0.2702363133430481,right_val:0.5151314139366150,left_val:0.0293882098048925},{features:[[0,1,6,16,-1.],[2,1,2,16,3.]],threshold:-0.0130906803533435,right_val:0.4447459876537323,left_val:0.5699399709701538},{features:[[2,0,16,8,-1.],[10,0,8,4,2.],[2,4,8,4,2.]],threshold:-9.4342790544033051e-003,right_val:0.5487895011901856,left_val:0.4305466115474701},{features:[[6,8,5,3,-1.],[6,9,5,1,3.]],threshold:-1.5482039889320731e-003,right_val:0.5128080844879150,left_val:0.3680317103862763},{features:[[9,7,3,3,-1.],[10,7,1,3,3.]],threshold:5.3746132180094719e-003,right_val:0.6101555824279785,left_val:0.4838916957378388},{features:[[8,8,4,3,-1.],[8,9,4,1,3.]],threshold:1.5786769799888134e-003,right_val:0.4118548035621643,left_val:0.5325223207473755},{features:[[9,6,2,4,-1.],[9,6,1,4,2.]],threshold:3.6856050137430429e-003,right_val:0.6252303123474121,left_val:0.4810948073863983},{features:[[0,7,15,1,-1.],[5,7,5,1,3.]],threshold:9.3887019902467728e-003,right_val:0.3629410862922669,left_val:0.5200229883193970},{features:[[8,2,7,9,-1.],[8,5,7,3,3.]],threshold:0.0127926301211119,right_val:0.6738016009330750,left_val:0.4961709976196289},{features:[[1,7,16,4,-1.],[1,7,8,2,2.],[9,9,8,2,2.]],threshold:-3.3661040943115950e-003,right_val:0.5283598899841309,left_val:0.4060279130935669},{features:[[6,12,8,2,-1.],[6,13,8,1,2.]],threshold:3.9771420415490866e-004,right_val:0.5900775194168091,left_val:0.4674113988876343},{features:[[8,11,3,3,-1.],[8,12,3,1,3.]],threshold:1.4868030557408929e-003,right_val:0.6082053780555725,left_val:0.4519116878509522},{features:[[4,5,14,10,-1.],[11,5,7,5,2.],[4,10,7,5,2.]],threshold:-0.0886867493391037,right_val:0.5180991888046265,left_val:0.2807899117469788},{features:[[4,12,3,2,-1.],[4,13,3,1,2.]],threshold:-7.4296112870797515e-005,right_val:0.4087625145912170,left_val:0.5295584201812744},{features:[[9,11,6,1,-1.],[11,11,2,1,3.]],threshold:-1.4932939848222304e-005,right_val:0.4538542926311493,left_val:0.5461400151252747},{features:[[4,9,7,6,-1.],[4,11,7,2,3.]],threshold:5.9162238612771034e-003,right_val:0.4192134141921997,left_val:0.5329161286354065},{features:[[7,10,6,3,-1.],[7,11,6,1,3.]],threshold:1.1141640134155750e-003,right_val:0.5706217288970947,left_val:0.4512017965316773},{features:[[9,11,2,2,-1.],[9,12,2,1,2.]],threshold:8.9249362645205110e-005,right_val:0.5897638201713562,left_val:0.4577805995941162},{features:[[0,5,20,6,-1.],[0,7,20,2,3.]],threshold:2.5319510605186224e-003,right_val:0.3357639014720917,left_val:0.5299603939056397},{features:[[6,4,6,1,-1.],[8,4,2,1,3.]],threshold:0.0124262003228068,right_val:0.1346601992845535,left_val:0.4959059059619904},{features:[[9,11,6,1,-1.],[11,11,2,1,3.]],threshold:0.0283357501029968,right_val:6.1043637106195092e-004,left_val:0.5117079019546509},{features:[[5,11,6,1,-1.],[7,11,2,1,3.]],threshold:6.6165882162749767e-003,right_val:0.7011628150939941,left_val:0.4736349880695343},{features:[[10,16,3,4,-1.],[11,16,1,4,3.]],threshold:8.0468766391277313e-003,right_val:0.3282819986343384,left_val:0.5216417908668518},{features:[[8,7,3,3,-1.],[9,7,1,3,3.]],threshold:-1.1193980462849140e-003,right_val:0.4563739001750946,left_val:0.5809860825538635},{features:[[2,12,16,8,-1.],[2,16,16,4,2.]],threshold:0.0132775902748108,right_val:0.4103901088237763,left_val:0.5398362278938294},{features:[[0,15,15,2,-1.],[0,16,15,1,2.]],threshold:4.8794739996083081e-004,right_val:0.5410590767860413,left_val:0.4249286055564880},{features:[[15,4,5,6,-1.],[15,6,5,2,3.]],threshold:0.0112431701272726,right_val:0.3438215851783752,left_val:0.5269963741302490},{features:[[9,5,2,4,-1.],[10,5,1,4,2.]],threshold:-8.9896668214350939e-004,right_val:0.4456613063812256,left_val:0.5633075833320618},{features:[[8,10,9,6,-1.],[8,12,9,2,3.]],threshold:6.6677159629762173e-003,right_val:0.4362679123878479,left_val:0.5312889218330383},{features:[[2,19,15,1,-1.],[7,19,5,1,3.]],threshold:0.0289472993463278,right_val:0.6575797796249390,left_val:0.4701794981956482},{features:[[10,16,3,4,-1.],[11,16,1,4,3.]],threshold:-0.0234000496566296,right_val:0.5137398838996887,left_val:0.},{features:[[0,15,20,4,-1.],[0,17,20,2,2.]],threshold:-0.0891170501708984,right_val:0.4942430853843689,left_val:0.0237452797591686},{features:[[10,16,3,4,-1.],[11,16,1,4,3.]],threshold:-0.0140546001493931,right_val:0.5117511153221130,left_val:0.3127323091030121},{features:[[7,16,3,4,-1.],[8,16,1,4,3.]],threshold:8.1239398568868637e-003,right_val:0.2520025968551636,left_val:0.5009049177169800},{features:[[9,16,3,3,-1.],[9,17,3,1,3.]],threshold:-4.9964650534093380e-003,right_val:0.4927811920642853,left_val:0.6387143731117249},{features:[[8,11,4,6,-1.],[8,14,4,3,2.]],threshold:3.1253970228135586e-003,right_val:0.3680452108383179,left_val:0.5136849880218506},{features:[[9,6,2,12,-1.],[9,10,2,4,3.]],threshold:6.7669642157852650e-003,right_val:0.4363631904125214,left_val:0.5509843826293945},{features:[[8,17,4,3,-1.],[8,18,4,1,3.]],threshold:-2.3711440153419971e-003,right_val:0.4586946964263916,left_val:0.6162335276603699},{features:[[9,18,8,2,-1.],[13,18,4,1,2.],[9,19,4,1,2.]],threshold:-5.3522791713476181e-003,right_val:0.4920490980148315,left_val:0.6185457706451416},{features:[[1,18,8,2,-1.],[1,19,8,1,2.]],threshold:-0.0159688591957092,right_val:0.4983252882957459,left_val:0.1382617950439453},{features:[[13,5,6,15,-1.],[15,5,2,15,3.]],threshold:4.7676060348749161e-003,right_val:0.5490046143531799,left_val:0.4688057899475098},{features:[[9,8,2,2,-1.],[9,9,2,1,2.]],threshold:-2.4714691098779440e-003,right_val:0.5003952980041504,left_val:0.2368514984846115},{features:[[9,5,2,3,-1.],[9,5,1,3,2.]],threshold:-7.1033788844943047e-004,right_val:0.4721533060073853,left_val:0.5856394171714783},{features:[[1,5,6,15,-1.],[3,5,2,15,3.]],threshold:-0.1411755979061127,right_val:0.4961591064929962,left_val:0.0869000628590584},{features:[[4,1,14,8,-1.],[11,1,7,4,2.],[4,5,7,4,2.]],threshold:0.1065180972218514,right_val:0.1741005033254623,left_val:0.5138837099075317},{features:[[2,4,4,16,-1.],[2,4,2,8,2.],[4,12,2,8,2.]],threshold:-0.0527447499334812,right_val:0.4772881865501404,left_val:0.7353636026382446},{features:[[12,4,3,12,-1.],[12,10,3,6,2.]],threshold:-4.7431760467588902e-003,right_val:0.5292701721191406,left_val:0.3884406089782715},{features:[[4,5,10,12,-1.],[4,5,5,6,2.],[9,11,5,6,2.]],threshold:9.9676765967160463e-004,right_val:0.4003424048423767,left_val:0.5223492980003357},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:8.0284131690859795e-003,right_val:0.7212964296340942,left_val:0.4959106147289276},{features:[[5,4,2,3,-1.],[5,5,2,1,3.]],threshold:8.6025858763605356e-004,right_val:0.5538476109504700,left_val:0.4444884061813355},{features:[[12,2,4,10,-1.],[14,2,2,5,2.],[12,7,2,5,2.]],threshold:9.3191501218825579e-004,right_val:0.4163244068622589,left_val:0.5398371219635010},{features:[[6,4,7,3,-1.],[6,5,7,1,3.]],threshold:-2.5082060601562262e-003,right_val:0.4562500119209290,left_val:0.5854265093803406},{features:[[2,0,18,2,-1.],[11,0,9,1,2.],[2,1,9,1,2.]],threshold:-2.1378761157393456e-003,right_val:0.5280259251594544,left_val:0.4608069062232971},{features:[[0,0,18,2,-1.],[0,0,9,1,2.],[9,1,9,1,2.]],threshold:-2.1546049974858761e-003,right_val:0.5255997180938721,left_val:0.3791126906871796},{features:[[13,13,4,6,-1.],[15,13,2,3,2.],[13,16,2,3,2.]],threshold:-7.6214009895920753e-003,right_val:0.4952073991298676,left_val:0.5998609066009522},{features:[[3,13,4,6,-1.],[3,13,2,3,2.],[5,16,2,3,2.]],threshold:2.2055360022932291e-003,right_val:0.5588530898094177,left_val:0.4484206140041351},{features:[[10,12,2,6,-1.],[10,15,2,3,2.]],threshold:1.2586950324475765e-003,right_val:0.4423840939998627,left_val:0.5450747013092041},{features:[[5,9,10,10,-1.],[5,9,5,5,2.],[10,14,5,5,2.]],threshold:-5.0926720723509789e-003,right_val:0.5263035893440247,left_val:0.4118275046348572},{features:[[11,4,4,2,-1.],[13,4,2,1,2.],[11,5,2,1,2.]],threshold:-2.5095739401876926e-003,right_val:0.4998494982719421,left_val:0.5787907838821411},{features:[[7,12,6,8,-1.],[10,12,3,8,2.]],threshold:-0.0773275569081306,right_val:0.4811120033264160,left_val:0.8397865891456604},{features:[[12,2,4,10,-1.],[14,2,2,5,2.],[12,7,2,5,2.]],threshold:-0.0414858199656010,right_val:0.5176993012428284,left_val:0.2408611029386520},{features:[[8,11,2,1,-1.],[9,11,1,1,2.]],threshold:1.0355669655837119e-004,right_val:0.5417054295539856,left_val:0.4355360865592957},{features:[[10,5,1,12,-1.],[10,9,1,4,3.]],threshold:1.3255809899419546e-003,right_val:0.4894095063209534,left_val:0.5453971028327942},{features:[[0,11,6,9,-1.],[3,11,3,9,2.]],threshold:-8.0598732456564903e-003,right_val:0.4577918946743012,left_val:0.5771024227142334},{features:[[12,2,4,10,-1.],[14,2,2,5,2.],[12,7,2,5,2.]],threshold:0.0190586205571890,right_val:0.3400475084781647,left_val:0.5169867873191834},{features:[[4,2,4,10,-1.],[4,2,2,5,2.],[6,7,2,5,2.]],threshold:-0.0350578911602497,right_val:0.5000503063201904,left_val:0.2203243970870972},{features:[[11,4,4,2,-1.],[13,4,2,1,2.],[11,5,2,1,2.]],threshold:5.7296059094369411e-003,right_val:0.6597570776939392,left_val:0.5043408274650574},{features:[[0,14,6,3,-1.],[0,15,6,1,3.]],threshold:-0.0116483299061656,right_val:0.4996652901172638,left_val:0.2186284959316254},{features:[[11,4,4,2,-1.],[13,4,2,1,2.],[11,5,2,1,2.]],threshold:1.4544479781761765e-003,right_val:0.5503727793693543,left_val:0.5007681846618652},{features:[[6,1,3,2,-1.],[7,1,1,2,3.]],threshold:-2.5030909455381334e-004,right_val:0.5241670012474060,left_val:0.4129841029644013},{features:[[11,4,4,2,-1.],[13,4,2,1,2.],[11,5,2,1,2.]],threshold:-8.2907272735610604e-004,right_val:0.4974496066570282,left_val:0.5412868261337280},{features:[[5,4,4,2,-1.],[5,4,2,1,2.],[7,5,2,1,2.]],threshold:1.0862209601327777e-003,right_val:0.5879228711128235,left_val:0.4605529904365540},{features:[[13,0,2,12,-1.],[14,0,1,6,2.],[13,6,1,6,2.]],threshold:2.0000500080641359e-004,right_val:0.4705209136009216,left_val:0.5278854966163635},{features:[[6,0,3,10,-1.],[7,0,1,10,3.]],threshold:2.9212920926511288e-003,right_val:0.3755536973476410,left_val:0.5129609704017639},{features:[[3,0,17,8,-1.],[3,4,17,4,2.]],threshold:0.0253874007612467,right_val:0.5790768265724182,left_val:0.4822691977024078},{features:[[0,4,20,4,-1.],[0,6,20,2,2.]],threshold:-3.1968469265848398e-003,right_val:0.3962840139865875,left_val:0.5248395204544067}],threshold:87.6960296630859380},{simpleClassifiers:[{features:[[0,3,8,2,-1.],[4,3,4,2,2.]],threshold:5.8031738735735416e-003,right_val:0.5961983203887940,left_val:0.3498983979225159},{features:[[8,11,4,3,-1.],[8,12,4,1,3.]],threshold:-9.0003069490194321e-003,right_val:0.4478552043437958,left_val:0.6816636919975281},{features:[[5,7,6,4,-1.],[5,7,3,2,2.],[8,9,3,2,2.]],threshold:-1.1549659539014101e-003,right_val:0.3578251004219055,left_val:0.5585706233978272},{features:[[8,3,4,9,-1.],[8,6,4,3,3.]],threshold:-1.1069850297644734e-003,right_val:0.3050428032875061,left_val:0.5365036129951477},{features:[[8,15,1,4,-1.],[8,17,1,2,2.]],threshold:1.0308309720130637e-004,right_val:0.5344635844230652,left_val:0.3639095127582550},{features:[[4,5,12,7,-1.],[8,5,4,7,3.]],threshold:-5.0984839908778667e-003,right_val:0.5504264831542969,left_val:0.2859157025814056},{features:[[4,2,4,10,-1.],[4,2,2,5,2.],[6,7,2,5,2.]],threshold:8.2572200335562229e-004,right_val:0.3476041853427887,left_val:0.5236523747444153},{features:[[3,0,17,2,-1.],[3,1,17,1,2.]],threshold:9.9783325567841530e-003,right_val:0.6219646930694580,left_val:0.4750322103500366},{features:[[2,2,16,15,-1.],[2,7,16,5,3.]],threshold:-0.0374025292694569,right_val:0.5278062820434570,left_val:0.3343375921249390},{features:[[15,2,5,2,-1.],[15,3,5,1,2.]],threshold:4.8548257909715176e-003,right_val:0.3700444102287293,left_val:0.5192180871963501},{features:[[9,3,2,2,-1.],[10,3,1,2,2.]],threshold:-1.8664470408111811e-003,right_val:0.5091944932937622,left_val:0.2929843962192535},{features:[[4,5,16,15,-1.],[4,10,16,5,3.]],threshold:0.0168888904154301,right_val:0.5431225895881653,left_val:0.3686845898628235},{features:[[7,13,5,6,-1.],[7,16,5,3,2.]],threshold:-5.8372621424496174e-003,right_val:0.5221335887908936,left_val:0.3632183969020844},{features:[[10,7,3,2,-1.],[11,7,1,2,3.]],threshold:-1.4713739510625601e-003,right_val:0.4700650870800018,left_val:0.5870683789253235},{features:[[8,3,3,1,-1.],[9,3,1,1,3.]],threshold:-1.1522950371727347e-003,right_val:0.5140954256057739,left_val:0.3195894956588745},{features:[[9,16,3,3,-1.],[9,17,3,1,3.]],threshold:-4.2560300789773464e-003,right_val:0.4814921021461487,left_val:0.6301859021186829},{features:[[0,2,5,2,-1.],[0,3,5,1,2.]],threshold:-6.7378291860222816e-003,right_val:0.5025808215141296,left_val:0.1977048069238663},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:0.0113826701417565,right_val:0.6867045760154724,left_val:0.4954132139682770},{features:[[1,7,12,1,-1.],[5,7,4,1,3.]],threshold:5.1794708706438541e-003,right_val:0.3350647985935211,left_val:0.5164427757263184},{features:[[7,5,6,14,-1.],[7,12,6,7,2.]],threshold:-0.1174378991127014,right_val:0.5234413743019104,left_val:0.2315246015787125},{features:[[0,0,8,10,-1.],[0,0,4,5,2.],[4,5,4,5,2.]],threshold:0.0287034492939711,right_val:0.6722521185874939,left_val:0.4664297103881836},{features:[[9,1,3,2,-1.],[10,1,1,2,3.]],threshold:4.8231030814349651e-003,right_val:0.2723532915115356,left_val:0.5220875144004822},{features:[[8,1,3,2,-1.],[9,1,1,2,3.]],threshold:2.6798530016094446e-003,right_val:0.2906948924064636,left_val:0.5079277157783508},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:8.0504082143306732e-003,right_val:0.6395021080970764,left_val:0.4885950982570648},{features:[[7,4,6,16,-1.],[7,12,6,8,2.]],threshold:4.8054959625005722e-003,right_val:0.3656663894653320,left_val:0.5197256803512573},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:-2.2420159075409174e-003,right_val:0.4763701856136322,left_val:0.6153467893600464},{features:[[2,3,2,6,-1.],[2,5,2,2,3.]],threshold:-0.0137577103450894,right_val:0.5030903220176697,left_val:0.2637344896793366},{features:[[14,2,6,9,-1.],[14,5,6,3,3.]],threshold:-0.1033829972147942,right_val:0.5182461142539978,left_val:0.2287521958351135},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:-9.4432085752487183e-003,right_val:0.4694949090480804,left_val:0.6953303813934326},{features:[[9,17,3,2,-1.],[10,17,1,2,3.]],threshold:8.0271181650459766e-004,right_val:0.4268783926963806,left_val:0.5450655221939087},{features:[[5,5,2,3,-1.],[5,6,2,1,3.]],threshold:-4.1945669800043106e-003,right_val:0.4571642875671387,left_val:0.6091387867927551},{features:[[13,11,3,6,-1.],[13,13,3,2,3.]],threshold:0.0109422104433179,right_val:0.3284547030925751,left_val:0.5241063237190247},{features:[[3,14,2,6,-1.],[3,17,2,3,2.]],threshold:-5.7841069065034389e-004,right_val:0.4179368913173676,left_val:0.5387929081916809},{features:[[14,3,6,2,-1.],[14,4,6,1,2.]],threshold:-2.0888620056211948e-003,right_val:0.5301715731620789,left_val:0.4292691051959992},{features:[[0,8,16,2,-1.],[0,9,16,1,2.]],threshold:3.2383969519287348e-003,right_val:0.5220744013786316,left_val:0.3792347908020020},{features:[[14,3,6,2,-1.],[14,4,6,1,2.]],threshold:4.9075027927756310e-003,right_val:0.4126757979393005,left_val:0.5237283110618591},{features:[[0,0,5,6,-1.],[0,2,5,2,3.]],threshold:-0.0322779417037964,right_val:0.4994502067565918,left_val:0.1947655975818634},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:-8.9711230248212814e-003,right_val:0.4929032027721405,left_val:0.6011285185813904},{features:[[4,11,3,6,-1.],[4,13,3,2,3.]],threshold:0.0153210898861289,right_val:0.2039822041988373,left_val:0.5009753704071045},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:2.0855569746345282e-003,right_val:0.5721694827079773,left_val:0.4862189888954163},{features:[[9,5,1,3,-1.],[9,6,1,1,3.]],threshold:5.0615021027624607e-003,right_val:0.1801805943250656,left_val:0.5000218749046326},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:-3.7174751050770283e-003,right_val:0.4897592961788178,left_val:0.5530117154121399},{features:[[6,6,8,12,-1.],[6,12,8,6,2.]],threshold:-0.0121705001220107,right_val:0.5383723974227905,left_val:0.4178605973720551},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:4.6248398721218109e-003,right_val:0.5761327147483826,left_val:0.4997169971466065},{features:[[5,12,9,2,-1.],[8,12,3,2,3.]],threshold:-2.1040429419372231e-004,right_val:0.4097681045532227,left_val:0.5331807136535645},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:-0.0146417804062366,right_val:0.5051776170730591,left_val:0.5755925178527832},{features:[[4,5,4,3,-1.],[4,6,4,1,3.]],threshold:3.3199489116668701e-003,right_val:0.6031805872917175,left_val:0.4576976895332336},{features:[[6,6,9,2,-1.],[9,6,3,2,3.]],threshold:3.7236879579722881e-003,right_val:0.5415883064270020,left_val:0.4380396902561188},{features:[[4,11,1,3,-1.],[4,12,1,1,3.]],threshold:8.2951161311939359e-004,right_val:0.3702219128608704,left_val:0.5163031816482544},{features:[[14,12,6,6,-1.],[14,12,3,6,2.]],threshold:-0.0114084901288152,right_val:0.4862565100193024,left_val:0.6072946786880493},{features:[[7,0,3,7,-1.],[8,0,1,7,3.]],threshold:-4.5320121571421623e-003,right_val:0.5088962912559509,left_val:0.3292475938796997},{features:[[9,8,3,3,-1.],[10,8,1,3,3.]],threshold:5.1276017911732197e-003,right_val:0.6122708916664124,left_val:0.4829767942428589},{features:[[8,8,3,3,-1.],[9,8,1,3,3.]],threshold:9.8583158105611801e-003,right_val:0.6556177139282227,left_val:0.4660679996013641},{features:[[5,10,11,3,-1.],[5,11,11,1,3.]],threshold:0.0369859188795090,right_val:0.1690472066402435,left_val:0.5204849243164063},{features:[[5,7,10,1,-1.],[10,7,5,1,2.]],threshold:4.6491161920130253e-003,right_val:0.3725225031375885,left_val:0.5167322158813477},{features:[[9,7,3,2,-1.],[10,7,1,2,3.]],threshold:-4.2664702050387859e-003,right_val:0.4987342953681946,left_val:0.6406493186950684},{features:[[8,7,3,2,-1.],[9,7,1,2,3.]],threshold:-4.7956590424291790e-004,right_val:0.4464873969554901,left_val:0.5897293090820313},{features:[[11,9,4,2,-1.],[11,9,2,2,2.]],threshold:3.6827160511165857e-003,right_val:0.3472662866115570,left_val:0.5441560745239258},{features:[[5,9,4,2,-1.],[7,9,2,2,2.]],threshold:-0.0100598800927401,right_val:0.5004829764366150,left_val:0.2143162935972214},{features:[[14,10,2,4,-1.],[14,12,2,2,2.]],threshold:-3.0361840617842972e-004,right_val:0.4590323865413666,left_val:0.5386424064636231},{features:[[7,7,3,2,-1.],[8,7,1,2,3.]],threshold:-1.4545479789376259e-003,right_val:0.4497095048427582,left_val:0.5751184225082398},{features:[[14,17,6,3,-1.],[14,18,6,1,3.]],threshold:1.6515209572389722e-003,right_val:0.4238520860671997,left_val:0.5421937704086304},{features:[[4,5,12,12,-1.],[4,5,6,6,2.],[10,11,6,6,2.]],threshold:-7.8468639403581619e-003,right_val:0.5258157253265381,left_val:0.4077920913696289},{features:[[6,9,8,8,-1.],[10,9,4,4,2.],[6,13,4,4,2.]],threshold:-5.1259850151836872e-003,right_val:0.5479453206062317,left_val:0.4229275882244110},{features:[[0,4,15,4,-1.],[5,4,5,4,3.]],threshold:-0.0368909612298012,right_val:0.4674678146839142,left_val:0.6596375703811646},{features:[[13,2,4,1,-1.],[13,2,2,1,2.]],threshold:2.4035639944486320e-004,right_val:0.5573202967643738,left_val:0.4251135885715485},{features:[[4,12,2,2,-1.],[4,13,2,1,2.]],threshold:-1.5150169929256663e-005,right_val:0.4074114859104157,left_val:0.5259246826171875},{features:[[8,13,4,3,-1.],[8,14,4,1,3.]],threshold:2.2108471021056175e-003,right_val:0.5886352062225342,left_val:0.4671722948551178},{features:[[9,13,2,3,-1.],[9,14,2,1,3.]],threshold:-1.1568620102480054e-003,right_val:0.4487161934375763,left_val:0.5711066126823425},{features:[[13,11,2,3,-1.],[13,12,2,1,3.]],threshold:4.9996292218565941e-003,right_val:0.2898327112197876,left_val:0.5264198184013367},{features:[[7,12,4,4,-1.],[7,12,2,2,2.],[9,14,2,2,2.]],threshold:-1.4656189596280456e-003,right_val:0.5197871923446655,left_val:0.3891738057136536},{features:[[10,11,2,2,-1.],[11,11,1,1,2.],[10,12,1,1,2.]],threshold:-1.1975039960816503e-003,right_val:0.4927955865859985,left_val:0.5795872807502747},{features:[[8,17,3,2,-1.],[9,17,1,2,3.]],threshold:-4.4954330660402775e-003,right_val:0.5012555122375488,left_val:0.2377603054046631},{features:[[10,11,2,2,-1.],[11,11,1,1,2.],[10,12,1,1,2.]],threshold:1.4997160178609192e-004,right_val:0.5617607831954956,left_val:0.4876626133918762},{features:[[0,17,6,3,-1.],[0,18,6,1,3.]],threshold:2.6391509454697371e-003,right_val:0.3765509128570557,left_val:0.5168088078498840},{features:[[10,11,2,2,-1.],[11,11,1,1,2.],[10,12,1,1,2.]],threshold:-2.9368131072260439e-004,right_val:0.4874630868434906,left_val:0.5446649193763733},{features:[[8,11,2,2,-1.],[8,11,1,1,2.],[9,12,1,1,2.]],threshold:1.4211760135367513e-003,right_val:0.6691331863403320,left_val:0.4687897861003876},{features:[[12,5,8,4,-1.],[12,5,4,4,2.]],threshold:0.0794276371598244,right_val:0.2732945978641510,left_val:0.5193443894386292},{features:[[0,5,8,4,-1.],[4,5,4,4,2.]],threshold:0.0799375027418137,right_val:0.1782083958387375,left_val:0.4971731007099152},{features:[[13,2,4,1,-1.],[13,2,2,1,2.]],threshold:0.0110892597585917,right_val:0.3209475874900818,left_val:0.5165994763374329},{features:[[3,2,4,1,-1.],[5,2,2,1,2.]],threshold:1.6560709627810866e-004,right_val:0.5307276248931885,left_val:0.4058471918106079},{features:[[10,0,4,2,-1.],[12,0,2,1,2.],[10,1,2,1,2.]],threshold:-5.3354292176663876e-003,right_val:0.5158129930496216,left_val:0.3445056974887848},{features:[[7,12,3,1,-1.],[8,12,1,1,3.]],threshold:1.1287260567769408e-003,right_val:0.6075533032417297,left_val:0.4594863057136536},{features:[[8,11,4,8,-1.],[10,11,2,4,2.],[8,15,2,4,2.]],threshold:-0.0219692196696997,right_val:0.5228595733642578,left_val:0.1680400967597961},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-2.1775320055894554e-004,right_val:0.5215672850608826,left_val:0.3861596882343292},{features:[[3,18,15,2,-1.],[3,19,15,1,2.]],threshold:2.0200149447191507e-004,right_val:0.4363039135932922,left_val:0.5517979264259338},{features:[[2,6,2,12,-1.],[2,6,1,6,2.],[3,12,1,6,2.]],threshold:-0.0217331498861313,right_val:0.4789851009845734,left_val:0.7999460101127625},{features:[[9,8,2,3,-1.],[9,9,2,1,3.]],threshold:-8.4399932529777288e-004,right_val:0.5374773144721985,left_val:0.4085975885391235},{features:[[7,10,3,2,-1.],[8,10,1,2,3.]],threshold:-4.3895249837078154e-004,right_val:0.4366143047809601,left_val:0.5470405220985413},{features:[[11,11,3,1,-1.],[12,11,1,1,3.]],threshold:1.5092400135472417e-003,right_val:0.5842149257659912,left_val:0.4988996982574463},{features:[[6,11,3,1,-1.],[7,11,1,1,3.]],threshold:-3.5547839943319559e-003,right_val:0.4721005856990814,left_val:0.6753690242767334},{features:[[9,2,4,2,-1.],[11,2,2,1,2.],[9,3,2,1,2.]],threshold:4.8191400128416717e-004,right_val:0.4357109069824219,left_val:0.5415853857994080},{features:[[4,12,2,3,-1.],[4,13,2,1,3.]],threshold:-6.0264398343861103e-003,right_val:0.4991880953311920,left_val:0.2258509993553162},{features:[[2,1,18,3,-1.],[8,1,6,3,3.]],threshold:-0.0116681400686502,right_val:0.4927498996257782,left_val:0.6256554722785950},{features:[[5,1,4,14,-1.],[7,1,2,14,2.]],threshold:-2.8718370012938976e-003,right_val:0.5245801806449890,left_val:0.3947784900665283},{features:[[8,16,12,3,-1.],[8,16,6,3,2.]],threshold:0.0170511696487665,right_val:0.5794224143028259,left_val:0.4752511084079742},{features:[[1,17,18,3,-1.],[7,17,6,3,3.]],threshold:-0.0133520802482963,right_val:0.4544535875320435,left_val:0.6041104793548584},{features:[[9,14,2,6,-1.],[9,17,2,3,2.]],threshold:-3.9301801007241011e-004,right_val:0.5544905066490173,left_val:0.4258275926113129},{features:[[9,12,1,8,-1.],[9,16,1,4,2.]],threshold:3.0483349692076445e-003,right_val:0.3780272901058197,left_val:0.5233420133590698},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:-4.3579288758337498e-003,right_val:0.4838674068450928,left_val:0.6371889114379883},{features:[[9,6,2,12,-1.],[9,10,2,4,3.]],threshold:5.6661018170416355e-003,right_val:0.4163666069507599,left_val:0.5374705791473389},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:6.0677339206449687e-005,right_val:0.5311625003814697,left_val:0.4638795852661133},{features:[[0,1,4,8,-1.],[2,1,2,8,2.]],threshold:0.0367381609976292,right_val:0.6466524004936218,left_val:0.4688656032085419},{features:[[9,1,6,2,-1.],[12,1,3,1,2.],[9,2,3,1,2.]],threshold:8.6528137326240540e-003,right_val:0.2188657969236374,left_val:0.5204318761825562},{features:[[1,3,12,14,-1.],[1,10,12,7,2.]],threshold:-0.1537135988473892,right_val:0.4958840012550354,left_val:0.1630371958017349},{features:[[8,12,4,2,-1.],[10,12,2,1,2.],[8,13,2,1,2.]],threshold:-4.1560421232134104e-004,right_val:0.4696458876132965,left_val:0.5774459242820740},{features:[[1,9,10,2,-1.],[1,9,5,1,2.],[6,10,5,1,2.]],threshold:-1.2640169588848948e-003,right_val:0.5217198133468628,left_val:0.3977175951004028},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:-3.5473341122269630e-003,right_val:0.4808315038681030,left_val:0.6046528220176697},{features:[[6,8,8,3,-1.],[6,9,8,1,3.]],threshold:3.0019069527043030e-005,right_val:0.5228201150894165,left_val:0.3996723890304565},{features:[[9,15,5,3,-1.],[9,16,5,1,3.]],threshold:1.3113019522279501e-003,right_val:0.5765997767448425,left_val:0.4712158143520355},{features:[[8,7,4,3,-1.],[8,8,4,1,3.]],threshold:-1.3374709524214268e-003,right_val:0.5253170132637024,left_val:0.4109584987163544},{features:[[7,7,6,2,-1.],[7,8,6,1,2.]],threshold:0.0208767093718052,right_val:0.1757981926202774,left_val:0.5202993750572205},{features:[[5,7,8,2,-1.],[5,7,4,1,2.],[9,8,4,1,2.]],threshold:-7.5497948564589024e-003,right_val:0.4694975018501282,left_val:0.6566609740257263},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:0.0241885501891375,right_val:0.3370220959186554,left_val:0.5128673911094666},{features:[[4,7,4,2,-1.],[4,8,4,1,2.]],threshold:-2.9358828905969858e-003,right_val:0.4694541096687317,left_val:0.6580786705017090},{features:[[14,2,6,9,-1.],[14,5,6,3,3.]],threshold:0.0575579293072224,right_val:0.2775259912014008,left_val:0.5146445035934448},{features:[[4,9,3,3,-1.],[5,9,1,3,3.]],threshold:-1.1343370424583554e-003,right_val:0.5192667245864868,left_val:0.3836601972579956},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:0.0168169997632504,right_val:0.6177260875701904,left_val:0.5085592865943909},{features:[[0,2,6,9,-1.],[0,5,6,3,3.]],threshold:5.0535178743302822e-003,right_val:0.3684791922569275,left_val:0.5138763189315796},{features:[[17,3,3,6,-1.],[18,3,1,6,3.]],threshold:-4.5874710194766521e-003,right_val:0.4835202097892761,left_val:0.5989655256271362},{features:[[0,3,3,6,-1.],[1,3,1,6,3.]],threshold:1.6882460331544280e-003,right_val:0.5723056793212891,left_val:0.4509486854076386},{features:[[17,14,1,2,-1.],[17,15,1,1,2.]],threshold:-1.6554000321775675e-003,right_val:0.5243319272994995,left_val:0.3496770858764648},{features:[[4,9,4,3,-1.],[6,9,2,3,2.]],threshold:-0.0193738006055355,right_val:0.4968712925910950,left_val:0.1120536997914314},{features:[[12,9,3,3,-1.],[12,10,3,1,3.]],threshold:0.0103744501248002,right_val:0.4395213127136231,left_val:0.5148196816444397},{features:[[5,9,3,3,-1.],[5,10,3,1,3.]],threshold:1.4973050565458834e-004,right_val:0.5269886851310730,left_val:0.4084999859333038},{features:[[9,5,6,8,-1.],[12,5,3,4,2.],[9,9,3,4,2.]],threshold:-0.0429819300770760,right_val:0.5018504261970520,left_val:0.6394104957580566},{features:[[5,5,6,8,-1.],[5,5,3,4,2.],[8,9,3,4,2.]],threshold:8.3065936341881752e-003,right_val:0.6698353290557861,left_val:0.4707553982734680},{features:[[16,1,4,6,-1.],[16,4,4,3,2.]],threshold:-4.1285790503025055e-003,right_val:0.5323647260665894,left_val:0.4541369080543518},{features:[[1,0,6,20,-1.],[3,0,2,20,3.]],threshold:1.7399420030415058e-003,right_val:0.5439866185188294,left_val:0.4333961904048920},{features:[[12,11,3,2,-1.],[13,11,1,2,3.]],threshold:1.1739750334527344e-004,right_val:0.5543426275253296,left_val:0.4579687118530273},{features:[[5,11,3,2,-1.],[6,11,1,2,3.]],threshold:1.8585780344437808e-004,right_val:0.5426754951477051,left_val:0.4324643909931183},{features:[[9,4,6,1,-1.],[11,4,2,1,3.]],threshold:5.5587692186236382e-003,right_val:0.3550611138343811,left_val:0.5257220864295960},{features:[[0,0,8,3,-1.],[4,0,4,3,2.]],threshold:-7.9851560294628143e-003,right_val:0.4630635976791382,left_val:0.6043018102645874},{features:[[15,0,2,5,-1.],[15,0,1,5,2.]],threshold:6.0594122624024749e-004,right_val:0.5533195137977600,left_val:0.4598254859447479},{features:[[4,1,3,2,-1.],[5,1,1,2,3.]],threshold:-2.2983040253166109e-004,right_val:0.5322461128234863,left_val:0.4130752086639404},{features:[[7,0,6,15,-1.],[9,0,2,15,3.]],threshold:4.3740210821852088e-004,right_val:0.5409289002418518,left_val:0.4043039977550507},{features:[[6,11,3,1,-1.],[7,11,1,1,3.]],threshold:2.9482020181603730e-004,right_val:0.5628852248191834,left_val:0.4494963884353638},{features:[[12,0,3,4,-1.],[13,0,1,4,3.]],threshold:0.0103126596659422,right_val:0.2704316973686218,left_val:0.5177510976791382},{features:[[5,4,6,1,-1.],[7,4,2,1,3.]],threshold:-7.7241109684109688e-003,right_val:0.4980553984642029,left_val:0.1988019049167633},{features:[[12,7,3,2,-1.],[12,8,3,1,2.]],threshold:-4.6797208487987518e-003,right_val:0.5018296241760254,left_val:0.6644750237464905},{features:[[0,1,4,6,-1.],[0,4,4,3,2.]],threshold:-5.0755459815263748e-003,right_val:0.5185269117355347,left_val:0.3898304998874664},{features:[[12,7,3,2,-1.],[12,8,3,1,2.]],threshold:2.2479740437120199e-003,right_val:0.5660336017608643,left_val:0.4801808893680573},{features:[[2,16,3,3,-1.],[2,17,3,1,3.]],threshold:8.3327008178457618e-004,right_val:0.3957188129425049,left_val:0.5210919976234436},{features:[[13,8,6,10,-1.],[16,8,3,5,2.],[13,13,3,5,2.]],threshold:-0.0412793308496475,right_val:0.5007054209709168,left_val:0.6154541969299316},{features:[[0,9,5,2,-1.],[0,10,5,1,2.]],threshold:-5.0930189900100231e-004,right_val:0.5228403806686401,left_val:0.3975942134857178},{features:[[12,11,2,2,-1.],[13,11,1,1,2.],[12,12,1,1,2.]],threshold:1.2568780221045017e-003,right_val:0.5939183235168457,left_val:0.4979138076305389},{features:[[3,15,3,3,-1.],[3,16,3,1,3.]],threshold:8.0048497766256332e-003,right_val:0.1633366048336029,left_val:0.4984497129917145},{features:[[12,7,3,2,-1.],[12,8,3,1,2.]],threshold:-1.1879300000146031e-003,right_val:0.4942624866962433,left_val:0.5904964804649353},{features:[[5,7,3,2,-1.],[5,8,3,1,2.]],threshold:6.1948952497914433e-004,right_val:0.5328726172447205,left_val:0.4199557900428772},{features:[[9,5,9,9,-1.],[9,8,9,3,3.]],threshold:6.6829859279096127e-003,right_val:0.4905889034271240,left_val:0.5418602824211121},{features:[[5,0,3,7,-1.],[6,0,1,7,3.]],threshold:-3.7062340416014194e-003,right_val:0.5138000249862671,left_val:0.3725939095020294},{features:[[5,2,12,5,-1.],[9,2,4,5,3.]],threshold:-0.0397394113242626,right_val:0.5050346851348877,left_val:0.6478961110115051},{features:[[6,11,2,2,-1.],[6,11,1,1,2.],[7,12,1,1,2.]],threshold:1.4085009461268783e-003,right_val:0.6377884149551392,left_val:0.4682339131832123},{features:[[15,15,3,2,-1.],[15,16,3,1,2.]],threshold:3.9322688826359808e-004,right_val:0.4150482118129730,left_val:0.5458530187606812},{features:[[2,15,3,2,-1.],[2,16,3,1,2.]],threshold:-1.8979819724336267e-003,right_val:0.5149704217910767,left_val:0.3690159916877747},{features:[[14,12,6,8,-1.],[17,12,3,4,2.],[14,16,3,4,2.]],threshold:-0.0139704402536154,right_val:0.4811357855796814,left_val:0.6050562858581543},{features:[[2,8,15,6,-1.],[7,8,5,6,3.]],threshold:-0.1010081991553307,right_val:0.4992361962795258,left_val:0.2017080038785934},{features:[[2,2,18,17,-1.],[8,2,6,17,3.]],threshold:-0.0173469204455614,right_val:0.4899486005306244,left_val:0.5713148713111877},{features:[[5,1,4,1,-1.],[7,1,2,1,2.]],threshold:1.5619759506080300e-004,right_val:0.5392642021179199,left_val:0.4215388894081116},{features:[[5,2,12,5,-1.],[9,2,4,5,3.]],threshold:0.1343892961740494,right_val:0.3767612874507904,left_val:0.5136151909828186},{features:[[3,2,12,5,-1.],[7,2,4,5,3.]],threshold:-0.0245822407305241,right_val:0.4747906923294067,left_val:0.7027357816696167},{features:[[4,9,12,4,-1.],[10,9,6,2,2.],[4,11,6,2,2.]],threshold:-3.8553720805794001e-003,right_val:0.5427716970443726,left_val:0.4317409098148346},{features:[[5,15,6,2,-1.],[5,15,3,1,2.],[8,16,3,1,2.]],threshold:-2.3165249731391668e-003,right_val:0.4618647992610931,left_val:0.5942698717117310},{features:[[10,14,2,3,-1.],[10,15,2,1,3.]],threshold:-4.8518120311200619e-003,right_val:0.4884895086288452,left_val:0.6191568970680237},{features:[[0,13,20,2,-1.],[0,13,10,1,2.],[10,14,10,1,2.]],threshold:2.4699938949197531e-003,right_val:0.4017199873924255,left_val:0.5256664752960205},{features:[[4,9,12,8,-1.],[10,9,6,4,2.],[4,13,6,4,2.]],threshold:0.0454969592392445,right_val:0.2685773968696594,left_val:0.5237867832183838},{features:[[8,13,3,6,-1.],[8,16,3,3,2.]],threshold:-0.0203195996582508,right_val:0.4979738891124725,left_val:0.2130445986986160},{features:[[10,12,2,2,-1.],[10,13,2,1,2.]],threshold:2.6994998916052282e-004,right_val:0.5543122291564941,left_val:0.4814041852951050},{features:[[9,12,2,2,-1.],[9,12,1,1,2.],[10,13,1,1,2.]],threshold:-1.8232699949294329e-003,right_val:0.4709989130496979,left_val:0.6482579708099365},{features:[[4,11,14,4,-1.],[11,11,7,2,2.],[4,13,7,2,2.]],threshold:-6.3015790656208992e-003,right_val:0.5306236147880554,left_val:0.4581927955150604},{features:[[8,5,4,2,-1.],[8,6,4,1,2.]],threshold:-2.4139499873854220e-004,right_val:0.4051763117313385,left_val:0.5232086777687073},{features:[[10,10,6,3,-1.],[12,10,2,3,3.]],threshold:-1.0330369696021080e-003,right_val:0.4789193868637085,left_val:0.5556201934814453},{features:[[2,14,1,2,-1.],[2,15,1,1,2.]],threshold:1.8041160365100950e-004,right_val:0.4011810123920441,left_val:0.5229442715644836},{features:[[13,8,6,12,-1.],[16,8,3,6,2.],[13,14,3,6,2.]],threshold:-0.0614078603684902,right_val:0.5010703206062317,left_val:0.6298682093620300},{features:[[1,8,6,12,-1.],[1,8,3,6,2.],[4,14,3,6,2.]],threshold:-0.0695439130067825,right_val:0.4773184061050415,left_val:0.7228280901908875},{features:[[10,0,6,10,-1.],[12,0,2,10,3.]],threshold:-0.0705426633358002,right_val:0.5182529091835022,left_val:0.2269513010978699},{features:[[5,11,8,4,-1.],[5,11,4,2,2.],[9,13,4,2,2.]],threshold:2.4423799477517605e-003,right_val:0.4098151028156281,left_val:0.5237097144126892},{features:[[10,16,8,4,-1.],[14,16,4,2,2.],[10,18,4,2,2.]],threshold:1.5494349645450711e-003,right_val:0.5468043088912964,left_val:0.4773750901222229},{features:[[7,7,6,6,-1.],[9,7,2,6,3.]],threshold:-0.0239142198115587,right_val:0.4783824980258942,left_val:0.7146975994110107},{features:[[10,2,4,10,-1.],[10,2,2,10,2.]],threshold:-0.0124536901712418,right_val:0.5241122841835022,left_val:0.2635296881198883},{features:[[6,1,4,9,-1.],[8,1,2,9,2.]],threshold:-2.0760179904755205e-004,right_val:0.5113608837127686,left_val:0.3623757064342499},{features:[[12,19,2,1,-1.],[12,19,1,1,2.]],threshold:2.9781080229440704e-005,right_val:0.5432801842689514,left_val:0.4705932140350342}],threshold:90.2533493041992190},{simpleClassifiers:[{features:[[1,2,4,9,-1.],[3,2,2,9,2.]],threshold:0.0117727499455214,right_val:0.6421167254447937,left_val:0.3860518932342529},{features:[[7,5,6,4,-1.],[9,5,2,4,3.]],threshold:0.0270375702530146,right_val:0.6754038929939270,left_val:0.4385654926300049},{features:[[9,4,2,4,-1.],[9,6,2,2,2.]],threshold:-3.6419500247575343e-005,right_val:0.3423315882682800,left_val:0.5487101078033447},{features:[[14,5,2,8,-1.],[14,9,2,4,2.]],threshold:1.9995409529656172e-003,right_val:0.5400317907333374,left_val:0.3230532109737396},{features:[[7,6,5,12,-1.],[7,12,5,6,2.]],threshold:4.5278300531208515e-003,right_val:0.2935043871402741,left_val:0.5091639757156372},{features:[[14,6,2,6,-1.],[14,9,2,3,2.]],threshold:4.7890920541249216e-004,right_val:0.5344064235687256,left_val:0.4178153872489929},{features:[[4,6,2,6,-1.],[4,9,2,3,2.]],threshold:1.1720920447260141e-003,right_val:0.5132070779800415,left_val:0.2899182140827179},{features:[[8,15,10,4,-1.],[13,15,5,2,2.],[8,17,5,2,2.]],threshold:9.5305702416226268e-004,right_val:0.5560845136642456,left_val:0.4280124902725220},{features:[[6,18,2,2,-1.],[7,18,1,2,2.]],threshold:1.5099150004971307e-005,right_val:0.5404760241508484,left_val:0.4044871926307678},{features:[[11,3,6,2,-1.],[11,4,6,1,2.]],threshold:-6.0817901976406574e-004,right_val:0.5503466129302979,left_val:0.4271768927574158},{features:[[2,0,16,6,-1.],[2,2,16,2,3.]],threshold:3.3224520739167929e-003,right_val:0.5369734764099121,left_val:0.3962723910808563},{features:[[11,3,6,2,-1.],[11,4,6,1,2.]],threshold:-1.1037490330636501e-003,right_val:0.5237749814987183,left_val:0.4727177917957306},{features:[[4,11,10,3,-1.],[4,12,10,1,3.]],threshold:-1.4350269921123981e-003,right_val:0.4223509132862091,left_val:0.5603008270263672},{features:[[11,3,6,2,-1.],[11,4,6,1,2.]],threshold:2.0767399109899998e-003,right_val:0.4732725918292999,left_val:0.5225917100906372},{features:[[3,3,6,2,-1.],[3,4,6,1,2.]],threshold:-1.6412809782195836e-004,right_val:0.5432739853858948,left_val:0.3999075889587402},{features:[[16,0,4,7,-1.],[16,0,2,7,2.]],threshold:8.8302437216043472e-003,right_val:0.6027327179908752,left_val:0.4678385853767395},{features:[[0,14,9,6,-1.],[0,16,9,2,3.]],threshold:-0.0105520701035857,right_val:0.5213974714279175,left_val:0.3493967056274414},{features:[[9,16,3,3,-1.],[9,17,3,1,3.]],threshold:-2.2731600329279900e-003,right_val:0.4749062955379486,left_val:0.6185818910598755},{features:[[4,6,6,2,-1.],[6,6,2,2,3.]],threshold:-8.4786332445219159e-004,right_val:0.3843482136726379,left_val:0.5285341143608093},{features:[[15,11,1,3,-1.],[15,12,1,1,3.]],threshold:1.2081359745934606e-003,right_val:0.3447335958480835,left_val:0.5360640883445740},{features:[[5,5,2,3,-1.],[5,6,2,1,3.]],threshold:2.6512730401009321e-003,right_val:0.6193962097167969,left_val:0.4558292031288147},{features:[[10,9,2,2,-1.],[10,10,2,1,2.]],threshold:-1.1012479662895203e-003,right_val:0.5327628254890442,left_val:0.3680230081081390},{features:[[3,1,4,3,-1.],[5,1,2,3,2.]],threshold:4.9561518244445324e-004,right_val:0.5274940729141235,left_val:0.3960595130920410},{features:[[16,0,4,7,-1.],[16,0,2,7,2.]],threshold:-0.0439017713069916,right_val:0.4992839097976685,left_val:0.7020444869995117},{features:[[0,0,20,1,-1.],[10,0,10,1,2.]],threshold:0.0346903502941132,right_val:0.2766602933406830,left_val:0.5049164295196533},{features:[[15,11,1,3,-1.],[15,12,1,1,3.]],threshold:-2.7442190330475569e-003,right_val:0.5274971127510071,left_val:0.2672632932662964},{features:[[0,4,3,4,-1.],[1,4,1,4,3.]],threshold:3.3316588960587978e-003,right_val:0.6001101732254028,left_val:0.4579482972621918},{features:[[16,3,3,6,-1.],[16,5,3,2,3.]],threshold:-0.0200445707887411,right_val:0.5235717892646790,left_val:0.3171594142913818},{features:[[1,3,3,6,-1.],[1,5,3,2,3.]],threshold:1.3492030557245016e-003,right_val:0.4034324884414673,left_val:0.5265362858772278},{features:[[6,2,12,6,-1.],[12,2,6,3,2.],[6,5,6,3,2.]],threshold:2.9702018946409225e-003,right_val:0.4571984112262726,left_val:0.5332456827163696},{features:[[8,10,4,3,-1.],[8,11,4,1,3.]],threshold:6.3039981760084629e-003,right_val:0.6034635901451111,left_val:0.4593310952186585},{features:[[4,2,14,6,-1.],[11,2,7,3,2.],[4,5,7,3,2.]],threshold:-0.0129365902394056,right_val:0.5372971296310425,left_val:0.4437963962554932},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:4.0148729458451271e-003,right_val:0.6437833905220032,left_val:0.4680323898792267},{features:[[15,13,2,3,-1.],[15,14,2,1,3.]],threshold:-2.6401679497212172e-003,right_val:0.5314332842826843,left_val:0.3709631860256195},{features:[[8,12,4,3,-1.],[8,13,4,1,3.]],threshold:0.0139184398576617,right_val:0.7130808830261231,left_val:0.4723555147647858},{features:[[15,11,1,3,-1.],[15,12,1,1,3.]],threshold:-4.5087869511917233e-004,right_val:0.5370404124259949,left_val:0.4492394030094147},{features:[[7,13,5,2,-1.],[7,14,5,1,2.]],threshold:2.5384349282830954e-004,right_val:0.5514402985572815,left_val:0.4406864047050476},{features:[[7,12,6,3,-1.],[7,13,6,1,3.]],threshold:2.2710000630468130e-003,right_val:0.5967984199523926,left_val:0.4682416915893555},{features:[[5,11,4,4,-1.],[5,13,4,2,2.]],threshold:2.4120779708027840e-003,right_val:0.3018598854541779,left_val:0.5079392194747925},{features:[[11,4,3,3,-1.],[12,4,1,3,3.]],threshold:-3.6025670851813629e-005,right_val:0.4471096992492676,left_val:0.5601037144660950},{features:[[6,4,3,3,-1.],[7,4,1,3,3.]],threshold:-7.4905529618263245e-003,right_val:0.4989944100379944,left_val:0.2207535058259964},{features:[[16,5,3,6,-1.],[17,5,1,6,3.]],threshold:-0.0175131205469370,right_val:0.5017648935317993,left_val:0.6531215906143189},{features:[[3,6,12,7,-1.],[7,6,4,7,3.]],threshold:0.1428163051605225,right_val:0.1482062041759491,left_val:0.4967963099479675},{features:[[16,5,3,6,-1.],[17,5,1,6,3.]],threshold:5.5345268920063972e-003,right_val:0.5954223871231079,left_val:0.4898946881294251},{features:[[3,13,2,3,-1.],[3,14,2,1,3.]],threshold:-9.6323591424152255e-004,right_val:0.5196074247360230,left_val:0.3927116990089417},{features:[[16,5,3,6,-1.],[17,5,1,6,3.]],threshold:-2.0370010752230883e-003,right_val:0.4884858131408691,left_val:0.5613325238227844},{features:[[1,5,3,6,-1.],[2,5,1,6,3.]],threshold:1.6614829655736685e-003,right_val:0.5578880906105042,left_val:0.4472880065441132},{features:[[1,9,18,1,-1.],[7,9,6,1,3.]],threshold:-3.1188090797513723e-003,right_val:0.5397477746009827,left_val:0.3840532898902893},{features:[[0,9,8,7,-1.],[4,9,4,7,2.]],threshold:-6.4000617712736130e-003,right_val:0.4533218145370483,left_val:0.5843983888626099},{features:[[12,11,8,2,-1.],[12,12,8,1,2.]],threshold:3.1319601112045348e-004,right_val:0.4234727919101715,left_val:0.5439221858978272},{features:[[0,11,8,2,-1.],[0,12,8,1,2.]],threshold:-0.0182220991700888,right_val:0.4958404898643494,left_val:0.1288464963436127},{features:[[9,13,2,3,-1.],[9,14,2,1,3.]],threshold:8.7969247251749039e-003,right_val:0.7153480052947998,left_val:0.4951297938823700},{features:[[4,10,12,4,-1.],[4,10,6,2,2.],[10,12,6,2,2.]],threshold:-4.2395070195198059e-003,right_val:0.5194936990737915,left_val:0.3946599960327148},{features:[[9,3,3,7,-1.],[10,3,1,7,3.]],threshold:9.7086271271109581e-003,right_val:0.6064900159835815,left_val:0.4897503852844238},{features:[[7,2,3,5,-1.],[8,2,1,5,3.]],threshold:-3.9934171363711357e-003,right_val:0.5060828924179077,left_val:0.3245440125465393},{features:[[9,12,4,6,-1.],[11,12,2,3,2.],[9,15,2,3,2.]],threshold:-0.0167850591242313,right_val:0.5203778743743897,left_val:0.1581953018903732},{features:[[8,7,3,6,-1.],[9,7,1,6,3.]],threshold:0.0182720907032490,right_val:0.6626979112625122,left_val:0.4680935144424439},{features:[[15,4,4,2,-1.],[15,5,4,1,2.]],threshold:5.6872838176786900e-003,right_val:0.3512184917926788,left_val:0.5211697816848755},{features:[[8,7,3,3,-1.],[9,7,1,3,3.]],threshold:-1.0739039862528443e-003,right_val:0.4529845118522644,left_val:0.5768386125564575},{features:[[14,2,6,4,-1.],[14,4,6,2,2.]],threshold:-3.7093870341777802e-003,right_val:0.5313581228256226,left_val:0.4507763087749481},{features:[[7,16,6,1,-1.],[9,16,2,1,3.]],threshold:-2.1110709349159151e-004,right_val:0.4333376884460449,left_val:0.5460820198059082},{features:[[15,13,2,3,-1.],[15,14,2,1,3.]],threshold:1.0670139454305172e-003,right_val:0.4078390896320343,left_val:0.5371856093406677},{features:[[8,7,3,10,-1.],[9,7,1,10,3.]],threshold:3.5943021066486835e-003,right_val:0.5643836259841919,left_val:0.4471287131309509},{features:[[11,10,2,6,-1.],[11,12,2,2,3.]],threshold:-5.1776031032204628e-003,right_val:0.5280330181121826,left_val:0.4499393105506897},{features:[[6,10,4,1,-1.],[8,10,2,1,2.]],threshold:-2.5414369883947074e-004,right_val:0.4407708048820496,left_val:0.5516173243522644},{features:[[10,9,2,2,-1.],[10,10,2,1,2.]],threshold:6.3522560521960258e-003,right_val:0.2465227991342545,left_val:0.5194190144538879},{features:[[8,9,2,2,-1.],[8,10,2,1,2.]],threshold:-4.4205080484971404e-004,right_val:0.5139682292938232,left_val:0.3830705881118774},{features:[[12,7,2,2,-1.],[13,7,1,1,2.],[12,8,1,1,2.]],threshold:7.4488727841526270e-004,right_val:0.5974786877632141,left_val:0.4891090989112854},{features:[[5,7,2,2,-1.],[5,7,1,1,2.],[6,8,1,1,2.]],threshold:-3.5116379149258137e-003,right_val:0.4768764972686768,left_val:0.7413681745529175},{features:[[13,0,3,14,-1.],[14,0,1,14,3.]],threshold:-0.0125409103929996,right_val:0.5252826809883118,left_val:0.3648819029331207},{features:[[4,0,3,14,-1.],[5,0,1,14,3.]],threshold:9.4931852072477341e-003,right_val:0.3629586994647980,left_val:0.5100492835044861},{features:[[13,4,3,14,-1.],[14,4,1,14,3.]],threshold:0.0129611501470208,right_val:0.4333561062812805,left_val:0.5232442021369934},{features:[[9,14,2,3,-1.],[9,15,2,1,3.]],threshold:4.7209449112415314e-003,right_val:0.6331052780151367,left_val:0.4648149013519287},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:-2.3119079414755106e-003,right_val:0.4531058073043823,left_val:0.5930309891700745},{features:[[4,2,3,16,-1.],[5,2,1,16,3.]],threshold:-2.8262299019843340e-003,right_val:0.5257101058959961,left_val:0.3870477974414825},{features:[[7,2,8,10,-1.],[7,7,8,5,2.]],threshold:-1.4311339473351836e-003,right_val:0.4561854898929596,left_val:0.5522503256797791},{features:[[6,14,7,3,-1.],[6,15,7,1,3.]],threshold:1.9378310535103083e-003,right_val:0.5736966729164124,left_val:0.4546220898628235},{features:[[9,2,10,12,-1.],[14,2,5,6,2.],[9,8,5,6,2.]],threshold:2.6343559147790074e-004,right_val:0.4571875035762787,left_val:0.5345739126205444},{features:[[6,7,8,2,-1.],[6,8,8,1,2.]],threshold:7.8257522545754910e-004,right_val:0.5220187902450562,left_val:0.3967815935611725},{features:[[8,13,4,6,-1.],[8,16,4,3,2.]],threshold:-0.0195504408329725,right_val:0.5243508219718933,left_val:0.2829642891883850},{features:[[6,6,1,3,-1.],[6,7,1,1,3.]],threshold:4.3914958951063454e-004,right_val:0.5899090170860291,left_val:0.4590066969394684},{features:[[16,2,4,6,-1.],[16,4,4,2,3.]],threshold:0.0214520003646612,right_val:0.2855378985404968,left_val:0.5231410861015320},{features:[[6,6,4,2,-1.],[6,6,2,1,2.],[8,7,2,1,2.]],threshold:5.8973580598831177e-004,right_val:0.5506421923637390,left_val:0.4397256970405579},{features:[[16,2,4,6,-1.],[16,4,4,2,3.]],threshold:-0.0261576101183891,right_val:0.5189175009727478,left_val:0.3135079145431519},{features:[[0,2,4,6,-1.],[0,4,4,2,3.]],threshold:-0.0139598604291677,right_val:0.5040717720985413,left_val:0.3213272988796234},{features:[[9,6,2,6,-1.],[9,6,1,6,2.]],threshold:-6.3699018210172653e-003,right_val:0.4849506914615631,left_val:0.6387544870376587},{features:[[3,4,6,10,-1.],[3,9,6,5,2.]],threshold:-8.5613820701837540e-003,right_val:0.5032019019126892,left_val:0.2759132087230682},{features:[[9,5,2,6,-1.],[9,5,1,6,2.]],threshold:9.6622901037335396e-004,right_val:0.5834879279136658,left_val:0.4685640931129456},{features:[[3,13,2,3,-1.],[3,14,2,1,3.]],threshold:7.6550268568098545e-004,right_val:0.3896422088146210,left_val:0.5175207257270813},{features:[[13,13,3,2,-1.],[13,14,3,1,2.]],threshold:-8.1833340227603912e-003,right_val:0.5208122134208679,left_val:0.2069136947393417},{features:[[2,16,10,4,-1.],[2,16,5,2,2.],[7,18,5,2,2.]],threshold:-9.3976939097046852e-003,right_val:0.4641222953796387,left_val:0.6134091019630432},{features:[[5,6,10,6,-1.],[10,6,5,3,2.],[5,9,5,3,2.]],threshold:4.8028980381786823e-003,right_val:0.4395219981670380,left_val:0.5454108119010925},{features:[[7,14,1,3,-1.],[7,15,1,1,3.]],threshold:-3.5680569708347321e-003,right_val:0.4681093990802765,left_val:0.6344485282897949},{features:[[14,16,6,3,-1.],[14,17,6,1,3.]],threshold:4.0733120404183865e-003,right_val:0.4015620052814484,left_val:0.5292683243751526},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:1.2568129459396005e-003,right_val:0.5452824831008911,left_val:0.4392988085746765},{features:[[7,4,10,3,-1.],[7,5,10,1,3.]],threshold:-2.9065010603517294e-003,right_val:0.4863379895687103,left_val:0.5898832082748413},{features:[[0,4,5,4,-1.],[0,6,5,2,2.]],threshold:-2.4409340694546700e-003,right_val:0.5247421860694885,left_val:0.4069364964962006},{features:[[13,11,3,9,-1.],[13,14,3,3,3.]],threshold:0.0248307008296251,right_val:0.3682524859905243,left_val:0.5182725787162781},{features:[[4,11,3,9,-1.],[4,14,3,3,3.]],threshold:-0.0488540083169937,right_val:0.4961281120777130,left_val:0.1307577937841415},{features:[[9,7,2,1,-1.],[9,7,1,1,2.]],threshold:-1.6110379947349429e-003,right_val:0.4872662127017975,left_val:0.6421005725860596},{features:[[5,0,6,17,-1.],[7,0,2,17,3.]],threshold:-0.0970094799995422,right_val:0.4950988888740540,left_val:0.0477693490684032},{features:[[10,3,6,3,-1.],[10,3,3,3,2.]],threshold:1.1209240183234215e-003,right_val:0.5354745984077454,left_val:0.4616267085075378},{features:[[2,2,15,4,-1.],[7,2,5,4,3.]],threshold:-1.3064090162515640e-003,right_val:0.4638805985450745,left_val:0.6261854171752930},{features:[[8,2,8,2,-1.],[12,2,4,1,2.],[8,3,4,1,2.]],threshold:4.5771620352752507e-004,right_val:0.4646640121936798,left_val:0.5384417772293091},{features:[[8,1,3,6,-1.],[8,3,3,2,3.]],threshold:-6.3149951165542006e-004,right_val:0.5130257010459900,left_val:0.3804047107696533},{features:[[9,17,2,2,-1.],[9,18,2,1,2.]],threshold:1.4505970466416329e-004,right_val:0.5664461851119995,left_val:0.4554310142993927},{features:[[0,0,2,14,-1.],[1,0,1,14,2.]],threshold:-0.0164745505899191,right_val:0.4715859889984131,left_val:0.6596958041191101},{features:[[12,0,7,3,-1.],[12,1,7,1,3.]],threshold:0.0133695797994733,right_val:0.3035964965820313,left_val:0.5195466279983521},{features:[[1,14,1,2,-1.],[1,15,1,1,2.]],threshold:1.0271780047332868e-004,right_val:0.4107066094875336,left_val:0.5229176282882690},{features:[[14,12,2,8,-1.],[15,12,1,4,2.],[14,16,1,4,2.]],threshold:-5.5311559699475765e-003,right_val:0.4960907101631165,left_val:0.6352887749671936},{features:[[1,0,7,3,-1.],[1,1,7,1,3.]],threshold:-2.6187049224972725e-003,right_val:0.5140984058380127,left_val:0.3824546039104462},{features:[[14,12,2,8,-1.],[15,12,1,4,2.],[14,16,1,4,2.]],threshold:5.0834268331527710e-003,right_val:0.6220818758010864,left_val:0.4950439929962158},{features:[[6,0,8,12,-1.],[6,0,4,6,2.],[10,6,4,6,2.]],threshold:0.0798181593418121,right_val:0.1322475969791412,left_val:0.4952335953712463},{features:[[6,1,8,9,-1.],[6,4,8,3,3.]],threshold:-0.0992265865206718,right_val:0.5008416771888733,left_val:0.7542728781700134},{features:[[5,2,2,2,-1.],[5,3,2,1,2.]],threshold:-6.5174017800018191e-004,right_val:0.5130121111869812,left_val:0.3699302971363068},{features:[[13,14,6,6,-1.],[16,14,3,3,2.],[13,17,3,3,2.]],threshold:-0.0189968496561050,right_val:0.4921202957630158,left_val:0.6689178943634033},{features:[[0,17,20,2,-1.],[0,17,10,1,2.],[10,18,10,1,2.]],threshold:0.0173468999564648,right_val:0.1859198063611984,left_val:0.4983300864696503},{features:[[10,3,2,6,-1.],[11,3,1,3,2.],[10,6,1,3,2.]],threshold:5.5082101607695222e-004,right_val:0.5522121787071228,left_val:0.4574424028396606},{features:[[5,12,6,2,-1.],[8,12,3,2,2.]],threshold:2.0056050270795822e-003,right_val:0.3856469988822937,left_val:0.5131744742393494},{features:[[10,7,6,13,-1.],[10,7,3,13,2.]],threshold:-7.7688191086053848e-003,right_val:0.5434309244155884,left_val:0.4361700117588043},{features:[[5,15,10,5,-1.],[10,15,5,5,2.]],threshold:0.0508782789111137,right_val:0.6840639710426331,left_val:0.4682720899581909},{features:[[10,4,4,10,-1.],[10,4,2,10,2.]],threshold:-2.2901780903339386e-003,right_val:0.5306099057197571,left_val:0.4329245090484619},{features:[[5,7,2,1,-1.],[6,7,1,1,2.]],threshold:-1.5715380141045898e-004,right_val:0.4378164112567902,left_val:0.5370057225227356},{features:[[10,3,6,7,-1.],[10,3,3,7,2.]],threshold:0.1051924005150795,right_val:0.0673614665865898,left_val:0.5137274265289307},{features:[[4,3,6,7,-1.],[7,3,3,7,2.]],threshold:2.7198919560760260e-003,right_val:0.5255665183067322,left_val:0.4112060964107513},{features:[[1,7,18,5,-1.],[7,7,6,5,3.]],threshold:0.0483377799391747,right_val:0.4438967108726502,left_val:0.5404623746871948},{features:[[3,17,4,3,-1.],[5,17,2,3,2.]],threshold:9.5703761326149106e-004,right_val:0.5399510860443115,left_val:0.4355969130992889},{features:[[8,14,12,6,-1.],[14,14,6,3,2.],[8,17,6,3,2.]],threshold:-0.0253712590783834,right_val:0.5031024813652039,left_val:0.5995175242424011},{features:[[0,13,20,4,-1.],[0,13,10,2,2.],[10,15,10,2,2.]],threshold:0.0524579510092735,right_val:0.1398351043462753,left_val:0.4950287938117981},{features:[[4,5,14,2,-1.],[11,5,7,1,2.],[4,6,7,1,2.]],threshold:-0.0123656298965216,right_val:0.4964106082916260,left_val:0.6397299170494080},{features:[[1,2,10,12,-1.],[1,2,5,6,2.],[6,8,5,6,2.]],threshold:-0.1458971947431564,right_val:0.4946322143077850,left_val:0.1001669988036156},{features:[[6,1,14,3,-1.],[6,2,14,1,3.]],threshold:-0.0159086007624865,right_val:0.5208340883255005,left_val:0.3312329947948456},{features:[[8,16,2,3,-1.],[8,17,2,1,3.]],threshold:3.9486068999394774e-004,right_val:0.5426102876663208,left_val:0.4406363964080811},{features:[[9,17,3,2,-1.],[10,17,1,2,3.]],threshold:-5.2454001270234585e-003,right_val:0.5189967155456543,left_val:0.2799589931964874},{features:[[5,15,4,2,-1.],[5,15,2,1,2.],[7,16,2,1,2.]],threshold:-5.0421799533069134e-003,right_val:0.4752142131328583,left_val:0.6987580060958862},{features:[[10,15,1,3,-1.],[10,16,1,1,3.]],threshold:2.9812189750373363e-003,right_val:0.6307479739189148,left_val:0.4983288943767548},{features:[[8,16,4,4,-1.],[8,16,2,2,2.],[10,18,2,2,2.]],threshold:-7.2884308174252510e-003,right_val:0.5026869773864746,left_val:0.2982333004474640},{features:[[6,11,8,6,-1.],[6,14,8,3,2.]],threshold:1.5094350092113018e-003,right_val:0.3832970857620239,left_val:0.5308442115783691},{features:[[2,13,5,2,-1.],[2,14,5,1,2.]],threshold:-9.3340799212455750e-003,right_val:0.4969817101955414,left_val:0.2037964016199112},{features:[[13,14,6,6,-1.],[16,14,3,3,2.],[13,17,3,3,2.]],threshold:0.0286671407520771,right_val:0.6928027272224426,left_val:0.5025696754455566},{features:[[1,9,18,4,-1.],[7,9,6,4,3.]],threshold:0.1701968014240265,right_val:0.1476442962884903,left_val:0.4960052967071533},{features:[[13,14,6,6,-1.],[16,14,3,3,2.],[13,17,3,3,2.]],threshold:-3.2614478841423988e-003,right_val:0.4826056063175201,left_val:0.5603063702583313},{features:[[0,2,1,6,-1.],[0,4,1,2,3.]],threshold:5.5769277969375253e-004,right_val:0.4129633009433746,left_val:0.5205562114715576},{features:[[5,0,15,20,-1.],[5,10,15,10,2.]],threshold:0.3625833988189697,right_val:0.3768612146377564,left_val:0.5221652984619141},{features:[[1,14,6,6,-1.],[1,14,3,3,2.],[4,17,3,3,2.]],threshold:-0.0116151301190257,right_val:0.4637489914894104,left_val:0.6022682785987854},{features:[[8,14,4,6,-1.],[10,14,2,3,2.],[8,17,2,3,2.]],threshold:-4.0795197710394859e-003,right_val:0.5337479114532471,left_val:0.4070447087287903},{features:[[7,11,2,1,-1.],[8,11,1,1,2.]],threshold:5.7204300537705421e-004,right_val:0.5900393128395081,left_val:0.4601835012435913},{features:[[9,17,3,2,-1.],[10,17,1,2,3.]],threshold:6.7543348995968699e-004,right_val:0.4345428943634033,left_val:0.5398252010345459},{features:[[8,17,3,2,-1.],[9,17,1,2,3.]],threshold:6.3295697327703238e-004,right_val:0.4051358997821808,left_val:0.5201563239097595},{features:[[12,14,4,6,-1.],[14,14,2,3,2.],[12,17,2,3,2.]],threshold:1.2435320531949401e-003,right_val:0.5547441244125366,left_val:0.4642387926578522},{features:[[4,14,4,6,-1.],[4,14,2,3,2.],[6,17,2,3,2.]],threshold:-4.7363857738673687e-003,right_val:0.4672552049160004,left_val:0.6198567152023315},{features:[[13,14,2,6,-1.],[14,14,1,3,2.],[13,17,1,3,2.]],threshold:-6.4658462069928646e-003,right_val:0.5019000768661499,left_val:0.6837332844734192},{features:[[5,14,2,6,-1.],[5,14,1,3,2.],[6,17,1,3,2.]],threshold:3.5017321351915598e-004,right_val:0.5363622903823853,left_val:0.4344803094863892},{features:[[7,0,6,12,-1.],[7,4,6,4,3.]],threshold:1.5754920605104417e-004,right_val:0.5732020735740662,left_val:0.4760079085826874},{features:[[0,7,12,2,-1.],[4,7,4,2,3.]],threshold:9.9774366244673729e-003,right_val:0.3635039925575256,left_val:0.5090985894203186},{features:[[10,3,3,13,-1.],[11,3,1,13,3.]],threshold:-4.1464529931545258e-004,right_val:0.4593802094459534,left_val:0.5570064783096314},{features:[[7,3,3,13,-1.],[8,3,1,13,3.]],threshold:-3.5888899583369493e-004,right_val:0.4339134991168976,left_val:0.5356845855712891},{features:[[10,8,6,3,-1.],[10,9,6,1,3.]],threshold:4.0463250479660928e-004,right_val:0.5436776876449585,left_val:0.4439803063869476},{features:[[3,11,3,2,-1.],[4,11,1,2,3.]],threshold:-8.2184787606820464e-004,right_val:0.5176299214363098,left_val:0.4042294919490814},{features:[[13,12,6,8,-1.],[16,12,3,4,2.],[13,16,3,4,2.]],threshold:5.9467419050633907e-003,right_val:0.5633779764175415,left_val:0.4927651882171631},{features:[[7,6,6,5,-1.],[9,6,2,5,3.]],threshold:-0.0217533893883228,right_val:0.4800840914249420,left_val:0.8006293773651123},{features:[[17,11,2,7,-1.],[17,11,1,7,2.]],threshold:-0.0145403798669577,right_val:0.5182222723960877,left_val:0.3946054875850678},{features:[[3,13,8,2,-1.],[7,13,4,2,2.]],threshold:-0.0405107699334621,right_val:0.4935792982578278,left_val:0.0213249903172255},{features:[[6,9,8,3,-1.],[6,10,8,1,3.]],threshold:-5.8458268176764250e-004,right_val:0.5314025282859802,left_val:0.4012795984745026},{features:[[4,3,4,3,-1.],[4,4,4,1,3.]],threshold:5.5151800625026226e-003,right_val:0.5896260738372803,left_val:0.4642418920993805},{features:[[11,3,4,3,-1.],[11,4,4,1,3.]],threshold:-6.0626221820712090e-003,right_val:0.5016477704048157,left_val:0.6502159237861633},{features:[[1,4,17,12,-1.],[1,8,17,4,3.]],threshold:0.0945358425378799,right_val:0.4126827120780945,left_val:0.5264708995819092},{features:[[11,3,4,3,-1.],[11,4,4,1,3.]],threshold:4.7315051779150963e-003,right_val:0.5892447829246521,left_val:0.4879199862480164},{features:[[4,8,6,3,-1.],[4,9,6,1,3.]],threshold:-5.2571471314877272e-004,right_val:0.5189412832260132,left_val:0.3917280137538910},{features:[[12,3,5,3,-1.],[12,4,5,1,3.]],threshold:-2.5464049540460110e-003,right_val:0.4985705912113190,left_val:0.5837599039077759},{features:[[1,11,2,7,-1.],[2,11,1,7,2.]],threshold:-0.0260756891220808,right_val:0.4955821931362152,left_val:0.1261983960866928},{features:[[15,12,2,8,-1.],[16,12,1,4,2.],[15,16,1,4,2.]],threshold:-5.4779709316790104e-003,right_val:0.5010265707969666,left_val:0.5722513794898987},{features:[[4,8,11,3,-1.],[4,9,11,1,3.]],threshold:5.1337741315364838e-003,right_val:0.4226376116275787,left_val:0.5273262262344360},{features:[[9,13,6,2,-1.],[12,13,3,1,2.],[9,14,3,1,2.]],threshold:4.7944980906322598e-004,right_val:0.5819587111473084,left_val:0.4450066983699799},{features:[[6,13,4,3,-1.],[6,14,4,1,3.]],threshold:-2.1114079281687737e-003,right_val:0.4511714875698090,left_val:0.5757653117179871},{features:[[9,12,3,3,-1.],[10,12,1,3,3.]],threshold:-0.0131799904629588,right_val:0.5160734057426453,left_val:0.1884381026029587},{features:[[5,3,3,3,-1.],[5,4,3,1,3.]],threshold:-4.7968099825084209e-003,right_val:0.4736118912696838,left_val:0.6589789986610413},{features:[[9,4,2,3,-1.],[9,5,2,1,3.]],threshold:6.7483168095350266e-003,right_val:0.3356395065784454,left_val:0.5259429812431335},{features:[[0,2,16,3,-1.],[0,3,16,1,3.]],threshold:1.4623369788751006e-003,right_val:0.4264092147350311,left_val:0.5355271100997925},{features:[[15,12,2,8,-1.],[16,12,1,4,2.],[15,16,1,4,2.]],threshold:4.7645159065723419e-003,right_val:0.5786827802658081,left_val:0.5034406781196594},{features:[[3,12,2,8,-1.],[3,12,1,4,2.],[4,16,1,4,2.]],threshold:6.8066660314798355e-003,right_val:0.6677829027175903,left_val:0.4756605029106140},{features:[[14,13,3,6,-1.],[14,15,3,2,3.]],threshold:3.6608621012419462e-003,right_val:0.4311546981334686,left_val:0.5369611978530884},{features:[[3,13,3,6,-1.],[3,15,3,2,3.]],threshold:0.0214496403932571,right_val:0.1888816058635712,left_val:0.4968641996383667},{features:[[6,5,10,2,-1.],[11,5,5,1,2.],[6,6,5,1,2.]],threshold:4.1678901761770248e-003,right_val:0.5815368890762329,left_val:0.4930733144283295},{features:[[2,14,14,6,-1.],[2,17,14,3,2.]],threshold:8.6467564105987549e-003,right_val:0.4132595062255859,left_val:0.5205205082893372},{features:[[10,14,1,3,-1.],[10,15,1,1,3.]],threshold:-3.6114078829996288e-004,right_val:0.4800927937030792,left_val:0.5483555197715759},{features:[[4,16,2,2,-1.],[4,16,1,1,2.],[5,17,1,1,2.]],threshold:1.0808729566633701e-003,right_val:0.6041421294212341,left_val:0.4689902067184448},{features:[[10,6,2,3,-1.],[10,7,2,1,3.]],threshold:5.7719959877431393e-003,right_val:0.3053277134895325,left_val:0.5171142220497131},{features:[[0,17,20,2,-1.],[0,17,10,1,2.],[10,18,10,1,2.]],threshold:1.5720770461484790e-003,right_val:0.4178803861141205,left_val:0.5219978094100952},{features:[[13,6,1,3,-1.],[13,7,1,1,3.]],threshold:-1.9307859474793077e-003,right_val:0.4812920093536377,left_val:0.5860369801521301},{features:[[8,13,3,2,-1.],[9,13,1,2,3.]],threshold:-7.8926272690296173e-003,right_val:0.4971733987331390,left_val:0.1749276965856552},{features:[[12,2,3,3,-1.],[13,2,1,3,3.]],threshold:-2.2224679123610258e-003,right_val:0.5212848186492920,left_val:0.4342589080333710},{features:[[3,18,2,2,-1.],[3,18,1,1,2.],[4,19,1,1,2.]],threshold:1.9011989934369922e-003,right_val:0.6892055273056030,left_val:0.4765186905860901},{features:[[9,16,3,4,-1.],[10,16,1,4,3.]],threshold:2.7576119173318148e-003,right_val:0.4337486028671265,left_val:0.5262191295623779},{features:[[6,6,1,3,-1.],[6,7,1,1,3.]],threshold:5.1787449046969414e-003,right_val:0.7843729257583618,left_val:0.4804069101810455},{features:[[13,1,5,2,-1.],[13,2,5,1,2.]],threshold:-9.0273341629654169e-004,right_val:0.5353423953056335,left_val:0.4120846986770630},{features:[[7,14,6,2,-1.],[7,14,3,1,2.],[10,15,3,1,2.]],threshold:5.1797959022223949e-003,right_val:0.6425960063934326,left_val:0.4740372896194458},{features:[[11,3,3,4,-1.],[12,3,1,4,3.]],threshold:-0.0101140001788735,right_val:0.5175017714500427,left_val:0.2468792051076889},{features:[[1,13,12,6,-1.],[5,13,4,6,3.]],threshold:-0.0186170600354671,right_val:0.4628978967666626,left_val:0.5756294131278992},{features:[[14,11,5,2,-1.],[14,12,5,1,2.]],threshold:5.9225959703326225e-003,right_val:0.3214271068572998,left_val:0.5169625878334045},{features:[[2,15,14,4,-1.],[2,15,7,2,2.],[9,17,7,2,2.]],threshold:-6.2945079989731312e-003,right_val:0.5141636729240418,left_val:0.3872014880180359},{features:[[3,7,14,2,-1.],[10,7,7,1,2.],[3,8,7,1,2.]],threshold:6.5353019163012505e-003,right_val:0.6310489773750305,left_val:0.4853048920631409},{features:[[1,11,4,2,-1.],[1,12,4,1,2.]],threshold:1.0878399480134249e-003,right_val:0.3723258972167969,left_val:0.5117315053939819},{features:[[14,0,6,14,-1.],[16,0,2,14,3.]],threshold:-0.0225422400981188,right_val:0.4887112975120544,left_val:0.5692740082740784},{features:[[4,11,1,3,-1.],[4,12,1,1,3.]],threshold:-3.0065660830587149e-003,right_val:0.5003992915153503,left_val:0.2556012868881226},{features:[[14,0,6,14,-1.],[16,0,2,14,3.]],threshold:7.4741272255778313e-003,right_val:0.5675926804542542,left_val:0.4810872972011566},{features:[[1,10,3,7,-1.],[2,10,1,7,3.]],threshold:0.0261623207479715,right_val:0.1777237057685852,left_val:0.4971194863319397},{features:[[8,12,9,2,-1.],[8,13,9,1,2.]],threshold:9.4352738233283162e-004,right_val:0.5491250753402710,left_val:0.4940010905265808},{features:[[0,6,20,1,-1.],[10,6,10,1,2.]],threshold:0.0333632417023182,right_val:0.2790724039077759,left_val:0.5007612109184265},{features:[[8,4,4,4,-1.],[8,4,2,4,2.]],threshold:-0.0151186501607299,right_val:0.4973031878471375,left_val:0.7059578895568848},{features:[[0,0,2,2,-1.],[0,1,2,1,2.]],threshold:9.8648946732282639e-004,right_val:0.3776761889457703,left_val:0.5128620266914368}],threshold:104.7491989135742200},{simpleClassifiers:[{features:[[5,3,10,9,-1.],[5,6,10,3,3.]],threshold:-0.0951507985591888,right_val:0.4017286896705627,left_val:0.6470757126808167},{features:[[15,2,4,10,-1.],[15,2,2,10,2.]],threshold:6.2702340073883533e-003,right_val:0.5746449232101440,left_val:0.3999822139739990},{features:[[8,2,2,7,-1.],[9,2,1,7,2.]],threshold:3.0018089455552399e-004,right_val:0.5538809895515442,left_val:0.3558770120143890},{features:[[7,4,12,1,-1.],[11,4,4,1,3.]],threshold:1.1757409665733576e-003,right_val:0.5382617712020874,left_val:0.4256534874439240},{features:[[3,4,9,1,-1.],[6,4,3,1,3.]],threshold:4.4235268433112651e-005,right_val:0.5589926838874817,left_val:0.3682908117771149},{features:[[15,10,1,4,-1.],[15,12,1,2,2.]],threshold:-2.9936920327600092e-005,right_val:0.4020367860794067,left_val:0.5452470183372498},{features:[[4,10,6,4,-1.],[7,10,3,4,2.]],threshold:3.0073199886828661e-003,right_val:0.3317843973636627,left_val:0.5239058136940002},{features:[[15,9,1,6,-1.],[15,12,1,3,2.]],threshold:-0.0105138896033168,right_val:0.5307983756065369,left_val:0.4320689141750336},{features:[[7,17,6,3,-1.],[7,18,6,1,3.]],threshold:8.3476826548576355e-003,right_val:0.6453298926353455,left_val:0.4504637122154236},{features:[[14,3,2,16,-1.],[15,3,1,8,2.],[14,11,1,8,2.]],threshold:-3.1492270063608885e-003,right_val:0.5370525121688843,left_val:0.4313425123691559},{features:[[4,9,1,6,-1.],[4,12,1,3,2.]],threshold:-1.4435649973165710e-005,right_val:0.3817971944808960,left_val:0.5326603055000305},{features:[[12,1,5,2,-1.],[12,2,5,1,2.]],threshold:-4.2855090578086674e-004,right_val:0.5382009744644165,left_val:0.4305163919925690},{features:[[6,18,4,2,-1.],[6,18,2,1,2.],[8,19,2,1,2.]],threshold:1.5062429883982986e-004,right_val:0.5544965267181397,left_val:0.4235970973968506},{features:[[2,4,16,10,-1.],[10,4,8,5,2.],[2,9,8,5,2.]],threshold:0.0715598315000534,right_val:0.2678802907466888,left_val:0.5303059816360474},{features:[[6,5,1,10,-1.],[6,10,1,5,2.]],threshold:8.4095180500298738e-004,right_val:0.5205433964729309,left_val:0.3557108938694000},{features:[[4,8,15,2,-1.],[9,8,5,2,3.]],threshold:0.0629865005612373,right_val:0.2861376106739044,left_val:0.5225362777709961},{features:[[1,8,15,2,-1.],[6,8,5,2,3.]],threshold:-3.3798629883676767e-003,right_val:0.5201697945594788,left_val:0.3624185919761658},{features:[[9,5,3,6,-1.],[9,7,3,2,3.]],threshold:-1.1810739670181647e-004,right_val:0.3959893882274628,left_val:0.5474476814270020},{features:[[5,7,8,2,-1.],[9,7,4,2,2.]],threshold:-5.4505601292476058e-004,right_val:0.5215715765953064,left_val:0.3740422129631043},{features:[[9,11,2,3,-1.],[9,12,2,1,3.]],threshold:-1.8454910023137927e-003,right_val:0.4584448933601379,left_val:0.5893052220344544},{features:[[1,0,16,3,-1.],[1,1,16,1,3.]],threshold:-4.3832371011376381e-004,right_val:0.5385351181030273,left_val:0.4084582030773163},{features:[[11,2,7,2,-1.],[11,3,7,1,2.]],threshold:-2.4000830017030239e-003,right_val:0.5293580293655396,left_val:0.3777455091476440},{features:[[5,1,10,18,-1.],[5,7,10,6,3.]],threshold:-0.0987957417964935,right_val:0.5070089101791382,left_val:0.2963612079620361},{features:[[17,4,3,2,-1.],[18,4,1,2,3.]],threshold:3.1798239797353745e-003,right_val:0.6726443767547607,left_val:0.4877632856369019},{features:[[8,13,1,3,-1.],[8,14,1,1,3.]],threshold:3.2406419632025063e-004,right_val:0.5561109781265259,left_val:0.4366911053657532},{features:[[3,14,14,6,-1.],[3,16,14,2,3.]],threshold:-0.0325472503900528,right_val:0.5308616161346436,left_val:0.3128157854080200},{features:[[0,2,3,4,-1.],[1,2,1,4,3.]],threshold:-7.7561130747199059e-003,right_val:0.4639872014522553,left_val:0.6560224890708923},{features:[[12,1,5,2,-1.],[12,2,5,1,2.]],threshold:0.0160272493958473,right_val:0.3141897916793823,left_val:0.5172680020332336},{features:[[3,1,5,2,-1.],[3,2,5,1,2.]],threshold:7.1002350523485802e-006,right_val:0.5336294770240784,left_val:0.4084446132183075},{features:[[10,13,2,3,-1.],[10,14,2,1,3.]],threshold:7.3422808200120926e-003,right_val:0.6603465080261231,left_val:0.4966922104358673},{features:[[8,13,2,3,-1.],[8,14,2,1,3.]],threshold:-1.6970280557870865e-003,right_val:0.4500182867050171,left_val:0.5908237099647522},{features:[[14,12,2,3,-1.],[14,13,2,1,3.]],threshold:2.4118260480463505e-003,right_val:0.3599720895290375,left_val:0.5315160751342773},{features:[[7,2,2,3,-1.],[7,3,2,1,3.]],threshold:-5.5300937965512276e-003,right_val:0.4996814131736755,left_val:0.2334040999412537},{features:[[5,6,10,4,-1.],[10,6,5,2,2.],[5,8,5,2,2.]],threshold:-2.6478730142116547e-003,right_val:0.4684734046459198,left_val:0.5880935788154602},{features:[[9,13,1,6,-1.],[9,16,1,3,2.]],threshold:0.0112956296652555,right_val:0.1884590983390808,left_val:0.4983777105808258},{features:[[10,12,2,2,-1.],[11,12,1,1,2.],[10,13,1,1,2.]],threshold:-6.6952878842130303e-004,right_val:0.4799019992351532,left_val:0.5872138142585754},{features:[[4,12,2,3,-1.],[4,13,2,1,3.]],threshold:1.4410680159926414e-003,right_val:0.3501011133193970,left_val:0.5131189227104187},{features:[[14,4,6,6,-1.],[14,6,6,2,3.]],threshold:2.4637870956212282e-003,right_val:0.4117639064788818,left_val:0.5339372158050537},{features:[[8,17,2,3,-1.],[8,18,2,1,3.]],threshold:3.3114518737420440e-004,right_val:0.5398246049880981,left_val:0.4313383102416992},{features:[[16,4,4,6,-1.],[16,6,4,2,3.]],threshold:-0.0335572697222233,right_val:0.5179154872894287,left_val:0.2675336897373200},{features:[[0,4,4,6,-1.],[0,6,4,2,3.]],threshold:0.0185394193977118,right_val:0.2317177057266235,left_val:0.4973869919776917},{features:[[14,6,2,3,-1.],[14,6,1,3,2.]],threshold:-2.9698139405809343e-004,right_val:0.4643664062023163,left_val:0.5529708266258240},{features:[[4,9,8,1,-1.],[8,9,4,1,2.]],threshold:-4.5577259152196348e-004,right_val:0.4469191133975983,left_val:0.5629584193229675},{features:[[8,12,4,3,-1.],[8,13,4,1,3.]],threshold:-0.0101589802652597,right_val:0.4925918877124786,left_val:0.6706212759017944},{features:[[5,12,10,6,-1.],[5,14,10,2,3.]],threshold:-2.2413829356082715e-005,right_val:0.3912901878356934,left_val:0.5239421725273132},{features:[[11,12,1,2,-1.],[11,13,1,1,2.]],threshold:7.2034963523037732e-005,right_val:0.5501788854598999,left_val:0.4799438118934631},{features:[[8,15,4,2,-1.],[8,16,4,1,2.]],threshold:-6.9267209619283676e-003,right_val:0.4698084890842438,left_val:0.6930009722709656},{features:[[6,9,8,8,-1.],[10,9,4,4,2.],[6,13,4,4,2.]],threshold:-7.6997838914394379e-003,right_val:0.5480883121490479,left_val:0.4099623858928680},{features:[[7,12,4,6,-1.],[7,12,2,3,2.],[9,15,2,3,2.]],threshold:-7.3130549862980843e-003,right_val:0.5057886242866516,left_val:0.3283475935459137},{features:[[10,11,3,1,-1.],[11,11,1,1,3.]],threshold:1.9650589674711227e-003,right_val:0.6398249864578247,left_val:0.4978047013282776},{features:[[9,7,2,10,-1.],[9,7,1,5,2.],[10,12,1,5,2.]],threshold:7.1647600270807743e-003,right_val:0.6222137212753296,left_val:0.4661160111427307},{features:[[8,0,6,6,-1.],[10,0,2,6,3.]],threshold:-0.0240786392241716,right_val:0.5222162008285523,left_val:0.2334644943475723},{features:[[3,11,2,6,-1.],[3,13,2,2,3.]],threshold:-0.0210279691964388,right_val:0.4938226044178009,left_val:0.1183653995394707},{features:[[16,12,1,2,-1.],[16,13,1,1,2.]],threshold:3.6017020465806127e-004,right_val:0.4116711020469666,left_val:0.5325019955635071},{features:[[1,14,6,6,-1.],[1,14,3,3,2.],[4,17,3,3,2.]],threshold:-0.0172197297215462,right_val:0.4664269089698792,left_val:0.6278762221336365},{features:[[13,1,3,6,-1.],[14,1,1,6,3.]],threshold:-7.8672142699360847e-003,right_val:0.5249736905097961,left_val:0.3403415083885193},{features:[[8,8,2,2,-1.],[8,9,2,1,2.]],threshold:-4.4777389848604798e-004,right_val:0.5086259245872498,left_val:0.3610411882400513},{features:[[9,9,3,3,-1.],[10,9,1,3,3.]],threshold:5.5486010387539864e-003,right_val:0.6203498244285584,left_val:0.4884265959262848},{features:[[8,7,3,3,-1.],[8,8,3,1,3.]],threshold:-6.9461148232221603e-003,right_val:0.5011097192764282,left_val:0.2625930011272430},{features:[[14,0,2,3,-1.],[14,0,1,3,2.]],threshold:1.3569870498031378e-004,right_val:0.5628312230110169,left_val:0.4340794980525971},{features:[[1,0,18,9,-1.],[7,0,6,9,3.]],threshold:-0.0458802506327629,right_val:0.4696274995803833,left_val:0.6507998704910278},{features:[[11,5,4,15,-1.],[11,5,2,15,2.]],threshold:-0.0215825606137514,right_val:0.5287616848945618,left_val:0.3826502859592438},{features:[[5,5,4,15,-1.],[7,5,2,15,2.]],threshold:-0.0202095396816731,right_val:0.5074477195739746,left_val:0.3233368098735809},{features:[[14,0,2,3,-1.],[14,0,1,3,2.]],threshold:5.8496710844337940e-003,right_val:0.4489670991897583,left_val:0.5177603960037231},{features:[[4,0,2,3,-1.],[5,0,1,3,2.]],threshold:-5.7476379879517481e-005,right_val:0.5246363878250122,left_val:0.4020850956439972},{features:[[11,12,2,2,-1.],[12,12,1,1,2.],[11,13,1,1,2.]],threshold:-1.1513100471347570e-003,right_val:0.4905154109001160,left_val:0.6315072178840637},{features:[[7,12,2,2,-1.],[7,12,1,1,2.],[8,13,1,1,2.]],threshold:1.9862831104546785e-003,right_val:0.6497151255607605,left_val:0.4702459871768951},{features:[[12,0,3,4,-1.],[13,0,1,4,3.]],threshold:-5.2719512023031712e-003,right_val:0.5227652788162231,left_val:0.3650383949279785},{features:[[4,11,3,3,-1.],[4,12,3,1,3.]],threshold:1.2662699446082115e-003,right_val:0.3877618014812470,left_val:0.5166100859642029},{features:[[12,7,4,2,-1.],[12,8,4,1,2.]],threshold:-6.2919440679252148e-003,right_val:0.5023847818374634,left_val:0.7375894188880920},{features:[[8,10,3,2,-1.],[9,10,1,2,3.]],threshold:6.7360111279413104e-004,right_val:0.5495585799217224,left_val:0.4423226118087769},{features:[[9,9,3,2,-1.],[10,9,1,2,3.]],threshold:-1.0523450328037143e-003,right_val:0.4859583079814911,left_val:0.5976396203041077},{features:[[8,9,3,2,-1.],[9,9,1,2,3.]],threshold:-4.4216238893568516e-004,right_val:0.4398930966854096,left_val:0.5955939292907715},{features:[[12,0,3,4,-1.],[13,0,1,4,3.]],threshold:1.1747940443456173e-003,right_val:0.4605058133602142,left_val:0.5349888205528259},{features:[[5,0,3,4,-1.],[6,0,1,4,3.]],threshold:5.2457437850534916e-003,right_val:0.2941577136516571,left_val:0.5049191117286682},{features:[[4,14,12,4,-1.],[10,14,6,2,2.],[4,16,6,2,2.]],threshold:-0.0245397202670574,right_val:0.5218586921691895,left_val:0.2550177872180939},{features:[[8,13,2,3,-1.],[8,14,2,1,3.]],threshold:7.3793041519820690e-004,right_val:0.5490816235542297,left_val:0.4424861073493958},{features:[[10,10,3,8,-1.],[10,14,3,4,2.]],threshold:1.4233799884095788e-003,right_val:0.4081355929374695,left_val:0.5319514274597168},{features:[[8,10,4,8,-1.],[8,10,2,4,2.],[10,14,2,4,2.]],threshold:-2.4149110540747643e-003,right_val:0.5238950252532959,left_val:0.4087659120559692},{features:[[10,8,3,1,-1.],[11,8,1,1,3.]],threshold:-1.2165299849584699e-003,right_val:0.4908052980899811,left_val:0.5674579143524170},{features:[[9,12,1,6,-1.],[9,15,1,3,2.]],threshold:-1.2438809499144554e-003,right_val:0.5256118178367615,left_val:0.4129425883293152},{features:[[10,8,3,1,-1.],[11,8,1,1,3.]],threshold:6.1942739412188530e-003,right_val:0.7313653230667114,left_val:0.5060194134712219},{features:[[7,8,3,1,-1.],[8,8,1,1,3.]],threshold:-1.6607169527560472e-003,right_val:0.4596369862556458,left_val:0.5979632139205933},{features:[[5,2,15,14,-1.],[5,9,15,7,2.]],threshold:-0.0273162592202425,right_val:0.5308842062950134,left_val:0.4174365103244782},{features:[[2,1,2,10,-1.],[2,1,1,5,2.],[3,6,1,5,2.]],threshold:-1.5845570014789701e-003,right_val:0.4519486129283905,left_val:0.5615804791450501},{features:[[14,14,2,3,-1.],[14,15,2,1,3.]],threshold:-1.5514739789068699e-003,right_val:0.5360785126686096,left_val:0.4076187014579773},{features:[[2,7,3,3,-1.],[3,7,1,3,3.]],threshold:3.8446558755822480e-004,right_val:0.5430442094802856,left_val:0.4347293972969055},{features:[[17,4,3,3,-1.],[17,5,3,1,3.]],threshold:-0.0146722598001361,right_val:0.5146093964576721,left_val:0.1659304946660996},{features:[[0,4,3,3,-1.],[0,5,3,1,3.]],threshold:8.1608882173895836e-003,right_val:0.1884745955467224,left_val:0.4961819052696228},{features:[[13,5,6,2,-1.],[16,5,3,1,2.],[13,6,3,1,2.]],threshold:1.1121659772470593e-003,right_val:0.6093816161155701,left_val:0.4868263900279999},{features:[[4,19,12,1,-1.],[8,19,4,1,3.]],threshold:-7.2603770531713963e-003,right_val:0.4690375924110413,left_val:0.6284325122833252},{features:[[12,12,2,4,-1.],[12,14,2,2,2.]],threshold:-2.4046430189628154e-004,right_val:0.4046044051647186,left_val:0.5575000047683716},{features:[[3,15,1,3,-1.],[3,16,1,1,3.]],threshold:-2.3348190006799996e-004,right_val:0.5252848267555237,left_val:0.4115762114524841},{features:[[11,16,6,4,-1.],[11,16,3,4,2.]],threshold:5.5736480280756950e-003,right_val:0.5690100789070129,left_val:0.4730072915554047},{features:[[2,10,3,10,-1.],[3,10,1,10,3.]],threshold:0.0306237693876028,right_val:0.1740095019340515,left_val:0.4971886873245239},{features:[[12,8,2,4,-1.],[12,8,1,4,2.]],threshold:9.2074798885732889e-004,right_val:0.4354872107505798,left_val:0.5372117757797241},{features:[[6,8,2,4,-1.],[7,8,1,4,2.]],threshold:-4.3550739064812660e-005,right_val:0.4347316920757294,left_val:0.5366883873939514},{features:[[10,14,2,3,-1.],[10,14,1,3,2.]],threshold:-6.6452710889279842e-003,right_val:0.5160533189773560,left_val:0.3435518145561218},{features:[[5,1,10,3,-1.],[10,1,5,3,2.]],threshold:0.0432219989597797,right_val:0.7293652892112732,left_val:0.4766792058944702},{features:[[10,7,3,2,-1.],[11,7,1,2,3.]],threshold:2.2331769578158855e-003,right_val:0.5633171200752258,left_val:0.5029315948486328},{features:[[5,6,9,2,-1.],[8,6,3,2,3.]],threshold:3.1829739455133677e-003,right_val:0.5192136764526367,left_val:0.4016092121601105},{features:[[9,8,2,2,-1.],[9,9,2,1,2.]],threshold:-1.8027749320026487e-004,right_val:0.5417919754981995,left_val:0.4088315963745117},{features:[[2,11,16,6,-1.],[2,11,8,3,2.],[10,14,8,3,2.]],threshold:-5.2934689447283745e-003,right_val:0.5243561863899231,left_val:0.4075677096843720},{features:[[12,7,2,2,-1.],[13,7,1,1,2.],[12,8,1,1,2.]],threshold:1.2750959722325206e-003,right_val:0.6387010812759399,left_val:0.4913282990455627},{features:[[9,5,2,3,-1.],[9,6,2,1,3.]],threshold:4.3385322205722332e-003,right_val:0.2947346866130829,left_val:0.5031672120094299},{features:[[9,7,3,2,-1.],[10,7,1,2,3.]],threshold:8.5250744596123695e-003,right_val:0.6308869123458862,left_val:0.4949789047241211},{features:[[5,1,8,12,-1.],[5,7,8,6,2.]],threshold:-9.4266352243721485e-004,right_val:0.4285649955272675,left_val:0.5328366756439209},{features:[[13,5,2,2,-1.],[13,6,2,1,2.]],threshold:1.3609660090878606e-003,right_val:0.5941501259803772,left_val:0.4991525113582611},{features:[[5,5,2,2,-1.],[5,6,2,1,2.]],threshold:4.4782509212382138e-004,right_val:0.5854480862617493,left_val:0.4573504030704498},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:1.3360050506889820e-003,right_val:0.5849052071571350,left_val:0.4604358971118927},{features:[[4,14,2,3,-1.],[4,15,2,1,3.]],threshold:-6.0967548051849008e-004,right_val:0.5229423046112061,left_val:0.3969388902187347},{features:[[12,4,3,3,-1.],[12,5,3,1,3.]],threshold:-2.3656780831515789e-003,right_val:0.4898357093334198,left_val:0.5808320045471191},{features:[[5,4,3,3,-1.],[5,5,3,1,3.]],threshold:1.0734340175986290e-003,right_val:0.5470039248466492,left_val:0.4351210892200470},{features:[[9,14,2,6,-1.],[10,14,1,3,2.],[9,17,1,3,2.]],threshold:2.1923359017819166e-003,right_val:0.3842903971672058,left_val:0.5355060100555420},{features:[[8,14,3,2,-1.],[9,14,1,2,3.]],threshold:5.4968618787825108e-003,right_val:0.2827191948890686,left_val:0.5018138885498047},{features:[[9,5,6,6,-1.],[11,5,2,6,3.]],threshold:-0.0753688216209412,right_val:0.5148826837539673,left_val:0.1225076019763947},{features:[[5,5,6,6,-1.],[7,5,2,6,3.]],threshold:0.0251344703137875,right_val:0.7025446295738220,left_val:0.4731766879558563},{features:[[13,13,1,2,-1.],[13,14,1,1,2.]],threshold:-2.9358599931583740e-005,right_val:0.4656086862087250,left_val:0.5430532097816467},{features:[[0,2,10,2,-1.],[0,3,10,1,2.]],threshold:-5.8355910005047917e-004,right_val:0.5190119743347168,left_val:0.4031040072441101},{features:[[13,13,1,2,-1.],[13,14,1,1,2.]],threshold:-2.6639450807124376e-003,right_val:0.5161771178245544,left_val:0.4308126866817474},{features:[[5,7,2,2,-1.],[5,7,1,1,2.],[6,8,1,1,2.]],threshold:-1.3804089976474643e-003,right_val:0.4695515930652618,left_val:0.6219829916954041},{features:[[13,5,2,7,-1.],[13,5,1,7,2.]],threshold:1.2313219485804439e-003,right_val:0.4425831139087677,left_val:0.5379363894462585},{features:[[6,13,1,2,-1.],[6,14,1,1,2.]],threshold:-1.4644179827882908e-005,right_val:0.4222503006458283,left_val:0.5281640291213989},{features:[[11,0,3,7,-1.],[12,0,1,7,3.]],threshold:-0.0128188095986843,right_val:0.5179932713508606,left_val:0.2582092881202698},{features:[[0,3,2,16,-1.],[0,3,1,8,2.],[1,11,1,8,2.]],threshold:0.0228521898388863,right_val:0.7609264254570007,left_val:0.4778693020343781},{features:[[11,0,3,7,-1.],[12,0,1,7,3.]],threshold:8.2305970136076212e-004,right_val:0.4671724140644074,left_val:0.5340992212295532},{features:[[6,0,3,7,-1.],[7,0,1,7,3.]],threshold:0.0127701200544834,right_val:0.1472366005182266,left_val:0.4965761005878449},{features:[[11,16,8,4,-1.],[11,16,4,4,2.]],threshold:-0.0500515103340149,right_val:0.5016592144966126,left_val:0.6414994001388550},{features:[[1,16,8,4,-1.],[5,16,4,4,2.]],threshold:0.0157752707600594,right_val:0.5685362219810486,left_val:0.4522320032119751},{features:[[13,5,2,7,-1.],[13,5,1,7,2.]],threshold:-0.0185016207396984,right_val:0.5137959122657776,left_val:0.2764748930931091},{features:[[5,5,2,7,-1.],[6,5,1,7,2.]],threshold:2.4626250378787518e-003,right_val:0.3795408010482788,left_val:0.5141941905021668},{features:[[18,6,2,14,-1.],[18,13,2,7,2.]],threshold:0.0629161670804024,right_val:0.6580433845520020,left_val:0.5060648918151856},{features:[[6,10,3,4,-1.],[6,12,3,2,2.]],threshold:-2.1648500478477217e-005,right_val:0.4019886851310730,left_val:0.5195388197898865},{features:[[14,7,1,2,-1.],[14,8,1,1,2.]],threshold:2.1180990152060986e-003,right_val:0.5954458713531494,left_val:0.4962365031242371},{features:[[0,1,18,6,-1.],[0,1,9,3,2.],[9,4,9,3,2.]],threshold:-0.0166348908096552,right_val:0.5175446867942810,left_val:0.3757933080196381},{features:[[14,7,1,2,-1.],[14,8,1,1,2.]],threshold:-2.8899470344185829e-003,right_val:0.5057178735733032,left_val:0.6624013781547546},{features:[[0,6,2,14,-1.],[0,13,2,7,2.]],threshold:0.0767832621932030,right_val:0.8047714829444885,left_val:0.4795796871185303},{features:[[17,0,3,12,-1.],[18,0,1,12,3.]],threshold:3.9170677773654461e-003,right_val:0.5719941854476929,left_val:0.4937882125377655},{features:[[0,6,18,3,-1.],[0,7,18,1,3.]],threshold:-0.0726706013083458,right_val:0.4943903982639313,left_val:0.0538945607841015},{features:[[6,0,14,16,-1.],[6,8,14,8,2.]],threshold:0.5403950214385986,right_val:0.1143338978290558,left_val:0.5129774212837219},{features:[[0,0,3,12,-1.],[1,0,1,12,3.]],threshold:2.9510019812732935e-003,right_val:0.5698574185371399,left_val:0.4528343975543976},{features:[[13,0,3,7,-1.],[14,0,1,7,3.]],threshold:3.4508369863033295e-003,right_val:0.4218730926513672,left_val:0.5357726812362671},{features:[[5,7,1,2,-1.],[5,8,1,1,2.]],threshold:-4.2077939724549651e-004,right_val:0.4637925922870636,left_val:0.5916172862052918},{features:[[14,4,6,6,-1.],[14,6,6,2,3.]],threshold:3.3051050268113613e-003,right_val:0.4382042884826660,left_val:0.5273385047912598},{features:[[5,7,7,2,-1.],[5,8,7,1,2.]],threshold:4.7735060798004270e-004,right_val:0.5181884765625000,left_val:0.4046528041362763},{features:[[8,6,6,9,-1.],[8,9,6,3,3.]],threshold:-0.0259285103529692,right_val:0.5089386105537415,left_val:0.7452235817909241},{features:[[5,4,6,1,-1.],[7,4,2,1,3.]],threshold:-2.9729790985584259e-003,right_val:0.5058795213699341,left_val:0.3295435905456543},{features:[[13,0,6,4,-1.],[16,0,3,2,2.],[13,2,3,2,2.]],threshold:5.8508329093456268e-003,right_val:0.5793024897575378,left_val:0.4857144057750702},{features:[[1,2,18,12,-1.],[1,6,18,4,3.]],threshold:-0.0459675192832947,right_val:0.5380653142929077,left_val:0.4312731027603149},{features:[[3,2,17,12,-1.],[3,6,17,4,3.]],threshold:0.1558596044778824,right_val:0.1684713959693909,left_val:0.5196170210838318},{features:[[5,14,7,3,-1.],[5,15,7,1,3.]],threshold:0.0151648297905922,right_val:0.6735026836395264,left_val:0.4735757112503052},{features:[[10,14,1,3,-1.],[10,15,1,1,3.]],threshold:-1.0604249546304345e-003,right_val:0.4775702953338623,left_val:0.5822926759719849},{features:[[3,14,3,3,-1.],[3,15,3,1,3.]],threshold:6.6476291976869106e-003,right_val:0.2319535017013550,left_val:0.4999198913574219},{features:[[14,4,6,6,-1.],[14,6,6,2,3.]],threshold:-0.0122311301529408,right_val:0.5262982249259949,left_val:0.4750893115997315},{features:[[0,4,6,6,-1.],[0,6,6,2,3.]],threshold:5.6528882123529911e-003,right_val:0.3561818897724152,left_val:0.5069767832756043},{features:[[12,5,4,3,-1.],[12,6,4,1,3.]],threshold:1.2977829901501536e-003,right_val:0.5619062781333923,left_val:0.4875693917274475},{features:[[4,5,4,3,-1.],[4,6,4,1,3.]],threshold:0.0107815898954868,right_val:0.6782308220863342,left_val:0.4750770032405853},{features:[[18,0,2,6,-1.],[18,2,2,2,3.]],threshold:2.8654779307544231e-003,right_val:0.4290736019611359,left_val:0.5305461883544922},{features:[[8,1,4,9,-1.],[10,1,2,9,2.]],threshold:2.8663428965955973e-003,right_val:0.5539351105690002,left_val:0.4518479108810425},{features:[[6,6,8,2,-1.],[6,6,4,2,2.]],threshold:-5.1983320154249668e-003,right_val:0.5434188842773438,left_val:0.4149119853973389},{features:[[6,5,4,2,-1.],[6,5,2,1,2.],[8,6,2,1,2.]],threshold:5.3739990107715130e-003,right_val:0.6507657170295715,left_val:0.4717896878719330},{features:[[10,5,2,3,-1.],[10,6,2,1,3.]],threshold:-0.0146415298804641,right_val:0.5161777138710022,left_val:0.2172164022922516},{features:[[9,5,1,3,-1.],[9,6,1,1,3.]],threshold:-1.5042580344015732e-005,right_val:0.4298836886882782,left_val:0.5337383747100830},{features:[[9,10,2,2,-1.],[9,11,2,1,2.]],threshold:-1.1875660129589960e-004,right_val:0.5582447052001953,left_val:0.4604594111442566},{features:[[0,8,4,3,-1.],[0,9,4,1,3.]],threshold:0.0169955305755138,right_val:0.0738800764083862,left_val:0.4945895075798035},{features:[[6,0,8,6,-1.],[6,3,8,3,2.]],threshold:-0.0350959412753582,right_val:0.4977591037750244,left_val:0.7005509138107300},{features:[[1,0,6,4,-1.],[1,0,3,2,2.],[4,2,3,2,2.]],threshold:2.4217350874096155e-003,right_val:0.5477694272994995,left_val:0.4466265141963959},{features:[[13,0,3,7,-1.],[14,0,1,7,3.]],threshold:-9.6340337768197060e-004,right_val:0.5313338041305542,left_val:0.4714098870754242},{features:[[9,16,2,2,-1.],[9,17,2,1,2.]],threshold:1.6391130338888615e-004,right_val:0.5342242121696472,left_val:0.4331546127796173},{features:[[11,4,6,10,-1.],[11,9,6,5,2.]],threshold:-0.0211414601653814,right_val:0.5204498767852783,left_val:0.2644700109958649},{features:[[0,10,19,2,-1.],[0,11,19,1,2.]],threshold:8.7775202700868249e-004,right_val:0.4152742922306061,left_val:0.5208349823951721},{features:[[9,5,8,9,-1.],[9,8,8,3,3.]],threshold:-0.0279439203441143,right_val:0.5018811821937561,left_val:0.6344125270843506},{features:[[4,0,3,7,-1.],[5,0,1,7,3.]],threshold:6.7297378554940224e-003,right_val:0.3500863909721375,left_val:0.5050438046455383},{features:[[8,6,4,12,-1.],[10,6,2,6,2.],[8,12,2,6,2.]],threshold:0.0232810396701097,right_val:0.6968677043914795,left_val:0.4966318011283875},{features:[[0,2,6,4,-1.],[0,4,6,2,2.]],threshold:-0.0116449799388647,right_val:0.5049629807472229,left_val:0.3300260007381439},{features:[[8,15,4,3,-1.],[8,16,4,1,3.]],threshold:0.0157643090933561,right_val:0.7321153879165649,left_val:0.4991598129272461},{features:[[8,0,3,7,-1.],[9,0,1,7,3.]],threshold:-1.3611479662358761e-003,right_val:0.5160670876502991,left_val:0.3911735117435455},{features:[[9,5,3,4,-1.],[10,5,1,4,3.]],threshold:-8.1522337859496474e-004,right_val:0.4949719011783600,left_val:0.5628911256790161},{features:[[8,5,3,4,-1.],[9,5,1,4,3.]],threshold:-6.0066272271797061e-004,right_val:0.4550595879554749,left_val:0.5853595137596130},{features:[[7,6,6,1,-1.],[9,6,2,1,3.]],threshold:4.9715518252924085e-004,right_val:0.5443599224090576,left_val:0.4271470010280609},{features:[[7,14,4,4,-1.],[7,14,2,2,2.],[9,16,2,2,2.]],threshold:2.3475370835512877e-003,right_val:0.3887656927108765,left_val:0.5143110752105713},{features:[[13,14,4,6,-1.],[15,14,2,3,2.],[13,17,2,3,2.]],threshold:-8.9261569082736969e-003,right_val:0.4971720874309540,left_val:0.6044502258300781},{features:[[7,8,1,8,-1.],[7,12,1,4,2.]],threshold:-0.0139199104160070,right_val:0.5000367760658264,left_val:0.2583160996437073},{features:[[16,0,2,8,-1.],[17,0,1,4,2.],[16,4,1,4,2.]],threshold:1.0209949687123299e-003,right_val:0.5560358166694641,left_val:0.4857374131679535},{features:[[2,0,2,8,-1.],[2,0,1,4,2.],[3,4,1,4,2.]],threshold:-2.7441629208624363e-003,right_val:0.4645777046680450,left_val:0.5936884880065918},{features:[[6,1,14,3,-1.],[6,2,14,1,3.]],threshold:-0.0162001308053732,right_val:0.5193495154380798,left_val:0.3163014948368073},{features:[[7,9,3,10,-1.],[7,14,3,5,2.]],threshold:4.3331980705261230e-003,right_val:0.3458878993988037,left_val:0.5061224102973938},{features:[[9,14,2,2,-1.],[9,15,2,1,2.]],threshold:5.8497930876910686e-004,right_val:0.5870177745819092,left_val:0.4779017865657806},{features:[[7,7,6,8,-1.],[7,11,6,4,2.]],threshold:-2.2466450463980436e-003,right_val:0.5374773144721985,left_val:0.4297851026058197},{features:[[9,7,3,6,-1.],[9,10,3,3,2.]],threshold:2.3146099410951138e-003,right_val:0.4640969932079315,left_val:0.5438671708106995},{features:[[7,13,3,3,-1.],[7,14,3,1,3.]],threshold:8.7679121643304825e-003,right_val:0.6771789789199829,left_val:0.4726893007755280},{features:[[9,9,2,2,-1.],[9,10,2,1,2.]],threshold:-2.2448020172305405e-004,right_val:0.5428048968315125,left_val:0.4229173064231873},{features:[[0,1,18,2,-1.],[6,1,6,2,3.]],threshold:-7.4336021207273006e-003,right_val:0.4683673977851868,left_val:0.6098880767822266},{features:[[7,1,6,14,-1.],[7,8,6,7,2.]],threshold:-2.3189240600913763e-003,right_val:0.4424242079257965,left_val:0.5689436793327332},{features:[[1,9,18,1,-1.],[7,9,6,1,3.]],threshold:-2.1042178850620985e-003,right_val:0.5187087059020996,left_val:0.3762221038341522},{features:[[9,7,2,2,-1.],[9,7,1,2,2.]],threshold:4.6034841216169298e-004,right_val:0.5771207213401794,left_val:0.4699405133724213},{features:[[9,3,2,9,-1.],[10,3,1,9,2.]],threshold:1.0547629790380597e-003,right_val:0.5601701736450195,left_val:0.4465216994285584},{features:[[18,14,2,3,-1.],[18,15,2,1,3.]],threshold:8.7148818420246243e-004,right_val:0.3914709091186523,left_val:0.5449805259704590},{features:[[7,11,3,1,-1.],[8,11,1,1,3.]],threshold:3.3364820410497487e-004,right_val:0.5645738840103149,left_val:0.4564009010791779},{features:[[10,8,3,4,-1.],[11,8,1,4,3.]],threshold:-1.4853250468149781e-003,right_val:0.4692778885364533,left_val:0.5747377872467041},{features:[[7,14,3,6,-1.],[8,14,1,6,3.]],threshold:3.0251620337367058e-003,right_val:0.3762814104557037,left_val:0.5166196823120117},{features:[[10,8,3,4,-1.],[11,8,1,4,3.]],threshold:5.0280741415917873e-003,right_val:0.6151527166366577,left_val:0.5002111792564392},{features:[[7,8,3,4,-1.],[8,8,1,4,3.]],threshold:-5.8164511574432254e-004,right_val:0.4390751123428345,left_val:0.5394598245620728},{features:[[7,9,6,9,-1.],[7,12,6,3,3.]],threshold:0.0451415292918682,right_val:0.2063035964965820,left_val:0.5188326835632324},{features:[[0,14,2,3,-1.],[0,15,2,1,3.]],threshold:-1.0795620037242770e-003,right_val:0.5137907266616821,left_val:0.3904685080051422},{features:[[11,12,1,2,-1.],[11,13,1,1,2.]],threshold:1.5995999274309725e-004,right_val:0.5427504181861877,left_val:0.4895322918891907},{features:[[4,3,8,3,-1.],[8,3,4,3,2.]],threshold:-0.0193592701107264,right_val:0.4773507118225098,left_val:0.6975228786468506},{features:[[0,4,20,6,-1.],[0,4,10,6,2.]],threshold:0.2072550952434540,right_val:0.3034991919994354,left_val:0.5233635902404785},{features:[[9,14,1,3,-1.],[9,15,1,1,3.]],threshold:-4.1953290929086506e-004,right_val:0.4460186064243317,left_val:0.5419396758079529},{features:[[8,14,4,3,-1.],[8,15,4,1,3.]],threshold:2.2582069505006075e-003,right_val:0.6027408838272095,left_val:0.4815764129161835},{features:[[0,15,14,4,-1.],[0,17,14,2,2.]],threshold:-6.7811207845807076e-003,right_val:0.5183305740356445,left_val:0.3980278968811035},{features:[[1,14,18,6,-1.],[1,17,18,3,2.]],threshold:0.0111543098464608,right_val:0.4188759922981262,left_val:0.5431231856346130},{features:[[0,0,10,6,-1.],[0,0,5,3,2.],[5,3,5,3,2.]],threshold:0.0431624315679073,right_val:0.6522961258888245,left_val:0.4738228023052216}],threshold:105.7611007690429700}],size:[20,20],tilted:false};

	  
	  this.findFace = function () {
	    if (image.tagName == 'VIDEO' || image.tagName == 'IMG') {
	      work_ctx.drawImage(image, 0, 0);
	    } 
	    var imageData = work_ctx.getImageData(0, 0, w, h);
	                  
	    jsfeat.imgproc.grayscale(imageData.data, w, h, img_u8);
	    
	    jsfeat.imgproc.equalize_histogram(img_u8, img_u8);
	    
	    jsfeat.imgproc.compute_integral_image(img_u8, ii_sum, ii_sqsum, null);

	    var rects = jsfeat.haar.detect_multi_scale(ii_sum, ii_sqsum, ii_tilted, null, img_u8.cols, img_u8.rows, classifier, 1.15, 2);
	    
	    rects = jsfeat.haar.group_rectangles(rects, 1);
	    
	    var rl = rects.length;
	    
	    if (rl > 0) {
	      var best = rects[0];
	      for (var i = 1;i < rl;i++) {
	          if (rects[i].neighbors > best.neighbors) {
	              best = rects[i]
	          } else if (rects[i].neighbors == best.neighbors) {
	              if (rects[i].confidence > best.confidence) best = rects[i];
	          }
	      }
	      return [best];
	    } else {
	      return false;
	    }
	  }
	  
	}
	}
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 12 */
/***/ function(module, exports) {

	var jsfeat=jsfeat||{REVISION:"ALPHA"};(function(r){var o=1.192092896e-7;var l=1e-37;var m=256,i=512,h=1024,x=2048,w=4096;var A=1,n=2,b=3,p=4;var z=new Int32Array([-1,1,4,-1,4,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,8]);var y=(function(){return function(B){return(B&65280)}})();var k=(function(){return function(B){return(B&255)}})();var c=(function(){return function(B){return z[(B&65280)>>8]}})();var a=0;var f=1;var e=2;var u=3;var d=1;var s=1;var g=2;var v=(function(){function B(D,C){this.size=((D+7)|0)&-8;if(typeof C==="undefined"){this.buffer=new ArrayBuffer(this.size)}else{this.buffer=C;this.size=C.length}this.u8=new Uint8Array(this.buffer);this.i32=new Int32Array(this.buffer);this.f32=new Float32Array(this.buffer);this.f64=new Float64Array(this.buffer)}return B})();var q=(function(){function B(F,D,E,C){this.type=y(E)|0;this.channel=k(E)|0;this.cols=F|0;this.rows=D|0;if(typeof C==="undefined"){this.allocate()}else{this.buffer=C;this.data=this.type&m?this.buffer.u8:(this.type&i?this.buffer.i32:(this.type&h?this.buffer.f32:this.buffer.f64))}}B.prototype.allocate=function(){delete this.data;delete this.buffer;this.buffer=new v((this.cols*c(this.type)*this.channel)*this.rows);this.data=this.type&m?this.buffer.u8:(this.type&i?this.buffer.i32:(this.type&h?this.buffer.f32:this.buffer.f64))};B.prototype.copy_to=function(D){var C=D.data,G=this.data;var E=0,F=(this.cols*this.rows*this.channel)|0;for(;E<F-4;E+=4){C[E]=G[E];C[E+1]=G[E+1];C[E+2]=G[E+2];C[E+3]=G[E+3]}for(;E<F;++E){C[E]=G[E]}};B.prototype.resize=function(F,D,C){if(typeof C==="undefined"){C=this.channel}var E=(F*c(this.type)*C)*D;if(E>this.buffer.size){this.cols=F;this.rows=D;this.channel=C;this.allocate()}else{this.cols=F;this.rows=D;this.channel=C}};return B})();var t=(function(){function B(C){this.levels=C|0;this.data=new Array(C);this.pyrdown=jsfeat.imgproc.pyrdown}B.prototype.allocate=function(C,E,F){var D=this.levels;while(--D>=0){this.data[D]=new q(C>>D,E>>D,F)}};B.prototype.build=function(F,E){if(typeof E==="undefined"){E=true}var H=2,D=F,C=this.data[0];if(!E){var G=F.cols*F.rows;while(--G>=0){C.data[G]=F.data[G]}}C=this.data[1];this.pyrdown(D,C);for(;H<this.levels;++H){D=C;C=this.data[H];this.pyrdown(D,C)}};return B})();var j=(function(){function B(C,G,E,F,D){if(typeof C==="undefined"){C=0}if(typeof G==="undefined"){G=0}if(typeof E==="undefined"){E=0}if(typeof F==="undefined"){F=0}if(typeof D==="undefined"){D=-1}this.x=C;this.y=G;this.score=E;this.level=F;this.angle=D}return B})();r.U8_t=m;r.S32_t=i;r.F32_t=h;r.S64_t=x;r.F64_t=w;r.C1_t=A;r.C2_t=n;r.C3_t=b;r.C4_t=p;r.U8C1_t=m|A;r.U8C3_t=m|b;r.U8C4_t=m|p;r.F32C1_t=h|A;r.F32C2_t=h|n;r.S32C1_t=i|A;r.S32C2_t=i|n;r.EPSILON=o;r.FLT_MIN=l;r.COLOR_RGBA2GRAY=a;r.COLOR_RGB2GRAY=f;r.COLOR_BGRA2GRAY=e;r.COLOR_BGR2GRAY=u;r.BOX_BLUR_NOSCALE=d;r.SVD_U_T=s;r.SVD_V_T=g;r.get_data_type=y;r.get_channel=k;r.get_data_type_size=c;r.data_t=v;r.matrix_t=q;r.pyramid_t=t;r.keypoint_t=j})(jsfeat);(function(b){var a=(function(){var f=(function(){function g(h){this.next=null;this.data=new jsfeat.data_t(h);this.size=this.data.size;this.buffer=this.data.buffer;this.u8=this.data.u8;this.i32=this.data.i32;this.f32=this.data.f32;this.f64=this.data.f64}g.prototype.resize=function(h){delete this.data;this.data=new jsfeat.data_t(h);this.size=this.data.size;this.buffer=this.data.buffer;this.u8=this.data.u8;this.i32=this.data.i32;this.f32=this.data.f32;this.f64=this.data.f64};return g})();var e,c;var d=0;return{allocate:function(g,k){e=c=new f(k);for(var h=0;h<g;++h){var j=new f(k);c=c.next=j;d++}},get_buffer:function(g){var h=e;e=e.next;d--;if(g>h.size){h.resize(g)}return h},put_buffer:function(g){c=c.next=g;d++}}})();b.cache=a;a.allocate(30,640*4)})(jsfeat);(function(b){var a=(function(){var c=new Int32Array(48*2);return{get_gaussian_kernel:function(p,m,e,l){var f=0,j=0,o=0,n=0,d=0;var g=0;var h=jsfeat.cache.get_buffer(p<<2);var k=h.f32;if((p&1)==1&&p<=7&&m<=0){switch(p>>1){case 0:k[0]=1;g=1;break;case 1:k[0]=0.25,k[1]=0.5,k[2]=0.25;g=0.25+0.5+0.25;break;case 2:k[0]=0.0625,k[1]=0.25,k[2]=0.375,k[3]=0.25,k[4]=0.0625;g=0.0625+0.25+0.375+0.25+0.0625;break;case 3:k[0]=0.03125,k[1]=0.109375,k[2]=0.21875,k[3]=0.28125,k[4]=0.21875,k[5]=0.109375,k[6]=0.03125;g=0.03125+0.109375+0.21875+0.28125+0.21875+0.109375+0.03125;break}}else{n=m>0?m:((p-1)*0.5-1)*0.3+0.8;d=-0.5/(n*n);for(;f<p;++f){j=f-(p-1)*0.5;o=Math.exp(d*j*j);k[f]=o;g+=o}}if(l&jsfeat.U8_t){g=256/g;for(f=0;f<p;++f){e[f]=(k[f]*g+0.5)|0}}else{g=1/g;for(f=0;f<p;++f){e[f]=k[f]*g}}jsfeat.cache.put_buffer(h)},perspective_4point_transform:function(x,B,r,w,g,A,q,v,f,z,p,u,e,y,o,t,d){var Y=B;var X=z;var W=q;var V=Y*X*W;var U=o;var T=Y*U;var S=X*T;var R=p;var n=Y*R;var m=A;var k=r;var j=y;var i=k*j;var h=i*m;var ax=j*m*R;var aw=j*W;var aq=j*R;var ao=X*W;var am=U*X;var aj=U*m;var ag=R*m;var Q=1/(aw-aq-ao+am-aj+ag);var O=Y*j;var N=k*m;var M=W*Y;var L=U*M;var K=k*X;var I=i*R;var G=k*R*m;var D=W*U*X;var C=U*k;var av=-(S-V+n*m-m*T-i*X+h-ax+aw*X)*Q;var au=(V-S-O*W+O*R+h-X*N+aj*X-ax)*Q;var ar=Y;var ap=(-R*T+L+K*W-i*W+I-G+aj*R-D)*Q;var an=(-L+M*R-C*X+I-G+C*m+D-aw*R)*Q;var al=k;var ai=(-n+M+K-N+aq-aw-am+aj)*Q;var af=(-T+n+i-K+aj-ag-aw+ao)*Q;Y=w;X=u;W=f;V=Y*X*W;U=d;T=Y*U;S=X*T;R=e;n=Y*R;m=v;k=g;j=t;i=k*j;h=i*m;ax=j*m*R;aw=j*W;aq=j*R;ao=X*W;am=U*X;aj=U*m;ag=R*m;Q=1/(aw-aq-ao+am-aj+ag);O=Y*j;N=k*m;M=W*Y;L=U*M;K=k*X;I=i*R;G=k*R*m;D=W*U*X;C=U*k;var ak=-(S-V+n*m-m*T-i*X+h-ax+aw*X)*Q;var ah=(V-S-O*W+O*R+h-X*N+aj*X-ax)*Q;var ae=Y;var ad=(-R*T+L+K*W-i*W+I-G+aj*R-D)*Q;var ac=(-L+M*R-C*X+I-G+C*m+D-aw*R)*Q;var ab=k;var aa=(-n+M+K-N+aq-aw-am+aj)*Q;var Z=(-T+n+i-K+aj-ag-aw+ao)*Q;X=an-af*al;W=av*an;V=av*al;T=ap*au;S=ar*ap;n=au*ai;var l=ar*ai;j=1/(W-V*af-T+S*af+n*al-l*an);h=-ap+al*ai;var at=-ap*af+an*ai;ag=-au+ar*af;var P=av-l;N=av*af-n;M=-au*al+ar*an;var J=V-S;var H=W-T;G=X*j;var F=ag*j;var E=M*j;var s=x.data;s[0]=ak*G+ah*(h*j)-ae*(at*j);s[1]=ak*F+ah*(P*j)-ae*(N*j);s[2]=-ak*E-ah*(J*j)+ae*(H*j);s[3]=ad*G+ac*(h*j)-ab*(at*j);s[4]=ad*F+ac*(P*j)-ab*(N*j);s[5]=-ad*E-ac*(J*j)+ab*(H*j);s[6]=aa*G+Z*(h*j)-at*j;s[7]=aa*F+Z*(P*j)-N*j;s[8]=-aa*E-Z*(J*j)+H*j},qsort:function(o,J,s,u){var D=7;var v,r,q,p;var C=0,j=0,G=0,B=0,z=0,A=0,e=0,y=0,E=0;var x=0,w=0,h=0,g=0,l=0,I=0,H=0,F=0,f=0;var k=c;if((s-J+1)<=1){return}k[0]=J;k[1]=s;while(C>=0){j=k[C<<1];G=k[(C<<1)+1];C--;for(;;){z=(G-j)+1;if(z<=D){for(e=j+1;e<=G;e++){for(y=e;y>j&&u(o[y],o[y-1]);y--){v=o[y];o[y]=o[y-1];o[y-1]=v}}break}else{f=0;x=j;h=G;l=j+(z>>1);if(z>40){E=z>>3;I=j,H=j+E,F=j+(E<<1);r=o[I],q=o[H],p=o[F];j=u(r,q)?(u(q,p)?H:(u(r,p)?F:I)):(u(p,q)?H:(u(r,p)?I:F));I=l-E,H=l,F=l+E;r=o[I],q=o[H],p=o[F];l=u(r,q)?(u(q,p)?H:(u(r,p)?F:I)):(u(p,q)?H:(u(r,p)?I:F));I=G-(E<<1),H=G-E,F=G;r=o[I],q=o[H],p=o[F];G=u(r,q)?(u(q,p)?H:(u(r,p)?F:I)):(u(p,q)?H:(u(r,p)?I:F))}I=j,H=l,F=G;r=o[I],q=o[H],p=o[F];l=u(r,q)?(u(q,p)?H:(u(r,p)?F:I)):(u(p,q)?H:(u(r,p)?I:F));if(l!=x){v=o[l];o[l]=o[x];o[x]=v;l=x}j=w=x+1;G=g=h;r=o[l];for(;;){while(j<=G&&!u(r,o[j])){if(!u(o[j],r)){if(j>w){v=o[w];o[w]=o[j];o[j]=v}f=1;w++}j++}while(j<=G&&!u(o[G],r)){if(!u(r,o[G])){if(G<g){v=o[g];o[g]=o[G];o[G]=v}f=1;g--}G--}if(j>G){break}v=o[j];o[j]=o[G];o[G]=v;f=1;j++;G--}if(f==0){j=x,G=h;for(e=j+1;e<=G;e++){for(y=e;y>j&&u(o[y],o[y-1]);y--){v=o[y];o[y]=o[y-1];o[y-1]=v}}break}z=Math.min((w-x),(j-w));A=(j-z)|0;for(B=0;B<z;++B,++A){v=o[x+B];o[x+B]=o[A];o[A]=v}z=Math.min((h-g),(g-G));A=(h-z+1)|0;for(B=0;B<z;++B,++A){v=o[j+B];o[j+B]=o[A];o[A]=v}z=(j-w);A=(g-G);if(z>1){if(A>1){if(z>A){++C;k[C<<1]=x;k[(C<<1)+1]=x+z-1;j=h-A+1,G=h}else{++C;k[C<<1]=h-A+1;k[(C<<1)+1]=h;j=x,G=x+z-1}}else{j=x,G=x+z-1}}else{if(A>1){j=h-A+1,G=h}else{break}}}}}},median:function(k,d,i){var e;var f=0,j=0,g=0,h=(d+i)>>1;for(;;){if(i<=d){return k[h]}if(i==(d+1)){if(k[d]>k[i]){e=k[d];k[d]=k[i];k[i]=e}return k[h]}f=((d+i)>>1);if(k[f]>k[i]){e=k[f];k[f]=k[i];k[i]=e}if(k[d]>k[i]){e=k[d];k[d]=k[i];k[i]=e}if(k[f]>k[d]){e=k[f];k[f]=k[d];k[d]=e}j=(d+1);e=k[f];k[f]=k[j];k[j]=e;g=i;for(;;){do{++j}while(k[d]>k[j]);do{--g}while(k[g]>k[d]);if(g<j){break}e=k[j];k[j]=k[g];k[g]=e}e=k[d];k[d]=k[g];k[g]=e;if(g<=h){d=j}else{if(g>=h){i=(g-1)}}}return 0}}})();b.math=a})(jsfeat);(function(b){var a=(function(){return{identity:function(j,g){if(typeof g==="undefined"){g=1}var i=j.data;var f=j.rows,h=j.cols,e=(h+1)|0;var c=f*h;var d=c;while(--c>=0){i[c]=0}c=d;d=0;while(d<c){i[d]=g;d=d+e}},transpose:function(f,d){var l=0,h=0,k=d.rows,c=d.cols;var n=0,e=0,m=0;var o=d.data,g=f.data;for(;l<k;e+=1,n+=c,l++){m=e;for(h=0;h<c;m+=k,h++){g[m]=o[n+h]}}},multiply:function(l,n,m){var u=0,s=0,o=0;var r=0,t=0,q=0,w=0,g=0;var f=n.cols,e=n.rows,p=m.cols;var v=n.data,d=m.data,h=l.data;var c=0;for(;u<e;r+=f,u++){for(w=0,s=0;s<p;g++,w++,s++){q=w;t=r;c=0;for(o=0;o<f;t++,q+=p,o++){c+=v[t]*d[q]}h[g]=c}}},multiply_ABt:function(c,g,d){var p=0,n=0,m=0;var r=0,l=0,f=0,u=0;var e=g.cols,o=g.rows,q=d.rows;var v=g.data,t=d.data,h=c.data;var s=0;for(;p<o;r+=e,p++){for(f=0,n=0;n<q;u++,n++){l=r;s=0;for(m=0;m<e;l++,f++,m++){s+=v[l]*t[f]}h[u]=s}}},multiply_AtB:function(l,n,m){var u=0,s=0,o=0;var r=0,t=0,q=0,w=0,g=0;var f=n.cols,e=n.rows,p=m.cols;var v=n.data,d=m.data,h=l.data;var c=0;for(;u<f;r++,u++){for(w=0,s=0;s<p;g++,w++,s++){q=w;t=r;c=0;for(o=0;o<e;t+=f,q+=p,o++){c+=v[t]*d[q]}h[g]=c}}},multiply_AAt:function(d,h){var q=0,o=0,n=0;var c=0,r=0,m=0,g=0,e=0,u=0;var f=h.cols,p=h.rows;var t=h.data,l=d.data;var s=0;for(;q<p;c+=p+1,r=m,q++){e=c;u=c;g=r;for(o=q;o<p;e++,u+=p,o++){m=r;s=0;for(n=0;n<f;n++){s+=t[m++]*t[g++]}l[e]=s;l[u]=s}}},multiply_AtA:function(c,g){var r=0,p=0,n=0;var s=0,m=0,f=0,o=0,d=0,l=0;var e=g.cols,q=g.rows;var u=g.data,h=c.data;var t=0;for(;r<e;o+=e,r++){s=r;l=o+r;d=l;for(p=r;p<e;d++,l+=e,p++){m=s;f=p;t=0;for(n=0;n<q;m+=e,f+=e,n++){t+=u[m]*u[f]}h[d]=t;h[l]=t}}},identity_3x3:function(e,d){if(typeof d==="undefined"){d=1}var c=e.data;c[0]=c[4]=c[8]=d;c[1]=c[2]=c[3]=0;c[5]=c[6]=c[7]=0},invert_3x3:function(s,e){var o=s.data,h=e.data;var n=o[4];var m=o[8];var l=o[5];var k=o[7];var j=o[0];var i=j*n;var v=j*l;var u=o[3];var t=o[1];var r=u*t;var q=o[2];var p=u*q;var g=o[6];var f=g*t;var d=g*q;var c=1/(i*m-v*k-r*m+p*k+f*l-d*n);h[0]=(n*m-l*k)*c;h[1]=-(t*m-q*k)*c;h[2]=-(-t*l+q*n)*c;h[3]=-(u*m-l*g)*c;h[4]=(j*m-d)*c;h[5]=-(v-p)*c;h[6]=-(-u*k+n*g)*c;h[7]=-(j*k-f)*c;h[8]=(i-r)*c},multiply_3x3:function(r,v,t){var y=r.data,z=v.data,l=t.data;var x=z[0],w=z[1],u=z[2];var s=z[3],q=z[4],p=z[5];var o=z[6],n=z[7],m=z[8];var k=l[0],j=l[1],i=l[2];var h=l[3],g=l[4],f=l[5];var e=l[6],d=l[7],c=l[8];y[0]=x*k+w*h+u*e;y[1]=x*j+w*g+u*d;y[2]=x*i+w*f+u*c;y[3]=s*k+q*h+p*e;y[4]=s*j+q*g+p*d;y[5]=s*i+q*f+p*c;y[6]=o*k+n*h+m*e;y[7]=o*j+n*g+m*d;y[8]=o*i+n*f+m*c},mat3x3_determinant:function(d){var c=d.data;return c[0]*c[4]*c[8]-c[0]*c[5]*c[7]-c[3]*c[1]*c[8]+c[3]*c[2]*c[7]+c[6]*c[1]*c[5]-c[6]*c[2]*c[4]},determinant_3x3:function(h,g,f,e,d,c,k,j,i){return h*d*i-h*c*j-e*g*i+e*f*j+k*g*c-k*f*d}}})();b.matmath=a})(jsfeat);(function(b){var a=(function(){var f=function(g,j,i,h){h=g[j];g[j]=g[i];g[i]=h};var d=function(h,g){h=Math.abs(h);g=Math.abs(g);if(h>g){g/=h;return h*Math.sqrt(1+g*g)}if(g>0){h/=g;return g*Math.sqrt(1+h*h)}return 0};var c=function(H,o,q,r,h,I){var C=jsfeat.EPSILON;var N=0,M=0,L=0,J=0,K=0,D=0,R=0,G=0;var u=0,v=I*I*30;var E=0,U=0,F=0,x=0,z=0,B=0,Q=0,T=0,w=0;var P=jsfeat.cache.get_buffer(I<<2);var S=jsfeat.cache.get_buffer(I<<2);var O=P.i32;var g=S.i32;if(r){for(;N<I;N++){L=N*h;for(M=0;M<I;M++){r[L+M]=0}r[L+N]=1}}for(L=0;L<I;L++){q[L]=H[(o+1)*L];if(L<I-1){for(J=L+1,E=Math.abs(H[o*L+J]),N=L+2;N<I;N++){U=Math.abs(H[o*L+N]);if(E<U){E=U,J=N}}O[L]=J}if(L>0){for(J=0,E=Math.abs(H[L]),N=1;N<L;N++){U=Math.abs(H[o*N+L]);if(E<U){E=U,J=N}}g[L]=J}}if(I>1){for(;u<v;u++){for(L=0,E=Math.abs(H[O[0]]),N=1;N<I-1;N++){U=Math.abs(H[o*N+O[N]]);if(E<U){E=U,L=N}}K=O[L];for(N=1;N<I;N++){U=Math.abs(H[o*g[N]+N]);if(E<U){E=U,L=g[N],K=N}}F=H[o*L+K];if(Math.abs(F)<=C){break}x=(q[K]-q[L])*0.5;z=Math.abs(x)+d(F,x);B=d(F,z);Q=z/B;B=F/B;z=(F/z)*F;if(x<0){B=-B,z=-z}H[o*L+K]=0;q[L]-=z;q[K]+=z;for(N=0;N<L;N++){R=(o*N+L);G=(o*N+K);T=H[R];w=H[G];H[R]=T*Q-w*B;H[G]=T*B+w*Q}for(N=(L+1);N<K;N++){R=(o*L+N);G=(o*N+K);T=H[R];w=H[G];H[R]=T*Q-w*B;H[G]=T*B+w*Q}N=K+1;R=(o*L+N);G=(o*K+N);for(;N<I;N++,R++,G++){T=H[R];w=H[G];H[R]=T*Q-w*B;H[G]=T*B+w*Q}if(r){R=h*L;G=h*K;for(N=0;N<I;N++,R++,G++){T=r[R];w=r[G];r[R]=T*Q-w*B;r[G]=T*B+w*Q}}for(M=0;M<2;M++){D=M==0?L:K;if(D<I-1){for(J=D+1,E=Math.abs(H[o*D+J]),N=D+2;N<I;N++){U=Math.abs(H[o*D+N]);if(E<U){E=U,J=N}}O[D]=J}if(D>0){for(J=0,E=Math.abs(H[D]),N=1;N<D;N++){U=Math.abs(H[o*N+D]);if(E<U){E=U,J=N}}g[D]=J}}}}for(L=0;L<I-1;L++){J=L;for(N=L+1;N<I;N++){if(q[J]<q[N]){J=N}}if(L!=J){f(q,J,L,E);if(r){for(N=0;N<I;N++){f(r,h*J+N,h*L+N,E)}}}}jsfeat.cache.put_buffer(P);jsfeat.cache.put_buffer(S)};var e=function(D,l,h,M,v,T,S,E){var C=jsfeat.EPSILON*2;var q=jsfeat.FLT_MIN;var X=0,V=0,U=0,A=0,u=Math.max(T,30);var K=0,J=0,R=0,Q=0,F=0;var Y=0,O=0,N=0;var H=0,G=0,x=0,I=0,w=0,L=0,aa=0,P=0,Z=0;var z=4660;var B=0,y=0,o=0;var r=jsfeat.cache.get_buffer(S<<3);var g=r.f64;for(;X<S;X++){for(U=0,x=0;U<T;U++){N=D[X*l+U];x+=N*N}g[X]=x;if(M){for(U=0;U<S;U++){M[X*v+U]=0}M[X*v+X]=1}}for(;A<u;A++){F=0;for(X=0;X<S-1;X++){for(V=X+1;V<S;V++){K=(X*l)|0,J=(V*l)|0;aa=g[X],P=0,Z=g[V];U=2;P+=D[K]*D[J];P+=D[K+1]*D[J+1];for(;U<T;U++){P+=D[K+U]*D[J+U]}if(Math.abs(P)<=C*Math.sqrt(aa*Z)){continue}P*=2;I=aa-Z,w=d(P,I);if(I<0){L=(w-I)*0.5;O=Math.sqrt(L/w);Y=(P/(w*O*2))}else{Y=Math.sqrt((w+I)/(w*2));O=(P/(w*Y*2))}aa=0,Z=0;U=2;H=Y*D[K]+O*D[J];G=-O*D[K]+Y*D[J];D[K]=H;D[J]=G;aa+=H*H;Z+=G*G;H=Y*D[K+1]+O*D[J+1];G=-O*D[K+1]+Y*D[J+1];D[K+1]=H;D[J+1]=G;aa+=H*H;Z+=G*G;for(;U<T;U++){H=Y*D[K+U]+O*D[J+U];G=-O*D[K+U]+Y*D[J+U];D[K+U]=H;D[J+U]=G;aa+=H*H;Z+=G*G}g[X]=aa;g[V]=Z;F=1;if(M){R=(X*v)|0,Q=(V*v)|0;U=2;H=Y*M[R]+O*M[Q];G=-O*M[R]+Y*M[Q];M[R]=H;M[Q]=G;H=Y*M[R+1]+O*M[Q+1];G=-O*M[R+1]+Y*M[Q+1];M[R+1]=H;M[Q+1]=G;for(;U<S;U++){H=Y*M[R+U]+O*M[Q+U];G=-O*M[R+U]+Y*M[Q+U];M[R+U]=H;M[Q+U]=G}}}}if(F==0){break}}for(X=0;X<S;X++){for(U=0,x=0;U<T;U++){N=D[X*l+U];x+=N*N}g[X]=Math.sqrt(x)}for(X=0;X<S-1;X++){V=X;for(U=X+1;U<S;U++){if(g[V]<g[U]){V=U}}if(X!=V){f(g,X,V,x);if(M){for(U=0;U<T;U++){f(D,X*l+U,V*l+U,N)}for(U=0;U<S;U++){f(M,X*v+U,V*v+U,N)}}}}for(X=0;X<S;X++){h[X]=g[X]}if(!M){jsfeat.cache.put_buffer(r);return}for(X=0;X<E;X++){x=X<S?g[X]:0;while(x<=q){y=(1/T);for(U=0;U<T;U++){z=(z*214013+2531011);B=(((z>>16)&32767)&256)!=0?y:-y;D[X*l+U]=B}for(A=0;A<2;A++){for(V=0;V<X;V++){x=0;for(U=0;U<T;U++){x+=D[X*l+U]*D[V*l+U]}o=0;for(U=0;U<T;U++){N=(D[X*l+U]-x*D[V*l+U]);D[X*l+U]=N;o+=Math.abs(N)}o=o?1/o:0;for(U=0;U<T;U++){D[X*l+U]*=o}}}x=0;for(U=0;U<T;U++){N=D[X*l+U];x+=N*N}x=Math.sqrt(x)}O=(1/x);for(U=0;U<T;U++){D[X*l+U]*=O}}jsfeat.cache.put_buffer(r)};return{lu_solve:function(l,g){var q=0,o=0,n=0,h=1,v=l.cols;var w=l.data,r=g.data;var x,m,u,y;for(q=0;q<v;q++){n=q;for(o=q+1;o<v;o++){if(Math.abs(w[o*v+q])>Math.abs(w[n*v+q])){n=o}}if(Math.abs(w[n*v+q])<jsfeat.EPSILON){return 0}if(n!=q){for(o=q;o<v;o++){f(w,q*v+o,n*v+o,x)}f(r,q,n,x);h=-h}u=-1/w[q*v+q];for(o=q+1;o<v;o++){m=w[o*v+q]*u;for(n=q+1;n<v;n++){w[o*v+n]+=m*w[q*v+n]}r[o]+=m*r[q]}w[q*v+q]=-u}for(q=v-1;q>=0;q--){y=r[q];for(n=q+1;n<v;n++){y-=w[q*v+n]*r[n]}r[q]=y*w[q*v+q]}return 1},cholesky_solve:function(h,g){var l=0,v=0,r=0,s=0,n=0,p=0,o=0;var u=h.cols;var t=h.data,q=g.data;var k,m;for(l=0;l<u;l++){m=1;s=(l*u);n=s;for(v=l;v<u;v++){k=t[(n+l)];for(r=0;r<l;r++){k-=t[(r*u+l)]*t[(n+r)]}if(v==l){t[(n+l)]=k;if(k==0){return 0}m=1/k}else{t[(s+v)]=k;t[(n+l)]=k*m}n=(n+u)}}s=0;for(p=0;p<u;p++){k=q[p];for(o=0;o<p;o++){k-=t[(s+o)]*q[o]}q[p]=k;s=(s+u)}s=0;for(p=0;p<u;p++){q[p]/=t[(s+p)];s=(s+u)}p=(u-1);for(;p>=0;p--){k=q[p];o=(p+1);s=(o*u);for(;o<u;o++){k-=t[(s+p)]*q[o];s=(s+u)}q[p]=k}return 1},svd_decompose:function(t,k,p,l,o){if(typeof o==="undefined"){o=0}var r=0,z=0,x=0,g=t.rows,D=t.cols,w=g,v=D;var s=t.type|jsfeat.C1_t;if(w<v){r=1;z=w;w=v;v=z}var q=jsfeat.cache.get_buffer((w*w)<<3);var h=jsfeat.cache.get_buffer(v<<3);var C=jsfeat.cache.get_buffer((v*v)<<3);var u=new jsfeat.matrix_t(w,w,s,q.data);var B=new jsfeat.matrix_t(1,v,s,h.data);var y=new jsfeat.matrix_t(v,v,s,C.data);if(r==0){jsfeat.matmath.transpose(u,t)}else{for(z=0;z<D*g;z++){u.data[z]=t.data[z]}for(;z<v*w;z++){u.data[z]=0}}e(u.data,w,B.data,y.data,v,w,v,w);if(k){for(z=0;z<v;z++){k.data[z]=B.data[z]}for(;z<D;z++){k.data[z]=0}}if(r==0){if(p&&(o&jsfeat.SVD_U_T)){z=w*w;while(--z>=0){p.data[z]=u.data[z]}}else{if(p){jsfeat.matmath.transpose(p,u)}}if(l&&(o&jsfeat.SVD_V_T)){z=v*v;while(--z>=0){l.data[z]=y.data[z]}}else{if(l){jsfeat.matmath.transpose(l,y)}}}else{if(p&&(o&jsfeat.SVD_U_T)){z=v*v;while(--z>=0){p.data[z]=y.data[z]}}else{if(p){jsfeat.matmath.transpose(p,y)}}if(l&&(o&jsfeat.SVD_V_T)){z=w*w;while(--z>=0){l.data[z]=u.data[z]}}else{if(l){jsfeat.matmath.transpose(l,u)}}}jsfeat.cache.put_buffer(q);jsfeat.cache.put_buffer(h);jsfeat.cache.put_buffer(C)},svd_solve:function(v,l,s){var E=0,C=0,z=0;var w=0,u=0;var o=v.rows,p=v.cols;var h=0,I=0,x=0;var r=v.type|jsfeat.C1_t;var F=jsfeat.cache.get_buffer((o*o)<<3);var m=jsfeat.cache.get_buffer(p<<3);var H=jsfeat.cache.get_buffer((p*p)<<3);var t=new jsfeat.matrix_t(o,o,r,F.data);var G=new jsfeat.matrix_t(1,p,r,m.data);var D=new jsfeat.matrix_t(p,p,r,H.data);var n=s.data,y=t.data,q=G.data,g=D.data;this.svd_decompose(v,G,t,D,0);x=jsfeat.EPSILON*q[0]*p;for(;E<p;E++,u+=p){I=0;for(C=0;C<p;C++){if(q[C]>x){for(z=0,h=0,w=0;z<o;z++,w+=p){h+=y[w+C]*n[z]}I+=h*g[u+C]/q[C]}}l.data[E]=I}jsfeat.cache.put_buffer(F);jsfeat.cache.put_buffer(m);jsfeat.cache.put_buffer(H)},svd_invert:function(E,t){var C=0,z=0,y=0;var v=0,s=0,h=0;var n=t.rows,o=t.cols;var l=0,w=0;var q=t.type|jsfeat.C1_t;var D=jsfeat.cache.get_buffer((n*n)<<3);var m=jsfeat.cache.get_buffer(o<<3);var G=jsfeat.cache.get_buffer((o*o)<<3);var u=new jsfeat.matrix_t(n,n,q,D.data);var F=new jsfeat.matrix_t(1,o,q,m.data);var B=new jsfeat.matrix_t(o,o,q,G.data);var r=E.data,x=u.data,p=F.data,g=B.data;this.svd_decompose(t,F,u,B,0);w=jsfeat.EPSILON*p[0]*o;for(;C<o;C++,s+=o){for(z=0,v=0;z<n;z++,h++){for(y=0,l=0;y<o;y++,v++){if(p[y]>w){l+=g[s+y]*x[v]/p[y]}}r[h]=l}}jsfeat.cache.put_buffer(D);jsfeat.cache.put_buffer(m);jsfeat.cache.put_buffer(G)},eigenVV:function(j,p,r){var k=j.cols,m=k*k;var g=j.type|jsfeat.C1_t;var o=jsfeat.cache.get_buffer((k*k)<<3);var h=jsfeat.cache.get_buffer(k<<3);var l=new jsfeat.matrix_t(k,k,g,o.data);var q=new jsfeat.matrix_t(1,k,g,h.data);while(--m>=0){l.data[m]=j.data[m]}c(l.data,k,q.data,p?p.data:null,k,k);if(r){while(--k>=0){r.data[k]=q.data[k]}}jsfeat.cache.put_buffer(o);jsfeat.cache.put_buffer(h)}}})();b.linalg=a})(jsfeat);(function(a){var c=(function(){var m=function(p){return p*p};var e=function(z,A,x,w,u){var t=0;var y=0,s=0,q=0,C=0;var v=0,r=0,p=0,B=0;var E=0,D=0;for(;t<u;++t){y+=z[t].x;s+=z[t].y;v+=A[t].x;r+=A[t].y}y/=u;s/=u;v/=u;r/=u;for(t=0;t<u;++t){E=z[t].x-y;D=z[t].y-s;q+=Math.sqrt(E*E+D*D);E=A[t].x-v;D=A[t].y-r;p+=Math.sqrt(E*E+D*D)}q/=u;p/=u;C=Math.SQRT2/q;B=Math.SQRT2/p;x[0]=x[4]=C;x[2]=-y*C;x[5]=-s*C;x[1]=x[3]=x[6]=x[7]=0;x[8]=1;w[0]=w[4]=B;w[2]=-v*B;w[5]=-r*B;w[1]=w[3]=w[6]=w[7]=0;w[8]=1};var h=function(x,u){var q=0,p=0,r=(u-1)|0;var w=0,t=0,v=0,s=0;for(;q<r;++q){w=x[q].x-x[r].x;t=x[q].y-x[r].y;for(p=0;p<q;++p){v=x[p].x-x[r].x;s=x[p].y-x[r].y;if(Math.abs(v*t-s*w)<=jsfeat.EPSILON*(Math.abs(w)+Math.abs(t)+Math.abs(v)+Math.abs(s))){return true}}}return false};var k=new jsfeat.matrix_t(3,3,jsfeat.F32_t|jsfeat.C1_t);var i=new jsfeat.matrix_t(3,3,jsfeat.F32_t|jsfeat.C1_t);var o=new jsfeat.matrix_t(6,6,jsfeat.F32_t|jsfeat.C1_t);var n=new jsfeat.matrix_t(6,1,jsfeat.F32_t|jsfeat.C1_t);var j=(function(){function p(){}p.prototype.run=function(D,q,r,t){var G=0,F=0;var B=r.type|jsfeat.C1_t;var J=r.data,v=k.data,E=i.data;var x,w,A=0,z=0;e(D,q,v,E,t);var u=jsfeat.cache.get_buffer((2*t*6)<<3);var y=jsfeat.cache.get_buffer((2*t)<<3);var C=new jsfeat.matrix_t(6,2*t,B,u.data);var H=new jsfeat.matrix_t(1,2*t,B,y.data);var I=C.data,s=H.data;for(;G<t;++G){x=D[G];w=q[G];A=v[0]*x.x+v[1]*x.y+v[2];z=v[3]*x.x+v[4]*x.y+v[5];F=G*2*6;I[F]=A,I[F+1]=z,I[F+2]=1,I[F+3]=0,I[F+4]=0,I[F+5]=0;F+=6;I[F]=0,I[F+1]=0,I[F+2]=0,I[F+3]=A,I[F+4]=z,I[F+5]=1;s[G<<1]=E[0]*w.x+E[1]*w.y+E[2];s[(G<<1)+1]=E[3]*w.x+E[4]*w.y+E[5]}jsfeat.matmath.multiply_AtA(o,C);jsfeat.matmath.multiply_AtB(n,C,H);jsfeat.linalg.lu_solve(o,n);J[0]=n.data[0],J[1]=n.data[1],J[2]=n.data[2];J[3]=n.data[3],J[4]=n.data[4],J[5]=n.data[5];J[6]=0,J[7]=0,J[8]=1;jsfeat.matmath.invert_3x3(i,i);jsfeat.matmath.multiply_3x3(r,i,r);jsfeat.matmath.multiply_3x3(r,r,k);jsfeat.cache.put_buffer(u);jsfeat.cache.put_buffer(y);return 1};p.prototype.error=function(v,w,t,r,u){var s=0;var y,x;var q=t.data;for(;s<u;++s){y=v[s];x=w[s];r[s]=m(x.x-q[0]*y.x-q[1]*y.y-q[2])+m(x.y-q[3]*y.x-q[4]*y.y-q[5])}};p.prototype.check_subset=function(s,r,q){return true};return p})();var g=new jsfeat.matrix_t(9,9,jsfeat.F32_t|jsfeat.C1_t);var f=new jsfeat.matrix_t(9,9,jsfeat.F32_t|jsfeat.C1_t);var l=(function(){function p(){}p.prototype.run=function(I,r,v,C){var L=0,K=0;var O=v.data,D=k.data,J=i.data;var M=g.data,N=f.data;var H=0,G=0,s=0,q=0;var u=0,t=0,B=0,A=0,z=0,w=0,F=0,E=0;for(;L<C;++L){B+=r[L].x;A+=r[L].y;F+=I[L].x;E+=I[L].y}B/=C;A/=C;F/=C;E/=C;for(L=0;L<C;++L){u+=Math.abs(r[L].x-B);t+=Math.abs(r[L].y-A);z+=Math.abs(I[L].x-F);w+=Math.abs(I[L].y-E)}if(Math.abs(u)<jsfeat.EPSILON||Math.abs(t)<jsfeat.EPSILON||Math.abs(z)<jsfeat.EPSILON||Math.abs(w)<jsfeat.EPSILON){return 0}u=C/u;t=C/t;z=C/z;w=C/w;D[0]=z;D[1]=0;D[2]=-F*z;D[3]=0;D[4]=w;D[5]=-E*w;D[6]=0;D[7]=0;D[8]=1;J[0]=1/u;J[1]=0;J[2]=B;J[3]=0;J[4]=1/t;J[5]=A;J[6]=0;J[7]=0;J[8]=1;L=81;while(--L>=0){M[L]=0}for(L=0;L<C;++L){H=(r[L].x-B)*u;G=(r[L].y-A)*t;s=(I[L].x-F)*z;q=(I[L].y-E)*w;M[0]+=s*s;M[1]+=s*q;M[2]+=s;M[6]+=s*-H*s;M[7]+=s*-H*q;M[8]+=s*-H;M[10]+=q*q;M[11]+=q;M[15]+=q*-H*s;M[16]+=q*-H*q;M[17]+=q*-H;M[20]+=1;M[24]+=-H*s;M[25]+=-H*q;M[26]+=-H;M[30]+=s*s;M[31]+=s*q;M[32]+=s;M[33]+=s*-G*s;M[34]+=s*-G*q;M[35]+=s*-G;M[40]+=q*q;M[41]+=q;M[42]+=q*-G*s;M[43]+=q*-G*q;M[44]+=q*-G;M[50]+=1;M[51]+=-G*s;M[52]+=-G*q;M[53]+=-G;M[60]+=-H*s*-H*s+-G*s*-G*s;M[61]+=-H*s*-H*q+-G*s*-G*q;M[62]+=-H*s*-H+-G*s*-G;M[70]+=-H*q*-H*q+-G*q*-G*q;M[71]+=-H*q*-H+-G*q*-G;M[80]+=-H*-H+-G*-G}for(L=0;L<9;++L){for(K=0;K<L;++K){M[L*9+K]=M[K*9+L]}}jsfeat.linalg.eigenVV(g,f);O[0]=N[72],O[1]=N[73],O[2]=N[74];O[3]=N[75],O[4]=N[76],O[5]=N[77];O[6]=N[78],O[7]=N[79],O[8]=N[80];jsfeat.matmath.multiply_3x3(v,i,v);jsfeat.matmath.multiply_3x3(v,v,k);H=1/O[8];O[0]*=H;O[1]*=H;O[2]*=H;O[3]*=H;O[4]*=H;O[5]*=H;O[6]*=H;O[7]*=H;O[8]=1;return 1};p.prototype.error=function(w,x,u,r,v){var t=0;var z,y,s=0,B=0,A=0;var q=u.data;for(;t<v;++t){z=w[t];y=x[t];s=1/(q[6]*z.x+q[7]*z.y+1);B=(q[0]*z.x+q[1]*z.y+q[2])*s-y.x;A=(q[3]*z.x+q[4]*z.y+q[5])*s-y.y;r[t]=(B*B+A*A)}};p.prototype.check_subset=function(M,s,B){if(B==4){var N=0;var I=M[0],H=M[1],G=M[2],E=M[3];var A=s[0],y=s[1],w=s[2],u=s[3];var L=I.x,K=I.y,J=1;var V=H.x,U=H.y,T=1;var z=G.x,x=G.y,v=1;var t=A.x,r=A.y,q=1;var F=y.x,D=y.y,C=1;var Q=w.x,P=w.y,O=1;var S=jsfeat.matmath.determinant_3x3(L,K,J,V,U,T,z,x,v);var R=jsfeat.matmath.determinant_3x3(t,r,q,F,D,C,Q,P,O);if(S*R<0){N++}L=H.x,K=H.y;V=G.x,U=G.y;z=E.x,x=E.y;t=y.x,r=y.y;F=w.x,D=w.y;Q=u.x,P=u.y;S=jsfeat.matmath.determinant_3x3(L,K,J,V,U,T,z,x,v);R=jsfeat.matmath.determinant_3x3(t,r,q,F,D,C,Q,P,O);if(S*R<0){N++}L=I.x,K=I.y;V=G.x,U=G.y;z=E.x,x=E.y;t=A.x,r=A.y;F=w.x,D=w.y;Q=u.x,P=u.y;S=jsfeat.matmath.determinant_3x3(L,K,J,V,U,T,z,x,v);R=jsfeat.matmath.determinant_3x3(t,r,q,F,D,C,Q,P,O);if(S*R<0){N++}L=I.x,K=I.y;V=H.x,U=H.y;z=E.x,x=E.y;t=A.x,r=A.y;F=y.x,D=y.y;Q=u.x,P=u.y;S=jsfeat.matmath.determinant_3x3(L,K,J,V,U,T,z,x,v);R=jsfeat.matmath.determinant_3x3(t,r,q,F,D,C,Q,P,O);if(S*R<0){N++}if(N!=0&&N!=4){return false}}return true};return p})();return{affine2d:j,homography2d:l}})();var b=(function(){function e(h,i,f,g){if(typeof h==="undefined"){h=0}if(typeof i==="undefined"){i=0.5}if(typeof f==="undefined"){f=0.5}if(typeof g==="undefined"){g=0.99}this.size=h;this.thresh=i;this.eps=f;this.prob=g}e.prototype.update_iters=function(g,i){var h=Math.log(1-this.prob);var f=Math.log(1-Math.pow(1-g,this.size));return(f>=0||-h>=i*(-f)?i:Math.round(h/f))|0};return e})();var d=(function(){var e=function(l,q,r,p,t,m,g){var v=1000;var s=[];var n=0,k=0,u=0,h=0,o=false;for(;u<v;++u){n=0;for(;n<p&&u<v;){o=false;h=0;while(!o){o=true;h=s[n]=Math.floor(Math.random()*t)|0;for(k=0;k<n;++k){if(h==s[k]){o=false;break}}}m[n]=q[h];g[n]=r[h];if(!l.check_subset(m,g,n+1)){u++;continue}++n}break}return(n==p&&u<v)};var f=function(k,m,p,q,o,g,h,s){var j=0,l=0,n=0;var r=g*g;k.error(p,q,m,h,o);for(;l<o;++l){n=h[l]<=r;s[l]=n;j+=n}return j};return{ransac:function(E,m,x,i,l,j,y,g){if(typeof g==="undefined"){g=1000}if(l<E.size){return false}var v=E.size;var A=g,z=0;var q=false;var D=[];var C=[];var r=false;var G=j.cols,w=j.rows;var u=j.type|jsfeat.C1_t;var B=jsfeat.cache.get_buffer((G*w)<<3);var h=jsfeat.cache.get_buffer(l);var t=jsfeat.cache.get_buffer(l<<2);var o=new jsfeat.matrix_t(G,w,u,B.data);var s=new jsfeat.matrix_t(l,1,jsfeat.U8C1_t,h.data);var F=-1,p=0;var n=0;var k=t.f32;if(l==v){if(m.run(x,i,o,l)<=0){jsfeat.cache.put_buffer(B);jsfeat.cache.put_buffer(h);jsfeat.cache.put_buffer(t);return false}o.copy_to(j);if(y){while(--l>=0){y.data[l]=1}}jsfeat.cache.put_buffer(B);jsfeat.cache.put_buffer(h);jsfeat.cache.put_buffer(t);return true}for(;z<A;++z){r=e(m,x,i,v,l,D,C);if(!r){if(z==0){jsfeat.cache.put_buffer(B);jsfeat.cache.put_buffer(h);jsfeat.cache.put_buffer(t);return false}break}n=m.run(D,C,o,v);if(n<=0){continue}p=f(m,o,x,i,l,E.thresh,k,s.data);if(p>Math.max(F,v-1)){o.copy_to(j);F=p;if(y){s.copy_to(y)}A=E.update_iters((l-p)/l,A);q=true}}jsfeat.cache.put_buffer(B);jsfeat.cache.put_buffer(h);jsfeat.cache.put_buffer(t);return q},lmeds:function(H,n,z,i,l,j,B,g){if(typeof g==="undefined"){g=1000}if(l<H.size){return false}var w=H.size;var D=g,C=0;var r=false;var G=[];var F=[];var s=false;var I=j.cols,y=j.rows;var v=j.type|jsfeat.C1_t;var E=jsfeat.cache.get_buffer((I*y)<<3);var h=jsfeat.cache.get_buffer(l);var u=jsfeat.cache.get_buffer(l<<2);var p=new jsfeat.matrix_t(I,y,v,E.data);var t=new jsfeat.matrix_t(l,1,jsfeat.U8_t|jsfeat.C1_t,h.data);var q=0;var o=0;var k=u.f32;var A=1000000000,x=0,m=0;H.eps=0.45;D=H.update_iters(H.eps,D);if(l==w){if(n.run(z,i,p,l)<=0){jsfeat.cache.put_buffer(E);jsfeat.cache.put_buffer(h);jsfeat.cache.put_buffer(u);return false}p.copy_to(j);if(B){while(--l>=0){B.data[l]=1}}jsfeat.cache.put_buffer(E);jsfeat.cache.put_buffer(h);jsfeat.cache.put_buffer(u);return true}for(;C<D;++C){s=e(n,z,i,w,l,G,F);if(!s){if(C==0){jsfeat.cache.put_buffer(E);jsfeat.cache.put_buffer(h);jsfeat.cache.put_buffer(u);return false}break}o=n.run(G,F,p,w);if(o<=0){continue}n.error(z,i,p,k,l);m=jsfeat.math.median(k,0,l-1);if(m<A){A=m;p.copy_to(j);r=true}}if(r){x=2.5*1.4826*(1+5/(l-w))*Math.sqrt(A);x=Math.max(x,0.001);q=f(n,j,z,i,l,x,k,t.data);if(B){t.copy_to(B)}r=q>=w}jsfeat.cache.put_buffer(E);jsfeat.cache.put_buffer(h);jsfeat.cache.put_buffer(u);return r}}})();a.ransac_params_t=b;a.motion_model=c;a.motion_estimator=d})(jsfeat);(function(b){var a=(function(){var c=function(q,S,O,p){var r=0;var y=q.channel,v=q.cols,J=q.rows;var P=q.data,m=S.data;var I=v/O,H=J/p;var n=(I*H*65536)|0;var x=0,u=0,C=0,A=0,t=0,s=0,G=0,F=0,D=0,B=0;var Q=0,N=0,K=0,o=0,M=0,E=0;var l=jsfeat.cache.get_buffer((O*y)<<2);var g=jsfeat.cache.get_buffer((O*y)<<2);var R=jsfeat.cache.get_buffer((v*2*3)<<2);var L=l.i32;var j=g.i32;var z=R.i32;for(;x<O;x++){D=x*I,B=D+I;t=(D+1-0.000001)|0,s=B|0;t=Math.min(t,v-1);s=Math.min(s,v-1);if(t>D){z[F++]=(x*y)|0;z[F++]=((t-1)*y)|0;z[F++]=((t-D)*256)|0;r++}for(C=t;C<s;C++){r++;z[F++]=(x*y)|0;z[F++]=(C*y)|0;z[F++]=256}if(B-s>0.001){r++;z[F++]=(x*y)|0;z[F++]=(s*y)|0;z[F++]=((B-s)*256)|0}}for(x=0;x<O*y;x++){L[x]=j[x]=0}u=0;for(A=0;A<J;A++){Q=v*A;for(F=0;F<r;F++){K=z[F*3];t=z[F*3+1];o=z[F*3+2];for(G=0;G<y;G++){L[K+G]+=P[Q+t+G]*o}}if((u+1)*H<=A+1||A==J-1){M=(Math.max(A+1-(u+1)*H,0)*256)|0;E=256-M;N=O*u;if(M<=0){for(x=0;x<O*y;x++){m[N+x]=Math.min(Math.max((j[x]+L[x]*256)/n,0),255);j[x]=L[x]=0}}else{for(x=0;x<O*y;x++){m[N+x]=Math.min(Math.max((j[x]+L[x]*E)/n,0),255);j[x]=L[x]*M;L[x]=0}}u++}else{for(x=0;x<O*y;x++){j[x]+=L[x]*256;L[x]=0}}}jsfeat.cache.put_buffer(g);jsfeat.cache.put_buffer(l);jsfeat.cache.put_buffer(R)};var f=function(p,S,N,o){var q=0;var x=p.channel,u=p.cols,I=p.rows;var O=p.data,m=S.data;var H=u/N,G=I/o;var Q=1/(H*G);var v=0,t=0,B=0,z=0,s=0,r=0,F=0,E=0,C=0,A=0;var P=0,M=0,J=0,n=0,L=0,D=0;var l=jsfeat.cache.get_buffer((N*x)<<2);var g=jsfeat.cache.get_buffer((N*x)<<2);var R=jsfeat.cache.get_buffer((u*2*3)<<2);var K=l.f32;var j=g.f32;var y=R.f32;for(;v<N;v++){C=v*H,A=C+H;s=(C+1-0.000001)|0,r=A|0;s=Math.min(s,u-1);r=Math.min(r,u-1);if(s>C){q++;y[E++]=((s-1)*x)|0;y[E++]=(v*x)|0;y[E++]=(s-C)*Q}for(B=s;B<r;B++){q++;y[E++]=(B*x)|0;y[E++]=(v*x)|0;y[E++]=Q}if(A-r>0.001){q++;y[E++]=(r*x)|0;y[E++]=(v*x)|0;y[E++]=(A-r)*Q}}for(v=0;v<N*x;v++){K[v]=j[v]=0}t=0;for(z=0;z<I;z++){P=u*z;for(E=0;E<q;E++){s=y[E*3]|0;J=y[E*3+1]|0;n=y[E*3+2];for(F=0;F<x;F++){K[J+F]+=O[P+s+F]*n}}if((t+1)*G<=z+1||z==I-1){L=Math.max(z+1-(t+1)*G,0);D=1-L;M=N*t;if(Math.abs(L)<0.001){for(v=0;v<N*x;v++){m[M+v]=j[v]+K[v];j[v]=K[v]=0}}else{for(v=0;v<N*x;v++){m[M+v]=j[v]+K[v]*D;j[v]=K[v]*L;K[v]=0}}t++}else{for(v=0;v<N*x;v++){j[v]+=K[v];K[v]=0}}}jsfeat.cache.put_buffer(g);jsfeat.cache.put_buffer(l);jsfeat.cache.put_buffer(R)};var e=function(D,F,m,s,B,t,g,n){var z=0,y=0,x=0,A=0,u=0,l=0,G=0,E=0,C=0,v=t[0],r=0;var q=s<<1,p=s*3,o=s<<2;for(;z<B;++z){l=F[A];for(y=0;y<n;++y){D[y]=l}for(y=0;y<=s-2;y+=2){D[y+n]=F[A+y];D[y+n+1]=F[A+y+1]}for(;y<s;++y){D[y+n]=F[A+y]}l=F[A+s-1];for(y=s;y<n+s;++y){D[y+n]=l}for(y=0;y<=s-4;y+=4){l=D[y]*v,G=D[y+1]*v,E=D[y+2]*v,C=D[y+3]*v;for(x=1;x<g;++x){r=t[x];l+=D[x+y]*r;G+=D[x+y+1]*r;E+=D[x+y+2]*r;C+=D[x+y+3]*r}m[u+y]=Math.min(l>>8,255);m[u+y+1]=Math.min(G>>8,255);m[u+y+2]=Math.min(E>>8,255);m[u+y+3]=Math.min(C>>8,255)}for(;y<s;++y){l=D[y]*v;for(x=1;x<g;++x){l+=D[x+y]*t[x]}m[u+y]=Math.min(l>>8,255)}A+=s;u+=s}for(z=0;z<s;++z){l=m[z];for(y=0;y<n;++y){D[y]=l}x=z;for(y=0;y<=B-2;y+=2,x+=q){D[y+n]=m[x];D[y+n+1]=m[x+s]}for(;y<B;++y,x+=s){D[y+n]=m[x]}l=m[(B-1)*s+z];for(y=B;y<n+B;++y){D[y+n]=l}u=z;for(y=0;y<=B-4;y+=4,u+=o){l=D[y]*v,G=D[y+1]*v,E=D[y+2]*v,C=D[y+3]*v;for(x=1;x<g;++x){r=t[x];l+=D[x+y]*r;G+=D[x+y+1]*r;E+=D[x+y+2]*r;C+=D[x+y+3]*r}m[u]=Math.min(l>>8,255);m[u+s]=Math.min(G>>8,255);m[u+q]=Math.min(E>>8,255);m[u+p]=Math.min(C>>8,255)}for(;y<B;++y,u+=s){l=D[y]*v;for(x=1;x<g;++x){l+=D[x+y]*t[x]}m[u]=Math.min(l>>8,255)}}};var d=function(D,F,m,s,B,t,g,n){var z=0,y=0,x=0,A=0,u=0,l=0,G=0,E=0,C=0,v=t[0],r=0;var q=s<<1,p=s*3,o=s<<2;for(;z<B;++z){l=F[A];for(y=0;y<n;++y){D[y]=l}for(y=0;y<=s-2;y+=2){D[y+n]=F[A+y];D[y+n+1]=F[A+y+1]}for(;y<s;++y){D[y+n]=F[A+y]}l=F[A+s-1];for(y=s;y<n+s;++y){D[y+n]=l}for(y=0;y<=s-4;y+=4){l=D[y]*v,G=D[y+1]*v,E=D[y+2]*v,C=D[y+3]*v;for(x=1;x<g;++x){r=t[x];l+=D[x+y]*r;G+=D[x+y+1]*r;E+=D[x+y+2]*r;C+=D[x+y+3]*r}m[u+y]=l;m[u+y+1]=G;m[u+y+2]=E;m[u+y+3]=C}for(;y<s;++y){l=D[y]*v;for(x=1;x<g;++x){l+=D[x+y]*t[x]}m[u+y]=l}A+=s;u+=s}for(z=0;z<s;++z){l=m[z];for(y=0;y<n;++y){D[y]=l}x=z;for(y=0;y<=B-2;y+=2,x+=q){D[y+n]=m[x];D[y+n+1]=m[x+s]}for(;y<B;++y,x+=s){D[y+n]=m[x]}l=m[(B-1)*s+z];for(y=B;y<n+B;++y){D[y+n]=l}u=z;for(y=0;y<=B-4;y+=4,u+=o){l=D[y]*v,G=D[y+1]*v,E=D[y+2]*v,C=D[y+3]*v;for(x=1;x<g;++x){r=t[x];l+=D[x+y]*r;G+=D[x+y+1]*r;E+=D[x+y+2]*r;C+=D[x+y+3]*r}m[u]=l;m[u+s]=G;m[u+q]=E;m[u+p]=C}for(;y<B;++y,u+=s){l=D[y]*v;for(x=1;x<g;++x){l+=D[x+y]*t[x]}m[u]=l}}};return{grayscale:function(n,r,A,D,g){if(typeof g==="undefined"){g=jsfeat.COLOR_RGBA2GRAY}var q=0,p=0,z=0,v=0,m=0,u=0;var s=4899,B=9617,C=1868,o=4;if(g==jsfeat.COLOR_BGRA2GRAY||g==jsfeat.COLOR_BGR2GRAY){s=1868;C=4899}if(g==jsfeat.COLOR_RGB2GRAY||g==jsfeat.COLOR_BGR2GRAY){o=3}var l=o<<1,k=(o*3)|0;D.resize(r,A,1);var t=D.data;for(p=0;p<A;++p,v+=r,z+=r*o){for(q=0,m=z,u=v;q<=r-4;q+=4,m+=o<<2,u+=4){t[u]=(n[m]*s+n[m+1]*B+n[m+2]*C+8192)>>14;t[u+1]=(n[m+o]*s+n[m+o+1]*B+n[m+o+2]*C+8192)>>14;t[u+2]=(n[m+l]*s+n[m+l+1]*B+n[m+l+2]*C+8192)>>14;t[u+3]=(n[m+k]*s+n[m+k+1]*B+n[m+k+2]*C+8192)>>14}for(;q<r;++q,++u,m+=o){t[u]=(n[m]*s+n[m+1]*B+n[m+2]*C+8192)>>14}}},resample:function(l,m,i,k){var j=l.rows,g=l.cols;if(j>k&&g>i){m.resize(i,k,l.channel);if(l.type&jsfeat.U8_t&&m.type&jsfeat.U8_t&&j*g/(k*i)<256){c(l,m,i,k)}else{f(l,m,i,k)}}},box_blur_gray:function(r,J,n,l){if(typeof l==="undefined"){l=0}var z=r.cols,E=r.rows,s=E<<1,v=z<<1;var D=0,u=0,t=0,m=0;var B=((n<<1)+1)|0;var p=(n+1)|0,H=(p+1)|0;var I=l&jsfeat.BOX_BLUR_NOSCALE?1:(1/(B*B));var C=jsfeat.cache.get_buffer((z*E)<<2);var j=0,G=0,o=0,q=0,k=0;var F=C.i32;var g=r.data;var A=0;J.resize(z,E,r.channel);for(t=0;t<E;++t){G=t;j=p*g[o];for(D=(o+1)|0,m=(o+n)|0;D<=m;++D){j+=g[D]}q=(o+p)|0;k=o;A=g[k];for(u=0;u<n;++u,G+=E){F[G]=j;j+=g[q]-A;q++}for(;u<z-H;u+=2,G+=s){F[G]=j;j+=g[q]-g[k];F[G+E]=j;j+=g[q+1]-g[k+1];q+=2;k+=2}for(;u<z-p;++u,G+=E){F[G]=j;j+=g[q]-g[k];q++;k++}A=g[q-1];for(;u<z;++u,G+=E){F[G]=j;j+=A-g[k];k++}o+=z}o=0;g=J.data;if(I==1){for(t=0;t<z;++t){G=t;j=p*F[o];for(D=(o+1)|0,m=(o+n)|0;D<=m;++D){j+=F[D]}q=o+p;k=o;A=F[k];for(u=0;u<n;++u,G+=z){g[G]=j;j+=F[q]-A;q++}for(;u<E-H;u+=2,G+=v){g[G]=j;j+=F[q]-F[k];g[G+z]=j;j+=F[q+1]-F[k+1];q+=2;k+=2}for(;u<E-p;++u,G+=z){g[G]=j;j+=F[q]-F[k];q++;k++}A=F[q-1];for(;u<E;++u,G+=z){g[G]=j;j+=A-F[k];k++}o+=E}}else{for(t=0;t<z;++t){G=t;j=p*F[o];for(D=(o+1)|0,m=(o+n)|0;D<=m;++D){j+=F[D]}q=o+p;k=o;A=F[k];for(u=0;u<n;++u,G+=z){g[G]=j*I;j+=F[q]-A;q++}for(;u<E-H;u+=2,G+=v){g[G]=j*I;j+=F[q]-F[k];g[G+z]=j*I;j+=F[q+1]-F[k+1];q+=2;k+=2}for(;u<E-p;++u,G+=z){g[G]=j*I;j+=F[q]-F[k];q++;k++}A=F[q-1];for(;u<E;++u,G+=z){g[G]=j*I;j+=A-F[k];k++}o+=E}}jsfeat.cache.put_buffer(C)},gaussian_blur:function(g,s,r,v){if(typeof v==="undefined"){v=0}if(typeof r==="undefined"){r=0}r=r==0?(Math.max(1,(4*v+1-1e-8))*2+1)|0:r;var x=r>>1;var t=g.cols,p=g.rows;var u=g.type,n=u&jsfeat.U8_t;s.resize(t,p,g.channel);var m=g.data,j=s.data;var k,i,q=(r+Math.max(p,t))|0;var l=jsfeat.cache.get_buffer(q<<2);var o=jsfeat.cache.get_buffer(r<<2);if(n){k=l.i32;i=o.i32}else{if(u&jsfeat.S32_t){k=l.i32;i=o.f32}else{k=l.f32;i=o.f32}}jsfeat.math.get_gaussian_kernel(r,v,i,u);if(n){e(k,m,j,t,p,i,r,x)}else{d(k,m,j,t,p,i,r,x)}jsfeat.cache.put_buffer(l);jsfeat.cache.put_buffer(o)},pyrdown:function(k,A,s,r){if(typeof s==="undefined"){s=0}if(typeof r==="undefined"){r=0}var q=k.cols,t=k.rows;var p=q>>1,l=t>>1;var B=p-(s<<1),u=l-(r<<1);var o=0,n=0,g=s+r*q,m=0,v=0,i=0;A.resize(p,l,k.channel);var z=k.data,j=A.data;for(n=0;n<u;++n){m=g;i=v;for(o=0;o<=B-2;o+=2,i+=2,m+=4){j[i]=(z[m]+z[m+1]+z[m+q]+z[m+q+1]+2)>>2;j[i+1]=(z[m+2]+z[m+3]+z[m+q+2]+z[m+q+3]+2)>>2}for(;o<B;++o,++i,m+=2){j[i]=(z[m]+z[m+1]+z[m+q]+z[m+q+1]+2)>>2}g+=q<<1;v+=p}},scharr_derivatives:function(j,G){var p=j.cols,s=j.rows;var H=p<<1,o=0,m=0,u=0,E,D,C,B,A,z;var v=0,t=0,r=0,i=0;var n,l;G.resize(p,s,2);var F=j.data,g=G.data;var k=jsfeat.cache.get_buffer((p+2)<<2);var q=jsfeat.cache.get_buffer((p+2)<<2);if(j.type&jsfeat.U8_t||j.type&jsfeat.S32_t){n=k.i32;l=q.i32}else{n=k.f32;l=q.f32}for(;m<s;++m,t+=p){v=((m>0?m-1:1)*p)|0;r=((m<s-1?m+1:s-2)*p)|0;i=(m*H)|0;for(o=0,u=1;o<=p-2;o+=2,u+=2){E=F[v+o],D=F[r+o];n[u]=((E+D)*3+(F[t+o])*10);l[u]=(D-E);E=F[v+o+1],D=F[r+o+1];n[u+1]=((E+D)*3+(F[t+o+1])*10);l[u+1]=(D-E)}for(;o<p;++o,++u){E=F[v+o],D=F[r+o];n[u]=((E+D)*3+(F[t+o])*10);l[u]=(D-E)}o=(p+1)|0;n[0]=n[1];n[o]=n[p];l[0]=l[1];l[o]=l[p];for(o=0;o<=p-4;o+=4){E=l[o+2],D=l[o+1],C=l[o+3],B=l[o+4],A=n[o+2],z=n[o+3];g[i++]=(A-n[o]);g[i++]=((E+l[o])*3+D*10);g[i++]=(z-n[o+1]);g[i++]=((C+D)*3+E*10);g[i++]=((n[o+4]-A));g[i++]=(((B+E)*3+C*10));g[i++]=((n[o+5]-z));g[i++]=(((l[o+5]+C)*3+B*10))}for(;o<p;++o){g[i++]=((n[o+2]-n[o]));g[i++]=(((l[o+2]+l[o])*3+l[o+1]*10))}}jsfeat.cache.put_buffer(k);jsfeat.cache.put_buffer(q)},sobel_derivatives:function(j,G){var p=j.cols,s=j.rows;var H=p<<1,o=0,m=0,u=0,E,D,C,B,A,z;var v=0,t=0,r=0,i=0;var n,l;G.resize(p,s,2);var F=j.data,g=G.data;var k=jsfeat.cache.get_buffer((p+2)<<2);var q=jsfeat.cache.get_buffer((p+2)<<2);if(j.type&jsfeat.U8_t||j.type&jsfeat.S32_t){n=k.i32;l=q.i32}else{n=k.f32;l=q.f32}for(;m<s;++m,t+=p){v=((m>0?m-1:1)*p)|0;r=((m<s-1?m+1:s-2)*p)|0;i=(m*H)|0;for(o=0,u=1;o<=p-2;o+=2,u+=2){E=F[v+o],D=F[r+o];n[u]=((E+D)+(F[t+o]*2));l[u]=(D-E);E=F[v+o+1],D=F[r+o+1];n[u+1]=((E+D)+(F[t+o+1]*2));l[u+1]=(D-E)}for(;o<p;++o,++u){E=F[v+o],D=F[r+o];n[u]=((E+D)+(F[t+o]*2));l[u]=(D-E)}o=(p+1)|0;n[0]=n[1];n[o]=n[p];l[0]=l[1];l[o]=l[p];for(o=0;o<=p-4;o+=4){E=l[o+2],D=l[o+1],C=l[o+3],B=l[o+4],A=n[o+2],z=n[o+3];g[i++]=(A-n[o]);g[i++]=(E+l[o]+D*2);g[i++]=(z-n[o+1]);g[i++]=(C+D+E*2);g[i++]=(n[o+4]-A);g[i++]=(B+E+C*2);g[i++]=(n[o+5]-z);g[i++]=(l[o+5]+C+B*2)}for(;o<p;++o){g[i++]=(n[o+2]-n[o]);g[i++]=(l[o+2]+l[o]+l[o+1]*2)}}jsfeat.cache.put_buffer(k);jsfeat.cache.put_buffer(q)},compute_integral_image:function(g,l,y,u){var t=g.cols|0,w=g.rows|0,o=g.data;var r=(t+1)|0;var B=0,z=0,h=0,x=0,q=0,n=0,A=0,m=0;if(l&&y){for(;q<r;++q){l[q]=0,y[q]=0}h=(r+1)|0,x=1;for(q=0,m=0;q<w;++q,++h,++x){B=z=0;for(n=0;n<=t-2;n+=2,m+=2,h+=2,x+=2){A=o[m];B+=A,z+=A*A;l[h]=l[x]+B;y[h]=y[x]+z;A=o[m+1];B+=A,z+=A*A;l[h+1]=l[x+1]+B;y[h+1]=y[x+1]+z}for(;n<t;++n,++m,++h,++x){A=o[m];B+=A,z+=A*A;l[h]=l[x]+B;y[h]=y[x]+z}}}else{if(l){for(;q<r;++q){l[q]=0}h=(r+1)|0,x=1;for(q=0,m=0;q<w;++q,++h,++x){B=0;for(n=0;n<=t-2;n+=2,m+=2,h+=2,x+=2){B+=o[m];l[h]=l[x]+B;B+=o[m+1];l[h+1]=l[x+1]+B}for(;n<t;++n,++m,++h,++x){B+=o[m];l[h]=l[x]+B}}}else{if(y){for(;q<r;++q){y[q]=0}h=(r+1)|0,x=1;for(q=0,m=0;q<w;++q,++h,++x){z=0;for(n=0;n<=t-2;n+=2,m+=2,h+=2,x+=2){A=o[m];z+=A*A;y[h]=y[x]+z;A=o[m+1];z+=A*A;y[h+1]=y[x+1]+z}for(;n<t;++n,++m,++h,++x){A=o[m];z+=A*A;y[h]=y[x]+z}}}}}if(u){for(q=0;q<r;++q){u[q]=0}h=(r+1)|0,x=0;for(q=0,m=0;q<w;++q,++h,++x){for(n=0;n<=t-2;n+=2,m+=2,h+=2,x+=2){u[h]=o[m]+u[x];u[h+1]=o[m+1]+u[x+1]}for(;n<t;++n,++m,++h,++x){u[h]=o[m]+u[x]}}h=(r+t)|0,x=t;for(q=0;q<w;++q,h+=r,x+=r){u[h]+=u[x]}for(n=t-1;n>0;--n){h=n+w*r,x=h-r;for(q=w;q>0;--q,h-=r,x-=r){u[h]+=u[x]+u[x+1]}}}},equalize_histogram:function(j,r){var s=j.cols,q=j.rows,o=j.data;r.resize(s,q,j.channel);var l=r.data,t=s*q;var p=0,n=0,k,g;var m=jsfeat.cache.get_buffer(256<<2);k=m.i32;for(;p<256;++p){k[p]=0}for(p=0;p<t;++p){++k[o[p]]}n=k[0];for(p=1;p<256;++p){n=k[p]+=n}g=255/t;for(p=0;p<t;++p){l[p]=(k[o[p]]*g+0.5)|0}jsfeat.cache.put_buffer(m)},canny:function(u,V,E,k){var C=u.cols,L=u.rows,S=u.data;V.resize(C,L,u.channel);var o=V.data;var K=0,H=0,q=0,A=C<<1,R=0,J=0,N=0,z=0,v=0,D=0;var g=0,U=0;var p=jsfeat.cache.get_buffer((L*A)<<2);var m=jsfeat.cache.get_buffer((3*(C+2))<<2);var n=jsfeat.cache.get_buffer(((L+2)*(C+2))<<2);var t=jsfeat.cache.get_buffer((L*C)<<2);var Q=m.i32;var T=n.i32;var r=t.i32;var G=p.i32;var l=new jsfeat.matrix_t(C,L,jsfeat.S32C2_t,p.data);var P=1,O=(C+2+1)|0,M=(2*(C+2)+1)|0,B=(C+2)|0,I=(B+1)|0,F=0;this.sobel_derivatives(u,l);if(E>k){K=E;E=k;k=K}K=(3*(C+2))|0;while(--K>=0){Q[K]=0}K=((L+2)*(C+2))|0;while(--K>=0){T[K]=0}for(;H<C;++H,q+=2){z=G[q],v=G[q+1];Q[O+H]=((z^(z>>31))-(z>>31))+((v^(v>>31))-(v>>31))}for(K=1;K<=L;++K,q+=A){if(K==L){H=M+C;while(--H>=M){Q[H]=0}}else{for(H=0;H<C;H++){z=G[q+(H<<1)],v=G[q+(H<<1)+1];Q[M+H]=((z^(z>>31))-(z>>31))+((v^(v>>31))-(v>>31))}}R=(q-A)|0;T[I-1]=0;J=0;for(H=0;H<C;++H,R+=2){N=Q[O+H];if(N>E){z=G[R];v=G[R+1];D=z^v;z=((z^(z>>31))-(z>>31))|0;v=((v^(v>>31))-(v>>31))|0;g=z*13573;U=g+((z+z)<<15);v<<=15;if(v<g){if(N>Q[O+H-1]&&N>=Q[O+H+1]){if(N>k&&!J&&T[I+H-B]!=2){T[I+H]=2;J=1;r[F++]=I+H}else{T[I+H]=1}continue}}else{if(v>U){if(N>Q[P+H]&&N>=Q[M+H]){if(N>k&&!J&&T[I+H-B]!=2){T[I+H]=2;J=1;r[F++]=I+H}else{T[I+H]=1}continue}}else{D=D<0?-1:1;if(N>Q[P+H-D]&&N>Q[M+H+D]){if(N>k&&!J&&T[I+H-B]!=2){T[I+H]=2;J=1;r[F++]=I+H}else{T[I+H]=1}continue}}}}T[I+H]=0;J=0}T[I+C]=0;I+=B;H=P;P=O;O=M;M=H}H=I-B-1;for(K=0;K<B;++K,++H){T[H]=0}while(F>0){I=r[--F];I-=B+1;if(T[I]==1){T[I]=2,r[F++]=I}I+=1;if(T[I]==1){T[I]=2,r[F++]=I}I+=1;if(T[I]==1){T[I]=2,r[F++]=I}I+=B;if(T[I]==1){T[I]=2,r[F++]=I}I-=2;if(T[I]==1){T[I]=2,r[F++]=I}I+=B;if(T[I]==1){T[I]=2,r[F++]=I}I+=1;if(T[I]==1){T[I]=2,r[F++]=I}I+=1;if(T[I]==1){T[I]=2,r[F++]=I}}I=B+1;P=0;for(K=0;K<L;++K,I+=B){for(H=0;H<C;++H){o[P++]=(T[I+H]==2)*255}}jsfeat.cache.put_buffer(p);jsfeat.cache.put_buffer(m);jsfeat.cache.put_buffer(n);jsfeat.cache.put_buffer(t)},warp_perspective:function(t,D,A,r){if(typeof r==="undefined"){r=0}var l=t.cols|0,v=t.rows|0,L=D.cols|0,j=D.rows|0;var H=t.data,q=D.data;var F=0,E=0,G=0,u=0,k=0,C=0,p=0,h=0,O=0,P=0,s=0,R=0,Q=0,N=0,M=0;var i=A.data;var o=i[0],n=i[1],m=i[2],K=i[3],J=i[4],I=i[5],B=i[6],z=i[7],w=i[8];for(var g=0;E<j;++E){h=n*E+m,O=J*E+I,P=z*E+w;for(F=0;F<L;++F,++g,h+=o,O+=K,P+=B){s=1/P;C=h*s,p=O*s;u=C|0,k=p|0;if(C>0&&p>0&&u<(l-1)&&k<(v-1)){R=Math.max(C-u,0);Q=Math.max(p-k,0);G=(l*k+u)|0;N=H[G]+R*(H[G+1]-H[G]);M=H[G+l]+R*(H[G+l+1]-H[G+l]);q[g]=N+Q*(M-N)}else{q[g]=r}}}},warp_affine:function(k,K,p,J){if(typeof J==="undefined"){J=0}var u=k.cols,z=k.rows,j=K.cols,v=K.rows;var E=k.data,i=K.data;var o=0,n=0,I=0,q=0,A=0,m=0,w=0,G=0,D=0,h=0,g=0;var l=p.data;var t=l[0],s=l[1],r=l[2],H=l[3],F=l[4],C=l[5];for(var B=0;n<v;++n){m=s*n+r;w=F*n+C;for(o=0;o<j;++o,++B,m+=t,w+=H){q=m|0;A=w|0;if(q>=0&&A>=0&&q<(u-1)&&A<(z-1)){G=m-q;D=w-A;I=u*A+q;h=E[I]+G*(E[I+1]-E[I]);g=E[I+u]+G*(E[I+u+1]-E[I+u]);i[B]=h+D*(g-h)}else{i[B]=J}}}},skindetector:function(o,p){var n,m,h,k;var l=o.width*o.height;while(l--){k=l*4;n=o.data[k];m=o.data[k+1];h=o.data[k+2];if((n>95)&&(m>40)&&(h>20)&&(n>m)&&(n>h)&&(n-Math.min(m,h)>15)&&(Math.abs(n-m)>15)){p[l]=255}else{p[l]=0}}}}})();b.imgproc=a})(jsfeat);(function(a){var b=(function(){var h=new Int32Array([0,3,1,3,2,2,3,1,3,0,3,-1,2,-2,1,-3,0,-3,-1,-3,-2,-2,-3,-1,-3,0,-3,1,-2,2,-1,3]);var f=new Uint8Array(512);var e=new Int32Array(25);var i=new Int32Array(25);var d=function(l,n,o){var j=0;var m=h;for(;j<o;++j){l[j]=m[j<<1]+m[(j<<1)+1]*n}for(;j<25;++j){l[j]=l[j-o]}},g=function(j,n,l,r,p){var q=25,o=0,w=j[n];var m=p,t=0,u=0,s=0;for(;o<q;++o){r[o]=w-j[n+l[o]]}for(o=0;o<16;o+=2){t=Math.min(r[o+1],r[o+2]);t=Math.min(t,r[o+3]);if(t<=m){continue}t=Math.min(t,r[o+4]);t=Math.min(t,r[o+5]);t=Math.min(t,r[o+6]);t=Math.min(t,r[o+7]);t=Math.min(t,r[o+8]);m=Math.max(m,Math.min(t,r[o]));m=Math.max(m,Math.min(t,r[o+9]))}u=-m;for(o=0;o<16;o+=2){s=Math.max(r[o+1],r[o+2]);s=Math.max(s,r[o+3]);s=Math.max(s,r[o+4]);s=Math.max(s,r[o+5]);if(s>=u){continue}s=Math.max(s,r[o+6]);s=Math.max(s,r[o+7]);s=Math.max(s,r[o+8]);u=Math.min(u,Math.max(s,r[o]));u=Math.min(u,Math.max(s,r[o+9]))}return -u-1};var c=20;return{set_threshold:function(j){c=Math.min(Math.max(j,0),255);for(var k=-255;k<=255;++k){f[(k+255)]=(k<-c?1:(k>c?2:0))}return c},detect:function(L,H,D){if(typeof D==="undefined"){D=3}var A=8,t=25;var u=L.data,X=L.cols,ar=L.rows;var ap=0,an=0,al=0,E=0,W=0,aq=0;var B=jsfeat.cache.get_buffer(3*X);var O=jsfeat.cache.get_buffer(((X+1)*3)<<2);var I=B.u8;var F=O.i32;var M=e;var J=i;var y=Math.max(3,D);var Z=Math.min((ar-2),(ar-D));var z=Math.max(3,D);var aa=Math.min((X-3),(X-D));var ah=0,P=0,C;var Q=g;var G=f;var p=c;var Y=0,ao=0,au=0,aw=0,U=0,V=0,av=0,R=0,at=0;var T=0,S=0,o=0;d(M,X,16);var am=M[0];var ak=M[1];var aj=M[2];var ai=M[3];var ag=M[4];var af=M[5];var ae=M[6];var ad=M[7];var ac=M[8];var ab=M[9];var s=M[10];var r=M[11];var q=M[12];var n=M[13];var m=M[14];var l=M[15];for(ap=0;ap<X*3;++ap){I[ap]=0}for(ap=y;ap<Z;++ap){av=((ap*X)+z)|0;aq=(ap-3)%3;V=(aq*X)|0;U=(aq*(X+1))|0;for(an=0;an<X;++an){I[V+an]=0}aw=0;if(ap<(Z-1)){an=z;for(;an<aa;++an,++av){Y=u[av];ao=(-Y+255);au=(G[ao+u[av+am]]|G[ao+u[av+ac]]);if(au==0){continue}au&=(G[ao+u[av+aj]]|G[ao+u[av+s]]);au&=(G[ao+u[av+ag]]|G[ao+u[av+q]]);au&=(G[ao+u[av+ae]]|G[ao+u[av+m]]);if(au==0){continue}au&=(G[ao+u[av+ak]]|G[ao+u[av+ab]]);au&=(G[ao+u[av+ai]]|G[ao+u[av+r]]);au&=(G[ao+u[av+af]]|G[ao+u[av+n]]);au&=(G[ao+u[av+ad]]|G[ao+u[av+l]]);if(au&1){E=(Y-p);ah=0;for(al=0;al<t;++al){W=u[(av+M[al])];if(W<E){++ah;if(ah>A){++aw;F[U+aw]=an;I[V+an]=Q(u,av,M,J,p);break}}else{ah=0}}}if(au&2){E=(Y+p);ah=0;for(al=0;al<t;++al){W=u[(av+M[al])];if(W>E){++ah;if(ah>A){++aw;F[U+aw]=an;I[V+an]=Q(u,av,M,J,p);break}}else{ah=0}}}}}F[U+X]=aw;if(ap==y){continue}aq=(ap-4+3)%3;R=(aq*X)|0;U=(aq*(X+1))|0;aq=(ap-5+3)%3;at=(aq*X)|0;aw=F[U+X];for(al=0;al<aw;++al){an=F[U+al];T=(an+1)|0;S=(an-1)|0;o=I[R+an];if((o>I[R+T]&&o>I[R+S]&&o>I[at+S]&&o>I[at+an]&&o>I[at+T]&&o>I[V+S]&&o>I[V+an]&&o>I[V+T])){C=H[P];C.x=an,C.y=(ap-1),C.score=o;P++}}}jsfeat.cache.put_buffer(B);jsfeat.cache.put_buffer(O);return P}}})();a.fast_corners=b;b.set_threshold(20)})(jsfeat);(function(b){var a=(function(){var d=function(e,l,q,i,r,g,p,n,k,j){var m=0,o=0,f=(n*q+p)|0,s=f;for(m=n;m<j;++m,f+=q,s=f){for(o=p;o<k;++o,++s){l[s]=-4*e[s]+e[s+r]+e[s-r]+e[s+g]+e[s-g]}}};var c=function(e,f,k,m,g,l,h){var o=-2*e[f]+e[f+m]+e[f-m];var i=-2*e[f]+e[f+g]+e[f-g];var n=e[f+l]+e[f-l]-e[f+h]-e[f-h];var j=(Math.sqrt(((o-i)*(o-i)+4*n*n)))|0;return Math.min(Math.abs(k-j),Math.abs(-(k+j)))};return{laplacian_threshold:30,min_eigen_value_threshold:25,detect:function(l,A,z){if(typeof z==="undefined"){z=5}var o=0,n=0;var p=l.cols,B=l.rows,q=l.data;var H=5,f=(5*p)|0;var G=(3+3*p)|0,g=(3-3*p)|0;var e=jsfeat.cache.get_buffer((p*B)<<2);var j=e.i32;var i=0,k=0,m=0,r=0,v;var u=0;var F=this.laplacian_threshold;var D=this.min_eigen_value_threshold;var t=Math.max(5,z)|0;var s=Math.max(3,z)|0;var E=Math.min(p-5,p-z)|0;var C=Math.min(B-3,B-z)|0;o=p*B;while(--o>=0){j[o]=0}d(q,j,p,B,H,f,t,s,E,C);k=(s*p+t)|0;for(n=s;n<C;++n,k+=p){for(o=t,m=k;o<E;++o,++m){i=j[m];if((i<-F&&i<j[m-1]&&i<j[m+1]&&i<j[m-p]&&i<j[m+p]&&i<j[m-p-1]&&i<j[m+p-1]&&i<j[m-p+1]&&i<j[m+p+1])||(i>F&&i>j[m-1]&&i>j[m+1]&&i>j[m-p]&&i>j[m+p]&&i>j[m-p-1]&&i>j[m+p-1]&&i>j[m-p+1]&&i>j[m+p+1])){r=c(q,m,i,H,f,G,g);if(r>D){v=A[u];v.x=o,v.y=n,v.score=r;++u;++o,++m}}}}jsfeat.cache.put_buffer(e);return u}}})();b.yape06=a})(jsfeat);(function(a){var b=(function(){var d=function(l,m,k){var j=0;var h,n;h=k;for(n=0;n<h;n++,j++){h=(Math.sqrt((k*k-n*n))+0.5)|0;m[j]=(h+l*n)}for(h--;h<n&&h>=0;h--,j++){n=(Math.sqrt((k*k-h*h))+0.5)|0;m[j]=(h+l*n)}for(;-h<n;h--,j++){n=(Math.sqrt((k*k-h*h))+0.5)|0;m[j]=(h+l*n)}for(n--;n>=0;n--,j++){h=(-Math.sqrt((k*k-n*n))-0.5)|0;m[j]=(h+l*n)}for(;n>h;n--,j++){h=(-Math.sqrt((k*k-n*n))-0.5)|0;m[j]=(h+l*n)}for(h++;h<=0;h++,j++){n=(-Math.sqrt((k*k-h*h))-0.5)|0;m[j]=(h+l*n)}for(;h<-n;h++,j++){n=(-Math.sqrt((k*k-h*h))-0.5)|0;m[j]=(h+l*n)}for(n++;n<0;n++,j++){h=(Math.sqrt((k*k-n*n))+0.5)|0;m[j]=(h+l*n)}m[j]=m[0];m[j+1]=m[1];return j};var g=function(h,j,i){var k=0;if(h[j+1]!=0){k++}if(h[j-1]!=0){k++}if(h[j+i]!=0){k++}if(h[j+i+1]!=0){k++}if(h[j+i-1]!=0){k++}if(h[j-i]!=0){k++}if(h[j-i+1]!=0){k++}if(h[j-i-1]!=0){k++}return k};var c=function(l,m,i,k,j){var h,n;if(i>0){m-=k*j;for(n=-j;n<=j;++n){for(h=-j;h<=j;++h){if(l[m+h]>i){return false}}m+=k}}else{m-=k*j;for(n=-j;n<=j;++n){for(h=-j;h<=j;++h){if(l[m+h]<i){return false}}m+=k}}return true};var e=function(s,r,m,u,p,i,l,n){var k=0;var q=0,o=(l-1)|0;var j=0,w=0,v=0,t=0;var h=0;j=s[r+i[q]];if((j<=p)){if((j>=u)){w=s[r+i[o]];if((w<=p)){if((w>=u)){m[r]=0;return}else{o++;v=s[r+i[o]];if((v>p)){o++;t=s[r+i[o]];if((t>p)){h=3}else{if((t<u)){h=6}else{m[r]=0;return}}}else{o++;t=s[r+i[o]];if((t>p)){h=7}else{if((t<u)){h=2}else{m[r]=0;return}}}}}else{o++;v=s[r+i[o]];if((v>p)){o++;t=s[r+i[o]];if((t>p)){h=3}else{if((t<u)){h=6}else{m[r]=0;return}}}else{if((v<u)){o++;t=s[r+i[o]];if((t>p)){h=7}else{if((t<u)){h=2}else{m[r]=0;return}}}else{m[r]=0;return}}}}else{w=s[r+i[o]];if((w>p)){m[r]=0;return}o++;v=s[r+i[o]];if((v>p)){m[r]=0;return}o++;t=s[r+i[o]];if((t>p)){m[r]=0;return}h=1}}else{w=s[r+i[o]];if((w<u)){m[r]=0;return}o++;v=s[r+i[o]];if((v<u)){m[r]=0;return}o++;t=s[r+i[o]];if((t<u)){m[r]=0;return}h=0}for(q=1;q<=l;q++){j=s[r+i[q]];switch(h){case 0:if((j>p)){v=t;o++;t=s[r+i[o]];if((t<u)){m[r]=0;return}k-=j+v;h=0;break}if((j<u)){if((v>p)){m[r]=0;return}if((t>p)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t>p)){m[r]=0;return}k-=j+v;h=8;break}if((v<=p)){m[r]=0;return}if((t<=p)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t>p)){k-=j+v;h=3;break}if((t<u)){k-=j+v;h=6;break}m[r]=0;return;case 1:if((j<u)){v=t;o++;t=s[r+i[o]];if((t>p)){m[r]=0;return}k-=j+v;h=1;break}if((j>p)){if((v<u)){m[r]=0;return}if((t<u)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t<u)){m[r]=0;return}k-=j+v;h=9;break}if((v>=u)){m[r]=0;return}if((t>=u)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t<u)){k-=j+v;h=2;break}if((t>p)){k-=j+v;h=7;break}m[r]=0;return;case 2:if((j>p)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((j<u)){if((t>p)){m[r]=0;return}k-=j+v;h=4;break}if((t>p)){k-=j+v;h=7;break}if((t<u)){k-=j+v;h=2;break}m[r]=0;return;case 3:if((j<u)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((j>p)){if((t<u)){m[r]=0;return}k-=j+v;h=5;break}if((t>p)){k-=j+v;h=3;break}if((t<u)){k-=j+v;h=6;break}m[r]=0;return;case 4:if((j>p)){m[r]=0;return}if((j<u)){v=t;o++;t=s[r+i[o]];if((t>p)){m[r]=0;return}k-=j+v;h=1;break}if((t>=u)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t<u)){k-=j+v;h=2;break}if((t>p)){k-=j+v;h=7;break}m[r]=0;return;case 5:if((j<u)){m[r]=0;return}if((j>p)){v=t;o++;t=s[r+i[o]];if((t<u)){m[r]=0;return}k-=j+v;h=0;break}if((t<=p)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t>p)){k-=j+v;h=3;break}if((t<u)){k-=j+v;h=6;break}m[r]=0;return;case 7:if((j>p)){m[r]=0;return}if((j<u)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t>p)){k-=j+v;h=3;break}if((t<u)){k-=j+v;h=6;break}m[r]=0;return;case 6:if((j>p)){m[r]=0;return}if((j<u)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t<u)){k-=j+v;h=2;break}if((t>p)){k-=j+v;h=7;break}m[r]=0;return;case 8:if((j>p)){if((t<u)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t<u)){m[r]=0;return}k-=j+v;h=9;break}if((j<u)){v=t;o++;t=s[r+i[o]];if((t>p)){m[r]=0;return}k-=j+v;h=1;break}m[r]=0;return;case 9:if((j<u)){if((t>p)){m[r]=0;return}v=t;o++;t=s[r+i[o]];if((t>p)){m[r]=0;return}k-=j+v;h=8;break}if((j>p)){v=t;o++;t=s[r+i[o]];if((t<u)){m[r]=0;return}k-=j+v;h=0;break}m[r]=0;return;default:break}}m[r]=(k+n*s[r])};var f=(function(){function h(i,j,k){this.dirs=new Int32Array(1024);this.dirs_count=d(i,this.dirs,k)|0;this.scores=new Int32Array(i*j);this.radius=k|0}return h})();return{level_tables:[],tau:7,init:function(m,j,h,l){if(typeof l==="undefined"){l=1}var k;h=Math.min(h,7);h=Math.max(h,3);for(k=0;k<l;++k){this.level_tables[k]=new f(m>>k,j>>k,h)}},detect:function(k,J,G){if(typeof G==="undefined"){G=4}var A=this.level_tables[0];var i=A.radius|0,q=(i-1)|0;var m=A.dirs;var n=A.dirs_count|0;var v=n>>1;var O=k.data,u=k.cols|0,K=k.rows|0,N=u>>1;var H=A.scores;var s=0,r=0,j=0,l=0,o=0,p=0,z=0,I=0;var F=this.tau|0;var D=0,E;var C=Math.max(i+1,G)|0;var B=Math.max(i+1,G)|0;var M=Math.min(u-i-2,u-G)|0;var L=Math.min(K-i-2,K-G)|0;j=(B*u+C)|0;for(r=B;r<L;++r,j+=u){for(s=C,l=j;s<M;++s,++l){o=O[l]+F,p=O[l]-F;if(p<O[l+i]&&O[l+i]<o&&p<O[l-i]&&O[l-i]<o){H[l]=0}else{e(O,l,H,p,o,m,v,n)}}}j=(B*u+C)|0;for(r=B;r<L;++r,j+=u){for(s=C,l=j;s<M;++s,++l){I=H[l];z=Math.abs(I);if(z<5){++s,++l}else{if(g(H,l,u)>=3&&c(H,l,I,N,i)){E=J[D];E.x=s,E.y=r,E.score=z;++D;s+=q,l+=q}}}}return D}}})();a.yape=b})(jsfeat);(function(b){var a=(function(){var d=new Int32Array([8,-3,9,5,4,2,7,-12,-11,9,-8,2,7,-12,12,-13,2,-13,2,12,1,-7,1,6,-2,-10,-2,-4,-13,-13,-11,-8,-13,-3,-12,-9,10,4,11,9,-13,-8,-8,-9,-11,7,-9,12,7,7,12,6,-4,-5,-3,0,-13,2,-12,-3,-9,0,-7,5,12,-6,12,-1,-3,6,-2,12,-6,-13,-4,-8,11,-13,12,-8,4,7,5,1,5,-3,10,-3,3,-7,6,12,-8,-7,-6,-2,-2,11,-1,-10,-13,12,-8,10,-7,3,-5,-3,-4,2,-3,7,-10,-12,-6,11,5,-12,6,-7,5,-6,7,-1,1,0,4,-5,9,11,11,-13,4,7,4,12,2,-1,4,4,-4,-12,-2,7,-8,-5,-7,-10,4,11,9,12,0,-8,1,-13,-13,-2,-8,2,-3,-2,-2,3,-6,9,-4,-9,8,12,10,7,0,9,1,3,7,-5,11,-10,-13,-6,-11,0,10,7,12,1,-6,-3,-6,12,10,-9,12,-4,-13,8,-8,-12,-13,0,-8,-4,3,3,7,8,5,7,10,-7,-1,7,1,-12,3,-10,5,6,2,-4,3,-10,-13,0,-13,5,-13,-7,-12,12,-13,3,-11,8,-7,12,-4,7,6,-10,12,8,-9,-1,-7,-6,-2,-5,0,12,-12,5,-7,5,3,-10,8,-13,-7,-7,-4,5,-3,-2,-1,-7,2,9,5,-11,-11,-13,-5,-13,-1,6,0,-1,5,-3,5,2,-4,-13,-4,12,-9,-6,-9,6,-12,-10,-8,-4,10,2,12,-3,7,12,12,12,-7,-13,-6,5,-4,9,-3,4,7,-1,12,2,-7,6,-5,1,-13,11,-12,5,-3,7,-2,-6,7,-8,12,-7,-13,-7,-11,-12,1,-3,12,12,2,-6,3,0,-4,3,-2,-13,-1,-13,1,9,7,1,8,-6,1,-1,3,12,9,1,12,6,-1,-9,-1,3,-13,-13,-10,5,7,7,10,12,12,-5,12,9,6,3,7,11,5,-13,6,10,2,-12,2,3,3,8,4,-6,2,6,12,-13,9,-12,10,3,-8,4,-7,9,-11,12,-4,-6,1,12,2,-8,6,-9,7,-4,2,3,3,-2,6,3,11,0,3,-3,8,-8,7,8,9,3,-11,-5,-6,-4,-10,11,-5,10,-5,-8,-3,12,-10,5,-9,0,8,-1,12,-6,4,-6,6,-11,-10,12,-8,7,4,-2,6,7,-2,0,-2,12,-5,-8,-5,2,7,-6,10,12,-9,-13,-8,-8,-5,-13,-5,-2,8,-8,9,-13,-9,-11,-9,0,1,-8,1,-2,7,-4,9,1,-2,1,-1,-4,11,-6,12,-11,-12,-9,-6,4,3,7,7,12,5,5,10,8,0,-4,2,8,-9,12,-5,-13,0,7,2,12,-1,2,1,7,5,11,7,-9,3,5,6,-8,-13,-4,-8,9,-5,9,-3,-3,-4,-7,-3,-12,6,5,8,0,-7,6,-6,12,-13,6,-5,-2,1,-10,3,10,4,1,8,-4,-2,-2,2,-13,2,-12,12,12,-2,-13,0,-6,4,1,9,3,-6,-10,-3,-5,-3,-13,-1,1,7,5,12,-11,4,-2,5,-7,-13,9,-9,-5,7,1,8,6,7,-8,7,6,-7,-4,-7,1,-8,11,-7,-8,-13,6,-12,-8,2,4,3,9,10,-5,12,3,-6,-5,-6,7,8,-3,9,-8,2,-12,2,8,-11,-2,-10,3,-12,-13,-7,-9,-11,0,-10,-5,5,-3,11,8,-2,-13,-1,12,-1,-8,0,9,-13,-11,-12,-5,-10,-2,-10,11,-3,9,-2,-13,2,-3,3,2,-9,-13,-4,0,-4,6,-3,-10,-4,12,-2,-7,-6,-11,-4,9,6,-3,6,11,-13,11,-5,5,11,11,12,6,7,-5,12,-2,-1,12,0,7,-4,-8,-3,-2,-7,1,-6,7,-13,-12,-8,-13,-7,-2,-6,-8,-8,5,-6,-9,-5,-1,-4,5,-13,7,-8,10,1,5,5,-13,1,0,10,-13,9,12,10,-1,5,-8,10,-9,-1,11,1,-13,-9,-3,-6,2,-1,-10,1,12,-13,1,-8,-10,8,-11,10,-6,2,-13,3,-6,7,-13,12,-9,-10,-10,-5,-7,-10,-8,-8,-13,4,-6,8,5,3,12,8,-13,-4,2,-3,-3,5,-13,10,-12,4,-13,5,-1,-9,9,-4,3,0,3,3,-9,-12,1,-6,1,3,2,4,-8,-10,-10,-10,9,8,-13,12,12,-8,-12,-6,-5,2,2,3,7,10,6,11,-8,6,8,8,-12,-7,10,-6,5,-3,-9,-3,9,-1,-13,-1,5,-3,-7,-3,4,-8,-2,-8,3,4,2,12,12,2,-5,3,11,6,-9,11,-13,3,-1,7,12,11,-1,12,4,-3,0,-3,6,4,-11,4,12,2,-4,2,1,-10,-6,-8,1,-13,7,-11,1,-13,12,-11,-13,6,0,11,-13,0,-1,1,4,-13,3,-9,-2,-9,8,-6,-3,-13,-6,-8,-2,5,-9,8,10,2,7,3,-9,-1,-6,-1,-1,9,5,11,-2,11,-3,12,-8,3,0,3,5,-1,4,0,10,3,-6,4,5,-13,0,-10,5,5,8,12,11,8,9,9,-6,7,-4,8,-12,-10,4,-10,9,7,3,12,4,9,-7,10,-2,7,0,12,-2,-1,-6,0,-11]);var c=new jsfeat.matrix_t(3,3,jsfeat.F32_t|jsfeat.C1_t);var f=new jsfeat.matrix_t(32,32,jsfeat.U8_t|jsfeat.C1_t);var e=function(l,n,k,i,h,j){var m=Math.cos(k);var g=Math.sin(k);c.data[0]=m,c.data[1]=-g,c.data[2]=(-m+g)*j*0.5+i,c.data[3]=g,c.data[4]=m,c.data[5]=(-g-m)*j*0.5+h;jsfeat.imgproc.warp_affine(l,n,c,128)};return{describe:function(j,u,g,B){var r=32;var x=0,A=0,q=0,p=0,z=0;var o=0,m=0,D=0;var C=j.data,n=j.cols,y=j.rows;var t=f.data;var v=16*32+16;var k=0;if(!(B.type&jsfeat.U8_t)){B.type=jsfeat.U8_t;B.cols=r;B.rows=g;B.channel=1;B.allocate()}else{B.resize(r,g,1)}var l=B.data;var s=0;for(x=0;x<g;++x){q=u[x].x;p=u[x].y;z=u[x].angle;e(j,f,z,q,p,32);k=0;for(A=0;A<r;++A){o=t[v+d[k+1]*32+d[k]];k+=2;m=t[v+d[k+1]*32+d[k]];k+=2;D=(o<m)|0;o=t[v+d[k+1]*32+d[k]];k+=2;m=t[v+d[k+1]*32+d[k]];k+=2;D|=(o<m)<<1;o=t[v+d[k+1]*32+d[k]];k+=2;m=t[v+d[k+1]*32+d[k]];k+=2;D|=(o<m)<<2;o=t[v+d[k+1]*32+d[k]];k+=2;m=t[v+d[k+1]*32+d[k]];k+=2;D|=(o<m)<<3;o=t[v+d[k+1]*32+d[k]];k+=2;m=t[v+d[k+1]*32+d[k]];k+=2;D|=(o<m)<<4;o=t[v+d[k+1]*32+d[k]];k+=2;m=t[v+d[k+1]*32+d[k]];k+=2;D|=(o<m)<<5;o=t[v+d[k+1]*32+d[k]];k+=2;m=t[v+d[k+1]*32+d[k]];k+=2;D|=(o<m)<<6;o=t[v+d[k+1]*32+d[k]];k+=2;m=t[v+d[k+1]*32+d[k]];k+=2;D|=(o<m)<<7;l[s+A]=D}s+=r}}}})();b.orb=a})(jsfeat);(function(b){var a=(function(){var c=jsfeat.imgproc.scharr_derivatives;return{track:function(n,u,ap,aL,k,N,R,K,f,q){if(typeof R==="undefined"){R=30}if(typeof K==="undefined"){K=new Uint8Array(k)}if(typeof f==="undefined"){f=0.01}if(typeof q==="undefined"){q=0.0001}var e=(N-1)*0.5;var h=(N*N)|0;var aa=h<<1;var r=n.data,S=u.data;var g=r[0].data,F=S[0].data;var M=r[0].cols,aB=r[0].rows,ay=0,aH=0;var az=jsfeat.cache.get_buffer(h<<2);var s=jsfeat.cache.get_buffer(aa<<2);var t=jsfeat.cache.get_buffer((aB*(M<<1))<<2);var V=new jsfeat.matrix_t(M,aB,jsfeat.S32C2_t,t.data);var w=az.i32;var ac=s.i32;var aA=t.i32;var ab=0,I=0,aM=0,at=0,aI=0,au=0;var am=0,aF=0,aD=0,af=0,ae=0;var E=0,z=0,Y=0,W=0;var p=0,o=0,aE=0,aC=0;var Q=0,P=0,J=0,H=0,ai=0,ak=0,l=0;var d=0,A=0,O=0;var U=0,T=0,aw=0,av=0;var ah=14;var C=14;var Z=C-5;var ax=(1<<((Z)-1));var ad=(1<<ah);var m=(1<<((C)-1));var X=1/(1<<20);var aK=0,aJ=0,ar=0,aq=0,al=0,v=0,B=0;var ao=0,an=0,ag=0,aj=0,aG=0;var G=1.1920929e-7;f*=f;for(;Q<k;++Q){K[Q]=1}var L=(n.levels-1)|0;ai=L;for(;ai>=0;--ai){am=(1/(1<<ai));ay=M>>ai;aH=aB>>ai;ab=ay<<1;g=r[ai].data;F=S[ai].data;A=(ay-N)|0;O=(aH-N)|0;c(r[ai],V);for(ak=0;ak<k;++ak){Q=ak<<1;P=Q+1;aF=ap[Q]*am;aD=ap[P]*am;if(ai==L){af=aF;ae=aD}else{af=aL[Q]*2;ae=aL[P]*2}aL[Q]=af;aL[P]=ae;aF-=e;aD-=e;p=aF|0;o=aD|0;J=(p<=d)|(p>=A)|(o<=d)|(o>=O);if(J!=0){if(ai==0){K[ak]=0}continue}U=aF-p;T=aD-o;aK=(((1-U)*(1-T)*ad)+0.5)|0;aJ=((U*(1-T)*ad)+0.5)|0;ar=(((1-U)*T*ad)+0.5)|0;aq=(ad-aK-aJ-ar);ao=0,an=0,ag=0;for(H=0;H<N;++H){I=((H+o)*ay+p)|0;aM=I<<1;at=(H*N)|0;aI=at<<1;for(J=0;J<N;++J,++I,++at,aM+=2){al=((g[I])*aK+(g[I+1])*aJ+(g[I+ay])*ar+(g[I+ay+1])*aq);al=(((al)+ax)>>(Z));v=(aA[aM]*aK+aA[aM+2]*aJ+aA[aM+ab]*ar+aA[aM+ab+2]*aq);v=(((v)+m)>>(C));B=(aA[aM+1]*aK+aA[aM+3]*aJ+aA[aM+ab+1]*ar+aA[aM+ab+3]*aq);B=(((B)+m)>>(C));w[at]=al;ac[aI++]=v;ac[aI++]=B;ao+=v*v;an+=v*B;ag+=B*B}}ao*=X;an*=X;ag*=X;aj=ao*ag-an*an;aG=(ag+ao-Math.sqrt((ao-ag)*(ao-ag)+4*an*an))/aa;if(aG<q||aj<G){if(ai==0){K[ak]=0}continue}aj=1/aj;af-=e;ae-=e;E=0;z=0;for(l=0;l<R;++l){aE=af|0;aC=ae|0;J=(aE<=d)|(aE>=A)|(aC<=d)|(aC>=O);if(J!=0){if(ai==0){K[ak]=0}break}U=af-aE;T=ae-aC;aK=(((1-U)*(1-T)*ad)+0.5)|0;aJ=((U*(1-T)*ad)+0.5)|0;ar=(((1-U)*T*ad)+0.5)|0;aq=(ad-aK-aJ-ar);aw=0,av=0;for(H=0;H<N;++H){au=((H+aC)*ay+aE)|0;at=(H*N)|0;aI=at<<1;for(J=0;J<N;++J,++au,++at){al=((F[au])*aK+(F[au+1])*aJ+(F[au+ay])*ar+(F[au+ay+1])*aq);al=(((al)+ax)>>(Z));al=(al-w[at]);aw+=al*ac[aI++];av+=al*ac[aI++]}}aw*=X;av*=X;Y=((an*av-ag*aw)*aj);W=((an*aw-ao*av)*aj);af+=Y;ae+=W;aL[Q]=af+e;aL[P]=ae+e;if(Y*Y+W*W<=f){break}if(l>0&&Math.abs(Y+E)<0.01&&Math.abs(W+z)<0.01){aL[Q]-=Y*0.5;aL[P]-=W*0.5;break}E=Y;z=W}}}jsfeat.cache.put_buffer(az);jsfeat.cache.put_buffer(s);jsfeat.cache.put_buffer(t)}}})();b.optical_flow_lk=a})(jsfeat);(function(b){var a=(function(){var c=function(e,d){var f=(e.width*0.25+0.5)|0;return d.x<=e.x+f&&d.x>=e.x-f&&d.y<=e.y+f&&d.y>=e.y-f&&d.width<=(e.width*1.5+0.5)|0&&(d.width*1.5+0.5)|0>=e.width};return{edges_density:0.07,detect_single_scale:function(E,ad,af,q,d,f,D,B){var z=(B.size[0]*D)|0,N=(B.size[1]*D)|0,V=(0.5*D+1.5)|0,U=V;var Z,X,W,Q,O,T=(d-z)|0,R=(f-N)|0;var H=(d+1)|0,w,p,r,S;var e=1/(z*N);var t,o,l,u,s,ae,A,g=true,L,h,n,G,m;var M,K,J,I,v,C;var ac=0,ab=z,aa=N*H,Y=aa+z;var F=((z*N)*255*this.edges_density)|0;var P=[];for(O=0;O<R;O+=U){ac=O*H;for(Q=0;Q<T;Q+=V,ac+=V){p=E[ac]-E[ac+ab]-E[ac+aa]+E[ac+Y];if(q){w=(q[ac]-q[ac+ab]-q[ac+aa]+q[ac+Y]);if(w<F||p<20){Q+=V,ac+=V;continue}}p*=e;r=(ad[ac]-ad[ac+ab]-ad[ac+aa]+ad[ac+Y])*e-p*p;S=r>0?Math.sqrt(r):1;t=B.complexClassifiers;s=t.length;g=true;for(Z=0;Z<s;++Z){o=t[Z];L=o.threshold;l=o.simpleClassifiers;ae=l.length;h=0;for(X=0;X<ae;++X){u=l[X];n=0;m=u.features;A=m.length;if(u.tilted===1){for(W=0;W<A;++W){G=m[W];M=~~(Q+G[0]*D)+~~(O+G[1]*D)*H;v=~~(G[2]*D);C=~~(G[3]*D);K=v*H;J=C*H;n+=(af[M]-af[M+v+K]-af[M-C+J]+af[M+v-C+K+J])*G[4]}}else{for(W=0;W<A;++W){G=m[W];M=~~(Q+G[0]*D)+~~(O+G[1]*D)*H;v=~~(G[2]*D);C=~~(G[3]*D);J=C*H;n+=(E[M]-E[M+v]-E[M+J]+E[M+J+v])*G[4]}}h+=(n*e<u.threshold*S)?u.left_val:u.right_val}if(h<L){g=false;break}}if(g){P.push({x:Q,y:O,width:z,height:N,neighbor:1,confidence:h});Q+=V,ac+=V}}}return P},detect_multi_scale:function(e,m,f,h,d,n,i,g,k){if(typeof g==="undefined"){g=1.2}if(typeof k==="undefined"){k=1}var o=i.size[0];var j=i.size[1];var l=[];while(k*o<d&&k*j<n){l=l.concat(this.detect_single_scale(e,m,f,h,d,n,k,i));k*=g}return l},group_rectangles:function(g,l){if(typeof l==="undefined"){l=1}var y,v,q=g.length;var r=[];for(y=0;y<q;++y){r[y]={parent:-1,element:g[y],rank:0}}for(y=0;y<q;++y){if(!r[y].element){continue}var t=y;while(r[t].parent!=-1){t=r[t].parent}for(v=0;v<q;++v){if(y!=v&&r[v].element&&c(r[y].element,r[v].element)){var s=v;while(r[s].parent!=-1){s=r[s].parent}if(s!=t){if(r[t].rank>r[s].rank){r[s].parent=t}else{r[t].parent=s;if(r[t].rank==r[s].rank){r[s].rank++}t=s}var A,d=v;while(r[d].parent!=-1){A=d;d=r[d].parent;r[A].parent=t}d=y;while(r[d].parent!=-1){A=d;d=r[d].parent;r[A].parent=t}}}}}var w=[];var o=0;for(y=0;y<q;y++){v=-1;var e=y;if(r[e].element){while(r[e].parent!=-1){e=r[e].parent}if(r[e].rank>=0){r[e].rank=~o++}v=~r[e].rank}w[y]=v}var m=[];for(y=0;y<o+1;++y){m[y]={neighbors:0,x:0,y:0,width:0,height:0,confidence:0}}for(y=0;y<q;++y){var z=g[y];var k=w[y];if(m[k].neighbors==0){m[k].confidence=z.confidence}++m[k].neighbors;m[k].x+=z.x;m[k].y+=z.y;m[k].width+=z.width;m[k].height+=z.height;m[k].confidence=Math.max(m[k].confidence,z.confidence)}var h=[];for(y=0;y<o;++y){q=m[y].neighbors;if(q>=l){h.push({x:(m[y].x*2+q)/(2*q),y:(m[y].y*2+q)/(2*q),width:(m[y].width*2+q)/(2*q),height:(m[y].height*2+q)/(2*q),neighbors:m[y].neighbors,confidence:m[y].confidence})}}var p=[];q=h.length;for(y=0;y<q;++y){var z=h[y];var x=true;for(v=0;v<q;++v){var u=h[v];var f=(u.width*0.25+0.5)|0;if(y!=v&&z.x>=u.x-f&&z.y>=u.y-f&&z.x+z.width<=u.x+u.width+f&&z.y+z.height<=u.y+u.height+f&&(u.neighbors>Math.max(3,z.neighbors)||z.neighbors<3)){x=false;break}}if(x){p.push(z)}}return p}}})();b.haar=a})(jsfeat);(function(a){var b=(function(){var c=function(f,e){var g=(f.width*0.25+0.5)|0;return e.x<=f.x+g&&e.x>=f.x-g&&e.y<=f.y+g&&e.y>=f.y-g&&e.width<=(f.width*1.5+0.5)|0&&(e.width*1.5+0.5)|0>=f.width};var d=new jsfeat.pyramid_t(1);return{interval:4,scale:1.1486,next:5,scale_to:1,prepare_cascade:function(g){var m=g.stage_classifier.length;for(var h=0;h<m;h++){var l=g.stage_classifier[h].feature;var e=g.stage_classifier[h].count;var i=g.stage_classifier[h]._feature=new Array(e);for(var f=0;f<e;f++){i[f]={size:l[f].size,px:new Array(l[f].size),pz:new Array(l[f].size),nx:new Array(l[f].size),nz:new Array(l[f].size)}}}},build_pyramid:function(e,k,s,f){if(typeof f==="undefined"){f=4}var q=e.cols,m=e.rows;var l=0,n=0,h=0;var p=false;var j=e,g=e;var r=jsfeat.U8_t|jsfeat.C1_t;this.interval=f;this.scale=Math.pow(2,1/(this.interval+1));this.next=(this.interval+1)|0;this.scale_to=(Math.log(Math.min(q/k,m/s))/Math.log(this.scale))|0;var o=((this.scale_to+this.next*2)*4)|0;if(d.levels!=o){d.levels=o;d.data=new Array(o);p=true;d.data[0]=e}for(l=1;l<=this.interval;++l){n=(q/Math.pow(this.scale,l))|0;h=(m/Math.pow(this.scale,l))|0;j=d.data[l<<2];if(p||n!=j.cols||h!=j.rows){d.data[l<<2]=new jsfeat.matrix_t(n,h,r);j=d.data[l<<2]}jsfeat.imgproc.resample(e,j,n,h)}for(l=this.next;l<this.scale_to+this.next*2;++l){g=d.data[(l<<2)-(this.next<<2)];j=d.data[l<<2];n=g.cols>>1;h=g.rows>>1;if(p||n!=j.cols||h!=j.rows){d.data[l<<2]=new jsfeat.matrix_t(n,h,r);j=d.data[l<<2]}jsfeat.imgproc.pyrdown(g,j)}for(l=this.next*2;l<this.scale_to+this.next*2;++l){g=d.data[(l<<2)-(this.next<<2)];n=g.cols>>1;h=g.rows>>1;j=d.data[(l<<2)+1];if(p||n!=j.cols||h!=j.rows){d.data[(l<<2)+1]=new jsfeat.matrix_t(n,h,r);j=d.data[(l<<2)+1]}jsfeat.imgproc.pyrdown(g,j,1,0);j=d.data[(l<<2)+2];if(p||n!=j.cols||h!=j.rows){d.data[(l<<2)+2]=new jsfeat.matrix_t(n,h,r);j=d.data[(l<<2)+2]}jsfeat.imgproc.pyrdown(g,j,0,1);j=d.data[(l<<2)+3];if(p||n!=j.cols||h!=j.rows){d.data[(l<<2)+3]=new jsfeat.matrix_t(n,h,r);j=d.data[(l<<2)+3]}jsfeat.imgproc.pyrdown(g,j,1,1)}return d},detect:function(G,L){var h=this.interval;var N=this.scale;var m=this.next;var l=this.scale_to;var ab=0,aa=0,Z=0,W=0,S=0,R=0,U=0,B=0,J=0,I=0,V=0,ae=0,M=0,ad=0,w=0,Y=0,g=0;var E=0,X,Q,D,H,F,O=true,o=true;var z=1,v=1;var s=[0,1,0,1];var r=[0,0,1,1];var K=[];var C=G.data,ac=1,u=2,t=4;var A=[],e=[0,0,0];var P=[0,0,0];var T=[0,0,0];for(ab=0;ab<l;ab++){w=(ab<<2);Y=C[w+(m<<3)].cols-(L.width>>2);g=C[w+(m<<3)].rows-(L.height>>2);P[0]=C[w].cols*ac;P[1]=C[w+(m<<2)].cols*ac;P[2]=C[w+(m<<3)].cols*ac;T[0]=(C[w].cols*t)-(Y*t);T[1]=(C[w+(m<<2)].cols*u)-(Y*u);T[2]=(C[w+(m<<3)].cols*ac)-(Y*ac);B=L.stage_classifier.length;for(aa=0;aa<B;aa++){D=L.stage_classifier[aa].feature;Q=L.stage_classifier[aa]._feature;J=L.stage_classifier[aa].count;for(Z=0;Z<J;Z++){H=Q[Z];F=D[Z];I=F.size|0;for(U=0;U<I;U++){H.px[U]=(F.px[U]*ac)+F.py[U]*P[F.pz[U]];H.pz[U]=F.pz[U];H.nx[U]=(F.nx[U]*ac)+F.ny[U]*P[F.nz[U]];H.nz[U]=F.nz[U]}}}A[0]=C[w].data;A[1]=C[w+(m<<2)].data;for(U=0;U<4;U++){A[2]=C[w+(m<<3)+U].data;e[0]=(s[U]*u)+r[U]*(C[w].cols*u);e[1]=(s[U]*ac)+r[U]*(C[w+(m<<2)].cols*ac);e[2]=0;for(R=0;R<g;R++){for(S=0;S<Y;S++){E=0;O=true;B=L.stage_classifier.length;for(aa=0;aa<B;aa++){E=0;X=L.stage_classifier[aa].alpha;Q=L.stage_classifier[aa]._feature;J=L.stage_classifier[aa].count;for(Z=0;Z<J;Z++){H=Q[Z];ae=A[H.pz[0]][e[H.pz[0]]+H.px[0]];M=A[H.nz[0]][e[H.nz[0]]+H.nx[0]];if(ae<=M){E+=X[Z<<1]}else{o=true;I=H.size;for(ad=1;ad<I;ad++){if(H.pz[ad]>=0){V=A[H.pz[ad]][e[H.pz[ad]]+H.px[ad]];if(V<ae){if(V<=M){o=false;break}ae=V}}if(H.nz[ad]>=0){W=A[H.nz[ad]][e[H.nz[ad]]+H.nx[ad]];if(W>M){if(ae<=W){o=false;break}M=W}}}E+=(o)?X[(Z<<1)+1]:X[Z<<1]}}if(E<L.stage_classifier[aa].threshold){O=false;break}}if(O){K.push({x:(S*4+s[U]*2)*z,y:(R*4+r[U]*2)*v,width:L.width*z,height:L.height*v,neighbor:1,confidence:E});++S;e[0]+=t;e[1]+=u;e[2]+=ac}e[0]+=t;e[1]+=u;e[2]+=ac}e[0]+=T[0];e[1]+=T[1];e[2]+=T[2]}}z*=N;v*=N}return K},group_rectangles:function(h,m){if(typeof m==="undefined"){m=1}var z,w,r=h.length;var s=[];for(z=0;z<r;++z){s[z]={parent:-1,element:h[z],rank:0}}for(z=0;z<r;++z){if(!s[z].element){continue}var u=z;while(s[u].parent!=-1){u=s[u].parent}for(w=0;w<r;++w){if(z!=w&&s[w].element&&c(s[z].element,s[w].element)){var t=w;while(s[t].parent!=-1){t=s[t].parent}if(t!=u){if(s[u].rank>s[t].rank){s[t].parent=u}else{s[u].parent=t;if(s[u].rank==s[t].rank){s[t].rank++}u=t}var B,e=w;while(s[e].parent!=-1){B=e;e=s[e].parent;s[B].parent=u}e=z;while(s[e].parent!=-1){B=e;e=s[e].parent;s[B].parent=u}}}}}var x=[];var p=0;for(z=0;z<r;z++){w=-1;var f=z;if(s[f].element){while(s[f].parent!=-1){f=s[f].parent}if(s[f].rank>=0){s[f].rank=~p++}w=~s[f].rank}x[z]=w}var o=[];for(z=0;z<p+1;++z){o[z]={neighbors:0,x:0,y:0,width:0,height:0,confidence:0}}for(z=0;z<r;++z){var A=h[z];var l=x[z];if(o[l].neighbors==0){o[l].confidence=A.confidence}++o[l].neighbors;o[l].x+=A.x;o[l].y+=A.y;o[l].width+=A.width;o[l].height+=A.height;o[l].confidence=Math.max(o[l].confidence,A.confidence)}var k=[];for(z=0;z<p;++z){r=o[z].neighbors;if(r>=m){k.push({x:(o[z].x*2+r)/(2*r),y:(o[z].y*2+r)/(2*r),width:(o[z].width*2+r)/(2*r),height:(o[z].height*2+r)/(2*r),neighbors:o[z].neighbors,confidence:o[z].confidence})}}var q=[];r=k.length;for(z=0;z<r;++z){var A=k[z];var y=true;for(w=0;w<r;++w){var v=k[w];var g=(v.width*0.25+0.5)|0;if(z!=w&&A.x>=v.x-g&&A.y>=v.y-g&&A.x+A.width<=v.x+v.width+g&&A.y+A.height<=v.y+v.height+g&&(v.neighbors>Math.max(3,A.neighbors)||A.neighbors<3)){y=false;break}}if(y){q.push(A)}}return q}}})();a.bbf=b})(jsfeat);(function(a){if(typeof module==="undefined"||typeof module.exports==="undefined"){window.jsfeat=a}else{module.exports=a}})(jsfeat);

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function() { 
	return {
	  "scoring": {
	    "size": [20, 22], 
	    "bias": -1.3970965781063711, 
	    "coef": [-0.019443206312618266, -0.0084626551369373984, -0.0056439963412376806, -0.0030632716896851417, 0.0050581938798613096, 0.0038671999692946632, 0.0073781421893252819, 0.008408844556368901, 0.0021079916674897471, 0.0088021517989660455, 0.0084634202851292546, 0.0091341881048755593, 0.0021677708519095705, 0.0057905826022958259, 0.010027042924308791, 0.010018015835686447, 0.011074574130386098, -0.00061695783617744283, -0.0060840083569450205, -0.0094487678808903661, -0.012441209862965338, -0.0038650406223106025, -0.00031049888008515014, 0.003187872856386012, 0.0078183021180926356, 0.010960251877128001, 0.012100913210202307, 0.012289318801648701, 0.012872315936395949, 0.0134197639066574, 0.012863004278393353, 0.012570470005854794, 0.0144288424245574, 0.013339430524005279, 0.013248442014867023, 0.012998181709015256, 0.0080561986303109411, 0.0014670228332206666, -0.011928206846124195, -0.0097909276659884133, -0.019951337591485003, -0.014601516863452837, -0.013174779761633797, -0.0060514903696567476, -0.0010407140556988824, 0.0054650997555345483, 0.010448591237341475, 0.014061216421035866, 0.015918382919452134, 0.016360925963435087, 0.02175676516818845, 0.017301016139781272, 0.014195207612699818, 0.012452400847919372, 0.010454129710215853, 0.0040883019269826832, -0.0014194361456059026, -0.0038498599142176948, -0.010769873280441659, -0.011758097810167857, -0.0046927302624985654, -0.0022134112349382041, -0.0039804434067522172, -0.012186682535867691, -0.011886732829841436, -0.008198434083715244, 0.0028353930104073055, 0.0070820189528775831, 0.012238372017639833, 0.016348014515026394, 0.020980251210150468, 0.01731275318263429, 0.01186526524722499, 0.007237133559106634, 0.0028787582373227981, -0.007467321804467685, -0.012293394385884527, -0.014833951237083715, -0.0083886394867411403, -0.001277206299448029, -0.0043237762267366413, -0.00079995554890789644, -0.0090446939377834615, -0.015715154398522533, -0.016374353020164909, -0.018048467332774626, -0.012034275948581882, -0.0072430439975880896, 0.00051252407841081971, 0.013091943912572559, 0.018570409085074381, 0.013098815816852492, 0.0008591564011330168, -0.0064555113363009954, -0.014574145037132261, -0.018221531408352937, -0.01805986873321162, -0.016665959992610131, -0.016742981997331947, -0.012862200876738698, -0.037408776782215991, -0.026830315322269691, -0.036692867895355551, -0.034788073944897399, -0.021885031967903899, -0.024484660949111742, -0.028068870569776663, -0.018631752402912666, 0.00033862502266578511, 0.01559117928255003, 0.021178968053305464, 0.015184030917486158, 0.002942909802540911, -0.014374637994945122, -0.025568052116952664, -0.025717989966112242, -0.023218559873459776, -0.043064179414035626, -0.042244667490572319, -0.040560989397592062, -0.029282249261991376, -0.037097180414959283, -0.050209371445049687, -0.043175446636272506, -0.038799263945784764, -0.037913350312177137, -0.024596940746816367, -0.013391546719824746, 0.0026176056292311106, 0.0161600431397954, 0.021950494557360537, 0.018824694902420232, 0.006927363884398058, -0.0067099747768306958, -0.018258612142465137, -0.031150030943545643, -0.030987027023796063, -0.033628054995754796, -0.043437053800875543, -0.034534827602693656, -0.0027688241949539527, -0.0045492751804971556, -0.0029637241504820444, -0.0034067004234806259, -0.0058158675916083176, -0.0050003474884839725, -0.0052189027673953392, -0.0035094302696121191, 0.0048075866050476977, 0.015230282965296896, 0.017877023790346995, 0.015060123226282708, 0.0068301148455019063, -0.00074735425779775112, -0.0047129224250249081, -0.0020172475601060438, -0.0028733715759857248, -3.2165259563759688e-05, 0.0052576318460990619, 0.0043528918718454875, 0.016945619656148794, 0.015930900625567117, 0.013751773645422991, 0.010130474427749569, 0.0080480898297084717, 0.0066539674397816983, 0.0068324700348844428, 0.0069577044114707276, 0.0040399129489101342, 0.011715241103133139, 0.017439724961211336, 0.014273924944517397, 0.0061485975492234337, 0.0064501329867605404, 0.0064154824267410098, 0.0087972617488658849, 0.0085371084737999835, 0.0087282112830335563, 0.011782866421798245, 0.016746943082334282, 0.022118218282678175, 0.020835875059091086, 0.018311801034637344, 0.01589801188949137, 0.017833422960512931, 0.01556573659143182, 0.014048773907766661, 0.0092415766206588174, 0.008151842723012729, 0.011230814598071655, 0.01256801671117759, 0.012111623945116202, 0.0098381741274288295, 0.0073611628026903006, 0.0095541157333664112, 0.011727533965135649, 0.018125902932239795, 0.019469248207063541, 0.017398513191690286, 0.021144199041044975, 0.021132145666912093, 0.019499184169656004, 0.019592876054570843, 0.02028149781228069, 0.017450605090846959, 0.01415914728419608, 0.0062290511445100638, 0.0038367364618697264, 0.0070206311493656928, 0.0096561161467108754, 0.011406409148288063, 0.0073273774756050288, 0.0046725824974188255, 0.0052535602992445293, 0.00018758422847375771, 0.0081523629612461953, 0.012760089024104778, 0.021600004613459223, 0.02330330354276354, 0.023745752734397885, 0.018230549428489853, 0.020013388637927079, 0.019842171101705101, 0.018799688221643948, 0.010638029835974899, 0.00047497591850582786, -0.0071779359181283857, -0.0013492660142831474, 0.0015382005340972228, 0.0026091901041104195, 0.00054046824549715592, -0.00049664221846118756, -0.0004620349686195485, -0.0052440228766081143, -0.0052152354482096451, -0.010002649985436339, 0.0014386382744505852, 0.012845063185194877, 0.020827676960957435, 0.02373841052172394, 0.015716685713465389, 0.01638066669873605, 0.014902611437895159, 0.0073730357797861029, 0.0019356373041797752, -0.0061999712321189927, -0.0091165414771389678, -0.008810991502401562, -0.014849548271736901, -0.002088752298238026, 0.0052140970488441726, 0.0010527273675475608, -0.010321625138183299, -0.016207678046552692, -0.012439252596672909, -0.013087206027715756, -0.0027969969285832111, 0.0023632017053047227, 0.011157492323637063, 0.018368837091378775, 0.009522424063657664, 0.010552085697652452, 0.0065611074700353111, -0.0015314856230301123, -0.0032492038209889869, -0.0031329857351426339, -0.0009277374824954263, -0.0020968871213430215, -0.002752601764726735, 0.00094388371290420677, 5.9164336949845309e-05, -0.0017254679888374039, -0.0034420772687673035, -0.0045773609585904318, -0.0025304599008137956, -0.00038215561598060812, 0.00057078584536244593, 0.0031325966195568239, 0.0060237831417333659, 0.01158476991744758, 0.0016262584963572593, 0.0032288122743198387, 0.0012532877511827127, 0.00062747794288786391, 0.0023766730707680218, 0.0028182202873619686, 0.0023771129569157626, -0.0033402786707182365, -0.0048954226369167918, 0.0030746977489523515, 0.0062648590670420657, 0.0050231159304044643, 0.00044657525636142406, -0.0048270904988737106, -0.0040237200076292511, 0.0024988183457590458, 0.0054580394659512529, 0.0072880311920233637, 0.0036009634090189563, 0.010569246292394684, -0.0045836905885612515, 0.00057936439982262571, 0.00102991877614139, 0.0030014799750564766, 0.0036675159287522449, 0.0044718005821969111, 0.0068927421100514214, 0.0039124352937196984, 0.007139428500837236, 0.010304447674314087, 0.012609007891982103, 0.008958913992549505, 0.0086037912511740151, 0.0055408494888294774, 0.0046721790312300258, 0.0047921200350865495, 0.0058818201004558757, 0.0056047225724042979, 0.0054112450019911731, 0.0073264985149536482, -0.0027341865318231302, -0.0027247005346668829, -0.0034900498414649531, -0.0079957154687285564, -0.0040761105067111218, -0.0020778048501128819, -0.0028478822594267903, -0.0039662744056797195, -0.0026161203530461301, 0.00092611267411275692, 0.0017426886986748021, 0.00055187058776232881, -0.0013723391980049371, -0.0045995868862228262, -0.004201475995629732, -0.0054721778518871953, -0.002341678055566526, -0.0025440841811939178, -0.0078777546807155367, 5.340267621167532e-05, 0.0046873465713941241, 0.0021887942815206605, 0.0013036188253628853, -0.001369820467079858, -0.015804998363084376, -0.016267691007421516, -0.018900936626522147, -0.017659450320792951, -0.011812605534381678, -0.0034436129735933847, -0.0023483321715621502, -0.0050111463464252073, -0.0050922386240516513, -0.015030789874247219, -0.020198024497642013, -0.021620507739756673, -0.018586140603325793, -0.018723839025246693, -0.0055722698499209482, 0.0064480458300502788, 0.0026822651632485931, 0.0060010017569890623, 0.0039986244661379938, 0.0050813259426419084, -0.0059114072323689293, -0.027745788024718613, -0.029251292823436387, -0.023066523347947315, -0.017210413752997977, -0.015963112589643183, -0.021075188283476324, -0.023666705491108494, -0.020005598090990763, -0.019062969033403668, -0.017792117192348619, -0.025322677372927888, -0.020971240352056199, -0.003436645553932082, 0.0043350896839554273, 0.0084557183627534376, -0.0063213373221792614, -0.0012841346959162978, -0.0012350140140767124, 0.004020967306281667, 0.0092274867614143326, 0.0045264965008091395, 0.0041315898134410677, 0.00077108445452623935, 0.0017580819918377949, -0.0011577021001876594, -0.0036195352433658614, -0.0037319908665914719, -0.001666179302724247, 0.0031110879435167255, 0.0014906582671670387, 0.0048443015054418677, 0.0059990829294203933, 0.0084750979219295353, 0.0055827168912293912, 0.0025145315352065756, -0.0046319230006191276, -0.0076182514283882324, -0.0046593775053102001, -0.0031253513278243637, 0.0074653367528114828, 0.010125926733440484, 0.0094747053616804754, 0.0035657571954442512, 0.0057833695060832482, 0.003888133034710705, 0.0019960148005530504, 0.0015056031401225207, 0.0011132050024144288, 0.0054876547928768482, 0.0047365733649033419, 0.0072106350627162141, 0.010077746417547511, 0.0038570243972044947, -0.003118757327733293, 8.694979275512165e-05, -0.021441387266543339, -0.0072102976069877674, -0.0078359058223554552, -0.00594066743311885, -0.0016100298225058601, 0.0053450064816458259, 0.0071049496578081076, 0.010196875445129471, 0.0057577873293374569, 0.0074570800047582559, 0.0062731053175082022, 0.0076242083673520502, 0.0068436930933054993, 0.0070021422399430639, 0.0087250840640590785, 0.0089995789681808595, 0.0034314447644411355, -0.001989159567628072, -0.007896602411841893, -0.010924672368545567]
	  }, 
	  "path": {
	    "normal": [
	      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 
	      [15, 16, 17, 18], 
	      [19, 20, 21, 22], 
	      [23, 63, 24, 64, 25, 65, 26, 66, 23], 
	      [28, 67, 29, 68, 30, 69, 31, 70, 28],  
	      [34, 35, 36, 42, 37, 43, 38, 39, 40],  
	      [33, 41, 62],  
	      [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 44, 56, 57, 58, 50, 59, 60, 61, 44], 
	      27, 32
	    ],
	    "vertices": [
	      // jawline
	      [0,1,23,0],
	      [1,23,66,1],
	      [1,2,66,1],
	      [2,66,26,2],
	      [2,26,35,2],
	      [2,35,36,2],
	      [2,36,3,2],
	      [36,44,45,36],
	      [3,4,44,3],
	      [3,44,36,3],
	      [4,44,55,4],
	      [4,5,55,4],
	      [5,55,54,5],
	      [5,6,54,5],
	      [6,53,54,6],
	      [6,7,53,6],
	      [7,8,53,7],
	      [8,52,53,8],
	      [8,9,52,8],
	      [9,51,52,9],
	      [9,10,51,9],
	      [10,50,51,10],
	      [10,11,50,10],
	      [11,38,50,11],
	      [11,12,38,11],
	      [12,38,39,12],
	      [12,31,39,12],
	      [12,31,70,12],
	      [12,13,70,12],
	      [13,28,70,13],
	      [13,14,28,13],
	      // right eyebrow
	      [14,15,28,14],
	      [15,28,67,15],
	      [15,16,67,15],
	      [16,67,29,16],
	      [16,17,29,16],
	      [17,68,29,17],
	      [17,18,68,17],
	      [18,68,30,18],
	      [18,30,33,18],
	      // below eyes
	      [30,40,69,30],
	      [39,40,69,39],
	      [39,31,69,39],
	      [26,65,35,26],
	      [34,35,65,34],
	      [25,34,65,25],
	      // left eyebrow
	      [22,25,33,22],
	      [22,25,64,22],
	      [21,22,64,21],
	      [21,24,64,21],
	      [20,21,24,20],
	      [20,24,63,20],
	      [19,20,63,19],
	      [19,23,63,19],
	      [19,23,0,19],
	      // below nose
	      [36,45,46,36],
	      [36,42,46,36],
	      [42,37,46,42],
	      [37,46,47,37],
	      [46,37,47,46],
	      [37,47,48,37],
	      [38,48,49,38],
	      [37,43,48,37],
	      [43,38,48,43],
	      [38,49,50,38],
	      // nose region
	      [22,18,33,22],
	      [40,41,30,40],
	      [25,33,41,25],
	      [33,41,30,33],
	      [25,34,41,25],
	      [41,40,62,41],
	      [34,41,62,34],
	      [34,35,62,34],
	      [35,36,62,35],
	      [36,42,62,36],
	      [42,37,62,42],
	      [37,43,62,37],
	      [43,38,62,43],
	      [38,39,62,38],
	      [39,40,62,39],
	      // mouth
	      [44,45,61,44],
	      [45,46,61,45],
	      [46,47,61,46],
	      [47,61,60,47],
	      [47,59,60,47],
	      [47,48,59,47],
	      [48,49,59,48],
	      [49,50,59,49],
	      [50,51,58,50],
	      [51,52,58,51],
	      [52,57,58,52],
	      [52,53,57,52],
	      [53,54,57,53],
	      [54,56,57,54],
	      [54,55,56,54],
	      [44,55,56,44],
	      // left eye
	      [23,63,27,23],
	      [63,24,27,63],
	      [24,64,27,24],
	      [64,25,27,64],
	      [25,65,27,25],
	      [65,26,27,65],
	      [26,66,27,26],
	      [66,23,27,66],
	      // right eye
	      [28,67,32,28],
	      [67,29,32,67],
	      [29,68,32,29],
	      [68,30,32,68],
	      [30,69,32,30],
	      [69,31,32,69],
	      [31,70,32,31],
	      [28,32,70,28]
	    ]
	  }, 
	  "patchModel": {
	    "patchType": "SVM", 
	    "bias": {
	      "raw": [-0.964306520867, -1.03566919244, -0.874989992149, -0.916328634351, -0.84503678968, -0.844297101434, -0.738523173234, -0.808714131663, -0.726541145855, -0.843675312327, -0.869822246614, -0.917260263832, -0.873711733476, -1.02671396751, -0.98146088848, -0.873014174242, -1.02044597636, -1.05803547484, -1.22124828051, -0.881683950651, -1.03317042471, -1.05134750237, -1.24054665894, -1.16383797435, -1.06699587696, -1.23916761432, -1.18767751229, -1.12345203915, -1.13546600331, -1.08024044629, -1.24021266444, -1.16700091429, -1.11195019559, -0.729540672833, -1.12391599663, -1.3005410545, -1.31472443469, -1.08705339489, -1.33623226644, -1.32469845456, -1.11491083141, -0.762875763426, -1.12163285295, -1.09863140074, -1.29945157973, -1.27843894877, -1.00589316549, -0.912330645934, -0.962922353705, -1.25265133142, -1.29458347282, -1.15225762288, -1.00045652806, -0.887710450269, -1.01416634829, -1.19650803217, -1.03872671577, -0.86719070075, -1.008904644, -1.12379151191, -0.950687461141, -1.12241433736, -0.889224862634, -1.11762094609, -1.22489133968, -1.24702333407, -1.24517637612, -1.09819559472, -1.2104134101, -1.2217112657, -1.17731763127], 
	      "sobel": [-0.83934766225, -0.62721260575, -0.558840580329, -0.699564404116, -0.711116468654, -0.800405507582, -0.800598028802, -1.11367567263, -0.800716892269, -0.800194374505, -0.719852733547, -0.699662339749, -0.583473094463, -0.656586463686, -0.82585939445, -0.777588904797, -0.772328358153, -0.858083769483, -0.819377339675, -0.764279660704, -0.799960100345, -0.867018791717, -0.823023270097, -0.742640730114, -1.00863469391, -0.717177931342, -0.795282566734, -0.882814402127, -0.781504747967, -0.996713581871, -0.712255820555, -0.811275119279, -0.961002025204, -1.20550193802, -0.862430611162, -0.755762286162, -0.788966054175, -0.962730404866, -0.785589168563, -0.783168017095, -0.891439881469, -1.08053052724, -0.818953010952, -0.823990582718, -0.610975113014, -0.706369334087, -0.83607795072, -0.86536700094, -0.861887789379, -0.706860677903, -0.604669076545, -0.638959509959, -0.600205200156, -0.601208908689, -0.600265306283, -0.666594192176, -0.706937637112, -0.806432197551, -0.701267093778, -0.697408794637, -0.851407473703, -0.696453841977, -1.00957402773, -0.888081735997, -0.883778307995, -0.801014108655, -0.802707601144, -0.902478661063, -0.867497240701, -0.826525935114, -0.828361611411], 
	      "lbp": [-1.2775026474, -0.801223028353, -0.800091623644, -0.800009851969, -0.706840077597, -0.771744181593, -0.764756730848, -0.668987349384, -0.722732252285, -0.669412768606, -0.599571546235, -0.799859783453, -0.800085025062, -0.800151690407, -0.800453693963, -0.770896454141, -0.657297455691, -0.599810309052, -0.583090394926, -0.952970571559, -0.7654582373, -0.799938792024, -0.727414989246, -1.31723075305, -1.14076054405, -1.33781061842, -1.40029321489, -1.29006497698, -1.28367040173, -1.15693629435, -1.21680694398, -1.40041878805, -1.29047691479, -0.928378863331, -0.926795080454, -0.921170431637, -0.911039053934, -0.843072087859, -0.863356945439, -0.975893430292, -0.891645275689, -1.19772729821, -0.994481526443, -0.974741126221, -0.796142704788, -0.771301703397, -0.911422811844, -0.920856682866, -0.865902542856, -0.849751055127, -0.806605497263, -1.05057278424, -1.21923288747, -1.3182935345, -1.30915908452, -0.608079191461, -0.939755202343, -1.10582615252, -1.02794612196, -0.913831959238, -0.874524304042, -0.818753505759, -1.06509012802, -1.18557061801, -1.18891869024, -1.3461331468, -1.39693404573, -1.19088607628, -1.13830203374, -1.37361790282, -1.39128680085]
	    }, 
	    "weights": {
	      "raw": [
	        [-0.00641929350098569, 0.029808749809618604, -0.026783847528159686, -0.022626445601288438, -0.067696544783929641, -0.33308017010587532, 0.028196651717386736, 0.18244853629138108, 0.015034328565348129, 0.067852736181546511, 0.066707601028042948, 0.043757744772933718, -0.049432046935464227, 0.028764976579739795, -0.023780221712776294, -0.019043996534914023, -0.14597609954565341, 0.076748129651230637, 0.10031267415956342, 0.022404267686006132, 0.039489304810642681, -0.069172555941927991, 0.064453930612007271, -0.03568078024136126, 0.029477578218046946, 0.013670321310075631, -0.040086746434879458, -0.16483725729324836, 0.060739714509717116, 0.1342127393151894, 0.02422269183439342, -0.023179439720271901, -0.023938362360883966, 0.00080564472822024918, -0.020188203981491876, 0.035394353296754666, 0.0205064246422616, 0.028993448164401289, -0.15875938903288647, 0.086380176300005287, 0.069612353949308661, -0.0051496283178931873, -0.086212516632916264, -0.11615256372599751, -0.10171915312404266, 0.05044362294149464, -0.010944856179506302, -0.0019939577905011829, -0.082496323737375032, -0.19805282268418445, 0.14503065839704138, 0.10472965706111854, -0.054504100655757171, 0.058558989674775644, 0.02150968078817124, 0.01730546008925736, 0.05479743583896092, 0.081449861658568032, -0.015926761159011912, -0.026645825852455899, -0.29395789604640399, 0.26045433455042083, -0.014750981039322313, 0.013565969503019568, -0.052043696631421672, -0.068507656016080665, 0.026714598423665525, 0.015030040573038209, -0.0036695544345779346, 0.0038325864743167098, -0.029296334816602605, -0.2168604461047042, 0.23218142341105868, -0.00327038976446066, 0.0010937576464049442, 0.022865074396730092, -0.0024710599676689565, 0.027138580199090406, -0.016798852895205371, 0.052896545591113953, 0.0068773632280050567, -0.11534615443720748, -0.20002833023471947, 0.26776687274414374, -0.012990564848598472, 0.014507044952519324, -0.028376794482919257, 0.0061821648519400502, 0.088921914606219496, -0.029268623822226371, 0.023549402065920405, 0.0050119768662514469, -0.10302390187256479, -0.11265110616376864, 0.2362166399750627, -0.023189771813893006, 0.0035722520614683423, -0.034182137066625137, 0.050630393094575593, 0.010945258403000244, -0.0026518946618147438, -0.025155322122281942, 0.028530077090590744, -0.13115618895267522, -0.093256001395012889, 0.16420560614466395, -0.010547265652414012, 0.035550139332521893, -0.020259214475918323, 0.022466567725035011, 0.034170311222605998, 0.11907609035635143, -0.0015743444390024786, -0.064020366156778002, -0.22057027736788293, -0.072309973907480174, 0.30204671935473221, 0.023274069917025395, 0.063584377222264996, 0.042978528220157006, 0.1184620505912367], 
	        [0.16667514507181941, -0.061056496077366282, 0.0069211233964510538, 0.017084537322497012, -0.2260817686595176, -0.3734473319351409, 0.079940868263823905, 0.16478474110226196, 0.022649460741459224, 0.05289358066562716, 0.029321578215087005, -0.065686830769126472, -0.017175099236391184, 0.05342642508666981, 0.13196524692583625, -0.038915970355677662, -0.22142105635118151, 0.17018889180755431, 0.037968714516855254, 0.032433038579621432, 0.013114263754535838, -0.0047139766817905979, 0.01449378481921762, 0.016836144088159047, -0.035382521979389493, 0.06459440929029997, -0.16864194241367311, -0.18183649747692435, 0.22011199704153209, 0.017097680726078424, 0.044439120834852616, -0.065744647597146183, 0.1020917702829201, 0.012977428388828996, 0.019775964936306969, -0.020715077614501087, 0.037536099617302823, 0.073188143789734553, -0.2573933108232303, 0.17910460975300116, -0.012201308491933793, -0.012488637353357972, -0.027937934041822002, 0.090839519859215512, 0.056061692281274847, -0.029592134951326149, 0.083797375549624048, 0.026909019608009989, 0.028447256194293238, -0.26724295246437862, 0.17601512398468455, 0.05747403764496381, -0.021754451570897559, -0.016094120395692652, 0.034960605520111765, -0.066136093799398984, -0.086822275816825112, 0.021267627399376515, 0.024913839061514578, 0.083351248045442958, -0.21233918154488879, 0.14528347788592133, 0.052103220110131521, 0.0060526935312730304, 0.0041057956922075783, 0.073742527231735508, -0.063150982285070517, 0.071706513280739251, 0.050276967845660783, 0.059473860357975208, 0.041092776845037343, -0.23158549693983016, 0.039824353302363641, 0.035168096441852537, -0.03932662577032886, -0.046713411712221917, -0.029438846368243326, 0.03037322262500354, 0.010642421674176408, 0.035443098233173931, -0.064897369310492531, -0.032863903246691833, -0.15394029962311223, 0.011777952930909712, 0.17418487412288675, -0.05475758571404693, 0.047924066013688642, 0.054346490005779069, -0.0033548564463232317, 0.023589666170022047, -0.024599944457705122, 0.06065500572988429, 0.13656620662733865, -0.09366338113990888, -0.047444407722275428, 0.062872719444471176, -0.022728230791896249, -0.027266120729298168, 0.12949378554678781, -0.016064969466370635, -0.029023009596784263, -0.055703343306378029, -0.084010725120186397, 0.067582673095362464, -0.021201313484205356, -0.12021659219227125, 0.094859360168578946, -0.023785622470961085, -0.031181057005649077, -0.0045461011994782641, -0.00096878041950868021, 0.075435938022599638, 0.010017282477206416, 0.06897995798959812, 0.077147960801012536, 0.01605850787004124, -0.19045442262141093, -0.010877182945437318, 0.12221413195895285, -0.035115541235648702, 0.061957485103634649], 
	        [0.0011017024675275405, -0.10082831174460544, 8.594795150784762e-05, -0.0044220494782738484, -0.096739526280002486, -0.13240523784777558, 0.13984373949584222, -0.0031378754168676498, 0.068399621371189656, 0.041644858137291046, 0.12466035423467051, 0.057468796042489417, 0.073611208985683574, -0.010863604812754085, 0.0048406348200145249, 0.016396206458863971, -0.021671035744779854, 0.044733205419186794, 0.067921565834977882, -0.01587229208239721, -0.055943430884781355, 0.01970238776563854, 0.01861633041967882, -0.0056589566846889511, 0.034037512362465189, 0.034411475082115867, -0.10871009154186473, -0.08095953984145883, 0.067427623282556901, -0.019879897471494754, -0.01366520816807866, 0.035789793103949114, 0.066231396371961834, -0.045917999777744078, -0.00420191665726459, 0.021126802087625032, 0.040187642280355346, -0.036664394872269489, -0.030092902147062638, 0.0088117404767308755, 0.0024160167750989087, -0.038592533464695079, -0.031144322454676222, 0.03504205275969649, -0.018244427580942767, 0.018916000565823501, 0.00082420366538178691, 0.092474565072900916, 0.073297169128542394, -0.024311595897201867, -0.0027452015976400512, 0.067920732187453939, 0.0011865809331642052, -0.02829414542225548, 0.042812086020618187, -0.022452858987935732, 0.02261009594352785, -0.028250777066103218, 0.043262591064003333, 0.092532390695239303, -0.15324339008135635, 0.050211260469539359, 0.013929622339187875, -0.00089781384686685173, -0.063661201005958332, 0.0048485523557203342, 0.078580094123552602, 0.02575794561866239, -0.032352350433290294, 0.028485056134963452, 0.023621395691399441, -0.2117470445371154, 0.10461485137190293, 0.047597936964786855, -0.013272615927845698, -0.060311993172769994, 0.021931281439721451, -0.05466583518135374, 0.024589654496216209, -0.053142641146117948, 0.04992839103128853, -0.024452908798012384, -0.13669941087219498, 0.013882012829174228, 0.1070905994912941, -0.030277288574973339, 0.045488870557272854, 0.021158864845617006, 0.0045504704709340218, 0.05214959922096879, -0.031124914087522559, -0.025892240716889583, 0.051505846702740755, -0.15850714978032798, -0.077434100579077431, 0.14442197585402719, 0.025520694414871425, -0.013359740227537047, -0.032691479720369884, -0.050760755770619531, 0.0067267124662175881, 0.053582968166709294, -0.066091329071098104, 0.028319458261919814, -0.023395468585636847, -0.12189855936069849, 0.1264108145125255, 0.041070402257636952, -0.038345327797452616, -0.0051037835899539882, 0.01115753611454251, -0.025558001982792473, -0.015803280214702852, -0.014570255682172791, 0.058581784915518444, 0.048613151833675504, -0.29657491636724309, -0.067645659352775264, 0.13108882918808282, 0.054569929796482737, 0.062523971903905642], 
	        [-0.025232963701757677, 0.022348786079614824, -0.072258840316720419, -0.18573054835716424, 0.061153715684906157, 0.16052559660045873, 0.035735222876137188, 0.032645819538200907, 0.049972870544935558, -0.017744962590501873, 0.12327939069776968, -0.0020676327098313324, 0.01746290767019347, 0.062789463078491509, -0.11704698186369022, -0.065254587170476969, 0.094525133189958851, 0.044950125896693824, -0.028763679134251888, -0.0075590072060936625, -0.018042703509056443, -0.042766926478698966, 0.0064726653302440013, -0.024498528948216539, 0.015095977860562756, 0.011479770091646538, -0.22511989496614118, 0.13749975960271679, 0.042174383146931602, -0.00097973927564777574, 0.0053458653222245162, 0.0066958708608460676, 0.052938783244498341, 0.028662885704672569, 0.0083788264626524778, 0.00039142479042951484, 0.058935919636454462, -0.20560278009245425, 0.079502781298950373, 0.10223896059315847, -0.041137991907932381, 0.027330073389672568, -0.010752121223537789, -0.0022306851331074934, -0.0079242014779485268, -0.0082794956479350576, -0.032085062337155419, 0.086122599207560518, -0.12113263279497796, -0.12790727680874353, 0.13902963426409898, 0.0088539666043742082, -0.035846424270882665, 0.004579108178465921, -0.043586755702451435, -0.026440306229895939, 0.012179387770686292, 0.074041872436307762, 0.01288390088442623, 0.063137802503704196, -0.30013379565775622, 0.19884603307627666, 0.063815797070558927, 0.049734977180621504, -0.059941845556548135, 0.066082316837520416, 0.018259553212376337, 0.017779633684347013, -0.030632372504305949, -0.05294008910372007, 0.12680914791412304, -0.23860332882902754, -0.072937437856311613, 0.12736775458078498, 0.063565918341235095, -0.051172875061062162, 0.0097790501145352954, -0.0043407042674837651, -0.016155615544080057, -0.0091923923303261629, 0.050665742508667524, 0.0060984721656736629, 0.017307742609543222, -0.20367784360158347, 0.12046177714866035, 0.012913438963355811, -0.0092051845719411662, 0.035362756301432471, 0.030747952698754938, -0.0068483304259888619, 0.060769663776634064, -0.024830671275067155, 0.032204825588141653, 0.088512986534959648, -0.20132344254131007, 0.0025484138158970229, 0.140122587765108, 0.019618593851209051, 0.030770253761956967, -0.044844034190508676, 0.010829012004067717, -0.018604574580413091, 0.0048701187231226031, -0.053835622525193277, 0.065655732448266627, -0.087834494458251325, -0.10019900548070505, 0.019098697970462999, 0.032625675487211764, 0.013786208177970036, 0.01459298085632256, -0.02245319975032244, 0.023627062323695644, 0.044567875847249791, 0.051820387537472895, 0.058960832030794469, 0.011808887606369993, -0.24302913455395336, -0.10331035325930389, 0.043122221975443853, 0.044784114116775492], 
	        [-0.11131891807709643, -0.14268474406555598, -0.11319512819486531, 0.16616863430344642, 0.21669051126658584, 0.14580497808064175, 0.015659490036423723, 0.081299765772630261, -0.024809345136602795, 0.040210442226760873, 0.1147788050575636, 0.018929993321792474, -0.080897366155457673, -0.05933670525564233, -0.10482248256522532, 0.10573530196882865, 0.063140871798500697, 0.059506144939088096, -0.10685781396759031, 0.034082096511914323, -0.044928786246672847, -0.023391401657096106, -0.021033602025377948, 0.011729129297605986, -0.12518841502550898, -0.24524516894120252, 0.07503634089773896, 0.16915003534917084, -0.01104335485702547, 0.018698016558333488, 0.0089193810606012641, -0.0095742068835864974, 0.074951376080238705, 0.052515621176523086, 0.00076255674614852942, 0.14447253116659836, -0.16116755572117158, -0.29435350805617738, 0.21097730948472182, 0.15322391116769629, -0.031396770107823796, -0.073199499622068412, -0.00058138919552927493, 0.038373648087908357, 0.071661242983008577, -0.02522805699198942, 0.094355619055900272, -0.0055066260275108136, -0.31676942832713584, -0.17017797276453395, 0.20181171910078166, 0.038951035449355131, 0.020699071667054786, 0.0073524959093896058, 0.01925107008541585, 0.027713365493689732, 0.022207504221021385, 0.017801567429584678, 0.1612676210022263, -0.0097926541627393199, -0.39692367057618455, -0.016344797834207933, 0.084334965049200059, 0.12332269298102864, 0.04685154450642956, 0.0026367553827924689, -0.01561848475266879, -0.0094365420154359086, -0.02615768632490699, 0.093091816231290578, 0.015836673962272785, -0.036104175954425388, -0.25194637763515748, 0.066518889227065711, 0.088768723733041136, -0.054177349140414666, 0.11363104423136496, -0.074336096915664576, 0.026411919672457762, -0.0069934713872144005, -0.011837151565905812, 0.20495766925622727, 0.040652574469842911, -0.1095170141673022, -0.19525613842871348, -0.026690291071139877, 0.025635090198280266, 0.084142487180791703, 0.081560517413446651, 0.033899581274340673, -0.04177793659445489, -0.009501675246059646, 0.014146738677450046, -0.0083456640397739645, 0.066156053917280688, -0.13607639700339172, -0.075200076822236159, -0.099487351506951205, 0.097954762781141, -0.068031338341652869, -0.028816943621433999, 0.062116569439491787, -0.056509543958784436, -0.01645775253059964, 0.078178705767746479, -0.011547980097176877, 0.054587296091729326, -0.017563000385479949, -0.072691438517766077, -0.034856075950508381, 0.058573711770738279, -0.060289020490556899, -0.012302959633281041, 0.052155478089966123, 0.075227692092241769, 0.053726915546722931, 0.0021832390619121317, -0.0023449235386490269, 0.069001946478247533, -0.05514982572329348, -0.18138153837504351], 
	        [-0.23224131638764922, 0.079034696624463316, 0.20679180641094769, 0.17116975450055194, 0.060393255799023757, 0.070072109804855828, -0.061904660241219982, 0.10747334033766655, 0.014331963987671489, -0.032561864821210422, 0.096136650220496528, -0.11702112011574746, -0.1864804302468564, -0.072635832330671626, 0.12519462388086205, 0.070887202616322975, -0.032713296482814992, -0.014132673438533166, 0.0038161968326955314, 0.065966068281342619, 0.020457399865123169, 0.05133413578390264, -0.001116824372617925, -0.086503852575327167, -0.17856252353561719, -0.024882107163551152, 0.17291742960211148, 0.076636137948616748, 0.095776267371189924, -0.076644083681563224, -0.054109190285893664, -0.037610346895478264, 0.10646735039870757, 0.0051060331651450463, 0.056304468483811307, -0.028154521230155018, -0.31728669213013388, -0.058091370831929535, 0.11556013989779028, 0.065723490886578348, 0.030550971916660702, 0.041747103093391622, -0.069587858250691484, 0.092461263966589977, 0.052299010395004661, -0.010485795012401211, 0.011062345730906517, -0.04525324732355647, -0.23598087205664336, -0.070892557463706443, 0.10680685304416297, 0.11990972610746585, -0.020183291742381704, 0.00057273018272969989, 0.096563026611294442, 0.084394132743400782, 0.0061097222161349135, 0.052438465571678999, 0.012127916344441741, -0.025706403873987399, -0.37425731880779622, -0.12768740978352261, 0.057044219322174475, 0.11342314858398521, 0.089909015291416469, 0.088758601800430922, -0.017367003795174522, 0.058573936936146223, 0.0024241782448618243, 0.081099658324097532, 0.071614519911280788, -0.015636202687439121, -0.21764039015095288, -0.20280985898846876, -0.10017064401745751, 0.076481246330856831, 0.072072476074846584, 0.074831950513515946, -0.071669127112894582, 0.0033343139896645224, -0.020106231127842517, 0.12484552374687989, 0.088741504624313003, 0.01253935252290507, -0.080371651389196677, -0.20667576524399633, -0.042824689058188217, -0.041960654306219244, -0.011319310972225209, 0.0087351053188495856, -0.0073465804795511402, -0.014035434722362766, 0.060980934347515808, 0.0044957219640220231, 0.060136042340486653, 0.12862638541641686, -0.043407117384264018, -0.17199184431209702, -0.12411968467220214, -0.067878366625261699, -0.01454311580267198, 0.01330421418710441, 0.086616156710090195, -0.050869444187172472, 0.05903651637207552, -0.030082478432639181, -0.039150691833121767, -0.013410175971461852, 0.082024132616958054, -0.18429763963038856, 0.043819988293125167, 0.031005210064727645, 0.010111390046324928, -0.0064173858317888854, 0.024542598321298154, 0.0033265330575526358, 0.040210215896558238, 0.10549988851835322, 0.066466013297427518, 0.049201722388277136, -0.093932153614813801], 
	        [-0.12203267064152819, -0.036980237066742305, 0.12682937376396922, 0.10063288694137082, 0.082154198268033315, 0.031376504219097656, 0.0761930646076317, 0.029643540312019309, 0.067195157731181732, 0.014606114158926237, 0.21693479369516466, -0.091990999910650448, -0.11495742760629782, -0.057854374414651549, 0.026983308635638359, 0.053703744190506393, -0.0273941556868533, 0.062050781886751671, -0.014064800119151746, -0.030464390345027792, 0.050223229862306498, 0.069522169458366395, -0.047915080066377513, -0.076312738072256109, -0.10542836060878844, -0.069963062747160215, 0.063887809768190862, 0.047703502973526726, 0.049625632114663767, 7.9371105783654361e-07, 0.066938020168000531, 0.022331267930076198, -0.013204459193458515, -0.051208345754393744, 0.017251686675046174, -0.16855866147278023, -0.081718362687205809, -0.051493312235764005, 0.044258122147233556, 0.079860750571469824, 0.040256904905908247, 0.061167900966640459, -0.04445412975620007, 0.076058551537300789, 0.024484533213087259, 0.0237388901616193, 0.022211385002816955, -0.03909556756500325, -0.26993986747191345, -0.13809797457481326, 0.10638240754104332, 0.074164534665666665, 0.1361114507013107, 0.08862011177027157, 0.023942633928693842, 0.05945503505976131, 0.018810531601996444, 0.13332855116668979, 0.019080517712641562, 0.040953668701707469, -0.19369280785037196, -0.33096708018422843, -0.31537163999459777, -0.051011822183710684, 0.10153083596477822, 0.10646364340542763, 0.014630901225096263, -0.0037911814153038514, -0.031174186442994762, 0.12574438878630761, 0.082746608550893844, 0.13910378358879222, 0.015618015934354273, -0.097010031619152184, -0.25736850771835984, -0.23890047875932624, -0.39201416081419432, 0.014631649728319138, -0.0049576516790900346, 0.03224914217266181, 0.01990648283333149, 0.0090030712698045481, 0.026111426002791746, 0.062897867831994483, 0.14638901620146211, 0.10175160175705127, -0.008366542972654184, -0.22694639696488025, 0.016644643336980125, 0.010640427487024477, -0.033902595425888096, -0.058870306001172809, 0.022391466116807472, 0.010861548153134476, 0.028661031141596176, -0.0089732366008385203, 0.052004121536959068, 0.030892998140363448, -0.066298768516542983, -0.045462972141964375, -0.036534075016049508, 0.058255109985203259, -0.090300770932724164, 0.087529180603695578, -0.048367137056150394, -0.021869920641280391, -0.061934612997809474, 0.02284265461094593, 0.087099015316751405, -0.038225524845750966, 0.042582590594014876, 0.046403954163031218, 0.038044057338396199, 0.013279662526628024, -0.024475870996729501, 0.042648427075458788, 0.021205045270171127, 0.02354074407698388, -0.0073299199474954058, 0.0090776722049553393, 0.072704385543697653], 
	        [0.076135322944236056, 0.075928742328769658, 0.10248245044059716, 0.12142390869553117, 0.061858857352832766, 0.025464191080837695, 0.048676474818140573, 0.030285797856824295, 0.11128631305542007, 0.19455327377882989, 0.11002956054185524, 0.074606814265492927, 0.013898060531860643, -0.012868505144617515, 0.038119746657903283, 0.0071484624304063438, -0.037389694906732461, 0.027891841345889026, -0.0040180772778207266, 0.051191664743506379, -0.051415059933379359, -0.065947905104447993, -0.077216280637459084, 0.078792274560627332, -0.014940451970767085, -0.042428171172985307, -0.022773622035877988, 0.0095521053133781186, 0.089224973018742798, 0.0026288446459537393, 0.027795289276907741, -0.011245376233293055, 0.0027789702559120602, -0.084646263411087108, 0.1085122984586782, 0.064787488385146461, 0.071774533015530245, 0.101565447736036, 0.13538683839366522, 0.022702180797543253, 0.081382504391220065, 0.10182220145207069, 0.13414599015766171, -0.067254735812403973, -0.25199554524555356, -0.131377327178401, -0.16365674311148973, -0.018740825554245097, -0.062882807469171645, -0.022204060979254633, -0.072308264704348132, -0.060021508605704321, -0.15902262422755242, -0.23762263561888841, -0.27876101597724223, -0.040263587475045666, -0.08015604055016233, -0.054338910081926026, -0.19775317420562621, -0.28232046584273385, -0.23353688528539848, -0.28871468579830523, -0.14101654202670044, -0.1025403206842016, -0.091079191318669123, -7.6021920519903069e-05, 0.084333775651217177, 0.025776875645890322, 0.027110928294315155, 0.12586947033203832, 0.1709457201826477, 0.12107947589739056, 0.23253719852668123, 0.022508442929942168, 0.10869072456768857, 0.1033561446413986, -0.0044697029388135806, -0.019043623385769329, -0.038539230833867344, 0.059623205301912882, -0.028372504860633661, -0.029359754569747713, 0.00087516511679762042, -0.065918072203459618, -0.069356242665201281, 0.023580387356890727, 0.021727207917053997, 0.039570606452870798, -0.029876932333496215, 0.038706340217221941, 0.054322914583595866, -0.04361035086891106, -0.014678116576553712, -0.039396900573428928, 0.028347288864635375, 0.13841137622066219, -0.090660897476471158, 0.036895873473620874, -0.037229162146948817, -0.009894930351075984, -0.0452390438366378, -0.027744940547884053, 0.041940095444971182, 0.010553985420084559, -0.12123151432640322, -0.0087493439495505976, -0.022343273408815235, -0.036722825249752025, -0.074235049496179872, 0.13502817700337175, 0.046152107059304906, -0.00089713083287275286, 0.055904759652944447, 0.072800550242982834, -0.014134363015890009, 0.047445934632441455, 0.085859047433199678, 0.055070485986852061, 0.022278702781022022, 0.064172293392803822, -0.070765699060726217], 
	        [0.11799509004720471, 0.078210409621760235, 0.1281616951498617, -0.020597034003169923, 0.014336534229225872, 0.11621450358247642, 0.089056433936686774, 0.054438463796402992, 0.040501447910613234, 0.077088744908712675, -0.1658906017777812, 0.098327915917565289, -0.028103337633236192, -0.02658838870983915, 0.024054753355259639, 0.072814336465874374, -0.012893740245567331, 0.081294224250996139, -0.019638851124383461, -0.059461355471660093, -0.070719091722531727, -0.12759442479018229, 0.02999311492449748, 0.0019697445298409999, 0.026356695570939392, 0.077456177036917817, -0.0065799057399700267, 0.034984205817837566, -0.011141116727752032, 0.037205943512359313, -0.07804833218835576, -0.042937280919520593, -0.12753528913147499, 0.02845913050306173, -0.02514121956008758, 0.032110847590650193, 0.042951761529577637, 0.11294381552310545, 0.02004775184404517, 0.051515900309122342, -0.235725744910211, -0.072308382261543402, -0.019056219840507427, 0.0030321142503065279, 0.096971125196596036, 0.075809718303164492, 0.1171582304881571, 0.10956914475118423, -0.0024781197540262312, -0.06415838742812259, -0.26848100360863303, -0.059754498941204257, 0.061910526180559394, -0.021664296531182625, 0.086110025927143202, 0.053233513020111881, 0.17175441242058409, 0.028047054519386466, -0.085902980821043862, -0.33611410752827631, -0.28144114222203132, -0.0080330325783590784, 0.10513880861366756, -0.016382627034826625, 0.06894681074416012, 0.032997961272869761, -0.25750942110661729, -0.14536580095096197, -0.35542177348703685, -0.31543540234741724, -0.015389034147835323, 0.25815532917511536, 0.089607429737832672, 0.024873996600298487, 0.068810039618355481, 0.034890175702158258, 0.0094402391459942059, -0.33170429456025141, -0.084021507130023668, 0.050999687890954576, 0.11407450625706317, 0.12380980581221895, 0.061541685739852497, 0.024537508065533231, -0.051412691100538532, -0.037969145008949989, -0.083159219869618037, 0.060974023868713867, -0.069682639993999873, 0.013136896914555662, 0.054335436144424709, 0.086375749604332752, 0.025768018275164228, -0.03028474620608318, 0.0046745647931875633, 0.014048250096520054, 0.0039043180440717223, -0.013243528792716869, -0.010234982174629259, -0.034348718626758923, 0.089306699417503188, 0.023672596441143168, -0.074063880914324018, -0.039416266912232933, -0.051467563793051355, 0.0066514091767777561, -0.0056021073234813201, 0.037530284479276185, 0.022917723699947115, -0.028514057580272867, 0.047001295013920974, 0.011663892903344658, 0.031577429128105267, 0.03674321708145567, 0.00016789538350847621, -0.032412649376776737, 0.061176715259990133, -0.014965782274795558, 0.027963582472569012, 0.049596015432228538, 0.017493695904998829], 
	        [0.095111827476955541, -0.061598206035035019, -0.027848508902761582, 0.16285091177508479, 0.011485186070697095, 0.088227631418343583, 0.033476841560767329, 0.21311907036597436, 0.12562992528833603, 0.0056585342726571952, -0.19669291509156339, 0.12201627871631479, 0.065003875747784906, -0.064637578476232027, 0.0076011270434201972, -0.014992832356838792, -0.01371412582796748, 0.065189835192035667, 0.060501772887085942, -0.007320488021864191, -0.15837390579360289, -0.11374672007199678, -0.011219765388015224, -0.037241451866588046, -0.003534620740694161, 0.01418414744662963, -0.018804529282363244, 0.0022002993190636394, 0.086304123895880422, 0.050730302973426275, -0.19347784099407583, -0.024336852899701306, -0.022104084039211852, 0.11856239536141804, -0.0040746848315117296, -0.02163636804096198, 0.032834767679033816, 0.080034473148409696, 0.18177097586869298, 0.04019529190670533, -0.27026796515043489, -0.046764731646186594, 0.008852085437052834, -0.0095398107877663063, 0.073838224250254575, 0.0022341455913789526, 0.080946842014086626, 0.064911153319107226, 0.06885287564917604, 0.052927148605433058, -0.41010712091394702, -0.0033883005740702465, -0.076620464606964478, 0.028026719104762239, 0.076992030561192998, 0.13499559219777985, 0.0010835539682531592, -0.0094521558900973468, 0.1189809113716918, -0.10886395857171732, -0.31839062100092569, -0.079536575816365779, 0.088035400227267108, -0.01994821470243107, 0.055031181510797132, 0.017355891747403651, 0.11548823748390151, 0.047318802613544472, 0.0035588736908875526, -0.19090242902977161, -0.16923224535916537, -0.10343904409632039, 0.11611444215342794, 0.030139907826970232, 0.092037927739449271, -0.00052811116545577533, -0.0198996720404131, 0.11041139740159193, -0.11354626622456132, -0.13266289678027732, -0.16827719486229559, -0.036676195585965438, 0.078177366758504091, 0.065049146958536752, 0.061265895750100163, -0.045421314698528795, 0.038673845042327876, 0.026641279640920345, -0.10482185618696178, -0.10700981328292422, -0.065258746439048387, 0.10279723823243007, 0.025140628570866255, 0.078995252659308457, 0.055586249229617551, -0.028236723374775799, -0.0025877363105662674, 0.033127455377752982, -0.028093023704546808, -0.19114920828266518, -0.084372445040405197, 0.032752181200734989, 0.044573421483901268, 0.078569580177818454, -0.076167973158059274, -0.011917584687660975, 0.03886281331675661, -0.044585012472417355, -0.041774790744191534, 0.06654393572162462, -0.20856381862218065, 0.16839377975033309, 0.028096195344995425, 0.02974664466893967, -0.028107306876337092, 0.040206628818593826, -0.0050223327946646058, 0.061683180967305642, 0.11123093181504413, 0.0025290457228258033, -0.02120297614281566], 
	        [0.090435635035851059, -0.042297079072951133, 0.079436400340748309, 0.03842552427230031, 0.018479439174666504, 0.15188772712119619, 0.24325152032590197, 0.11801556793669821, -0.080156795814110504, -0.21178228375212024, -0.13218981199435309, 0.01847519834858842, 0.092018443323332436, -0.050722043815425485, -0.068374560672083723, -0.01537540593449041, 0.031479819423878536, 0.087358407307766756, -0.06835423776229127, -0.14664172724239749, -0.00015826019866193447, 0.015682235993107141, 0.051709128927825823, 0.0087470901747511848, -0.082975597424275058, 0.061059290685490167, 0.055712846563533064, 0.11256404620171304, 0.12009580657518015, -0.2412015915622755, -0.014823455006292133, -0.021320510868446968, -0.0064826789690396042, 0.011517249723710349, -0.0029378978150773061, -0.036511890813033382, 0.040278214553535516, 0.0514440140450457, 0.17560605653482164, -0.16559846575808021, -0.17723807338794942, 0.06664090603454581, 0.025443982377752639, 0.01188465218452904, 0.0289513499031155, -0.062269615752451546, 0.0081510081877681634, 0.074139239966066889, 0.15951734948521942, -0.023426085135995006, -0.39782174976422469, -0.10908536196954385, 0.19810719075019201, -0.03969354994135716, 0.074717236518908187, 0.067657462341092572, 0.0023721387419759488, 0.050106233821570277, 0.11669499140233328, 0.10445484529679147, -0.18066291770941748, -0.13732855962266888, 0.12305831238941373, 0.037248666546407946, 0.04039521027170892, -0.013511371889906032, -0.012463530395042041, -0.011253154667815578, 0.057263714594404463, 0.064123734742731392, -0.18290915356692017, -0.28693729905644189, 0.16662290255364237, 0.052133698720201724, -0.034519972646288311, -0.0020692840094172008, 0.067412513930324325, 0.069378551503912617, 0.017341484161215288, 0.11249597819545545, -0.12114447333731211, -0.16394194327719122, 0.042618534271810712, 0.0082442390404487698, 0.032211543301204119, 0.0013431370481797045, 0.059793575679882971, -0.04185352167064698, 0.16141583247142297, 0.025290287768054538, -0.092771950162634342, -0.22159811768357779, -0.017539993864623925, 0.044684688362074843, 0.076526300295055832, 0.056281907644482626, -0.038322569525682852, -0.024136451744282625, -0.063727184521766261, 0.1019524390722753, -0.11143716683774609, -0.13769182869235727, 0.05085564633400147, 0.0118757042451966, 0.075788152179100177, -0.076290068823641047, -0.081411313673654603, 0.072941798976396161, 0.068768484681585834, -0.033997564379039544, -0.16790192551365551, -0.13094257760158287, 0.030092743795544198, -0.020741964391416696, 0.00030251423268644675, 0.088642737579611705, 0.052492146460725884, 0.087007777517176865, 0.024692689071073824, -0.11263451468661019, 0.075663957633193252], 
	        [0.10661930608242243, -0.024041018022432886, 0.023732105856747315, 0.012547179712792927, 0.066200152687718561, 0.072880838736859632, 0.14195980975544101, -0.1884630302757157, -0.10001494467301893, -0.030399364707448071, 0.0065084325390564329, 0.035395980550384912, -0.016756476798346576, 0.039963413543780302, -0.032920761282429711, -0.005227900049309453, 0.1455513515779632, -0.045218123785947764, -0.15712918904629083, 0.019388410485656385, 0.069073426062715243, -0.0298852890481313, -0.013668142441217765, 0.03550729334105425, -0.033905353229976301, -0.066398064416859415, 0.069367258226956524, 0.099068467801844279, -0.16176946602990219, -0.049743685317054989, 0.049417327248947623, 0.11584329961758463, -0.0099765335337247824, -0.0058946153093775433, 0.024852267791530103, -0.022953834411929233, 0.03536477637026525, 0.07091098453159729, 0.16506591436250806, -0.20260600332750361, 0.0040822600350435972, -0.020994635237100143, -0.01738045300747007, -0.068169477874611903, -0.016583306399167802, 0.016335356838440979, 0.017414685172079863, -0.065509544776204645, 0.17533271724699692, -0.077797629050437453, -0.16426179882147435, 0.067990824370129876, 0.015164258343913037, 0.0078509177957392234, 0.023952622885856464, -0.022724061899056167, 0.0064689725623074124, -0.0046862624418039511, 0.023956271557396727, 0.17796984486026562, -0.14583559757339518, -0.064279230905094187, 0.0072858891690116556, 0.10176352460866914, -0.053758388167071028, 0.031829796138471395, -0.0069310877889054157, 0.011744209650540821, -0.022880287482633932, 0.061704359435578809, 0.073774321721628233, -0.20953311948246117, 0.022856913389839799, 0.054729377378656588, -0.019111901041743054, -0.030210238863132122, 0.0030313274697504888, 0.015874354673913807, -0.0064522920827583541, -0.029379891777454897, 0.17844565039391092, -0.071104527084354163, -0.12962834428996683, 0.074504436810004751, 0.028226182768918535, 0.028593401178049288, -0.019591476910773509, 0.026274691487893291, 0.049329376791844029, -0.002525771203732069, 0.015184190784585549, 0.079377622440195347, -0.19505648192438618, -0.03458185384929216, 0.03928442530245542, -0.060961853070715478, 0.032104621984227109, 0.0010087208719327459, -0.0029091919090189974, 0.001344468156507149, 0.0050237130033507146, 0.10378546719878355, 0.022547607122337512, -0.11488746863511244, -0.022120532171003134, 0.043655327718427159, 0.0067756961208252711, 0.025228229845891133, -0.019273769704258592, 0.021906840282590274, 0.076111022214773325, 0.017667767612816868, -0.015508848470761019, -0.23798198014252242, -0.10029292828221784, 0.068962427478186386, -0.00958082155355134, 0.071808069871878891, 0.0096924544958174944, 0.0089571169770431072, -0.0082774624735039715], 
	        [0.1471154036752462, 0.048703759783120179, 0.038281571450254931, 0.073332082613442248, 0.092603314662736677, -0.069406279440535595, -0.18039118017356837, 0.030461887926973671, -0.076527801539272758, -0.028459829410684742, 0.0039885048607745666, 0.091531066997998373, -0.097047418603899732, -0.021416261913473872, 0.022880799394652915, 0.11630110494121575, -0.11091349044337311, 0.0052601237488336672, -0.0013446292981080382, 0.019772833215237998, -0.010680526542495961, 0.087901717718307917, -0.0062327763337505782, -0.022953022264458001, -0.011871195380737234, 0.0057627067153195322, 0.090589963902581616, -0.032591156196510603, -0.028720174599054245, 0.018764947431906404, 0.034198398065046542, 0.092483125928658885, -0.039035757837943871, 0.046060971646470147, -0.031919717673297834, 0.035975657614667797, -0.021429646453529204, 0.087312129030033464, -0.10752464144662353, 0.00152080949832821, 0.010463878802001378, 0.017720821018342062, -0.05437049272297912, -0.041948832895335277, 0.025352619756942793, -0.033214062148915535, -0.021243138027047942, -0.00088239905902148807, 0.12798500264531565, -0.14587827997097436, 0.0049154556879893313, 0.1154467113814605, 0.02439416473282259, 0.02683709160566132, -0.0070260419087720058, -0.020081222854955234, 0.023704875110253917, 0.022950424614096271, -0.05338528177481898, 0.083134108349852701, -0.19190518676745988, 0.028255792687062964, 0.051622701485504116, 0.026882922200025916, 0.0083776169731257372, -0.0056709911085335123, -0.015187911842930016, -0.052821700067161415, 0.0039064424714551904, 0.0052811518294068188, 0.10527786608533028, -0.15535307659177727, 0.012627301510895916, 0.033272060865199279, -0.016015509511655836, 0.04732339385165741, 0.029676033680461018, 0.06267237670914183, 0.020359709219910163, -0.056328413014882728, 0.062032262935028198, 0.13944415500977614, -0.1628837619018858, -0.062736195828590677, 0.0089073506518793991, -0.0034474543722587785, -0.016188172373634228, -0.058357780371563008, -0.038566049097796054, -0.0077422478015098661, -0.045254853975222942, 0.13886799518652831, 0.084801544603633774, -0.19493114682149953, 0.067962054023332316, -0.039669253652282341, -0.042999032230963616, 0.056922793567282359, 0.021310369562604587, 0.023652100423593919, 0.0053850398495440266, -0.031872155789865561, 0.12124236413591115, -0.096718330401961303, -0.094640869713099041, 0.050053309978650297, -0.04109568378358891, 0.06766934251303211, -0.013020222193800675, -0.017936312558531065, 0.030884587986413262, 0.017940556925031451, 0.12318151667620229, 0.08261243140085138, -0.19694230673329102, -0.084587141943991251, -0.0036587752660823189, 0.046190769885896037, -0.015214414660308498, -0.037796750375678645, -0.037660099586230414], 
	        [0.028789729303638767, 0.024918790237205758, 0.046183744885366841, 0.11406524547975325, 0.12089401164677463, -0.33167640134016596, -0.30199214061986152, 0.075505027729564439, 0.015980848677207844, -0.03024616910429527, 0.070777799814993519, 0.021705154508264698, -0.014784416452853898, -0.092797386946284491, 0.073387121329044847, 0.21513353226194643, -0.13135516496728, -0.041009990688083156, 0.0027232866435380892, 0.10443594986053156, 0.019234702313893629, 0.026668393094573431, 0.077454342178145008, 0.037704653988272871, 0.028345891762078392, -0.0099781631348617068, 0.1639247590037968, -0.12998366709084602, -0.16954434602341487, 0.044201694038575996, 0.022535303634435802, -0.080570085581980172, 0.02832273196113292, 0.030852307058754604, -0.057281262906963837, -0.03064229252466788, 0.027439907981706396, 0.19418932496000404, -0.21394127367168303, -0.10822827097568048, 0.078776286858231487, -0.054726484054016263, -0.0018935512700742757, 0.027554055035958841, 0.12724208320232813, -0.05340181008736572, 0.032579369535054831, -0.0053668763896144028, 0.14925943338428535, -0.15555203727220704, 0.0070014801681935442, 0.047596654249176279, 0.15762506351670039, -0.0017752319114590492, -0.078479537238969374, 0.047380596780860498, -0.054017353379027869, -0.010809602185791731, 0.031689669706736825, 0.23862777088364684, -0.17967729863408127, -0.0025414623844454364, -0.0044922745473988529, -0.033450167802196534, 0.07325147963052886, -0.0025312860424687696, 0.047270334273701482, -0.018763729160332636, -0.085707081658790152, 0.037456334474121222, 0.24243173611028618, -0.25408665358619748, 0.043294141064992922, 0.040148143400007677, 0.013087435326473265, -0.019853324596188479, -0.023225826183980121, 0.030177002977477579, 0.030922203127136713, -0.040952858219118968, -0.0059330615062766906, 0.059823934711038376, -0.22840162828405616, 0.053835864895732992, 0.039215482051845246, -0.019168216146914205, 0.036601452638986925, 0.0071216981552001818, 0.0055194916843240016, 0.017118320543367746, -0.010329430802956993, 0.022891605120926584, 0.10730721508339976, -0.081071689415751644, -0.052731168737865868, 0.020938629685354523, 0.027472939746776587, 0.008732138872189002, -0.0119734318888386, 0.029541130454324258, 0.025437531916789852, -0.0032417425087455515, 0.092169001321697072, -0.063484712261834525, -0.084864201819236137, -0.0055455400012650313, 0.047829727088973206, -0.038728523143896021, 0.02165612388923753, -0.048404026188333428, 0.081106144087281604, -0.050252564268459365, 0.062538501508640792, 0.050008949642628864, -0.066834069762764486, -0.22862797363149073, 0.13880779851328123, 0.081956893470613898, -0.036534284594068323, -0.019723956545588499, 0.074252965588473677], 
	        [0.080974544767873219, 0.056529870095499507, 0.032547574600199997, 0.10152684966806072, 0.0464353057497012, -0.21467483931903908, -0.20894615765238955, -0.014892577371206056, 0.020894015871834565, -0.0067217043883879002, 0.035252062080693092, -0.0060354856627079095, -0.027461302429899262, 0.010095861403046108, 0.054592365636949441, 0.16828861382181534, -0.17463234553413226, 0.021867928311703422, -0.041396141212343973, 0.019379712333095322, 0.012675043495296218, -0.02769514972624032, -0.041243567743035461, 0.016051533116298963, -0.0010186840048578699, 0.14437795805818579, 0.078407639716172844, -0.21215391984114734, -0.057680895739320961, 0.12664817413140378, -0.12395328524150205, 0.071773066877171471, 0.0075741150072376473, -0.051866325466372237, 0.038444728263650779, -0.11281826148125848, -0.013662478929553454, 0.21924860974778201, -0.14332413200544142, -0.054997300283757516, 0.0029602719156689994, 0.047502977291317666, -0.028485684862829264, 0.020466736113513295, -0.10612328436560343, 0.011155779036764471, 0.013002308851003064, 0.023295819752587626, 0.26377227907343925, -0.25931147876901078, -0.081091456814604682, -0.00039674384915672212, 0.042663298620291695, -0.0029478976003412261, -0.02670641642999412, -0.089310251851631675, -0.0050439093556460951, -0.0055020483002672232, -0.045366799032015917, 0.23013430030607201, -0.090115553552161928, -0.21358662268181244, 0.06901078184379858, 0.01987760740252234, 0.0044608961159714605, 0.029591032895087147, -0.035016870610203282, -0.016930134483468168, -0.028665218589185693, -0.014126514695311079, 0.23223335474778181, 0.020022276028697689, -0.25100707629932978, 0.089307267281698258, -0.0077044707387584482, 0.033183418337549606, 0.0097764251174143058, 0.034273315295213935, 0.020164835552348936, -0.01004293041366619, 0.0084137731647092734, 0.23502650629556968, -0.024429730500986124, -0.16831605537549821, 0.0005290142948826404, -0.023487633169125, 0.096815945866332007, -0.036177879497560572, 0.002670053453748697, 0.0060485344731694285, -0.03294986612777788, -0.029843164527927693, 0.14655979582549006, 0.0353911847412616, -0.20847127037801366, -0.057891906038571958, -0.01027014008034767, 0.076537736942186227, 0.082781522415119449, 0.11258631635960367, -0.016599499535918771, -0.093947583003786694, -0.02515826814708777, 0.13710963679628882, 0.13285152491933369, -0.22309506076529734, -0.12553570046740603, 0.025110108883222501, -0.03021547801359524, -0.011748686689746581, 0.14400425060338853, 0.043163516328968393, 0.08594108251756169, 0.035184741390128088, 0.17622159819914116, 0.19444104428116626, -0.23633459893577083, -0.077389181598155027, 0.014638957467814989, 0.022800332745270047, 0.083545736652882466], 
	        [0.12261253014406985, 0.16705127800103603, 0.19069455483447878, 0.064200785381356679, -0.00016272403782892353, -0.065942849362023062, -0.0079351060474115581, -0.057893265858712836, -0.05400622028081925, -0.10458693453007292, -0.054179967940119297, 0.066989678608242287, -0.099219853272594943, 0.062446370884785274, 0.09094500180354774, 0.028277578410574628, -0.047069391853415257, -0.0071510316033549098, -0.050252538655332246, -0.01470682832330765, 0.095479720545435506, -0.11061849427089886, -0.14255959604920565, 0.026858767731697888, -0.1946544063779132, 0.18484819329409546, 0.17890314023634024, 0.15499366437705026, -0.028241535246141571, 0.04479597904441586, -0.058444080996440717, 0.013625007131520706, -0.079692834360266224, -0.11450496688056046, -0.12377645767247314, -0.065906435468448987, -0.15742481688127266, 0.12985425042057541, 0.20266035853202718, 0.038497383031025165, -0.025653639466894002, 0.075725823765211642, -0.022083431516520723, -0.085486667503959793, 0.032080522906880071, -0.16479464568215729, -0.22037943812265476, -0.2229737334363267, -0.38061125130213119, 0.12775872709984104, 0.31739568607954666, -0.015834239969060679, 0.055459428402900815, 0.011929160033288685, 0.024193127246187052, 0.090970615276012703, 0.16123203632279148, 0.0089117801154802584, -0.017294928512088706, -0.35854082366702061, -0.48144436153782677, 0.033786213483589664, 0.1209940431097762, -0.022527387589338276, 0.049459009623695566, -0.029490765269415273, 0.25612944261482823, 0.11469128278773146, 0.12808084965382249, 0.11403331019353928, 0.30506897046132081, -0.19904848217033866, -0.20053793259626246, 0.039641205203277907, -0.04376670404571352, 0.033609985206833295, 0.0098996640661796406, 0.11272141584817373, 0.18547440193507447, 0.1524434424661974, 0.06114521088463705, 0.11826241926353079, 0.12074606754768391, -0.019667238146597897, -0.00048386258516668057, -0.12175688660479972, 0.036172066069231526, -0.11868521523662726, -0.1250203703417119, 0.035904919227186707, 0.017839906841583555, 0.060859449561677506, 0.09635166317000958, -0.049212492625574339, -0.045372607382002661, -0.055897345716822311, -0.0023764214791030455, -0.038382865278286389, 0.0064116033781553214, -0.17558791205718122, 0.0023250224817987636, -0.051727259802616457, -0.057790529308374375, 0.013791061402471952, 0.13644846669520244, -0.010155313334871414, -0.017625717203356758, 0.073652902143451521, 0.00069328545240087552, -0.050008478647772345, -0.31927888126001952, -0.18353351499079812, -0.085538235823548719, -0.073096290012328813, 0.090190178210760405, 0.10660823241153998, 0.090351417639498541, 0.132917195679079, -0.011857357267916729, 0.052935295307996386, 0.043012618340511746], 
	        [0.063687026559832702, -0.027474493344771159, 0.04079252412326359, 0.033944293702633618, 0.067493996598322739, -0.084202990537866812, -0.024906649626728283, 0.0091583686944553405, -0.068820170460425684, 0.0031107283830948407, -0.097108585049124174, 0.11878373624948577, 0.03710017079293685, -0.089402710046412398, 0.021829275829537725, 0.05069263318004659, 0.012340313923680318, -0.023685785769386569, -0.026839662252448132, 0.034846261621930025, -0.016166129228329065, -0.027864958300899939, 0.12115538210609175, 0.0037368644565901332, 0.13531841970369599, 0.021592046315438054, 0.018171005730945711, 0.015072771881264005, 0.070400883694442765, 0.0022893852554199817, -0.038531873505113653, 0.073412597254778611, -0.029637114380846583, 0.14796659731395348, 0.12294211400056784, 0.068355321789079659, 0.16846933987145341, 0.09208858358733514, 0.124710416844108, 0.069410300558010035, 0.0028282096799201462, 0.028941147392732833, -0.082405863861783321, -0.099340106662704333, -0.0023105045076858566, -0.044477583601388274, 0.0008809594027263945, -0.085099107788483452, -0.0064586485698500881, -0.044295114180264411, 0.10095939402980549, 0.14859114322412731, 0.14469873810179945, 0.078675636968335211, 0.04110277787821804, -0.185748731574369, -0.17064830498300138, -0.17155221512879462, -0.25171330168462724, -0.27337273571997955, -0.21265235556569007, -0.17172557194975863, 0.027527124955349591, 0.05618012242699108, 0.12158172746105769, 0.079338486628700106, -0.12195189294100098, -0.13969446903752442, -0.026572222761012301, -0.0741704803065521, -0.145127075010832, -0.11500093509170173, -0.18278877520622416, -0.24714583432028586, -0.13747760229803679, -0.068392610369592363, 0.098671592870279712, -0.16740306756901749, 0.075274076124663886, -0.0044961465547186386, 0.13260037497576577, 0.31234055497812679, 0.15517911386484973, 0.066459928203915386, -0.015467888667656748, -0.030267329366836557, -0.056259518407299938, -0.038215914691253711, 0.067128719543084317, 0.12318688834042112, 0.18468566964642463, 0.086525001219784597, 0.095783539484994351, 0.15930761904527679, 0.07562987308980218, 0.11756704875720572, -0.0760161520649867, -0.011817169363246532, -0.051957377094306409, 0.17488796559917713, 0.14148464642191833, 0.086956838317260601, 0.081058475663970134, 0.046958772348784622, 0.04918174254075236, 0.0034109923824553051, 0.015580943744111141, 0.026515084298382431, -0.062878886731464731, -0.056347428448159036, -0.093781274466081921, -0.23964397537244131, -0.13258713878159228, -0.084365859336627824, -0.12790680365138707, -0.070083706938090157, -0.044961907635326953, 0.049251298465303128, 0.072446618696754353, -0.016196819754861112, 0.10029423625804029], 
	        [0.022794829328282723, 0.031855402221378282, 0.024367172994907871, -0.088290566246083876, 0.07232262276136471, -0.06292516861381596, -0.0040861461107614544, -7.972988029088246e-05, 0.01396609724411256, -0.025131035729871201, 0.017075722683559433, 0.043144050114759525, -0.077791172190580238, 0.048533511736318036, 0.007217025612539632, -0.035475136878956898, 0.035691767227550089, -0.0053752350421711753, 0.043053703162239151, 0.036425942921316332, 0.026331797944731436, 0.018922402485978082, 0.034424572379380902, -0.043306530520506897, -0.023769315918517941, 0.080993967723216903, 0.0014022744912380036, 0.06800816187289091, 0.095104587086617953, 0.10798396936955548, 0.024411086728309606, 0.043708025161000461, 0.056510394828046859, 0.038012989404389352, -0.016918964127942582, 0.13076340620049531, 0.11446285199173112, 0.21239109093247169, 0.28795590334995447, 0.092687450807731803, 0.096764008832141674, 0.07011596892193131, 0.046944677248436581, -0.028109521724954359, 0.18643956244021581, 0.077870719895705293, 0.11792219460655051, -0.035608267559333939, -0.036648812158749919, -0.13441333664206742, -0.1209205303400708, -0.15624385122841139, -0.17025727483799705, -0.12517931808717464, -0.14934420137275992, 0.15932332483022202, 0.04839021776339017, -0.10847969953324497, -0.12255999835004713, -0.19725754430522846, -0.15715530383375914, -0.21752678931536223, -0.20062628687872636, -0.092267339908223348, -0.020573472312880911, -0.071636670998092289, 0.063397599343820776, -0.10020592169765151, -0.15580361490286621, -0.14943697528943115, -0.11920849551682298, -0.081202276537251969, -0.11695355604037566, -0.0067283708261298564, -0.046837938954313707, -0.0077863170130979195, 0.019980965641957497, -0.121667094665772, -0.11522589823910821, -0.057471776109635317, -0.052229100647856727, -0.046891079021213228, 0.061574055807871869, 0.11811240080682403, 0.17401725345189034, 0.1337150650275799, 0.19272562298101481, 0.13837697707498475, -0.043682489526108231, -0.035940773077983296, 0.011031099888345858, 0.066035108027198322, 0.16273538350576014, 0.1001587158991207, 0.15018677215060725, 0.051560799730643869, 0.058405889573942382, 0.020232732914280432, 0.080342157059325445, -0.066884304721525012, 0.043091772020143498, 0.061075670741261745, 0.043764943962592874, 0.031379229244833627, -0.0054635333665592478, 0.039411450527978564, -0.017169301013184327, -0.027826140912018828, -0.0047148996567287563, 0.0361035243729722, 0.054667230314029543, 0.046239563591323717, -0.045456067930868489, 0.049402252710789213, -0.04766846057913162, -0.014224514341087915, -0.059509471495879943, -0.13173838602104682, -0.010384251552911242, -0.087812211124107614, -0.077603311445163858], 
	        [-0.032355994688810757, 0.018326722847476676, 0.017295570021311088, -0.027670634962396815, -0.0076809391049930537, -0.041376685856530981, -0.015061630610395491, -0.043781136658973818, 0.036477149712398793, 0.044228566218286886, 0.18106239449231315, 0.042891343822209826, -0.020853245724294339, -0.024082163468429868, 0.041552139122004575, -0.014678545508214125, -0.040841976375840028, 0.017432021695089089, 0.0070216535002669556, 0.12929994168147696, 0.15511189221305455, 0.24789881463360725, 0.01524433890020907, -0.016082932861742782, -0.051589389728025764, -0.092487374266571665, 0.045744016738876361, 0.057516818919086221, 0.16869815200400168, 0.26354710842333462, 0.13879401206280972, 0.1425191292736655, -0.078455509137512092, 0.0045617718808213525, -0.04996569794639541, 0.080368671629425376, 0.050146780922382769, 0.06747673498101589, 0.13151901964758053, 0.16708907133321474, 0.014140597465528995, -0.095378223856770333, -0.20288372470514504, -0.39934020254115926, 0.018782728033396659, 0.055848444235998176, -0.0052730281141155078, 0.094883628210799084, 0.092662084190120605, 0.026342391088602909, -0.086838950610960156, -0.21345767462167456, -0.282107822115785, -0.14895903217754436, -0.15887716612865338, 0.014524384805330928, 0.064105061659619905, 0.015209021241474052, 0.094836346474780439, 0.056562751972782294, -0.16636322513631874, -0.24132070876596301, -0.25962368835745592, -0.1398205940714011, -0.15531689505376495, 0.011694908155279474, 0.032010611040571693, -0.037560894238744175, 0.066607787477416219, -0.0076642057689953885, -0.04070977708688811, -0.04226030127644731, -0.090011860309571437, 0.069266838681682319, 0.15114898488461287, 0.15845318802936526, 0.15653535363742821, 0.057963227558536959, -0.031603242011597907, -0.0055733045265627945, -0.063345205711261135, 0.014274572871990451, 0.031680599603069681, 0.039820176716201153, 0.093415859365416617, 0.11919257043750534, 0.03989717150118903, 0.1715005214515096, 0.0032916843093048626, 0.0044846669425230717, -0.021098541490893137, 0.025809720767491551, -0.13673281369087914, -1.2468117886521579e-05, 0.045303630981452153, -0.0526550700395952, 0.020909495487494364, 0.084789679870713369, -0.063339110924672634, 0.091376945056866526, 0.07252165751693404, -0.079209926148198551, -0.067293987453879475, -0.043909917127449488, 0.029396455943145994, 0.023947405883684936, 0.017167025821694201, 0.030553476010320116, -0.058621689983054601, -0.0098426856925661194, 0.20196311694537442, -0.023668678155415387, -0.014001946149787309, -0.03728327654318217, -0.023078128502029227, 0.015589706964187003, -0.013168968136987605, -0.031499036112030365, -0.039786236033770211, 0.054516325604152802, -0.040512968956863807], 
	        [-0.11874501434881572, -0.082292851061515113, -0.095608167868605196, -0.020577868342219752, -0.051846289507618271, -0.010859373167837721, -0.022716678939708967, 0.12820642967693277, 0.20208152628630544, 0.10326830535107219, 0.19572108975580454, 0.018529266875907807, -0.062343764039584887, 0.036176725353944533, 0.041069933083660609, 0.0079762012687746575, -0.10314299674810966, 0.0064955171797952682, 0.12398900983956046, 0.024168115641601748, 0.030884610087337075, -0.074999137996260248, -0.040399947069967329, -0.026348341528788261, -0.0040063358136547406, -0.098214201253041297, -0.033435982999113351, 0.11941221649994889, 0.25555588605475288, 0.038960204213761458, -0.072604474132352964, -0.080306295039947226, -0.10380646122757918, -0.057320493242450338, 0.015515746045367804, 0.06255592200477092, -0.07382948751156268, 0.092347107622607685, 0.19891060046749282, 0.16973365981683389, -0.044617838703860296, -0.17458925689074178, -0.16855591416735904, -0.12959176095156721, 0.0028653211948725388, 0.039281815318144675, 0.051811040864348151, 0.054229861553504496, 0.13870864137978747, 0.27288253125832607, -0.31438783480893878, -0.43930197285264261, -0.1406383436455399, -0.11423051269906785, 0.04779660456302437, -0.065061505106159614, -0.0042604236376508481, 0.02946332359287078, 0.025104961380266577, 0.14743399932390186, -0.34597564760602995, -0.42017229785052612, 0.035072831557282497, 0.07959646999214702, 0.13322835735966732, 0.13339746737800906, -0.061957613945008899, 0.068920425307499353, -0.038536206573474313, 0.047215262988980017, -0.14334497896799611, -0.21161459673878405, 0.14176441081563174, 0.17098183292990443, 0.14174756095000518, 0.037859045933541086, 0.31085728227189657, -0.02922935514410599, 0.015150100201128183, 0.034324197511492696, -0.011781519634235918, -0.077397115828606117, 0.00082481393952203719, 0.042534961830221429, 0.04985424198595359, 0.13020790077736055, 0.20732411001715473, 0.070041942881345881, -0.037026860217250213, -0.031791667690004716, -0.064806164590905407, -0.08258662171950007, -0.074375301162423885, 0.01385894189294383, 0.15057409353019663, 0.13055028224014828, 0.023193912685637932, -0.079370911864438495, -0.076747220775197508, -0.056515387156161861, 0.070663010357839617, -0.082980693850575146, 0.03859091949287638, 0.03688503261834894, 0.10304253122200434, 0.02858154892479417, -0.11389454646540841, -0.023276097872029958, -0.02020813146390732, -0.14669512203229218, 0.023730566407701478, -0.018262941034164024, 0.11113049123798203, 0.017809780077411436, 0.20203876814616534, 0.050784801616453046, 0.061469567589563318, -0.0075507512091273071, 0.00039041405665547757, -0.14721537985673849, -0.36919673052117485], 
	        [-0.11817248565975272, 0.050807995924907354, 0.027086462019090568, -0.058324085983108412, -0.069751886972065691, -0.021026807770255104, -0.0010775384566174273, 0.074350384938426592, -0.0083996536342961781, 0.024897232303854835, 0.087435612841062521, -0.019098985323464851, -0.046097891900699461, -0.039781451834335679, 0.0088894731980628458, 0.0075569224053487344, -0.019310705820979837, 0.055367812483190761, 0.044255697213517686, 0.003269187287821218, -0.010373408718694646, 0.072601121525306539, -0.0081003549893320786, -0.024375359119167946, -0.0051757404707577122, -0.007608303655937336, -0.038607745687823228, 0.092478375023070991, 0.00029773934680776826, 0.041278394763053186, 0.081715888790276012, 0.024739987393328, 0.18485522219427483, -0.025644712781172099, -0.025676231567332224, -0.069747146376060248, 0.054381153884765894, 0.049824898758326436, 0.13026732540299155, 0.17109724133509682, 0.059607917528576915, 0.0898551064946915, 0.095437277162761069, 0.15876422270859231, -0.059133757610202321, 0.090976556591518709, 0.095108813979450674, 0.11556486887071599, 0.17970536904884052, 0.033055045328156785, -0.035525492509829046, -0.10877929753051407, -0.05079396460228644, -0.076391322443933374, -0.056757989672368857, 0.13477312348229739, 0.12869357538617032, 0.13013531388087007, 0.0063887122121179842, -0.08972948672558663, -0.31295031978607873, -0.28325157301095855, -0.22477218093756324, -0.2145675780259611, -0.13307930518541367, -0.26981212419965894, 0.0050165855664531731, -0.080398088607170237, -0.085216248619270157, -0.18399362322745855, -0.23965470437008415, -0.12035412983362095, -0.076983583068044717, -0.018020432830199287, -0.023775391914850265, -0.10766179954942284, -0.16700211823558328, 0.015040770227884616, 0.042510381440078737, -0.1295843290841098, 0.029351080812140877, -0.019785888214935599, 0.12163685368807528, 0.19449321821046042, 0.18157312421218158, 0.13917958348474402, 0.036259259826054727, -0.059330356189887357, -0.053816217365371406, -0.058012192775396779, -0.024991060464911681, -0.039656092354391499, 0.16051410507047068, 0.14621181331244598, 0.076529241884836105, 0.20617689470457351, 0.086129886089688273, 0.23683312856300526, 0.17799588816524972, -0.031568685911075867, -0.011339033584039513, 0.0075929000196447577, 0.036795050434868116, 0.033074275171315504, 0.02413735006868855, 0.025795926857207403, 0.01249666081014379, -0.019552843326395453, 0.052849908133605947, 0.090518035422685661, -0.012948046871117346, 0.077671915299142413, 0.03560950915943991, 0.077328247554565535, -0.037094066672885492, -0.0047151073853557868, -0.059216558245230588, -0.13706040241569367, -0.084997996513450039, -0.2036404817250472, -0.1023980466551825], 
	        [0.0032466543865972697, -0.0050619149620753506, -0.021817810555513489, 0.020873615011084853, -0.023531149044787023, 0.03236851492334604, 0.023279668597308872, -0.069079320177640346, 0.028858662573673435, -0.022912200910692751, 0.03504956758463669, 0.021373318115011183, 0.043177163021661899, 0.031000576507821495, -0.022727992508285319, -0.041130337906935252, -0.011956655086753407, -0.0073657698466143146, 0.019513062456004551, 0.05648936597537918, -0.018006917494647098, 0.023594044549755097, -0.060974710958634132, 0.13275136748820646, -0.02028861314235185, 0.093323469753408897, 0.18375935802888299, 0.093307762526131197, 0.017002171822373846, 0.029001128392942721, -0.032620309649792054, -0.077144466336661721, -0.026312985524931123, -0.03637619977745446, 0.030016539993203389, 0.081068448718876446, 0.17134303640361637, 0.1454521161962567, 0.14411586594973091, 0.25089534021606852, 0.1895315775753576, 0.10961959096303461, 0.11868995411865033, 0.097649074161421504, 0.017539178062786528, -0.16076583519696661, -0.08944189051045412, -0.1662700174191715, -0.19945945515698124, -0.12053950329957802, -0.099974797166572635, -0.0030787654511070864, 0.17592486845741467, 0.0094047611238743667, 0.24137587097504254, -0.10616945372175415, -0.041295263909978092, -0.18662857060598367, -0.10128658810243146, -0.15612237408478322, -0.19263459821003462, -0.26517496264532614, -0.21075478738597611, -0.15240183455933287, -0.016383869315923158, 0.10147080642825733, 0.0087661143103210659, 0.033117317571517424, 0.022841544673590577, -0.12277060576748028, -0.10456605790706747, -0.046810877427083952, -0.051309908127680354, -0.12955150951531408, -0.085883187288628787, -0.21065306139257753, 0.067423551686227948, 0.074090258222003588, 0.082147407869472167, 0.095756878907326509, 0.12800788880163314, 0.19242466407747882, -0.010488011809805561, 0.0024629531735309296, -0.014172878937930886, -0.069938838753530824, -0.071937788454647211, -0.07364200527100781, 0.031404273448011791, 0.1105219490341731, 0.082629216504521888, 0.072224220830742203, 0.081941428822504034, 0.14730626716129064, 0.1368836421937018, 0.093927882429139575, 0.026163487559181867, -0.034217252732886977, -0.096253676626479767, 0.052568923694275654, 0.058021118675766356, -0.069486623440566414, 0.10387349833640262, 0.016885436566802817, 0.005752374710489408, -0.033857627300573193, 0.099199719978274481, 0.0027587586225816252, 0.028883082517926831, 0.0077987727191536071, -0.026129748383045506, -0.10092939633783646, -0.059725181550862289, -0.16032203807483622, -0.026295964226010465, -0.081817026646661545, 0.019856334497422835, 0.011592637104098677, 0.033535731395388457, -0.037190296797926556, 0.039208766263747495], 
	        [0.15105659815179459, 0.0077705624895111625, 0.040428021684616372, -0.0017942995443031018, -0.041653694509876826, -0.068590774376822525, 0.0062987842177157083, 0.026863472745659034, -0.032303950577093066, -0.019033355915254568, 0.0079979595266923831, 0.27835546979835657, 0.068631274711118018, 0.1003446445291738, 0.096879765477730584, -0.0033597601637389563, 0.054326134689200528, -0.055941674871638272, -0.0054187285410067509, -0.0077552385763832027, 0.0045759439983336231, -0.00017646288706738011, -0.0094759828186700423, 0.20486066918593301, 0.23125707799370063, 0.16313521549416574, 0.098539105674318173, -0.0099257073687919195, 0.053672343529954342, -0.088888704815857006, 0.023933003966042796, 0.012746466899076839, 0.013847645420023147, -0.39203581787528585, -0.21351183585569017, -0.17917201633539981, 0.010686831818043349, 0.16695352916474759, 0.20160459511575174, 0.16448815854770155, 0.011414537180906403, -0.026561248426133832, 0.0072564580788328503, -0.0063508243919336849, -0.16007115781686321, -0.15188987832197204, -0.22445870647203575, -0.21974868512281032, -0.14907696976575383, -0.011673426129634679, 0.10655889056027106, 0.1667289488285415, 0.027289163008064776, -0.0080445463310044318, 0.075809327117707645, 0.02383788693419224, -0.060318784128438871, -0.15808704038753496, -0.15079581692449417, -0.21784799920378062, -0.18411391886373429, -0.034761650797478574, -0.003078110011040372, 0.1443522382170338, 0.098191594014337011, 0.018899511324318399, 0.14330730009269013, 0.13334147887544215, 0.10003033854405316, -0.011990871182064697, -0.081183725373317125, -0.091853226128579088, -0.059061176343404506, -0.03070241061676092, 0.0091317924222779762, 0.030031451106893217, -0.029165609653882929, 0.11124860010301604, 0.10478624646896353, 0.060405900026046816, 0.13088294144967497, 0.094446823325321699, 0.046888440627548239, -0.099894170503190327, 0.00043866828312585926, -0.079159018990778859, -0.03095799592580474, 0.051180956797886826, 0.036532200341151982, -0.026313715866520357, 0.048771540558330301, -0.019626512408325483, 0.041811742473138486, 0.020274853199404738, -0.035311251861491172, -0.035700435347725573, 0.037776391130845591, -0.015390360725990176, 0.10246466374888295, -0.0044949551663046594, 0.0051588081839975541, 0.03834429330297548, 0.052952011747411765, -0.020141415030883712, 0.038911185997862419, -0.025809969050729711, -0.054106671252965456, -0.059080808671793307, -0.019798138018163675, 0.05184924826995934, -0.073763175158423316, -0.038340916613003422, -0.066879624217449418, -0.018985614490330482, 0.048710428169965542, -0.019808728907500892, 0.010561838400676829, -0.024562749419368719, -0.01514121795616151, -0.047958337256937988, 0.21088916658617063], 
	        [-0.12519121067655439, -0.11688358418954034, -0.058961154017472692, 0.042235378754734682, 0.027384636957009777, 0.073378477292935396, 0.19970246516712672, 0.18078323729328397, 0.17754089590649072, -0.12635528181833747, 0.083209749590412954, 0.029824111195079443, -0.0015424767491013895, -0.016459376017527724, 0.077533561237047313, 0.00013267738458831377, 0.093750279161917041, -0.044726997300741589, -0.19635306229962388, -0.22782377363617864, 0.1158824654511761, 0.28944469131076977, -0.068772338411748027, 0.010802089827676834, -0.007867632781378895, 0.079851071307127916, 0.21292640866678078, -0.0089784453788348019, -0.068417876998138935, 0.022956354752557615, -0.026211043907313703, 0.057828305945572214, -0.079483020254072362, -0.016171715594615801, 0.062689315224603068, -0.021796237786981598, 0.12691374422028867, -0.04752547764539633, -0.049301283041039312, 0.048206477749446197, -0.2171608705725426, 0.02813017983255572, 0.12406052692394327, -0.086131120950002402, 0.07689460503666104, 0.03813505264063799, 0.011628762315091006, 0.070698493776356452, 0.0084135336178128677, -0.11267273154459259, -0.39754842405378749, 0.07304069354916054, 0.16994373683501546, -0.11001260539983146, -0.24501206201543754, -0.016540271332897986, 0.037588646441523585, 0.12220568704299391, 0.04683975277378849, -0.19361692505980962, -0.50340607287084882, -0.46224605745397018, 0.30127286167836509, 0.3851257612605975, -0.19298521871344812, -0.50882871676217767, 0.057766291481131202, 0.085915688210784893, 0.0025825469644762365, -0.15401989963515647, -0.081066644575465197, 0.13998594331352224, 0.17360289429870265, -0.0082113317756247854, 0.034164433476710707, 0.033688177254881144, -0.15383945741404872, -0.0035717910256200143, 0.011347483637652627, -0.017873166525061147, 0.039146796587724922, 0.1063684799467139, 0.076247636399764285, 0.13995849083497702, -0.12176042704433512, -0.064375482208107571, 0.022871601462242333, 0.20473954746266876, 0.014948129510764279, -0.039363453803276216, 0.024752228243803808, 0.062530143477564123, 0.0078273499345180124, 0.087539876894555071, -0.034542935964575638, 0.058746443283951399, -0.075126285975756629, 0.076597485120775147, 0.19454209279112086, 0.021682122234847927, -0.073488695501302631, -0.058082679101971291, 0.012328447567534092, 0.076038878132540511, -0.036913472724451113, -0.018862970847490845, -0.079316521304031273, 0.016093982880941032, -0.18419160468838913, 0.049226683231961221, -0.061457314990918277, 0.0282830319555805, 0.10422016934925292, 0.018036735639772688, 0.062905112558747867, 0.07205279732777245, 0.012387870117812391, 0.090730029290315317, 0.11439343988109769, 0.10142758766032614, 0.19506458179923916], 
	        [-0.037471547940615017, 0.079003059168883338, -0.118094514839233, -0.011575517807246187, -0.047354837158948428, -0.043819905087823359, -0.02204068674980534, -0.015582330906619458, -0.060450140546324756, 0.0056710709178786414, 0.087342199767917988, -0.047484586855564871, 0.055578468629173532, 0.014640579783893624, 0.10885390788005234, 0.072560750440575611, 0.053636006213721381, -0.017555923047039936, 0.042133507853188069, -0.02906136252712694, -0.12501847301134028, -0.017196570903083498, -0.01339795071661689, 0.011501218082141058, 0.027702359090996088, 0.02741155292168642, 0.029974564956617343, 0.073364263125587581, 0.010914273919724583, 0.075409891966110643, 0.13043893685947877, 0.023410994104295653, -0.0048253685633425289, 0.074978432218179375, 0.054355304633943134, 0.04204747510162269, -0.0154640673353326, 0.022630801443203577, -0.063888237541103121, -0.040446308747273431, -0.11272446316765139, -0.077311881416412265, 0.01898064857748586, 0.079484126473140709, 0.042423015302388865, -0.00069403510352408077, -0.069229088452786164, 0.077430303792640126, 0.20473753110391857, 0.28719237966682659, 0.30503589992248753, 0.32550043922428146, 0.14073163480952872, -0.015200746246803488, -0.041860347134460144, 0.17135640555161447, 0.1527355824602927, 0.15944325028772327, -0.046360679758357518, -0.22276635585078641, -0.34374202605941701, -0.38756252285531489, -0.37352669157727963, -0.17546418763106925, 0.024941844858314459, 0.038533485282303062, 0.12621571033694096, -0.29897191326894157, -0.47416602764115157, -0.40533769987763618, -0.044666674782561915, 0.12588265080168398, 0.1850321413968945, 0.074481724923722986, -0.10021514102767744, -0.34731763668724608, -0.099282213883217618, -0.29837506102690192, -0.18662023586706711, 0.035652126252033491, 0.4013035269477947, 0.06080080045364062, -0.020916204012535085, -0.017432090909172804, 0.0064526884627329265, 0.31447123310066399, 0.27814266592693648, -0.042857339346656316, -0.10711074543649843, 0.12304888506893627, 0.34204207221679617, 0.11781479381803128, -0.098207505292465483, -0.22534157766971744, -0.17336955460421499, 0.025185350745410999, -0.11167805937105306, 0.2142012132418766, -0.043950058435965438, -0.023906769270708315, -0.065584638845817445, 0.092040652752376897, -0.035310034547302485, -0.13396895532331693, -0.03899490443982933, -0.12154265439434478, -0.13006356630340574, -0.17041731619250497, 0.11042010979150567, 0.092651247387164362, 0.13111238457685057, 0.058001891637747924, -0.002652110312396515, 0.15722347821642979, 0.066071308703285564, 0.039488088992435756, 0.039274482749949047, 0.19071883885744992, 0.10773181848300134, -0.02812558988695802, 0.05797883312162265], 
	        [0.14781185661120058, -0.039386331432373266, -0.022921264342725164, 0.05388189603876585, 0.12598813182555718, 0.028202774466358597, 0.0346074867144123, -0.042381312562632507, 0.03884963956920999, 0.036410085655850757, 0.16289756506012004, 0.089845238615583675, -0.046052810070111194, -0.082095780414563016, -0.22396972511791116, -0.11679212172424258, 0.10053680749504602, -0.0082322488230325598, -0.010907332253094121, -0.029537833982867273, 0.004945131369650824, 0.10219160122974023, 0.18663745104851179, 0.21337195182960642, 0.096928017302127814, 0.082225401499670267, -0.042534134329079154, -0.052259406449906821, -0.020309120595503272, -0.10672463441898887, -0.088221307987328218, -0.15579389025604545, 0.23092722621811365, -0.079955537176635005, -0.13801119251604682, -0.056966288552968501, -0.28523441407005473, -0.0068234259848855387, 0.2637658797263801, 0.035256610529995847, -0.00096948078976237528, -0.13354739530762744, -0.095292234694563882, 0.10809316225785848, -0.22622473692942502, 0.13750964405633209, 0.30588685236073848, 0.47089738278075627, -0.26225597341681434, -0.24291657949567241, 0.22231836629884105, 0.090543741709712147, 0.043301288770093399, -0.055195333115474088, 0.012450074560341884, -0.48338662295767298, -0.41101568836876001, 0.015182853563479719, 0.26867003611558071, -0.18587591997040018, -0.65746047656761675, -0.37080281699249629, 0.26181673556057816, 0.20685619441423742, -0.062913466536091131, -0.0046315163613586535, -0.3460271088384187, -0.057875831473219591, -0.080073663390408306, -0.060732968283770707, -0.063131722240472088, 0.33222972618047136, 0.16004023907285109, 0.084047102099867474, -0.02976989350386039, 0.045421274875539708, 0.034504304163254118, 0.37536242338238812, 0.088935618162099092, 0.18255926007618903, 0.079936172529676358, 0.2352440711079648, 0.11129319261560268, 0.10974139035902221, -0.04722071086520177, -0.11616310797947724, -0.067309805824712979, 0.034599132623224643, 0.23285705965606096, 0.13190349282962149, -0.041749284399034449, -0.18971912136060662, -0.070314124515462983, -0.044339814683120031, -0.052799114165529494, -0.12425748565008495, 0.045487854774525521, -0.13703396222511421, 0.059172195354677021, -0.056679024139974353, -0.074184736695846645, -0.096952474536131261, -0.021836418526120411, -0.065731207012367593, 0.021349416929545006, -0.083419025939874075, 0.052566367769086797, -0.0026602316535740966, 0.03873498024493624, 0.068175817228078084, 0.22646127086716095, 0.082890232397643551, 0.035399054654756332, 0.067320652970741954, 0.14239677197520148, 0.085138769088166116, 0.050369804354669645, 0.0010887532169456537, -0.018280111009442837, -0.017225924618171629, 0.08422037289529935], 
	        [0.11800749409978381, 0.048641544731680905, -0.10678911358350332, 0.0052911179909213013, 0.23136181762806476, 0.17221088012028055, 0.17682279225882522, 0.20044631087373868, 0.052122439652192432, -0.1402595079578749, 0.02243868573975058, -0.019828048061208629, -0.1373081753593374, 0.092577186980583981, 0.20995915555570394, -0.16372378150074623, -0.15700734079198975, -0.1736927596916677, -0.058053772103850598, -0.0157237265316914, 0.019398599613700079, -0.049310374137502805, -0.11375225205060403, -0.014247453019732223, 0.070739494942123643, -0.088327713510229194, -0.13682329114661984, -0.078888479596802466, 0.053144758392313945, -0.19437922851131084, -0.0001706889902193115, 0.13424778030432938, 0.0093320725261308857, -0.18143139441084224, 0.12020647648261903, 0.2963908916390815, -0.0090974650834537152, 0.039855885453729201, -0.08463057056034079, 0.036931552840693979, -0.14788894891447979, 0.19686627422843606, 0.40663533420008574, -0.14336283673708961, -0.18437286091816663, -0.0387524786508332, 0.29570661700880807, 0.053688982795111487, -0.19564754353990196, -0.34486385728508229, -0.50121307000769089, -0.40626297518108834, 0.13382493808540968, -0.00028761919063780006, -0.20091903070867112, 0.11021116432324056, -0.18695906308384752, -0.23952005130108939, -0.18820014759183346, -0.020408212645899093, -0.10626227681963624, 0.10776229335456736, 0.19941878614236833, -0.058276572887897449, 0.027521741134965361, 0.18134851852604528, 0.068694879008434961, 0.014109730230775254, 0.019795706580671063, -0.069519445032426547, 0.085998705252793864, 0.25121683554261642, 0.24991886206451533, 0.20675478705920156, 0.093802467043084675, -0.071505683581074439, 0.083956608622508533, 0.042664222469544988, -0.044897975149803877, 0.075633229451364206, 0.18470969085810693, 0.092312097921409986, 0.16477123155033629, 0.067407467708452601, -0.035391492159634129, -0.10051173548067931, -0.14948457456306743, -0.0859115996358253, 0.11899616835413444, 0.022232039948935078, -0.059604180367185379, -0.083714134795981943, -0.12267228192899818, -0.071817553655208671, -0.061364854031334182, -0.037122355027120003, -0.024043277802218023, -0.0077183350586837451, -0.027902500393156213, -0.070228976844589688, 0.067283048218790914, -0.022096929111434786, 0.030068653546629937, 0.016508794156056245, 0.0079910228125650851, 0.053657963888500304, -0.01697467785547141, 0.037888483605591022, -0.10340431444912367, 0.093947011691645294, 0.17568681512805212, 0.053193274463334841, 0.08332828325168111, -0.012241690018234677, 0.11152581385082602, 8.8777513975901723e-05, -0.005979464667969045, 0.079576229035330182, -0.011219166299368227, 0.13062677267175682, 0.13093666750650848], 
	        [0.14423093057173975, -0.01008076678423761, 0.0073771044594135079, 0.06526902731825053, 0.055848605823902463, 0.052363879757229073, -0.022518577948855645, -0.0099854054434987405, 0.0074881193579894086, -0.0076370273996572077, 0.095115364997393592, 0.007486862308122141, 0.015230162163870492, 0.040217891425159108, -0.085367149632064321, -0.17282741030837942, 0.011588285357802999, -0.058982003588632453, -0.091214201593042485, -0.05548553721852835, -0.085056179953925282, -0.012889357099271234, 0.082191503484511957, -0.088215541467796518, -0.17609926241410598, 0.020767875260274078, 0.2973162999706101, 0.3447305749860291, 0.35075038554356563, 0.1675765045908931, -0.084317445336159924, -0.087650324477682576, -0.0293005697765467, 0.0082197597979237341, -0.14178517944724803, 0.20163787497778121, 0.30622658040655926, -0.089834272556955141, -0.32991154377532589, -0.23770186950896088, 0.14059485558234217, 0.22935018848257269, -0.06954897481239436, 0.13056609682447454, -0.031497286218108517, 0.0079273791460638954, 0.084811544151839932, -0.29146270301832411, -0.12913123455806388, 0.070966051055694937, -0.089486674726494908, -0.076857196283176318, -0.031866717999322773, -0.094905571386768056, -0.076821230076016489, -0.28837628451753605, 0.087799542000800465, 0.20019432782413554, -0.17096915847133118, 0.015333878953658897, -0.28908252284426406, -0.029526689505982969, -0.31385369627251253, 0.043040218080409316, 0.45576781944785838, -0.1807055900807637, -0.13846940283256665, 0.042622648402573862, 0.27231737835653241, -0.1914801913205901, -0.11016274974475865, -0.1176991482916686, -0.20542229438804735, -0.34623488704400734, 0.23754568531606332, 0.28599972207005381, -0.077962987774282691, 0.034879273993081605, -0.026162450274433972, 0.12712327036253446, 0.14403182667963604, -0.034148887052881882, -0.088550823688096886, -0.027745606072896507, 0.12772199691917124, 0.10001931959841266, -0.18643104606782843, 0.041460676340255576, 0.057714352211809129, -0.083881954200237321, -0.08331277637087868, 0.026147419256119429, 0.057512048083849625, 0.098776858052545713, 0.20838336844764122, 0.081416267386434524, -0.031359090867443505, 0.010864074615252003, 0.054167724377707081, 0.036335766553862711, -0.037734056827963769, -0.058460234722864275, -0.050705505416570866, 0.072100006992938254, 0.077237371527939302, 0.032034189952567169, 0.083688285950466373, -0.018740931617032101, -0.068236920761726133, -0.067252452363989135, 0.12643108826975322, 0.092411361850814722, -0.032832183242141391, 0.10360749350388331, -0.020641674722677181, 0.050396061289050213, 0.014052376131391174, -0.024231363336231871, -0.050093755663369793, 0.02935370249151292, 0.10979499165058046], 
	        [0.06063756206193438, 0.01163357669854459, 0.114137229829593, 0.11754589579378544, 0.020855057347248462, 0.10974930449157309, -0.044990292936782972, -0.011032547892272426, -0.053612766250269506, -0.044758197602911942, -0.10039035625686599, 0.13435448459204191, -0.024159164234305225, -0.084524427779703759, -0.091960375514529014, 0.10788802496504861, 0.045998078232354078, 0.055275005037989197, 0.064358819860857688, 0.015789766512200487, 0.020929919215574633, 0.040826832309231398, 0.13163339908596128, 0.059409419123521795, -0.026657113464773563, -0.14316517070653423, -0.105418542401858, 0.073237495897091331, 0.082433610114087633, 0.062596323749943172, -0.0031044464340264921, -0.085840139114289393, -0.052855154813073679, -0.058037038079642167, 0.029721950798359945, 0.092669209363733129, -0.14987389757269964, -0.13353796595923728, 0.050257684298183003, 0.014996004118443262, 0.11313878950895426, 0.052153057368792013, 0.010577754712894294, 0.013768087181216748, -0.23145094612919812, -0.067586869609837341, 0.14187556860642475, 0.21502139869877795, -0.23699602207891432, -0.28070386994651997, 0.02443305911955751, 0.017265628634335395, 0.017657686358856672, 0.026414327638663804, 0.088077975768645664, -0.19378616438963833, -0.33747330456037095, 0.10010384808690605, 0.36813409114715889, -0.03425924318529136, -0.51529004919317145, -0.21455976987161104, -0.029064252143607, 0.029684271548058694, 0.11428024956830421, 0.035997243237144733, -0.31780545305858621, -0.038939002809603523, 0.17082631104569121, -0.01983209806788927, -0.015434962482212933, 0.2106729777023667, -0.062119854775684574, -0.026936094188691473, -0.055531104083698879, -0.025879857930813016, -0.056537020588972059, 0.082251513253328801, 0.13249378757784364, -0.050895123398873254, -0.023068884844874127, -0.0065804143547715382, -0.029028619952673668, 0.16670678797071425, 0.037287239549273613, 0.032006611053345235, 0.022985541868513731, 0.033097970061269799, 0.25106958648152244, 0.055247679841358477, -0.078427286178819333, -0.065179530102563055, 0.001902992764642758, 0.015118472262848806, 0.031629329933778927, 0.074470568205687399, 0.032407934317240886, 0.033762676771467104, -0.055109213717668359, 0.029518107237236926, -0.0055725182709008697, -0.022571921481206444, 0.0049782603577565171, -0.034892861951486748, 0.030152277838361469, -0.046317536194844577, 0.017217424448456212, -0.090595438047663929, 0.010986708242086585, 0.01475361802999256, 0.11880942290428557, -0.018853830715500133, 0.054570000910600755, 0.052880256948674695, 0.083387882797340704, 0.068291238632331608, 0.06359772129360039, 0.051886923283943703, 0.083087116244159473, 0.021602565983420394, -0.059861424749677705], 
	        [0.090807144739521728, 0.044777130492487688, -0.006004236596012319, -0.050363433256047141, -0.038872008341752945, -0.12117244583538275, 0.022973279126560026, -0.031712447829596702, 0.038054148427954987, 0.0045987409431256232, -0.035659664256043694, -0.035674765832077376, -0.092990150201568755, -0.039162611712276169, -0.0069043930890978211, 0.0138362499846926, 0.030660708367506589, 0.070549138758469826, 0.029410046912296789, -0.012521892141359542, 0.051323314480405155, -0.0037634551331882926, -0.070013831056655887, 0.010860732256468469, 0.032726783187564529, 0.13748613225137779, 0.058183973556349577, 0.13750969320900669, 0.078720320702839214, 0.10378646515411444, -0.028949114370941081, 0.062081587953289247, -0.036944529962483555, 0.11289672176654392, 0.034425804553726264, 0.044915048986542611, -0.057007183048689347, -0.15438271229617534, -0.082871023728730175, -0.12982282763653841, -0.043611665688003953, 0.065964351753196288, 0.036324136181226305, 0.063713986037557943, 0.021735179394400311, -0.078258563769408679, -0.036956657136625479, 0.13355366389737111, 0.28201274882919508, 0.32487155668793438, 0.33827072272042519, 0.18538129082837551, 0.073223331977013348, 0.019788327920499546, 0.13765137512483783, 0.078068271126673666, 0.085180243301805444, -0.069125794874328461, -0.090878572811101455, -0.22904348013123638, -0.33513853608255195, -0.34107144821645707, -0.35147873150944769, -0.1429837248305727, 0.07534805803134563, 0.14776217747988318, -0.045855701305787699, -0.24152324430590322, -0.21753420627734718, -0.13093602087760289, 0.020511261336832037, 0.097671657751413093, 0.14601331736207362, -0.12506767652167178, -0.37252357673151071, -0.40823904893654289, -0.045905807544792537, -0.1600759086755924, 0.07937818266133348, 0.3143974221346838, 0.19157945898080572, 0.029030655452761761, -0.114833479865943, 0.076726138229785495, 0.30135114571366528, 0.27545746842581786, -0.0068620750320619456, -0.36522476092942752, -0.06701923494448854, 0.20620489038853418, 0.052499913955829466, -0.13265239911713711, -0.078950246082188896, -0.20641980579765501, -0.24381499902372766, -0.086797680638089778, 0.23653031161361043, 0.22019310254213031, -0.036973082188424586, -0.049162482847655051, 0.14625921591989249, 0.14505339243853665, -0.22743035761938601, -0.082066104556589428, -0.12119372823467633, -0.043181682543043637, -0.098016045425190226, 0.029470016170797184, 0.13747267623604109, 0.0062917025392471571, 0.16322306590540175, -0.091363535583626032, 0.073287696619824344, 0.11422898762272718, 0.085210422866565244, 0.15331572095963925, -0.072660538227662871, 0.20466593159451976, 0.026700931142256593, 0.036011074297831958, 0.078827707903718985], 
	        [0.18112261990369827, 0.073305524770505379, 0.040735943579691819, -0.030592173175515824, -0.014723051663569992, -0.009717724172896347, 0.12724950542153152, 0.030397078051933549, -0.058889198178995419, -0.026611166982695778, 0.066681046712227979, 0.066608088167588356, -0.071918745225061601, -0.0083165323796249163, -0.017286314033053696, 0.038602764286622113, 0.067083551068678124, -0.070282103290758444, -0.069690686774509569, -0.025274574618584636, -0.11014662057019094, 0.24938498020809974, 0.13937639935994262, -0.057197841279870723, -0.073330994310649739, -0.14479112276604489, 0.052420027937541525, -0.12934942016932524, 0.030685317385975658, 0.061611117116273553, -0.10213214383142413, 0.2239301020176982, 0.11685706457732412, 0.16687464021324355, -0.11110520756446859, -0.17122260866286426, 0.056581869983290053, -0.048939035687679822, 0.15917940910095132, 0.19178174933281159, -0.34144279330828603, -0.00029346936519335232, -0.046900947355914019, -0.19493783020620092, 0.045412349490724202, -0.0095033676128255251, -0.029117126455099909, 0.041409793887313237, 0.23150478397061292, 0.052448688728174223, -0.56727135983775523, 0.3002926921538524, 0.46090762088909437, 0.068318962350056037, -0.37007579263516616, 0.042656412910046834, -0.13943043649625064, 0.11478477562923234, 0.26740569898461908, -0.10448691247946103, -0.66827654091869537, -0.28237532775707574, 0.17754279911040999, 0.17370357234732237, -0.17216489065584101, -0.47505336754415434, 0.054836276830569283, -0.030162397455766779, 0.068492907597162797, 0.14670950434159008, 0.0071731840592088869, 0.29965767091965445, 0.20250028242592366, -0.17784337927349159, -0.11561865754268655, -0.1332395677790339, -0.097221853473992981, -0.028986446755459486, -0.035807336045180493, -0.10615355684023776, -0.13901885393191493, 0.016240710560221847, 0.17310497729481505, 0.19618607123165227, 0.11531910216918494, 0.085863326480380184, 0.16627387139600339, 0.31073734902957373, 0.046358990626833282, -0.0066805547685416106, -0.11949504899391879, 0.049149985727881776, -0.11684899113755934, -0.077621953166553875, -0.15566484457471233, -0.042823410792438815, -0.075958529389046639, -0.047231781924106236, 0.18266592599709178, 0.10710563631894213, -0.031804445585158589, 0.064099712602439879, -0.083339571598682299, 0.088606450058975411, -0.049001943443667206, -0.060791129502278038, -0.011938566068193671, -0.02896633660169206, -0.020442949029082044, 0.030720122959175578, 0.060613751104797636, -0.039897663267117758, 0.063701418129868514, 0.047368750939173282, 0.029398381107522881, 0.10605597723541271, 0.087012599833984572, 0.067143725554758865, -0.017892266631649029, 0.069807565811236316, 0.20793552791413253], 
	        [-0.036185256591647091, -0.068423651398025559, 0.033948269018981292, 0.25798065842164275, 0.055754688409832748, 0.14928617791426527, 0.20629310863112724, 0.22367188663579815, -0.046033543143111158, -0.10954993360673064, 0.12202419922148086, 0.033686025185198282, -0.11811717921720266, 0.12833540839950633, -0.12897362866582851, -0.056304284939988458, -0.29473302723096206, -0.025196026459084302, -0.049804206349577773, 0.052953771957786361, -0.067019497571920966, -0.068226576443395942, -0.047831454949617075, 0.026913257256672624, 0.088734110838903008, -0.19263180519366901, -0.011955075780035074, 0.086306410506485354, -0.16802175795413904, -0.083379279329359596, 0.087895961497153119, 0.12511813454172754, -0.12767661265744493, -0.21930070432606474, 0.40484999864474031, 0.2168179404643775, -0.07267430101361208, -0.087649129132667633, -0.11089339548416925, 0.015296021762153431, -0.11229804131529554, 0.29574346278635255, 0.080991374361556789, -0.1694969856716752, -0.097181118387015888, -0.076489518459058936, 0.24095855252989079, -0.24206344311267508, -0.33278560146628966, -0.40823989525531124, -0.16983118669484359, -0.11497220840475923, 0.28957955830284815, 0.028529279547082176, -0.048023491796640019, 0.06300024473077781, -0.030721874577941871, -0.066963046815232144, -0.01101372815939157, 0.075931514278543541, -0.08086212076080368, -0.16771239481709987, 0.10099670337031591, -0.24229068894050565, -0.31554893398183759, 0.037389060449040057, 0.15550442487747781, -0.021450780534793025, 0.078024125916309389, 0.22670078648533437, 0.30001803369505781, 0.24803967528041221, 0.095538681661574226, -0.038034563476046522, -0.028631619824097732, 0.0083028097894310426, 0.096554125387373055, -0.093655781707343108, -0.17003471525346986, -0.046727860698759775, 0.05438730002622244, -0.011590570354357996, 0.19038974433125128, 0.080097088742329736, 0.18123484236756301, 0.11932337787747498, 0.021024215763941437, 0.0092451671870699692, 0.06740553047068025, 0.017941188287962664, -0.040749800063489494, -0.082440526483723894, -0.11871195451512397, -0.13318249702629348, -0.054036326779098989, -0.081001677321437121, -0.026663685971886258, -0.010406736043617935, 0.076209039356496408, 0.011611786985809086, -0.0056684023812064444, -0.030538187745098727, 0.020575247317142609, 0.053927702112941525, 0.047348833795707576, -0.03821865610616923, 0.034336636225753531, -0.00018565997117961364, -0.026356654841611753, 0.080691162917547063, 0.12906802891828614, 0.05459184679453908, 0.056561011261114173, 0.048193611888173539, -0.032352041989720359, 0.015293367697285426, 0.016804531631558026, 0.13319266151582276, 0.0038584083011071468, 0.11727652977520774, 0.10128996888306026], 
	        [0.087039001828216278, -0.086030861922398769, 0.02399938271861143, -0.055000802538298317, -0.045275456153332991, 0.02871882797765658, 0.023278548014906846, 0.0072154124696548489, 0.079226988438582377, -0.032632312594033867, 0.15267091964537238, 0.044269487995447235, 0.10051883763832034, -0.11766420459825427, 0.067446412530414279, -0.016434712072576442, 0.030052598489340509, 0.10105556654675149, -0.10170349865733713, -0.066476723006283572, 0.012013167877748929, 0.0062464935422486007, -0.057659973131322387, -0.11952174430584045, -0.014950531682345641, -0.030954419784185765, 0.18711958320008767, 0.21588294444934941, 0.18760853314788856, 0.095822570293348813, -0.040221853955554603, -0.073249810582964661, 0.0042778218861511397, 0.055781737968025463, 0.082192357333136706, -0.012445928409250004, 0.17705102429087519, 0.1158017657021186, -0.24107364819029131, -0.085836786800409015, 0.1500735566893015, 0.2849842667051099, -0.14535341708480665, 0.010094356111924016, 0.095916706708640942, -0.29873458100190536, 0.17874640390204541, -0.22302317330187477, -0.1748799384747195, -0.043712845610052481, -0.11620374099610192, -0.23806617911756578, 0.0043003795719866941, 0.054212231978947381, -0.11567683342313427, -0.29339006649020949, 0.12100456390445283, 0.44189519506953484, -0.15496760773507526, -0.022722335616015554, -0.21405336749991405, -0.020547287844339426, -0.27084401995117324, -0.095044199035620808, 0.28060020656129225, -0.27074453207286275, -0.1368725199810682, 0.17055001589057026, 0.3385971361439663, -0.27109736561922526, -0.35586064666592582, -0.26534732401781719, 0.082943137915921422, -0.35846678240511359, 0.34730776588311096, 0.15494380599014224, -0.10539865152649901, 0.094828052386711173, -0.10941051423376011, 0.019908568726464734, 0.13261552724999176, -0.049724811043381112, -0.10696620165908551, -0.25438708553660488, 0.17440858544741758, 0.106900230981372, -0.077671145816967782, -0.0093718677367089637, 0.11752430326382256, 0.025752119860827101, 0.068028195805426836, 0.109859958346973, 0.19781198384741466, 0.20369617905172333, 0.17359025162546643, 0.16858127865343278, -0.071588287733521772, -0.02785843176203006, 0.026995181216372979, -0.04796739911574098, -0.17448260318173581, -0.096431568764831985, -0.070820859598049485, 0.12975749185900132, 0.10168587218941928, -0.012905483555157513, -0.0072144888762498138, -0.076308659554720201, -0.07477688141721188, 0.049861846430829346, 0.13897204424792844, -0.016419927285720337, 0.087860802033879568, -0.035559429860732017, -0.03426567268440027, -0.041158346357247827, 0.11153373670141298, 0.021064007443562835, 0.066653748395789317, 0.031122571004505259, 0.21873333106656628], 
	        [0.024271907098944792, 0.2115259074770901, 0.10968836638996259, 0.059160601041090916, -0.042249507377398132, -0.087479837752595893, -0.010602704832708497, 0.082454879411166984, 0.12207559803506536, 0.17548011074082592, 0.04848664317003136, -0.10566377044967423, 0.0072712864412497608, 0.0048264824945599694, -0.037108321821793577, 0.036969189242625711, 0.05926595272339992, -0.091124279486143517, 0.016031767906761155, -0.026239172447726146, -0.059021935429157561, -0.088672703904945402, -0.07726406615726103, 0.056275133223160842, -0.051047381915993131, 0.023387814606544439, -0.017324327411277735, 0.012251187743591036, 0.02566561133241816, -0.020852848518282376, 0.0066968345396523909, 0.073686269601061574, -0.099902583451108237, -0.12413190403188956, -0.018048937015446576, -0.018586297307219612, -0.044793005705344127, 0.017307608148219817, 0.10244118561809155, 0.00032799800220171399, 0.0064671351799718869, -0.1022459225049749, -0.025294477732110757, -0.034441569418776949, -0.12789282327046789, -0.022149310544806594, 0.014835263850125215, 0.12138287707221934, 0.031882958581233231, 0.032470116515611644, 0.0090956520749568559, -0.063478661603039985, 0.10606577340598457, -0.099169451323734906, -0.16381989457362639, -0.14343340117378295, -0.032182651726264416, -0.058018044565288848, 0.022916145133555329, 0.040150146384349723, 0.10591359904659681, 0.1170336117688416, 0.051143184046494997, 0.024664034757263892, 0.022331370571566023, -0.14794372876832823, -0.046225532247637063, -0.05297556705197623, 0.017633358715772832, -0.083088039795379154, 0.039154465132006294, 0.083558775558834938, 0.074371516444640615, -0.010152289765342187, 0.0052220614930217485, -0.094777308466158713, -0.071076534981956443, -0.019630080815721984, -0.04040811670233907, -0.046652571732075071, -0.012628590876755261, 0.026326307291913001, 0.057107467446696494, 0.091724178404241782, -0.0027241597818778163, -0.15413869342653225, 0.04417172095985869, -0.037480373466733836, -0.05858180541180702, -0.10281951751655544, -0.030064069517148434, -0.030479321832951416, 0.092607838224174358, 0.044944678809903021, 0.045404097144968888, -0.010356704162888877, 0.0060040972999510778, -0.074053150092477205, -0.041776885656914911, -0.00050145365557355964, -0.034990913951661012, -0.036125660846155677, -0.045100434109200879, 0.025861248849615631, -0.053218496064615241, 0.012117104458325631, 0.12779186353261135, -0.16438404194145712, -0.012740091450395306, 0.01918508147926716, 0.084770906418973543, 0.019614329268121566, -0.034807211174255628, -0.0017216001979017959, 0.15755321182059503, 0.005374991982287608, 0.039443870135585729, 0.14282549594886118, -0.047934404701260411, -0.10055944078648103, 0.083257395587425245], 
	        [-0.12767186993116422, -0.06241249849097049, -0.094140716145740932, -0.064796146543488364, -0.017809834236761531, -0.069099772207516424, -0.023074608267024246, -0.017483825565269805, -0.066452845435443095, -0.036871983239677726, 0.24167468985862534, -0.043100584664250055, 0.08879797960904616, 0.074578914712187833, 0.041306113766767155, 0.04109954163943659, 0.054754800348057686, 0.084086640696184295, -0.0097247769253423731, -0.049452947316442196, -0.081132742094774932, 0.064802809772454922, 0.05833403551933676, 0.048858263974498307, 0.0030690275504097336, -0.037721688147944021, 0.054194193438541857, 0.0081353567184947462, 0.012381719155275236, -0.008132915823203319, -0.053456058684966092, -0.091653069394634301, 0.064630353359554749, -0.0018237773961607869, 0.079983168612036179, -0.085168321622783483, 0.078833820035233801, -0.036841407005709259, 0.14405274156018966, 0.015136780025423867, -0.15091802612252794, -0.03598558709040784, 0.070900917613708564, 0.0031644970002940084, 0.012721805049422611, 0.017055461026181423, 0.035740435535686108, 0.020664246268072436, 0.28800157393241543, -0.043946476897746549, -0.069904503860334685, -0.028875975086598206, 0.013241447478979717, -0.093932780131541327, 0.0073548190708109971, 0.021222759365131662, 0.088674320104961624, 0.15572293451123756, 0.18553868377788824, 0.051415801134578276, -0.30813751116397192, -0.15349895484431902, 0.01561395969351688, 0.033258092794341457, 0.0072740466714379393, 0.068545921699466134, 0.15637538018177105, 0.027911256742741787, 0.1847624277661041, 0.017476811293658551, -0.32882514199767582, -0.27338241826081056, -0.08244213190925273, 0.040346052358642762, -0.010354560475994028, 0.048333017143236193, 0.10853011009473441, 0.20222782945874304, 0.060163816193484057, -0.016735356900245406, -0.16834359646244612, -0.29914164075483063, 0.034354440985680856, 0.045517620346114396, 0.020287847648788881, 5.4206367187566162e-05, 0.055521485631890424, 0.078561317020316615, 0.16849991072472859, -0.070184288770934952, -0.079488584515101129, -0.29650023726543373, 0.10263152418119534, 0.11173763966050175, 0.13931259707716614, 0.026570560269986006, 0.081658242149475119, 0.081827919547926536, 0.083098416955329532, 0.11143074354409321, -0.13932942872613946, -0.22917697770142686, -0.064351927083360766, 0.16181167668638935, 0.25167259170475459, 0.042480647223290487, 0.088318184963021157, 0.10703227267716384, 0.097667451839827321, 0.24656917917661206, 0.00077543877160522051, -0.20364545582535332, -0.12891190757060239, 0.074371886138294263, 0.25015791541828036, -0.0027411825679765148, -0.091129709053736851, -0.23136145870314523, -0.30385031086279557, -0.14845722077749013, -0.10313261555912184], 
	        [0.0047305556866473752, -0.025050870591785984, -0.005842007282679279, 0.023076556888947108, -0.0021831092635067884, 0.093205071661306538, 0.16891912625347902, 0.13474245274119315, -0.019108929587973292, -0.10105317234996111, 0.062619436337983753, 0.016839567168991848, 0.011719509323776495, -0.0013487517864658599, 0.038407227731668533, 0.054230563051407069, 0.20955349223966924, 0.051310567307636279, -0.17892491374001546, -0.15156726115951782, -0.10802521892872952, 0.021081696304648248, 0.050526595868324198, 0.037028535648191252, 0.084085596639643281, 0.097194453007745693, 0.11629929727819752, 0.10291870790396596, -0.16562571881514881, -0.29210660437891028, -0.054202915411147468, -0.025850956821510424, 0.13697807226452141, -0.071432726430219529, 0.10357501123134705, -0.058266512397853069, 0.041898607209367007, 0.12303154344508641, -0.1285936576462311, -0.32801177977089907, -0.028641152078696178, 0.13915118347077776, 0.070612445915567146, 0.17863196007696969, 0.036740485328499439, 0.082604223960309545, 0.0015218003492134188, 0.093695825356748572, -0.11859178530895662, -0.24264276329284795, -0.17081519888982888, 0.31937266012049381, 0.10806272202525118, -0.025075843766076897, 0.28906166338986189, 0.16912014921604904, -0.005992530361836397, 0.11216887671301161, -0.1176651180296165, -0.05510479012461407, -0.35074938302019909, 0.075521671212450681, 0.29101950812834954, 0.032924045727232419, 0.073924910009075834, 0.13285512889163054, 0.1103248869067967, 0.017465838707485977, -0.0088770703779607191, -0.12337468108094925, -0.026449945142423825, -0.032574433800492478, -0.17411766159108377, 0.27114933838313676, 0.1301898019063164, -0.072333049559248908, -0.22304228227998185, -0.0049242594509487925, 0.062008119511538555, -0.054842880821889942, -0.077836691900670815, 0.062096463032945602, 0.21462918302865225, -0.09288225705487943, -0.28272760465120711, -0.21340003804680172, -0.17286126694845591, -0.23320368259912649, 0.10997606955733633, -0.0075161519634147494, -0.11006988886634309, -0.0034270246972780347, 0.078591067637549195, 0.1034985859689351, 0.25431078837659582, -0.15926510728994611, -0.27033600479296438, -0.10635029202050295, 0.048934737872389451, -0.021263028799828415, -0.12238693572764943, 0.0070054754811662637, -0.04236502584618259, 0.067623405016993571, -0.048466809027905976, 0.15102700530288016, 0.2213293088726995, 0.039738160929680112, -0.084479657158357022, 0.051462208774941877, -7.7551610484782874e-07, -0.0097437119571726627, -0.011728655305820936, 0.091254840741111343, 0.030319653452282984, -0.0098683560365388154, -0.004386704329111514, -0.063744543491559419, 0.18971937116088505, 0.08390672246062883, 0.081622381542222025], 
	        [0.35396637364646399, 0.22349346524339189, 0.057983505942766994, -0.17547583945845743, -0.28193274673617186, -0.03504651024167714, -0.061419133419918656, 0.073064245338727629, 0.061645400882380796, 0.077309357575596288, 0.17389344512954749, 0.092584703746148855, -0.19128325987736688, -0.21873404610448355, -0.15487049984698836, 0.14901919885041942, 0.20523341842652873, 0.089397794393503149, 0.029360736601431098, 0.18968274233971363, 0.069481373869200808, 0.22547823381719437, 0.093546279977833852, -0.13281477240705325, -0.17716124650576809, -0.13345922159593621, 0.26005342174676893, 0.18501277795048918, 0.053589401248721524, -0.047950155872760955, -0.068453658862863989, 0.090671100822677791, 0.11835517359698741, 0.067373868734555004, -0.079589464966329709, 0.00040370973759143447, -0.18012258798893063, 0.090180248658778828, 0.17515551139257118, 0.066704136479836085, -0.32348954157841836, -0.43601738248961186, -0.1534376785143956, 0.078031085272144002, 0.0026002087661166073, -0.0068308168925726304, 0.25009089531454276, 0.086593094914715368, -0.29449998435488312, -0.28057849042944571, -0.21672085891086823, 0.0075953856677573595, -0.057357345275004787, 0.050785649925778303, -0.13227728339293254, 0.063816280146555493, -0.024929518821545885, 0.10319690016698474, 0.27361857287431979, 0.10838211070562667, -0.10088643508412568, -0.36636108447635718, -0.09977069874425773, 0.16157118049598923, 0.055579136554848696, -0.12792118168652652, -0.097782153150597462, 0.038950029262396463, -0.011346882847028943, -0.0057840540928373249, 0.16160380601420921, 0.2273189551175043, 0.17202324199924374, 0.11473390762833699, -0.025009740014433152, -0.012532965249099831, -0.1828653485672124, 0.0058619984820548476, 0.087637062619453948, -0.037284740577833916, -0.02890657791152753, -0.012640604713656682, 0.029752428424497962, 0.023715793388017523, 0.018978087051175017, -0.06887159345950368, 0.062344085837286789, -0.029720895993875521, -0.027411765498387287, 0.09285676183975064, -0.017030576469534799, -0.04056883608692545, 0.028206942400903268, -0.066991014330880186, 0.018045780660311594, 0.027421414987953724, 0.026028854880743246, -0.012256884841293818, 0.071946006217973257, 0.13443066125142392, -0.055826414183730286, 0.029494113298897784, 0.067669224917485588, -0.096083771061904272, 0.029156671668710249, -0.0005704450156028551, -0.1012677530478366, -0.024999495171495589, 0.11149857559031927, 0.068080180726917794, -0.0045362338010440234, -0.029235465914513481, -0.10839343595243112, -0.030880965310150249, -0.021535888254581387, 0.03491673509206554, -0.055572778438482448, 0.14692935465907733, 0.057092970001380278, 0.070053770867175985, 0.092829523250909013], 
	        [0.090301552796241635, -0.032233505100053642, 0.086011434142149595, 0.057656041238979189, 0.085001738116853548, -0.018556863703405688, 0.10987613215108859, 0.15413524848686627, 0.039385960963009475, 0.047346588747911561, 0.13260893050724268, 0.17209307394684362, 0.087976535623989646, 0.10797764580249691, 0.063004634660501796, -0.025038437509689246, 0.0015666115477200454, 0.04229801081355139, -0.010856979351061558, 0.038565031477648642, 0.091150434541133613, 0.070429356807998139, -0.33965440443849049, -0.2162661542877142, -0.079793049304100055, 0.052481904095551563, 0.1173724758043013, 0.1235642779570921, 0.14985928358577055, 0.15132449797129932, -0.02085384010086927, -0.27884211234458556, -0.36994374970749644, -0.23348038589121675, -0.35031284933769036, -0.21235792854120503, -0.009620330055204282, 0.168787422376413, 0.10884138052914208, 0.19509683780071668, -0.022160352730551752, -0.13795256421389535, -0.38229992177549788, -0.15708260361782242, 0.24650430788233268, 0.21040788017836443, 0.0038881876095126638, -0.15092402578388575, -0.14972725998264072, -0.27657824988539942, -0.13642930996703762, -0.20644056003736766, -0.10322436864055039, 0.20311966005105042, 0.24971877621575894, 0.098784307030971588, 0.050021919690342045, 0.11216084960540927, 0.0082124981118818358, -0.15895814488393667, -0.24966006782360367, -0.22420253854921096, -0.081867096459771707, 0.16097051245293995, 0.13084583517748466, 0.089777023623677607, 0.0095536365062260098, -0.045308319112909445, -0.023384874480698578, 0.057270281510571203, 0.11323262469471058, 0.14403681369736615, 0.076514156970479155, 0.16610902479691686, 0.0012913967538901033, -0.061224715322185846, 0.023338315929245221, 0.046302661766759359, 0.046502337732860347, 0.053080092678231772, -0.022080323199307, -0.016463338605887348, -0.024589895117440461, 0.036155104538384816, 0.016852672260662831, 0.03835086922298872, -0.031623293130520203, -0.015008982063713011, -0.0025600166682885062, -0.044171433583490446, 0.020136310828580251, 0.03892295204420082, 0.023164046669806176, 0.018929516041055958, 0.016294884187040823, -0.026449976012229093, -0.031755575007436365, 0.037952166059081735, 0.047830269361228368, 0.039080927021283712, 0.01265262678231073, 0.019181657421850795, 0.052408264758088366, 0.067771582431651697, 0.071083943252673878, -0.036646443840120682, 0.13604484537303868, 0.010094694913875435, 0.020674151088393357, 0.050958350828004075, -0.017289306861633491, -0.021563726054119672, -0.011484727923504814, -0.076476788674643414, 0.0025912469716748779, -0.035059742648288747, 0.022443138066393878, -0.022650773632337605, -0.01342746115044742, -0.084684063476957949, -0.027860149727744976], 
	        [0.22047100243692846, 0.13488498444135597, -0.0045313544299433878, -0.027832268966114612, 0.0031927903565839161, -0.11096409714434197, -0.14950903865889092, -0.26496526299411616, -0.004669726241513586, 0.18622994506205637, 0.43026644909049377, 0.083650446683214003, 0.057112586332003418, 0.14220244940637913, 0.1016853991938502, 0.097731276097744971, 0.2161248251313766, 0.15446657647109191, -0.13859854879935934, -0.29659395784427101, -0.17497364047276279, 0.19817698639992809, 0.16783396706831674, 0.035357281142304853, -0.028902513964357626, -0.021290874734355772, 0.087221013119957516, 0.16958557489322851, 0.29274282835495519, -0.061146597980816189, -0.15119828846582967, -0.14884448122495453, -0.039189658439811349, 0.04540786676769229, -0.078471457860983126, -0.27300141965542785, -0.38645698179771798, -0.059759522056491488, 0.17695994497522133, 0.15889943771092974, -0.090045267182307334, -0.0058036165937682405, -0.029934384123982583, 0.053751431227512886, 0.037133238140849054, 0.040634697159956309, -0.048019970488356739, -0.21069772609168491, -0.14410169096947742, -0.1866709303028477, -0.28265061246537715, -0.00363691950510249, 0.22240739851855151, 0.039353302240806409, -0.0086785807805936782, -0.15037741713755109, -0.012859139058527952, 0.1563515063208134, 0.042299197355116808, -0.29267625263739372, -0.40523406706284226, 0.096518104499962884, 0.2315533468508727, 0.135427422332347, 0.01229163523628965, -0.052368935922538475, -0.13532074699031243, -0.033103483521052836, 0.073327802260493347, 0.044657022603828728, 0.086151403532568324, 0.27385346109454989, 0.16267484580953551, 0.061525738630854601, -0.019745008995468723, 0.10503228658291718, -0.019420795585633283, -0.10476767983876313, -0.0051748307516162606, -0.06961208659767662, 0.013174971860819291, 0.080847233272621694, 0.064601373562742065, -0.021748261542462316, -0.0094288809818305584, -0.016281819632491139, -0.036344465904989187, 0.030459415820729141, 0.056433611785583565, 0.11018103278275186, -0.043666018041548925, -0.0042555610080999562, -0.073124175104948314, 0.029156650518305273, -0.045782313305331397, -0.018177965266959403, -0.026033702937208858, 0.062742395087324265, 0.057057268610088474, 0.11269084904432485, -0.014280509829636322, 0.066092093382691647, -0.026887244247685523, 0.015276292205476869, 0.0076592093566998989, -0.048902893444263441, -0.10791896457597597, 0.093210147136255278, 0.028852996778161395, 0.032763059790276036, -0.01149082145704293, 0.17616247675226981, 0.10570157158224326, 0.021852869595400226, -0.0058603280864050755, 0.0052495755756189894, 0.020608001100407239, 0.026462048552561179, -0.082618285821472695, -0.079352185250698343, -0.012264971540938308], 
	        [0.024463212331441789, -0.027351907989107187, -0.0232645712975229, 0.11579335581687163, 0.12541294100753281, 0.071655620396774033, 0.059075996322128593, -0.021125383858022619, -0.052190274486374033, -0.0033401470291263557, -0.0084537171130643907, 0.080912403859005846, -0.057403073303803696, -0.1672123397226157, -0.15800496262021979, 0.063753554033199628, 0.195605998224537, 0.071413940170310636, 0.11891901474904588, 0.037161100558367188, 0.077086909312383337, 0.03586257381477892, 0.13139726047159417, -0.11150130163799671, -0.040614316851042415, -0.26027911447712615, -0.1892555532237831, 0.066082525575113987, 0.13273683807010106, 0.034848598443093043, 0.019787968851060656, 0.014094611768949439, 0.062232334317776306, 0.14344093791872772, 0.042856056841363191, 0.10733309533450026, 0.0098223854071513642, -0.23833993172951007, -0.21248877298655605, 0.084273584887845615, 0.0088423427141846866, 0.032948207740492258, 0.071733972455376521, 0.0063216999920338857, 0.19400277202336147, 0.014862104507331025, 0.10869294352091964, 0.19642768165098223, 0.010298200186124436, -0.29226294005774311, -0.080019152716796188, -0.013688342983296166, 0.11310866378660053, 0.012927749370945735, 0.15630089388412413, 0.25797164469348988, 0.0068688176426959513, 0.15135988266283087, 0.20516522088286016, 0.22377486701123539, -0.37618706807030639, -0.13386204003429708, -0.020440964154418019, -0.013775408344473918, 0.040573335802585292, 0.055189437367301808, -0.12708652754184502, -0.058209551446079658, -0.0084420051400804774, 0.17522715535241881, 0.033370120570514139, -0.18112622842082776, 0.034219233108481489, -0.11090094662237482, -0.14629941730977009, -0.0069698882479145852, 0.094796259830696034, -0.23704721824065272, -0.15881064516551835, -0.22841097862649351, -0.054433255322752165, -0.1747399426720595, 0.067643525175629673, 0.085915102193942036, 0.063463884214538815, -0.020900619067225519, -0.038395072191063258, 0.071985712612591041, -0.052570940540983442, -0.09266739122762524, -0.13826762537196235, -0.2490025436972389, 0.047882934688813134, 0.31223581965614494, 0.088266033197671831, -0.062809904286240392, 0.034915131736476576, -0.069708063347414362, -0.0018865257473194841, 0.098095420033629588, -0.05581304445284347, -0.060679329007625814, 0.056061870616646428, 0.17983405258220592, 0.074313751222269048, -0.027044632224345715, -0.00044358577837397273, -0.067457849836666001, -0.045453145630404389, 0.042968907664273942, 0.079381122903214502, 0.058880837077551956, 0.16904284405336217, 0.010963007005239452, 0.042321454350631033, -0.071452129585915999, 0.043645640277912456, 0.077058380034888352, 0.080223556633121973, -0.017561401109477071, -0.044481960782109489], 
	        [0.084549471065337153, 0.014073183835550993, -0.1230740160197884, -0.061069283663190171, 0.030869726497065195, -0.093121154654422861, -0.025168085495502299, 0.015403998680830158, -0.056965654755122053, -0.1083328369385506, -0.16715071572866108, 0.12222148379971674, 0.013801001029832352, -0.10225459810121829, 0.0023687253436320416, 0.087394156533916814, 0.049218002428967747, 0.029333823960360647, -0.00088026105741263738, 0.11339493779706229, 0.079529564235923347, 0.064893491794769623, 0.076669307484134988, -0.063082264841880814, 0.037023338894633273, -0.059661049037454804, 0.016600380137564735, 0.091314257319891151, -0.011485508114042087, -0.099932453619522549, 0.065159532762354602, -0.037572072667034676, 0.014463355503503431, 0.067621978582367848, 0.002545821510838972, 0.015802700036307044, -0.10993602991728399, -0.069419149357140775, 0.021295475983666365, 0.060596105301526815, 0.026423669980028666, 0.0099005578969671576, 0.065389743283916738, 0.043327597311754604, 0.0095510727918731442, -0.076474755187026844, -0.034130568923233656, -0.075098926490430609, -0.049786970498281125, -0.0042179442640507409, 0.20027598699372212, -0.001573509922832908, 0.11546201651339859, -0.0078019181260196996, 0.047540267194441585, 0.0074073899524036285, -0.0035661452397871829, 0.050505679244823312, 0.075847133121496879, -0.14425580282111874, -0.24270846769727125, -0.046072578225007529, 0.24352730974674286, 0.10854500954947886, 0.021318739646681309, 0.18208436906265801, 0.070465106497684504, 0.030956011752212256, 0.021330978755012248, 0.016480979771810872, 0.0086198233570560084, -0.2974229047198671, -0.41813209224239584, -0.16138204950131452, 0.14572029672416026, 0.1694280555459074, 0.15422865108745415, 0.11272693480731671, 0.046495243397517025, -0.023984750652771926, 0.12619529270753593, 0.029740806671949657, -0.012887870344092549, -0.11865448348338473, -0.25933005916694418, -0.10806327708697712, 0.041596362223892985, 0.18022097944719229, 0.10169601556475943, 0.018289098449946008, 0.13183884426091172, -0.0044659810184938323, 0.052209042897218866, 0.17237101496311741, 0.14892400045574139, -0.11529855402495276, -0.29240160552568695, -0.13273718724417694, 0.14348887171904712, 0.12546368827384355, 0.11969887802419291, 0.0966060351971295, 0.083929200710457522, 0.24096145794638008, 0.18159138797074309, 0.21525720611281124, 0.094817137460618234, -0.17303248008130043, -0.16750824599204639, 0.053188636818327979, -0.014842848833645155, -0.13262816340908251, -0.22760143827483528, -0.2847413352046097, -0.26749569041165883, -0.11356293770181579, 0.12871811981161485, 0.20940394327208089, 0.038067867730537372, -0.18388869167744798, -0.098721772725600787], 
	        [-0.2933214566389058, -0.076673570165451121, -0.030749933623699748, 0.12027682321697916, 0.12710910454233743, 0.051896661997998111, 0.13913969924673966, 0.11540205050551869, -0.06812516368464866, -0.0090238207290792988, -0.2910170972813963, -0.061268943436541726, -0.054506350086854553, 0.051033716593179984, 0.012541368369093815, -0.0064693249273340206, 0.017938091969742803, -0.054229542502671674, 0.011335519373694994, -0.025653575674649303, 0.048300304626844079, -0.11406149945577017, -0.024236484184631396, 0.097939513655933591, -0.043137424355738627, -0.070786255514511884, -0.068496593636333397, 0.096857543753862019, -0.061432181096106472, -0.038063832392768171, 0.057071174742847973, -0.035894598788348775, 0.015329272078617107, 0.056504250005295659, -0.01033577367928705, 0.027053972547184557, -0.034952760442069394, -0.012868480551019405, 0.076342833435914359, 0.047322298319982879, -0.037462598161052602, -0.0093979451424250349, -0.014027283741116559, 0.064562173772655232, 0.053721717716616442, -0.067590362010537211, 0.013910951636928501, -0.016445194379612716, -0.019461686721338484, 0.010439817092615947, 0.09941813341186459, -0.092003058246228286, -0.018110229860505461, -0.069116492139218416, 0.090085270093186898, 0.054159665897273314, -0.0018642885725487952, 0.0040597588270554694, -0.085946011876088801, 0.1086179140161275, 0.027099949435567414, 0.09914159471687442, 0.00066682087757463648, -0.057660689819417535, 0.024056864968152455, 0.068221400186677966, 0.03672191197686131, -0.0013717096205560289, -0.028205736414335034, -0.045759999314944469, 0.053361593077059094, 0.052631114994282018, 0.0098103929417969124, -0.012203636403062709, -0.16438519522356373, -0.021001549026839584, 0.10556807205560682, 0.13827298919396377, -0.0070213145166122017, -0.16276133871590864, -0.18906392185671284, 0.059904133889352951, 0.10225970117457966, 0.074039764882703321, 0.0042851859251910318, -0.1845936659626026, -0.069683794916369668, 0.14111364483842084, 0.12749376377877644, -0.10699417534257408, -0.058972794911818865, -0.027184342145305414, 0.092294147272745874, 0.042730772598910421, 0.029013756855529385, 0.091552924634042257, -0.075056709683407635, -0.13842728606415003, 0.004980535912558804, 0.0097376951913064926, -0.17762638306662676, -0.053055611222672334, 0.0051212513850458323, -0.031160068246315981, 0.018285642027540898, -0.062989410545790991, 0.0087672622600651062, 0.045406407408064592, -0.15525094289000227, -0.1042418032870643, -0.33859461490814169, 0.00092931377130833423, 0.071523799097884699, 0.24813145448099272, 0.17764819914849853, 0.054741690878753094, 0.12448607192690106, 0.21578173215435317, 0.11743015273985927, 0.11810059765594877, -0.27756282596086734], 
	        [0.23860743861101838, 0.037220481391505231, 0.031909831457287416, -0.14966246683358922, -0.098549852233202243, -0.095091345307753761, -0.030802604768789821, -0.04066312098825503, 0.017506583940867015, 0.028513850752452302, 0.083059648764879507, 0.0012190679580447311, -0.033228792087639888, -0.063142105345760022, 0.035544952402444221, -0.02360819898883483, 0.022431271094160515, -0.018827603717675528, 0.052735695833279514, 0.04158050289699862, 0.031033870999142746, -0.020524724375181047, -0.074377554313755104, -0.058851568777864349, -0.018416900291008273, -0.020185360544406894, 0.056555515730563666, -0.0026618188225642214, 0.052187819479918976, 0.12531509017121725, 0.019467695962588835, 0.096993280631948425, 0.052629314471473787, -0.095668337004786982, -0.10779966462682439, 0.047013332046528231, 0.1288079363853076, 0.1184985604004099, 0.046938525319026703, 0.011551507295904942, -0.10251614984375894, 0.034819153945653339, 0.089993485601405826, 0.11883560873126586, -0.026071450999984924, -0.10858930623330341, -0.02899296545303913, 0.12481231448842042, 0.240071552691944, 0.40869246369383216, 0.26105260304455458, 0.050071705679084866, -0.0099467245426242412, -0.032287346107244264, -0.037881104375152352, -0.042540536708484497, 0.18047392726709921, 0.1072902350620442, 0.056244968162698569, -0.45229392780009436, -0.8393105202937271, -0.32646697573387123, 0.14835849608015655, 0.1562873589444303, 0.14740464227965588, 0.048455507232141037, 0.083156966084078382, 0.096330955575823676, -0.042531142223404261, 0.024991947578161741, -0.13244791761311936, -0.16920198721111196, -0.46440542591162931, -0.34744594651326566, -0.047380042881461047, 0.014762318653552681, 0.056736228592421528, 0.03669477148484114, 0.013278997131524375, -0.054247783597366338, -0.01483859686236641, 0.16411279929712191, 0.28499310141872169, 0.33270153991512441, 0.077932645611871798, -0.21057989235427169, -0.1802826760596537, -0.28799247125492472, 0.049020040266471457, -0.037057503544318783, 0.0052054814540925462, -0.01712557992945455, -0.0034699488895449798, 0.11284391028265023, 0.050041748407580855, 0.039230018094625674, 0.083778617870413213, 0.030109655245779202, -0.10733376231898197, 0.052780693840456264, 0.030825522124256793, 0.04821793526249081, -1.217969571825489e-05, 0.037877834340168115, -0.1130077331768389, 0.025972330279050104, -0.040361720693582716, 0.060662551316001928, -0.0029175588675382641, 0.019233415533092907, -0.023247268944077137, -0.024268033659365251, -0.048050957148744342, -0.039100512532260122, 0.055724286161657241, 0.01959390543904424, 0.0019309926921863563, 0.052874955099626461, 0.11053404299243735, 0.059716361896183456, 0.065829387455870025], 
	        [0.067033514999894656, 0.026572971026187026, 0.061902556598039754, -0.05061268032779824, -0.071246860564967429, -0.061282119254154305, -0.13243988526229811, -0.07738291307031675, -0.032986299158761272, 0.050994057269436274, 0.23205864835108797, -0.017426477727532821, 0.016764191996464284, -0.0045262873127560194, 0.072679551937369191, 0.072143276669484363, -0.025652321290280722, 0.011718912127102923, 0.015719207964445966, -0.14235466059508073, -0.012765609360204759, -0.055815189675494613, 0.062228430692006592, 0.11098589289358554, 0.1277675820548782, 0.039053987447355679, -0.010542995704417739, 0.052521557010413458, 0.04550010649059387, 0.0047551996119335541, 0.040037242307058615, -0.041869690382639844, -0.077743643710486338, 0.036622756449570762, 0.026947327196116463, 0.00487126551883902, 0.011449791638995233, -0.012157643728774703, 0.024207033059366057, 0.083283458792015805, 0.079838002453690701, 0.073616421497002385, -0.072412475297118195, -0.039880892956012777, 0.090274964350828088, -0.0059397628704566316, -0.079683192948853412, -0.055948766561327426, 0.16964650730513986, 0.46194226585948911, 0.274371381660658, 0.17637187708430974, 0.0055754869681963956, -0.040969322056490821, -0.048391146086037493, 0.025694944612614096, 0.099982967744116455, 0.12605224667151532, 0.27677019407409076, -0.090382459188317776, -0.72366729365820226, -0.66542016392832304, -0.093850604192478121, 0.12499856033014405, 0.090997511837360642, 0.018067463940727141, 0.023895781307986239, 0.11109874613217101, 0.033726182042769393, -0.22604680738211497, -0.55798448073756512, -0.23540780599042138, -0.094804503513252869, -0.091208459114291623, 0.007777282093728341, 0.13248330185889684, 0.039860046929418358, -0.25215810577191916, -0.20250122934799764, -0.17881248119439586, -0.11431317224159114, 0.29676856770910492, 0.227171515318765, 0.27410464679565072, 0.049648773580817623, -0.056866369619851614, -0.064784777105461808, 0.037313367193882563, -0.11706718911764522, -0.052501869400952868, 0.047052857758273475, 0.024035553726984002, 0.13017390712450239, 0.056206121471782292, -0.040237669313721178, 0.048845435975711976, -0.010397341013248448, 0.0059061057848477233, 0.038085874448897966, -0.010126504089425892, -0.011702353668809645, -0.036778984080859556, 0.010230544538505373, 0.010568912857967669, -0.005032312616026352, 0.0022982360713862809, 0.017050551716730533, 0.016180147956727883, 0.046102997696378212, 0.010501996704126618, 0.092567315720886861, 0.079400948339318683, 0.10570431930113847, 0.10682942997287241, 0.057218561045001268, -0.049670976577548959, 0.042693039359605639, -0.038684015991685583, -0.039503682631983172, -0.020740434284436046, 0.014243631289787631], 
	        [0.062853191788539597, 0.070714896930592464, 0.0043518201422265285, -0.02666655406813033, 0.044525492329128127, 0.0088609265224199457, -0.059431945920266613, 0.12208756283717534, 0.10823813013338997, -0.025642885151491657, 0.055452978682526785, -0.030909671398170552, 0.0048754534319613851, -0.1108275207792192, -0.028823536945349906, -0.0050464099159451686, -0.0020801916092238332, 0.06515373811494736, 0.0042318087539451182, -0.016502458630955161, 0.039368681711714523, 0.14469597694100828, 0.036147418183642199, -0.025105477318655298, -0.0029752642733928553, -0.027230567529541769, -0.026500280856010971, 0.052083733475320179, 0.15939093133651491, 0.029110857419989741, 0.0058879547498108253, 0.070683657600627628, -0.10501891349904791, -0.012994883599022608, -0.027730543376280184, -0.038084041899524274, -0.028850174915976398, 0.088899107687582232, 0.12716053788475778, 0.09387808681070002, 0.12445983906256813, -0.06046361458863396, -0.12925780819854998, 0.058858708256970163, 0.16394889767626275, 0.066258764981399543, 0.0403244530383884, -0.035531467041199284, 0.074782760422794525, 0.027441833600079138, -0.034548445862494469, -0.15237542888927019, -0.13604857549753155, 0.065146735415548912, -0.0074264748840444511, 0.0046040279752218305, 0.078351950102189191, 0.12973383797047089, 0.095681579137167697, 0.10648034656296729, -0.471163369507132, -0.76254054291835849, -0.3582093555686478, -0.013245699569145133, -0.13302631896461331, -0.10815491503392521, 0.012182904199392754, 0.014156573471716255, -0.026231788982935246, -0.040059881323019783, 0.013820645260828969, 0.24427073416124961, 0.30739954052096252, 0.050527595012709481, -0.02309562329583871, 0.03293769077258174, 0.08587868851219474, 0.041107882586519373, -0.00067550084020043255, 0.038300058206411747, -0.054725024091938995, -0.03259687179316071, 0.078231031652147634, 0.16873039089887609, 0.085156469724609371, -0.075477381020669948, 0.075845844149791966, -0.065615868802515548, 0.026372053076710963, -0.012261443544603602, 0.018816373445303562, -0.046021026430705159, 0.063676911857429019, 0.009164298437269125, 0.021381107032976132, 0.010298974711400581, 0.025836499120846023, -0.0032034037426122638, 0.093859948209638583, -0.044506983815036136, -0.0094275346624950306, 0.014356944789664046, 0.00037736419603631721, -0.047078136939779545, -0.00096697063118341472, -0.010146754282597689, 0.0099516872802271478, -0.00041655889524723488, -0.035460419946042106, 0.013200958086152861, -0.034597677731442178, -0.040735749134576782, 0.051473603477795754, -0.03068228734251964, 0.033804134588586013, 0.04377149062165768, 0.089866716879267672, 0.0076301954407810429, 0.042985878682231804, 0.0073348284023678628, 0.08949838726656334], 
	        [0.15588564481934239, 0.015629940083505309, 0.07753118222162185, 0.035198943491464685, 0.098615000408114981, 0.069220367786417589, -0.051015845370300447, 0.013531733492920819, -0.16689427943715818, -0.077939155723077788, 0.021709195750235555, 0.051427622717783311, -0.064348894516704488, -0.015227872851937468, 0.012758529221202047, -0.012491873951225668, -0.052544744154776057, -0.069039899751267175, 0.050431254230985517, 0.036663595165987328, 0.10484513386583763, 0.086415560548891199, 0.050031783118376666, 0.056993606178994877, -0.0025489629815944048, -0.00079079854412655859, 0.001499228924733878, -0.18328932679013349, -0.0010930528968453174, -0.051995220652956559, 0.007617813274078844, 0.050139617755528193, 0.083660718861030547, -0.028368100712067607, -0.057670540943290494, -0.024746519800128597, -0.17552062616716269, -0.053853554159497635, -0.049492415048262267, 0.028095804788870901, 0.16656739764514511, 0.17516444743795742, 0.1107778641386053, 0.23647066109018683, -0.019600601715928354, 0.0020068984825111352, -0.10475575204030461, -0.053073335318213274, 0.078984284067687066, 0.28336794782700825, 0.35165561151087343, 0.20795642216210236, -0.0051422812718408401, -0.066193759629023963, -0.049047262144416459, -0.035658104876826635, -0.053201855164002887, 0.076802578461626705, 0.29382065156517917, 0.27041543845259264, 0.32595175559668715, -0.14797046003969899, -0.18679187035905376, -0.049878575994829755, -0.099670598900649929, -0.040295774069118412, 0.022961845644245041, 0.11787385733947886, -0.072577437649429505, 0.15220959346283963, -0.11057067643262666, -0.27508873178974369, -0.22643642891650884, -0.21711971918615147, -0.065673550190076299, -0.052040181244765185, -0.091959698571150356, 0.052341425230670466, -0.029014278335724536, -0.026486649395131429, -0.099176081239430308, -0.11757437729038858, -0.13254020998829666, -0.07632698439949917, 0.079955224567499511, -0.17744204932338672, 0.080375905404569209, -0.073856215327577773, 0.08773958673979658, -0.13914743753820652, 0.009984405808856886, -0.058680483231997344, -0.057028749498486214, -0.079793724629746182, 0.0015768478264207159, -0.0041526349144124231, 0.03459730460531342, 0.0086645871269026842, 0.057269417282438451, -0.026265220900470704, 0.048093551927189358, 0.021793273125612952, -0.11755126367641769, 0.00049936995779083226, -0.09136988608727073, 0.17327200177522672, 0.031572859497950911, 0.022296920170734737, 0.0028040719529331959, 0.1205545883355781, 0.22973360335482984, 0.053206330310550984, -0.014610065818932663, 0.1166412205908703, 0.082758175315321217, -0.089171794728513082, 0.061309463622492497, -0.041123681778030372, 0.0013240930679478125, -0.022404870056693074, 0.066513648330478348], 
	        [0.10641476126921573, 0.094791860020083718, -0.031528574545001298, -0.068662742567365098, -0.045583264706049009, -0.044170709745188025, -0.062373368500344591, -0.040882035203785007, 0.036680666666222828, -0.031890639174042112, -0.088635427534217007, 0.072486055817956696, 0.001791308761835142, 0.071618106508292478, -0.1084084708991033, 0.055537208628036988, 0.02079069078849588, 0.052668231377405089, -0.011257567794659987, -0.084503145472767896, -0.055354602162358317, 0.069470736791248017, -0.028454654127522738, -0.092204125208372456, -0.059138644586120663, -0.0088604191876885396, 0.013755932301681914, 0.013007606849729902, 0.11916500018693715, -0.0054766771048394558, -0.0046385496941247772, 0.10607177324908609, 0.13190402522499708, 0.033044593081882234, -0.0059853447957998185, -0.063203008712939046, 0.042930422332914636, -0.077520137322837177, 0.10193484761260346, -0.12768024901465561, -0.091566872598170757, -0.057976474892979336, -0.13595312824385677, -0.048451573720558666, 0.011191570795142991, -0.0068851380519260597, -0.096621451088916122, 0.081772431435869347, -0.049007285728546249, 0.1976245378232617, 0.18536337530011557, 0.054459053626504439, -0.08541554314837492, -0.1103049477795886, 0.26784310566965119, -0.04245325920849799, 0.07976003455399179, 0.15028246342565876, 0.27326896910753634, 0.2358435331414003, 0.029238235516672061, 0.14907460060498415, 0.31048708671669695, 0.40128067591951677, 0.38540963021580366, 0.27326818523111684, 0.15636736514996508, 0.14854725998180202, 0.13416742860268516, -0.1553995297347727, -0.21625457306714183, -0.28189178550902477, -0.25441318585728456, -0.24392409898023509, -0.045056214003550595, -0.13583884555523959, -0.36046526211729601, 0.054109881966403969, -0.27377967101430223, -0.087568631307608627, -0.027320638024760924, -0.03926220394642365, 0.17562805271419396, 0.0038011471806441294, -0.11815538049076468, -0.14961832586766177, -0.071034737335284814, -0.11256171108967788, -0.067347567015697357, 0.043317495301606501, -0.1030173747997237, -0.1512534418799959, -0.045348211292946861, -0.2275535515430907, 0.050199653444878589, -0.029910369292175915, -0.1088343982348304, -0.0018044946393091232, -0.14575679126759761, 0.009524471365601167, 0.017124703501667587, -0.0035126745298030559, -0.058372842364167565, 0.089840061068809596, -0.043367454110254694, 0.096738746749035681, 0.03700212707151404, 0.086995071846397459, 0.0198918856448589, 0.021144677203969078, -0.093457039994106067, 0.027112758749156501, -0.10194181462653785, 0.083879262506938779, 0.075075983857442727, 0.050127083431861647, 0.088653279727832768, 0.020525237657478601, 0.086115788747519101, -0.0054914080731565951, 0.14180153649129834], 
	        [-0.023176335194873693, -0.024544621317998089, -0.032357875793335142, 0.061548317450878437, -0.028031573107483762, -0.11117017121562775, -0.028557173365205218, 0.034625006110213255, -0.076972642567779373, -0.011745965892935112, -0.0099597650513476577, -0.054283551601990401, 0.04796909671149692, -0.058234554069283725, 0.03220334560199091, 0.03182887188613838, -0.0085908775377060292, -0.018539673712725524, 0.059493326671222202, 0.032667167660611757, 0.011822214610879928, 0.011903166151583794, -0.091302949805953146, 0.010420910286473448, 0.047573929466955864, -0.010085595935941855, -0.082131001411481733, -0.035237661500281195, -0.0095365997252577495, -0.002108262261587307, -0.011204831036011803, -0.10622317570891325, 0.0088673069092282952, 0.080682046586781658, -0.09053303518527786, 0.0092003318540036794, 0.047579680643652283, -0.00347364060163316, -0.2609501387739116, -0.1992357096012872, 0.12707903816980357, 0.076817114916749113, 0.0089467730959269243, -0.017430379757375963, 0.27183434461804845, 0.29540869945884163, 0.24001157736704778, 0.32834666729756479, 0.30453119348124091, 0.15738308915167651, 0.27144447211271683, 0.27186726673366013, 0.31737875140339933, 0.17968138137001657, 0.34963615466399944, 0.17947799656684207, -0.19852203981785516, -0.23131890333905614, -0.30348558107287027, -0.018142171891952316, 0.32801789455109143, 0.10087717573413153, -0.27373136424469352, -0.34405448357850948, -0.10799042948918298, -0.028605058848439946, -0.19185111341784114, -0.027745548740637616, -0.010639473223188992, -0.06235838944179839, -0.22873300656916182, -0.17306684979686754, -0.10579424926972862, -0.12594712705414679, 0.0052133744642944568, -0.033020737140507975, -0.071928733715963894, -0.084042374013380106, 0.03728925720093966, -0.14901085254024224, -0.051877974664164613, -0.062449829977762557, -0.14709231061360803, 0.018448830420891835, 0.0039521338112389198, -0.079257066628676154, -0.068341989568304076, -0.12331516121995928, -0.099563492941295281, -0.12282998155312592, -0.0063813760831064326, 0.15237343336881881, 0.056225478570189891, -0.0045106920049706734, -0.057588436403930618, 0.098402612054188085, 0.02709244060964458, -0.0051265278718723162, -0.1788182638868932, 0.012716901548097112, 0.014254282884224326, 0.10921274021001333, 0.12698286341450832, -0.04126909131947766, 0.085520492564099979, 0.04384704473182563, 0.024665056914998047, 0.12247197871922337, 0.13439823365742171, 0.056199865709336619, -0.07048736575183942, 0.050114961739481753, -0.0003055425117918717, -0.0023066782999414809, 0.054045599348802625, -0.058889848964733808, 0.056481833161273906, -0.074701257036599966, 0.054306583047584442, -0.0024484691527146898, -0.12795957386439072], 
	        [-0.0087719423838811122, -0.087902685556123586, -0.055052346930590697, -0.053894719312888591, -0.021765025216602493, -0.032496201274909917, -0.053936524545242788, -0.05960180358333237, 0.018682206945497708, -0.024041856926648959, 0.18080120923175, 0.013387152203562694, -0.019460024812665497, 0.08584050842604711, -0.042959888333166781, 0.056139979747190913, -0.0074822617478288514, 0.072637952230176689, -0.0457731161083395, -0.0079074374072526862, -0.039617671594911967, 0.062009468577001868, 0.06967381700346785, -0.0017890764951173505, -0.017922949357011164, -0.017328735082365487, 0.10429286568139526, -0.075336563592980688, -0.019897609787032887, 0.066497132377735496, -0.041929713620319324, -0.017542325191820356, -0.049375050497253652, 0.04705546281032482, -0.11658200494772165, -0.050367703232498756, -0.08774512274558624, 0.10296881777328262, 0.0010435280990956572, -0.11190238889003506, -0.058552489144718556, -0.093601922420016692, -0.058917359043089, 0.124279868888969, 0.20421984908202209, -0.08692730923047455, -0.15846153558915144, -0.044231150294403901, 0.14028149426418587, 0.20301345397769968, 0.20996770156750841, 0.078368373517043163, 0.023616204532563738, 0.046474099815913654, -0.10918733172647779, 0.34227918211166714, 0.40922200549215987, 0.32977893025607696, 0.35276397881502514, 0.17347731354344686, 0.049654055979477453, 0.046852605375659315, 0.18540273672730367, 0.2348705535220503, 0.074066027456603012, 0.090895328013838622, -0.35637081936313159, -0.17890098216840339, 0.067023781694075441, -0.1450909663576207, -0.2414525478367974, -0.31352143109573821, -0.2085394028841733, -0.1694233082437144, -0.05072999227745726, 0.07083911431869358, 0.11262033996513801, -0.05565357077731857, -0.18252807611047162, -0.095111033685357782, -0.20810789102436822, -0.085215792202067098, -0.037808309132582603, 0.20962708773356045, -0.087518828092840728, -0.0083270949222766927, -0.18306482243805655, 0.012319186741073546, -0.16489228124607314, 0.07423361221491917, -0.11013637802070915, 0.00018776862044833642, 0.0033474012470800438, 0.10043781830311685, -0.24009618845722649, -0.055213512452654788, -0.098806399955303242, -0.014981735119631731, -0.1254106702918007, -0.035863038056541618, 0.046213717459946638, -0.11767772671757684, 0.075696958238519407, 0.25102280647850195, -0.1506185088468181, 0.10273881268388778, -0.14457410135153065, -0.0084315930228874431, 0.073821935984905274, 0.034203057734345316, 0.12997695973099549, 0.064946501430307446, 0.1003816513120292, -0.04268279073187238, 0.034385732695719776, 0.1329989256859449, 0.084680513253248088, 0.16750112561515856, -0.14488980909132015, 0.097226090484736558, -0.17221966876845224], 
	        [-0.032220950917092345, 0.0081917299168678126, -0.08028184906386833, -0.081381381904831074, -0.06384203481562005, -0.015615271736948433, 0.10708665173062173, 0.080651308228208707, 0.054345297791378977, 0.027073639464279806, 0.16812503709317206, 0.1341526646829076, 0.038631043495105599, -0.0055507367765743609, 0.042334555898426843, -0.028373758652471104, 0.0039598584650343688, -0.06359711746689202, 0.056587509472392425, -0.027554813118545185, -0.0017875113664636427, 0.0041025698499825153, 0.092718998685582421, 0.0086585130443419065, 0.10683629867740597, -0.074195758215517701, -0.06305739990406109, -0.021523442626893499, 0.0092341320266679933, -0.14610356759412479, 0.014750802208444519, -0.0052164932593612573, 0.0032641614965498306, 0.097806834221344979, 0.12926590150531192, 0.06269754981180288, 0.27475421176426429, 0.092446065608718181, -0.12768877877435683, -0.14805761147879182, -0.019825200460864806, -0.0086314590567921345, 0.01448064785908898, -0.0089873586037065994, 0.10470942538393144, -0.11054476667297426, 0.0075035505378642127, 0.060005840448525999, 0.31710299191646102, 0.32324440176708602, 0.10720495398460449, -0.058101525474285445, -0.031760977729127976, -0.1142935909746058, -0.031550903709047007, 0.0017246932881514604, -0.032140984544803027, -0.01313116025549961, -0.14824372987991144, -0.10766487248252816, 0.10593875445284681, 0.40021227496345418, 0.19725349113949914, 0.083747523144874783, -0.030750695721978777, -0.028330043664018603, -0.099873850179229756, -0.2603924703966779, -0.02597866375704655, -0.074313555789072977, -0.14253780748212694, -0.27783688778439536, -0.10552358523835495, -0.011202718784634674, 0.12855854774382316, -0.0003920736373502591, 0.071696717198538498, -0.06071544811269014, 0.079554834222746146, -0.044449538129453167, -0.036239302802330287, -0.054950113420475968, -0.07587822560403587, -0.13219044743679167, -0.11463986228711373, -0.014321816516995132, 0.054633054493314868, -0.0021865578330653515, 0.047599214666799061, 0.071590563880558955, -0.061806931357610687, -0.098703279639705627, -0.17720783806969967, -0.050444583088944242, -0.088158091500455199, 0.17305912499532888, -0.18012041201202472, -0.13789844469843426, 0.069654839313687877, 0.1066025347744837, 0.042994905989906691, 0.1324687310724105, 0.10691785253509371, 0.063925231237494759, 0.084949424182349784, -0.14824978071410777, -0.17981670747688494, 0.079887216519016369, 0.0099878844963017417, 0.091658809499199995, 0.0039475808537077287, -0.022988366514234783, -0.025003961189405333, 0.022312743486262065, 0.032106124489561169, 0.0060978045024435712, -0.0091097809264211807, 0.13841562948388741, 0.05721814889507093, 0.034249424231449693, 0.14165895482659591], 
	        [0.077403080391101178, 0.0027902789135363509, 0.085848659908945121, 0.081621580183346434, 0.044686861117663595, -0.010720512150544551, 0.000766928295162006, 0.10466386076912294, -0.015221602350874539, 0.00096214663821529711, 0.10250217221999841, 0.10103126553498611, -0.028640249406738497, -0.050144288137646154, 0.088029509421074015, -0.039184290019048773, 0.027942178534501191, -0.10921729182270348, -0.091551121886366701, 0.038578400934963716, -0.047089437070028148, 0.0082248556916629662, -0.016698052118169729, 0.14190580766416327, 0.023164625852484036, 0.072603303858135557, 0.11866577336553505, 0.014093258001003195, 0.0047638608409522332, -0.012686837885249339, -0.036660213196534036, -0.077416767630940422, 0.049268385768219111, -0.044394153830466104, -0.17871803212100118, 0.028784448095554194, -0.0103622383273788, 0.15180646423700633, 0.21859707883104096, 0.11630023909217539, -0.092580368552828127, -0.019700955892187733, -0.045860659847962018, 0.029996643776362769, 0.022719309002418732, 0.025101662257832447, -0.085650564281123734, -0.12410629154164783, -0.18246293106608358, 0.091966008812621805, 0.087081001569446523, 0.10736116620783882, 0.028110496703318152, 0.11507649255715754, 0.038288111619517784, -0.074857538348946706, 0.0003646230535695183, -0.075728095243027413, -0.25811646164981222, -0.60691515717629596, -0.57736366547659346, -0.1230196932349347, 0.10818482658632861, 0.016912673562240535, 0.13529133328209006, 0.090044145360448649, -0.017373878996459924, 0.016143047062772586, 0.0074705525731126043, 0.038153120918174875, 0.13808042440556922, 0.23128272372791026, 0.062212166782940587, -0.00078105935242136354, -0.0088352484968890338, 0.015948358629724879, -0.0005022452937268676, 0.11232364734385331, 0.010961615375259789, -0.063961968540285671, 0.042697690474159465, 0.075697683234001015, 0.18797108390738509, -0.034270718560830339, -0.076010292391831616, 0.040711497962504541, 0.003927652671956227, -0.008113852698322141, -0.015998115624021494, -0.060356186306471743, 0.025951586831793848, 0.042163344429453686, 0.082425729708358278, 0.14260227985381085, -0.042848628451185186, -0.063341469459500324, 0.0092863458678610518, 0.029863814690498799, 0.0060823890399176739, 0.059612446109644765, 0.030082023913450849, -0.027239380162663276, -0.0073658703526070556, -0.015225093891979673, 0.044419085486733505, -0.0053691160288692197, 0.022425434671702167, -0.0082635729409229006, -0.040836893779866157, -0.015422443671092656, 0.061348129149263644, -0.052846129433506105, 0.094365596248035394, 0.014525718078802685, 0.0037072160051032756, 0.044122648659048434, 0.045794925597176121, -0.030930673355086962, 0.017194230501010505, -0.019462858484744144, 0.001243582445288452], 
	        [0.084113665034921459, -0.025621034960445016, -0.023221811619521998, 0.053008052188471377, 0.1722413378552653, 0.012469440442448243, 0.075121540622525046, 0.040763448249123868, 0.098100783614578663, 0.041479003131258046, 0.12635977517681399, 0.070298444019280537, -0.050007246720496723, -0.0054840870702999311, 0.03040544684160737, -0.089754664462184497, -0.21540766402304359, 0.017230102171692269, -0.13556988205821849, 0.095618226286922736, -0.11059773025824354, 0.10124548152459008, -0.076498060646510518, -0.00028541240089785536, -0.026245513796004843, -0.019479552802034616, -0.39778025123942529, -0.062143591902259168, -0.024341092169919532, -0.012826724183031463, -0.014661926972310418, -0.11254901345954736, 0.16096037573300526, -0.11227786126177444, -0.068532532992675615, -0.16356466589407062, -0.19653804062868085, 0.031038393193058594, 0.13193348705643318, -0.083422963041591094, -0.040715685787325567, 0.013809808214387778, 0.039665847545365757, 0.0099887743329398759, -0.047952715523986306, 0.0006100311386056656, 0.10343067208630369, 0.24890751819447962, 0.3578226490040739, -0.20933412648627439, -0.039926382349098469, 0.19419655464006366, 0.032188369668813749, -0.040503633096404479, -0.0032348476784208602, 0.17053386793770461, 0.35047600865548467, 0.24645797779268205, -0.12388716569831495, 0.017230415937178875, -0.20274807116351118, 0.13927324407566935, -0.014868221439288953, -0.11606370921716812, 0.050406898699637798, 0.052284706862743335, 0.2179885999524844, -0.056957003125337274, -0.20647158156376177, -0.045778722576096192, -0.174715212494163, 0.052739805693730518, 0.099133675550291595, 0.094364060620869411, -0.060202372775518737, -0.043715737000694935, 0.056370290784785199, -0.0085890329179779956, -0.096057005222036973, 0.019767425753796281, 0.0089128377885082377, -0.043514983487809494, 0.071434017069269745, 0.03636602312918305, 0.013983885718858599, 0.073847542491404544, 0.064069902818033903, -0.1243079073528052, -0.077473394951124958, -0.0030770402418191234, 0.012411573849515189, -0.077233395464899518, 0.052213298166160438, 0.098480901187919578, -0.044983495910957086, 0.0093175449591838683, -0.014435731895740433, -0.018574666756547009, -0.016642124460499341, -0.20214085319841704, 0.023000105666364901, -0.056257873953405604, -0.01762107897153789, 0.019130131746270068, 0.020007586924534165, 0.03483339161645628, -0.066635058968322142, 0.019122648234895845, 0.10427685298428223, 0.026510785405202311, 0.16286923233388592, 0.02793257220207912, 0.049606524388094764, 0.050049491429857901, 0.1019360210121309, -0.025880325806131227, 0.058534465646414693, -0.061180519358758872, 0.17253450900113493, -0.13459923259367187, -0.090407597313012622], 
	        [-0.027550816137581063, 0.20556735223558539, 0.08213180283129054, -0.042570327563692591, 0.01586831912703765, 0.0093698333764795361, -0.11462856052306328, 0.044711856850138204, -0.15995802392503708, 0.11865990971326171, 0.0673921974401607, -0.13862721846117479, -0.24991581191756615, -0.12741658368348494, -0.048942245808076282, -0.10908521327615617, -0.015851721850914276, 0.030010677013469683, -0.15749365231887502, -0.053420943220933284, -0.025662830013189836, -0.011092925627943839, 0.058388641152087056, 0.088244561781003344, -0.053728117004780987, -0.068366341306591, 0.0026508458051404948, 0.097817872697453651, 0.016895869777799971, 0.029099746903975626, 0.15597074244969705, -0.017162667301283602, -0.047857867586063488, -0.066641357291646677, -0.041049665489416423, -0.029341908735795189, 0.18068461986324288, 0.23841021509849827, 0.10720477806483233, 0.0032504209495289177, -0.16875590654789738, -0.055651624441500805, 0.037864293059399243, 0.14496557145479333, 0.30165038928541399, 0.21780633210507225, 0.2478067430020475, 0.20611438223970449, -0.030505045384812982, -0.22354863754123386, -0.22057742020428542, 0.026160777231004489, -0.014489792871384327, -0.0013992789264812011, -0.032142807111526076, 0.069858404495879517, 0.12952310052385177, 0.062134024665833537, -0.095850197369784784, -0.15005742280797291, -0.048690422387721657, 0.027625676945502317, 0.087751539276551271, 0.059382068636311708, -0.15547685553596879, -0.0089930406367377536, -0.2169595372240255, -0.20894528496184284, -0.17492068880682238, -0.10306183600146183, -0.083259534728607171, 0.10865204818788957, 0.060744670090415315, 0.050196375528596446, 0.059347173941546122, 0.080550163011289838, 0.096041183403468094, -0.1792150255632714, -0.086359515761684963, -0.19861633026471431, -0.085305595365594317, 0.073404453468704292, -0.00060915535289933487, 0.017864996966518068, 0.015229839479410548, -0.028738700704038833, -0.030631095956117516, 0.083546542374686478, -0.015199467885082363, 0.0079196568766907727, 0.10542259168905797, 0.045879590738125489, -0.016176817524772791, -0.064404029773047405, 0.056449523541363983, -0.0011675857621973734, 0.0019961877116474042, 0.067416701497825943, -0.0068872964750457538, 0.034855870056329508, 0.017610685547011118, -0.064974529939064218, 0.072135113039659637, -0.038534030205095104, -0.014020364161441437, 0.00029360239040131242, 0.12282296947714948, -0.084526078839246968, 0.072733520082105957, -0.026199337777164058, 0.2622823203473173, 0.056466937642953463, 0.026818371415154252, 0.093991868595920028, 0.035828326553373244, 0.18170527988919383, -0.015152288577127748, -0.017615532167961634, -0.0031861578874696761, -0.021179342150732736, -0.15213715846860609], 
	        [-0.13774523436409969, 0.038746368626390894, -0.00070857044653628576, 0.049355010027965204, -0.088279225323666277, 0.3384991916323753, -0.064154782872609478, 0.013423151043787954, -0.019629041697081684, -0.074514483376996052, -0.090355781264570376, 0.096941216713528164, -0.11910664582618065, -0.15100751467224666, -0.013947233410068524, -0.28747834932862831, -0.37903665180179325, -0.2028061966058827, -0.1130350051672437, 0.025054091741846772, -0.081018737004221672, 0.092552127718648639, 0.00082246462611298282, 0.24245844724477272, 0.12843614602564724, 0.13562020313059403, 0.08959454097829489, 0.23076896835282149, 0.17282137454049196, 0.15120139028220045, 0.2108003848913195, 0.13274188314172597, -0.11296580760432726, -0.23425804061193015, -0.15388856567280207, 0.047550247591945885, 0.13675765224748537, 0.14970887500641089, -0.014598687955070258, 0.02452413980077512, 0.15008479234563366, 0.021969575372334967, -0.017209314441183898, -0.12566589356298841, 0.057462149793583807, -0.12422822668708502, 0.027717976800794235, 0.076470028456385508, 0.15084174315157894, 0.16363419431275902, 0.10314072255216514, 0.098604445511354985, -0.077889086218999121, -0.1661031133394909, -0.015523729349795651, 0.033968447572520016, -0.0064287733234517919, -0.077784123694540519, -0.13138597183951684, -0.16492537584704581, -0.13707718063627361, -0.24996598417430377, -0.099387315671480653, -0.041816272470969071, 0.063392795262038587, 0.084656792003326736, 0.073596111775181064, 0.0096742751571591568, -0.056184484902255249, -0.09782611167515598, -0.20167456268371736, -0.035743089697776065, -0.053853754214006649, -0.094088602733082519, -0.11120588730571836, -0.037671666252394119, 0.031541190146133206, 0.092725555798098935, -0.02405726855688603, 0.006010846171522255, 0.026069243416314662, 0.052952378460022542, -0.00074538711425108095, -0.039415421335204141, 0.00012581754959352376, -0.074805820908263931, 0.010523867284072515, 0.062406077528648747, 0.015813904262298846, -0.064838239938092582, 0.031265967377395135, 0.027507834966997668, 0.00012699672107176554, 0.05079690966459828, 0.078969877915991929, 0.098317505905439417, 0.054192666869303546, -0.013030640855035372, 0.049683315230003938, 0.083508971632165918, 0.011784477594072869, 0.091871680671077899, -0.0066226790079174785, -0.047956123703921293, -0.017090317814363196, -0.078740979480628748, -0.046730705240827737, 0.018513947238313962, 0.071499897543357865, 0.064736690247935547, -0.032650670337155206, 0.061363794900654349, -0.039888121585693735, 0.06940981414444819, 0.077977297819488783, 0.066133719833712273, 0.05598211257429133, 0.072595488855594997, -0.053844526913953562, 0.09608563004350644, -0.028805713693717965], 
	        [0.044235218750753806, 0.03452490583678916, -0.1304293688025541, -0.03539195098364023, 0.017969397644679183, 0.035178036504637217, -0.010788443554145211, -0.0016502053765038854, 0.039150364258434663, 0.21472717137309544, -0.094799579619150101, -0.028715342944390494, 0.054860337568606081, -0.039323795503948329, -0.071940860906896581, -0.11930894160210025, 0.0078117674331285164, -0.13496527011108017, -0.22468220163734792, -0.041963716626139388, -0.18840317509998969, -0.12848466572254685, 0.032762146633843053, -0.0022056152468009141, 0.10277613826454918, 0.0012177391079194258, 0.077762844802185094, 0.014832783378042141, 0.2549270879104647, -0.14122761490223984, -0.02812892511916594, -0.090593423291392555, 0.078746303030107434, -0.013334851815846885, -0.013098417976838569, -0.085997431567791716, 0.0011500587455686162, -0.096291957570617565, 0.16218222843705965, -0.026280879180661507, 0.4059162672347385, 0.2242570275495756, 0.088914801219090844, 0.087380936685669458, 0.043235742271058968, 0.10434670998406992, -0.02968326553011473, -0.096106796162175004, -0.16572721595924714, -0.17366678905777666, -0.030961339846240048, 0.059505554081166881, 0.049325908092511556, 0.12756582867533076, 0.23979790342729132, 0.12399889130520506, -0.27711805486247987, 0.10320304516755278, 0.071366923473124746, 0.066138985335745387, -0.017570740572059176, -0.21848821035302129, -0.096325738578736123, -0.013236997628355902, 0.14099804783148318, 0.048656476054380837, 0.030847391971354002, 0.12062557790469333, 0.031940378289510442, 0.012663844222798573, 0.053034778014022767, 0.023358934432241123, 0.073600738663428589, -0.10514949440993024, -0.16524216303765682, -0.25669075988459938, -0.26896594887147668, 0.018565946082153541, 0.093589512766167254, 0.028127974684171123, 0.018696901200308494, -0.015875163077901967, -0.0079379097617384188, 0.030609616137362825, -0.015794143119850355, -0.095236312837370815, -0.029087387305527151, -0.13651567962256067, -0.073683058450215624, 0.054901623218963372, -0.060990796740251554, 0.093170395781096649, -0.0023871205690264331, -0.026190765199777231, -0.04798880819540316, 0.019891792536779831, 0.053632284454708232, 0.021996415436857979, -0.058484829619743363, -0.0082971666182568952, 0.085922982573187742, 0.0078349537872220328, 0.0074972747215579123, 0.033528171976771326, 0.034258795986853316, 0.040069268495681584, 0.016642170052174849, 0.033376554888908505, 0.0094589897400608781, 0.052064551717063458, -0.084929444469789464, -0.091861293774294875, -0.072335293109873536, 0.017511044864076567, 0.083822791083669079, 0.029829413251507158, 0.022676448560172629, 0.092823512749215645, 0.027104627928702215, 0.049933127943481807, 0.25204397185842226], 
	        [0.045017070595711133, 0.0498642789949671, 0.082320969156012919, 0.11789478363532714, 0.11183772343297438, -0.1253322045343096, 0.073011089356233294, 0.077003721577057399, -0.03717900545496422, 0.11530429785134244, 0.05730001513322304, 0.097848781670201404, -0.03060524384717013, -0.0069899183498422779, -0.043814689161140008, -0.041086107026221175, -0.10156550268991253, -0.030984257446209529, 0.062242270842820177, -0.085659902110209532, -0.031199205006548048, 0.09466362301479106, 0.18696360752101071, -0.1661308799155149, -0.0090085495016999778, -0.12606646172545299, 0.061744312534455212, -0.10058744884305808, -0.32554386979332489, -0.093972833934417715, -0.084099675017452177, -0.19412666055289363, -0.073752883041483294, 0.093206668950364335, 0.053698626158480575, -0.030509976495433661, 0.035499265069312287, -0.088218415409939618, 0.14081935255976538, -0.015418397657317465, -0.14008063599426096, -0.021415771106654449, 0.073017887242636206, -0.17726620239081409, 0.049670987591142773, 0.034513230883957385, 0.10331367544756308, -0.039224198145387315, 0.032001387649784233, -0.31709931967548438, 0.36394741418078808, 0.15239466974253513, 0.12006928728376079, 0.012632970433185474, 0.13528479946899857, -0.043263351294103289, -0.041986389073361857, 0.069839057237599783, 0.0010105840343706679, -0.001177493293526035, -0.011794825581052382, -0.14348506855517926, 0.022137252763930207, -0.039687582510860714, 0.26218159086991571, 0.19436953435957777, 0.11018262120789611, 0.022791444872238911, -0.097374550971521742, -0.016625841483821784, 0.15980938407436601, 0.079561148796989944, -0.075451842770343128, -0.028023527278215769, -0.12778377344107292, -0.070600952976917736, 0.075854745502590859, -0.061104114583229563, -0.034255065348455287, 0.047000517227076224, 0.085956850425998793, 0.04282729750891924, 0.035824417662887978, -0.0061231911453551446, -0.038509250299150546, 0.052491286674368046, -0.012429025518286289, 0.027802410046689319, -0.045633571810510726, 0.057329919165400409, -0.074157742801148993, 0.0012829945233095302, 0.04703190758387131, 0.024833428093670173, 0.037204577451850254, -0.028766340858447596, 0.04836022604994912, -0.053270097737550898, -0.1225368009934108, 0.037120069768975875, -0.089284007907524526, 0.064955297078712851, 0.077539064409025166, -0.027111775203657915, 0.09566272146318118, -0.024483731157729047, -0.036211650145923778, -0.093915798725000027, -0.017320414345298095, -0.10222122825099972, -0.08839882935836986, 0.018021145195601808, 0.014346493014463765, -0.0045931108148111605, -0.041330999096111307, 0.03707125175822254, 0.032109088650756609, 0.1327316051894474, 0.075109541167208693, 0.02562779748474479, 0.14212920960470612], 
	        [0.15729146952739428, -0.052978575964526695, -0.0026258454378078749, 0.07899544804862188, 0.082044056126512888, -0.13536453065722548, -0.013649345776134983, -0.013140590068438054, 0.01151285607422449, 0.051596177430297457, 0.025550220473819302, -0.039487220487149505, -0.034658288058216052, 0.072490544458391787, -0.11567294550509376, 0.067863801617483122, 0.068650773394936471, 0.073985890698350126, -0.16153712899081113, 0.040446464260465734, 0.071466438250948588, -0.11469018047321458, 0.054050503923005255, -0.041043012191213868, 0.14996547269454152, -0.25422330965645823, 0.1969719351437533, 0.11290777964377821, -0.020530641521012943, 0.12889998621276044, -0.10368261923120013, 0.096091901965415991, 0.15324884079071813, 0.051489779311227196, 0.033559562206468427, -0.20829917204727766, 0.022893590362530233, -0.26249604314109187, 0.01920855427735553, 0.23588413973673644, 0.012602139087501865, 0.20972078789304485, 0.092568536380977479, 0.10590976891238137, 0.074213758099456212, 0.028278486131047539, -0.034766214821145405, 0.025387015471766056, -0.21114625235885243, -0.18142723897056606, -0.036903154611340375, 0.074542244212791459, -0.073942717333307595, -0.12923367863313379, -0.10286993284460598, -0.0020478562727464372, 0.0070327870476685345, 0.041658770263764591, -0.030913879256598803, 0.20126029986072963, -0.36149406972284098, -0.5918877032494142, -0.34765190314312044, -0.29917756970453346, -0.043195465679216768, -0.30777208287521557, -0.054570873464765829, 0.035677453144259269, 0.033779035010883279, -0.11152465910750621, 0.11790825287438664, 0.50742402779615148, 0.23855694673921737, 0.10488558912344918, 0.074814936164492321, -0.010757602002390856, 0.098422174417897912, 0.068011512986524178, 0.040081067317637512, -0.17815840391411603, 0.015218382958913604, -0.043044787072747059, 0.069478785978807592, 0.26248348656437781, 0.1306172564649099, 0.15898046016824569, 0.098913085077125359, 0.16690881596534685, -0.045455788389378013, -0.051217783957418925, 0.088651764746293119, -0.024238261127295962, -0.12061118524458514, -0.13932561033045077, -0.098447824398158607, 0.084104128443532489, 0.03609504694316075, 0.064677179270859433, 0.019556502245895897, 0.054584837489264737, 0.011804485067672219, 0.04962752013073167, 0.03158019227826489, -0.042127606074900098, -0.037246845366204762, -0.00090228035552694652, 0.05127558828330446, 0.017591411946701482, 0.020608297506701782, 0.12021482673005342, 0.039021952316670633, 0.021711754771879227, 0.047172199479969562, 0.11457521712485876, 0.065529260941908848, 0.057133065165575314, -0.064145843313717532, -0.079153570089738917, -0.084203588908724702, -0.13317811959911652, -0.097193108721414789], 
	        [0.016239054180390664, 0.0039662727937494063, -0.0045546608488466339, 0.013554085633964541, 0.04287384927044155, -0.15274614529097097, -0.027274870950224753, 0.009662815968977459, 0.00030503272333276543, 0.032218254842854788, -0.036021236700139334, -0.042600552093793376, -0.041216087356306746, 0.070225279182411185, 0.088251463799817353, -0.11943869442811812, 0.016009417433122689, -0.025892296238322871, 0.043718898111848606, 0.046349743840285895, -0.045519881760365574, 0.057802463286196488, 0.03299849377053235, -0.074789027962275934, 0.085612573613843404, -0.082967036772006134, 0.12226353323600213, 0.056995647983886233, 0.22311371083336579, -0.12892292639894809, 0.028711597590839549, -0.082294811006116686, 0.074670881436146558, 0.024025896326078336, 0.07065603601313146, 0.052863436123422466, 0.13162507032318282, 0.083850012252808775, 0.019373316885252463, 0.068601186045407672, 0.16045426623761011, 0.14512299636928327, 0.090971987176700866, -0.11720878638068641, -0.10960101740165, -0.22989932998426871, -0.040375493650495087, -0.20170065712267327, 0.21032193985451469, 0.028436766808479619, 0.064868788568131358, -0.18348723541305237, -0.17888322479271676, -0.24993108343054868, -0.1218218035048543, -0.032694964791572315, -0.0037869041619365135, -0.24885660964872919, -0.15602019937684342, -0.42475936671170156, -0.42360041816934524, -0.36080165394257169, -0.18904408350207366, -0.056628034016529188, 0.0019947298303030075, 0.0099847288775674753, 0.1075269031323472, 0.21965496214815466, 0.18511412087840118, 0.19939690136264532, 0.23706194766652711, 0.1585535076891107, 0.23755501089495354, 0.24026771887297607, 0.14806350471741694, 0.22743537801775957, 0.12507232761343839, -0.12207706841814078, 0.041225407558751273, 0.12974091028573875, 0.13877343222126551, 0.092819074272623342, 0.041456933016731201, 0.12810971742453969, 0.086282278039654381, 0.046482152214626163, 0.03598526522115604, -0.14999835453581617, -0.061994753063569302, -0.12774624354082473, -0.055468530754657547, -0.072055656326832668, -0.031200201377666728, -0.021697705969703371, -0.020319605794475559, -0.011808386343022212, -0.10716560570031625, -0.082342449185127842, -0.019256109946120217, 0.066678811003636818, -0.041536723571689332, -0.040687519600928507, 0.044724573527092748, -0.068305216896473495, 0.035585363893159354, 0.026945608802347733, -0.011423097664885327, 0.061366414602964534, -0.049741414287749496, 0.054484604133461456, 0.14247436696258881, 0.03770989015507005, 0.014814583813689983, -0.12196638284522934, -0.040852970973417571, -0.0048072698419944909, -0.093844453345438394, -0.11066938503473484, -0.01308544267539942, 0.020003661283812341, 0.11572349318879958], 
	        [0.02861973429703818, 0.054226325319119265, 0.017678757532143818, -0.054622115279891297, 0.00068166158543815636, -0.061011028044801754, 0.025449624542795035, 0.039248763551355731, -0.017614050568012716, 0.086689068955178875, 0.12901578182703599, -0.059155840152992877, -0.033658287075804989, -0.11303253492598647, -0.0094407403287756972, 0.038300106001050702, -0.024382057855670103, 0.13094817594507807, -0.17637051833702583, -0.042536434179399618, 0.024839476402364308, 0.025341112503526046, 0.073379240915845495, 0.12490394236296019, 0.052334528402483899, 0.01959442719741869, 0.014409551889643532, 0.06939173936687891, 0.10114636722821412, -0.017834270494535995, -0.0052538748958707721, -0.049449629111543728, -0.018515125726140946, 0.02732694249374093, 0.09763594846358073, 0.13398387575020193, 0.028128579416720284, 0.10345916561982525, 0.14559912798485353, -0.062225750838370064, -0.043205385313047517, -0.13615012492801842, 0.0094595802241661097, 0.077643293280986139, -0.01883839881610818, 0.040124806139584204, 0.046082762604961053, 0.11596384414343883, 0.041671199210061065, -0.035255123832835487, -0.24210069103686924, 0.1341304895480569, -0.12174034267618312, -0.0024940337740440369, 0.019159096554587522, -0.28596248479682318, -0.064486219660767827, -0.3159404613081046, -0.32103692755655011, -0.52703621320348082, -0.523706814301239, -0.2219710388945374, 0.078177953209590229, 0.037152776634131052, 0.079429350175809904, 0.054710873615715222, -0.030973473678087608, -0.17109338841301949, 0.096071725904511768, 0.02326460744017457, 0.18229765892428224, 0.50841537933922254, 0.36327137375759511, -0.17442768533982334, -0.075940774557052448, 0.084582691420455519, -0.08264079354279294, 0.24078778306714929, 0.12327508787645428, 3.0311214018877153e-05, 0.20734217619087927, 0.13348805342234585, 0.14204478537466711, -0.016683009143729791, 0.0026274236589628186, -0.050599783470677923, -0.093501642534019186, 0.049346638059468484, 0.027169521962694204, 0.0088066775641548883, 0.29974077633101837, -0.017370887640425853, 0.060472611475062152, -0.083274580137458892, -0.048734360258655733, -0.12258982430184573, 0.07453840474434334, 0.0016868192049145497, -0.046678375687987328, 0.10225565600123501, 0.096413382614769089, -0.085167675344914512, 0.011074699633376178, -0.058526124313595766, -0.032743113966618241, -0.1722075038150731, 0.10625699459128871, 0.045122620395145224, 0.063156899424295448, -0.023657194122683647, -0.086189421429932939, -0.097155679216888668, -0.11778596011866641, -0.0018160616946504698, -0.01837453110222613, -0.022154736774935388, 0.069072543182675333, 0.061842701091324143, 0.057417191163580447, 0.030372244451354793, 0.089787775464562541], 
	        [-0.001637558807711853, -0.01523399155873769, 0.033084196663500154, 0.010429688997138621, 0.026387307256101139, -0.055493049532405039, -0.089867986082774118, 0.031318369429763571, -0.060212072041702008, 0.060345081620277463, 0.033637859079548624, 0.074907674442576552, 0.06734422144223931, 0.045408985332457019, -0.016588163375265065, 0.11808910368697124, 0.10674593565355751, 0.014356560764954368, -0.00029905420194112353, 0.032489925736142289, -0.079691004870107801, 0.0021152438820417965, 0.12842998293419816, 0.027685506112132927, 0.051037174605280025, 0.0095027734141051382, -0.088577143955959933, 0.072415217616874708, 0.18758587336750721, -0.046260082649078216, 0.032834457400313488, 0.00027333660832160045, -0.0056258729733840926, 0.051335227757921958, -0.028997953896369527, 0.010803615722912593, 0.039278862874021811, 0.059934818237191961, -0.036672818526105114, 0.0020455805172246433, 0.08420494892293047, 0.078722497431976415, 0.072927829328334359, 0.0029102454584164217, -0.014711323072181468, 0.061978949521715912, -0.0058613640044295964, -0.0065096004647029956, 0.15462308680710604, 0.10998731441673203, 0.055119939764749493, 0.05724647785751881, 0.08467350723014512, 0.045415614831981893, -0.027011213416260203, -0.41690504010919505, -0.2381619432525145, -0.26802740977048395, -0.42973960239470188, -0.47128936696927559, -0.47538117711853761, -0.23332878411143415, -0.02866052018803172, -0.046785685844234697, -0.013910661881944619, 0.063557340319003772, 0.20816618228755654, 0.1268039069069368, 0.19584967158175218, 0.24120710644978025, 0.34247879950952587, 0.22000223848712153, 0.036993585153171818, -0.24940743884977212, -0.12911855055552002, 0.0067607783858616433, -0.016380373357314598, 0.023975770224144183, 0.17281340795556549, 0.06774703585492528, 0.099348094695161412, 0.035397538040306792, -0.034631661821791018, 0.1100865505604692, 0.005313191434559647, -0.1852260149514699, -0.015871161665418073, 0.0086230437445217883, 0.038923750125692352, -0.014894463369033356, -0.015235500642311592, 0.0015905054090605206, -0.025942083213375461, -0.048032891124765054, 0.056968059211618904, -0.0053550471186975812, 0.070041367697070894, -0.019904063376663322, 0.10013072647581948, -0.030663141377206063, 0.014936482187214051, -0.053377077668385668, -0.046191143798223082, -0.049737104601448617, -0.032034940192103359, -0.026289206287861282, -0.0073802153527658398, -0.0085776521075193179, -0.067451013841572996, 0.036964969790641428, 0.012119189183510626, -0.012732265280952129, -0.014067660545222016, 0.011208506370721377, -0.0034197755020493881, 0.12161984708872418, -0.090967033228651281, 0.062061367658091768, -0.023761385872915743, 0.11195006309284704, 0.10944483983918517], 
	        [-0.061429217767686103, -0.024854862147621323, 0.037533900593050687, 0.053055218475401428, -0.029090391144677347, -0.076607532589230393, -0.056250478754706124, 0.03851333502343017, 0.0094111122857806068, 0.027627758598813779, -0.040484333944467571, 0.062572284138447634, 0.018534104488487108, 0.099953923075381451, -0.011584012590548413, -0.027052354458091218, -0.0059961345960441587, -0.021253583302654644, -0.031551826484526257, 0.13841564062729481, 0.0044654988962283121, 0.079158575949980478, 0.09330712693847118, 0.021057360335951708, -0.020072455903489106, 0.0078349261993443525, 0.10646163879333373, 0.11394158834484362, 0.095624007084734647, -0.00037973373006179589, -0.010566642708017659, -0.021229433197596272, 0.11951412079200276, 0.15658745914488753, 0.051156677361355526, -0.06149908185714912, 0.080077841970438823, -0.060312781555823307, 0.10862415451751303, 0.090833457141346358, 0.037749802298128181, 0.12669250756084155, 0.019289318800248804, 0.11166309161116607, -0.1161166273753233, -0.038270596780716613, -0.013961859511050188, 0.057456373007881457, 0.035911303378527666, 0.11685366316626331, 0.020811499706270893, 0.042274819174293238, -0.11786932199756393, -0.20631689099465444, -0.10339540502604118, -0.032371044845522869, -0.14327246772273436, -0.25192334370553027, -0.43351265016373064, -0.32253010533464199, -0.39759972190268117, -0.39288382422516366, -0.39114382180517604, -0.24669511513347489, -0.087920593700299116, -0.088613432773507361, -0.15980594976718124, 0.18785644160235501, 0.19150833663803338, 0.46363761289278804, 0.15919333829593552, 0.19352833505902622, 0.23198389189372812, 0.41944067807959584, 0.29116622643028034, 0.13265224163991357, -0.041280875296069018, 0.024460830389148203, -0.058649245871120803, -0.0484310682254976, 0.074458524703983509, 0.038048304115812073, -0.040110091881074464, 0.059869902924825739, 0.052511568070781466, -0.0090562152269471445, 0.023537459561038466, -0.06819758275382648, -0.058682078489213363, -0.031437612709725359, 0.057289605620930092, 0.09631916110523682, -0.010631903539778567, -0.072422830632186297, 0.026755462358263725, 0.018665513895049689, -0.035082729434644327, 0.0033658937666455023, -0.025999751547288244, 0.051530594005125122, -0.095877639344744012, -0.072903503224737154, -0.067948463067868003, 0.0043261175722517503, -0.0040117811540246531, -0.0054864150036365369, -0.0070406076984890556, -0.023664491880765207, -0.021348914552691282, -0.055764945037704343, 0.076203461056541313, 0.057794773037288215, 0.004991409560975428, -0.014553984524648442, -0.029743957901801635, -0.057165125367652947, -0.0010086458792998715, -0.035361751471046692, -0.0047530832054770919, -0.011301320960084231, 0.11501077964365991], 
	        [0.15173553770142628, -0.014179130345110133, 0.016877350096463503, -0.077204656983401884, 0.07810802077917843, -0.13112570903713622, 0.002753461595534773, 0.051910634906651945, 0.028947846824779341, 0.050208812521650187, -0.004579484116651808, -0.10684515347432511, 0.011155331270464766, 0.065186111881263234, -0.13027319256310377, -0.080144308959196983, 0.10735864824242532, 0.048879724645552361, 0.015758793271349616, 0.12191464251681002, 0.096984668731898774, -0.008083344199497508, 0.02070520927773202, -0.081937807089683207, 0.0046465366987262363, 0.05614793344286019, 0.16628267002053893, 0.04618252947477354, 0.077657994922063114, -0.019960907459527263, -0.096538343643650965, 0.079466046122461123, 0.25805196379883999, 0.007762217116777187, 0.069519575178526374, 0.0095238196373019363, 0.26151693837929407, 0.086788350648662874, -0.037402260798162723, 0.069485740614805419, 0.071694722362200328, 0.13258033500501015, -0.02145849038805818, 0.056046350520208621, -0.00039374783734824614, 0.03222219258902316, 0.18458145122623904, -0.042539782956061298, -0.012963640462772971, 0.170102640969749, -0.023561860478587326, 0.051152948285101807, -0.1316626386662188, 0.02066528156095445, -0.24022517587189773, 0.038647270662851535, -0.025858147741203062, -0.08145590938506822, -0.11686693255496608, 0.044401292680239651, -0.35730505607122431, -0.64580488622829257, -0.40587964607656341, -0.30571259666730671, -0.12682355113036897, -0.33497937322424648, 0.015693363372025454, -0.078712326242700498, -0.043104245874849255, -0.15482305108138567, -0.23546372175602243, 0.11116967724198698, 0.45544745949997928, 0.18491255398354933, 0.29246815522355635, 0.19673022854984701, 0.1971071562521477, 0.073292239939430431, 0.0082411542973328047, -0.11506545091726129, -0.0097698594083774834, -0.10085941287032674, 0.068419957471663198, -0.054338184555724992, 0.077438069850143426, 0.17116462221553444, 0.0012880410065990583, 0.13426211870566188, 0.11060346830231947, -0.073247383642716754, 0.037258219358590916, -0.012266626223890298, 0.07365939898386821, 0.043783414774759152, -0.10714901521414893, 0.086654095775271639, -0.068763019687166305, -0.058722296121373203, 0.044547323244407605, -0.055317944470135778, 0.033044549367641826, 0.057546028232389426, 0.0013722198605476341, 0.024825635569633846, -0.12204262640334872, -0.10189632816975304, 0.054772548849134656, -0.079577832810170182, -0.03822925555621319, 0.036494728908033278, 0.13217334923490376, 0.057211373582709266, -0.025832313366592516, -0.054716283139663077, 0.013913569251103083, 0.1233331303710279, 0.0048703487927865205, 0.0051743609192116194, 0.028390246160885126, -0.021507757354650846, -0.034672329558215337], 
	        [-0.0056383990198644179, -0.034134669652071015, -0.022985171274173141, -0.060424905116766223, 0.054918574572591805, 0.068880856398085097, -0.0070134853831463756, -0.00648857975984031, -0.074996514150436733, -0.002575895078660656, 0.023015025445107737, 0.0083652936395193778, -0.031176094638168075, 0.04257338372246873, -0.066108851141710501, 0.029356311647627392, -0.013291948615577448, 0.056361974052678648, 0.034219482611279453, -0.012594934239664096, -0.014011911140779154, -0.062380978120753092, -0.071139980976335282, 0.0024195852417379371, -0.035945491331999854, 0.045638008001674502, -0.0047183763310553184, 0.066745235874213119, 0.045300106270492593, -0.044478673970143032, 0.089640508954303269, -0.096496181994925961, -0.027741072518757348, -0.0057167706753694508, 0.015013223612745458, -0.024603266772382323, 0.0013274270991194131, -0.035626865786564946, 0.017128923114182848, -0.045972517229731127, 0.0070036531582612499, -0.043147491260715071, -0.029564377599491043, -0.020695369020395371, -0.079784746542254759, 0.026833980742834287, -0.0019308823001443487, 0.083257616741787083, 0.1073292905313316, 0.074876843281655947, 0.04849810672333138, 0.09169820062468502, 0.04818495710565103, 0.052095948996421212, 0.0076798336966644315, 0.10519490110752421, 0.022530132067634476, 0.12672233854609458, 0.059196502607268456, 0.073165601756717547, 0.11595348012337076, 0.056154381226182701, 0.12932878620836885, 0.088424364447093076, 0.030086554964170939, 0.069155625788998448, 0.12091856805585206, -0.089931598708795482, -0.01901478695671717, -0.044734780540160696, 0.11875971731148252, 0.0019621703161090687, 0.098962626854570676, -0.014935988916705181, -0.058156651049639019, -0.030280527562952381, 0.039004290751598267, -0.084990899063584049, -0.046013083127367377, -0.014913760028022027, 0.021155606661541995, 0.064215604532574938, -0.023980009754675097, 0.028088175416754846, -0.015711319084152214, 0.055354677326641441, -0.10471526203870407, -0.089682724627139304, -0.285340049872218, -0.18318938265740103, -0.080773536226484838, 0.0051664926844681297, 0.057862500220190766, 0.064363929659878055, 0.089305276057643879, 0.033737553106247584, -0.12462760155848271, -0.15876787514393648, -0.3559472010693181, 0.09512910727572213, -0.14724808649647816, -0.20315881235781566, -0.084142690865390807, -0.21320097373742838, -0.18018782707193445, -0.21194408543671259, -0.10022760576175327, -0.021533171965098907, -0.037309088773028909, 0.12624286755807518, 0.22034948666962345, 0.18909901249809574, 0.15892762405783045, 0.012004127757768795, 0.05401853470010004, -0.028528312561415387, 0.0032335748506411056, -0.0066271780398669822, 0.08469326627498211, 0.11628744535951219, 0.19103429211412726], 
	        [-0.086320145870854931, -0.042516109128475088, -0.0087762457752190298, 0.021241060023051747, 0.0047851426838899369, -0.035472062577375424, 0.0066937243438659755, -0.00018713747041253226, 0.0082764260933883976, 0.038739768015236681, -0.068077755324487108, -0.050241928574835407, 0.005362760135839445, -0.046723041558019832, 0.094159253636089596, 0.025986870656512701, 0.028402847338834608, 0.12799263106977857, 0.052174185297818504, 0.03174223717567129, 0.043516542799932806, 0.10029999162817296, 0.0098879715083901587, -0.035094445123424634, -0.007013648134597858, 0.06906108560461019, 0.096710723211050592, 0.081381162486572428, 0.057644504950450134, 0.011067196959459139, -0.018381106688349691, -0.082601705729948863, -0.052683720386780014, -0.019959970942575705, 0.019919134901318802, 0.074764134214878319, 0.0037733543810442721, -0.0014401279343240897, -0.10890764410839328, -0.057901568753596977, 0.062402857017999663, 0.10607261825733119, 0.093355866166383666, 0.16321573911501755, -0.044311905242035599, -0.0066519319038783609, 0.024113039196997976, 0.064553442056319327, 0.15171280458638239, 0.30457768060707258, 0.087041706132401087, -0.1300649085600688, -0.11937696051908048, 0.026590394860137298, -0.061874328052457871, 0.099972551939148752, 0.063820348697113671, 0.1176673091939654, 0.1041271101548924, -0.064651383836351634, -0.64838832442120542, -0.57718682640452723, -0.036255792881924792, 0.17483800093943763, -0.082878993225198747, -0.052895537911918783, 0.093450779297526765, 0.13222855504871267, -0.0031158955676405808, -0.20504263887375321, -0.56713098560646558, -0.17042057724882412, 0.5127831574851569, 0.08057209143675742, -0.069034813778198756, -0.076493686008414857, -0.0087908313214440509, 0.063359179277283378, -0.019296007009984323, -0.26310778686915193, -0.2643185488881028, 0.0043899974918117923, 0.41748261831713607, 0.23966204304538938, -0.073562286976180655, -0.095509848197381481, -0.23474683230766644, 0.028298339134101541, 0.061074713423239807, -0.16176706647884559, -0.0028366628109293551, 0.09422220116207343, 0.12827497526492809, 0.14706895212081389, 0.07130221932440324, -0.074737279889640948, -0.23885224275969291, -0.085022204291187037, -0.071470035260692039, 0.0091790645587277592, -0.00092605797513910237, 0.084223960477746732, 0.073149894313199529, -0.027624077571723846, -0.10044220817006712, -0.0028872784191937562, 0.084866079586548959, 0.010310191760266263, -0.00054869280830070755, 0.084217742322492933, 0.0054030147214450402, 0.095305448601468015, 0.021416282988412971, 0.032093023880259933, 0.095157599788670486, -0.064421030882217095, 0.028974651903107149, -0.0069885504710366086, 0.15811077547403324, 0.077388062511628844, 0.22282468960474461], 
	        [0.076468088841762316, 0.094525480369675952, 0.013417457238376423, -0.065411302473434824, 0.0022049098738461115, -0.19542909991536384, -0.01036325544715716, 0.00068240056414065053, -0.025036329876752375, 0.10709994456938719, 0.17509342504686981, 0.14614357796041205, 0.053718089360122373, 0.033398784940497278, 0.05851426192031009, 0.10088626385947798, 0.12393259984256801, 0.00030036795350879553, -0.072506053021494155, -0.053549467701917083, -0.068974945061981693, 0.068142910765739376, -0.0032046953892697905, -0.023764344412627286, -0.033057372612734337, -0.046769398096507681, -0.12086069080136047, 0.13198139059769748, 0.010909080970491494, 0.11805853563674065, 0.00055654489186848788, -0.0058049086792519716, 0.035993036729574671, -0.0082657161673258817, 0.06835085226718729, 0.030100108849902718, 0.11300169606234395, 0.049423358201738793, -0.18768681794943032, -0.089816229291464017, 0.12209444756370379, 0.065398341021977502, -0.23087808851819352, 0.013400992883371765, -0.096887032265275258, 0.09659335704424854, 0.089714531995257141, -0.0038843040921827804, 0.12013144346588932, 0.37404235084965881, 0.21211466109416433, -0.011527049200226763, -0.049283581516932851, 0.018754604765659974, -0.082644951395777433, 0.10817924171979713, -0.058116213333392674, -0.049761441433128661, 0.038467810528975951, -0.27345429596810805, -0.84643475711205407, -0.29645101227395931, 0.088275591343327284, 0.11386954716890384, -0.043246196130588041, 0.0080366797469389184, -0.10745428649421408, -0.31046605943055011, -0.044147921462402942, -0.1780528735930817, 0.27176076889250983, 0.52374603988343083, -0.34603331319263742, -0.25552652026400441, 0.041698726893088206, 0.17631040231935152, 0.089000463451089376, -0.034971907472605007, 0.015213546106438838, -0.16155001168047278, -0.0044616122955418308, -0.19608326491524342, 0.52390737300255208, 0.38353319497536614, -0.18308498375136645, -0.36865739333612096, -0.051599769698091352, 0.18507587383644392, -0.03905957968438431, -0.11293732152378697, -0.29448175156766543, -0.24257847708785274, -0.020336287901657812, 0.16460493865286885, 0.042028560709745783, -0.034578770254525062, -0.080621311330306228, 0.0023780590689402997, 0.097090140036115533, 0.25587417177669869, -0.25284237850182822, 0.061610630265467842, 0.096069531106907025, -0.0530490597234618, -0.016158178823568958, -0.051427555078757459, 0.15564444153816212, 0.18885757011599216, 0.008434900332647044, -0.048989097338605264, 0.17712068560704061, 0.19164022835084701, 0.18133053179257821, 0.13611731878917838, 0.16529628517400261, -0.029342409275796733, -0.042788443152580583, -0.05354612070195941, 0.043048475539918307, 0.00043498176350832696, 0.043391550136365135], 
	        [-0.067392496195279539, 0.15603790499391812, 0.33005542485267503, 0.17019472884597617, -0.0097698948495494181, -0.11247473585306066, -0.094639604761681095, -0.024494294275221998, -0.0039792348017262669, 0.10994471173246248, 0.034232693599063196, 0.17574157070401114, -0.058307873942274629, -0.086035618850559076, -0.089377803027838487, 0.13060740524380768, 0.083342578777239079, 0.045589343153219719, -0.021500197744655239, -0.0396176985432692, -0.040282895436041813, -0.05490829999440229, -0.029620701005614619, 0.033422070447237745, -0.18107420807866342, 0.062628310049176433, -0.15452481995687467, 0.16302391245774031, -0.19245645289137592, 0.025898631717022558, 0.13801998524859399, 0.04258082061725732, -0.10231719535275768, -0.047878669979998692, -0.084651539536313797, -0.10421201862848327, -0.11475351378970063, -0.077447511407303965, 0.1751315391960965, 0.31630961804401514, -0.21234361067848667, -0.13717780192340084, 0.032256315027359303, 0.16117460365654565, 0.12436610992083444, -0.1960223209372981, -0.10316972333420724, -0.17989050580766375, -0.030776595813913885, 0.36723472811894087, 0.26822822948346281, -0.14255591471090923, -0.34284397107479048, -0.1686302689762979, 0.20717723978005761, -0.043610297940625702, -0.21591071858781744, -0.35645281884894064, -0.35914145172088552, -0.356538210400283, -0.22838433437597963, -0.25414794447519751, -0.027037660554611806, 0.10429938241738665, 0.070313100422815272, 0.19633410406749333, 0.011469003363448749, 0.056100652037588905, 0.20979311430234168, 0.31382740777390794, 0.36266090418492758, 0.15632710796745802, 0.043118215553735822, 0.15941891562233157, 0.13799810456009839, 0.082456547922922868, -0.097362706765706603, 0.017535763817111305, 0.18875412500763653, 0.1322991804906124, 0.093159878677258945, 0.10015739152045183, 0.041771828139582301, -0.16461226846925919, -0.010269758847271757, -0.016121723288740217, -0.10277571356356704, -0.093042910656409489, -0.049186781888682446, 0.011398226094967184, -0.0002700750754074388, 0.0074397035104696863, -0.20028112611108601, -0.11832761511884456, 0.015078283473006854, -0.018452548998716053, -0.036365176981792632, -0.020537843773772754, 0.067467358606416949, 0.098981148732411567, -0.0055674402731293593, -0.092027331571991416, -0.011441078700565044, 0.040493420073942243, 0.072106906433957396, 0.047544507543730935, -0.010627683042822508, 0.010378739620038546, -0.037361124694111458, 0.049440729101802861, 0.23172672133978298, 0.066224037066196395, 0.053604258546808725, 0.070224030431698115, 0.00044743519172646407, -0.024040752967206758, 0.017027400054980629, 0.082502176517533055, 0.04411754553266678, 0.094445759480196179, 0.026070122517550864], 
	        [-0.014874410513740596, 0.0064652695167254359, 0.18058268416301498, 0.10639801800645622, 0.1462435538011862, -0.18549085716772629, -0.11946585223026567, 0.13336875353850036, 0.1431606374421438, 0.21268324578348111, 0.074573037321912006, -0.02366332846738356, 0.00030162505180833521, 0.034923909748155624, 0.0004976437330811434, -0.27860795914035602, 0.019649427691563706, 0.22428728221168509, 0.10634587212193486, -0.055747191566415763, -0.1720320898158253, 0.14652429997383487, 0.083678061663021136, 0.080059996853547033, 0.12676990913561681, -0.20960004749175651, -0.11992969772303724, 0.079651052418806614, -7.0500155170752365e-05, -0.13159968070216072, -0.12185636491051369, -0.12212386528350992, -0.063471599790802455, 0.11591606931628659, -0.0003121176220944738, -0.16158531692072389, -0.20509977937167723, -0.015211020089078528, 0.33419363858602386, -0.021197972311742794, 0.051573854058283256, -0.081190824612454526, -0.024248010908752227, 0.031952786144903177, 0.089889994122808292, -0.055347674287966539, -0.19026769408809097, -0.20571271554392964, -0.0034200030533805825, 0.42337060834486751, 0.27260930919391929, -0.084997674317356983, -0.27009030033562559, -0.26984679182059201, -0.17357361480162312, 0.04962098882240612, -0.0035750137874818316, 0.036592663452975821, 0.0086359424090483965, -0.27032750814312834, -0.39994957932057346, -0.17183609797060095, -0.24083907079152436, -0.20001978264666828, -0.25264329034684119, 0.04388992532969703, -0.064259834604107113, 0.074043933060256278, -0.0141401497703907, 0.12916245281008937, 0.13074274654586848, 0.027929401203914232, 0.018943370061503276, 0.12690634935975603, 0.28764725653855128, 0.28887242369486649, 0.29998179562162908, -0.03702797972780987, 0.049533958877091146, -0.018197380038773844, 0.19754195456455448, -0.004838219692821645, -0.067001942206080342, 0.095328743007717764, -0.077328594117775401, 0.097921602001023816, 0.11726746577896972, 0.051206198923195473, 0.014744273305796744, 0.07451554959247797, 0.076594731593470355, -0.10212719204511148, -0.01010359791820685, 0.053405269433162157, 0.025967683489007781, 0.04284255334511395, -0.031649551549700956, -0.10112182853935778, -0.06200392753579289, 0.080996710847300729, -0.096227422002488489, 0.0027222873646967627, 0.0032193461798180056, 0.028018068894715878, -0.08039298406512714, -0.068243680675678459, -0.0065763377264938458, -0.10138976161964301, 0.0057770284685309745, -0.0019333108741061561, -0.028478055121693616, 0.078148481244774387, 0.0046718269408599078, 0.086525505520541446, 0.075149875794137733, 0.080911904001598672, 0.14299067937575605, 0.058254811658775857, 0.060032259045003374, 0.069309198206046474, 0.13733947078713762], 
	        [-0.026403086547123783, -0.020917609288306105, -0.035101904048185611, -0.014306912310371803, -0.0042972195364363863, -0.058077881414638405, 0.038178564444327087, -0.0028111815245872307, -0.0038941084518951119, 0.0018813296297546939, -0.10078688565961993, 0.021583238308296865, 0.073511926370810235, 0.054528482565529779, 0.18987936161675673, 0.13986078152038808, 0.072940725148909008, 0.059256836874555796, 0.031090669459266307, -0.015844740201760396, -0.02361837940991314, -0.064937204109534769, 0.075642983811850889, -0.079466195820172975, -0.020769014944646391, -0.1040432783776685, -0.033012967133522031, 0.072788464701810857, 0.10548105228938642, 0.0019405459380496259, -0.0070425924572238563, -0.028398618166747935, 0.04518643635595633, -0.019186199862506761, 0.10714569627787791, 0.11822684975817753, 0.038571217188388802, -0.027458148938472732, -0.098264611636292687, 0.056390894688735219, 0.0401565173462511, 0.12886782282388654, -0.031555895682836455, -0.02313957239134061, 0.069122427442892292, 0.025102249881310351, 0.029789415685897214, -0.070652870595506262, 0.016314783301103308, 0.28688684230956962, 0.1702619783984527, 0.012540634976734383, 0.070850865861622578, 0.0048605100782281585, 0.033197753461072857, -0.091328697630636863, -0.15097408737648729, -0.024120509010246885, -0.024570140846357655, -0.41480944335467018, -0.77687153219324112, -0.27460992951941543, 0.13785951824037135, 0.13544781633672992, 0.13313817386432886, 0.082652802520245455, 0.089237854154998297, -0.044081186993255472, -0.076883101321275515, 0.12600419964023202, 0.40959366052382118, 0.087069283116805757, -0.46621168156582082, -0.43761485411451395, -0.10812067804268631, 0.01768640051563608, 0.12729816882590003, -0.064747448694650156, -0.10763464536172436, -0.08524826938436865, -0.23150319320387719, 0.15315343856469926, 0.55619678100250369, 0.23774692046366147, -0.1666896681928125, -0.17715538120217467, -0.16976838686613122, 0.025008504484853387, 0.060377572120923748, -0.20713294145422401, -0.18646194822017553, -0.08066176191384393, -0.0061085279041063756, 0.13478699831707003, 0.05663233125435585, 0.17462609841438137, 0.017491495363805537, -0.015088475844073315, -0.051792080298022347, 0.086678653491882515, -0.043885434378402269, 0.048343192446375916, -0.11502969777881612, 0.14059893815190727, -0.062258291133083843, -0.1133470132940385, -0.064953910797987582, 0.027741435654062445, 0.11898150752091059, 0.030260843676813906, 0.1715435352553567, 0.057333117013068161, 0.16205339464116109, 0.098608813006722904, 0.073912318801590465, -0.090815553665590618, -0.010370607459546058, 0.092275726044843492, 0.11030039690306363, -0.0058808178655301233, 0.033150477829288559], 
	        [0.26549778400602297, -0.0011965636289475029, -0.022916846645374064, 0.042429672318282589, -0.13811673855846254, -0.037430883372056925, -0.040559761655224888, -0.023933501028027243, 0.079258690792885986, -0.034521886198656038, 0.17450462509358011, 0.041790623206738556, -0.022740750277082458, -0.0013539969792274592, -0.10138864950556396, -0.053305913995103191, 0.058908760919113429, 0.093372903179051017, 0.050140067951328054, 0.0084539027069934353, 0.021166550278200705, 0.10388208219238029, 0.0076348046928304547, 0.013138640062169096, -0.075217338734674163, 0.015069141903176639, 0.24056352482102478, 0.064464323761281916, -0.061520565707010158, -0.084694104843374141, -0.06805808373087846, -0.010291588861849124, -0.035798773818091045, -0.047137578793397347, -0.030265001058571481, 0.025114433975426814, 0.16953416528873916, -0.081754314336625597, -0.16483577488792853, -0.090215602604801506, 0.19963523508019926, 0.18826320002737132, 0.045614733683874802, 0.10861139159661171, -0.028328921848054453, -0.10351624721954029, 0.075321623520557809, -0.034012524380715156, -0.05869582193122358, 0.44090992264428214, 0.084019251874953446, -0.012849576849437369, -0.04246094681649424, 0.13375661768225128, -0.12950865617271876, 0.0026410719089161178, 0.044977821596146744, -0.090312411108535592, 0.055733826199718409, 0.060061106002439482, -0.71527711468395772, -0.2823457778181207, 0.031272225391427405, 0.11880824524917351, -0.004276759953008441, -0.011347995604354372, 0.0023675469047975545, 0.00043485509660366739, 0.18958682252204556, -0.085759813410154359, -0.45257574229053438, 0.15961507301364802, 0.31736731659376055, -0.062412313090533911, -0.33746000415329924, -0.24412114938634538, -0.06141338958196621, 0.13078793636510849, 0.20848205264195724, -0.20955124959973886, -0.28812988786360966, 0.14444443144018609, 0.46815272589228218, 0.085138932615497556, -0.22658732896395356, -0.027717075192951288, -0.16856281398342385, -0.13753538355338668, 0.15059745895188464, 0.00078477376683321054, -0.17890918828775537, -0.067288794701022059, 0.11813620983475538, 0.1093966751655376, 0.10647641748777864, -0.077849502674635002, -0.24214140318686445, -0.15597210638677117, 0.018451936251225459, -0.065300427051986951, 0.042693539088593954, 0.11063899895595043, 0.13459602826469319, 0.03073808878575153, -0.014969922588453921, 0.039307213284366038, 0.041004905630175364, -0.028333785559137958, 0.015742037834556716, 0.1142681683436582, 0.021003468182292317, 0.0077221565554255883, -0.00084805796798508026, 0.056396970533902469, -0.11249629487295199, -0.064031279727990664, 0.026888150461400945, 0.12621843363263308, 0.25061555337122832, 0.11067999815380504, 0.26256731149626561], 
	        [0.072041366938857376, -0.022942168421451581, 0.20654586373496231, 0.0021517723151043971, -0.14297221024604706, 0.00060653444070969675, -0.058092024602730497, 0.13818306134022745, 0.17791598188652985, 0.1233364171367471, 0.0044528518545720458, -0.046059785461132652, -0.071586300701623362, -0.10073784448195211, -0.073740011819088014, -0.018045859949657725, -0.11863305748309075, 0.17617564045249434, 0.14977841506896911, -0.060747330352864684, -0.0027955678212599061, 0.16785791445724135, -0.1069842654168507, 0.082999543239617682, 0.12903189836552459, 0.047202915960078598, -0.030333770559695314, 0.099121495138076013, -0.051746600816636498, -0.20797950839871948, -0.0060523253550806566, -0.24640179139614737, 0.0025429730685309904, 0.056675953090986081, 0.13754251807005335, -0.079126091054087175, -0.17638998336346334, 0.055182291054404795, 0.29992999912154811, -0.12374985838286831, -0.15473061907953733, -0.015285688493998806, -0.0054135361559385919, -0.085840477677166474, 0.22138328866134657, -0.13129536918746371, -0.33146872033096603, -0.21124338516694569, 0.24711637651267865, 0.46372432064270608, 0.002706170884996334, -0.24160873975021052, -0.10141666077006732, -0.18322786018052334, 0.11158412852904591, 0.16760494025045042, 0.029994319879768874, 0.025682099122424931, -0.11958702177240098, -0.33142254026746104, -0.15444906222705926, -0.16381735574030895, -0.18306921419312999, -0.40205221035750643, -0.26593698021713486, -0.15682020509672343, -0.0002611999532893261, -0.028755553239042705, 0.27424611760615036, 0.21592566014741185, 0.2548708412154177, 0.097667264438525039, 0.20034297265732981, 0.19878852497931995, 0.30685861615553289, 0.17246611044410129, 0.018739306158119473, -0.031064357609991294, 0.02636646794424298, -0.18776759014039729, -0.1548117904943781, -0.037429208180667362, -0.11875155323060346, 0.10726451368176571, 0.17942453854019957, 0.11733499751282206, 0.0052778895571915507, 0.23971575743086301, 0.0079700671972805642, -0.05150273918961891, 0.055320037436683178, -0.040007912106383381, -0.092708107077101642, -0.031471166411299017, -0.098759311933464516, -0.092930223695402298, 0.055517948982359747, -0.037796492017755555, -0.0063425594979251848, 0.024882508886736474, 0.034983156636445717, 0.071931496060268246, -0.031592475014589311, -0.08635043298071296, -0.0090016951668947798, 0.071457472968914776, -0.060721615092941987, -0.14319100457707667, -0.048321071596804911, 0.081485340665029743, -0.028272073748030507, 0.063683871776067519, 0.0055479754033408712, 0.11811279082577647, 0.1406537167258409, 0.0040600159105901035, -0.01371930228275231, 0.12724155992658021, 0.099627352699487401, 0.13231658613798591, 0.13873127011038072], 
	        [-0.027795762801489036, 0.19015374353251102, 0.097864499370304614, 0.12602658180552559, -0.033269074628986733, -0.089500715499542943, 0.04755987206442841, 0.073741060179395967, 0.10899124384412755, 0.010865871673477301, -0.057265695902511626, 0.17802866217244057, -0.063866674386830136, 0.018021373487705536, 0.025918690785187992, 0.052575744386986367, -0.021274343355739661, -0.13048583355248472, 0.029635938133951767, 0.021720608681606558, 0.074926473794418733, 0.05982963712461653, -0.076901179289292132, -0.026484578757325183, -0.15053176420715175, -0.13725487193154184, 0.087833236099425338, 0.066023074778773477, -0.09194730471659307, -0.2149017706218482, -0.020022004139598079, 0.061471356479686365, 0.041399022424228001, 0.031512385832822058, -0.015300106252072884, 0.026068470255320511, -0.033971179507359804, -0.056571591160507355, 0.18971099504863476, 0.088995348857820136, -0.15964206297954237, -0.1658659652422706, -0.11188281516561152, 0.12234793752765391, -0.052307886639272771, -0.37845338665931738, -0.096613913262061174, -0.069048222879974586, 0.06616884325249589, 0.45010838044304829, 0.11905472109942555, -0.089092894933614275, -0.12904510069418687, -0.036526361323872623, 0.054821578766419167, 0.024810152389095064, -0.29747232226539949, -0.29999245801199964, -0.30525086777987692, 0.020996924029338435, -0.24088524064845188, -0.24200960208227415, -0.089790636212287028, 0.040398429108714586, 0.02526034075506383, 0.02738946668147809, 0.27071204540517796, 0.36231522138833033, 0.17799155604913797, 0.14461290644587801, 0.039188380670349868, -0.12174172594558236, 0.062379698671313509, 0.053786808004118926, 0.077565363377853025, 0.08914298237579163, -0.082913498201941188, 0.047935941038607571, 0.032227521369624083, 0.1350352800448287, 0.01205967148514378, -0.0045403010495765339, 0.04815794062847277, 0.081651621340802089, 0.042005542551939397, 0.00094719895582431185, 0.013451602816859323, 0.046158292820973189, -0.086770110141339035, -0.019510393108648688, -0.011154645591627543, 0.027566377877780268, 0.061728447633688933, 0.01211458002765884, -0.023208391928071358, -0.031607312720043738, 0.059642540508696808, -0.036765889133114592, -0.015928896212769141, 0.0064080901614296526, -0.081899254344496963, -0.029769584611185507, -0.088820881932459628, -0.028070658348809674, -0.023691860637635141, -0.019599361049671284, 0.057438128582313362, -0.038195671616113237, -0.011284460479520503, 0.039955132103732395, 0.099447536075713397, 0.068549557521697391, 0.073047585512767549, 0.062482862870410376, 0.026345779828657455, 0.051335172427723452, 0.055074573131097329, 0.05467724826002196, 0.024905693805908301, 0.045383956637533654, 0.032908498475190132]
	      ], 
	      "sobel": [
	        [0.021622445358756535, -0.039044416006162902, -0.037053874418492755, -0.070221762884057529, -0.14277178789038111, 0.010719228314107376, 0.23521416713985532, 0.042585931839459745, -0.066838617434589909, -0.035785952249555719, -0.04059161986118337, -0.04764960919347714, 0.015365501205621496, -0.0089412911030321875, -0.018093607051941449, -0.041156433480069976, 0.059193526101543679, 0.034970124073028692, 0.008553519349948524, -0.012132573309561322, 0.037118604219805298, 0.0111042284552757, 0.013666753799685936, 0.057115927906324922, -0.039502379569608656, 0.0017172576948862456, -0.10081077815789569, 0.037477947956047315, 0.16094952648226463, -0.067174391154844304, -0.034197546339512892, 0.043780102673210156, -0.028950198305796655, -0.075338573644424867, -0.037953071524472706, 0.015621349282515417, -0.0062936629565303812, -0.11863605824421611, 0.049183193707198238, 0.17069808619279628, -0.019042518561221543, -0.04243830041050764, -0.017632482496080508, -0.075731520983345624, 0.0095324271735924976, 0.032929665395846554, -0.014258152251170213, -0.0098967025572965356, -0.080727554710942118, 0.076950547720302298, 0.13010453872990779, -0.11441193151685329, 0.020647144228869374, 0.0074901484299721502, 0.029524457284514791, -0.012759212791825812, -0.0093580562023970887, -0.0058362056553335484, 0.064104388310505842, -0.16470494179736736, 0.094417901873677768, 0.13506762949639728, -0.044141557668112785, -0.052786309985618965, -0.010841128696787369, -0.0066630125429543163, -0.023002077304622413, 0.028816328444530765, 0.041660776154130552, -0.032027957181329177, -0.061564972379557034, 0.13252072121529024, 0.13006898279253504, -0.12914934815826734, 0.0036201984235415957, 0.036105422059974968, -0.012106081202489141, 0.0040581921012012682, -0.061907628638589444, 0.0076003677847962282, 0.036719522198239138, -0.14105768367312649, 0.20291678804533386, 0.060388661168118758, -0.096589560951574671, 0.054589139338588007, -0.10018987380801381, 0.041122915048875108, -0.036635205055412415, 0.11599660938438668, -0.072959009619801077, 0.0058380920703229103, -0.080459185128702371, 0.15241049645522284, 0.064258128129055292, -0.099760237579099881, -0.038508522408432909, 0.0044401907717541295, -0.027741747177757195, -0.03436923493861925, -0.015116464251280038, 0.0058884423068488005, 0.046096447137350165, -0.057576787493043513, 0.10122734774744221, 0.074735445752117727, -0.082870214204482526, 0.016464177481322798, -0.035808109707655661, -0.034750714642449623, -0.0037473815699105711, -0.026826464835886445, 0.0056597480426354915, -0.067769751698199487, 0.0568032112071548, 0.22043446790836069, 0.017122291321192216, -0.14459243689689222, -0.079001488823724236, -0.044799531513801144, -0.099981836109005212], 
	        [-0.039421733196747563, -0.057937375185619755, 0.074729383153290238, -0.048044786321738378, -0.037187904273169307, 0.052702736653325186, 0.26142655681091542, -0.061948912592336147, -0.10675064435044604, 0.031812102150842861, -0.051384587313130461, -0.0060010201665935334, -0.00075896323127177395, -0.0050347123305201219, -0.041064685490394513, -0.017208529601601026, -0.0095905987638112492, 0.1312641811720012, -0.051457805250329162, -8.2456846587079802e-05, -0.063001416106639091, 0.00662330181235226, 0.0045051030283342064, -0.0083206197174064897, 0.034912618703663689, 0.012366610223709981, -0.059276577400723146, 0.052288462081552911, 0.15469918793188286, -0.051591770863725732, -0.045778765567233509, -0.0078960352945247718, -0.018756915070729453, -0.094971301563454444, 0.065529490603964152, -0.029158529667124129, 0.046869488668256493, -0.070024824171941891, 0.062730640085547337, 0.12065622163679911, -0.068657561209928358, -0.019058676809837402, 0.0074337488818226119, -0.067123189259470334, 0.02052950643564122, 0.013044402474017169, 0.0035087666835479231, -0.012030134512047277, -0.097183241294960532, 0.028501913912727009, 0.15192055414504166, -0.070640175383792636, -0.075748676174115875, 0.031913417912056846, -0.031981916836030161, -0.023049214827213602, -0.030048256280766128, -0.003272100719358767, 0.060009116628550338, -0.10610745181060459, 0.071599910972010128, 0.029747261693937183, -0.05575743675365958, 0.010540784627845606, -0.038579439103590962, -0.013055960468351072, -0.046603955087347805, 0.045824656843064061, -0.011912196563431354, -0.011526854332901983, -0.09532744148529379, 0.051839761132369919, 0.069491936832294085, -0.078788466397808288, -0.022076046119921762, 0.055685206611929355, -0.028690189358575251, -0.010750075363214893, -0.03415858882057192, -0.038029784044701004, 0.057878914546968016, -0.13134480414052568, 0.085607992375635905, 0.12614414610906796, -0.044827306225034641, -0.049757164378562924, -0.024712106659159953, -0.071507148759382411, -0.024192130054643594, 0.01362951330665179, 0.048433953081083739, 0.024359386660730259, -0.0051155106774921633, -0.1051390039795366, 0.14444393915678838, -0.0088548431670526818, -0.068772016948969117, 0.041548890783175252, -0.034167152155519381, -0.021582188034119092, 0.030182799067988354, -0.0040014629061505859, -0.0083662081635181747, 0.026868483822945988, -0.022177672343113145, 0.083313762448314871, 0.010010211142558997, -0.030072184867643174, 0.037843489218722132, -0.070383902910739399, -0.083548620924597278, -0.036391935661160918, -0.016615937603765441, 0.062407519296053184, -0.091602024121955034, -0.0068430434289176237, 0.095085963164938239, 0.048338691169388215, -0.027514079584110885, -0.13108991117518859, -0.096683781412949532], 
	        [0.026521552932905021, -0.045757706968443369, -0.0065411884067677981, -0.085061179165153294, 0.14722881834024182, 0.047880871068860825, -0.019733975062189213, -0.051041982772424166, -0.06667461611485706, -0.018868367139866095, -0.041407892531913994, -0.1135165849534281, 0.06494420088328412, 0.02647152281327755, -0.00090233232791716786, 0.012634138439591477, 0.016736706302279282, 0.0066229675581288353, -0.027195497182580936, -0.013683547901060635, -0.053134066940332091, -0.037126651114853963, -0.022632575689387369, -0.0018942229311252846, 0.033462110153666749, -0.1182492365861096, 0.020164248753763356, 0.11022756484626357, -0.034399331322643348, -0.004049118679745123, 0.015540800383945969, -0.018762684144165639, 0.031382890856517, -0.034906110659518569, 0.0084090652945358179, -0.044334707129056128, -0.018500134350316173, -0.03677441221924304, 0.11924665863029466, -0.066556956316230043, -0.0157217782738675, 0.0088049969447932253, -0.073061057426566628, 0.024309817051911063, -0.0022227005091241224, -0.027084812593866206, 0.11300564532044208, -0.089657724195424393, -0.069330694925671552, 0.1522788162456262, -0.11814107191405709, 0.041522705944297272, -0.055858865503919525, 0.03589699264499422, -0.022839973856335079, -0.062359056865698051, 0.017954041686744696, -0.0023516930568763042, 0.024292471256874525, -0.020140941604535046, 0.16616378156217479, -0.060547479040507682, -0.095993631877149627, -0.035171531857736707, 0.00017003372512303105, -0.054486904900661617, 0.0051046874832875108, -0.024970809646617714, -0.026948648737005924, 0.13211777318770576, -0.015912595374394843, 0.14876817147359678, 0.079640820231395598, -0.11230282633524796, -0.0092441791382505342, 0.058819068131640312, -0.077920153621443, -0.090482271757585608, 0.11102826856966876, 0.042626094052885727, -0.002195518726305995, -0.036122267119977257, 0.047146706015838369, 0.18615910807929142, -0.063269368645278462, -0.06350591196288817, -0.029534950411274838, -0.029986821385842868, -0.01600285092423518, -0.030794045583080902, 0.0070419278101264172, -0.030444390319950831, -0.12718798875016957, 0.041134467878119835, 0.20405185525846614, -0.029811157180004131, -0.08705268526814279, -0.016364346582207326, -0.037891810417653854, -0.026401963421238878, -0.013779084822577579, -0.013032137299750876, -0.053538279554311299, -0.056779607970010679, -0.079377223053779367, 0.1823700488331369, 0.04187996112061794, -0.046827200345602865, -0.01941969694818884, -0.032796142514734263, -0.17044345125001231, -0.05402585591400131, -0.012647256817941261, -0.067305588382767928, -0.10224311399966124, -0.34971902980023623, 0.21798581432121136, 0.33121516682963281, -0.020319476107282762, -0.12056665218545416, -0.11656639490906624], 
	        [-0.034745756067027414, 0.011922066572062268, -0.098449291804937236, 0.18031082717496805, 0.17476539334005353, -0.046518346780788547, -0.10946016872645539, -0.075727469917264756, -0.004279528158131065, -0.017696596899397482, -0.093983562864041803, -0.010800135732187889, -0.0045569323185074284, -0.031379361612413698, -0.11850675752648224, 0.2367012443070334, -0.014785597277977354, -0.063302331262239414, 0.022536827576278201, -0.025071938686129294, -0.0027915071853978554, -0.020334914936012752, -0.026008027089296101, 0.010703003018176116, -0.043029867343547329, -0.047195519513412248, 0.12321706281055818, 0.071786005282978516, -0.065282274004568347, -0.067638221239958093, -0.030061503019037598, 0.0027284619191995756, -0.030746019874450269, 0.034300317469793756, -0.01548496672283399, 0.00061797218192791159, -0.12212293111148122, 0.050022803331177507, 0.14679567560544277, -0.084454888753618507, -0.010415558440521971, 0.017746373390555303, -0.037888913263606695, -0.0042452861377769227, -0.074445323746479414, -0.011522402982276407, 0.0065317653275813771, -0.093067685671222949, 0.00025768497943800921, 0.23352117567061204, -0.0049839681159744506, -0.070961394834865091, -0.040406385819728594, 0.0038935193964216783, -0.063087695343447811, 0.0028549201129295862, -0.011365105715306072, -0.0051871840857717968, -0.011323145685494362, -0.15258276867230808, 0.10052717621074529, 0.12368458705231265, -0.077847390546605971, -0.059471418250267638, 0.028026328084379253, 0.048885641757861406, -0.019665152356733828, -0.017240548423916428, -0.041027265162514856, 0.0011509894918183342, -0.082241935288892523, 0.078604867885532073, 0.16228781290785055, -0.010523700344121451, -0.030965934865738454, -0.041503959227228673, -0.039718938540816928, -0.038748556042536665, 0.051470420149172191, 0.030039107409380247, -0.051469295929946292, -0.06031302048942426, -0.081417936654068115, 0.17732474397593703, 0.025219765376655087, -0.012727987606368688, -0.064523296079121037, -0.013167312882832634, -0.013895314055951707, -0.049375572219517737, 0.014179550428987366, 0.00062312741669435373, 0.007284514890717856, -0.10894474372759466, 0.027784507036578657, 0.19201834106729118, -0.085036361549911121, 0.023988581116611958, -0.022828104571709931, -0.014372052338263167, -0.026342474575395736, -0.0055467921457708243, -0.019470544310970943, -0.033931503651495665, -0.0091536544294716152, -0.036739492608220362, 0.10446088448224827, 0.020969726335668189, 0.024776193018576149, -0.078829730104535034, -0.053245132855933908, -0.010433310611867591, -0.010210640679316214, -0.051308025398501503, 0.037884008160365974, -0.099324142895464845, -0.12671107025252934, 0.083828567543130963, 0.12485291624334745, -0.019875141138885395, 0.021159178415280137], 
	        [-0.073813428578515319, 0.0455540146431333, 0.21317974541835555, 0.054485804091818982, -0.10981511144389543, -0.10268425646919861, -0.046501163519200653, -0.055663971820637946, -0.020862778212020025, -0.0016239951963715644, -0.002629558452717437, 0.0099974094135370853, -0.1034433191717149, -0.0080814385350999121, 0.20536698014540328, 0.06126371127783943, -0.059836319781441494, -0.038790294476037351, -0.053677695944028214, 0.019923647746113771, 0.00067536759966540377, -0.035726207464042412, -0.035441015599980488, -0.024733560212268406, -0.15079839806148979, 0.10615849316820197, 0.18684548267040532, -0.064070280932145493, -0.067087150871195628, -0.0055311193006368775, -0.086092934395195775, 0.061425846472940575, -0.035219155593812501, -0.039575091828705944, 0.049801600957609174, -0.033980895382327146, -0.11533858246663227, 0.18080146842113642, 0.12760232482142872, -0.083273979291499017, 0.0040506256439491184, -0.0099808928737386143, -0.067759137702010225, 0.0026835543791823638, -0.0080343381743012698, 0.023532332559458254, 0.043117469529290763, -0.14058656961156304, -0.0016268330065314137, 0.15585324976494819, 0.069626580205874283, -0.1243686355938375, -0.026479623846533681, 0.020383199203834142, -0.028768935662109356, -0.0062857702132087974, -0.028321313745657696, -0.01168709222463879, -0.029152829240080027, -0.094922161457253018, 0.052872274283144463, 0.11087851911197262, 0.054251608937427767, -0.053296632141531824, -0.027558550405789028, -0.03854510047924891, 0.011349127429016066, -0.026961940685359908, -0.0058849527355114006, 0.00206567265274352, -0.06205567284106403, 0.027107120468617331, 0.076720226540601719, 0.0095546142954107578, 0.062120958180423839, -0.032629976188592258, -0.021507467744680639, -0.052784084736165693, 0.0030423247653671021, -0.0080315707017271191, -0.063924511094123684, -0.00021021475214931008, -0.10024981203982601, 0.1015512962019214, 0.064157555723561771, -0.069916492771215075, 0.082103122053598113, -0.046503334103402447, -0.0048848007312446012, -0.02758565365129036, -0.0140809555182348, 0.019042840231226918, -0.033131129031483485, -0.0089135928143168203, -0.054256262048008735, 0.11973166937117143, -0.018268580157864991, -0.023883645532026994, 0.049231832011293608, -0.014577787660792423, 0.046127787170430763, -0.075110202669192799, 0.046626886126717067, -0.041747134956936049, -0.03251487077000792, -0.054338733400030953, 0.017222361404870275, 0.11676824759018707, -0.026438027156220366, -0.032102992542435496, -0.055241109787953276, 0.056235913315409988, 0.009962320928060292, -0.032473557036913243, -0.019767314495135732, -0.029422259501493818, -0.05097365566473705, -0.086442579719706786, 0.012598629009327726, 0.066122215427308853, 0.01211368001348305], 
	        [0.0004667357969735525, 0.00054849626182419664, -0.00013618713228205742, -0.00013253085166550519, -0.00080157461570931794, -2.691133605066146e-05, -0.00065764288432581446, -3.6579683998914057e-05, -5.4660118200278811e-05, 0.00014604635132977641, -0.0001696182636010491, -0.00015906228894248253, 0.00011235296245967744, 0.00050518233975373769, 0.00015356454550761702, -0.00031323963237401761, -0.00044300984864449697, 0.00053200461227834563, 2.3644509619358614e-05, -8.4831714279420429e-05, -0.00027200405736615936, 0.00022416316434788062, -7.1194625315486616e-05, -0.0001921201138109542, 0.00057396177783196486, 0.00035815207686277155, 0.00031159259445471095, -4.6937311155920448e-05, -0.00065506326926790702, -0.00011995580027392686, -4.2348005140095457e-05, 0.00010587326804443578, -7.9322550005703508e-05, -2.3721764802441496e-05, -0.00017040147572136739, -0.00057593165429725875, 0.00065222177121013831, 0.0002665414702900902, 0.00035667127123066925, -7.7691777858289972e-05, -3.8172905741614115e-05, 0.00010049476721076365, -0.00012168481580056376, -4.0491064147097386e-05, -4.8159547975361617e-05, -0.00023287151964227542, -5.0225019821443275e-05, -0.00080182622897892767, 0.0010438945255279268, 6.1969706422453793e-05, 0.00028901935081157955, 0.00010579037778190963, -0.0002724803030345158, -0.00018248333714674828, -9.7893609415735343e-05, 5.6122266787632407e-05, -2.4109435187230215e-05, -8.256402305014017e-05, 1.2275769358770228e-05, -0.0011837300475309662, 0.0010387599962857208, -0.00030106456925788061, -8.2942949550413037e-05, 0.00046305034318953886, -3.4941522492179002e-05, 0.00026047826388847961, 8.0063314441238695e-05, -0.00023204308256855825, 0.00028043251942060473, -0.00017992926522449743, 0.00024111256847714896, -0.00077707368713531705, 0.00087258670230551394, -0.00047310681975866464, -4.8903566618300337e-05, 0.00030165105394839128, 0.0001523693782892032, -0.0003214720006770571, 0.00014500490168671901, -0.00014868675403801115, -8.4069171507120122e-05, -1.1488930694997235e-05, -7.3103538477843621e-05, -0.00027257580575307944, 0.0010045581248467467, -0.0006063389015931106, -0.00030283901680250476, 0.00023946215844236965, 4.0874050688199964e-05, 0.00020668776684328811, 4.6264165950036471e-05, 0.00022120225803604759, -0.00025433190468929917, -6.962082684627835e-05, -0.00011541458342628763, -0.00025522292698570287, 0.00090807721332292896, -0.0001479625967791515, -0.00027356753032273425, -0.00019226090250733943, 0.00015027389750788632, -0.0001041059494256247, -0.00012272487478783012, 0.00033766836773768683, -0.00040885269632123106, 1.4064712871159069e-05, -6.0893502923708986e-05, -1.2270143878473361e-05, 0.00046367307715139069, 0.00018271794499197247, -3.3562064556917105e-05, -0.0001861452801387312, 0.00024747597697189313, -0.0002203964126913302, -0.0002655235806198683, -4.8267361401083814e-05, -0.00013654454453562725, -0.00016522236506379823, -9.985241041834958e-05, -7.3084705394677342e-05, 7.6496751819820884e-05], 
	        [0.00014192493009219931, -1.0849997241092063e-05, 0.0001677566369007906, -0.00011605018962013852, 6.6756115456784171e-05, -0.00015562939648154986, 6.4164428186169048e-05, -0.00016144031937152109, -1.1567201873632915e-05, -2.9389666004610293e-05, -0.00018545690110512159, -0.00014192965770924021, 0.00015688900011993565, -0.00022987170475181201, 0.00050601894856794338, 1.147904121199389e-05, -3.5358004185095937e-05, 5.4151378378504422e-05, 0.0001162675133458968, 3.7185858557914342e-05, 5.9553590523481192e-05, 3.1314783550819014e-05, 1.2057174878739307e-05, -9.6695987945233375e-05, 0.0001044847847413502, -0.00015507143992373601, 0.00022022799757739214, 8.3866880430806534e-05, -0.00012962060856349517, -6.7578262074236006e-05, -1.3555990987554334e-05, -3.5737704882077281e-05, -4.5808795552465531e-05, -6.3548782069412779e-06, -0.00015612384897251141, 7.0085223497301508e-05, 0.00029763597940726805, -0.00010577343553129503, 0.00012730480076296458, 1.2399248204064683e-05, 1.8645837807265697e-05, 0.00024212785489370614, -0.00015872860498579444, 8.3707241213322459e-05, -0.00032597535960855739, 0.00041133058083372975, -8.8687656587524422e-05, -0.00049296444707497278, 0.00020605423444788884, 9.3561174143157178e-05, 0.00024762885023246056, 0.00036524470776032325, -0.00023688791970755824, 0.00033172236655580611, 1.2629398500677014e-05, 0.00024080466741264323, -0.0004006372668640644, -5.9563129205519871e-05, 0.00028033907001259045, -0.00028345593539583214, 0.0001339187071822609, 3.0493512604909401e-06, -0.00034838001372515526, 0.00059746238210751923, -9.9846486972976489e-05, 0.00041453928701537524, -0.00023073595005270592, 0.00034208508615191091, -0.00016580817990245744, 3.9765764453518482e-05, -0.00027830373100982964, 0.00012537929853667987, 1.4736238159517717e-05, 0.00027567237234161351, -0.0004888438970630446, 8.7212866113350884e-06, -2.0493341142208132e-05, 0.00020499966401848688, -0.00032257655852790945, 0.00032032979815644486, -0.00024321547888298814, 2.9086686149870644e-05, -0.00028867101368240666, 3.0825398830508499e-05, -3.6797589493049732e-05, 0.00029228356787954629, 0.00052891319033434442, -0.0002405873549854512, -0.00029898967584843228, 0.00023190078400971148, -0.0002429945590425725, 0.00012631644056069861, 6.8365713355195146e-05, 0.00010549540200119334, -7.3225818539288112e-05, -0.0001018216734522126, -7.6341945218480478e-05, -0.00040021222480832175, 0.00051868831128347101, 0.00045282278366730322, -0.00025642054830855854, -5.3312433065010739e-05, -0.00015071920454498566, 0.00026346273973178874, 1.5723135233985941e-05, -0.00010611552565827076, 0.00010030771494402846, -0.00022901452791959653, 0.00029515413913742961, -0.000378103168520591, -0.00048426748955096577, 0.00022179377366644826, -6.5521532191739271e-05, 0.00033674118948758686, -0.00046179298814816305, 0.00010507012245129441, -8.1386075936565327e-05, -8.5409170546155155e-05, -8.8995879690176305e-05, -7.5853311223957054e-05, 2.6564465721370945e-05], 
	        [-0.010683117891894434, -0.026203517318029858, -0.035348631234462732, -0.0089039476697588757, -0.078264832133459569, 0.014533495211292522, -0.039735497439144417, 0.0028868136525013826, 0.0082563432282671927, -0.036876327986247723, 0.0019617637025766575, 0.052924193889526149, 0.035478526483873563, 0.021452215773512737, -0.012058498396393419, 0.032415748027272206, 0.0081487313430126454, -0.0082878430591127438, -0.011301795333024143, 0.045191867790093425, 0.044327234784062801, 0.019363765884505585, 0.11356516329476325, -0.032979098377165179, 0.075697516409139673, 0.019096851467574182, 0.0083417566704703065, -0.0060608317184354613, -0.024521250232898754, -0.0062563950604268004, -0.019424549966013421, 0.042617826976536294, 0.11771045618920394, 0.14806853397919761, 0.07242131632098367, 0.05825312332492652, 0.036446775225891515, 0.061850429851318528, 0.049704669459738865, 0.055430561498123407, 0.070266675660789452, 0.10791776313079825, 0.053117037443650719, 0.12942596556811628, -0.037520978380153586, 0.09370958660148157, 0.067576770360366523, 0.068724981441630334, 0.076126783309853729, 0.12311586010135872, 0.083411336336100567, 0.039387077762465639, 0.056425147284172514, 0.014237983090907416, 0.05663383500458416, -0.0075863136735932618, -0.083041404471318359, -0.033129983631350668, -0.027636238642020229, -0.047768510607462976, -0.063296204253032298, -0.062578786189099095, -0.046277350408935075, -0.0014999128228245229, 0.03590831793842944, -0.15153224136771898, -0.067460025003045793, 0.052979163538064387, -0.025619303894120496, 0.037941615130038006, 0.064910895081062597, 0.02230202042681128, 0.055270751907329552, 0.092705497561621455, 0.018963378238524085, -0.053973086464825723, 0.0083301495482443391, -0.021218159929265457, -0.030570605486973344, -0.0021454021899788445, -0.026875831051993617, -0.049042673990263554, 0.0051260754520939906, -0.0069454575735653475, -0.055541305029020473, -0.024578161869174033, 0.015168445899802574, -0.068003320439275344, -0.00048112098031016792, -0.056520449187868235, 0.049669608030607104, 0.016316278463441431, -0.034085744774588048, 0.063066726935569931, -0.0080033228303419916, 0.033385837489126907, -0.044575967029709188, -0.023441355247158995, -0.044509209526914333, -0.037161871027802405, 0.0073190175238074615, -0.073157626655641225, -0.011373417119033976, 0.072030602760077223, -0.018015670069586549, -0.00013858608242610544, 0.028374321207992069, -0.025567271987302419, -0.013903313076025374, 0.052807958873996745, -0.038318416663269968, -0.022987196513577734, 0.0062781886098834845, 0.029733530440722515, -0.090236504820046956, 0.0094683723177513002, -0.067606870737129718, -0.012207168455778569, 0.0039498809113422051, 0.0017680506907682904, -0.13205065018196771], 
	        [-0.00048965833343866949, -9.6133835888349839e-05, 9.5024409277118249e-05, -9.4831286650623459e-06, -0.00027318400850575436, -1.2859674043262659e-05, -0.00018753431578469315, 0.00025359827484301711, 0.00013593197045175948, 0.00010671640250792952, 0.0002520834422912871, 0.00030575486026798715, -1.8677323289251202e-05, -0.0001359879426809929, -1.8596724042641011e-07, 0.00018716058456554746, -2.9456499708931105e-05, 1.740372235658344e-05, 0.00029170983943693773, -1.6893395160838542e-05, 0.00029142657372808328, 9.8200013060809055e-06, -0.00012201675367805309, -0.0001821511041478624, 5.8727835859570532e-06, -2.3871151498152526e-05, -0.00016916476120136525, -7.7175542381152651e-05, 0.00053887625860423588, -7.5954327703381397e-05, 0.00047546289643572714, -0.00048532553637742337, 0.00025243488298501968, -5.2889703167802171e-05, 0.00026631391925304587, -5.7069012077345938e-06, 9.4805004026109196e-06, 0.00012583697976619596, 0.00045284900761148605, -3.7921325421477747e-05, 0.00010519128394604477, -0.00021574981428573378, 0.00013058799005061239, -0.00055512020354029647, 0.0001429939062747021, -1.5370391169694519e-06, 8.0653707619851578e-05, 0.0004067755777601087, 0.00038999196381222373, 3.6877374512293837e-05, -2.6107472160714212e-05, -8.5583627116723321e-05, -0.00015583615391241354, -0.00011965945062380329, -3.6535280401381234e-05, 0.00054094084831822487, 0.00037630623255849316, 0.00052269658935158447, 0.0001311189140969643, -0.00040060332113688729, -0.00026993542547641691, -4.3072617173671446e-05, -4.6582954130174048e-05, 0.00011704093153555931, -0.00025561950600206523, -9.7988597560771939e-06, 0.00028045364993524793, -0.00016083954183774771, -0.00025723583975659214, -0.00046505036856739346, 0.0004039314021320739, 0.00034091132239879793, -0.00019370884391506013, -0.00012426188246242656, 0.00014610355538470163, 4.8874632263766482e-05, -0.00016902502798560315, -0.00037191521627369384, -0.00021579609440836728, 0.00039961530180981919, 0.00079812645123661374, 6.5350682398865323e-05, -0.0006637329476850487, 1.4201540184693995e-05, -3.0668778868838537e-05, -0.00013015400162084967, 1.1834065800214733e-06, -6.0452686671833011e-05, 0.00046003104033802422, 0.00029649152999927653, -9.7422158500198863e-05, -0.00054615394798594036, -0.00054555045433753169, 0.00030505150102402845, -0.00012282307114507701, 3.1042354130282612e-05, 0.0001268834643597741, -1.1535964674028176e-05, -0.000176869063298763, 0.00011095223633189599, -0.00059224455990757041, 0.00021684456404430508, -0.00045799378668898855, 0.00057995315228567129, -0.00013936531291453697, -0.00021220643616092633, -5.4136569800536383e-05, 3.6608907478852953e-05, 4.5939329531563544e-05, 0.00021478664432446337, -0.00032699755621773408, 0.00012689634262805921, -0.00034230468492685989, 0.00034767742030643312, -0.00067549072348433575, -4.1513304792857586e-05, 0.00018063222856385536, -0.0001881377600047654, 2.8973339703669554e-06, 1.3507237580291653e-05, -0.00041261401631562805], 
	        [-0.00013436781157403349, 0.00012210804930180494, -8.2414422599333403e-05, -5.7301863805120368e-05, -0.00030739486254432319, -2.2492441595647894e-05, -0.00017176271831247786, -7.7101711693922104e-05, 4.7107570331945958e-05, 0.00017636492999561354, 0.00032836342762108256, 4.1087699566198788e-05, 4.9949350228714606e-05, -0.00011875800957268645, -0.00023943950047199125, 6.1005765033241011e-05, -5.478607070270522e-05, -0.00036631651977345886, 0.00016730329224556167, 0.00025493108839291095, 2.2226604097883018e-05, -4.460834588607826e-05, 4.8917262263498129e-05, 4.1964097110273185e-05, -6.1314318202332352e-05, 0.00022686166653692816, -8.9247938207914768e-05, -0.00019302109650852495, 0.00023804561802531765, 5.5691335582086499e-05, 0.00016699837552209412, 0.00017965604481385428, -0.00038349627139956134, 3.1918639160310319e-05, -0.00021914285377726619, 0.00033657077159139626, -0.00015380926340578804, -0.00012640377325787849, 7.8443598190786057e-05, -2.5921418374194594e-05, 0.00038527701539335657, -1.4538798784193008e-05, -0.0004928838914605993, 0.0001028736165327223, -6.4383123833527955e-05, 0.00023810111270487072, -0.0003138610278263735, 0.00014008262478101469, -5.8913029426684027e-05, 0.00032747301458163625, 0.00039023015135071504, -7.447541605180158e-05, -0.00041729123414768754, -5.2260202109827292e-06, 0.00012735624759406539, 3.6629059847052489e-05, 6.5628761203077868e-05, 0.00021839305017589544, -0.00011813071478151277, 0.00021698143307999351, 9.6287514756765447e-05, -0.00026080214823867576, -0.00039654273422187053, 0.0001167125140248762, -4.0162626760084641e-05, -9.6609081976166411e-05, 0.00019201207703931078, 3.5894679076095559e-05, -0.00013215815809999171, -2.2031139214596929e-05, -9.3108375419856393e-05, 0.00025391719334226688, -4.0757163905339486e-06, -0.00012808461454903692, -0.00015139230658256335, 0.00022616830885492656, -0.00010182951161811366, -2.148301565258609e-05, 0.00028356599204855393, -0.00028490640829138825, -4.2891750138746021e-05, 0.00041455916689240452, -0.00012603793107361649, -0.00039707365188554333, 7.6033479427833894e-05, 0.00029653613924018885, -0.00021374066277618509, 2.327117911399279e-06, 9.5164172314900208e-05, -0.00068014772917070199, 0.00037026320560729076, 0.00019251368934372626, 0.00013551091552941458, -0.00031120640022949675, 9.6849928779750571e-05, -0.00011268464289018038, -0.00023013062013480662, 0.00015401847444745237, 6.4205342809563193e-05, -0.00034974297656181069, 0.00064853396513063488, -4.4729954720712506e-05, 0.00021224544758897262, -0.00034308486716421273, -3.7733988311935626e-05, -3.8868349370377309e-05, 8.6498659390518706e-05, 0.00014456882901125664, -0.00014732698311536454, -2.7613250230533459e-05, 0.00026354361705206719, -9.6315009198065515e-05, -8.0323755983983947e-05, -0.00018998607556105357, -5.9127250430376921e-05, 0.00014091011956727205, -0.00012996537552621701, -5.035229587568163e-06, -0.00015231914400671252, 0.00023099545000895144, -0.00021587551857769893], 
	        [-0.011113779995796793, -0.03264498365428932, 0.032393323977037813, -0.053019160588067986, -0.052289631646412357, -0.14090905182270536, -0.10662971417607917, 0.076743291125837804, 0.19183514586283293, 0.090512780806032617, -0.098345016495789458, -0.011356541223655056, 0.036592642227365337, -0.05386114520342726, 0.021336401858911159, -0.047044247520027484, -0.079543004866070119, 0.069134815260962129, 0.16070569312483246, 0.0038456939033156331, -0.086695570600295979, -0.030081196583984296, 0.022665182076173018, -0.023072771394334196, -0.018331023996742943, 0.0011057635434971857, -0.10917005303651976, -0.046906120609124184, 0.10879721410619564, 0.17214824601663198, -0.16345419009446593, 0.047387129776087451, -0.050130663511261289, -0.029615346796994284, -0.03838162551818361, 0.0016626820450895159, -0.034779798819093558, -0.070943150474272645, 0.077909629347024584, 0.23019976126978281, -0.14284459018595042, -0.033305599050588101, -0.012579026667957113, 0.008416322955214002, -0.032993580574607821, -0.048339483281004764, -0.019525308661791051, -0.06984453532422541, 0.014727444216795713, 0.14996686179447366, 0.078031653033860421, -0.15724129008645732, -0.0040330836908469385, 0.020646425620089916, -0.010654017089976087, -0.068656231122255579, 0.024297601174406921, -0.0024877247232191202, -0.030227587432549025, 0.090227014733457928, 0.080842697753928994, -0.086654876220284532, 0.012959715152821044, 0.018917133744079905, -0.045623035776481892, -0.032739391111555147, -0.036378708143565655, -0.052934938098819245, 0.0072628401319736191, 0.025315816651209383, 0.065354988831480165, 0.050830135881118316, -0.051373434850408066, 0.012062843823364068, -0.053921495179175792, 0.0041695268579246721, -0.0082264831168346701, -0.011220404620470506, -0.0075848833821621966, 0.059000048222753509, -0.039920656848886502, 0.11125743952652592, -0.021519034940123919, -0.057332486848285534, 0.0055259953878360642, -0.004210488740013946, 0.0091543763669089812, -0.029533996573194402, -0.0046618916800951343, 0.086826792205214331, -0.087905681977735253, 0.060049094735024719, 0.082239574433654317, -0.067950997259202672, -0.052836508855635379, -0.08178791847111451, 0.043805514127629036, -0.035918644150708633, 0.030943034122503259, 0.048873707654045383, -0.078419292949069422, 0.036039114074194384, 0.15301950458013516, -0.0020635318713273093, -0.062144295014710749, -0.0042182974120457458, 0.018342722938454691, -0.006300758423097505, -0.011523161046205615, -0.047258227242310442, -0.028717665984571757, 0.078801626072277128, 0.069201975729093201, -0.080059626916277549, -0.14106514638245227, -0.025481816722181624, -0.020508997543042289, -0.01550940323134436, -0.0094705410641920743, 0.014878235172793254, -0.0034914923955158606], 
	        [-0.049718431000340013, -0.035758892423982919, -0.022242832727659471, -0.035623182950114192, -0.068946269831888563, -0.14441155948249546, 0.23465172605260556, 0.15846679355786267, -0.065971982658149603, -0.018535961144545934, -0.024797174426993557, -0.0076368074855745118, 0.0066227612551196706, -0.017526536442783753, -0.010789194077319021, -0.040286032320290231, -0.0056961640316873343, 0.13973218361056991, -0.042841041755946108, -0.030912602586234482, -0.050612857016701492, -0.014451167351557435, -0.033321133339262024, -0.05328285157863482, 0.0084956582707995769, -0.033398618106686311, -0.10205034437720886, 0.030196139746642148, 0.2111090058125159, -0.085711586785949756, -0.030766677319517009, 0.0065005921075326949, -0.032107623303140612, 0.010380556950672306, 0.037670595949217942, -0.056206087740664497, -0.03260370052730352, -0.1561008405998785, 0.15115473184883424, 0.087468002407858153, -0.079714267429888366, 0.018202271840872142, -0.0045105431343512043, 0.026832614720378654, -0.043425866989209555, -0.026066523869096081, -0.02528972705916014, -0.042096869598745652, -0.070925721200100544, 0.23530476499553221, 0.011520678728863858, -0.095816584560911452, -0.018725466710660395, -0.037048558120658111, -0.026821912497833961, -0.01958185753544785, 0.044676748759910678, 0.028809635953963519, -0.05826188687569988, 0.024776575417213054, 0.12549740842491305, -0.035929129393416859, -0.087118885673774085, -0.0026901477265302994, 0.0046237475146514552, -0.018050296026597318, 0.016779033899148251, -0.012651134169698123, -0.089944685004007208, -0.061952592133401846, 0.10990524701743055, 0.15037999590612067, -0.090163580684813671, -0.035133862878716476, 0.019258114736171422, -0.023010078969621379, -0.026283022557721171, -0.066214843146827421, 0.0036081782275008047, -0.019205792810695364, -0.020171831093293915, 0.1989806157237472, -0.024158681457602471, -0.048082389466265169, -0.027408223538038137, -0.075525139612688572, 0.064454122161252458, -0.058575382013248689, -0.0086368186115048165, -0.0086035574489204472, -0.06007705027057858, 0.045971736951263456, 0.1261833313396889, 0.022410860296875529, -0.11049746928652586, 0.0069619169388782584, -0.0094112963401279358, 0.015502770454642434, -0.048438381054499359, -0.04682917755552031, -0.00022238890926721058, 0.0014117579120073859, 0.089525343812046881, 0.079141464963506603, -0.092462497930681176, -0.018048972610507721, 0.0014867057354299527, 0.0047595475949270549, -0.0017287964469103294, -0.027304885422683407, -0.032110966856619273, -0.017611444082195685, 0.073415867740449725, 0.11601887154016219, -0.044348274914784672, -0.098407184448392707, -0.0088182813632140204, -0.042990020804917144, -0.039402653777542929, 0.014836527788627827, -0.050635006343958483], 
	        [-0.068700619776660254, -0.032923512495656206, -0.028684838657940429, -0.027346807901848392, -0.012437513369475654, 0.04530776482700738, 0.14146963669196641, -0.024737285685323483, 0.021872256378449306, -0.029614351891534337, 0.0014704403181207623, 0.00061449227400070527, -0.065002449904543999, 0.036643808233299588, -0.032209783114478335, -0.013719980201209792, 0.00426188928669817, 0.043978918430192894, -0.046107785040272825, -0.020623098141049494, 0.092668229881848918, -0.085226509118630056, -0.047326937943777285, 0.056895689933855451, -0.038867744245311142, -0.0917328495389379, -0.0024675929250557657, 0.054788109957318712, 0.092324754023680886, -0.083976508299966168, -0.022272456922531034, -0.015278750110002501, -0.037660821714487036, 0.0079480050392521789, 0.035560068131964134, -0.051925142923762622, 0.0048634554998182172, -0.05161245009194064, 0.069926770229373256, 0.019603910194766427, -0.058129948226766356, 0.034120468186704639, -0.02278922943675725, 0.0056803547423852491, -0.011190673015587217, -0.045209539216465838, 0.042701687889130674, -0.027745655178843524, -0.083075835673998288, 0.15661348719695239, -0.028533516906845684, -0.064018904490445727, 0.0071637332946361681, 0.010946513456513277, -0.026171760394870333, -0.039176510971348735, -0.052625382319528485, -0.032610615849156512, -0.024151118786911202, -0.029592259235384895, 0.14367118076515981, -0.017566095578734467, -0.054659523961357363, 0.057155438782691928, 0.029811006572219523, -0.061339856579619337, 0.040778203393560836, 0.011699351049567291, -0.0088243741839378435, -0.13867569479385672, 0.0070547616779323835, 0.13839794109305759, 0.034595641270555019, 0.011188421962504996, 0.048423842059529723, 0.010037686002641197, -0.0018497520280923579, -0.03785572945780738, -0.043325856166240725, 0.0080411887462800754, -0.13690073357640112, 0.15427462008814505, 0.053185882421555128, -0.062848800580544401, 0.098908008073918904, 0.024336051774163703, 0.0012517787347508663, -0.02085091104539423, -0.010458871685104971, -0.013997622908016392, -0.062995080399173814, -0.12717711870320439, 0.18117010896522742, 0.12557740084057686, -0.13691773676225652, -0.022943723539645338, -0.023607554390057763, -0.0059308586972001906, -0.029008536818149494, -0.11052936897449649, 0.01676636486201016, -0.0299062367975718, -0.010995032071071418, 0.17825885072525774, 0.052695253789213546, -0.15856871540171691, 0.018373413764860413, -0.062619297278227404, 0.02519282178146548, -0.0018928521098937135, -0.067840528056599431, -0.050794234172886574, -0.10116936098857549, 0.13362153032125096, 0.3407549635188265, -0.12171874249866213, -0.21070461874955115, -0.083359485995745247, -0.078475687667453164, -0.029251874573081954, -0.22249275032005275], 
	        [-0.06557132981627023, 0.057387702833085238, -0.13424650578557906, -0.095896584636417009, 0.24651372455616202, 0.14475023251856034, -0.10963067096889349, 0.025484984396096345, -0.0066750222960001646, 0.018031088995289345, -0.072827217628290308, 0.03072620730408979, -0.044556908489582235, -0.015540996433387919, -0.05684501901116374, 0.085633232484377222, 0.10033013618746886, -0.03742948303225134, -0.062461794161772756, -0.033926854157860981, 0.014833446973797017, -0.031363558199583357, -0.023246290106997476, -0.032758472101354803, 0.02961216484574446, -0.098209283771892336, 0.077943952125225799, 0.095671313752652476, -0.083245612577197897, 0.020905717661596379, 0.050810743632591124, -0.039132208011026501, 0.038703668840843024, -0.040633395391036504, 0.00067527853135830943, 0.013989351386346478, -0.13054119279823606, 0.045163670832086458, 0.11112335558160061, -0.063735525164717574, 0.037782451346632551, 0.017424010888546733, 0.061583223515939242, -0.063673752054099628, -0.085357765364971541, 0.034715298877846669, -0.0030215396455599607, -0.074514610988951263, 0.12038888042278573, 0.11914516519976012, -0.066498159580288485, -0.05748981868984826, 0.021247874106887919, -0.043395801614457857, 0.056092405859263811, -0.05090562582130901, 0.030755476067636615, -0.01704186923067369, -0.086372670819938935, 0.043707175171625617, 0.071729094880973843, -0.046172009255220331, -0.12569107869407672, 0.062777551061848486, -0.054877769372877368, 0.0098492983016237878, 0.042534935799133616, -0.025427465203307967, 0.0048504140831612669, -0.034534331263074952, 0.057141387115833393, 0.071824130085929444, -0.078856689082400497, 0.046186589384248661, 0.014021943501927311, -0.0059724118990401249, -0.059074101001239145, -0.052311447457610932, -0.018659392189258467, 0.016795417135235888, -0.048576100654742473, 0.005696565881307656, 0.17000984187958204, -0.14025171691578273, -0.014920288189935977, -0.02450105995756531, 0.067679703872773542, -0.052641577006571058, -0.077081344604230786, 0.042504990176632659, -0.035988224869212784, -0.048450595717557901, 0.047674683252699607, 0.055032983271467065, -0.064761096554407135, 0.020292721123239928, 0.0052680731730131965, -0.008724092125284879, -0.060606693409500888, -0.069110808496291656, 0.024795838594949066, -0.027097938518918639, -0.0012386914962327609, 0.015076588937461598, 0.055874096614049337, -0.027944142757713664, 0.0052288086550267444, -0.048321181890514542, 0.085961844501422302, -0.0020462600675238323, -0.11993808096408821, -0.049600877387059851, -0.092973801829541652, -0.031980349139618128, 0.15102131486065962, 0.082755130102661653, -0.05812569461482564, 0.041661463970234, -0.037047057993232331, 0.00087626833626111805, -0.080283390973512447], 
	        [-0.034048621962106597, -0.013918394846682072, -0.06548772211399817, -0.047310073653148807, 0.23782208982702535, 0.10576669895809315, -0.16563976884791567, -0.0108553004703765, -0.078836410655958505, -0.050020076625922213, -0.082311636984324865, 0.0046221592868833806, 0.027970146226042773, 0.0058953162542283617, -0.040403941884181518, 0.085253805301136465, 0.028249211911977573, -0.056799025228174559, -0.038359856825438986, 0.064561651783710705, -0.004954534081803498, -0.0026872237095931402, 0.015597774984475364, -0.018251513667145277, -0.059710086387074215, -0.057150732848946277, 0.13137766031471873, 0.056842489251044542, -0.023477089345610051, -0.04715337162739789, 0.00085770297510117874, 0.011008761901938887, 0.0056123703931996918, -0.055914997492275034, -0.028097049059282828, 0.048624529525826458, -0.09611678916961594, 0.13044452791174554, 0.1272054903208456, -0.12259017298086688, -0.022445774624546361, 0.0076033086689639515, -0.007813929706646499, -0.040902985091359895, -0.00098022228977209802, 0.010151778602803127, -0.055308792888781488, -0.09226196374306854, 0.078710234946180416, 0.14963503373654086, -0.059601167114054721, -0.075910372743932211, 0.069756019388331106, -0.012391419754460144, 0.016171610667790957, -0.01017022339581132, -0.0099408597626345213, 0.057862818914423922, -0.053500193833918241, 0.0023150521701103197, 0.24267633702175795, -0.1627124626737711, 0.0030389904814953246, -0.0019134583602005394, -0.031934733720563539, 0.031240729347724282, -0.013447900401826515, 0.018762854504427245, -0.027194103497078681, -0.063834611729319063, -0.019315034866382974, 0.17296296924653209, 0.0047779566564492282, -0.046724087968013847, 0.00063750179780768315, 0.012018498525607005, -0.049906231428034672, 0.0631023423942359, -0.059113148710084523, -0.0019439172858828069, -0.014409167351918703, -0.015148208183996925, 0.15802729853460101, -0.009547054530539667, -0.14207668185762945, 0.10783009215784571, -0.029316341593904699, 0.0049958861272639266, -0.027229716588043594, -0.027547849025221866, 0.011938104583316997, -0.054219992876510435, -0.092135020260128445, 0.23665714027812351, 0.043819126959151938, -0.041978283190380716, -0.0056029326770753868, -0.027255334727821774, 0.0096145043238918745, -0.041549931903191728, -0.034068436330191069, -0.012401382536206651, -0.041537969321840174, -0.049314333651992288, 0.16482326808377185, 0.042083362292458376, -0.1097240094748354, 0.066033601812019324, -0.0077249598120593538, 0.0029248566859087777, -0.080850631612695664, -0.057690051594666086, -0.037836445771667115, -0.093750009831868486, -0.14353454214499062, 0.17090805592445343, 0.14406736607449203, -0.019806817871862357, -0.037179860963505104, -0.013199402310805103, -0.047378006725271239], 
	        [-0.089355795589857873, -0.043598613334664152, -0.040685490869347668, -0.056314801498742351, -0.064317257271733375, -0.036305703402461552, 0.087124549743226198, -0.025232182382037796, 0.060762583071081767, -0.016932442688114099, -0.040974561824924392, 0.0011692733530746166, -0.023469947694595206, 0.039360151665226911, -0.004433224342906196, -0.014202479654525112, -0.070463664877363302, 0.013142057597150633, 0.0033619826211813905, -0.010205721175565105, 0.039510232304449916, 0.020167450302709292, 0.056938011555847157, 0.034174491642619889, -0.062666774603916287, 0.083900397057253467, -0.0039050936206950077, -0.12023709783757955, -0.019127477277872861, 0.068195203204562405, 0.004239692936547787, -0.024727068518684399, 0.013195391150686318, 0.10092335285374379, 0.083732978098471689, 0.093601488222699147, -0.028064279101364227, 0.1530929534721796, 0.01908068436728888, -0.13458558446941826, -0.041819118595992209, 0.023907908538223728, -0.0036807630455928317, 0.007893862945026961, 0.064006968331711225, -0.027474745577589776, -0.014962346779522961, 0.019431039040092461, -0.10421624372835411, 0.18788293784249166, 0.0038646939965042704, -0.021850967831761797, -0.071620009503902279, -0.0073304196952225197, 0.023479102591966762, -0.032992466061732159, 0.074771930860797808, 0.11997396053811867, 0.16652757445893027, -0.043450925728879812, -0.19633494915962973, -0.015120380697294114, 0.015595534851796003, -0.041435710686911043, 0.075826650575169657, -0.0062698135667015216, -0.13523262558321089, -0.13542793759250013, -0.079399992955661691, 0.013399321738180064, 0.29846443483321561, 0.12612688550553225, -0.082084690167688573, 0.034499018867023584, -0.060887460666349029, 0.028443725041023785, -0.036122039638383077, 0.0051284231998723478, -0.04605609290697394, -0.18431251645987262, -0.209810670926456, -0.12018234374910172, 0.095623809719311254, 0.012101575052632325, -0.022524769880679987, -0.045282477028056718, -0.012822428753938651, 0.043771209187441484, 0.080442241536594447, 0.053685027638862681, 0.040661690320921172, -0.010274132182098798, -0.10557211882546326, -0.073595782434368109, 0.038444068551446525, -0.01907471602474492, 0.012245888918847134, -0.0015393549215302338, -0.021036517265939442, 0.05518243063690028, 0.044093645228280701, 0.028389644682731155, 0.0097436040384290198, -0.041472720807566095, -0.055377684790392047, -0.016991109046279269, -0.0081617619250853313, 0.0076016249396629494, -0.0066456574053765025, 0.040565096868620157, 0.081751315687418724, 0.050780047897429154, 0.1155676026022933, 0.055483067679641382, -0.057897491813207046, -0.1105898575072263, -0.071828681966453228, 0.061970511290256887, -0.030281369882132307, 0.019304831483575841, 0.054296933756856992], 
	        [-0.2437388912119279, -0.072313525080502913, -0.041971984175469032, -0.14300397257914568, 0.061522596957557102, -0.030205439566140864, -0.020864680638780005, -0.047647886319076141, -0.004129658790494567, 0.04027736046562435, 0.0059092092920419587, -0.061426215758847547, -0.049227621653249579, -0.070004334019369369, -0.064272761487378705, -0.026633980149117817, -0.065741384613963089, -0.051050316403064497, 0.0043410772798304284, -0.016116178354041721, -0.031515372710218439, 0.037031195841364675, -0.1228147574490851, -0.030325889054245894, -0.047121946899635309, 0.006945477959475678, -0.12020262635091686, 0.033919560718345204, -0.036501468385288172, -0.023249455180030049, -0.11560461380300818, 0.038387197660639291, -0.0026532986572997824, 0.061601452701894321, 0.10391565419224812, 0.10819008673388165, 0.068685203069905748, 0.11775867403705874, 0.017679110509122742, -0.058901821293154327, -0.020290611595912264, 0.0001469059966410502, -0.12261361036045612, -0.010208071253787782, 0.25551979619962417, 0.13824223662087887, 0.14467947383464419, 0.13522961725652033, 0.19144244169061975, 0.3152710823580756, 0.11571778386301039, 0.11681561560364913, 0.032566473003269106, -0.050278128345735251, -0.13473831638652176, 0.00889663273590241, -0.06668638820919999, -0.10871364490994836, -0.18658986296561081, -0.34157171141342124, -0.34638493808149179, -0.011264008251140406, 0.029142444614928986, 0.12461122431395127, 0.10800578593966685, -0.022809897357387282, -0.047431594853249527, -0.016065811361968149, -0.012088172884114928, 0.13024386066616567, 0.16585917678227963, 0.08223171490137017, -0.18073427281823529, -0.23905771961269479, -0.0034760942387594002, -0.0025528511815767485, -0.0080703270400058758, 0.035854903717420804, 0.060889803984584323, 0.05280523963556441, -0.0033159964189498209, 0.12385169566242266, 0.18824042049023279, 0.29210060042127328, 0.11943421064782488, -0.07449416534755314, -0.037461734684461859, -0.023737648801047031, 0.072598572988186116, -0.00045486095293109652, 0.00074298234712233402, -0.0015928557141097338, -0.17246645124725063, -0.15444027225745488, -0.13465384352760257, 0.032776686516006764, 0.070859809216384226, -0.0004770524214243281, -0.032343629149890175, -0.039986157743816128, -0.074752388387847202, -0.069851711472991157, -0.082819246951454234, 0.032778177162039637, -0.0042937782327582136, -0.015012757926196954, 0.01819273756147026, -5.6098151787711825e-05, 0.019859569434228445, 0.033074166094270323, 0.016572156520835511, 0.091964106413136654, 0.073376911105508508, 0.098478285913656774, 0.036105178755291706, 0.050869520986871988, 0.010385433683375911, 0.040242105632122271, -0.070134750890519848, 0.0028041075844665309, -0.10929235377523264], 
	        [-0.076118949202517425, -0.019269106767557935, -0.031754535045991392, -0.046455653491455862, -0.040704384737309626, -0.050843290857606804, -0.021973706618717698, -0.025543401663111642, -0.07416056040918946, -0.013170588459795768, -0.11347265323402626, -0.057227893055629329, -0.029590820633760687, -0.034243625770240413, 0.0061905334896895231, -0.0094644557199642584, -0.044625667555150392, -0.10436846800575, -0.028686249322612808, -0.041090017647881019, -0.046151869816618452, 0.0098325948939372923, -0.067695778385091526, -0.028012701414139411, -0.071396857165263158, -0.075353072177860636, -0.10565554313610695, -0.075522794580878821, -0.026283961786762969, -0.031035439373623519, 0.045981881415172052, -0.029752407317735798, 0.011392587697051898, -0.1039429255200454, -0.034764441427698627, -0.037846056000007268, 0.00012123885743986484, 0.091278706547537475, 0.14577205157542866, 0.1104215855219802, 0.18869952301023718, 0.10738370259626208, 0.13268927139759373, 0.010378228400827957, -0.052734405426765968, 0.07627991587110855, 0.13003488750036463, 0.24685954687761555, 0.21183725748584104, 0.24704340387352622, 0.22867523573571288, 0.036921057188982587, -0.028737222239043028, -0.070384615788671751, 0.0055155357845693004, 0.11568430941686651, 0.10660133014829948, 0.19511953592195094, 0.045422489839321928, -0.075768281672479496, -0.18361820859428674, -0.31804072962510349, -0.19549450758187809, -0.077995164144666299, -0.031296132745874644, -0.077327917406273622, 0.12870564027407561, 0.041486516535153339, -0.13922180905243858, -0.20395686432544152, -0.1572834919140717, -0.072166722893366869, 0.086563963129244234, 0.10757801321268952, 0.081809003061111898, 0.066724060401920929, 0.047445258557963374, 0.017639198538912979, -0.1058218276867447, -0.056754378546732487, 0.048224352355707559, 0.14306872525152498, 0.12358807932424302, 0.071726754535007084, -0.018593224747300865, 0.069247194070239257, 0.0029737893381716479, -0.0012683824671753524, 0.0058616562424005786, -0.039955178776990612, 0.069868180941963884, 0.014017003861568525, -0.046600910938925849, -0.047068333385668161, -0.046681863281231521, -0.024440679090069646, -0.037553368502167325, -0.059138302137312151, 0.039269526323743462, -0.033803159785026828, -0.016677251343357832, -0.036287370622927695, -0.033653158506393541, -0.081054618119207861, 0.022448731777965539, -0.051864605704516141, -0.0022564588924538012, 0.0065500568568099202, 0.019613695988714784, 0.035674619157173841, -0.088137935604942944, -0.049861006869088897, -0.046523335250325093, 0.015602894296518968, 0.070302678780579275, 0.025611762172576102, 0.06845737037990568, 0.035739036571478075, 0.014800222944481767, 0.028993857532204525, 0.026773523645769501], 
	        [-0.058789866419249687, -0.03992289616881476, -0.010605417103711993, -0.018499457729712329, -0.004865080190320413, -0.060301330529616955, 0.00031834469339242499, -0.12557104846760686, -0.080004274046988455, -0.13698273850528309, -0.22799077610365462, -0.025563254532452423, 0.031596931721125744, 0.034180802606017344, -0.050379683190577049, -0.036900574597293838, -0.020122798822353932, -0.11425996362570746, -0.082449949096166764, -0.12939384502163268, -0.015453432533256775, 0.16525998969962169, 0.0054733899561779098, -0.021933035683807854, -0.058344539474112764, 0.022961713249665269, -0.037437068374264519, -0.1277856597415159, -0.028890639336882469, -0.0028919209327963741, 0.26948646721448222, 0.1755823507659644, 0.34733594380543498, -0.099005604765418503, -0.03282593950620348, -0.065174445338135711, -0.02845735040351216, -0.062602372298509845, 0.032022397582957891, 0.15695159271707296, 0.34154299673599708, 0.20280139720653914, 0.12458150522764966, -0.093375723727740126, -0.072239020683553506, 0.0090947163917505652, -0.044389015283926039, -0.052574599103869434, 0.029479831254029615, 0.26924859691625802, 0.22826750438753873, -0.0022877017320989818, -0.1114646531276304, -0.13529114203352183, -0.15036111092012305, -0.085842755314764929, -0.024536907507225265, 0.0086890807497300507, 0.021944209642358908, 0.16653403493301283, 0.08152009064661242, -0.14404674546435942, -0.14990102541427039, -0.11121323411132536, 0.0010729953777799395, 0.098095234511134735, -0.034221197248638688, 0.0040175961684953184, -0.018012784825030465, 0.073210106805800909, -0.0072272106254334667, -0.015972640001127802, -0.061003687664664949, 0.054833426188111108, 0.067576339145725264, 0.074127017865976058, -0.042423930579678311, -0.037337363882495159, 0.022891392960963857, -0.0034269311956898834, 0.04377607969407446, -0.0055550198865683478, -0.060684852096268893, -0.045928233440519814, -0.0088830951753407356, -0.077574617772135271, -0.073068573889404992, -0.0075845224916686986, -0.05870405744262968, 0.032429727788504017, 0.11139987187807623, -0.061069384823273565, -0.022957481391546936, -0.081456668310723568, 0.013486103859614872, -0.10699268871745335, 0.026815142447461103, -0.046958076560392775, -0.0095643677181986124, -0.0078126265354927348, 0.021325652288010453, 0.027800587316513206, 0.056728645862545959, -0.07588999178312969, 0.001849623431887229, 0.022933740393987989, 0.013435613550251885, -0.030879626804123601, -0.0049468588623556402, 0.0040992199004741686, -0.0091408161111731587, 0.10871928144408688, 0.020712482757044768, -0.030869482809578623, -0.0019257988508574048, -0.011927083397448635, -0.081405740634482276, 0.063922112367951894, -0.010456133387573327, 0.03707660212821462, 0.088835355921773829], 
	        [-0.036641259174083958, -0.022318782338815249, 0.024522274312524583, 0.033440491760940591, 0.088325318805097308, -0.078447223191200052, -0.047208492835296774, -0.047259416670676881, -0.025215781435357056, -0.015414996185524978, -0.092115101238035485, 0.044024131261608312, -0.0091153987713104428, 0.0048974270909144524, 0.030833576332085333, -0.020765236921067881, -0.020723615749795563, -0.012243854655765614, -0.046289817377706238, 0.018593204344671412, 0.0051453347328788007, 0.034378456965152134, -0.060076223671287794, 0.057462262515044049, -0.029604759889713811, -0.032984761062248569, 0.019793815460092429, -0.091801878345608684, -0.03956459119173994, 0.14253192152349636, -0.01806439485632861, 0.012289491688936907, 0.04911968723662781, 0.057131455553269941, -0.0053968509987426319, -0.027773037404305069, -0.0045553437237598471, -0.016293864219002016, -0.1018126126459068, 0.21507853086133841, -0.039233573544075251, -0.01388758790666203, 0.045506921385831317, 0.12176852006259906, -0.0049585365213533662, 0.012483286148479648, 0.00022150651974826852, -0.0047489494995995168, -0.056359601414396263, 0.17519663761795012, -0.055694439201051764, -0.082196839716537948, 0.064537741077840327, 0.04748422973872729, -0.0028928449210207825, -0.015338697146168576, 0.002703261150090952, 0.0067497963183427712, -0.040248133668722312, 0.078968141080816637, -0.10963403655958821, -0.17062543905350416, 0.22859560603386642, 0.07851962872419016, 0.0080330152274108758, -0.01142427708908322, -0.015145649505435649, -0.023532868284188511, 0.0099659612341810866, -0.026743099199774509, -0.042414654589513018, -0.049675570929287774, 0.29646343280477494, 0.025690805425905093, -0.048511227932622428, -0.10023827450589579, -0.16647012418573801, 0.026747181544677607, 0.034918992877789233, -0.012381071612453791, 0.031328960840184238, -0.03808798675298581, 0.13554403224476577, -0.038600519161136035, -0.15955152669761682, -0.18650119722295797, -0.057062155489439867, -0.012769517962987352, 0.014753730819575053, -0.034539139458789864, 0.006058740052616929, -0.0098108713410034829, 0.069117277622840978, -0.071244146237570763, -0.13192760007023469, -0.031815896848603233, 0.027197733872446832, 0.044915537687674, 0.13641539907523023, 0.051541344109272018, -0.023022917497770818, -0.0075024647062180427, 0.0075301826652961409, -0.059347528011641199, -0.044234947284663123, -0.011581128699856197, 0.0014665467844986665, 0.047135698296650763, 0.015656423092764042, 0.066012956376650042, 0.058200473354046559, -0.015586985696736753, 0.0052092264230974294, 0.014817241711833552, 0.018388023474896837, -0.086675877098822782, -0.067044063522772729, -0.0035215449899233878, 0.064161373931149845, 0.065318498548821255, 0.067259148989151349], 
	        [0.0045060454140400386, 0.045655120374964497, -0.0064830700717017822, -0.0032628436084326529, -0.010410124902832244, -0.03702402040624643, -0.036963266474149589, -0.091093906028424584, -0.11864573227941409, -0.064289797687791306, -0.19247581164633484, -0.001736762598627155, -0.0097469459578441008, 0.0016447907097145286, -0.040872882087491146, -0.014221224057596007, -0.035842689053500638, 0.016146856355897986, -0.039843139194713842, -0.093130420560655763, -0.0023746538984200771, -0.13830477342208627, 0.028428452224738408, -0.013697468079493669, -0.11156935100514298, -0.0089864206453983495, -0.080752864691162371, 0.012804209858369449, -0.062406450316134982, -0.010725880834214149, -0.033419853775967602, -0.013381072105187686, -0.12601376127960781, -0.0011651414984304651, -0.096302794160834315, -0.033960833636545611, -0.07271627207480294, 0.035903231272948394, -0.050366776129811802, 0.039465836216112535, 0.089595240957993455, 0.080323722760925531, 0.15694230593686581, 0.13046741922551686, -0.10541702655016309, -0.055080126117310738, -0.0081043441898794311, 0.049795401559017696, 0.085050117897638097, 0.33220650657354384, 0.25591351064686196, 0.17170416430885482, 0.11686339946258112, 0.11405546450621301, 0.22946835883838218, -0.012135608835537007, 0.083665324516254844, 0.13743718640771305, 0.20760286167445086, 0.024810385626267768, -0.25485287037990362, -0.37635120927444349, -0.27148633180868637, -0.10307518032579147, -0.073758021077069053, 0.006322005152026515, -0.0071614241191596956, 0.024394639535414139, -0.030595356710155303, -0.22377146981167628, -0.21688041618965234, -0.060604397244649409, 0.18640642704652977, 0.1411775414679666, 0.071715708604953896, 0.013663567087826838, -0.059637629532230764, -0.079133304381083139, 0.051501100412118382, -0.10958403078776109, 0.040357653528253698, 0.24551987265937023, 0.19850031772812765, 0.13276295660894386, -0.0033277520526472926, 0.095717281270899235, 0.0060754811619981117, 0.070214032074900512, -0.060295737352707629, 0.023305858534584164, 0.036241683301989451, 0.094785196684708778, -0.051030541969498217, -0.048582060783967027, -0.13620414142167206, -0.042785196097045466, -0.055491249841953014, 0.0010026144494500872, 0.011273492179008152, -0.0070417417384625314, -0.02690303608673969, 0.012495419954788797, -0.0049652674891686524, 0.014207910106334196, -0.058316356599182127, 0.020100992201083454, -0.055565658068763756, -0.058257850577289112, -0.12154724005307756, 0.036276619232864585, -0.11927424459722163, 0.1109090327897103, -0.087204589244144426, -0.0029129212052817939, -0.025028390260139831, 0.012106502056846706, 0.068613886378663252, 0.071374295120005704, 0.098125263845276922, 0.14037322438964439, -0.0029560423417013919], 
	        [-0.086666708451327651, -0.065564519145399541, -0.023817463535297907, -0.020440748189549322, -0.071969614065115983, 0.00028668951002261411, -0.048727572694679672, -0.025160320872547617, -0.071502198767284489, 0.0094940082400308788, -0.072386589094650886, -0.025153788858944419, 0.023459850224754719, -0.05950332009913685, -0.045615311205432989, -0.083519770284241707, -0.085543219025638439, 0.013730208280768347, -0.021148981295175229, -0.0073162588177247967, -0.037712812535064255, -0.074773800976601495, 0.03462239265337725, -0.02547365067836567, 0.030186212545732116, -0.019963247487852623, -0.04969209404043104, -0.11327298065324004, -0.074519227217117595, -0.12603792583344542, -0.037063997844313232, -0.024954205133118107, -0.083735964905377686, 0.024750173546374571, 0.059330282701814688, 0.062204749968921932, 0.17133136972067453, 0.16121648224746851, 0.16387294452638612, 0.058308117323603761, 0.025830807003138445, -0.043479982176188162, -0.041636429687936197, -0.12914102690849677, -0.040109360336824149, 0.020146168363946934, -0.0014664956647692795, 0.091342016467911402, 0.11971706786628006, 0.23880056181382195, 0.30997519288915309, 0.24621925944009149, 0.18586785581035009, 0.12052801882874073, -0.0034211287368824117, -0.030529992172357766, -0.032290577650566622, -0.07619354278341188, -0.1960657681886227, -0.20015100244650072, -0.19677279724795954, -0.18308786989283266, -0.00055713480106216878, 0.13743504158235739, 0.12949126333024466, 0.20559599476304927, 0.02351134428016869, 0.016946777735827437, 0.073623968286197633, 0.065649323472256313, 0.062699413579597518, -0.05017906172626907, -0.092252062144122904, -0.22544582106641978, -0.14498855282877299, 0.019198250206979468, 0.08296161046033787, -0.019486237898005958, 0.011992512029289193, 0.041329981058323459, 0.07636271244077264, 0.031761554053674354, 0.15907477211435514, 0.10336465086935449, 0.039866126496747839, 0.021911878458555786, -0.15923424669690406, -0.013828911493878555, 0.076214097730179772, -0.018094163035829308, -0.022784108454190939, -0.07576679032280903, -0.00479472472165271, -0.12287034163039613, 0.031158696953220461, -0.051655022084203854, 0.096187316481263704, 0.0095670984140750134, -0.031623662424778903, -0.052567997778793368, -0.0031420233178607662, 0.023308733927797941, -0.0023387082999069553, -0.0094487986093912645, -0.04582399432870362, -0.0054810246023805631, -0.081257910575128434, -0.053087043188049285, -0.0010084105650565306, -0.10300285383556548, 0.05010294929397674, 0.039084033656922076, 0.00078260416687278567, 0.06658472055870629, 0.019512702741612473, 0.078540493706748191, 0.012933307469298647, 0.061861312662757253, -0.037748621235955342, -0.044013957061032435, -0.058653414400645094], 
	        [-0.23765593793991233, -0.10644252010202958, -0.14205331737791968, -0.033409658821102896, -0.051746525740039011, -0.04902914905506061, -0.010142689387288009, -0.045800121111205794, 0.034452092003027894, -0.037462523290761315, -0.052617568352887403, 0.10954838938856398, -0.13610118046500422, -0.0095471511929971949, -0.12706132231951731, -0.092228798361772418, 0.021263651882758011, -0.080027642431201571, -0.0100550311904971, -0.021203318677089002, 0.016576191285134906, -0.028370386427869553, 0.33291003086902288, 0.28090106038207852, 0.12847553299199477, 0.033792763942573037, -0.023904470117744384, -0.16851016358623308, -0.0060729181420751625, -0.023245122034615213, -0.056640550891660243, -0.012010707479483837, -0.098774094475144666, -0.064504327550212237, 0.10265691959773923, 0.25554233719714792, 0.24276990386303868, 0.21966976582871933, 0.11091090952626349, -0.10183584175603527, -0.087459644795301786, -0.0029720828981545685, -0.00012924753214214532, -0.025079977013448711, -0.086435061104407823, -0.18087547713194091, -0.11352267862578171, 0.032889611202360142, 0.15787019926944854, 0.23051337575410985, 0.14879854133516468, 0.032437611765298205, -0.057059196511395328, -0.069308077657970535, -0.082356064599434647, 0.04228548674166778, 0.043412923933183953, -0.072264826939583221, -0.16689179449726901, -0.16026349114722624, 0.028474874784694099, 0.18131198489108219, 0.041852912264988044, 0.0049306527163999643, -0.00083249749637829239, -0.047831996372009418, 0.0010252465231246899, 0.017497628114831826, 0.074031972038296395, 0.054062759312123537, -0.0048788678858039461, -0.1017614042122941, 0.018693005132704797, 0.0076210492973557671, 0.0085934586035815354, 0.029130058487575196, -0.076722340878408429, -0.04443504101988021, -0.041904181084809797, -0.042181657033595429, -0.027448364698935662, 0.043452694941417874, -0.014281471541844684, -0.11364364120314924, 0.021624342767224931, 0.059887867734099376, 0.048249692701759446, -0.025917915651940925, 0.02805763343822287, -0.035965266748084215, 0.010590677166796214, -0.061232693431225199, -0.057899063583557495, -0.08844340564057801, 0.0012600977398065059, 0.015191608284153623, 0.014315608183696132, 0.039038170262391945, -0.011070372964504849, 0.0044675582793348174, 0.0051525001918035183, -0.076856408464383241, 0.024632015663543207, -0.046933647548906957, -0.0043118009452010539, -0.041968903018102854, -0.01569526374931584, 0.013525540172630385, 0.048796773614702041, 0.00035467155966114033, 0.071901198369965086, 0.016274926781300325, 0.070923477382927924, -0.00882484521729196, 0.043457848227967125, -0.01463905425635062, -0.013191689698509215, -0.037524320749473053, 0.024708931479837257, 0.057086614057279259, 0.0058576139736190606], 
	        [-0.024541961538258487, 0.03267163162338621, 0.11772757167816214, -0.034174233168758797, -0.0717426324714492, -0.16174536289395333, 0.014164562611569745, 0.019531072825155295, -0.054978468415161165, -0.0038956868428951796, -0.090196113790009247, 0.064812251885165414, -0.0472339389168712, -0.019133679594543138, -0.080948115948705671, -0.1101849445159255, 0.10726549986933923, 0.11986161329611322, -0.13898042378726411, 0.029469805860096759, -0.069941197461236101, 0.10165481762063706, 0.0042591037232074525, -0.049347547297978321, -0.083661416571785413, -0.087655843717195536, 0.020522117345934385, 0.080191817405819127, -0.15728279592142505, -0.028885847231444647, 0.073544321095523182, 0.20706344381077879, 0.066144278705455667, -0.069631881661333023, -0.055387270887946399, -0.0099158960524032974, -0.039717793915661548, 0.14583324737347106, -0.022727060768185453, 0.017713374718806421, 0.28062075184074708, 0.07576339464353285, -0.15759577923577814, 0.12669291481079187, -0.0065957965533044935, -0.023038500644189407, -0.016203548822575214, 0.011443563605701524, 0.031044733818071997, 0.099390009396605278, -0.05047331939795989, -0.030750723936850188, -0.15956288120485115, 0.01286776308068685, -0.1670547469453125, -0.047963831961764791, -0.077402955827408276, 0.025311426471354537, 0.040894848866229114, 0.090108524928684319, -0.3117498185712026, 0.059978928418208476, 0.17392049002395632, 0.068215126727969963, 0.22655017146929168, -0.11277740982522262, 0.015117918949874534, -0.062899724806877555, -0.069945490124479578, -0.044909742287021881, 0.14433444462851913, 0.29232937226395989, 0.1955873798585851, -0.057850714258981209, -0.014726496195370711, 0.088840761160314488, 0.26941150721674784, -0.054033771011003262, 0.0111591965306495, 0.024544359195103477, -0.0050102759877621028, 0.12289773365466525, -0.042268194241055185, -0.045072456104567213, -0.023985660885704002, -0.018776641626454649, -0.064872108441076909, 0.17923288498496057, 0.017718431179447353, 0.012676757235305675, -0.084141918563022666, 0.0927046391653705, -0.14741704405082073, -0.077405293524682478, -0.041954355353188345, -0.018944672617029513, 0.060652295217796734, -0.044563097079480543, -0.046248836126650289, 0.033353665903115184, -0.0018617038323594237, -0.067677746878476538, -0.023333614214616976, 0.0136221936446786, -0.012602435194539463, 0.056141915908750409, -0.019617155818133693, -0.093416021391092674, 0.025935720217831887, -0.2107611868683418, 0.040245343412419005, -0.077188871326229633, 0.01421259796769439, -0.11506917731449372, -0.080209944956327744, -0.12403747829586499, -0.034792135391462455, -0.051307124154093234, -0.044478904070419822, -0.042402134083612701, -0.074816944103372168], 
	        [0.011580340758841009, 0.076463412301783149, 0.00079803404858471978, 0.048838428314634974, 0.12248324878819095, 0.013743650358534375, 0.018861138121382369, 0.011586008838870166, 0.045389746032794658, 0.031693376594253822, 0.074989649112201823, -0.009866261755352353, -0.10340488386695112, -0.071572160434485707, 0.0043787474738315128, -0.07778860136521136, -0.019559075604586286, 0.012039914910358105, 0.0018614793888236656, 0.017976562122428465, -0.04708343149187328, -0.0071367900965603071, -0.17555550753460089, -0.080029090945432202, -0.031800223769076583, -0.057597347069660187, -0.022591430940203699, -0.024015557136778228, 0.020306356095828103, 0.0070646865909845908, -0.049745509295279933, 0.010918207861832434, -0.0079759574056427959, -0.057844329934535914, 0.040415092756685103, 0.05051297898637875, -0.028679830302952441, -0.088878085058129219, -0.11596341833461316, -0.14726999841028157, -0.12186458373388864, -0.013719238451893214, 0.0032337827790390591, -0.10004453617576921, -0.017783520567117159, -0.043426790290178846, 0.002516237987708639, 0.031180239925685315, 0.092564938676877706, 0.021358915086836516, 0.17681853360539368, 0.06626948027510339, -0.056798463424251405, 0.020214558939605977, -0.088730140207167144, -0.019043455841855041, 0.12149386494436711, 0.039670736228732052, 0.12658659654781676, 0.25102106759056364, 0.313616299442317, 0.22183627286461596, 0.1359746158531317, 0.10115711474812561, -0.24302403404704537, 0.0097296125255306402, 0.18356713494692423, -0.026126940847291485, 0.034416695001123848, -0.0047517120355681092, -0.19721799705664833, -0.3026191738381685, -0.31481960231473161, -0.1434027289225949, 0.093247316689862428, 0.26017905533217356, -0.15231835953736883, -0.11886377910271781, -7.950240878037973e-05, 0.14995167348160249, -0.07737337854954085, -0.01599863660324637, 0.2521561754016366, 0.22726143797909176, 0.051761936974425632, -0.070375767384878163, 0.039304142728632772, 0.046344087243253736, -0.018432448385731964, 0.22509099226938978, 0.059917659545538168, 0.046242964966830113, 0.11839665900852914, -0.19506738398455795, -0.14025844275720523, 0.057466302603268626, 0.11019012358572904, -0.013541932475265537, 0.047028476991846445, 0.024667584373991497, -0.0058190883316349695, -0.087336525273645438, 0.089096154875776434, 0.06500967167977309, -0.043338205557104159, -0.019092524599200814, 0.14832868404659605, 0.078021069640875934, 0.070724212934028391, -0.031358410965025847, -0.072958714026414753, -0.13112668083166459, -0.086263740082819146, -0.072841242282538562, 0.077042927232936959, 0.077562899744286179, 0.10315256178304716, -0.053457712000654738, -0.045827447338993611, -0.02900391837847402, -0.22848349838247778], 
	        [-0.069051215490355838, -0.13695919912679141, -0.0056563275282749768, 0.017174473739632906, 0.054750990465431963, -0.059932166353439724, -0.015330830129175563, -0.0068192284467516124, 0.0012622017178931346, -0.019229773264106312, -0.059761024322663912, 0.078692856969722169, 0.1089393724650921, -0.075681394444025663, -0.20952756667787314, -0.005312913294763244, 0.10044708684084892, -0.11640309355112993, 0.024356159573992391, -0.0012586164900474876, 0.05069107388375764, 6.7084393214669399e-05, 0.20191076124513427, -0.045181133059133377, 0.10144127341109486, 0.11705452040763065, -0.22632970742930147, 0.0184688808155756, -0.0013541832015389887, -0.12017877991510166, 0.016842236983854095, 0.052652180804933044, 0.083145511130703426, 0.057329748095278965, -0.040374712776183777, -0.11575057028044615, 0.11707621621679364, 0.069672785018686567, -0.13863634203166464, -0.079607983082249159, -0.022216919274236187, 0.033593966744265236, -0.11362588566413499, 0.10269722191626784, -0.24155215048670942, 0.018756954826990843, 0.27956157401899873, 0.039218371860729156, 0.073588480345744861, -0.044888999157036903, 0.13769429349072093, 0.0032477373467352548, 0.022428521170885826, -0.038465640538281942, 0.031154883554520594, -0.16441653723937766, 0.23625286909405968, -0.081428432405938125, -0.011107263657897232, -0.062666400207005535, -0.17075494746168615, 0.27269490990139, 0.031157268147637196, -0.055470185891144386, -0.006952885879328791, -0.053436281993972892, 0.42537068414459028, 0.018283114946247542, 0.13283560236845615, -0.015069149158958085, 0.10328347994406929, 0.44999154699931465, -0.0011928954570129824, -0.16086510891352077, -0.12774404557332408, -0.042099179368697587, -0.0018649195557395998, 0.24605932528385696, 0.074298264981605869, 6.9784477611684395e-05, -0.052135626941050443, -0.086745017818760359, -0.22499073514863255, -0.045344789395678611, 0.033108065913800402, 0.032025942933416617, -0.053699697308726382, 0.033624356023422591, -0.12434062876294572, -0.13435098170091592, -0.10102320426887956, -0.10333974326967209, -0.072744104098523374, 0.030026079255193142, -0.027686487813203597, 0.0035344601119742178, -0.059592180823454702, 0.031353387154932702, -0.031956460680317295, -0.18985564540590008, -0.066673937571019595, -0.030281628842088536, 0.015287505098408646, 0.010680344185151468, 0.044316674060265779, -0.0092002144294807825, 0.044711089149172344, 0.032936423173475296, -0.028902000094102702, -0.019831895072516134, -0.1083289835481895, 0.017001459487365853, -0.016581037303639058, -0.047452480796807951, 0.01964408724082841, -0.043525154566764424, 0.022793656727439479, -0.031968227415916144, -0.1191326261973889, -0.012951530456903462, -0.077945906276183335], 
	        [-0.0042180435203333227, -0.177849827056837, 0.10345176940428125, 0.14691821176034053, 0.032856437685713946, 0.069906188728512633, -0.0063945110693917079, 0.012858674522952751, -0.031362305638645026, 0.048788464134757729, -0.21008276813725216, -0.14262226241092743, 0.27350682670700188, 0.13675983935772454, -0.29666625074261765, 0.13073198270538819, 0.052879354221863011, 0.20819060117120861, 0.054692335523337222, -0.070712189277451695, -0.0072302981622757783, -0.037876207980575435, 0.016205298964287681, 0.032611323558465855, -0.21236590603680106, 0.19488138090854343, -0.050183688887998762, -0.10106171926311576, -0.19451804410928483, -0.097570273334807611, 0.14803373393480754, -0.11936458691698297, 0.090357091614167315, 0.0059923455004580184, 0.025455653887793486, -0.019228242751246096, 0.084191785333891184, -0.1088352303605908, -0.19709666326225239, -0.084653777829652263, -0.086888144789493554, 0.36808967859442904, 0.10964208390108912, -0.06453781682173701, 0.015795651214486534, 0.0372255583573948, 0.043017883593270814, 0.11952788902899536, 0.10395017914010175, 0.04553068266111155, 0.05441345422005224, 0.24912633653507255, 0.002223137297252974, -0.10580881478072197, 0.090087613906571426, 0.16662136065460986, -0.15730886509144254, -0.091248525393662711, -0.053757621594197856, 0.022178794252692133, 0.27116243919778504, 0.33866879890439228, 0.14040194814605061, -0.051936697245067276, 0.013903415563632955, -0.065676039555647242, -0.12825582201243901, 0.19222801891437483, 0.066176686136318968, 0.073803898255870817, 0.14569502232430348, 0.071160030480564657, -0.0095456596009633743, -0.10489910337220464, -0.081457920709183701, -0.078985379590762378, -0.11641729288088618, 0.02271274135586502, -0.040783573204296208, -0.0056622589430029863, 0.0036835932550680038, -0.066780309193843077, -0.12713315993774849, -0.1586600519695244, -0.063328586222237665, -0.055759758783947483, -0.037458086574487418, -0.022460685295330809, -0.022028900024817097, -0.011882201801517509, -0.046972799168275001, -0.14701204551638941, -0.037217728702544514, -0.082831218869885689, -0.0016295615745458014, -0.021758715372862947, 0.059906725662667415, -0.013176728966978149, 0.064518845785987863, -0.040907493521731432, -0.02724481426696284, -0.014614954526350594, 0.11052684024818323, 0.027444907166189095, 0.022162414399074806, 0.0024547001841418916, -0.01609068146442251, -0.058966580405083346, 0.021584412865348603, 0.032765251105065299, -0.1716263843502637, 0.038525696603424579, -0.10090104298395008, -0.082755480397067163, -0.12651405684060268, -0.031346851498544215, -0.051126139081003386, -0.088046305344413461, -0.003187155224522592, -0.027110133357033151, -0.11431300136421083], 
	        [-0.066924227135342934, 0.041699164002372696, -0.10385522794561593, 0.055675362062145774, -0.074260470462326228, -0.091189960480717175, -0.045789683018577006, -0.053408546616140973, 0.0016410632283570901, -0.010001962022561817, 0.021791861105379333, -0.051951291323868297, -0.070200622462203655, 0.097279876582038807, -0.15048632688284508, 0.12149505097298019, 0.015842805768137305, 0.01783019614395083, 0.028679225099310354, -0.13093015859478119, -0.0032724249962371582, -0.076392560780105201, 0.023827921599709007, -0.10048639075186741, 0.057647734800977908, 0.14769797654526404, -0.058573134153914214, 0.036566470887259887, -0.038113001252617282, -0.035949645768287825, 0.13214950219821359, -0.11750728810678948, -0.027309528175229383, -0.15554238984918572, 0.18384157344434507, 0.10897982741577553, -0.055054919090396615, 0.23295461106984391, 0.16692460259498326, 0.34350821795606212, -0.061818935287900251, -0.024811829586858465, 0.079963429313170714, -0.18727278866453625, 0.077134089493061789, 0.20554995099374251, -0.025108602454572731, -0.016911421678591866, 0.027522221377421628, -0.18467242934043285, -0.12870450689623072, 0.2705100330044119, -0.23570033354568337, 0.1600690210988466, 0.060772731257298589, -0.040057046042739526, 0.0061976917126070254, -0.21240599027215282, 0.22776373257918395, -0.24459850621169732, -0.11110091474536704, -0.32900610024199545, -0.065957274593286902, 0.38918437667082284, -0.037061988998483932, -0.013214304459370309, 0.11361559841851943, -0.13116091416864151, 0.26148934106645616, 0.13109860511874102, -0.02559270333763761, -0.10769559173489475, -0.029541835495651814, 0.21030527945911404, 0.20083517469185433, -0.15455102744651888, 0.098485941721442954, 0.053759144210784301, 0.082713231452363006, -0.24255028029402606, 0.025733657047261198, 0.17680889892790308, 0.23330773415315006, 0.27752776373592319, 0.17725610536084593, -0.16258826629493126, -0.17144766528315306, 0.083644424511134546, 0.016994501600820736, -0.071477397540526386, 0.074912024363340463, -0.07565486524045649, 0.021346987911851578, 0.12285156854226099, 0.031741176745010577, -0.079711919211636756, -0.010975662352579296, 0.020719019955012588, -0.14947464235426425, -0.05912634010598853, 0.025068359943792605, -0.076954325737705429, 0.01069978220983156, -0.035726380166860028, 0.010452571251196202, -0.020801433687767192, -0.10029057450694524, -0.05347120776294563, -0.048791402971955875, -0.043406971496632182, -0.10411181696202407, -0.0096115795367616441, -0.040122338177384982, -0.046812122680620266, -0.064058112417089225, -0.14541168506254615, -0.075679730264006442, -0.032466738656732913, 0.0079790695503431444, -0.07581427323024105, 0.020303485166861458], 
	        [-7.0956605279434704e-06, -0.095051438182964521, -0.087881575580860127, 0.0047062408698162472, -0.098027263270710638, -0.0027616522983207395, -0.097227127279984199, -0.063000737106212207, 0.1183446266588927, 0.054456621706851616, -0.0099413502699212952, -0.070139195335673504, 0.058249435624697594, 0.03289065810180454, -0.077908796650873274, 0.12060553802938856, 0.041916937919234294, -0.12018601094319402, 0.024991064566815515, -0.15610551053004948, 0.027447361841557171, 0.0061691806469063477, 0.22277923739993141, 0.07777153698627623, 0.15813994477460777, -0.017009298898611493, -0.14311974342433334, 0.17959497330783272, 0.051525754847030057, -0.11409305598330613, 0.0087348047214590788, -0.11631550153784051, 0.014926258001363192, 0.035969081785568666, -0.053625843536913562, -0.023997302411323432, 0.19964826933410396, 0.036096776017663271, -0.049210808628064102, 0.12245938533273446, 0.060611269299314152, -0.095796932751361336, -0.069519386575027736, -0.050249772835886296, -0.0058375428161391262, -0.012563499903927425, -0.14780320613165895, 0.031772227910289275, 0.1340288392048273, -0.15156587379880926, 0.12631446141014752, -0.0052889953007679499, -0.0019668259446668848, 0.054030336420065141, -0.063631403170866352, -0.34919842820174568, 0.086316002230514569, 0.1498086851219177, -0.01958777908962751, 0.12206293626181336, -0.19933801771288356, -0.048029128706853393, 0.052601068176454692, 0.038693350122585096, -0.093007050474004316, -0.025563344264592822, 0.177347641964092, 0.22163601611492076, 0.094680687451677889, 0.037985353513600273, 0.0088876390621224696, 0.33248829688044318, 0.16504809583361016, -0.0078675683065857933, -0.004089442342142393, -0.073882292576678388, -0.023509082885282934, 0.38130178103352774, -0.019291678040942513, -0.086843448560368325, -0.040173020823503824, -0.04644318688990192, -0.10185859440346755, 0.16438891805551265, 0.0026682289367386675, 0.076749174458747987, -0.067947692216907357, -0.0010386668473387935, -0.1071413883705663, -0.030576591810295518, 0.032786203858462565, -0.0055510882120406793, 0.020069023492512786, -0.017109613552384946, -0.1436550284492504, -0.016711779362517481, -0.069886123624812627, 0.011359667056578288, 0.0048980919655428265, -0.071130858325672064, -0.065545434771973304, -0.079794688129113223, -0.069727649875106712, 0.057019363580092276, -0.021992787171872023, 0.015178002477788638, -0.00020471363886212166, -0.025514430736042228, -0.026882894230500245, -0.045297853805246369, -0.15832593006621121, -0.031428749312098873, -0.0062888408902217752, -0.0057807583295211989, -0.087719175812133982, -0.014850613830471766, -0.098570157493344357, -0.1178588681684648, -0.058161768326308934, 0.025496330937214109, -0.027500922923648384], 
	        [0.033385872123633739, 0.029449410773330013, 0.050373165760226532, 0.033759553320561811, 0.043978212175572511, 0.083180076982955681, 0.071686676768404664, 0.026805901274190462, -0.040212948527338761, 0.074455765899692133, -0.015556797943286706, -0.0052349749182220018, -0.019241697521412499, 0.055811600772115361, -0.061555692140009097, 0.022157119108767706, -0.037499771041887051, -0.091842013395178321, 0.0021346112094529357, -0.077528445870580553, -0.070339569427925713, -0.021843780086959141, -0.028323350880137224, 0.00011164923792164605, -0.063043678969301159, 0.0312281473289511, -0.027814517961888829, -0.023586402460836806, 0.014274870264679794, -0.0099112948624283936, -0.039421607735394437, -0.036124694755188508, -0.14334911700158648, -0.030906231546069748, 0.026456805364020539, -0.055731905472351545, -0.099791023065150669, -0.11300163966955051, -0.096702307648394478, -0.14134937562707614, -0.095762099342366805, 0.012996731697811542, 0.061452509807262426, -0.10845706522050219, -0.095954535650827094, -0.026481658468726504, -0.09342212328404359, 0.025974710463679895, 0.048411867352889076, 0.13854747029920722, 0.0089877939638353527, 0.1412865429641629, 0.018873766998065353, 0.0068619328268330129, 0.066028998755879767, -0.069576990925801802, -0.13630992697783664, 0.053261035495914627, 0.17932579331025728, 0.20451416645740492, 0.25417885834428638, 0.42794011719114639, 0.08044763293045501, 0.060807812906450633, 0.050979231912287287, 0.068724551062169986, -0.079585125467176915, 0.16947242780377064, 0.071750399564743134, -0.17602834598556363, -0.20609506703378996, -0.27585183265236618, -0.45996207117951626, 0.041977085392240453, 0.14013188266658397, -0.10129069427591146, 0.042032097653530609, 0.0010700558006018247, 0.033269813089743, 0.045261284159797271, 0.18492968093047082, 0.11250515788380208, 0.079146011997887886, 0.27604374526273284, -0.29337379824901733, -0.032404962081403643, 0.24482947691686244, -0.11730122219590641, -0.00039308173073460823, -0.082855210467204926, 0.14722185737303153, -0.050887412106644436, -0.11313790447392723, -0.045971837803545731, -0.12976452682175901, 0.36520902694991747, -0.091821999799496623, 0.085864390337494809, 0.076512715542274651, 0.1029210140799042, 0.0027325839402362467, 0.070586710333678859, 0.10533730048009346, 0.11195874976952475, -0.072147843907271553, 0.04958613688607464, -0.031050732598035459, 0.14407295372271284, -0.085587606300639052, 0.087228804147073041, -0.17190628673080169, -0.11561123789185015, -0.092875168889563639, 0.029308812125760478, 0.03997500953017151, 0.12185883649720056, 0.10737184929932188, -0.039136971459624983, -0.08075374206140308, -0.053377354274828807, -0.19749855557352708], 
	        [-0.078856631490001827, 0.028609754041207199, 0.028065667582647003, -0.021834041252276289, -0.071731644229173191, 0.041943503021699281, 0.0034420782526643334, 0.099852416772104879, -0.07205432251463359, -0.14404103188347261, -0.099453272442615065, 0.030831458745725907, 0.029895496253457346, 0.0015406398850859385, 0.05063743421782619, -0.061536371482124472, 0.02259540959954133, 0.058299280629769371, -0.21504560821843677, -0.10742200693101064, 0.13531193618860787, 0.1292569094640518, -0.023228953646059501, 0.081512184345085004, 0.00055798660700738349, -0.098023802602571472, -0.066933869931841583, 0.030281268644703027, -0.19700701283846223, -0.07452246871817525, 0.29428494587030196, -0.019357176004156089, 0.097885648631463901, 0.086819751550199789, -0.043231492206504837, -0.018463852192367017, 0.062745383271060842, 0.0092971348018957081, -0.24863827359607188, 0.010777357730302948, 0.2316312466976955, -0.085329575508557826, -0.1144533554642945, 0.083801285402681849, 0.075830927030971565, -0.014032603342417981, 0.049484524164173316, -0.021590806395398253, 0.01544196314913996, 0.086162432936096586, -0.044102733314784051, 0.12334022048862069, 0.0731644245704271, 0.1088690387955715, -0.15316811061648344, -0.078737489667754818, -0.017284888207398728, -0.039703575150386236, -0.056905519161583623, 0.18660214037769024, -0.023526673216460528, 0.0097119105430037156, -0.11068696302980902, -0.0033322120127640339, 0.22171201468168639, -0.14381135593764638, -0.044159431475442788, 0.056899281315330237, -0.062535558479373796, -0.096715665724386363, -0.042463185527764596, 0.33605398681131693, 0.12771999969210951, 0.029306037892139189, 0.05296083974268942, 0.018388136003953504, 0.5836401595356645, 0.078369782006029357, -0.14774018856780891, 0.079310575246893361, -0.13568107571099638, 0.033726128645812273, -0.19371960002191677, -0.048923336377734009, -0.079048275095496057, -0.09345765767848567, 0.0084687991049249428, 0.02446655940112101, 0.024072807776000009, 0.045654023909503204, -0.049520678628329894, 0.11131277121530644, -0.082671959669512629, -0.01281734719311349, -0.058436346732921529, -0.090027065890889588, -0.061291547168362749, -0.12266871096386792, -0.10084079570396901, -0.038685969609545547, -0.034857542952191456, -0.00069531684714200376, -0.05711976301891046, 0.065894606637351888, 0.076843927132624321, -0.0099221911757089998, 0.038382533425733813, -0.0018487126462470374, -0.03501906580527725, -0.16441171510027652, -0.08279114832431804, -0.066047134941834895, -0.081932618886619485, -0.010547381209761031, -0.051038369726976479, -0.025578508207813648, 0.00959733436024926, 0.0049533230583025667, -0.061062803017560258, 0.033453744496612564, -0.12571424039710155], 
	        [-0.079439136902308832, -0.09707485383450068, 0.069013639062420487, -0.074505761065334339, 0.075011587478881175, 0.15666344682780237, -0.081193505392068127, 0.092118683011617047, 0.16894882838291519, -0.064300711893237078, -0.10649892578590311, -0.20661689203008798, 0.1403179918871823, -0.13859623598009607, 0.15068161397003726, 0.0818655854637374, -0.014124777365337841, 0.15933582287539705, -0.056122956200266111, -0.14961952361740766, 0.26418260048580505, 0.00014354663354841646, -0.0073547177374536712, 0.079306683498707897, 0.020928941460220271, -0.10994253368145199, -0.1737068099917021, -0.023790675949004782, -0.086918445142954964, -0.0043349673789482186, -0.085954954881572246, -0.029420848660444726, -0.0090500058502500022, 0.041530999507431957, -0.069423567534389233, 0.24688351427911395, 0.20546023916088876, -0.17598878843872648, -0.24389316703559294, -0.19015439770039061, 0.22071277516100238, 0.077210599045731132, 0.014424585107587845, 0.0067033339564058075, 0.14557756666221139, -0.10028307012545846, -0.046263766310684282, 0.17807074556144536, 0.23207365188169671, 0.068919009550189744, 0.13997442592318893, 0.08843295944139111, -0.06619014796452205, 0.039954930324093148, 0.044429111474699981, -0.081010967478443885, 0.068410955264807463, -0.048059234788064731, -0.0052523124756469336, 0.19319439038918368, 0.22920446006103862, 0.086101063476146392, 0.031256459311461635, -0.017769668585097209, -0.081514861804228012, 0.05257244191659842, 0.0065146809658001778, -0.17665071040880326, -0.019856913059721516, 0.081102049633683185, 0.043277973324065216, 0.1177242078686942, 0.11137298745761917, -0.00073261542200567242, 0.091978290618997344, 0.082389423312920304, 0.034022525912699247, -0.053097609779258953, 0.099288071298097996, -0.10854924126379789, -0.17742490622599222, -0.1788673671646884, -0.14114600439166541, -0.064004772896817302, -0.0530848482065642, -0.001659672063313692, -0.070676871764606644, -0.098803538640278576, -0.055944765770140174, -0.0052751644189938454, 0.032007780955169478, 0.057629819382953605, -0.019709560268588652, -0.057823914219534894, -0.068256964756672839, 0.027890820691469885, -0.076656239311701027, -0.023631977229926458, 0.019705542780305209, 0.062780023228323073, 0.0043080812012436104, -0.0068539298994425221, -0.06958545243479107, 0.056698946025054167, 0.04217344775125749, -0.02598409561655364, -0.033097604108995968, 0.0095921823100812154, 0.041800833565904215, -0.050819206523713883, -0.10689758970874308, -0.015847929055034071, -0.060764599912676534, -0.0062175219913371549, -0.085347310202452731, -0.097474869441167511, -0.059282139115269104, -0.035577269192877056, -0.075014161045616631, -0.060536079286523312, -0.11817678424233188], 
	        [-0.024906089757269871, -0.0020839929168818827, 0.03600621465641745, 0.040388199406629903, 0.0046367828095772237, -0.050097408580542964, -0.019438803749024975, -0.099398454194897373, -0.039682250621000295, -0.0028157838678664303, 0.003598249335640377, -0.054099425886740632, 0.098751567366142629, -0.13208302404353375, -0.18035374659388975, -0.0043732111233372346, 0.052329318134350926, -0.04335824692063206, 0.17086900465322874, -0.087788905809879941, -0.044980405576590651, -0.03163490494923718, 0.070376930420080558, -0.22835180537374491, -0.053228685368124661, 0.20061806426747758, -0.010253623864425198, 0.015916215379575709, 0.11152189577260957, -0.12242970393701272, 0.20444421875737073, -0.11370776685859571, -0.079913946642613046, -0.15288251066153316, 0.013009551196509275, 0.24933943719410992, -0.15783799994383102, 0.14723844916068518, 0.12653772742745573, 0.087844531937603762, 0.15842166298167773, 0.048090301745894584, 0.30801127557408381, -0.11761230465763839, -0.09838866239110361, 0.21453595775800124, -0.1423387911053251, -0.0057875034434971828, 0.14715035050010203, 0.037047259467474523, -0.050841281845606351, 0.14408577985508386, -0.2038513895714491, 0.12419113537768206, 0.16468328842666694, 0.012860540177512661, -0.060259991855088471, 0.075149602462860884, 0.32707138878173159, -0.40030305735760485, -0.26935994114991207, -0.27607955331013073, -0.11367870913437449, 0.18759384386653338, -0.1163031684096954, 0.011359887068835964, 0.09104201353611753, -0.023930250513817877, 0.027145616702753089, 0.26867810752766969, -0.040944043069847058, -0.051185346442636469, -0.062555156572748197, 0.1472213528555063, 0.17279204270125498, -0.045587324746883026, 0.040778081769105995, 0.077307454201848841, -0.045917861885393978, -0.14679289792741518, 0.058857192810905033, 0.30472542738820174, 0.2683300390974695, 0.20924065894919816, 0.21225020570051081, -0.22492319213360987, -0.1053571313533698, 0.10129898309130989, -0.058699658556484721, -0.056962291919962646, -0.053784567323456531, -0.064199356290904355, -0.023276261041638765, 0.1463492641852929, 0.17298005397684749, -0.17279567370535234, -0.028270599211786665, 0.054369003114690263, -0.10106883014481371, -0.14024347735480464, 0.018313526646667293, -0.037983673629831183, -0.065301664052257818, -0.012949891765581065, -0.094604107423927594, -0.11534207274853202, 0.0076674644006928493, 0.066321539829234916, -0.050400969350873806, 0.0074219548220236372, 0.028869570811624359, -0.015979869180987795, 0.0047547098123721819, -0.023242027383037541, -0.10363187962188126, -0.08083238636814595, -0.038313754638492299, -0.086839600348980459, -0.019540426477005362, 0.031333439883288614, -0.15193982135608425], 
	        [0.26630462964519636, 0.030128294989303788, -0.11791438037260804, -0.11737308015815517, -0.062861100017125554, -0.096766046107599188, -0.082199316172390957, -0.08602044544779823, -0.075246502052840794, -0.029806813487391677, 0.24281116497344327, 0.067042165401364526, -0.0073445552680056064, 0.019073705951446834, 0.02402774328620054, -0.022036865798413671, -0.041360734184431945, -0.021551677954214206, -0.020934734000922058, 0.0016783573161842508, 0.044653551257398255, 0.047330499149608574, 0.070320918539436658, 0.0049339384317501345, 0.068284358255943409, 0.0027795836778768818, -0.0466896472535712, -0.055777797336017988, -0.053408170439317705, -0.00010746082973150939, 0.053647124251753928, 0.014169718568750114, 0.02905438269701309, 0.023031619273586216, 0.00066727081308550005, -0.00051462984272446916, 0.0056491204378612469, -0.0020259322895197036, -0.016498390040156383, -0.022442940786663319, -0.035029164960025241, 0.063846154826204329, 0.044687185096032603, 0.058668246749611672, -0.045157147571444921, 0.06041887311954984, 0.040368811541336383, 0.099232499506447247, 0.048066185349036866, -0.046324953034900501, -0.00080887873698461902, 0.11409453701686445, -0.00033137478785196135, 0.03735595742910118, -0.0079674076739742593, -0.049741034524289095, 0.13611114777264577, 0.023766455706096472, 0.053497687988346081, 0.015733350480013578, -0.063824933259796907, 0.033330568088863713, 0.027844489959796326, 0.081691899842932555, 0.09714592419415595, -0.064828174985232315, 0.01437395739678209, -0.047331107121522768, 0.044196999907911393, 0.10629752929835162, 0.073542689176749262, -0.04442637013096748, 0.049683512301096674, 0.068365456286007917, 0.081523009768297947, -0.015087145755708103, -0.0019638115525515282, 0.039051783324939186, -0.017850512607641256, 0.02370779603383788, 0.06201068601506067, 0.073783766823374425, -0.091844803840924111, 0.010696782251581938, 0.086036514718463936, 0.094596207999147933, -0.074054927866882767, 0.027915857377493219, -0.037642014739791167, -0.040193374604089255, 0.0024468858328299675, 0.1274974581652491, 0.0093404351484588644, -0.040375276072868213, -0.090114609127803932, 0.10326418667261725, 0.02917729347842522, -0.0077046231605733149, -0.030226724173417804, -0.02693842944612336, 0.03299558344045618, 0.037655280816208281, 0.060384055506334661, -0.011607343174437262, -0.088458663756049549, -0.0089621130215228745, 0.041335212079519151, 0.025264577237378585, 0.032067053817915525, 0.023830466137715112, -0.079345931632774758, -0.11617934147005861, 0.035620949281212844, 0.10013927849222683, -0.048809475943344949, -0.11446551821055255, -0.095813017973671741, 0.016305663265873432, 0.11707531676597775, -0.06319976004011861, -0.16222515899222084], 
	        [0.056794304038679966, 0.10167830608861393, -0.016503737435740885, 0.0046764347911659732, -0.015979430307930184, -0.047920295093506274, -0.055022283646318906, -0.10379295727074533, -0.049717862262312687, 0.10568238875466442, -0.031174132439086774, 0.083704603950004272, -0.091368133200752627, 0.057269302584031172, 0.018684874349729957, -0.032113253507965796, -0.001736967749467095, -0.072079756116517402, -0.09935581393877263, -0.024667483850197125, 0.08617572294614978, 0.040040155644135919, -0.15099062261616583, -0.00067872303189795563, -0.015247157304283773, -0.052523565344750653, 0.042551307369904048, -0.14444354746621113, -0.0065487046921334988, -0.071842610189861628, -0.012850025711011279, 0.014122793694046731, -0.0033943022739370415, -0.039640354001140646, -0.0031247601407242975, -0.04585791859357094, 0.0019020572673282693, -0.12415842588927675, 0.073896324144092557, -0.045015519750068421, -0.042377317003355355, -0.018876095794982992, 0.066199553272244749, -0.038229410201656738, -0.081067787682230996, -0.03945825059342991, -0.021573688648487861, -0.08753783022136527, 0.033366036076064857, 0.13641185499907951, -0.063205201260604499, -0.0012659096018193816, 0.0057982623571657815, -0.01152673538233475, -0.0079257311321652285, -0.14126097140944649, -0.034964896400424342, -0.05417735615198177, 0.098662735854543188, 0.31744333379137851, 0.039452304758183607, -0.12302035212752997, 0.090307702196104955, -0.018426534125878427, 0.0076069917669535497, -0.063786017925961197, -0.13634861844502966, 0.021706398551087892, 0.088489197364119254, 0.24006998601480642, -0.038574376291261439, -0.20903973825035016, -0.028547940107015453, 0.088542726499488494, -0.021390725008154893, 0.044285016775694894, -0.026993312698921287, -0.064465983803312712, 0.12944644855572515, 0.19089244056580751, -0.030480082660302492, -0.11056842407420524, -0.030936086975706011, 0.11334521747158818, -0.035129148248064457, -0.086017765013793296, -0.0072168706451755035, -0.10752750376129108, 0.04312283194476934, 0.16933458944871088, 0.04045539432256913, -0.23664539634671644, 0.11812030967359738, 0.075939969650854852, -0.10351739032237361, -0.030300589898196291, 0.086878456898969891, 0.020132080229428105, -0.023337176463668542, 0.1929319867081439, 0.022201478223351577, -0.099101135273428051, 0.15510108808703874, 0.063727924452699231, -0.2536830626984794, -0.11398510745687342, -0.060714100288377329, 0.014445183346757966, -0.078060776119834835, 0.019868445241697584, 0.0081798453460741917, -0.058441780232701836, -0.12524948970895577, -0.042729684478892374, -0.10578506496128201, 0.082761699659597399, 0.22610842991965319, 0.19472107409175121, 0.13770970450022119, 0.25212791464266937, 0.073498142085367354], 
	        [-0.091381241401881697, -0.058079620328844089, -0.076530504628475743, -0.0199353534219689, -0.11698549667840648, -0.049621401738281688, -0.077132621657016204, 0.15067146207913978, -0.050781047593468576, -0.02068608682311579, -0.07749948573069973, -0.096758567391562439, 0.0077571560895567868, -0.0095979406212449749, -0.099565859084337058, 0.0051600482008870227, -0.052061725176615475, 0.21007930845912845, 0.065151157684292277, -0.07131801809693715, 0.018812215208894742, -0.00086442135402349518, -0.046564358647237104, 0.013463679946637018, -0.049760289181046941, -0.075120052315886143, -0.016205730606521709, 0.20370769256587995, 0.21631569735613507, -0.21639898101726901, -0.010174498767059056, -0.080744395481969419, 0.00065762540281793375, -0.10941455592056311, 0.0051919514244158776, -0.061527253139188519, -0.01884736889232981, 0.21787195260154674, 0.22243219444192475, -0.15575200547256071, -0.10816017929215728, 0.0051881907601944027, 0.031785513639906941, -0.11820319244612582, -0.091955481834663816, -0.065886002565202856, 0.045741458364707437, 0.16229065484815031, 0.18370330017469805, -0.081324008115822286, -0.096899444925845776, 0.11220947396556524, -0.12652409273694068, -0.056954083685135951, 0.0037198361414339312, -0.040598532368215791, 0.039300218532823339, 0.11791439151540004, 0.0326000042015889, -0.021776978247445074, -0.040529054786980857, 0.01854198366161787, -0.085732791470378808, -0.004251519029603433, 0.031088165635845141, 0.10946916476597079, -0.030520300750865037, 0.024588867262970132, 0.031028281179074996, -0.026058776582265818, -0.034739864282203929, 0.042015930066768251, -0.15813943081690485, 0.098811275146536204, 0.17664760200291613, 0.12060292796297431, 0.28365889513274267, -0.0098819391479129104, 0.020720424432064774, 0.041373041991295892, -0.021038365304358167, -0.095202664058810157, 0.14910980302517288, -0.025721833368892062, -0.12819902853565343, -0.023631492175036073, -0.031597247870627954, 0.10824280634239519, -0.091173425222870613, 0.063567445633335107, 0.021728192985388861, -0.10568636568278675, -0.03165356681046462, -0.0087472418572157873, 0.14635866247530055, 0.137170585551738, 0.040902403217571118, -0.017771123105949502, 0.038560203534045476, 0.039245273632345951, 0.056815291462562527, -0.11183679663036641, 0.064817659114458095, -0.0814319418691829, -0.03407437639196588, -0.11203464618304287, 0.15240885057308393, 0.13533724849720771, 0.068633687203628974, -0.036633006460861393, -0.046692920364638499, -0.033281368663026875, 0.0071094850495891995, -0.024376962431089298, -0.086464142800486851, -0.048461882500802841, -0.085872378316760006, -0.17119204490022732, -0.12548065175775711, -0.10025652608610795, -0.067724150717968543], 
	        [-0.11048795383128253, 0.17729666058333263, 0.16552135430896192, 0.034404289623548884, -0.089588724846092802, -0.0098956908398675769, -0.092669573892880996, -0.06203414994882403, -0.13027990600802769, -0.02774126581005951, -0.033782876400120204, 0.068485642196071284, 0.075989574144754934, -0.036571377943051521, -0.027073113771866435, 0.051358605941092213, -0.12486678803139802, -0.11937553330158295, 0.00027670008133570678, 0.039242940114803171, -0.065341658588557533, -0.032591209892933931, 0.0094873995209515255, 0.077228802276500336, -0.11978965646742909, 0.065175622098800165, -0.0045330682114145572, -0.093210957468272904, 0.20829565218067517, 0.034407695510313439, 0.20900868773517667, 0.18059530210220634, 0.080546449898943231, 0.011691715187434483, -0.1036261996342592, 0.089440339361349333, -0.18290277626865079, -0.17449211585023297, 0.20463646978781697, 0.16205227161355945, 0.1248389858520476, -0.033920943885589638, 0.0050538696227267789, 0.011335298516995454, -0.001853830495579134, -0.13334091118720467, 0.13244272444684829, 0.131632260424145, -0.095949574197512086, -0.14905751361173961, -0.1371680896219323, 0.078006860735210071, 0.22398467991789892, 0.060077091359143922, 0.080459089156971392, -0.044226547302833194, -0.02641690246856537, -0.021047236515817119, -0.022107985555041423, 0.27081392806687543, 0.20243579723370436, 0.052508427611470655, -0.081686945424025187, -0.028000437521812652, -0.069004413488459787, -0.019947203774680143, -0.065108523571595467, 0.087304868895712956, -0.077077120690107775, -0.18137313212262005, -0.11403701580048946, 0.1344871234635103, 0.23244603542157677, 0.055124623486195068, -0.066463747876115559, -0.091451832072540304, 0.018849225191806832, -0.024654340248073531, -0.024966200161235935, -0.091424575201207697, 0.072527831499301726, -0.065216059830789028, -0.11921754880632893, -0.17337893909947941, -0.057219238952144341, 0.0067422534626652882, 0.011248995976294755, 0.068047811183628626, 0.049614879488339002, -0.097275846898811927, 0.0082358567684881357, -0.015023386519351074, -0.053933000536622519, 0.022181719818654445, -0.078603056286837239, -0.096990160520272428, 0.053341686179560657, 0.038592658381352868, 0.073273892990471573, -0.0027339150021431086, 0.0087236349272764163, -0.056654841529851035, 0.0089929406550926932, -0.047992111069460372, -0.072470382965599156, 0.013556901031652455, -0.0027078537211853854, -0.020808961745466689, -0.023685877670394262, -0.082885320875324089, -0.024581734079028472, 0.011675698399989887, 0.010268763903630733, 0.00027727025909281972, -0.10403456880151318, -0.031328630320557459, -0.048762641369514532, 0.013870483338988132, 0.009776937951070902, -0.0016096606912818917, -0.11084797308275902], 
	        [-0.30333471569576326, -0.098154450360570744, 0.0015410657868983949, 0.045929458780550832, -0.065355998121677139, -0.13987052383343457, -0.083088561382526641, 0.082669066314702278, 0.061904779698073738, -0.11069374343220081, -0.28290200253357906, 0.22673155788863875, 0.18594415935524841, 0.071854402503120182, -0.030528580748157334, 0.028577245402910886, 0.031060985030853229, -0.043861615284254557, -0.044105176677454817, 0.022159810237959286, 0.21654680444315066, 0.30278316304132502, 0.012213805294510331, 0.086126585521097476, 0.18984475627300115, 0.17496536348485808, -0.084862281907876494, -0.081456542808588703, 0.01832638457011089, 0.13673417025774948, 0.27284413141414504, 0.094612335659298857, -0.07613963041950092, 0.062933406187327873, -0.097443958251205609, -0.068403980749692395, 0.0096655524754083975, 0.095040552086250632, 0.15936905785590366, 0.072995084064054722, 0.031252763725467911, -0.16546942109824656, -0.16677751455927864, 0.12669754079805604, 0.22204531073147377, 0.1873578562466022, -0.037621658900903542, -0.15711170707975403, -0.17298791364700297, -0.082555273200012824, -0.14455053081729527, -0.22415305552359763, 0.042542402815446807, 0.1038139770409886, 0.20625177708368309, -0.15880889026588421, -0.075658865558639876, -0.021485883747037457, 0.10891607713839715, 0.091092897473454199, -0.010416568160451598, 0.069543852325783792, 0.16542830711077747, 0.065217336152304003, -0.0148176716125085, -0.20521529011852879, -0.14264824540169307, 0.019756071252460615, 0.0058040644663103075, 0.039643334769194863, 0.15659048313489107, 0.22864706757459258, 0.14254650813759029, 0.057073186388449368, -0.053152191307381427, -0.034477291485900341, -0.077598395442579862, -0.066725783977938199, -0.064230325525589035, -0.089991097501851386, 0.028289830388051281, -0.066129155191647263, -0.11896201994465391, -0.082558170326111818, 0.012810697942117068, -0.024384133696020396, 0.015087500169279289, -0.13601461458960581, -0.075236980328811445, 0.039014121011195529, 0.02815424125400038, -0.055013916259284479, -0.008254101582952672, 0.002655866524947384, -0.021125020025650129, -0.023746573840204926, -0.042683164777021068, -0.059495722156300584, -0.019042694817947538, -0.12936213546879713, -0.026222299825073875, -0.025812691605142032, -0.041703863747776904, -0.0661914684158392, -0.097506063642520957, -0.058396072583561887, -0.089961267739098516, -0.0037007256822108175, 0.0011179813727885506, -0.10090477889016067, 0.064140298767104573, 0.010238148607735212, 0.06440364812729471, 0.076684547115576734, 0.039151433631154905, -0.025802896171529727, -0.00019835521728821248, 0.071841486242385455, 0.13125162014433939, 0.046056658246170903, 0.053499157763845701], 
	        [-0.12965724207701509, -0.037580246387615174, -0.067610081744866102, -0.10396968869944452, -0.050146681143041577, -0.11661839201437256, -0.0134094248817632, -0.003812121401652345, 0.14551889487217159, 0.20960814138138711, -0.11572556521584892, 0.038199771776252472, 0.053736720825050086, -0.033780376813536642, -0.013778088995604357, -0.12296410846003263, -0.190779199296427, 0.063623184193675034, 0.072719948625815545, -0.18712323706253348, 0.13564826018751774, 0.10041735856871029, 0.0663871462462544, 0.075875100621604977, 0.10518317164208223, 0.14542272105614312, 0.12359189084318592, -0.033750642430414049, -0.1168093845370131, 0.047363177697914378, -0.078115158492371495, -0.0068072546065389011, 0.022330740883073977, 0.043345000603673689, 0.0061772562098951697, 0.10018581879835563, 0.12543189326433035, 0.29106180455164443, 0.15950577579932912, -0.041016614728731443, -0.24664638490921542, 0.10243965713284461, -0.022249340976419691, -0.03998099582023288, -0.054513454865913025, 0.10149283919617619, 0.12490712516373728, 0.024443018843315022, -0.1715648928173428, 0.0098209256442637616, -0.099464482677069699, 0.10892786493077161, 0.10795471728528551, -0.03038255212780229, -0.052093742890319261, 0.081082286817464475, -0.096274050930638774, -0.036267436417549877, 0.075185345713630086, 0.096808220000748818, 0.02028571579311067, 0.33290510761917347, 0.01733913364880374, -0.16522028580434994, -0.0040897062381491101, -0.051775053344798386, 0.065670470719540894, -0.032772885393817147, -0.085058808488073845, -0.11929889732683205, 0.092455936215032175, 0.25655461456536199, -0.13119179078724852, -0.099868329749784879, -0.033238669040386949, -0.014474294906370588, 0.022015269325752353, -0.0068706343634212103, 0.030438728104146773, 0.038215294505712517, -9.8671203312486466e-06, -0.13106943853344732, -0.11029667516487467, -0.05651270541297225, -0.035091478549347271, -0.021024591609859103, -0.037796865064866875, 0.0024114282376300894, 0.066872760480572752, 0.06279809114300125, 0.015860273651693568, -0.066417984558896942, -0.044395452917303999, -0.056739278057440889, -0.074490614504174629, -0.0017445397987308903, -0.001856208967092543, -0.031296834327762674, -0.080379010855047062, -0.032932702209649889, -0.039466027214634262, 0.026868758362947193, 0.052720469111467889, 0.017821499479210093, -0.0812792524309323, -0.0098243462809757751, -0.035827346651628185, -0.018665339965729243, -0.030414846245718247, -0.025397750118409348, -0.12699585584653394, -0.051270046062598378, -0.059492797705412472, -0.012977814302096748, -0.040201161068129737, -0.0063003255036662778, -0.059572314072736721, -0.060873397857079979, 0.025500546592364254, 0.056765099592826794, 0.012716285965905683], 
	        [-0.053342785646891183, 0.00524567552363564, -0.047374753370638178, 0.094781074251503727, -0.040976740413566221, -0.096552554457401962, -0.074881802597734803, -0.046657906236577507, -0.091330632489740368, -0.040717971184299956, -0.093076755058470406, 0.0037318258071586674, 0.0012979923922400161, -0.072971306435051883, 0.057699016112258382, 0.21677924213445596, 0.062692077375228986, -0.044090195812729369, -0.023130229334030562, -0.021606172607987695, -0.016753725645425696, -0.089114918695803486, -0.018011910259290234, -0.048665499037987205, -0.038883468315214373, -0.1600836076867248, 0.12324454290748962, 0.16213596071632191, 0.081890999010858709, -0.026691379256621572, -0.078939099722900294, -0.035177884757280425, -0.070559193083664304, -0.081449629456742917, 0.041254495310394122, -0.0082409283980089815, -0.06410405058088145, -0.19223363085057119, 0.19698561203334053, 0.075457705890398047, 0.10168065244977331, -0.011407968361767371, -0.027454319260572038, -0.096909253770893336, -0.027762551704027569, -0.099431835349921047, -0.065804778038646372, 0.0079576419011488393, -0.031079452139909713, -0.025254998311881022, 0.13286239727231575, 0.10025133561412032, 0.065637269228549927, -0.003144015511429633, -0.044383514517180048, 0.055436478646850723, 0.059891048250770511, -0.0098526217416507553, -0.15354872527543872, 0.1700617723129286, -0.1844295002128809, 0.068014427221688975, 0.029876275367864972, 0.10799501360998554, 0.085618199850133345, -0.10413623068849565, 0.24464749614213879, 0.10562029167251738, 0.15464122158870292, 0.11486770498168064, -0.16275359615761803, -0.10100376605498677, 0.095138924293591193, -0.10761116645534677, 0.017873153892635395, 0.11423888867213229, -0.0018411500448220972, 0.086874147832482249, 0.16367347677496105, 0.044733386292518801, -0.094761623273037748, -0.14397973597021768, 0.21757349732675985, -0.034529293295072087, -0.12834039570251105, 0.039442131452955824, 0.052146536402598725, -0.0027754429203348772, 0.092486771466581935, -0.10000875137392633, 0.0219682748340118, 0.076096240514652802, 0.26484488873456774, -0.068778998021732471, -0.13150962876054156, 0.0011599240934269256, -0.068092913704283053, -0.027604333874574859, 0.0055121360660488131, -0.074848915014377543, 0.031133754790612762, 0.10057960203336513, 0.16473981410325628, -0.021659253601673652, -0.084824882710566013, -0.016801310205887945, 0.022993395502963216, 0.017167179382408942, -0.056374112089754111, -0.032324211286495264, -0.018053909855479569, -0.050023765149209809, -0.14089885860421936, -0.13965160319931622, -0.11870197019087025, -0.062036231181908014, -0.04101797266105614, -0.050867286670802161, -0.058573069820662169, 0.021580959803428883, -0.042699365835973099], 
	        [0.019902842485734224, 0.15561506976085307, -0.028017485754111875, -0.17651276038235375, -0.039197701387862535, -0.060229014076549556, 0.040413897080862501, 0.0039324663973003132, 0.035474887918963999, 0.086187127716139331, 0.066211423470236119, -0.011482759449640119, 0.021711326088798229, 0.011537755053333605, -0.031843183714078183, -0.08491361323535157, -0.023265192234759174, -0.11448125258912051, 0.039181067323331403, -0.056998902182359298, -0.064776818516311493, 0.063733692782339729, -0.043075172605832698, 0.05638433416632907, 0.025730822225084077, -0.10729102468091503, -0.043117991855032033, -0.053657854256318194, 0.01584487603201426, 0.013290760860429117, 0.010200015604431685, -0.0031793878712187678, -0.11412253559205487, 0.030883839158126154, 0.021462269136898211, 0.034969864237521547, -0.079456104230846078, -0.085031737678128175, 0.11503343538242178, -0.10993782268920241, -0.089572802157924417, -0.0039431094236408934, -0.04578774281544791, -0.029069481413135097, -0.029312843103912124, -0.0022281839533548724, -0.015461174173461611, 0.08016859253876335, -0.096417465851594955, 0.068169543109748931, 0.14488842713652675, -0.020620161448456426, -0.12127975627620319, 0.0035402670006761464, -0.10860121905429683, -0.025759025070910151, -0.015907799649678353, -0.019318209958923922, 0.027711942877274104, -0.010691765460204925, -0.11261913121914686, 0.22919127543697509, 0.19547240621082879, 0.062576613714025703, -0.032437508756967479, -0.17049052524689434, -0.054887759421750289, -0.0086606964527578961, -0.032470312195105946, 0.050117935111423713, 0.038409765488664892, -0.15181868441017379, -0.17238837635837911, 0.17800490245662465, 0.15774737196971728, 0.11238684789419333, -0.11549538053161687, -0.1051441923254989, 0.029627428418807066, 0.010047460882148362, -0.03595190922317814, 0.015687349765215325, 0.10710721567720438, -0.041276051064384339, -0.23137836087848457, 0.10813840323639234, 0.20398998249936215, -0.014741356900987223, -0.062683408610174352, -0.049411487995288605, -0.035967710177904844, 0.041871499068939354, -0.072184903859897467, -0.083863872617445712, 0.098734320072343104, 0.11031868253657633, -0.22002867944446203, 0.12779602690138148, 0.14218707015954651, -0.0011896001696623804, 0.079366530371097477, 0.043588532242198656, -0.035424574718560489, -0.054609455641465063, -0.16492582250638183, -0.17557350746334122, 0.15889132124334202, 0.0041503307895962432, -0.10134763057667201, 0.19023517186356353, 0.084659592208096879, 0.11510279765301401, 0.16224249442600286, 0.17763576210351251, 0.22133908024822241, 0.14596218529396179, 0.02887144459288063, -0.10378678936442846, -0.067205691571172455, -0.088716399430536996, -0.041101641158728192], 
	        [0.15920136420084935, 0.060406604769127695, 0.058122346605073032, 0.00477008922714715, 0.019787104327780913, 0.087203596056315003, 0.030264199678037729, 0.017304599070370644, 0.085575429473619624, 0.023958591314004331, 0.12884963809652478, 0.068599905466411953, -0.045567154593245292, 0.064960440039459111, -0.057217993135935161, -0.025447705395343731, 0.0909487087326179, -0.079769498949750814, 0.036730991722000075, -0.038480072535680726, 0.006076468777062756, 0.062315581478503454, 0.002067988991471037, 0.0065579719955623714, -0.0043517925373637197, 0.0096289999341297033, 0.029116266207693448, 0.01426370898438685, 0.029690457152439259, -0.081627383427878258, 0.046850542350542257, 0.006214888501193401, 0.018397271891386333, -0.012561848571951174, -0.040551619526904017, 0.028504081990583418, -0.011486869296661643, -0.059191179697348155, 0.022429209245582032, 0.078039055277124986, -0.015415531651337386, 0.019964992266425875, -0.066503829548354446, -0.0013193086595682316, -0.10842019255646421, -0.03697337790527494, -0.020534261687351601, 0.040747539700920002, 0.053337194618316, -0.00116709964776604, -0.0095601528497191515, 0.016298910205605192, 0.0077277626889895347, 0.00037443623014628974, -0.19227631613374657, -0.13238394826418348, -0.030124775371821032, -0.015887858135493947, 0.025013961658704745, 0.027518775349448854, 0.024198826147774258, -0.047760885812468984, 0.12256242261650652, -0.055852213081364149, 0.065026093917872521, -0.1285269471537781, -0.059058110817278908, -0.032314037012273589, -0.050141311125915716, 0.08014056175866828, 0.035775922639718939, -0.052897492514335016, 0.0028741733491999197, 0.082628087231978217, -0.021869185345972597, -0.069854074675508887, -0.068575988216225736, -0.064584701819010937, -0.00693137015502477, -0.063835739267782257, 0.065183894970587242, 0.085579887773321761, -0.089783371778548476, 0.02413243559151125, 0.12236645633019359, -0.0081031241390048803, -0.10893007981107913, -0.041047520032544138, -0.040485575357566729, -0.018772198351639475, 0.024153345138070187, 0.10036333221955367, 0.068740306407003446, -0.10245398888523655, -0.016349166098083526, 0.0070380009438652663, 0.12265704999147381, -0.043113460086378494, 0.013370230023298443, 0.016729136801514881, -0.039288684774408056, 0.057728476425995087, 0.041012638786676131, -0.049978733723102124, -0.032347506063964117, -0.08817543486159464, 0.099869944360031201, 0.065600331696059444, -0.015359581783002035, -0.028528989655607573, -0.037199051460136613, 0.15244521122136684, 0.18336254107941996, 0.054287847035064243, -0.046369032846879508, -0.1119122723959507, -0.11519151048090097, -0.022731910011617007, 0.11225252067886338, 0.28560328365377685, -0.067985252020442657], 
	        [0.058958788260075945, -0.021876278629613638, 0.037612479257211687, -0.099005159575964105, -0.1165516680699821, 0.021078862330256215, 0.015957444616884531, 0.059647685916549217, -0.065505591575810915, -0.083395277179433458, -0.18213933265545079, 0.084305230751524365, -0.025710617818550302, -0.0014530727721881326, 0.062922294533444001, 0.010828617512124508, 0.077505124497846897, -0.066208360763709506, -0.055002695608746162, -0.061510630819380879, 0.068900345436844659, -0.055539144857880557, -0.020784660567228427, 0.089398233599742291, 0.1288331620004711, -0.12816590368747446, -0.0096792212613234004, -0.11505461495101575, 0.073195596999562046, 0.013390797267512064, 0.063157106796453089, -0.11664356591893797, -0.087677499975957904, 0.064068527412859982, 0.089552329159210686, -0.012366311546488887, -0.084841814209484792, -0.30992838085367469, -0.31591124672801529, -0.19715224674545362, 0.020969019898039606, 0.14193745471028157, 0.061843173279961985, 0.073936168201219551, -0.01304258854189852, -0.07497702247252562, -0.20603881883896738, -0.070945540809535773, 0.28309265451797216, 0.57742199459415977, 0.31262023603175498, -0.083661619056098951, -0.0039166593479060124, -0.007008189710296639, 0.040088156481113336, -0.049394984833606687, -0.029191264319536905, -0.081163508484737398, 0.19268793954258898, 0.21144872967342784, -0.29773471400507556, 0.12406492440813296, 0.3660537274903351, 0.093082413567314573, -0.024580539876515733, 0.10110689340406492, -0.062910539274161195, -0.0034612665515367895, 0.029116324782821203, 0.0020626436307547343, 0.10964075240294091, 0.064158923379264071, -0.21854402897708003, -0.12925232991277491, -0.079675200291648277, -0.01811196962139593, 0.035957827281212953, -0.046726417696597952, -0.060929938641963624, 0.01119071426640683, 0.02353396464233623, 0.072568418302712129, 0.23270637226267299, 0.33170083850101384, -0.057955687348093615, -0.12545830581187295, -0.039267158405268378, -0.056155244480238127, -0.046609200143938004, 0.060498849366474053, -0.043016662084753868, 0.024841779701571622, -0.099367884763605085, -0.16431861879138088, -0.15146165000437428, -0.0017544026515488691, 0.17032294123573102, 0.064867648206299922, 0.15233819334655943, -0.032910847411962485, -0.0071731964963948833, -0.0081380849704634252, -0.050724307248593621, 0.011173233429224511, -0.062101699142451269, -0.052308817017819691, 0.00051654855856720847, -0.0075192043437920311, 0.039091511248705406, 0.071465889129755322, 0.0063359942967715424, -0.095630124560084281, -0.025392132057811982, -0.10041647140235001, -0.097928005682022187, -0.027282327996318675, -0.038112131251473808, 0.012061424608286169, -0.035596588506541682, -0.052821862323290544, -0.11313037428451306], 
	        [-0.15324006372195415, -0.061965612404142049, -0.020864586176693893, -0.0004281080429524662, 0.0730549833543368, -0.061347651024975337, -0.031466364007885647, -0.10327863822100901, 0.057558435766753083, 0.011198077448874383, 0.045234383554630685, -0.064711224992117677, -0.067011155811770431, -0.0057205043684774096, -0.028643015431602602, -0.037131071599513364, 0.053748889551759958, -0.054199304651787503, 0.021887370672747687, 0.016189862073254922, -0.019016514253116644, 0.11379602147808761, -0.11165312886440776, -0.0087496200052688267, -0.014474316621162608, -0.026251634435374149, -0.002710236678190989, -0.030990248737400521, -0.04127464832894278, -0.11453289829380965, 0.047907282053055035, 0.038421978515818717, 0.015082505447196207, 0.028769815253706164, 0.01684473164289961, 0.094727188915121593, 0.20593647137919804, -0.15159924031985617, -0.24555118979497925, -0.27707522357288905, -0.18048921280574989, -0.011307677999135979, 0.11441322835116891, -0.014636046617138777, 0.079198125709557601, 0.012007403858779957, 0.0072428501587866109, -0.18640141319376874, 0.16780516380957566, 0.56826306685500816, 0.34085510546495534, 0.15391020895285537, -0.22202084848747994, -0.093193681017569682, -0.005005130632420085, 0.080166786371967738, -0.0010856269574332431, 0.033973275724025434, 0.29561270160331643, 0.36482758672358029, -0.31466398989768735, 0.062497098572653162, 0.21968853798387469, -0.026684311034055108, -0.054686227873073694, -0.15194326555534887, 0.054278240860889532, 0.07409840320590326, 0.0050038364543304997, -0.11139002424195973, -0.29694277435857414, -0.0028083524198520352, 0.085921492659009169, 0.054283294807933521, 0.041159753010144698, -0.040069399672292144, 0.020583515255041856, -0.032968306498467749, -0.12400399212637832, -0.12690204319933657, -0.087864335801985299, 0.25943260806255236, 0.25468901684408091, 0.11148837097156279, 0.016197234685087623, -0.035512335618043525, 0.062529085678797003, -0.061876366590392667, 0.042653661514922003, 0.1456886858554321, 0.100266511239698, 0.049106374130385599, -0.1692085663504731, -0.15021472143352776, -0.036437790125085939, -0.094174544970770241, 0.052142701469356942, -0.02443775761673006, -0.043904470755572772, 0.097322253365795447, 0.025963340060584358, 0.04495779540761817, 0.015315696105485712, 0.028566823650113198, -0.099804513025419234, -0.056574603633366818, -0.0025488357793481964, -0.066924339863506169, 0.010193965172470135, -0.0061765952954370151, -0.10526334482403006, -0.064591418118637667, -0.0082273846843367929, -0.028937589097058611, -0.0021874049091571094, 0.0064020706434689961, -0.082473697153836373, -0.10584367018509927, -0.016046741087392458, -0.065096168336001459, -0.076610989193125839], 
	        [-0.039511428419417599, -0.0080173333971271382, -0.016551615434322393, 0.0756169606326558, -0.029722132603671139, -0.025034558630525398, -0.072171220087672988, -0.092474182124173826, -0.075211870880661391, -0.044360430478935647, -0.069348984382251233, -0.022490503780794903, -0.0057147316926908116, 0.052051258112528066, -0.054607716916367378, -0.058372621238702842, -0.060777353546059718, -0.077336809794399691, -0.045476724941883415, 0.030772582414215349, -0.11620967239502454, 0.10797792795409909, -0.027779187806584747, 0.042775504075928825, -0.029085091874604285, 0.070665070823427989, -0.10670180015368308, -0.12972554862345784, -0.061184746782739483, 0.022941312169178836, -0.01197768577248755, 0.16487084184278611, -0.048341409303366112, -0.026936350074678175, -0.048056362033197193, 0.032473762460042528, -0.13513407425749813, -0.11294851883996024, 0.028315126778450446, 0.10779312846779725, 0.13718980587277638, 0.094828465533259992, -0.029662193522414011, 0.1321112375584729, -0.11093428808802747, 0.029166874149281159, -0.065792824284420015, -0.082565002818216271, 0.024708088751542928, 0.22293675583854181, 0.23881873192468081, 0.084903111184386287, 0.040208497032350327, 0.076545573835757594, -0.06123753763864033, 0.0063284441525853219, -0.051374467063856455, 0.062827084295813851, -0.036988261540257486, 0.22358537142740625, 0.048437402611115017, -0.25353214195075419, -0.19261045779830849, -0.019422340552033769, -0.062847643771965708, -0.036853496173419903, -0.12964946819383125, 0.044458755188555237, -0.12226738775925999, -0.075998647776664346, -0.066285036198489203, 0.2852615582722664, 0.39166626094060492, 0.21583615293103556, -0.00059671763801670552, 0.028281927318908495, 0.14150420560575661, 0.029357515776456754, -0.0073652568066015778, -0.018181855688694376, 0.0045056549707617743, -0.11281100988725729, -0.12216102487292639, -0.045821897312377555, 0.027683086807535735, 0.044114075431245875, 0.012960273742704111, -0.01033045914794202, 0.017525421607595383, -0.026815178240449843, -0.038433562205767026, -0.023176466057391931, 0.018238150229464657, -0.10609098396328405, -0.0078365274088666032, -0.1692715238790774, 0.055230115768598605, -0.038599121201013137, -0.030083122414206388, 0.033498786150872692, 0.064549273785100114, -0.054456334956194834, -0.00056162434047704601, -0.12305574145274481, -0.052312038879843335, -0.0062559873241414682, 0.066658808641008482, -0.083661410065433844, -0.0050756577353415835, -0.053945762783515969, -0.00027041140698932931, -0.029193425089981271, 0.060243323194549399, -0.018406883366667015, -0.031509946993241944, -0.02305392310291406, -0.14523023321109388, -0.083398220870461837, 0.0083801401834026554, -0.054527177498857458, 0.0051808659359899312], 
	        [-0.065848619594800789, -0.053261079120780402, 0.035473933387924081, -0.043773076764098175, -0.042948902519114054, -0.035839763275580229, -0.03670964756282482, -0.035889928945933514, 0.0084303424035014791, 0.070959935481377259, -0.039990937836020757, 0.00062919576125276822, 0.02301560832911255, -0.01209375762579383, 0.023507991177519026, -0.0043852583759025239, -0.017754505089411822, -0.098393451339086613, -0.025598526153569709, -0.093253517869822292, -0.060084598840034829, -0.0067732954612012303, 0.0047322343217982392, 0.0098854552921198643, -0.0079343145894890839, -0.048435067329455274, -0.011810163769240992, -0.044468277499084281, 0.029161537175831059, -0.052373485912767012, -0.012794443685316442, -0.073999770655031175, -0.11228628800766731, 0.00053718856153291486, 0.054814439087026594, -0.058611861795578993, 0.031704764448120752, -0.0076501524160651341, -0.10568592093548473, -0.19589466237166098, -0.12315650606608049, -0.011442858954517257, 0.11925985331634427, 0.0010363876176450598, -0.099823252161576004, -0.010168708525203837, -0.077187879437463067, -0.066004695514408407, -0.28363396719594336, -0.093300462947429247, 0.03526227396896657, 0.1315555866231668, 0.091980662692318527, -0.0081160541251212113, 0.12425322308370529, -0.043160319385198737, -0.010050897456012592, -0.025512330079287684, -0.054800141064251164, 0.020003986809914401, 0.31672436340823878, 0.27826309013079648, 0.13789936294639166, 0.048833669604749802, -0.033553110848946716, -0.043105117290175021, -0.046986705987033792, -0.0079365698973256626, 0.048609259060924025, 0.091879922847580314, 0.23510886392711264, 0.016599220831810764, -0.12371629321306805, -0.063234562962815682, -0.089970415822645783, 0.010187402027455342, 0.072231276389250101, 0.013954273076743703, 0.061917245142637543, -0.043802817323688611, 0.043710574812090564, 0.034237891220848124, -0.14964785672058278, -0.021062558513936316, -0.0065214932642196285, 0.10036739854860938, 0.025703084368196946, -0.023339141967235796, 0.039960562146232739, -0.062023256504603302, 0.019839319918413791, 0.12567284760581157, -0.12435675118258002, 0.051042313590592921, 0.05395714565825474, -0.016946352293375488, 0.04332098462941552, 0.03818482834599253, 0.067064810396032543, -0.092507745085479834, 0.13190717572685476, 0.078818792684562711, -0.087287307293906408, 0.13682219566390141, 0.022366303998031124, -0.0032543902188911095, 0.11492942524291971, -0.070293221413877185, -0.0097661701896662682, 0.079120220441492722, -0.13762756714606011, -0.026907508147589007, -0.12733408978979363, 0.086009164316699582, 0.011950067353004187, -0.0089315833809120327, -0.049144400030709225, -0.044693326486270502, 0.01772819118739517, 0.012376530468464944, -0.085355211057613248], 
	        [-0.15926058536081383, 0.084896584812555423, 0.010352869323630227, 0.024130584286049001, -0.009902524763821266, 0.016912897049950096, 0.073092475986395414, 0.082369501233162098, 0.0043022384356816712, 0.083855432144435457, 0.032979428566029964, -0.034178053263341474, -0.029838590632024091, -0.10512208483111922, -0.008974556089922564, 0.036813559154062092, -0.020708179559887629, -0.010090767452007834, -0.072879198018760527, -0.0016777678298555698, -0.076743314512725452, 0.036399119709258167, -0.022292045391296408, -0.079820967715901137, -0.031169859791016094, -0.023949824087409338, -0.09000717940002298, 0.049463895166498989, -0.011624433079905679, -0.012190094457130381, -0.038313237174491976, -0.013830623631471112, -0.049168224717006298, -0.087380247558461244, 0.036253216857834919, -0.13554744530431564, 0.023838368099940645, 0.050095096402370184, -0.053271595872730261, -0.085011920306738001, 0.0061676064127104344, 0.0016709301712408975, -0.013992899617507056, -0.062742876584451587, -0.056305160151194564, -0.080727059672253937, -0.042390280602992117, -0.14776692164523289, -0.097021309585960669, -0.070734044703521598, -0.015526870018377249, -0.2258827744334686, -0.12300661118492401, -0.11675473231723006, -0.16926423521447898, -0.11923817183461347, -0.012360787613125972, -0.053242566102073702, 0.030546117724330767, 0.11823686169287259, 0.1835792066113906, 0.16422671841790268, 0.13230129923057396, -0.066626949058822132, 0.034498938620505855, 0.23002917423607563, -0.10642345721363024, 0.095720714414564798, 0.18783595134907466, 0.1135920030571944, 0.025587855512019128, -0.067439730759943028, -0.04765764814588825, 0.10204615431399511, 0.30589644738015032, 0.1207425327574773, -0.019907430927027056, 0.079052792051151108, 0.091497228092328589, 0.053534935883382609, -0.0018597176390167877, -0.036332301992695111, -0.067753380558353393, -0.038232412213873655, 0.0085333812446309193, -0.16436890766057954, -0.041481437968170019, -0.024498004464789828, 0.10683536971967762, 0.011812992251597404, -0.1175917440126058, -0.012836857177767773, 0.0010457282789089889, 0.072147347565764422, 0.12614593084743808, -0.055281692968689629, -0.0069995168866165275, 0.060200941049300377, 0.019190774932036525, -0.00068959398576445841, -0.015094903464007381, 0.082564956168390671, 0.029352696699322452, 0.02052763134499494, -0.031246302084582171, -0.059332749185159739, 0.096753036088350022, 0.037229564658005795, 0.02552939083091145, 0.056861247331111683, -0.023450845541740421, -0.023607393595097947, 0.01954177012013153, 0.019437963266884198, 0.044548459713283819, 0.038280883907943236, 0.061662221134642245, -0.088155201525030202, 0.079304082788044877, -0.051664305162406034, 0.077757861731466968], 
	        [-0.061708370720548342, 0.047170428243489285, 0.012296886297672109, 0.0048086430115889811, 0.089273037261738325, 0.03230033333916793, 0.0099210922415796515, 0.077314960663833185, 0.0072189861909926004, -0.0057895901610497437, -0.027110780745009062, -0.13988755144130377, -0.056492694825430186, 0.043740683484729231, -0.001146343682998166, -0.087113548760168219, -0.049878803860526635, -0.044601413295294053, 0.037026759136881797, -0.019657603932586268, 0.0018226974562157855, -0.13718210083603291, -0.023654469782779481, 0.023928892232900345, -0.06122045854429186, -0.029673384135270382, 0.020848245415982687, 0.078336447612606816, -0.040875528946684489, -0.039873516281161016, -0.055583967404462552, 0.080912317767847408, -0.15785957027200945, -0.10648703433887595, -0.13229515155412883, -0.043310171649513257, -0.10793874347611057, -0.087527306016331546, -0.10889258052047679, -0.094200174396959033, -0.068306135251702482, -0.04422556269513133, -0.13934687419321917, -0.1704639053008461, -0.21416865484332515, 0.055183328393643288, 0.11437493872756643, 0.20663278657310677, -0.10572022382588278, -0.17195276126460635, -0.070753945164719556, 0.056465453539173864, 0.14099415930836151, 0.1946078610379961, -0.082660101380364309, 0.18247573517682947, 0.11507042684035029, -0.012083622193608423, 0.071742093963169731, 0.19214713056103003, 0.19212718354463745, 0.17144674880884414, 0.15448386542420869, -0.010181744325890758, -0.075106220762733905, 0.17626659048346999, 0.072929611062275981, -0.085362521503941843, -0.101891980495703, -0.093910933641212807, 0.0033217473718428897, -0.0056858529460113855, 0.010932950962091154, -0.1295062582171746, -0.046960749909438458, 0.0032455130187898154, -0.0090717781099731581, 0.0068370840428534224, 0.052015337511096507, 0.01835745774621482, 0.012669751254791792, -0.074411187515711824, -0.063973999886746402, -0.029665290241513848, 0.058058821799073575, -0.018533488843353246, 0.010601655483648394, 0.081067124952225955, 0.020392890895924158, -0.022919324383815623, 0.12127224411021978, 0.0071001462180422178, 0.12312966006288995, 0.13042358466157222, 0.046876831123739637, 0.042704169294137791, 0.068078423886842515, 0.046053854796515033, -0.0067836016920987396, 0.045065140276322649, 0.032495429886824072, -0.043798472997901496, 0.039504422768531992, -0.050502036141981343, -0.02941424277017704, -0.072356052312286992, 0.010414642546130649, -0.037595357550694798, -0.024335687688017353, 0.025902421447803838, -0.0063118171276183854, 0.028123124281161538, 0.02743154969855563, 0.0088219909651752332, 0.010829518047857936, 0.021827682953003358, 0.043520974366854995, 0.0035936083619636447, 0.056883805856356655, 0.040877092282017878, 0.015956636369652812], 
	        [-0.0083507468620479183, 0.061639371991654111, 0.063042641119523318, -0.015296208138174606, 0.10245170405475104, 0.0039985678533539099, 0.077652024216616294, 0.030021244554642851, -0.021835994938437471, 0.056396603655322688, -0.15006956293703871, 0.010032941582169524, 0.0050163763218688817, -0.018546011439547875, 0.015951124664690213, -0.0011364559207565524, 0.011706775239053238, -0.058604015442668633, 0.0015384317043948658, -0.092476074016002344, -0.061290397480221234, -0.064372135135045749, -0.036227342676995969, -0.027815877384510204, -0.024540854835821482, -0.03665117868630987, 0.017808195417626349, -0.13330602418496687, 0.093825439776295122, -0.063647339534804878, -0.050293417559033632, 0.040497807859436338, -0.093307118406317613, -0.051282463447807104, -0.013632758698631245, 0.0051772510548923657, 0.028088081363910312, -0.069493637727032959, 0.029169511310514418, -0.065714751210128819, -0.0095799664282084675, -0.0075631952942880921, -0.046689398469438127, -0.036037308824896461, -0.16326411718263986, -0.068090435834012641, -0.090402159417016945, -0.189584820342072, -0.10038557840858034, -0.081409742082743278, -0.053687695693256356, -0.16229791121556614, -0.053231203082402576, -0.075002109435830411, -0.12647068989268548, 0.18340634478038664, 0.016324182102231133, -0.095198942566774997, 0.046462085929464936, 0.13804558707599751, 0.26953073102703096, 0.10023542270642752, 0.053013201346585902, 0.043485094470545015, -0.012145589101238131, -0.056648567004507461, 0.022122779976736926, 0.14925047779460079, 0.20113371911375733, 0.15087642306265311, 0.081589939721924146, -0.094399747262114364, -0.0019980179561955858, 0.10064758348146532, 0.14323151379670465, 0.13388503720638026, -0.013345742399046789, -0.027656328955928452, -0.098837422849065534, -0.015845908439641777, -0.029293403577799304, -0.12585250537276885, -0.076534053854507705, -0.025133636251120382, -0.078349075129356405, -0.02574433170418873, 0.038564326983106453, 0.084352144623457942, 0.034971800593565937, 0.021597995522587295, -0.0096451137676172999, -0.024148476054881025, 0.035439018890817242, 0.094838888204336252, 0.013834291541066517, 0.047416120389632277, -0.052763377378187162, 0.099286557947731571, -0.042715908236761815, 0.065423720561164633, 0.012164923448017582, 0.048080933808946395, 0.046868409986020515, 0.043736365228833965, 0.033547437900394127, -0.046381661633450463, 0.062765142428707038, 0.024133154758299614, -0.097568717053638926, 0.13228826368262767, 0.043959645127688234, 0.0069923806816005706, 0.029834519712280835, -0.02842119488910682, -0.042758777280284009, 0.050490465625002964, 0.050638143272702621, 0.044201806819941999, 0.015928366919704041, 0.050283819730028469, -0.094578811274961511], 
	        [-0.0093002340146824125, 0.066420687864649622, -0.057988261829786683, 0.030467914093403506, -0.088942632863114157, -0.014873330866996408, -0.06903000288081293, -0.05977259337654181, -0.024750165724362155, 0.076980585184517628, -0.11219177639078851, -0.00026098838462658425, -0.10643324365636619, 0.046966125920151987, -0.10536876322983255, -0.073429349480272951, -0.017258600082246129, -0.0097549083090397049, 0.028937359707606723, 0.058320145229388498, -0.10852363274246603, 0.0093034019216029201, 0.0032394886759010109, -0.11758435763177846, -0.030716524173680759, -0.012968473875358794, -0.072432676585988245, -0.02951516712700545, -0.030306917069408162, -0.010562351852173165, 0.00059347532650239152, 0.045901836344348218, 0.009959243815588284, -0.14726958069576429, 0.10665865350902941, -0.058288735861848573, -0.081332140906973854, -0.10522554630509694, -0.092706118193706472, -0.080448776925478707, -0.054722262004125631, 0.035003945293075787, 0.018233850654384959, -0.064682184713342458, 0.082552298558358356, 0.043969243290146544, 0.10735340934065053, 0.17551198745608881, 0.028146227406542355, -0.093032253049539659, -0.080991883086283231, -0.17304587761466295, -0.08397564913817572, -0.082186994451058898, 0.026086345132597978, -0.024523009144156466, 0.061837165471639872, -0.0031532579414115108, 0.0138867394019625, 0.22791162384791516, 0.17839063189638452, 0.16802924166508618, -0.02242358838747683, -0.070478648225526089, 0.075631000143473515, -0.13496798278125824, 0.061914443579036908, -0.013965499326545715, -0.040287173996164619, 0.0049442314234498172, -0.14234850191040116, 0.13422797072590037, 0.0044641492895416265, 0.17884346888192523, 0.033152160970333064, -0.084186014593884625, 0.022681908276631663, 0.069503167546493966, -0.10838151310589246, 0.025867188572352328, 0.062726350687918833, 0.051958392475047875, -0.15684747676320326, 0.13621424644871002, -0.077635757069622086, 0.027664309706770987, 0.099426252087916597, -0.024066482717244451, 0.018369096774303477, 0.11490785777152708, 0.017998296859149974, -0.024584275074312559, -0.072970928250824352, 0.070923228278133063, -0.084294490518602633, 0.14548924260173943, -0.081488578294887343, -0.046883067570820579, 0.065571023838321571, 0.082578114864735361, -0.036743335018587939, 0.054909713394909312, -0.024501097951853828, 0.19599838240616638, -0.047414397145733048, 0.0027762441038286303, 0.030268059356193769, 0.14718296789670926, 0.043111866833212033, -0.045242662159025837, -0.056666701926203059, 0.011024035468495882, -0.037469678178404013, 0.034539200168746578, -0.093469946147855573, -0.030232213433933387, 0.092526075272763977, 0.0033730560801506935, -0.074954887684573437, -0.056309553485681563, -0.12734695058277604], 
	        [-0.074008406292552564, 0.059418218830081374, -0.16185533770248933, -0.095113775751815649, -0.054156530748324355, -0.09524659355343601, -0.027700374104369613, 0.13095967694644639, -0.082898147730574467, 0.043236330248349053, -0.073265765844677394, -0.010406688952704322, -0.17908099782642803, 0.11214349559047893, 0.011254398841125272, -0.07213174644946746, 0.011242646811143842, -0.12960939072644068, 0.01738837182774236, 0.052081850613964469, -0.016141307058450453, -0.0031876314325390964, 0.0604762980771201, 0.12062873361043944, -0.11552428611131449, 0.053112984787895695, -0.11175835774514202, -0.085344942760827144, -0.10341778301339327, -0.077512128518261517, 0.022696330581442322, -0.061166227958907707, -0.02680129950339076, -0.013512513628398493, 0.072871648911960699, 0.21355653955799342, -0.06105176975794184, 0.23221322645596984, -0.006049593164551087, -0.11934471718699403, -0.048734896641230797, -0.0037696701788163915, 0.0015806523808981135, -0.059016242821538792, 0.1691633875802479, -0.10636213299345615, 0.013867670987275399, 0.13029048317364064, 0.17375284613983333, 0.36096974973474127, 0.072557346833875574, -0.050622427061095779, -0.061396795580056514, 0.012028170399798491, -0.059738878843501417, -0.15920195495822725, 0.073525564169076851, 0.01066435580390359, -0.12349031715778719, -0.20862800209268534, -0.24386438086421988, 0.22269546157582101, 0.046982082135201012, -0.10969479870317536, 0.046793880429372367, -0.067828443916568087, 0.15296218972876791, -0.074195141988218055, 0.042910924531490646, -0.0147654055974203, 0.37959648332332935, 0.41757874715387594, 0.021898097003166472, -0.11237855306165129, -0.043153207830735951, -0.0018388342246165729, -0.065448802775457518, -0.010369032880327395, 0.043814853347705546, -0.0090643466570875519, 0.10571938625442225, -0.044969836340908724, -0.060017098930422549, -0.12351913057017941, 0.072888367558094025, -0.073015583002772777, 0.024488919824195432, -0.046994862580658568, 0.0061025804809166778, 0.032988941004012923, -0.05586087652942285, 0.033548851659122456, -0.10250477896692914, -0.085369660888008486, -0.091447097764426569, -0.071752973305231893, 0.0060015981451380443, 0.0048780288701872482, 0.091777742044399785, -0.063911243276619789, -0.10839434894029129, 0.14049866674905956, -0.16291269836434877, 0.049227460809667313, -0.053956655700712897, -0.025757221007218452, -0.059498509327258808, 0.029021784211283319, 0.037106210375188055, -0.043182242815119842, 0.0044685625872698392, 0.037890914860866522, -0.12462488658167202, -0.015315868709315207, -0.099421564094155007, -0.057912073130086672, -0.070463075067971545, -0.069349456777686752, 0.036224904169083069, -0.0096669174590530253, 0.0072113489889556875], 
	        [0.00054000377819494582, 0.019228224673755647, -0.0041211476935454003, 0.010351942594428495, 0.0060644135516636222, 0.030583158266134808, 0.018242859270646162, -0.011484714916580121, -0.012453527735116602, -0.013982904116162584, -0.073494945256138519, 0.00061003908987491105, -0.035456925731861377, 0.0091981481987587037, -0.0079306422406691113, -0.031346516850493486, 0.056360544230430694, 0.022269255182565641, 0.02097553828852184, 0.021592667245958069, 0.022292447571617122, -0.036376354666677192, -0.004893428694286564, 0.018803611912471426, 0.021642092128736024, 0.022979352605310751, 0.057278991872406218, -0.062846882957114797, 0.0080146423492344007, 0.001741066749290629, 0.023316260549374829, -0.0019692454830054218, -0.0097663509133344983, 0.026552602939686681, 0.019311702846604575, -0.040478949128969023, 0.042963456569752451, -0.0055572047143666106, 0.040028541338850074, 0.039092247288585756, -0.014760769957556222, 0.039287083950504967, -0.028685719461485404, -0.013542811096967075, 0.042796941924027478, 0.0093264852956811625, 0.071104573120828796, -0.012855025544723991, 0.0048120974901788259, -0.019345118328359015, -0.0068647366946253605, 0.060026504369553271, -0.051710217047649373, -0.0088037835413147456, 0.0085936562322940259, 0.011216837793947578, 0.0043659955128466099, -0.052365485216350149, 0.018585701567693985, -0.043301048775860274, 0.017257179405366647, 0.033163069502218985, -0.063371870872828223, 0.022236310454164437, -0.010282665078434856, -0.029097248102949336, -0.072928557864272242, -0.0065263865825004024, 0.021707948805501379, -0.012869723919694227, -0.036092446130363755, 0.049588404031142494, 0.0037685978390409776, -0.0354492999119638, -0.0174997172625617, 0.0017064827547835885, 0.027702634451048022, 0.010552265815024279, -0.015110098334354602, 0.010755306598934415, -0.042384518316625354, 0.055155751834777625, -0.046341678141637581, -0.025334054233096058, -0.031804391467191218, 0.0074468314164195526, 0.014822972242049056, -0.04150177712089112, 0.055659760596936877, -0.015163449841913621, -0.033479207943135934, -0.038074300748303883, 0.018025384518394062, -0.042187806169951603, -0.068458630665157463, 0.03254289254551393, -0.043000247054897869, -0.017041867015704329, 0.031343919493743794, -0.079988199511458247, 0.016715851151657413, 0.032905055715790735, 0.070750458478696737, -0.02652191057953172, 0.0097948892817532884, -0.008359095601141911, -0.022132176548511583, -0.010266695795141155, 0.027387007127093858, -0.019456613274216179, 0.047471229897352391, 0.0064639452494934177, -0.036820611388149953, -0.014924071652059345, -0.048381451190304049, -0.035401457202280787, -0.0011683979389548946, -0.054012963892719104, 0.079190962502102447, -0.046040607646046963, 0.010260604991224952], 
	        [-0.0001569077120156144, -0.00010972965005487043, 8.6821335664521299e-05, 0.00028959182937081038, 0.00013336820101180619, -0.00020448462499146614, 0.0004636545850201651, -0.0001952429751545387, 0.00033248408073506541, 0.00026250426925845949, -9.9022792602876386e-05, 0.00023043331960011237, 0.00033250215597799282, 0.00015431271343276792, -0.00017517735947227692, 0.00017580915476165387, -2.7857926473168204e-05, 0.00010573427076637082, -0.00016548039725969299, -0.00010017127208199195, -9.3138582793007851e-05, 7.6297189543994559e-05, 8.4224838605342217e-05, -9.3286798510637536e-05, -0.00028719968349017605, 0.00021350040915488894, -0.0003150556862943979, 0.00045188552513562852, -0.0005495709535034074, 0.00054579146755674018, 4.2926655116619361e-05, 0.00052308254239302049, -0.00068598038313558152, 0.00018154537313607583, -0.00019968317282380993, 0.00023651893221749917, 8.5020480110765267e-06, 0.0004909646746514007, -0.00041196038371525689, 0.00037236304958472577, -0.00014792807116663712, -0.00020787769585125376, -0.00031631921796769491, 0.0003509716053853168, -0.00053024827751745746, 0.00019205484079722751, -0.00035924357541414903, -0.00014479534658806692, -8.220562624946387e-05, -0.00026762194550129792, -0.00032865721811569347, -0.00013872646247882828, 0.00019337977765215147, -2.8930782715007319e-05, -0.00021530682683792296, 0.00050075583422803938, 1.2869664429884797e-05, 0.0002877888733890388, 2.1516688855943711e-05, -0.0003850355075187134, 0.00026923989061119341, 0.00020120455885001831, 7.1269908071457111e-05, 0.00025510516920475984, -0.0005497530710414731, 7.0801300207756768e-05, -0.00031443494990798099, 7.2727814539388924e-05, -6.7647317771771243e-05, -0.000105969532620806, 0.0002042525509826365, -2.2660407178250186e-05, -0.00046405924788414654, 0.00029312274831753277, -0.00057910649202903841, 0.00046348258977586126, -0.00018921419605052309, -6.8310692835912151e-05, -0.00011583420771371644, 0.00024261083736967087, -0.00013788873457702688, 0.0004658190984066779, -0.00037781566966009483, 0.00087162452307387728, -0.0006364250227483409, 0.00019146350082690361, -0.00030213932128696913, 0.0001548061422106152, 0.000359478662719067, 0.00034064528670862265, -0.00013396590679365383, 0.0006282001548930799, -0.00026281686425658202, 0.00062900456753615941, -0.00083565053741081752, 0.00055501251620770908, -0.00039221531463511788, 3.0416452512397468e-05, -0.00021895611944867249, -0.00025050813688963502, 7.579225944163992e-05, 0.00032480822488636235, -0.00028410221135238486, 5.0197060845594277e-05, -7.6049710996853315e-05, 0.00029722546826794691, -0.00059771003008261131, 4.8137549730292717e-05, -0.0001438309620388073, 0.00046738458634185825, -0.00043149354775268156, -2.2304724232195816e-05, -0.00053506357248750067, -0.00011828488032837592, -0.00021777877913900512, -0.00010840223620667971, -0.0008066009231476462, 0.00028972319720168074, -0.00013991311235211912, 0.00043597630491348099, -0.00043607463640516625], 
	        [0.00079929115048048283, -3.0120444183670547e-05, -9.6683286293641757e-07, 0.00086494515998912502, 0.00050305294849800619, -3.4861905346544875e-05, 0.00042196435679157235, 0.00065681743351262561, 0.00012927605196788594, -0.00026826496297133184, 0.00070485728728817559, -0.00045054232451688381, 0.00062841852757652972, 0.00021810609410295723, -0.00022766549944826936, -0.00057437187197429546, 0.00016670399815210679, -0.00045504871054576762, -0.00051896406488366464, 0.00016278501839328552, 0.00078467988668153021, -0.00020117424541528373, 0.0008133233405210466, -0.00054661334706784803, -4.6455199192108054e-05, 0.00039251101344009443, 0.00089045431724624202, 0.00044803263329346033, 0.00067252439816681275, 0.00034323953360750059, 2.970582797436061e-05, -0.00033407540980814887, 0.00020838216438882895, -0.0014686441499898312, 0.0013210643314603837, 0.00036229797084270932, -0.00042100922626168297, -0.0010662328062863852, -0.00047868856534150767, -0.0011025209542825376, -0.00011142308623937613, 0.0003605454081693979, 0.00080536848328376098, -0.0010504288820343197, 0.0012459778440163868, -0.0012889417769073701, -0.00010349556762601422, -0.00032598744524173912, 0.0008195978542099927, -0.00032869537508760371, 0.00078427904311249158, -0.00031027891242364769, -0.00013199686164484803, -0.0012037863711194877, 0.00056966626743207988, -0.0015831212285748082, 0.0012383789939280389, -0.00020329286471698974, 0.00054441517775214582, -0.00047971421799346964, 0.00036398024475242652, 3.0135996240618357e-06, 0.00034630267917200308, -0.00016208082819759925, 0.00076531009349528958, -0.0004374341893310929, 0.00035576070800035636, -0.00024010306236346007, 0.00021524875497277648, -0.00065504769214781017, 0.00036034608435831644, -0.00028137429763217675, -0.00014369965739139887, -0.00019791219870676433, -0.00050361569379568649, 0.00056144872177278649, -0.00023162087151370331, -0.0004190557849820635, -4.5824271728219651e-05, -7.5822332618488003e-05, 0.00080031407570023763, 0.00055839973489382397, 2.2265876928228429e-05, 0.00089772546330477848, -9.8580631232442206e-05, 0.0011729728289751398, -0.00052769578439227499, -0.00056096133489415972, 0.00010460229482414998, 0.00047497799203599991, 0.00073708806200396479, -5.6914197126341215e-05, -0.00031024215768372942, 0.00087524112410012483, -0.00044804418685771147, 0.00049555628484605416, -0.00070264579048571682, 0.00085455641871353544, 0.00012341905578699096, -0.00093546710283165697, 0.00037822251053991601, -0.00032902309441029502, 0.00056646914676724593, 0.00025216417640113158, -0.00037243077631573997, 0.00061576720559803309, -0.00048527538553305369, 0.00051397678370687996, -0.00076368821209107408, -0.0002717643717346516, -0.00036517822732572668, -0.0012782404754204373, -0.00037035199188238405, -0.0012045089669873877, -0.00051115856617512181, -0.00047596944593941704, -0.00072161260682115057, -0.00037669329780016733, -0.00075398515762274687, 0.00013432829456021169, -0.00059059014732752192], 
	        [-0.00025150140763611817, 0.00020005435484797551, 0.00019417083739569404, -5.7923010958152443e-05, 0.00055863820768581925, -0.00029404960975239897, 0.00046418988043501249, 0.00016919725054860514, -0.0001365681365060609, 0.00014340737825123363, -2.7245579659461233e-05, -0.00017462744794458128, 0.0004320870347869557, -0.00024872373436234194, 0.00033850066080495095, -0.00042824500087672388, 0.00045274589383560021, -0.00033817558566411835, -0.00015836618254124374, 0.00037188063032157683, 4.0013223047928148e-05, 0.00029638131479669633, -1.1757971572848584e-06, -0.0001744667552400006, 0.0001268511029074151, -0.00025760998701211679, 0.00047735971540077606, -0.00015834145077744249, 0.00011916420387451162, 0.00015943376359087678, 9.3650022541307172e-05, 0.00013240084078796482, 2.5813088587590515e-05, 7.7538776799327379e-06, -0.00041105076291241384, 0.00045452204783612738, -4.040458358791927e-05, -0.00042518565093397536, 2.9496406138524887e-05, 0.00022369184176485946, -0.00022326384816004656, -5.9696847652630737e-05, 9.5900199581322714e-05, -0.00021800428194160856, -6.6285576454976763e-05, 0.0006383470103711519, -0.00035775911240443345, -0.00043585234193858034, 0.00055520311419225742, -0.00046867848529014242, -0.00036668240995048861, 0.00044104545236546815, -0.00016743491057120887, -0.00015286382598361098, -0.00042267651180960325, 0.00017696200882469978, -0.00087954556419632575, 0.00041465822593126441, 0.00030450324586917162, 6.846537634285204e-06, 0.00021324027853833406, 5.5444233738137332e-05, -0.00045538727717156589, 0.00036257374232944806, 5.8126129137410108e-05, 0.00048701098444248843, -0.0010394561974651842, 0.0011088516063339896, -0.00047446710387000549, -0.00021639705414199396, -0.00030264565453152321, -0.00031876669624713905, 0.00018256793655110101, 0.00022085306808071166, -0.00045708478654703222, -0.00016764562120866666, -0.00038680711837089563, 0.00023465496957380009, -0.00089058592344853351, 2.7029323083889965e-05, -0.00019392260432311614, 0.00043159570786490569, 0.0001466476034520035, 0.00020276998330380014, -0.00016623775962797588, 3.3772960168344411e-05, -6.9000858996467757e-06, 0.0003173325151770612, 0.00013183707157224346, -0.00026275451596236401, 0.00030496779772497273, -0.00022988038412455076, -0.00034410662962488809, 0.00033974096399670022, -9.4370346309838749e-05, 0.00015929656150039573, 0.0002208318439938517, 0.00023298688340578377, 0.00026684718412763758, -0.00042236166617067028, 0.0010171866741304654, -0.00066560749024659172, 0.00023102910516509278, -5.1105334736391728e-05, -0.00025247439169374941, 0.00027604436336503557, -0.00017760551435710054, -0.00010325189793795159, 8.8214957933602754e-05, -0.00022473324648105992, -9.1082737484730111e-05, -0.00032298641944957397, 0.00049768435071036133, 8.618913329085944e-05, -0.00027278781263277881, -0.00012650947795273654, -0.00052227277756379986, -5.2140779588955022e-05, -0.00031611240635322224, 0.00017884485805307976, -0.00037941318770559661], 
	        [-0.17866885726802303, -0.01004627890548361, -0.042589675487805567, -0.065934664074428745, 0.052273011858990394, 0.03312160535571991, 0.027950496866449639, 0.034597017771390251, 0.040653401856438627, -0.006028884452193628, 0.012100171644170557, -0.005823115292745859, -0.07582851399159081, 0.11466944513385099, 0.020113986866166972, 0.068302399730251775, 0.053667514905722302, -0.0019151045898751218, 0.0032161515425703988, -0.02286773204984241, -0.036064260364357094, 0.0030444356366628143, 0.0050268251131806128, -0.016159035960289652, 0.01343428575788129, 0.046278393980945166, -0.019863576518606291, 0.033081554152618362, -0.011511204742527398, -0.02336066267834247, 0.048030531271691712, 0.072162863127648066, -0.034706965262833941, 0.015742792044845896, -0.04365784041015932, 0.052989886160218033, -0.00057782844346462858, 0.053685241409785159, 0.056409616043422858, 0.031927074543435394, 0.076208252276906155, 0.035084748498761961, 0.016016932367084777, 0.097829252626441224, -0.010932961737962918, -0.057604724295680525, -0.046117493596561435, 0.11586835368372229, 0.016630360691506946, -0.072380612241233516, -0.02721078987250658, 0.10400189079503686, -0.049863708111842611, 0.013157090965211962, 0.068758075593380402, -0.086093382914331593, 0.10550940203644331, -0.051925636293921058, -0.08457695827736228, -0.023868518013074047, 0.11534819907311766, -0.029927793894114596, -0.098805321065736557, 0.08174885118680475, -0.1060908740185344, 0.031317095721549532, -0.028082259348080146, 0.079441855776121006, -0.093214174572659181, -0.069858116578834631, 0.1070256004886421, -0.071547923438654293, 0.064465129204212171, -0.099164651058250175, -0.013469569177392421, 0.034352271480565931, -0.10594412155782011, -0.03578650235512626, -0.011063899652176858, 0.01837774789897521, -0.039253607512632752, -0.14016878911229191, -0.03721312667737868, 0.011543278654149135, 0.0046564754198335154, -0.076081218695912403, 0.021616522856597421, 0.0056963747245355328, -0.054225456412860529, 0.039976482103285263, -0.014191880258275905, -0.056038754162233653, -0.085955467898357049, 0.022657092076657198, -0.0022047701913627767, 0.0023519724649996229, -0.0086408360440515565, -0.064880638505246765, -0.0055523419967167011, 0.079595981567899043, -0.011189689119441921, 0.019694004932030575, -0.0090801628377648672, 0.0030332790803103706, -0.11172688994501827, -0.037768645256787345, 0.14407928948205997, 0.0085417960067592294, 0.051063118511239784, -0.013809133479955219, -0.018804152269311619, -0.07472568370647939, 0.06221295634359636, -0.031173033698703514, 0.023265775517157146, -0.013229707925293089, -0.088087391935272305, -0.16850726894231444, 0.014989271963221966, -0.045790255154309852, 0.038301569939229688], 
	        [-0.12471960559298051, 0.016331688001818473, 0.010132274081235342, 0.0072416673905218165, -0.059929049564220245, 0.014888737012368864, -0.052418796845186043, 0.022430681494682764, -0.043701832681609432, 0.021372011063678874, -0.066551867105933471, -0.076751551449093222, 0.031454085069049939, 0.00050698620363882289, 0.048208537020902352, -0.043606360639726817, -0.026401547797884867, 0.11494953428588206, -0.00084487993298972171, 0.041763229275026299, 0.01662088156180045, 0.095743595922567412, 0.016932325856871336, -0.031217493839729042, 0.021554336392332216, -0.061228351827234268, 0.081696206527506948, -0.055099500179900118, -0.095301583024627504, -0.031351972335037837, -0.035124606327755464, -0.028837124821496515, -0.047884715408835349, 0.060702425126256093, 0.080684564761646177, -0.039627899139767567, 0.064709803419545964, 0.013113165039676609, 0.16301141390375001, 0.12824898952567468, 0.074636476814154057, -0.016897285990514471, 0.010567173254586882, 0.0033568218888065868, -0.041216089414404501, 0.083780621282672774, 0.10218950832276399, -0.048555074093876056, 0.095493142695549343, -0.12104629625143107, -0.1493368753465891, -0.038946784830535597, 0.053670879181312289, 0.10886118501283593, 0.0623983957252945, -0.064004861565808618, -0.0011642109155079912, -0.017989480311898197, 0.10376420696530403, -0.021666202371688252, 0.20636172793169102, 0.067515676746473546, 0.022594628822994373, -0.10875049523175929, -0.15367838830228961, -0.10156435275826153, -0.056219286606131964, 0.0048935577385261636, 0.080508839991384598, -0.048986994532721484, -0.054673573535446829, 0.034417241571081683, 0.13788724353627765, 0.17933790589816131, 0.22694206874489239, 0.16714737286853379, 0.28887901477932182, -0.0045505039085086373, 0.12853746432697205, -0.14688209250590184, 0.039803550389166095, 0.001161697593967297, -0.19133864743440931, -0.11485627148408395, -0.040556116529253762, -0.07701433461570141, -0.064919136067342759, -0.17402303487112258, -0.069451907977663707, -0.17069839255636562, 0.097553381246305429, -0.012417013824468703, 0.008779997988951951, 0.033808465522018064, -0.040323952860908119, -0.12350740477425591, -0.071103775036993527, -0.032842030960087386, -0.025256511130247631, -0.13557637802150552, 0.13026525943758985, -0.098978661007624966, 0.016539720299720638, -0.055393829003122938, -0.017477845213565581, 0.082533142084316155, -0.0052692792534465727, 0.023714959705274333, -0.025127637792893034, -0.054493603758074591, -0.0065251479532096798, -0.19551796620580655, 0.00051533084431857473, -0.12469764291808262, -0.010402114917957516, -0.040854371970225421, -0.050091277739518963, 0.0061714297831496267, -0.022234206683905616, 0.02500462259196987, 0.053771861975124485], 
	        [-0.06953146063004409, -0.027855167396772469, 0.018198128969876097, 0.015264256008671422, -0.021354522403683483, -0.060614589679217915, 0.0074260205660308318, 0.044909342578395892, -0.022290100457800159, -0.045038114215761482, -0.055530719421861996, 0.0902442269939355, -0.0038080752412905372, 0.0018190374684997207, -0.023994658931284905, 0.022637227704013697, 0.034385575661622605, -0.0041323426627789817, -0.015239537988315635, 0.059722981968446186, 0.0035446565552159082, 0.10857055311904133, 0.015827587897896331, 0.0089878658118320159, 0.021416627127059842, -0.026000364715464741, -0.072053616087858346, 0.0067502383554667415, -0.043797404208141606, -0.086222116691012249, 0.0012469216786467549, 0.0139677771449414, -0.018800069260904509, 0.091106469337856627, 0.071482857933576227, 0.053141334521401601, 0.0091480821350588895, 0.0032188812978254239, 0.10531967232382244, 0.013069231097604272, 0.11321624512420622, 0.024085428042357526, 0.10571237447906545, 0.097249430799325298, -0.040356773391022248, -0.052072201970584105, 0.0094838487447085687, 0.023224654347251975, 0.048982273381055874, -0.077047377168934061, -0.016369059725570845, -0.0483990050185562, -0.017518918630372055, -0.048725264078332518, -0.090695565054201857, 0.14584898982636468, 0.020202497107516055, 0.052473273376908665, -0.0059210182550390594, 0.0022813027410172881, 0.011431314884242511, 0.098601714425802095, 0.035390606662766999, 0.11802445684529828, 0.014488333933066366, 0.14985625484032264, -0.083365081182869311, 0.02604166398390495, 0.057536223475310372, 0.10289686959448127, 0.13376253308792016, 0.098599279015396224, 0.11296262694625853, 0.066811519947584497, -0.030392332219791651, 0.037677148170599001, -0.080465409013379868, -0.013433044614551137, -0.079050272382343106, -0.086927785491348469, -0.13723308506024745, -0.16180861780403702, -0.1559436708245299, -0.15633705073107523, -0.15765816424278123, -0.019054153693685204, -0.066428041346772757, -0.040315394300378581, -0.15529720969926392, 0.12101901933989367, 0.0073739433496777876, -0.039042313006326899, 0.044864452505471414, -0.031074257750175131, -0.037869139729967256, 0.02693566917864209, -0.025703296599595565, 0.030655452436583908, -0.0083294916392306975, 0.030463719734315588, -0.016822379770469454, 0.010025642600714306, 0.023941947007600384, 0.0037369192163097253, -0.0062061382772640519, 0.040478298614511805, 0.015199733590990229, 0.035362093609806654, 0.035113913555059863, -0.10029441782907185, -0.10610472749034416, -0.052099942445672578, -0.0037985170316418085, 0.029290155294759784, 0.020763196785263893, 0.037574297260543371, 0.050568193891647441, 0.0025948365095440178, -0.034033364904604929, -0.031897318483976964, -0.072552877764797324], 
	        [-0.074150761326980147, -0.00066986401946685092, -0.038515158134214342, -0.023181050413543618, -0.032101285996002565, -0.016813865511960804, -0.043281469336209986, -0.034096544273423686, 0.01015713603552236, 0.030027201044358451, -0.13569617378270427, 0.05532035184255174, 0.041422683304832522, 0.054237693471711729, 0.075158352517811028, -0.0045611635231176673, 0.0049336835448356223, -0.027804205731258878, 0.037859313146976444, -0.010636484133250523, 0.043039074634147079, -0.031109281470661186, -0.026842848775607248, -0.03367029747858763, 0.0053081926498119852, -0.039719826466191911, -0.011433401479806288, 0.0018726799542050226, -0.030624975101159628, -0.0029380651582422979, -0.0095989319691330288, -0.013587888941593039, -0.0090228406954841085, 0.013981082758308103, -0.027132225331696645, -0.066722260341411405, 0.029996307562002861, 0.10810874336228038, 0.073932536945285954, 0.094596891288321466, 0.021326989785555719, 0.0051895327288904308, 0.090625514956272496, -0.0014967572066416635, 0.095691596028677217, 0.071032806785292307, 0.093121494030091692, 0.086410233422467064, -0.082911827913294739, -0.063317188738201691, 0.058040828225321459, 0.094123280130627499, 0.048289462433899338, 0.0065600637976757845, -0.017978915242308827, -0.10529465762835961, -0.099505376903884918, -0.11641428549809074, -0.16336914552196619, -0.03066309873006054, 0.037327302518737379, 0.021715752289796372, -0.036984427993582598, 0.10584212495392706, -0.038900837284283257, 0.042388662040559938, 0.15761090374525039, 0.14948261048000774, 0.15123269083375968, 0.26082790242726567, 0.24549601207125132, 0.20845042919094864, 0.014092314529055919, -0.081544305437015088, -0.12046457900197742, 0.19946559288633667, -0.12279301434870472, 0.043147465336577269, -0.0039359433149267903, 0.041944507737883142, -0.14662824409559153, -0.16841554816441323, -0.21746364722425923, -0.14593598626028459, 0.12453643290997443, -0.018239200160202453, -0.09647557951641697, 0.096744958348161519, -0.16116049604787364, -0.10959035389321688, -0.18407080190584757, 0.028717350720618054, 0.017940145844063823, 0.067712609426401407, 0.070426899449170036, -0.11002871292121127, 0.093083619307167409, 0.015479935983498054, -0.15557089262678336, -0.014144367587187956, 0.032512137754861198, 0.05556774883075101, -0.017472918751953406, -0.029533628631708192, -0.038827731306693092, -0.03021232345401817, 0.045497082764698535, -0.15437986410128418, 0.13419753386333874, -0.20134066892161695, 0.062249155617802823, 0.024284286780838271, -0.036965190357203068, 0.004665449800701868, 0.019888261193014966, -0.083467980409420606, -0.016566558945081397, -0.083160175930132627, 0.0045192184141086209, -0.15565975294086548, -0.091842377438527273], 
	        [-0.066489372545755529, -0.047718799252733826, -0.09410351655788475, -0.013599740258147358, -0.045530705171441511, -0.085061538345857085, -0.063093532506485611, -0.053820778098933868, -0.1222176787662156, 0.047517892917907548, -0.10543817119017407, -0.12135417994296471, 0.020628638474339593, 0.038231355833956926, -0.043392365131814319, 0.0044224749450447378, -0.038085077795412883, -0.079830174085868372, -0.028985978187303432, -0.065505748977689585, -0.088402519021417422, 0.0075685626418508772, 0.014599611957773671, -0.0022052017437265842, 0.018238800652908803, 0.066199495089427851, 0.014132567520511584, -0.018584781288268692, 0.0097275167736109152, -0.013372741092406291, -0.13951730470879722, -0.099454439128528874, 0.0024536802212185172, 0.023325717552923071, 0.052273179874949491, -0.0078433789568586876, -0.019449100540297075, -0.03793640930232544, 0.006026659571149097, 0.040309888608414196, 0.06132376182771021, 0.12961234902069763, -0.05246356331115444, -0.092316625226469162, 0.12501372859645493, -0.023511024540922139, 0.068699855508214253, 0.081178430452994624, 0.081636331620792119, 0.13284552600960509, 0.11443480169918706, 0.031137356793659591, 0.03957361525706285, 0.064206693867907672, -0.026585623441445331, -0.069602244432452998, -0.006882701260322803, -0.086642203201899415, -0.12201442995127351, -0.087602601453127441, -0.097081289635905094, -0.14353417247406297, -0.032404092368745641, 0.016664803245589305, -0.028877650787150662, 0.046660756524674038, 0.1676934927534405, 0.081856698021962743, 0.1329811871153378, 0.15796978913910928, 0.15420647629486711, 0.23507941566445101, 0.10845077567152385, -0.02663613626038222, 0.10225924257045012, 0.074815640105395723, -0.067484345697152587, 0.014558971240431304, -0.031796943969915691, -0.060628238131727054, -0.091575240277000952, -0.021836966217199869, -0.1828633961798013, 0.094501673222211161, 0.013464938214634688, 0.017062888577847678, 0.047282001792194439, 0.10222149429615252, 0.0032626808542848551, 0.014576952315965966, 0.053700266574035892, 0.04846835624654347, 0.0033060862248684986, 0.10214575008785104, -0.077242394031282607, 0.018934507344396237, 0.00098413451682097947, 0.047211817912021947, -0.042523626918625143, -0.059478892430034694, -0.043645446723720886, 0.0072259828467460575, -0.045364397904695007, 0.0015257865026378006, 0.033942020440189763, -0.062868543989156617, -0.011162136740504053, -0.026181503928468051, 0.11832542908426394, -0.11894486304453102, 0.0030266795551997794, -0.019806603799353117, -0.020184767444436195, -0.0019914632003974475, -0.028348567852824622, -0.051936208080729802, -0.114547660653914, 0.016934758716036884, -0.037824591697152236, -0.01375883701059563, -0.14176618903476443], 
	        [-0.12379363868138007, -0.022793163596252192, -0.056572016200135848, -0.039201119991114218, -0.014505658462787643, -0.14164430469555672, -0.066772525835277804, -0.01689199875955201, 0.018395341706225341, -0.060257373814153137, -0.11708273412158036, -0.16991897990888952, 0.02268184312792898, -0.037431787558444535, 0.0278362850257034, -0.10391555593395135, -0.024895792104006661, -0.10240649559419762, 0.027892065133358145, 0.037030240290622553, 0.025269076865704919, -0.18054736103209962, -0.13783839666730963, 0.03215416365047865, 0.10446321758795965, 0.042116319344015371, 0.0035951247503783063, 0.065346577329699312, 0.022452948281901614, -0.0013754778263451381, -0.030524202281055096, 0.030663561315706717, -0.09877455975225044, 0.21124607085784919, 0.031922562444243588, -0.034705389173491433, 0.036621988513888717, -0.010853119077650658, -0.0073890345339706932, 0.0056782910255717134, 0.029566782664102689, 0.096433520675437784, 0.029157767155665329, 0.29856892064118878, -0.07919582633844692, 0.00025703866042990631, 0.030975751575185936, -0.077561027711158165, 0.10470636569751657, 0.1428460407644222, 0.099401781103168885, -0.040836585779750967, -0.11174053722087644, -0.067308311411080401, -0.18341503352838884, 0.13979526699252226, -0.041934973700445265, -0.092866471596007444, 0.019653227675469925, -0.090390148741556695, -0.20734375167567454, -0.072877904472334984, 0.0027432574380281405, 0.0061245885209975925, 0.094598126228364096, 0.15505695773274958, 0.041295097014746554, 0.006098921880011085, 0.20246902024512597, 0.18772782665817625, 0.14967157503073222, 0.29059802382753935, 0.18823387968962019, 0.15999395370095998, 0.11915607104783087, 0.056017723784593507, -0.02792887117414139, 0.056676427194019247, 0.014381577347003349, -0.043592335358605627, -0.10690022762213068, -0.06224823853094813, -0.17877352623373868, -0.092288169841172746, -0.18022508861455536, -0.061398773420600558, 0.0666828177706692, 0.095796826575196115, -0.075610336916687143, 0.033484310787615143, 0.0090710017296596057, 0.0023841350072704715, 0.012849690649430291, 0.0037371676082230965, 0.056507739912754651, 0.071820826637994356, 0.074186721529350602, -0.027905258130710861, -0.084135488182671275, 0.10542017164154836, 0.028027285290237042, 0.065445007475626482, 0.064161641086581678, 0.03294077475246366, 0.0054020657546699907, 0.035715241209970591, 0.0077120039679083111, -0.035145762312081205, 0.095730503021840191, 0.068293341444558953, -0.1743073123711078, -0.053416372888697425, -0.043073098090359502, -0.075042084240128315, -0.0026001415644313353, -0.026744723242628617, -0.014014546902059697, -0.037147009442388884, -0.029554069220702237, -0.052552735398048014, -0.20455065610576798], 
	        [-0.080336718914324784, 0.031542907328002801, -0.080333284552386419, -0.16579677604599055, -0.012897402202476056, -0.10178589629685617, -0.017890795871391321, -0.047932174101883621, -0.069572714289158219, -0.013085371055274415, -0.06403048933442046, -0.04738918650528029, -0.048253300258942214, 0.010624097533814846, -0.088303853599706453, -0.024800418220789627, -0.017016233501825004, -0.0731122923145789, 0.01795798282892851, 0.020031779934763197, 0.026270539591568495, -0.10026542176987073, -0.055354197675606544, -0.019202819676109054, -0.17886561336922624, -0.047929449603121586, -0.015476611158838961, -0.036580931341111331, -0.0013977731542055873, -0.024379638918464477, -0.013239317850851168, -0.016219240360668748, 0.033455910961528168, 0.031281534097803848, -0.11781030984741167, 0.08675961993407609, 0.096838260201831047, 0.0075779597881384594, 0.04020793008597133, 0.039796641743254979, -0.007964327106749873, 0.057675226481024938, 0.065973169052705491, 0.076368677904105231, -0.094338220047695015, 0.027581810662796059, 0.17673036090517169, 0.0080281795881781692, 0.079733536301333036, 0.14711146045229179, 0.066918272520925415, 0.050334009299972608, 0.001155762195899003, 0.013615235385982936, 0.0030149122423125882, -0.0015609840824338042, 0.13349258506848927, -0.080526523771321704, 0.050306757732385049, -0.13744070442042641, -0.073796305193363679, -0.031880400975331472, -0.057867003215660712, -0.065217491770658081, -0.066794148181761118, -0.088250637948153923, 0.0096844572434620149, -0.042763801342421685, 0.094637934686230163, -0.066201626509630768, 0.13555077154373779, 0.15162691406173393, 0.11508260905995207, 0.091265965106029301, 0.14083962832741773, 0.12798665154188912, 0.2063621060271425, 0.028581014482874013, 0.14481738942061018, -0.064493408628708213, 0.14635053020889283, -0.03932501773954096, -0.049277809721883913, -0.080228288656955471, 0.016307833788669575, -0.064651428896592297, -0.0779270812226531, -0.029574158180475041, -0.024416232437453507, -0.13305347995208761, 0.13699379135763934, -0.022414216362762814, -0.005868709852490793, 0.0049991943700797639, 0.070540277709872645, -0.0003799065544888118, -0.011858514238347152, 0.094750691888543861, 0.032188664060007421, -0.084874702797453586, 0.14236331721498632, -0.035524545957734237, -0.025841070343849228, -0.0789528097144718, 0.048317846092030999, -0.082026719163858675, 0.043364294508417431, 0.0027045844775661172, -0.027920654078814632, -0.071950926204345095, -0.099679715705843941, -0.1207171044051677, 0.027685856470463906, -0.065396577120716684, 0.041932056613189474, -0.063470441933357852, 0.015317705347783588, -0.088954618003619201, -0.0024258796088682186, -0.055981681173908476, 0.02502279163090345], 
	        [-0.16063469325056712, -0.05067950894114695, -0.017602698377438247, -0.0024719881205989246, 0.025626936786392211, 0.0064474558094759424, 0.040905232267662323, -0.019412107970519368, 0.010907705003810574, -0.05700007695501437, -0.16989061568410888, -0.047847975558597475, 0.045770960450897138, 0.036605131005038968, -0.034700480386556126, -0.038814165043767439, 0.059925472084798384, -0.045041592097425781, 0.0044791344272125319, 0.010085652451881422, 0.017232862062283152, -0.014699311623237801, -0.031158529886819011, 0.054785786247363535, -0.045018671355357719, 0.027938316028020466, -0.050947638456247675, -0.058027574321254612, -0.018142649252876362, -0.073467281992698821, 0.029761358083885719, 0.020105401337809463, -0.03083009871677686, 0.0089384529359374659, 0.0094917883425194721, 0.031257493638173192, -0.074324621899297436, 0.047502293228496903, -0.087202881668554666, 0.019497480457585127, 0.018801723895544558, -0.020783146883739074, 0.037407226253197187, 0.01202907895240941, -0.085640174497543325, -0.01250123023712826, -0.027083881602897025, 0.012926155302517221, -0.020812027426987748, -0.14055809283539628, -0.11374506591076419, 0.017924843458942127, -0.028516516145943489, 0.04585868851160263, -0.13117828388950331, -0.17389092870879497, 0.053714156567446165, 0.032300075701893374, 0.057520195145752226, 0.05904654140586256, -0.11508635724303731, 0.043565776393052071, 0.059536594262724729, 0.076599133764207433, 0.014207229570090983, -0.1199427514262921, 0.0034830414572159379, 0.08308252095344841, 0.068672949782330364, 0.06634459181806078, 0.084012567514670983, 0.10863093494536288, 0.036021688136296692, 0.12380137951173706, 0.043236576328048351, 0.059399643665654131, 0.042445309474632237, 0.12789338744678247, 0.014244324437140979, 0.067136246650945752, 0.086699105492600792, 0.059557262090246026, 0.01809855186232609, 0.010713420148594992, -0.00059579884010052542, 0.061343460083962291, -0.0001398559588360257, 0.22412677713663717, 0.088013675847793266, -0.058215067302030736, -0.0012260538656294895, 0.042305970671931085, 0.052067344797856172, 0.075414674705730864, 0.077471176915617654, 0.045711382613932913, 0.017695427073964477, -0.0030658636257887804, -0.02962365327526081, 0.12896765936351437, 0.042183866960819091, -0.039394998979108344, -0.041007428922027155, -0.13390483965174424, -0.042499818684505593, -0.05819462525466032, -0.09519971864692886, -0.049990903182070265, -0.035359428820787173, 0.15859976300873996, -0.11702120905543276, 0.022050407195940078, 0.048192823572219948, -0.0056565047319631634, 0.055321599542422356, 0.0039771126512435362, 0.0088791472452440304, 0.03097294566737252, 0.036136614851221327, 0.077636657455759733, -0.11747304066916951], 
	        [0.0032106468813388467, 0.088885172720810104, 0.10096080668798724, 0.022292605842750123, -0.071525453247951051, 0.00574314306889687, 0.065381001294423258, 0.008264090951624635, -0.052297923633555253, 0.055063249156703478, 0.042135956165554989, -0.0027337283351114711, 0.061070962060578285, -0.10701158010008113, -0.055827956173158652, -0.065032694832464877, -0.011795338702579206, -0.16486859585693212, 0.021281059707202635, 0.011339055054131499, 0.015607579889776426, -0.085750449282884861, 0.0043087122389073168, -0.0028333671241141632, -0.075704651954975333, -0.095023634532319393, -0.024443325177031752, -0.0048742931725701613, 0.05373563149718516, -0.046164464204305776, -0.0933941298749114, -0.089491902135308304, -0.070094066124814669, -0.034764911995005567, -0.11036613659441624, -0.041699289757935284, 0.048555414105324039, 0.037316594330165868, -0.0091258495682343954, -0.02483773607684505, -0.10811625353969287, -0.011196019395676729, 0.062000571065406324, -0.030908870870323263, -0.20817374216641296, 0.02840804114908593, -0.03422871356001763, 0.015547093956459614, 0.042037769469384534, 0.14900049504903043, -0.077828081337516036, 0.33343667124234072, 0.36268347456674099, 0.18381088902743745, 0.18801989730141397, -0.026760107917241149, 0.0010510016353630809, 0.04098821271669377, 0.14354810186479433, 0.14720129753717756, -0.22198578529791352, 0.31511902115816237, -0.097933631284173289, -0.34108764393991897, -0.17922303207403625, -0.075037516162488077, -0.060600402883750376, -0.019190950400804669, 0.16686302854511445, -0.012989494224628011, -0.34656568745617206, 0.14668241885677219, -0.053557529052454082, -0.24973215975275748, 0.24117194525976043, 0.06744086845556567, 0.11113519003246129, -0.17424338350633975, 0.12201079994643065, -0.092746950927085375, -0.065790817932440571, 0.35855596322291078, 0.22608246117392661, -0.11160227633029404, 0.3057247528769656, -0.10906402198659501, -0.15714103185870401, 0.068395565832379809, -0.040921771078119888, 0.0013632455963754134, 0.10794141319894564, 0.11370966065944016, 0.05701046666820303, -0.082634473203882411, 0.046327777049956803, 0.056396935402095699, 0.020212301071998881, -0.029754364902733033, 0.054466892130944161, -0.014207485080892181, 0.09398894647188305, 0.044572073845120443, -0.073566232664765058, -0.15318361570533576, -0.061212185339614172, 0.026710531000834609, 0.036455363958898757, 0.13879792308934241, 0.23979908542525458, 0.11099690466514582, -0.12734356041026987, -0.070921107619058815, -0.084031488042458663, -0.052911204994505273, 0.0080270279483869375, -0.048337382618909748, -0.040315087393064393, -0.089109265448894498, -0.10259547678103018, -0.091800365225332997, -0.21140522933050648], 
	        [-0.070541898294382954, 0.055085384725324385, 0.10152834971804957, 0.023622039667971106, 0.029955712367899665, -0.026059948581330213, 0.11064289610687274, 0.024489022629065639, 0.021970470387027496, 0.020456590772125735, -0.041116693610535521, -0.024812216615053395, 0.0095703813283907063, -0.048146399939075685, -0.0415428906870009, -0.0045487046086217439, -0.022900698211748033, -0.10095741160721779, -0.032652208533819588, 0.037091125467489772, 0.014636490326762966, -0.010920356400900416, -0.02620802388201364, -0.14214922225914331, -0.1328932262467217, -0.033250828448682102, 0.0054751584145303622, 0.091854391607495395, 0.036012195904709637, -0.080267047096344496, -0.02961991599551142, 0.026872737466068011, 0.024976155299922739, -0.10102174245681092, 0.10923707161980402, 0.070655061966962251, -0.10935696983924399, -0.32088041870161305, -0.20436936980030787, 0.050938666453356984, 0.046305961616782271, -0.052624691159288021, -0.10829047665507778, 0.090882846941261863, 0.19174066515666341, 0.12934192659574403, 0.11859841393368513, 0.26210791199518413, 0.43760372512053292, -0.073859947159134118, -0.076583679569516755, 0.10680813952910222, -0.089974391000751788, -0.061555396291372189, -0.092350841658524696, 0.024140264345503374, 0.029438378546550566, -0.01563817377224519, -0.149531624982499, -0.10876112523177132, 0.19097881484789375, -0.049896292556932682, -0.16239346086432074, 0.046709908191980121, -0.033452494674046207, 0.0046310617213296502, 0.0064216883730265698, -0.12476862042997607, -0.031313709978211708, 0.0042103020860465371, -0.025365848313462613, 0.063684281624447031, 0.13395358129694848, -0.065578135598012649, 0.057463929084066473, 0.17256882128548656, -0.11823900246670159, 0.060333559941145434, 0.0037599080210207157, -0.038200462163356909, 0.066276004488180856, 0.25634069005457549, -0.093935031031732064, 0.13649945906964844, 0.0034794918389711334, -0.072761719812314288, 0.029458016256965223, -0.015677874033259744, 0.19131561225163415, -0.12071257308516789, -0.049397234429007029, 0.077175842050914406, -0.030486255311673066, 0.049783169498945609, -0.057532752863027073, 0.14083206176111882, 0.17408755180270033, 0.009344634962950172, -0.12819205088510488, 0.097921797602201988, 0.1484657616745283, 0.21719783447349841, 0.044315601741240343, 0.11561949899769568, 0.079276552023405805, -0.12048788468641375, -0.04967266400627008, -0.032827416046744835, 0.0090015538375795498, -0.13278686515158378, -0.20143225012684127, -0.012865208501911994, -0.05226303626701382, -0.05920262987618654, -0.11792756657567573, -0.18198524247067943, -0.00074838377765898412, -0.13713941392620788, -0.061325425375407194, 0.019950339910709103, -0.062147365713498569], 
	        [0.051024887449384534, -0.019223957182048931, -0.0091744618546339037, -0.022468174999506808, 0.021117503507854546, -0.017503811543560385, -0.22284744975320528, 0.022524903374325514, -0.0024244960757924712, -0.09669110978372604, -0.025360870037480849, 0.073434608083223593, 0.15108583605808631, 0.11522226443939282, 0.12970385672228196, -0.078929081412293864, 0.097198425724444398, 0.21130504158510516, -0.24960514180766633, -0.011817596006589312, 0.064527752619131462, -0.085347869009334901, 0.049274344563864814, -0.061577460717206725, 0.063000636986332417, -0.043023349305368858, 0.069051463619963616, -0.09609209741271528, -0.061694173137081795, 0.18034406030249844, -0.16664450863414379, -0.051093562238691319, 0.06917571184956009, -0.11903894138190432, -0.085789849163004972, -0.20469477506639042, -0.037005982899997764, 0.034798731541538161, 0.063283307686923376, 0.14789727159527061, -0.066932830661805331, 0.1370086179892735, 0.0071805490139787067, -0.062055289428567216, 0.22475761134030817, -0.07322221407641237, -0.080357922936194939, -0.11455643304613655, 0.20483233186130478, 0.10475578834704286, 0.10684387147188838, -0.10691746278338331, 0.018058380084354078, 0.12868991682224998, -0.071026767781369002, 0.044129913597283861, 0.12003274537827949, 0.14236952685647059, 0.2190537724998522, 0.069722814432948976, -0.08245383109483935, -0.10618366730381419, 0.079817401692356071, 0.17121755891446927, 0.11078325008253855, -0.15750058347569248, -0.026069272820390225, 0.17501467279210839, 0.19358075940702646, 0.15583357970340797, 0.1314463732378697, 0.10802544440564531, -0.015809166657440241, -0.066108299277505417, -0.14852678093276445, -0.054744536677585956, -0.065217128725905391, -0.026931855854101287, 0.017929035819714334, -0.025775341056924528, -0.12464418113700747, -0.13001928465651194, -0.23174171618582257, -0.066900407583412314, -0.03709918303218513, -0.030813190076789343, 0.11264856069224632, -0.035279582432038409, -0.06628848394994874, -0.094885511316959062, -0.13366242376792553, -0.077209892711532127, -0.094368973509414381, 0.053335878160273763, 0.041074067958430979, -0.044715009215503601, 0.14382963030480442, -0.054988125961259349, -0.0022013354694158885, 0.021968655062323525, 0.032943999375576301, -0.0067769203537865596, 0.055702627244551682, 0.051114355169129717, -0.0071487492413514087, -0.050493456857222105, 0.11605609625221396, -0.10773904713211513, -0.017706549245958297, -0.029669410521942108, -0.16640935186157127, -0.048751600204259019, -0.074769821455474811, -0.066227226009553525, -0.10651310165824517, -0.00092592029991533063, -0.0045899177380518182, -0.041812504602206868, -0.029841850511205213, 0.040029808070416978, -0.11834854906365051], 
	        [-0.14161129968710029, -0.061296967431052014, 0.0081528021970500054, 0.095805261150028409, -0.1214127956380826, -0.15258322744582525, 0.14459270305794539, 0.10275339944853681, -0.076911198841414979, 0.010478075151826548, -0.064039029125021005, -0.084813043528063153, 0.025051235358785943, 0.087180794533482028, -0.20873218012341008, 0.0040298784271375204, 0.39082631888817743, -0.018288190749202606, -0.19371161443949322, 0.21355438299293414, 0.19218769418470427, 0.051337448826137444, -0.099999229754227564, 0.065604462250388712, -0.033196627957087541, 0.077857375844632745, 0.22272869520521954, -0.096601683736006277, -0.13244590058883512, 0.22634536048380136, -0.023759721621360811, -0.16636289752872985, 0.024375919555805453, 0.01118486694572602, 0.0090202885193231622, 0.01738778004965464, -0.043080447051755857, -0.064752417676871371, -0.15373325493809581, 0.1030300818297557, -0.086295964021762886, -0.18748306121414288, -0.083187547465909659, -0.03706603563440538, -0.091363337934458527, 0.043056498585826733, -0.0076223164368175653, -0.072300257528729178, 0.18949250084010411, 0.091582898551156061, 0.093209834464958313, 0.078433318552627251, -0.086071434197630858, -0.16935758248124871, 0.21392186250732342, -0.076880494683872147, 0.1402483451766991, 0.18838915415855717, 0.1152888395062736, -0.16631002548138826, -0.13317013948622, -0.019452425619901188, 0.013015089132922257, 0.28543941281728724, 0.23881984846112189, 0.23929137572253439, -0.02547786873886692, 0.0117330467833913, -0.031329573296911523, 0.026405820579143084, 0.17735025822121503, 0.15386780686160581, 0.02287846002087459, 0.15423023351465021, 0.10953014299545374, 0.19864560710489487, -0.10957662520495322, 0.004096363221989148, -0.0032426759955409418, -0.064959771096032265, 0.0023590326963191174, -0.082443728464586391, -0.087192941443454491, 0.0056234248083327464, -0.024093687385405751, -0.12474400395578267, -0.14738765659502367, -0.13843396166689709, -0.094736599019599688, 0.043475674535487348, -0.022122242308695854, -0.05800862114062226, 0.074104094697999404, 0.02746811155866092, -0.068145973484399658, -0.086381198469412904, -0.072754777541353594, 0.01615999106259601, -0.095064179193335305, -0.055944272676650919, 0.024970060878891819, -0.092155618763515842, 0.020485700004193069, -0.0495383796436729, 0.062127427369453307, 0.010981352953109556, 0.0281069884335561, -0.023412794627361646, -0.011846497332482567, -0.041460283596954112, -0.12375563021141642, -0.007547760161504144, -0.035060694212351605, -0.054382050709510382, -0.1278750006993222, -0.06311331594403119, -0.0786704970157521, -0.0052472339656002079, -0.027462118424014734, -0.04814512084639927, -0.097095104463997481], 
	        [0.035455977436737243, 0.012809942897525101, 0.018180045357868893, -0.0038058205145671403, -0.047339142890578501, 0.008615195889998109, -0.046294359253758216, 0.016896391023979114, 0.073402760628239458, 0.057853718952836961, 0.046801239911643658, 0.017572755691014366, -0.023834114056900314, -0.028005108801406949, -0.06170353602256768, 0.0041492518341007534, -0.099934491404056913, -0.074151439249343809, -0.097134157834440793, -0.050639923311780105, -0.051915740613493869, 0.046339971767650957, -0.10129345971353371, -0.010697452082017556, -0.13071299055096386, 0.065224314051882337, 0.035157185372583166, 0.078444236629937963, 0.020870147580858485, -0.0830089239809709, -0.041877105840284014, -0.032513609221769081, -0.065938639791909268, -0.081371766652620733, -0.042073049920613614, 0.11944084377042556, -0.19373361811893469, -0.14790789457158546, -0.091870520419793419, -0.021840321854902631, 0.047335657392996534, 0.060396938302831077, -0.07953507862322387, -0.04669220242777411, 0.19614607438362058, 0.15002481494362754, 0.22469015540171652, 0.4336980233057709, 0.17626836068479479, 0.085002991074548617, 0.17628001447054742, -0.089798104842342991, -0.10576233006915464, -0.00490481488295888, -0.064591709504694866, -0.076503661467680131, -0.048692615426703015, -0.19597570662883559, -0.27569298690784427, 0.26254751209472921, -0.056874362198840442, -0.10875561753818253, 0.27052154823814067, 0.2063604487272373, -0.0015736429213762324, -0.17758806144586672, -0.0015425548641356899, 0.050842447030100948, 0.092668112807239883, 0.030409316616439044, -0.43178847946646337, 0.36701605407304039, -0.059155527136146031, -0.34464726238122173, 0.10848868139611262, 0.10612621366138617, -0.049251160488806033, 0.16014445150386469, -0.12372249481679706, -0.15509121511818685, 0.10449868648330295, 0.1609037713099512, -0.14487084764912184, 0.43188545598260436, 0.11981190997739517, -0.13832753618194632, 0.011269255569863787, -0.081012227269308429, 0.17513077192869736, -0.046057084014966006, 0.033710883104789563, -0.01526891657845986, 0.18262045149400891, -0.10024918536752747, -0.097021078480102316, 0.066110972626649445, 0.15775023905966529, 0.10256401881259318, -0.065278008956546119, 0.019464702453137826, 0.18820857985638101, 0.076080517225552272, 0.20711454885952529, -0.009713325447248497, -0.067601022770299377, -0.045103764368489015, -0.047137892479800776, -0.043049664063698055, 0.029932336717446141, 0.0056790774310926523, -0.17630517422062925, -0.030884369614532808, -0.020628025119333808, -0.10197146214534561, -0.11425424743932233, -0.020673918969270674, -0.024767884264564922, -0.074424950506940507, -0.055048990658499254, -0.037227045102696574, -0.16215779511908984], 
	        [-0.07004854198277595, 0.085300667599954416, 0.0028140785761861914, 0.010033301281905325, 0.089867623592597673, 0.052912807279738502, -0.050135511453302736, -0.022285839005171091, 0.045302414609929523, -0.030119412353457265, 0.021823370321703377, -0.0060856428833483836, 0.023125728063449959, 0.014528954043079753, -0.0015683794659443039, -0.027995624014821439, -0.16607590496950553, 0.078730103754242331, 0.036994242953970073, -0.016141830613884009, 0.06880105102941908, -0.043417173628397525, 0.038981169845932473, -0.066540457403796618, 0.0031039127673838261, -0.013008774392859419, -0.092595121588066404, 0.12644069271642389, 0.040772818622368645, -0.085448406785026368, -0.13739227291848727, -0.13311138084893973, -0.11021206177568971, 0.070762580804387104, 0.08026074315831877, -0.16877857679840644, -0.05206002447695942, 0.13425360508864773, -0.10535134533195308, -0.33737573498423878, -0.070808291113453367, 0.057003657841298426, 0.092279918372553824, -0.011615223103444766, -0.05091285023944582, -0.16069489160844241, -0.048847803217798323, 0.071389129185656347, -0.043639202430883289, -0.13394293080575723, 0.30515544278533629, 0.23788255098353511, 0.20977385697294298, 0.12056019868772624, 0.252825166497261, -0.0023561720800214826, -0.035137059913897026, 0.049604725798679972, -0.10416358483192441, -0.14206356834350237, 0.25291808177088004, -0.038235474676427975, -0.053226677896758709, -0.16540845786613148, -0.014617042590940904, 0.02880120515663584, -0.10096787597225529, 0.10737683950894401, 0.12267043383933657, -0.058069637469088484, 0.07352676227256455, 0.010539954637614604, -0.051688256904700788, -0.072824552067626475, 0.11389405098260616, -0.099763013941535167, -0.099681076524513995, -0.0083154924851436066, 0.02878172341423068, -0.016643684462931133, -0.10306462657645374, 0.17421739601581576, -0.012649043926851018, 0.26025794182930068, 0.13061127474097123, -0.13680683615114592, -0.055878226752606029, 0.098670144436524707, -0.13970261425268571, 0.029744590816758114, 0.073907056540957833, 0.1684324925668621, 0.08906251617397061, -0.081254083870154856, 0.0080562412391433046, 0.15433309501581671, 0.061774969198347712, -0.05038568057644794, 0.19950920633649696, -0.095579333074787581, -0.078848113914305407, 0.066656901533640664, -0.07772986657418926, -0.059687592569233103, -0.0023500722459320737, -0.0046282038086771929, 0.075460714684052924, 0.11777073451853808, 0.24712980105754503, -0.021968024854625706, -0.093773910434377064, -0.011643488223564324, -0.055253337050732328, -0.067446244455495186, -0.097859711494188872, -0.067747061381834131, -0.11419175135531312, -0.15447612433882574, -0.053913847600707908, -0.072082530188140578, -0.10185711157346036], 
	        [-0.014135164933848525, -0.083516200530839357, 0.025061773696956152, 0.075977313837335109, -0.15437088222766421, -0.04240467277326615, -0.034524278854966582, 0.1318746103998901, -0.018956619417625505, -0.0026675236384224726, 0.10305833569336915, 0.040329893324884791, -0.10561491356176617, 0.017365472828129225, -0.1593697493161278, 0.032279086189098444, 0.10529509601866645, 0.075027736842911114, -0.11928350111773782, 0.10401492407708587, 0.14421269322823677, 0.0071286351316720287, -0.079992301428582629, 0.014274946401273955, -0.038729777215095025, -0.13694960123251429, 0.186445386861957, -0.065110687724615285, -0.14101483402071849, 0.22619054701312596, -0.0019016328709244301, -0.049331211684928558, 0.014047517480666363, -0.033852195689686469, -0.028526407496796823, 0.086229830449351855, 0.10755614463917934, -0.040378243554949227, 0.040168336461144302, 0.25442368338483701, -0.3499242547867164, -0.11829463044440175, -0.11321507805468442, -0.036040402153841591, 0.0091418924051510815, 0.015127629290737882, 0.048542079162587376, -0.11506255204173602, 0.081696307746731978, 0.17250695232340318, 0.15415826584650585, 0.10510570127990954, -0.21704507894326638, -0.14596864247047642, 0.1970892398119917, -0.12398828975192644, 0.10066494813730779, 0.12172147584675422, 0.12480836369060534, -0.055987894617694878, -0.21828759073305709, 0.080538081042609941, 0.23046289660391583, 0.31883071306960742, 0.20521924642268785, 0.0081842939400904868, -0.054334680492246989, -0.11191127753279448, -0.0056946625135289586, -0.04305552710584918, -0.040460404096243685, 0.10030692443116394, -0.060036553045197671, 0.14527330616853071, 0.25790754371580937, 0.16199120552860652, 0.049309451989560361, 0.0040739095783849238, 0.11099001371044198, -0.020691143951251361, -0.11143944147535105, -0.081094875651466974, -0.11638633381884322, -0.038956249190972861, -0.1298485818109307, -0.22365399252260121, -0.0058588467993392259, -0.03608666892894484, -0.077144042211452088, -0.047407377167887781, 0.027428548856661739, 0.099597053423751136, 0.040004259955310414, -0.073006673209536049, -0.017635812509909359, -0.07207223200520288, -0.0031645685054547332, -0.065567214011750335, -0.10478061295325353, 0.009440525764280297, 0.025831878010087357, -0.038820039872570433, 0.027511569211728273, 0.036751337723812103, 0.040562322742325699, -0.0038665480911575581, 0.012355677864371528, -0.053858176855473526, -0.00065956354595068066, -0.0026597994151184197, -0.11895782317212758, 0.022143400716859319, -0.046808396987253115, -0.074910221874449304, 0.018173403762517575, -0.066412768816517184, -0.03312873600388673, -0.12808543381027454, 0.0050880558741760937, -0.088215241900397035, -0.11219840847108876], 
	        [-0.036364274597361676, 0.056083891847620769, -0.054614528430129372, 0.12841266882397054, 0.034694915130257929, -0.099268838937359272, 0.035218360577730458, 0.0017050223771709963, -0.053720515111571325, -0.10469756632201047, -0.057793517872112406, -0.0079504586166561902, 0.079079001374876626, 0.17475876751746433, -0.073745536055607713, 0.14078752799492825, 0.17945289782476989, -0.028798495109090064, -0.053413953610016891, 0.088642497593947489, 0.0067588194601195459, -0.13125029810181102, 0.03217045565830174, -0.07593804991299713, -0.045683415387781846, 0.098321469102132006, -0.11054865427299748, -0.085251684099912406, 0.19879712870261834, 0.020722064313346493, 0.022471477480525272, 0.082375788173085274, -0.11575790465692171, 0.032842645738555103, -0.083484194971592596, -0.077331550720375883, -0.11177282516936979, 0.024984273273181961, -0.030403360600728728, -0.029024515371594548, -0.10371511880806172, 0.011701378243922171, 0.0093277747988130214, 0.002431192271711265, 0.15006757232014231, -0.21394797471762256, -0.11853920458017891, -0.0019533526563885917, 0.18177937076706377, 0.054954598440171316, 0.1551092512502385, 0.030060622456317722, -0.019865094069587117, 0.070850991969667099, -0.00048596237286066242, 0.17946399285467196, 0.30638569966633139, 0.14694241644943901, 0.10067729378037348, -0.073081243699588155, -0.083394453453312839, -0.13131133309870838, 0.02608780563916567, 0.15390102230569283, 0.14965704056352619, -0.12432072266765236, -0.055197512874001355, 0.23539003120249477, 0.23071437717412627, 0.17815006433908051, 0.032433010859872255, 0.085250215236998952, 0.10099385760580901, 0.076038809649047315, -0.013731917856005003, 0.0186901648513353, -0.032924756112736785, -0.22858777194216445, -0.12675914211780165, -0.11187142301820072, -0.12231050055181397, -0.022442794199238097, 0.014664186213991334, -0.049708524052554312, -0.031971360150189108, -0.03211971771044804, 0.044761469162405726, -0.048496783217227474, -0.035899743760748851, -0.059853454803789952, -0.046858773572646534, -0.054268508959597561, -0.025596949047592216, -0.059820464842134907, -0.029518961263161905, 0.0036297431646178518, -0.020509064754665129, -0.0015230193399059302, -0.090002680596330681, -0.026575598812970537, -0.010828662191731439, -0.0095882629855936694, -0.0089047256965019833, 0.0029521526762387035, 0.003804200299764901, 0.061865649665059336, 0.033689817096841081, -0.066066128467731536, -0.02437191906735954, -0.034185476570230244, -0.10893624295233989, 0.0071168280186506665, -0.09401277488927702, -0.018408076739696223, -0.057181782869844225, -0.026056248846387006, -0.088889605365135904, -0.10212222492182724, -0.043049828055051656, -0.085050747749882583, -0.026051110695555976]
	      ], "lbp": [
	        [-0.027900321369488244, -0.0060441994553984916, -0.029117905545804415, -0.012327610537342652, 0.061854476662081867, 0.095671317895324293, 0.045971729446465374, 0.01553067346468753, -0.012023121825700329, -0.040293165022942272, -0.033221733066527162, -0.0035958268721606613, -0.013857406372198591, -0.034503775174297223, 0.017543175352255434, 0.036807902994090223, 0.084770163856199093, 0.060825220456424196, -0.0093584374782611293, -0.048192584791248279, -0.0065946784148823052, -0.030168034388727068, -0.007336172112964571, -0.049812230351494888, -0.028525647622325873, -0.0089851436778563571, 0.037542932347811336, 0.07584997109273485, 0.040463627176522118, -0.0202219777393636, -0.010643448968773972, -0.025973324357000831, -0.029295410910686326, -0.049585573800075042, -0.016454172237658507, -0.013482276454755721, -0.034207328190167335, 0.069169117093015112, 0.043414738683023937, 0.066514631750824477, -0.028013646641570675, -0.0028085168494333609, 0.012846026283526629, -0.020229423320994658, 0.026363734996447397, -0.02400313852588018, -0.071418628861473987, 0.019799399074940063, 0.047961802211596821, 0.090395789173746133, 0.054870436486652595, -0.015562181031975555, -0.0052396854064607895, -0.01338270347368932, -0.0017450580356042078, 0.00097397016632680411, -0.034245488638524155, -0.029304216678874513, -0.015762970169531754, 0.01232351078031502, 0.11024357683264789, 0.0052690576096130134, -0.0082710664495191447, 0.029191444997078354, 0.010481969078390848, 0.0048675356582309672, -0.0043579148871963208, -0.025720306996157922, -0.06530772196855876, 0.016283145128269706, 0.042681321861108915, 0.074985247321301865, 0.016473247914334525, 0.013771073119619424, 0.0024092712098635191, 0.02402373658667337, 0.033110911546988531, -0.056874923774983661, -0.027797079980336641, -0.033810769624174404, 0.015078596551516596, 0.048209545205572732, 0.11415003087810688, -0.0050453148806184067, -0.02453712965304819, -0.0046878076136616098, 0.030698630375551105, 0.036164393720748929, -0.017659727315601441, -0.02758989133869354, -0.023775739038709096, -0.0031653848755319783, 0.043853892725709331, 0.093522192523850758, -0.0015598570273860773, -0.019099238204545323, 0.041500642827912271, -0.0029952551344066894, 0.02004832980498979, -0.025805960318499716, -0.014023218349180466, -0.052045089337890343, -0.0089676761596982277, 0.059688184012493893, 0.082792114958395474, 0.021692573098100312, -0.012200151839688603, -0.0040158722713318634, 0.048254090507913572, 0.0050565259058356522, -0.029779592751576791, -0.045801516188543855, -0.02221712686320438, -0.026806365466397059, 0.08055750324533141, 0.11124706386872835, 0.024835176089393517, 0.013030726244874311, 0.026214268291071548, 0.0092541421104222928, 0.054743249486413466], 
	        [-8.7334058636959547e-05, 3.7445117935188191e-05, -1.6718852112379556e-05, 2.6449717430186009e-05, 0.00026446237412404601, 0.00018012006397465953, 0.0001307947973358814, -8.9233727162704377e-05, 8.7778261435746477e-05, -2.8629705583770731e-05, 0.00019466262098214414, 4.0175132952787601e-05, -2.4470034822768327e-05, -5.5302995306328803e-05, -9.4642365284064098e-05, 0.00013992126181657828, 0.00025974343567526995, 0.00010836805931595294, -2.8508338861643612e-05, 2.061224391589761e-06, -5.4546501619936929e-05, 0.00011548126318818193, -0.0001788968780262537, 1.0106236414454163e-06, -1.6477072134012073e-05, -5.4462479167990247e-05, 4.6056613212522041e-05, 0.00020886964911843303, -5.9860313621762362e-06, 3.9146617021777741e-05, -0.00015653886989401913, -5.0893371838153789e-05, 8.3828512715357351e-05, -3.9259965209559669e-05, 2.9022913523094052e-06, -5.5656299347785557e-05, -3.9745247630351005e-05, 8.2727825803138866e-05, 0.00021615221821938771, 0.00016964902161820464, -0.00015046509771197286, -3.9211986704516637e-05, -4.1804257750674423e-05, 9.8942673641209088e-05, -3.7700357389545795e-05, -2.1777257226037079e-05, -0.00010841746095995551, -0.00011250296826445516, -2.8088672225879026e-05, 0.00024500271057997097, 0.00011698005994424145, 0.00013699860971772872, -0.00011632402760545536, 3.8758627518911681e-05, -5.0383597695171332e-05, -5.6491249769561463e-05, 4.1858840099188652e-05, 0.00010510216324040138, -9.5908590272430344e-05, -8.2666457891138537e-05, 0.00014673240802820162, 0.00017376564896403636, -6.6785749466828637e-05, 7.6117972374779332e-05, -0.00016836279120163201, 0.00012436785920524364, 2.572483873684861e-05, -6.2337391140390188e-05, -0.00015376902099116518, -2.748263618047534e-05, -2.8455141653132252e-05, 0.0001245843209365903, 0.00015628289279003135, -2.4736989716003788e-05, -2.091205958625747e-05, 4.3221191511700133e-05, -1.0154715937089193e-05, -9.9849401355839133e-05, 0.00014166961818393338, -9.9758503461578121e-05, -5.3681414486151866e-05, 2.4697228767074902e-05, 1.8249672491638027e-05, 0.00019364243897489978, -7.2708659052964433e-05, 3.8335032297432542e-05, -1.941096106845841e-05, -3.2115893129546109e-05, 5.1948009027611569e-05, -3.8286652867905793e-05, 9.7189147669228537e-05, -0.00011816184055358711, -0.00016089510526324721, 0.00011623698043458554, 4.9146090188779967e-05, 0.00010181714739832155, -1.4287799392848771e-05, 4.3291869782970463e-05, -1.9967142031866378e-05, -1.7367657007066883e-05, -1.9582956908605959e-05, -3.2832817909847489e-05, -5.3813630280598324e-05, -5.6207569526993666e-05, -5.3241932910777154e-05, 0.00024615067562027901, 9.7553256739707516e-05, 2.184380833295408e-05, 3.0258380552987147e-05, -5.3699454869285401e-05, -2.5230762735903084e-05, -5.8324496095124025e-05, -4.7049519791985783e-05, 3.6195180921022346e-05, -2.9440640435682286e-05, -6.9516912145691108e-05, 0.00012456823815416661, -3.5053968305372846e-05, 2.1986527300186251e-05, -1.5332062580714734e-05, -2.3047309958091743e-05], 
	        [-3.6084043411983239e-05, -1.9306572941766697e-05, 6.6469627400028188e-05, -6.9626706859858556e-05, 5.3717685606707692e-05, 8.63369060391736e-05, 8.2142164694962855e-05, -8.1711140914987948e-05, 4.0205836428920672e-05, 7.8479400685671497e-05, -4.9039572793939737e-05, 5.7453551592964724e-05, -0.00010018086975340998, -2.6147792389851886e-05, 7.1198224997405762e-05, 2.5682689442775401e-05, 0.00011929111371736115, 2.7860714214499385e-05, 3.2654486739197575e-06, -5.5573777784770351e-05, -2.4040836230674462e-05, -3.7015814775545261e-05, -0.00013308586174926723, 1.923769352976841e-05, -2.7445843212351578e-05, -1.199439585908063e-05, 3.5032215132376919e-05, 9.4889623314988944e-05, 4.1828095702725956e-05, -3.4147434353455977e-05, 3.1692057309944382e-05, -0.00012748342849396022, -1.5840876485394284e-05, 4.7073815318422058e-05, -5.4219379703623893e-05, -2.7057823555193261e-05, 1.957250209402156e-06, -4.2885362544764494e-06, 5.1784247492511759e-05, 9.7614017595303026e-05, 2.6206437789333403e-05, -3.840723379957417e-05, -4.3620727456269992e-05, 6.1282931602328416e-05, -4.1484546914841158e-05, -1.8991776069687133e-05, -3.8766273328664363e-05, 2.4842026175204979e-05, 1.943116733871264e-05, 5.7022083599506113e-05, 3.6943371778189182e-05, -2.2802079412020948e-05, 5.8533333908400431e-05, -3.8134075295223613e-05, -0.00010733273350739298, -2.1349054282106955e-05, 2.0212901591327992e-05, -1.0308234675579855e-05, -0.00013178259714422685, 9.2792721038507942e-06, -6.406096160121999e-06, 0.00010489353656312206, -3.6972486442386071e-05, 1.9205959162101743e-05, -2.5119901163566229e-05, 6.6677926942838254e-06, -5.3173101432296699e-05, 1.5595662104549764e-05, 4.2063861440242226e-05, -0.00011208840161249227, -8.0476085046677498e-05, 8.680420622040122e-05, 8.6344181199115091e-05, 2.8719099287293631e-05, -5.3155476409198592e-05, -5.4570646040804499e-05, 2.7740013315707968e-05, 3.1290284801600062e-06, 1.8897139614309187e-06, -0.00012179101932861119, 6.6840019799997014e-05, -0.00010633851278423791, 3.5859740502247259e-05, 0.00015372154099424235, 9.3482108860959943e-05, -5.1252862294083688e-05, -1.1146007599487084e-05, -1.9744343489652011e-05, -7.8768975259988112e-05, -7.5893435004921461e-05, 1.324648660373383e-07, -0.00019713417520837023, -1.337483475241652e-05, -3.2243587432437271e-05, 4.5963036203394009e-05, 1.3630966931021948e-06, 6.1090824316110785e-05, -3.7063944354813472e-05, 5.3774349412737815e-05, 2.8714809252497475e-05, 4.3068787919792184e-06, -5.9398600734514111e-05, 9.4064471326807484e-05, -0.00012585758504905786, 5.0460919318804677e-05, 0.00013218227218045244, 9.0391008869705747e-05, -6.4299214936155979e-05, 6.1428536959399344e-05, 7.239739626676775e-07, -6.366839054444684e-05, 4.8758759963537721e-05, 1.370601692269463e-06, -9.7972856753872155e-05, 2.9714662401220159e-05, -0.00017065450862235659, 5.6129420667599961e-07, 0.00013050423194534838, 3.9512648229014097e-05, -3.0858474698957153e-05, -8.077273509681307e-05], 
	        [-0.00010041713705304361, -7.5004427981998842e-05, 7.7578836709558431e-05, 0.00015060096637672937, 0.00010272729354795368, -1.3455811985058075e-06, -8.513816673568278e-05, 9.5277958304541138e-06, -5.125057113741175e-05, 2.1937041723950335e-06, -2.9906736665197275e-05, -1.7822507535654366e-05, 1.5920560761634173e-05, -4.2619825694686919e-07, 7.5621519507984916e-05, 0.00012391090326623749, -3.7227119771730648e-05, -5.1851912943837175e-05, -8.0359665516151202e-05, 7.6556506706648296e-06, -2.9340700929650354e-05, 8.21553152150125e-05, -6.0163498557478517e-07, -9.0231354808785729e-05, -0.00014677611474230284, 5.8459186367564031e-05, 0.00012920305793076987, 6.872786215014054e-05, -5.083503031854536e-05, -4.9057975777679064e-05, 1.4667265166828924e-05, 2.286695792285548e-06, -4.0793147414804661e-05, 3.1833081357390651e-05, -4.6139907270008307e-05, -0.00013108954174256143, -4.5014849167218651e-06, 0.00013512478717948309, 8.2693053849276603e-05, 3.7212849225235281e-05, -0.00021401767748336522, 1.2160803497153136e-05, 9.9526098024278753e-07, -4.0751249249773927e-05, -5.3363285595225268e-05, 1.3589464997432535e-05, -3.4575952982748501e-05, -8.6226276956346756e-05, 0.00012833142734719472, 0.00017949919377930994, -7.6588263679235394e-05, -5.9446820945188023e-06, -3.3933589792761384e-05, 5.9031307218506898e-05, -2.015941600058864e-05, 6.8480128461272105e-06, -3.5080450032940217e-05, -0.00010776252403311049, -6.0092138186616101e-05, -2.1591874499028371e-05, 0.0002085712636860533, 0.00013308075647107918, -0.00019038894948568419, -4.8311736467392813e-05, -4.4977282909152566e-05, 9.0492245632955992e-06, -5.3993236004005844e-05, 3.1275503979513383e-05, -3.2914668064622926e-06, -0.00013006251102497951, -6.2666458502351387e-05, 5.4666608924943544e-05, 0.00011702845908493319, 1.0892085020900236e-05, -0.00019162055407114659, 1.7055725050175042e-05, 2.974210675293909e-05, 1.5551139561116503e-05, -4.5023716002432629e-05, -6.5835168557154544e-06, -0.00012255723604855578, -3.9207372768674739e-05, 5.7719587707099479e-05, 0.00026173109381898325, 0.00011301129674169685, -5.0802156995757072e-05, -0.00012438693915498879, -0.00011512378434027151, -3.3743545817560561e-05, -3.5132235241363229e-05, -4.6345900066929873e-05, 1.5030465562238389e-05, -7.9108333110193552e-05, -0.00013976057205664083, 0.00019173792465106837, 0.0002331493622096184, -3.2682257327322451e-05, -2.227669270683898e-05, -0.00013159576482307811, -5.3703861605495715e-05, 4.6651971536551334e-06, -2.9729790998640759e-06, -7.4266730748546658e-05, -5.389279737498141e-05, -1.316760153250926e-05, -7.3089820491645252e-05, 0.00020790545462955686, 0.00015786906649726715, -6.9607449746187828e-05, -7.3261780378834282e-05, -1.4507107393861574e-05, 1.3219651490949808e-05, -6.5930835653411554e-05, 8.7110618181049371e-05, -6.5267580373248521e-05, -9.1012781288057377e-05, -5.19613620658093e-05, 0.0001223100464897317, 0.00015993077204011844, 5.6612364799854542e-07, -6.6482888690664547e-05], 
	        [-0.018520133751243464, 0.033336491324542555, 0.060819720527029927, 0.040323418834132499, -0.049047834696932316, -0.063470960442844934, -0.041691385681480758, -0.044039608866153525, 0.011258972442574882, -0.025539787514069722, 0.043103535419798611, -0.028504032717188526, 0.021790396749209295, 0.044813183605805482, 0.072342677373923595, -0.0054580991763535022, -0.068820734524706939, -0.027963615041034923, -0.043243973359288305, -0.0078418754694789261, 0.024040296276847006, -0.035356451324435254, -0.00086042742890664065, 0.0096467844413907385, 0.029019444355814925, 0.067022867313017098, 0.057029519949577098, -0.043873902116144253, -0.075663372407398011, -0.046868046699417951, -0.018264867445612423, -0.0074626900784457925, -0.021262044142767906, -0.0082441046273046235, 0.0029955900266555547, -0.0089729220855647492, 0.061100791900219963, 0.099636125742843085, 0.01246798784414134, -0.10296028529728725, -0.052371289202456622, -0.027534950783727603, -0.029445539405478512, -0.014438110426238521, -0.020597801030636742, -0.0069192729388266542, -0.0068353911578240287, 0.046888843535454167, 0.095419422615776378, 0.11952740651114951, -0.071759879152842584, -0.097543349347774588, -0.038581839090091406, -0.011359375549234043, 0.0096414218165537698, -0.019377865703622918, -0.027301905307660128, -0.018976931848243853, -0.0097874220322787808, 0.052494465523833397, 0.13673694152340612, 0.079522839381611823, -0.12204275357398138, -0.086659087964125608, -0.050788452961220157, -0.0095706052201628006, -0.031867426563525113, 0.0065403023175219614, -0.013821229136400558, -0.025841844477207752, 0.039927962074705635, 0.078783857519568928, 0.14509479705134329, 0.015223051588865631, -0.15795321280384766, -0.07811502424267372, -0.035586118805957023, -0.0074434198140412022, -0.003139865749646073, -0.0037907036206188023, -0.017030151899642937, -0.028687071734543906, 0.033231292617662847, 0.078112982645069926, 0.14321815919795058, -0.019232041974005604, -0.14758943164396549, -0.079879348969855837, -0.0083758813479438005, -0.0013328452184675349, -0.0069555223602641852, -0.013965719003215596, -0.0084517142743534557, -0.030635979725422979, 0.062564657139202229, 0.097483933781118526, 0.098393109491561992, -0.075765704484413554, -0.13450497059632649, 0.014088590669959079, -0.011155752837349455, -0.013224455473029723, 0.016020761294862018, -0.0092009384061512017, -0.026044280280468072, -0.0089942622699424254, 0.040511999855926281, 0.13765939646555747, 0.019532039084030235, -0.113685740386246, -0.014674643494660689, 0.010068963393355071, -0.0027238337107524657, -0.029503771627642287, 0.023985321668865342, -0.030691543491141608, 0.00075273240464540647, 0.016509439032383569, 0.052598123173995245, 0.093807407073263682, -0.010161298965641691], 
	        [0.022420101691410947, -0.012639778282766856, -0.054967524914303248, -0.096783598284995914, -0.029278797210954027, -0.027140150032464422, -0.0090862764272963831, -0.01436525543604809, -0.0036874965912717952, 0.046401379667166204, 0.06944892468679216, 0.046437605749818221, 0.054029149328551414, -0.014720520773996864, -0.062916130856065233, -0.098775700155922658, -0.045678178604865977, -0.010326416710093567, 0.0033233465331775174, -0.0034083775958032849, 0.018489145293850089, 0.061679618222812545, 0.030027128801833766, 0.056347586928367471, 0.025440360022667211, -0.0079353236613027636, -0.090410021555884179, -0.12919633261589189, -0.034536772506999741, -0.018948700084980397, -0.0010618822071395313, 0.013098312160546995, 0.032363848313171489, 0.050549191984487554, 0.031990411924285006, 0.050348641795340286, 0.055949633963116994, -0.021494030157359074, -0.10945006672723176, -0.09734195910364446, -0.069733612116043384, 0.00046788820631171735, 0.0088096432516313414, 0.021994342501025908, 0.0027410119068893707, 0.039372454591750629, 0.046870579313232824, 0.065600872379856318, 0.050120908492025634, -0.016483195978918071, -0.12612174723616837, -0.11190212135650279, -0.047331697359264666, -0.01726103679627998, 0.012596718517964785, -0.0075349876913478053, 0.0038005877790431991, 0.051789101650355995, 0.056092751053536116, 0.084082295492619821, 0.077148767905369536, 0.011050271359062259, -0.12128857542605344, -0.12084191927896829, -0.053176729528096434, -0.02708040311428029, -0.0075678521991022762, -0.01607121542877013, -0.019007628063393803, 0.030912220436668407, 0.061182793511099738, 0.067857694007842001, 0.11648893540497803, 0.051234448548712098, -0.062047768790331637, -0.12295702506362237, -0.11728242791483995, -0.00044317389712395395, -0.0022492229405423753, -0.027298027461083098, -0.0037412679982248703, 0.018339305301497556, 0.014062213845781296, 0.042776761103683739, 0.12121831309988876, 0.043922241629075237, -0.060790512107661343, -0.14710686167847625, 0.016829211914154221, 0.0097743210845070427, -0.02655745267922931, 0.01411019215769007, 0.0015911500130474376, 0.0048095535457472055, 0.029093722335047395, 0.02204063036696597, 0.11057315594923375, 0.028480643798939262, -0.10628170570505348, -0.035908284128103249, 0.0133539331015953, -0.0026337425678592541, 0.0037217642215676694, 0.01211758091302224, -0.017185123404806685, 0.037539560931704963, 0.021332506924666678, 0.037076669230181408, 0.034944297335335751, 0.0038125076728691906, -0.011494533354137266, -0.0025310349463153192, 0.017794319144349827, -0.0060675629645619775, 0.0061802385692899253, 0.023087539721666911, -0.0090737645476416107, 0.039516536947320213, 0.034463079883642105, 0.032448600915701092, 0.034402984786170009], 
	        [0.0068336647996234817, -0.018868811143753335, -0.059136035832249842, -0.028733110863327534, -0.04829617939991479, -0.013674449873764477, 0.021589567751534984, -0.011045509577009407, -9.2586309830101649e-05, -0.019604821913896741, -0.043554281780948161, -0.0067654209020675676, -0.02068305720368354, -0.030701868023452029, -0.028849057542991427, -0.017812677518967715, -0.045031832483275663, -0.060820037371985124, -0.010178321392366178, 0.015937284977666402, -0.016985093495210109, -0.040648498140976104, 0.062808978784564026, 0.033289631093537754, 0.0086340994321458635, -0.010322738843516595, -0.059032523363236167, -0.063911207518901086, -0.04096234057148166, -0.027001415147463827, -0.034989832948803361, -0.028182307754725123, -0.042998203295550722, 0.069170072619876719, 0.043703797355855584, 0.052829105392347621, 0.047980736517133415, -0.062746508827205477, -0.07875819635466827, -0.075127670879345507, -0.067143876925195398, -0.066726399172545248, -0.041696339372405265, -0.060750152079557279, 0.024187583912489444, 0.068640938449234204, 0.041598533606845969, 0.078906569214333658, 0.083979421652039477, -0.0038263845041486728, -0.12006341244852366, -0.11316397468328382, -0.13578926241060613, -0.093037742063093384, -0.094331325266374944, 0.039374839837024993, 0.0018502894554712629, 0.00098403884557300703, 0.043251075195119761, 0.10289600250798445, 0.10139457516638843, 0.098296318213992984, 0.0015172138792846615, -0.091353309472808869, -0.14408600311908051, -0.17601217218477397, 0.0027216978532337011, 0.0050459512202331094, 0.013052368344425278, -0.02268381542321192, 0.0018963147223881672, 0.058561197832169565, 0.10081746684744355, 0.1284091469146558, 0.081889066464071528, 0.020432446864236044, -0.041167990010434322, -0.0055028747128956224, -0.0065942601568496836, 0.014863290940840906, 0.0037309761431811826, -0.0055733957673353585, -0.0095154141766328471, -0.0085635423630069374, 0.013253049308240551, 0.048732591229276791, 0.06968257130273349, 0.046720703389001979, 0.017479981197113373, 0.013140374943216824, 0.0057338967701967298, -0.012003741816435577, 0.023955505761992523, -0.030000657870097674, 0.047563304649765062, 0.0077259610173529046, 0.033237902464347463, 0.017011399778159172, 0.061533921370621733, 0.020212718731567866, 0.017305311353954009, 0.0022897792857957105, 0.0016835294612028012, 0.0010206390840901067, 0.017475023171824131, -0.017949934386931946, 0.016500074421584708, -0.011803197631711164, 0.0071375865755149634, 0.020110991820133289, 0.0066510650617606984, -0.035354962478288801, 0.027934388454869896, 0.0035907122794057167, -0.011547179475815586, 0.022730843153114938, 0.0063450556387456142, 0.063988285390432748, 0.033769980297886006, 0.019839431713957675, 0.040068406254536615], 
	        [-0.091835947946248234, -0.046604387675826101, -0.041676874531984251, -0.033930262028828845, -0.035175875655805863, -0.0080453626545488738, -0.0090216589851604481, -0.02121447197147619, -0.062925485862957847, -0.05369020745787989, -0.061858807625239501, -0.06937986410985425, -0.020603691282656961, -0.034830971939882417, -0.019889322846467439, -0.011468099868646962, -0.0094847742535054055, -0.025059650809968075, -0.013132163916809988, -0.034373831808455289, -0.029388799791445819, -0.054678738402223398, -0.040920673499650034, -0.079026490477792366, -0.031301237226933717, -0.0071872341290014803, 0.0034458433272600772, -0.042065809644383292, -0.021031719352458608, -0.001277101170823379, -0.005576040960812231, -0.04990522219778968, -0.067835745978871653, -0.025379854810453996, -0.06049669189310318, -0.095683850344630256, -0.066897542916176167, -0.065214493641294946, -0.042633834046964025, -0.077401334220438017, -0.069225159677055934, -0.046596567405820979, -0.048532202776120179, -0.039853128982711955, 0.058791987986470867, 0.019029808637362255, -0.024286125044301457, -0.032536348362445913, -0.054850631234694594, -0.029159852423518498, -0.017140255241788596, -0.025126219632764957, -0.021866221424523921, 0.028552819914696353, 0.039991900782009912, 0.097745845928933414, 0.075003405416456781, 0.07430547425958485, 0.046933143764967475, 0.098596680830569355, 0.069830184507780863, 0.076647971552195535, 0.055005419110830067, 0.032350115276010255, 0.096665962740361017, 0.010918853676894331, 0.022113519271821657, 0.052322536591560803, -0.012178262012994243, -0.010455542631323735, -0.018880441466414811, 0.0047199732120972978, 0.0026889619208184806, 0.018985019723820939, -0.0023284725516955788, 0.0062286539593777134, 0.029915434795143629, 0.035545042009691323, 0.031166989162956585, 0.023817329421070923, -0.027070265784234368, 0.012571032012612495, -0.010191882170487051, 0.038027976545602443, 0.021583936786457751, 0.0041709730151021779, 0.0055753825352771154, 0.017282900358889321, 0.012313387276719573, 0.014888890182775907, 0.0026555936507575845, 0.0041491311841516786, 0.0089247523949147946, -0.035192223449134509, 0.014939222809458778, 0.014096628107623346, 0.0038994744074676031, 0.0038988514456372763, 0.017266521138772535, 0.034244356006098528, 0.049763931691756066, -0.005218910309326261, 0.026330780935207528, 0.0018007141228710017, 0.040201841967386298, 0.008387995416966193, 0.0089671250498080113, 0.021011865402405266, 0.0053809467478302536, 0.011462851184232362, -0.0066133988743292821, 0.045841349785302882, 0.047592090089117703, -0.01138244385540027, -0.00070927480002307142, 0.0074075056026355335, 0.0019847009079824521, -0.030303270976541313, 0.018517753986476031, 0.026216734168329519, 0.034368064491053237], 
	        [-0.027531037432672691, -0.04099006670908386, -0.026965623295530559, -0.012312380363310317, -0.039447686525463981, -0.03666523046247578, -0.037447390315664068, -0.022587619011761463, -0.062582100174721697, -0.033423508713191781, -0.0076373179884149161, -0.033315735899947165, -0.0039483412696357774, -0.016273510510130911, -0.012992687546803472, -0.034372636966254512, -0.03435111582313348, -0.051089306183329297, -0.046268014832446261, 0.033800057143038305, -0.0073586595715814766, 0.019133386626946858, -0.058297854363401749, -0.031082988073954963, 0.0083772509744956935, -0.037071324198600958, -0.023704461959529924, -0.039291684655309064, -0.048263910448506031, -0.012347480993205387, 0.035773003788554164, 0.037156659417232431, 0.026570153340676375, -0.037942266517026105, -0.024176653665932857, -0.031307061474069642, -0.054205313513014206, -0.06768275375230659, -0.053316198087527286, -0.010338522140239293, 0.029942502875344803, 0.014711352823963025, 0.049805637603742653, 0.052371502049621543, -0.10703071666798925, -0.045011199304251487, -0.092731348345214376, -0.085093349694216031, -0.063610110950440779, -0.0095235206492992573, 0.042742365251146427, 0.043444162762555597, 0.046036485816212142, 0.028778886437521231, 0.047907150554463943, -0.12009138239136509, -0.11012922541438776, -0.078798363732678192, -0.018737247881031881, 0.031173984486382707, 0.095074649576190343, 0.060365097674145295, 0.019220554797620699, 0.01388973862340221, -0.0076666833910165461, 0.016336606646977139, -0.0089402055834871645, -0.009503128569333559, 0.069645335781562456, 0.10401039886252086, 0.052459790243731555, -0.026938277073398003, 0.004284176371855913, -0.010856375573225323, 0.01605273011301905, -0.02894886868907141, 0.00023294115249347658, 0.10367861418152627, 0.050069068200320935, 0.03685333261379678, 0.0065038291189368977, 0.0055476321647372102, -0.001084420000763836, -0.0013256537401329926, -0.0055543179731149875, 0.04532956341916991, 0.0065356074227495148, 0.00060778524209767829, 0.072038703955503394, 0.028968613954759095, 0.01396712994861575, -0.0072270944036459395, 0.0072231709415025436, 0.0088564229032674913, -0.012818406202984009, 0.0018158551557052593, -0.011048631845851281, 0.0081952063010873877, 0.012550415026440526, 0.030696565794881558, 0.067975847115216093, -0.022209795527931789, 0.017373946107885192, -0.0058381708959014574, -0.016933088119923018, -0.020606794484921063, -0.0037043871743785168, 0.0029398368329221804, 0.0096078974834835768, 0.0041619321053977393, 0.051668501796067898, 0.0039989461136227533, 0.031118179883235883, 0.026294533996712728, 0.01753286865508474, 0.025533735463243126, 0.015158623449280213, -0.0079480930999361321, 0.0038964542185176585, -0.0053933087386399264, 0.021361178289641174], 
	        [0.012975868416211518, 0.019239320212785932, 0.015861069262982933, -0.050083983501051685, -0.014830404072943748, -0.042428924530810298, -0.0546374523172155, -0.087876214943823805, -0.026658677207938124, -0.015590232984336386, 0.036899434494932132, 0.024659476737796934, 0.0020171111101438682, 0.017921834795381661, -0.027324028879693207, -0.013180029299528148, -0.055753129702174518, -0.049084869856142327, -0.022370349979819272, -0.004286198645007025, 0.041588558750575308, 0.026714819884015438, 0.033049974332900536, 0.0089521448811692717, -0.017401493840176877, 0.0075428243019341618, -0.059296477399313652, -0.055868974136098246, -0.057660433887213092, -0.042846351191628017, 0.014163595597386905, 0.016126409391757648, 0.045832162409125146, -0.03439907801328182, 0.024141395323280069, -0.034808445161098753, -0.040342652019852668, -0.071211354083205405, -0.066220814617881887, -0.021197302763752403, 0.040154246023236077, 0.026897565966803642, 0.041075505774253465, 0.013102896697572107, -0.054802347574740791, -0.036158434286273147, -0.0256495795872312, -0.031709300211612938, -0.07192249463955766, 0.0018536114632540868, 0.06135675209286226, -0.0047182623867055755, 0.040748587019009241, 0.013385521369616127, 0.022021140563933967, -0.071345017456805687, -0.032751414465768555, -0.061368302060063384, -0.077484017233162547, 0.040235459113155417, 0.068103358625634269, 0.052652304806050272, 0.037109981850323923, -0.0069502207163615664, 0.0099627248261238005, -0.013836396194806236, -0.1076545781769893, -0.055495023231610416, -0.03496995103010396, 0.011211930076389209, 0.071812499425325693, 0.073452579592106007, 0.011482805374590529, 0.0046876216072186004, -0.018292746840584097, 0.034170522532356445, -0.010280828511826764, -0.11953193347980212, -0.027928919333068614, 0.039183167556650897, 0.054784445312102498, 0.058364392086528799, 0.010347645401137313, 0.024383436691158888, -0.037224914576266671, 0.018329010676908897, -0.021362338634851388, 0.016317900816211706, -0.036988609665871267, 0.02534543374576112, 0.049929079774209781, 0.046243114162446489, -0.0049605182450543489, 0.0034919992815497097, -0.044846569032337441, 0.0083151693429875384, -0.0013347971554703852, -0.03179501043076588, 0.008411224541488016, 0.04299524896058729, 0.010370090496971934, 0.032726802355203644, 0.017613621443155619, -0.017879863195363097, 0.01304441155731989, 0.0031245950737431721, 0.017805613201477818, -0.0083911278501079337, 0.006798248666313525, -0.013767337935693395, 0.056008431245866491, 0.046170998183484704, -0.0067630944098937273, -0.011002116865157521, 0.021424043858876557, 0.024102164398572545, 0.034701661533462574, 0.021782351862351945, -0.020308680817982358, -0.016830911622128797, -0.0089977505477456202], 
	        [-0.00053288722928734877, 0.01181232486259727, -0.0097595448326459004, -0.032900195859997115, -0.040055309118167202, -0.087664118249866321, -0.054682271367624567, -0.012138385460291765, 0.0081352895357042071, 0.058249646659419167, 0.030708308006623514, -0.015344928171805335, -0.017993990035881716, 0.0049203910914597283, -0.013878741210342176, -0.030835237792518008, -0.057101218092033765, -0.032671359607370866, -0.0037749689752403365, 0.046975259888485603, 0.027796476796038583, 0.0092523091282655789, -0.018920714229260328, -0.017057777895009705, -0.0026666003038471045, -0.032119731896417023, -0.044973722999436631, -0.055383689969028219, -0.009123266518274652, 0.042052749594025995, 0.0059455404022271778, 0.052199892821319531, 0.013921729795046189, -0.019417768980458633, -0.0042120805724511906, -0.016059476497225951, -0.019873270609575895, -0.0632108563907854, -0.06190209155478818, 0.010727975525090354, 0.048801088568173723, 0.037392797038495587, 0.0072673632685977124, 0.012809806033498544, -0.0034510716108627883, 0.016898125070602375, -0.022589640104992519, -0.062363076360741024, -0.060954585959324542, 0.018029070106769074, 0.071600992694912186, 0.039034855273469921, 0.020918995904994631, 0.016561765175755305, -0.023866961496342709, -0.027629495788895585, -0.029461697539283106, -0.055111224665105978, -0.068953324385477396, -0.031776432477510531, 0.038108515593093778, 0.032616236844622878, -0.0056891246860652223, 0.0095690633852811985, -0.019286757729714242, 0.0062446121687075654, -0.028641062503210957, -0.044571632732540445, -0.056247188104149033, -0.035749753102891232, 0.073365539091992032, 0.067655332791377198, 0.026480919164869672, -0.022367434017255376, -0.0069125347125725614, 0.0098899156936733956, -0.013395387566733363, -0.059837543834672623, -0.055071395971080822, -0.057234682668758363, 0.026937252303024146, 0.056778003501821217, 0.045512331377432672, 0.010489795280571829, -0.021873444057054492, 0.00025673627436038904, -0.0091984359947323291, -0.0032360325511277127, -0.098453946376152596, -0.056634390573377422, 0.040879143636173176, 0.053707788468343107, 0.021417408905106447, 0.03366002971067647, -0.024266957419143365, -0.039720531313110208, 0.025845458247811957, -0.0036737275747508319, -0.0019562811556378054, -0.092075643980856242, 0.0071537732617090663, 0.048235488203754229, 0.031953649727852425, 0.003989147112834171, 0.013123842004803394, 0.011507174787329752, 0.0048599025473536617, -0.028069938515581847, -0.01371471244881068, 0.0044504142002205899, 0.011633142638130397, 0.016824865792836985, 0.044010419049233987, 0.043598608889422096, 0.010461702283433252, -0.011713831073031492, 0.023350032280673588, 0.025824508444130562, -0.040208662190134595, 0.022221624473925089, -0.018983577713146488], 
	        [-0.00012902298195700823, -6.2039143102904371e-06, 3.2701886255415841e-05, -3.1071238546384605e-05, -7.8012389908108104e-05, -1.2260737746391803e-06, -9.3428634947009467e-06, 7.5833942839328289e-05, 1.8838025439401641e-05, 3.8241995713984844e-05, -5.8626520388890824e-05, 1.2707156678677667e-05, -2.0943050504294153e-05, 7.2618095238986824e-05, -0.00010859928908422273, -2.8985456628716211e-05, -0.00016736251968167692, 5.8133891860739917e-05, 0.00011171839620466306, 1.7754895131873172e-05, -9.451887160561584e-05, 2.1444236751338823e-05, 4.6865300624759562e-05, -4.638768128616827e-05, -8.9560896987736505e-06, 2.9042840169843376e-05, -8.1942849377705101e-05, -6.1236466778755941e-05, -1.1152819677964776e-05, 0.00010188996994199562, -2.219289260330104e-05, -2.2868962134298121e-05, -0.00011509542457514149, -4.9758057323850968e-05, -1.9393139160640838e-05, -9.4734362441235842e-05, -3.0802279410412688e-05, -1.1207452486435205e-05, -8.8749274811722153e-05, 0.00013300646840005981, -3.5925271800810177e-05, 0.00013742103255615784, -0.00011808493242440599, 2.241467472778591e-05, 2.3854116688329374e-05, -4.5322376845374768e-05, 3.4573180042879459e-05, -4.6142794075512694e-05, -7.5348994747592712e-05, 8.1387747235452806e-05, 3.3796552020320947e-05, 8.4447120378403073e-05, -9.0274895458430926e-06, 7.0080857293354504e-05, -6.1460029718581055e-05, -5.3967745923230769e-05, 2.2718206186092202e-05, -0.00015616234415340852, -5.6948505482531941e-05, -7.4115836868962615e-05, -6.348787135312256e-05, 7.5446184729599519e-05, 4.4606522477112776e-05, -0.00010450123996736185, 9.5752201968071771e-05, -4.4579197955377237e-05, 9.0414806759177291e-05, 7.3014201662432998e-06, -6.6094432640280421e-05, -0.00017393323793045423, 0.00014375964009427644, 0.00014113080383144211, -1.4170194328547159e-06, 9.805969688744115e-06, 6.5253060614042357e-05, -0.00013047653881412095, 3.4993317070665386e-05, -0.00010216225080474789, -8.4219700147578113e-05, -9.7025062000797874e-06, -8.5183069646590538e-05, -1.8574643331822427e-05, 3.8637504285300153e-05, 7.924976063334796e-05, -9.6774013405367953e-05, -6.2754497545105745e-05, 0.00014663167384857193, 1.7006970539279118e-05, 5.5150673017173579e-06, -5.1711502024315639e-05, -0.00014948514404445907, 4.8590777832147047e-05, 3.8820345659114353e-05, 4.3569583440402574e-05, 1.1474225398808158e-05, 7.3156504448345511e-05, -3.8172280966974892e-06, -6.3707580509990425e-05, 7.2659510936171068e-05, -0.00010594170361082414, -6.3344621752967588e-05, -5.4025363748051725e-05, 8.3061403910164588e-05, 0.00010798285789356821, -1.8400164812460568e-05, -4.9804496028007378e-05, 3.6572621350011714e-05, -4.7481622172728527e-05, 1.7943415993419156e-05, 4.7690435629216266e-05, -1.2465656421243882e-05, -0.00019635305944052869, 2.48024743702141e-06, 0.00015032297597119496, 9.5319611595749698e-05, 2.4341784711353828e-05, 8.4135307912430735e-06, -1.0237800380508144e-05, 1.7639768025006289e-05, -4.9211961308678887e-05, -6.4779795722127997e-06], 
	        [-2.1081829939189364e-05, -8.3620881162482352e-05, -7.9323901484131551e-05, -5.6369563666456841e-05, -2.5225019111016402e-05, 6.7038340261255428e-05, 1.8979428320805604e-05, -3.6383667643090627e-05, 6.3535381529804258e-05, 5.820117801163101e-05, 4.1579935042042955e-05, -8.0246257085953183e-05, -7.7024543088595118e-05, 8.015274585669932e-05, -0.00014513612413195485, -2.5225497027576353e-05, 0.00016501583478403825, 2.6271142708690046e-05, 2.5316005334570513e-05, -6.7103148717620464e-05, -1.1803827654757997e-05, -3.7280704814898497e-05, 5.2411115100495795e-06, 1.9188281117332165e-06, -4.1461064150758939e-05, 2.4848310095391263e-05, -0.00010693164000688581, 2.6294649429827789e-05, 0.00024742918857803727, -1.3795393578770743e-05, 5.7821874727727318e-05, -6.3546201653433363e-05, 7.9184859554841738e-06, -2.9438053918515172e-05, -5.1191789614749364e-05, -5.229702720297184e-05, -0.00015826280154122114, 4.4709933911597777e-05, 0.00010006580584785707, -1.5725171825552758e-05, 0.00011394254284542574, -1.2176783409917694e-05, -6.2006183805807247e-06, 1.6735056790493242e-05, -3.2321218056508699e-05, 7.0455310764595564e-05, -1.1204046406237695e-05, -3.7759252495142039e-05, -9.6707313847678444e-05, 8.5280328383621697e-05, 0.00010626012688529703, -7.9059523137930466e-05, 8.7526351723081312e-05, -6.0072534243107534e-05, 2.90057435677212e-06, -2.231589629678437e-05, -6.2577199005761815e-05, 5.1834601699592012e-05, -7.8178877034198557e-05, 2.8746546782532946e-05, 9.1197009731421724e-05, -8.5285435194773496e-05, 1.5505315731474678e-05, -4.3117674284669292e-05, 5.1101985086758703e-05, -2.5995519087103932e-05, 9.5403159591622017e-06, 5.4456486999133005e-05, -0.00012492021323487425, -8.4468616262168552e-05, -9.000869760849206e-05, 4.617292956130177e-05, 7.131283142743387e-05, -0.00011470771088624421, -1.4346991649049484e-05, 9.7453713062413318e-05, -4.1037923649930581e-05, 4.6700567506506845e-05, -3.9864452388190625e-05, 2.8496279151997124e-05, -9.066823994197191e-05, -4.4743333617536891e-05, 2.8884441623257457e-05, 0.00010540785842768621, 3.850540540015733e-05, -0.00015698623100240949, 7.3335058638763877e-06, 4.9803028096866153e-05, 4.7614922439986993e-05, 2.1925161837212364e-05, -6.8629674967009865e-05, -0.00015530778840890948, -3.100212558819124e-05, 6.3968237768941005e-05, -3.1106521259080533e-05, 9.1934837059831501e-05, 2.6946272223389578e-05, -5.4282762803284628e-05, 4.019534042066982e-05, -2.9248092071432023e-05, 2.7237642583656692e-05, 9.8185766607061667e-05, -4.2389429439307238e-05, 4.37933802041688e-05, 1.6481438603041521e-05, 9.6248410750655877e-05, -3.3118875722210842e-05, 6.7699125022684103e-06, 1.8952909147867698e-05, 2.9371419846995129e-05, 1.8803983863591715e-05, -0.00019186119469311551, -5.361492348410202e-05, -6.4625196625645032e-05, 6.2101642194700582e-05, 0.00011142710960054477, 2.7597534422937219e-05, -2.5794525775165963e-05, 6.4102040847752173e-06, 4.3683270110482682e-06, -6.8056030788576048e-06], 
	        [8.7288421870321264e-05, -0.00016058377648589737, 4.2400373088111865e-05, -5.4107084248774395e-05, 3.0344295765780732e-05, 8.8236089089935299e-05, 0.00018665417186519012, -1.0617952797905769e-05, 4.8858460377767388e-05, 2.5608835436190377e-05, -0.00010410765791478177, 7.9333875062426173e-05, 0.00011912193130779857, -0.00017617567516805917, -0.00011561862531249794, -0.00015414695744926516, 0.00014088130997128717, 0.00016468128155683326, 0.00011507720929629026, -0.00015709778676884618, 0.00010763417094498772, -9.118060462058597e-05, -5.5086539995887829e-05, 5.9474220836819866e-06, -8.6291073686201622e-05, -0.00012420251221447246, -0.00010346788082849325, 9.3599593697178099e-05, 0.00026254729278605779, 6.4222765577659057e-06, 7.2572661937003226e-05, -4.033497396762134e-05, 6.7905724745284668e-05, -2.93776948290119e-05, -2.3486357610992304e-05, -8.3910324209424228e-05, -0.00020864486749087939, -6.7755590215695969e-05, 0.0001515708034109664, 0.00017533733335889368, 9.5332896045297044e-05, -7.861973811299286e-05, -1.9995583621156693e-05, -3.9618775529985661e-05, -0.00010062395102337484, -4.9007295684973088e-05, -3.3360058372429793e-05, -6.022956312257328e-05, -0.00015274074428942797, 5.8063262650909908e-05, 0.00017946285495735103, -1.3678668845418327e-05, -7.8757246044701288e-05, 2.392826356772957e-06, -2.3839343828305911e-05, -9.248265240540364e-05, 2.9770206634176059e-05, -0.00014104067824765015, -4.8579147311816374e-05, -0.00017751495448386015, 0.00018735013824282797, 0.00010606389466041302, 0.00010933903734035946, 4.3269015151447881e-06, -7.1743566359979186e-05, 7.0321014536656851e-05, -8.93257874152939e-05, -3.4592052390203243e-05, -0.00011018808045150374, -0.00019880825872508473, 5.2018749766881422e-07, 8.5410387895845825e-05, 0.00020004668933091391, -2.2823030905125513e-05, -6.622604266612233e-05, -1.4683429230855091e-05, -9.0830073547348844e-05, -7.0533087103265366e-05, -4.3155104080978553e-06, -6.6612089885383471e-05, -0.00012962736237221795, -8.4205562721053305e-05, 0.00019015519131662401, 4.6517997794389906e-05, 6.5029919190847871e-05, 2.5248133705620211e-05, 4.9506668943670649e-05, 5.4034388762582352e-05, -8.5820743604511545e-05, -9.1440849227466376e-05, -0.00013511882193446021, -6.0564085048693712e-05, 2.1193874455255248e-05, 0.00015210079798582028, 0.00017075069883851484, -9.0844790719107459e-05, 5.4302802042653642e-05, 0.00010180348435486356, -6.0323087261991346e-05, -9.446302123957586e-05, -3.2240495441221377e-05, -0.00012010188056445995, -0.00012404303956506726, 4.4630583568044946e-05, 5.2507061058221227e-05, 0.00017356731784019808, -7.6959696971629126e-06, -2.8710064423776577e-06, -3.4925643861908121e-05, 6.2447442756253732e-05, -0.00017903527875390193, -2.0437146053053435e-05, -0.00018575226473759824, -0.00012521765442334218, -2.4217309442219341e-05, 0.00014051754345432033, -8.2035171331245466e-07, 8.7475802753541048e-05, 2.4934621660151039e-05, 6.4845825162306749e-05, -6.3934442578149898e-05], 
	        [3.539459461619765e-05, -6.807572297566275e-05, -6.0927166479846084e-05, -0.00015316315161422248, 7.3480222355239155e-05, 9.7563808442280298e-05, -1.2450172577060936e-05, -1.4500568661798829e-05, -7.3970664566741506e-05, -4.0340386747484986e-06, -3.8654627032383426e-05, 1.4379221778954175e-05, 3.4687131743454946e-06, -0.0001584469264043209, -7.2931081155691132e-05, -0.00011775139382447231, 7.4047592217506633e-05, 0.00013239001684919123, 4.7081715214836173e-06, 8.9098227572539934e-05, -3.4630714238897964e-06, 5.0421055899113609e-05, 2.6442780926408394e-05, 8.6582559483544541e-06, -3.7941259438345476e-05, -0.0001398658685568422, 4.0145443855138518e-05, -5.4757761041059061e-05, 2.303092327018974e-05, 1.535566924483478e-05, -7.6915169280877826e-07, 2.6449624305313613e-05, 3.4036177513768751e-06, 3.916281041301678e-05, 0.00015363454768414775, 3.3088056267130406e-05, -0.00016826406184210219, -0.00014952301925194589, 3.5498105323300555e-05, 4.88793394428505e-06, 4.9269962297551761e-05, 3.206760857812907e-06, 6.9986096689830801e-07, -5.7017488941165685e-05, 0.00012398343835970382, 2.8576108184866222e-05, 4.4996957731510689e-05, -7.6581956260302758e-05, -0.00017982376102392873, 7.7913987986955036e-05, 9.182050843792311e-05, 2.0136049025466763e-05, 5.9720574201015814e-05, -9.1171378305762718e-06, 2.2421059441793401e-05, 9.2991945137864407e-05, 1.5504680551996219e-05, 7.2486851610271963e-05, -8.9180203210073236e-05, -0.00025973470234600185, 3.0931649627910485e-05, 9.1341641323305949e-05, 2.3131495582390249e-05, 1.2246773344729012e-05, 4.2369277568246599e-05, 5.3252080969970472e-05, 0.00012342596764605002, 8.7665076725869373e-05, 1.2940257800994875e-05, -8.4930704521106549e-05, -0.00012907568039395578, -1.2681617590354355e-06, 0.0001043685768841035, 0.00013644771823127788, 1.6057523568244192e-05, -4.4318088826156288e-05, -7.4065080743923595e-05, 8.9411278556494889e-05, 4.0459656558203272e-05, 4.7207547890018575e-06, -1.2596513258189557e-05, -0.00010567536025424262, -9.4991903417787626e-05, 2.7651247338847385e-05, 7.609666823792105e-05, -1.9995057402716343e-06, 6.7764367183351104e-05, 3.5254672333742687e-05, 3.2643123012973674e-05, 2.1440245180040507e-05, 3.8887571817136646e-05, -0.00012810855432182633, -0.00019782945249277595, -7.7662951400422897e-05, 0.00014426765708057399, -2.1274432415119282e-05, 0.00012320100907245446, 1.0102538176598452e-05, -1.605497818817081e-05, 5.7714933317881689e-05, -5.6046568401510455e-05, -1.7521004885695524e-05, 2.7609299548841948e-05, -0.00021782421795693563, -0.00010669318029415953, 0.00020791845527659558, 0.00011483573627234234, 1.3285234615884045e-06, 3.8059477856533053e-05, -1.2194043980374991e-05, 3.8422458442419205e-05, 0.00012682223060628273, -4.4551723471827898e-05, -3.6962727574252341e-05, -0.00019867893992770206, -7.9969698622255254e-05, 3.4788527334016846e-05, 0.00019429872846807102, -9.2258251254903612e-06, -2.1814133753517151e-07, 7.6668947854130476e-05], 
	        [-0.040989361407028427, -0.072592926530304011, -0.020477833122960813, -0.025777644705128749, 0.022397648046425161, 0.0030979965185144592, -0.025475041444791693, 0.0014983432415610135, 0.013473198352794237, 0.015343737042018784, 0.013699123091301883, -0.042585561573300484, -0.04138694292044983, -0.088632835869019461, -0.058018494615619191, 0.015073506060712692, 0.0039591744812569069, -0.0024599044551481515, 0.018532342878064281, -0.0072520896771801763, 0.039351067096824496, -0.010583759958094123, 0.031659008994451787, 0.0049459978895588508, -0.023228219899002735, -0.098922351529419611, -0.083752279838564703, -0.038392682480552429, -0.0084343370007130825, 0.0076728523005259591, 0.048785186591904672, 0.017104325073902631, 0.020754499614758781, 0.049112315782768368, 0.05763971849416781, 0.019838597096741267, -0.002711097174265778, -0.10015290955737972, -0.1320216915887979, -0.062977989737248996, 0.025823602205800371, 0.015879808082835109, 0.023625409629796024, -0.0046384308741842795, 0.026114060550781391, 0.091319153616595122, 0.15889496663514957, 0.077891023551431793, 0.095775074298850682, -0.12439872197360356, -0.14160536960462869, -0.075509861563522143, -0.02844030015622347, 0.021985439206375433, 0.015548610852228811, -0.0023889058702177349, 0.034888033953786937, 0.071073458263117534, 0.14647023139119036, 0.20034906031914418, 0.16005422621447674, -0.086760118043380546, -0.13617760143493793, -0.015931290696152286, 0.005887974985659461, 0.0084439895294871475, -0.095816033487544763, -0.06971296020482845, -0.017803306714053436, 0.027850106601549955, 0.099568377990365997, 0.18576028306369899, 0.10917191640951349, -0.064365376981623867, -0.053216331409250542, -0.029502881465266584, -0.0098622631787540771, -0.10680613413351928, -0.14825732796410135, -0.11347081176660601, -0.064061353902307328, 0.0027156666630031856, 0.091809632965261706, 0.11261031536840553, 0.043783501816099038, -0.0270698877015552, -0.022521165339643115, -0.010411461095651862, -0.062429490602539911, -0.078462922695807291, -0.099126684507961943, -0.097931900585343207, -0.053658802519860244, 0.020026860523391449, 0.097467511896917089, 0.045269155637793823, 3.4982892145374311e-05, 0.00096205693095272049, -0.0042046666568070074, 0.012970749419225602, -0.018376496479439189, -0.044256889054004316, -0.076150433998355901, -0.039790311947249343, -0.03211080346166089, 0.060508684856887124, 0.066025243127584496, 0.043696389663569632, -0.0062411434380450354, 0.0065600929269337555, 0.070876692004307851, 0.055992154723297945, 0.017986548813861334, -0.0038241581051177281, 0.011310267599780391, -0.010487970918616498, 0.020902380949651758, -0.0025446887362083059, 0.059004430404734909, -0.013398145289176891, 0.0035443428720070419], 
	        [0.030346036175779943, 0.0060729291720623552, -0.039343234393949156, 0.015518327303993051, 0.026091031799842485, 0.05707488929867742, -0.0076810101047968676, -0.0080709248858639449, 0.016419173022353517, 0.0028420019312691766, -0.013730810525757281, -0.01952233856199849, -0.016220877105556714, 0.014953867372257727, -0.034021908696086872, -0.013762279640316323, 0.024752967636295586, 0.039530055629976274, 0.0045832864073847429, 0.0083765062096497409, 0.036851407285838494, 0.055084117544986336, -0.056975578544102429, -0.029317707997872627, -0.025594697243718541, -0.0209462093989107, -0.058040406822408838, -0.013577428197324267, -0.010020990828990349, -0.0018451035217218088, 0.020025419779784451, -0.0075917489409040063, 0.015631011927141059, -0.082665619369575963, -0.080551448664543737, -0.050440509420469251, -0.072777006043539996, -0.062636415930186193, -0.071288814601525669, -0.044269272303937818, -0.019290397771040843, -0.00063643565990734174, 0.035648090161244705, 0.0080665566901492874, -0.069973032306163641, -0.072405787021877846, -0.062813161592231409, -0.060859099341869331, -0.10296927011026999, -0.074726837298926568, -0.077151004103565929, -0.089632117423250057, -0.060207561869611841, -0.036005373570064905, 0.030580152351007542, 0.018237066287994937, 0.02174043579052555, 0.026790712318865414, 0.078394679005428389, 0.079774453891859387, 0.048844596953047867, -0.011284404445060854, -0.042892655919123217, -0.060469291421125677, -0.07771702221123683, -0.041768476829136147, 0.11044800435479082, 0.084453033189816312, 0.058716658475689382, 0.11796990936830279, 0.15001483899962584, 0.14682265151923721, 0.13948544434843163, 0.071900535535049409, 0.022951582623399639, -0.037573009410766148, -0.064497267516120824, 0.10514145685057832, 0.014295615161356343, 0.047946276454789161, -0.018432919080500723, -0.0048603160651503538, 0.039432239140443998, 0.090925443024842678, 0.075278132366418865, 0.081170655224668736, 0.0073833672168802864, 0.00032987076164094076, 0.022814449998299069, -0.0086827680648501639, -0.048521183046406041, -0.019108747944309772, -0.065560745830540057, -0.080182991518368607, 0.0032263375068990836, -0.00099658547565971249, 0.052424135738000213, 0.022385739723059378, 0.039120492922030209, -0.031163626046383244, -0.063939589567716518, -0.07911716509669843, -0.078917040495979945, -0.058880520828822197, -0.10110781394222774, -0.05114064572351204, 0.014884135572375071, -0.014461306825219532, 0.036091619454282908, 0.039865935139445363, -0.028625117209377549, 0.02387850967371026, -0.02520581913037356, -0.023467115929623323, -0.076187598481757157, -0.040233406732182481, -0.051995660903622447, -0.040468336476741307, -0.026854374302776318, 0.026999904989888759, 0.070255583454977802], 
	        [-0.0028030032154688772, 0.040758904890067268, 4.1767863328545651e-06, 0.020260138546443159, -0.0059647140070275915, 0.05181012213641132, 0.02634646200863381, 0.012264698464511966, -0.010147315743495306, -0.03354793984589477, -0.019732136738390867, -0.0022577603782329772, -0.016261980311150601, -0.017314099330176039, 0.014344127941805743, 0.037970408394952859, -0.01383697548566333, 0.016742082124341348, -0.030123200807178369, -0.027735921784170836, -0.002268324918850477, -0.01917565837724932, -0.015693411602399308, 0.013113857326043843, -0.036320774018331614, -0.063043192413591909, 0.0049614486973488248, -0.036804629569037517, -0.037438386219278155, -0.023603350699011483, -0.0072298451341650145, -0.059868515686104032, -0.041755559167967415, -0.034103966764113251, -0.037695383284049352, -0.019865628782664548, -0.037320716015948836, -0.02961465787379973, -0.062378820692505714, -0.077726227410309545, -0.064330260920173826, -0.067627424844985615, -0.066911336391702644, -0.051813667955715265, -0.064044427932397077, -0.040497690544443715, -0.068570648963837993, -0.064781691548234432, -0.077465204305072172, -0.059300747266943024, -0.045729121636768441, -0.033973317009316689, -0.014236662779295712, -0.0051403679981302051, -0.015748032805591644, -0.12090686617751288, -0.11592358261333773, -0.04603582196444924, -0.026967258372596087, -0.0013908674792289851, 0.070814456498094619, 0.069291900499805825, 0.071816590137885883, 0.074605172083137966, 0.095414524189679439, 0.10748657093841106, -0.095995837009767118, -0.0040975794639001714, 0.045306386276777189, 0.075554395869981195, 0.11845891486270177, 0.084776040800571786, 0.084263987235035837, 0.10125452225992537, 0.073977388593481214, 0.080838313693573999, 0.054211476638108123, 0.020058468071589643, 0.071877396983204195, 0.073614039598840109, 0.090269964916123019, 0.047955914710934591, 0.043147097517420303, -0.0011985739101095343, -0.013094268546257911, -0.030256147604258272, -0.0095366918389557919, 0.016708576234233975, 0.061142458735716491, 0.081217451112605782, 0.010385841248297306, 0.037777595415280037, -0.018148165795748364, -0.025190339821193043, -0.047771796894360688, -0.061855276889718092, -0.053652712540413733, -0.051551732136435637, -0.034374232230165572, 0.019703032705119687, 0.040214664876207923, 0.0094462636189203749, -0.022748100395121915, 0.0069180366776436381, -0.015913447714255638, -0.02702812779628725, -0.014329312669455431, -0.027715089020423824, -0.062068298599209024, -0.062014863808505023, -0.021183572775251798, -0.039143122374945834, 0.022829943433131737, 0.0032038909949711619, 0.00034299573515796187, -0.012230615709466378, -0.00321123286886877, -0.025262706824797615, -0.0022994727249915775, -0.027050395247399217, -0.039549420763164561], 
	        [0.065220937475473084, 0.025071384298351367, 0.019912107113077518, 0.019312893018644271, 0.022456599328416219, 0.038123430189094545, 0.0055996572848110715, -0.012446229774174283, -0.020127115717722095, -0.019608397123268811, -0.051920391537350181, -0.003802076622644604, 0.02754021132514629, -0.031394259292046901, -0.018499328737516675, -0.028503473075545686, 0.010984204362234747, -0.0021914954953508982, -0.019643099824274573, -0.042421207289507476, -0.08150780546124696, -0.072243889331467748, -0.0017841827891482871, -0.010892973047937691, -0.0094800158033443715, -0.0041070641350081693, -0.031710787864217896, -0.025316943368023079, -0.048904598523338408, -0.039097937616454012, -0.066266518850005215, -0.057170442088922122, -0.12354156377380103, 0.0019260014740339094, 0.010454913576309843, -0.047326416677592284, -0.01495404872484582, -0.014952122468299345, -0.060398890698931722, -0.051481889909297689, -0.056998707528354522, -0.05627894012903209, -0.0082531761509003106, -0.0047280014663064196, -0.024889267516539609, -0.046324614411320443, -0.027070396350913073, -0.03551136665508927, -0.041562027780064917, -0.042411071747144299, -0.058674084084012826, 0.022288023763534795, 0.042564482569643847, 0.091510651781399763, 0.10752994926292046, -0.023190276830083741, -0.016616935256775666, -0.083807089690502004, -0.058259488808172902, -0.07074223249458611, 0.025573920295602542, 0.11913595016311473, 0.12549016018794748, 0.12135882291557651, 0.11708353956070845, 0.086422717935291424, -0.00030667403806635199, -0.03844014599380597, -0.049405321408958772, -0.092975443881900155, -0.03284956400921088, 0.10352519252428011, 0.1495830558840523, 0.086083576215801955, 0.035830958340715563, 0.024742932326467473, 0.036726117488561486, -0.0024422161164114609, 0.00040112728912663695, -0.052518659689077332, -0.044570270280448174, -0.034618820381680696, 0.049818549902821328, 0.0024548081543993572, 0.026915963481285166, 0.00043142435222983527, 0.012653778112578708, -0.051855646667650884, 0.030046740129158762, 0.00061640821688112302, -0.031155023683595174, -0.044323068746703012, 0.0045373176149612893, -0.0071958412445839864, 0.0063657993250404304, 0.018539257939901993, -0.030330920312567851, -0.031773666542542808, -0.0088228132461829062, -0.015163459489751625, -0.058175569457230444, -0.0040183309769827903, 0.018491731360507427, 0.0022898116286867859, -0.025630328318981953, -0.031896766124389749, 0.020493167081276655, -0.0060866772039110534, 0.0079194766798410254, -0.020676688933417536, -0.031624660983727432, -0.028353726901198459, -0.05878024973072718, 0.016740816129427953, 0.026376082128799203, 0.015891236744592419, 0.048440426175221846, -0.0032500905630761939, 0.0044459428797915534, -0.016655671281387799, 0.0096495524818720826], 
	        [0.038712194178439893, 0.012490504356042306, 0.025251907017849726, -0.00063429003793935568, 0.03592838646617745, 0.023762703799074122, 0.040774989926937774, -0.023414811564391472, -0.048639833740482294, -0.050012993742178324, -0.064429231547649846, 0.021779562035487404, 0.049861519461227979, -0.018288852383901953, 0.035889988699122341, 0.020066404067603016, 0.049563142262502483, 0.0077522337501277072, -0.055571126615815716, -0.068510835596184025, -0.057716925501775554, -0.034900580413033497, 0.021956366706459132, 0.035414544709005326, 0.026124404566658876, 0.0017094541674472288, 0.034316099935257596, -0.027522376974677576, -0.099289021369931285, -0.072699424099411505, -0.040033682201417037, -0.0025525135698269523, -0.002910098811699801, 0.021515199868527068, 0.040227070486607036, 0.036476407601091332, 0.031515192940717834, -0.0086615704493458838, -0.13841198674869082, -0.11458519361763039, 0.010450235100959555, -0.0035535572148689162, 0.071253276886399569, 0.042723571343138186, 0.0093416587003654419, -0.012870114338850977, 0.032545576670786378, -0.015625402120347201, -0.1166589992557556, -0.14109288836317121, 0.067348402717295516, 0.076093181341659599, 0.11561514970947856, 0.050225495205762929, 0.042124269950079882, 0.02144480828358869, -0.0084782658103722819, -0.012099681800612577, -0.03095626225613321, -0.11121071517451651, 0.08286092692880892, 0.14790102050186232, 0.10500772996280258, 0.046748436389971462, 0.019903102032436296, 0.030520336087391395, 0.018229439697434548, -0.010089005330986278, 0.001308077365090185, -0.046366176234370893, 0.044459976275507344, 0.10593917475179987, 0.079518755787114162, 0.019359952078597017, -0.005288773156741304, -0.072262116264494303, -0.063106627791123013, -0.0032666604463477689, 0.031860165644442898, 0.01864598039125592, -0.012064807733087081, 0.084958238907565181, 0.04802342664859964, 0.005601477454409115, -0.071195354950384843, -0.070333235397725374, -0.10990854275232402, -0.1177120894307484, 0.019377435122344126, 0.026706728888751419, 0.073583862415767962, 0.054153278022732301, 0.025448394821031554, 0.0040382013610863465, -0.054678863283269957, -0.089932995823321094, -0.071996417021936918, -0.062770298499433386, -0.065225875464714131, 0.038396171047075017, 0.016151719170832315, 0.027022919493260036, 0.082904215002364987, 0.047186912351547414, -0.0007951610725080438, -0.095891032022590528, -0.049461949437344832, -0.072304694379190848, -0.011679870201172761, -0.03019370550552411, 0.014156325508013962, 0.050859597296224669, 0.039189955160956538, 0.061498796624547394, 0.022736333947648714, 0.015951433136659473, 0.015999485485705945, -0.043222982001008485, -0.024248450132379966, 0.040111753431796314, 0.060524773249175837], 
	        [0.0024768759755275302, 0.023654123616632314, 0.0065904790765780874, 0.029715029129248505, 0.016981592598277626, 0.035002323306005056, 0.015060065696298572, 0.0023775406467376609, 0.015462766613147202, 0.0082508228535331379, 0.045204211891526569, 0.029099062971049541, 0.037371073946768252, 0.048546717205389139, 0.039674546516756559, 0.025867829117725033, 0.014831551938788254, -0.0075820940876098059, -0.020930287111501134, -0.032499439495609725, -0.0018020463301167342, 0.043937967078790628, 0.028725701880571525, 0.0010439011442610552, 0.042588108222669757, 0.017847587041736074, 0.0022798348220216258, -0.004587349161816804, -0.0088422374374940368, -0.040477333059008636, -0.084833179199067868, -0.075253592768237038, -0.043639965989430526, 0.048831110435565261, 0.031624229858512876, 0.012489522167499711, -0.044447404162642853, -0.023793861367563091, -0.09439256686884244, -0.072032359608776186, -0.0647083446116518, -0.064216711834332502, -0.11171103897265756, -0.098730030535537361, 0.034790924045997138, -0.0062696265352133948, -0.037764001610176845, -0.066031600218691366, -0.085654849487946563, -0.056461446300125208, -0.067826191654306867, -0.060587570752587347, -0.060359414639319361, -0.0751011736397387, -0.11166068555690369, -0.049682643011916917, -0.032238361809498267, -0.086484331579425255, -0.054274490762439093, 0.010712582267959646, 0.05148433045951871, 0.072737308199540607, 0.066174010870382105, 0.047052504278498768, 0.01457256785498192, -0.037236312562938446, -0.038926353894852897, -0.045892840879106347, 0.010370006985215077, 0.11284308997633244, 0.12481359471847972, 0.11597764568809359, 0.11519355137781671, 0.11439984797014933, 0.11282552440063413, 0.072652367921491337, 0.069633041676226207, 0.01208106094914059, -0.012907318992784259, 0.078196952096765804, 0.084842433468674594, 0.025448732267674412, 0.03331830161640717, -0.0032466624596392407, -0.00077916004722033971, 0.019237134849348372, 0.040467729220002191, 0.081825040597662269, 0.032173008592532942, 0.0072246459578335781, 0.035145895408776745, 0.032218364331414756, -0.004156953045711051, -0.032283733334807226, -0.048063813532225441, -0.036307980564993167, -0.0088796328542093544, -0.05064778668384444, -0.00020999998824228205, 0.029706187708307435, 0.032099114896280957, 0.0077899941541672846, -0.0059912168184391018, -0.037977889970615276, -0.032942632694837909, -0.074827929106081326, -0.08659379822525845, -0.070294616151199862, -0.021597866813346515, -0.034674752012622045, 0.039149518450188769, 0.016074895570088787, 0.0072486058613543264, -0.021666046904459044, -0.015742207167039945, -0.05712862549021637, -0.069825857774372807, -0.04304681823818908, -0.00021744057288860825, 0.0031613995838588056, -0.005483972769325985], 
	        [0.0078584091809587239, 0.010417579110589992, 0.015826355571398901, 0.027799757333554075, 0.037504301634208481, 0.021889790101079235, 0.038404904299075615, 0.033823662292883222, -0.015110545900434889, 0.020273256963547384, 0.032943002507679647, -0.0012523671626505639, -0.020725236647321815, -0.012427007685905524, 0.015267851215295052, 0.015474020823992577, 0.021471502743067288, 0.031768288951377815, 0.012185070684608057, 0.0036406626398330366, -0.0025327193617110944, 0.0078853574405562885, -0.042335704666714866, -0.056683453836849029, -0.026575160075451746, -0.028598384095741225, -0.042657752775160783, -0.041423915179024752, -0.036798184223634865, -0.038262807915101713, 0.0019026661303272879, 0.0093814405628215997, 0.0084715945489586136, -0.045038182654970449, -0.075791753641229712, -0.059375219468428109, -0.061831665311961263, -0.043298853126234195, -0.043800781365845892, -0.051617842166787962, -0.06561103766772261, -0.047247281088380666, -0.057968313986108362, -0.0096926997405703125, -0.0009781358811463553, -0.0011437786713959204, -0.03286534603195844, -0.03543397020422262, -0.072328933800212672, -0.040236082624187208, -0.06694954641402831, -0.082126388033458689, -0.062803853478933039, -0.081491583056840441, -0.067532179029439018, 0.09455840560652598, 0.050160391480084388, 0.085678836867230254, 0.046323368625148131, 0.055992607831429286, 0.048911953221190102, 0.031194793059301035, -0.0026453507092326911, -0.040343576884242428, -0.097032593515522902, -0.10038707585163729, 0.0739805809466271, 0.044680789118382247, 0.049529551721828768, 0.11289040045432666, 0.077052640980907514, 0.08763910565106886, 0.090660770031109728, 0.083977779480882225, 0.064049007217798604, 0.02432712562725322, -0.042320375772835706, -0.0021388818804320281, 0.0059538906304443806, 0.0021758658789993446, -0.0093587766742978112, 0.02428998075376837, 0.02607694341280449, 0.078772783324117121, 0.091982202732447615, 0.064361385528919693, 0.081984130680270037, 0.028646331657783269, -0.042604626187250638, -0.039659301448687317, -0.023542389520778348, -0.044811266972915445, -0.037047417039871328, -0.027700762351676803, 0.0033550142769088881, -0.013100169049559234, 0.05927068198924744, 0.0462821833376071, 0.087354800090269857, -0.053790152494941693, -0.052155542043995237, -0.05679486910467426, -0.021944281329168733, -0.031143592336575283, -0.032408839769337699, -0.013571281557370071, -0.031193974331133204, -0.024377807778057786, 0.029148757012459989, 0.030672698641111273, -0.022977914200020516, -0.011077006000089942, -0.005511238658071696, -0.016195245042137235, -0.010223061193558224, -0.0017693869577628148, -0.016982213231712635, 0.023120107237225143, -0.0046448944161024547, -0.0051816660513786528, -0.022733320422779334], 
	        [-0.0090421114800203067, 0.017452648291795582, -0.017831824210342989, -0.0037291040947286724, 0.039064969998310481, 0.02317336140566292, 0.017934159994940135, 0.013098455548679191, 0.045167700869445056, 0.042194405025245518, 0.040022284994525766, -0.12964953846391289, -0.098695979295591207, -0.057791701915265933, -0.036039163287215216, -0.028193969502811, -0.0054251636725232699, -0.0069512490121659137, 0.020700356583589666, -0.027658839175524981, 0.015383455695099066, 0.029921130490476885, -0.10604073203109947, -0.13745243530604678, -0.10216024104657673, -0.082044560977983155, -0.062542359265559622, -0.0060266314348334099, -0.034856310541847978, -0.019904486880246444, 0.00031967817856416725, -0.032389674206707089, 0.02439765120257871, 0.10508921937209786, -0.013046874416846273, -0.077743955313128527, -0.12222903080184096, -0.11250348266352571, -0.074496424196395211, -0.056697350656609337, -0.041103845003295766, -0.036650131470619435, -0.010932005853568957, -0.016449841939567944, 0.15622348456563409, 0.096726642307413055, 0.054041690574303913, -0.0030989655565997892, -0.046208134463465035, -0.065923493353222368, -0.065578917403099152, -0.059507067127686442, 0.0088062798799869793, -0.037442732388913005, -0.017902872235218317, 0.092956218539764199, 0.14428628109803446, 0.15460969896616991, 0.1048812845736138, 0.074650094161246447, 0.031358758882895854, -0.04452428857515188, -0.028002592637281058, -0.074285506534393586, -0.017952472566438823, -0.023442772221301825, 0.00067036565834080464, 0.048256451782623298, 0.064112377935327092, 0.12605612565913182, 0.11963258828536688, 0.10488112893887513, 0.033679327685633892, -0.060980339086270673, -0.043663902054247729, -0.023617241119377099, 0.010588509810459399, -0.042280794649115334, -0.020903906039379281, 0.0042454596033642683, -0.00023866951219775334, 0.036855270749386923, 0.064226116507300965, 0.058946958099653515, -0.0015713950413312611, -0.0095707447875607171, -0.013147541392034126, 0.01220983149141934, -0.05139007557791643, -0.055205672622494331, -0.033651076834393279, -0.030728487231012208, -0.0069395759324256887, -0.011575545867157727, 0.0073685965063561426, 0.069747145603705707, -0.01352110025060841, 0.0065960127234735433, -0.019525371968609762, -0.017643912421121496, -0.036983208587429477, -0.032526065041563926, -0.059542328663049392, -0.021432558932001102, -0.036208028263420761, 0.00082772178238150421, 0.048327127751533125, 0.057950807377417229, 0.00157328627865716, 0.0068908384829364025, 0.04482168429267052, -0.0029221677687706754, 0.001555929650738838, 0.015954469458610742, -0.025599595653019336, 0.047827295986180768, 0.0062288949733256688, 0.021267131642709981, 0.057035735175472703, 0.018964085848628326, -0.042249457791622765], 
	        [0.082567408275720941, 0.055832613072691675, 0.037656390091085033, -0.025000895212346053, -0.028412812812500174, -0.050161619093851889, -0.064108798123226451, -0.085322773771942473, -0.01353721252260974, 0.013708942774828675, 0.018599027844067556, 0.075347485030620276, 0.062559343055246922, -0.03128511392926582, -0.042802981085729774, -0.031429420711545787, -0.073826763416081242, -0.024221657973838032, 0.0076412601149810772, 0.024211901395114054, -0.059471082878315346, -0.030880411920166984, 0.067967009546189686, 0.04082287464016688, 0.010013710465744799, -0.076238220410531951, -0.068200014146132609, -0.03367028790032036, 0.0026545839293711116, -0.046483364330604897, -0.013765405332683583, -0.027634708597073385, -0.061826223020465573, 0.031594341220290985, 0.021366233937152687, -0.013394045470305607, -0.094757756449669439, -0.049118966746885373, -0.045552478080449647, -9.1106347612770686e-05, 0.0079383464198565928, 0.011254760704320157, -0.006576707889103077, -0.047661893009333725, 0.044446166087195968, -0.00093206421252194083, -0.0095390604213271557, -0.050732858964937649, -0.086831280616566725, 0.032526279694198093, 0.092701707289924745, 0.0094083798882231232, -0.023484064976748834, 0.0092934449765007306, 0.02279135558872019, 0.039002806478279112, -0.008609839726177404, -0.034767835308972636, -0.031883916942249346, 0.066428675225469649, 0.15091207989976943, 0.13215693372891743, -0.059200843092382029, -0.13695949641012162, 0.048045367981310844, 0.098721373524397166, 0.012407354261466811, 0.015256770812382667, 0.052010168560839946, 0.10320819909661162, 0.04245915005083583, 0.088724399991559885, 0.068938951136573001, 0.01700823743506874, -0.085317525028892435, -0.018126337068159522, 0.1151877033509508, -0.02501683859550265, 0.019451431676204792, 0.022494547242750674, 0.052600283738925238, 0.03386730293679828, 0.032216970357249304, 0.059359611168712786, 0.014140731647494846, -0.025091371779791677, -0.026683396681205493, 0.040958328581346411, -0.050855525747530585, 0.0049323754481217317, -0.00049816712567916054, 0.0165528823762962, -0.0059580238260248993, 0.045306611135122, 0.057897639956120503, 0.042726052702478742, -0.0017969310686201884, -0.014382085486339657, -0.037002141588783934, 0.025110698146086761, -0.00016281815464665172, 0.024515446575861129, 0.021258758684308279, 0.02440056095349824, 0.036876396850616146, 0.039422926098447282, 0.040371042135130944, -0.00092562301771988154, -0.0052628779193808206, 0.0093270497285016501, -0.011241199658509435, 0.0019912846764176652, -0.025004542955752537, -0.0056085835864598393, 0.014352464943112106, 0.050873140541023154, 0.10004246984101947, 0.064681249139415239, 0.046195695636661947, 0.069300630286532647, 0.029510327635330871], 
	        [0.031888415387708945, 0.017285328668591005, 0.042744527705477556, 0.03122774045587115, 0.025513813891834124, 0.023253690464280233, 0.017244825416223117, 0.0091143993389209352, 0.061254787835178667, 0.028607811797974354, -0.017058017936675305, 0.031260250011373267, -0.02279872758399017, -0.027837704295921042, -0.031937522919072092, -0.0079426595101877613, 0.0022781874855602822, -0.0029790518398695341, 0.014262174386869931, -0.011888449098713878, 0.10179674598415357, 0.017490236098508173, -0.02165996876082555, -0.029500462768637277, -0.017844168428477268, -0.0065925436789264179, -0.055317992740958985, -0.009073270159867055, 0.00041946738785142434, -0.056492643690931717, -0.073201827719489312, -0.04664521751707891, 0.062081869164307177, -0.03133901253116169, -0.065409572850245706, -0.026259743760947321, -0.028514182658014458, 0.010511476228221489, 0.02613935213955948, 0.033080893278420273, 0.010410015030915412, 0.0083593994733951738, -0.066648409600459646, -0.061126901668253825, -0.060660381708882702, -0.029413222816308055, -0.014383044755888905, -0.061112839649371503, -0.086766346192871005, -0.11103482776376336, -0.09555898737155176, -0.06964802327565453, -0.044427747427205108, 0.025755829147256798, 0.0069560148421303133, -0.081587604416162807, -0.10519239832835522, -0.071335786418767255, 0.00057041734117410647, 0.01381305071587418, 0.02671011460828427, 0.049812200550972158, 0.093581918010311488, -0.021925041934278508, -0.055497660342767811, 0.0065150133739862448, -0.054554119234424388, 0.00830487062795153, 0.13185407364756932, 0.1221341345788353, 0.011707416843401106, -0.025907153899071139, -0.024819747703220919, 0.054010873733490401, 0.13634127194350476, 0.1239665593358083, -0.0094684152953362077, 0.082360263679196688, 0.12981624266421773, 0.03824468200113923, -0.028862798409555725, -0.012401760304334902, -0.029028735431258695, 0.0060991842887090728, -0.0040297230866682713, -0.04688451714216009, -0.0033330755921011992, 0.055326238808625749, 0.1303088292739335, 0.014467140584733071, -0.059526756731551528, -0.024457345180703714, -0.0011606998001983324, 0.049886658808720834, -0.021188637788723458, 0.0053422931322432837, 0.019766544177656983, -0.075051486751190319, 0.0555814059557561, 0.11043646644803568, 0.071964938687580013, -0.090663298598382638, -0.035117192369403236, 0.048069490373574331, 0.041133552052815187, 0.083493841136462049, 0.029110800123453531, 0.031266615170663099, -0.039507972523892779, 0.027490662445642008, 0.092284055227579875, 0.066698389632811675, 0.0046770738712216178, -0.057627559498254564, 0.035842091912123522, 0.082677685179469218, 0.097331854898258463, 0.050682016519834582, -0.010180548751966102, -0.033100630833083927, 0.0060053227921194573], 
	        [-0.017680769530502086, 0.0050575359825280469, 0.025215835784359819, -0.0050258332473204909, -0.05703325304593862, -0.052107314429079093, -0.045596915669796345, -0.0066502467091907602, -0.0040890258536624702, -0.003602657066238215, 0.054264533749242831, -0.041054754537631868, -0.0014472636395811613, 0.034596974606557113, 0.060835620970621208, 0.029247288961593898, -0.072140352884815212, -0.079672750193131428, 0.0063943947450929156, -0.00075078758391063094, -0.0024171227661776481, 0.00014142207761613443, -0.071900657382605787, -0.071309977692602319, -0.070946767853089718, -0.033682470049253795, 0.059045673260628345, 0.098589338565389609, -0.0012453848467233811, -0.01886197406327271, 0.070384962538390106, -0.0038593266123758303, -0.035716458393740325, -0.028903911986307623, 0.022169135417800519, -0.0056379833253350636, 0.015211997809574936, -0.077801426518747177, -0.029803914664715693, 0.019461806372238301, 0.066876022242886704, 0.074347040390291497, 0.075531131612437005, -0.047354917440969799, 0.038231304234948887, -0.014507685304722101, -0.088435278499214176, -0.10062367804515003, 0.067343499222200565, 0.024924241317476573, -0.092546195735034087, -0.014997924286342293, 0.027950457247449642, 0.066063768451511823, 0.021890400355813813, 0.13086032772885903, 0.090325158487119389, -0.051343743059489008, -0.10634460607642149, 0.041577154860304527, 0.18956400875634438, 0.15361519295302384, -0.11769518397502723, -0.063931131406821079, 0.053765417183016397, 0.012820707173704704, 0.167023415641573, 0.091883459451496383, 0.046064066872463991, 0.025159894360370735, 0.071125103615519797, 0.035423035999105047, -0.002838856695844709, -0.062881344605136932, -0.078523790463108811, 0.0060488942027592946, 0.03132431227969934, 0.057799944092782066, 0.035258713861660206, -0.015525519214079311, -0.051490678426958481, -0.070998438684272358, -0.088339548926410272, -0.063258396382083443, 0.00058157944958722729, -0.016398858534322075, 0.063472042872487172, 0.059448129985677542, -0.07202298014311552, -0.020115104672309998, 0.019270115460302426, 0.043044608199681589, 0.00016106438180805288, 0.009691999561702698, 0.0068556383978288504, 0.049380946460201247, -0.0045235379987111357, 0.032977942564106202, 0.0312528099407361, 0.056899719241569002, 0.028262649207511509, 0.035152375519136879, 0.035461884262258922, 0.039852047474645012, 0.019659199103084442, 0.033958299060307638, -0.019839700512063366, 0.059036824142858109, 0.0097260124868806426, -0.014938126441501644, 0.019066829899126298, 0.070681909220785974, 0.067102293590922832, 0.069012992594614686, 0.010044929257701042, -0.0063893114284036059, 0.0050956154428648042, -0.045817829646248108, 0.058780525393498484, 0.015058802906741012, 0.0093868702997460529], 
	        [-0.059247418607529398, 0.0021432691584650498, 0.003053764423463598, 0.00585551031972327, -0.085630217055580576, -0.071756493495543111, -0.042450305971163171, -0.042689147138431187, -0.011110262401512888, -0.0079405339217739623, 0.027079022725668131, -0.027546655085047056, 0.039877525719018654, -0.032474059766464794, -0.046922091139332156, 0.033617721815522757, -0.034287802568748103, -0.043372117290399935, 0.041613978045622203, -0.043095118331613398, -0.010110834614272646, 0.022894839712910425, 0.075386609934159521, 0.009212959623099537, -0.08827817592255309, 0.037397659635345859, -0.0022263066749607652, 0.0099245075234207572, -0.020030347390232447, 0.056811150198365509, 0.0073928398206897228, -0.0781863011094375, -0.0081464259829627586, 0.079203527612630331, -0.049193984035058869, -0.10782004673639323, -0.041093953548195783, 0.036883013437131441, 0.037669473568050518, 0.013220385631969353, 0.053407888162839971, -0.026733606753513141, -0.12858397516523337, 0.021075355334599859, 0.12903555239275516, 0.017326720125844478, -0.14567221562979574, -0.082472121566578308, 0.058956938749701163, 0.11485586936136895, 0.1285955897812025, 0.095518552742746426, -0.061066124259299644, -0.0067976743155836045, 0.11055046294774236, 0.11155870568673898, 0.11891259668944891, 0.017851730403568578, 0.00062816999621169434, -0.005602233426512779, 0.077624806223943812, 0.060406967434973535, 0.059516586297504614, 0.027001848941292254, -0.044412198771888872, -0.02565017828887654, 0.068363333459277184, 0.063020564366818924, 0.059444497458773948, 0.010334144455870962, 0.042110605756137134, 0.0154145426818727, 0.0023343740302978946, -0.027062765771009509, -0.053547005048963876, 0.024499224751391858, -0.05226763051205905, 0.088856993121431069, 0.023557929383932572, -0.013779427079024981, -0.023579161648517932, -0.062755190864561161, -0.078234101715106377, -0.04428664124215103, -0.05597874471510085, 0.032155339112342099, 0.054400692992883637, 0.048229610031197051, 0.045141190902855795, 0.038704798976786192, 0.085911390919109945, 0.004357866690440651, 0.012844338732011615, 0.010882943225392516, 0.028932161983739102, 0.064841494314718556, 0.0083150497181525597, 0.028736590709835023, 0.052023311678142746, 0.033414052448422112, -0.0015520060820524428, 0.042606687446733821, 0.022301779226108837, 0.022174303630313905, -0.019435737837121839, -0.00050395773291792012, -0.0052139822121909096, 0.03017407278550048, -0.0046409824519108023, 0.049755854435395347, 0.0048321724860692639, 0.052625745447092698, -0.0043469856762714323, 0.024475775577038505, -0.0014550689238583339, 0.0025587670842842497, 0.02335062238389126, 0.00075945420194640373, 0.067061312439412685, 0.066720064906692217, -0.036179831263457696], 
	        [-0.057111668714524069, -0.031888560395926815, -0.020364646131771198, 0.0031373605136144483, 0.013436737732060224, 0.0059512553325854946, 0.0080221362250533727, -0.0033221874193103476, -0.004827846253580151, -0.026659247927967398, -0.062783175554247617, -0.076967276770677301, -0.033637293299445814, 0.026369958665574775, 0.013899807316877229, 0.041920953666546329, 0.050480088450960914, 0.040061952380199911, 0.044564528130835168, 0.0069941117747924636, 0.03093737186111541, -0.0062436290541180578, -0.046320908761036353, 0.011237053256609078, 0.03625881873734127, 0.008296320294636228, -0.10315152186935141, -0.12978400882646329, -0.10762360396379125, -0.028238442365860296, 0.077774908415915764, 0.057645200841886443, 0.020682314424331508, 0.015698799166135785, 0.023614524698368555, -0.041771874129604925, -0.12746951561572256, -0.031282550658931839, -0.012702497649368927, -0.031002821266721811, -0.053233125623346492, -0.11694882872058675, 0.019915333787276241, 0.030434079899803762, 0.034286620375398126, -0.042572007349056584, -0.084215624143568424, 0.069861287834688535, -0.012204622606775559, -0.018891406834175561, 0.019639551076716097, 0.077724504862555804, -0.080366494513686909, -0.015106150328832637, 0.034588469301179037, 0.11597907830248098, -0.022649572331124024, -0.10542134577114659, 0.064909164241530898, -0.0032238315195849358, 0.10106249830020778, 0.028244619862228884, 0.13831334399041184, -0.029406130060508649, -0.1747975534137946, 0.10110596129570967, 0.10656117039170004, 0.0077235863703064567, -0.14344418956701926, 0.050109495007546564, 0.086715745692903579, 0.093089685501030639, 0.12450293694496621, 0.12884230003597821, -0.070419779564091803, -0.12323154963040814, 0.070753486613016892, 0.12050632408764064, 0.010233622798694719, -0.097733233903663133, -0.059331174485382117, 0.058782895880653968, 0.085326083200578981, 0.076775855235002285, 0.029787153121228482, -0.018648323277872803, -0.021041250623019279, -0.00034304860813555438, 0.084298241516976985, 0.056835020648177442, 0.053326494938013475, -0.039638663459144921, -0.0050145752734991195, 0.013779029282405111, -0.010485661499173113, -0.007234560404816931, -0.011950044363487594, -0.002596863452470205, -0.039481955312791167, 0.092829813875564882, 0.04294346095881349, -0.0075415218000726147, 0.01831664591755916, -0.039130110094255752, -0.041539280566723305, -0.027051679902780887, -0.042059150111380464, 0.051858253540492213, -0.038626104291501345, 0.089621659475075818, 0.071389073995249491, 0.086449311698936798, 0.055650817209077025, 0.013638815876452798, 0.017995842737628248, -0.01801617871484959, 0.063458705330672521, 0.053363636563368205, 0.074742248974209113, 0.070779246477809463, 0.038021312100079668], 
	        [0.016782329804763754, 0.022184009254756339, -0.017610151854017764, -0.083789286898927368, -0.061012255632239214, -0.049436805730274716, -0.016010628978889538, -0.0012930764671227057, 0.018100227337522104, 0.042203188910774361, 0.091115107725438613, -0.030973163753086161, -0.0032195286052498912, 0.0016759860931787329, -0.014121001324428797, -0.048981904044656924, -0.010745318377515141, -0.097652326517780441, -0.082418824248892006, -0.0086675634058914763, 0.038492534598761105, 0.038421970823334595, -0.023684080137090627, -0.042571211439382639, 0.02767445118866517, -0.0045846119818084147, -0.029036296488781282, -0.014288492306115716, -0.036492483953748919, -0.073188419406786581, -0.058473938306242701, 0.061157356628457379, 0.037513132599877139, -0.044262690874014056, 0.037080163847070004, 0.0088659608282077099, 0.00080272687834155587, -0.029635044582425114, -0.061890394619628558, 0.0038985935655814069, -0.055588932181221483, -0.064825910358400518, -0.040454364747733541, 0.071936402641623182, 0.051467957240617299, 0.016629850744416953, -0.040009434139141736, -0.019115829817856561, 0.091904921049085792, 0.06837146364091487, -0.035381668896085239, -0.031695935446360804, -0.023950933267367816, -0.0394003966580148, 0.03763781004513285, 0.1197050728253103, 0.089542091951175892, -0.048321863792027797, -0.10361580068468161, 0.03196026187380821, 0.22708318047185561, 0.096992802612123799, 0.026709846902001309, -0.043788789977080037, -0.030431230119196698, -0.036199091708226813, 0.11281418451835055, 0.058353797638634589, -0.064975276585847841, -0.065781446400588514, -0.0084482038519338096, 0.091241523771951369, 0.12717594497795892, 0.076435365308040473, 0.05263655140428726, -0.011143586147963506, -0.036137839085706183, 0.069124578846449444, 0.013398711580413412, 0.029824240574494128, -0.003761299877294923, 0.0021895992476564027, 0.063411958556754897, 0.05214012614545932, 0.05038609451252047, 0.035324986438009076, -0.021229516140167864, -0.041481082779968939, -0.02340383743107953, 0.025148825203493166, -0.0071054288136557786, 0.029757691086840125, 0.0085264919185421041, 0.049978808930559324, 0.047608485947021148, 0.007387529728713386, 0.023177640471752005, -0.034372485157573206, -0.02211841910582997, -0.03255077177054265, -0.0095360632808114149, 0.02395181727198023, 0.0097167002818091229, 0.033561780635984223, 0.044589517984731777, 0.040595502460242246, 0.032653779800933931, 0.0057648668309821221, -0.015195338017169461, -0.04482684339688519, 0.07120843129770589, 0.041893263952033938, 0.048927297048636464, 0.073827844317264732, 0.065244542220815133, -0.0017292511368722507, 0.058389555203693405, 0.046492272714646857, -0.044448592181834709, 0.0032057986445928333, -0.083491824073505749], 
	        [-0.021979451476262124, 0.041749536510466173, 0.036317482818499322, 0.019303759385788856, 0.043331105658738031, 0.039532451044482823, -0.03647609905532502, 0.012807077503951922, 0.022713576127722859, 0.026792414564902785, 0.017780821834078364, 0.021847416207194322, 0.035542788551473518, 0.022495282054875682, -0.019211730168732774, 0.046687383535703716, 0.032073200197188671, -0.028686832095504631, -0.06812268823509858, 0.001294075100742806, -0.034564145835298599, 0.050972273139714794, 0.017344511387778011, 0.035613261169431379, -0.047698589768029459, -0.033623331365756862, -0.032521260678616007, -0.0013900797467142137, -0.038202063259482284, -0.031763114785060997, -0.046960749111957488, -0.049070236071480984, 0.017434726053958804, -0.030703215315142654, -0.057162301791745529, -0.0037112416196131703, 0.0060696367369069372, 0.038135057103153125, 0.011368938851434945, 0.043811886314067822, -0.034217588390491993, -0.05354120670482268, -0.039937408320660416, -0.061769626775271688, -0.035240350915125673, 0.0016450283116066916, -0.019800744266528034, -0.07722000486464739, -0.075502378494275851, -0.087592049096889849, -0.11012945508577086, -0.061232503015605372, -0.038229892765514702, -0.064265277827533399, -0.052614544822152443, -0.023205841324039467, 0.011034902978061789, -0.00097880135493109283, 0.015271729427483255, 0.010026868737236877, 0.057985348035531209, 0.070840729971491434, 0.019039403044224391, -0.041761958313936615, -0.15551177552373613, -0.07628198734805558, 0.017047176529394591, 0.093014754421786722, 0.093581458110479965, 0.043402580662633972, 0.0066461038347559332, -0.028933285567003395, 0.071468870303731766, 0.099203191964259974, 0.16737897607114252, 0.069043657929340946, -0.07749686881409408, 0.099573378334475354, 0.048571278979090152, -0.0641451014524268, -0.017708931611072284, -0.033773357420827717, -0.036770341744953708, 0.021125297287466011, -0.03253144131642647, 0.016179841472347585, 0.090577750229154597, 0.10585324720051341, 0.10393909903192404, -0.039146928692158481, -0.030447885188444671, -0.0058756393399591045, 0.0049200955007691616, 0.065014535940290191, 0.02355974270510458, 0.0086861952813323678, -0.066304296641173113, -0.0023589044880598853, 0.10485324285454203, 0.041243799776074036, -0.0046939490366109116, -0.050265505473230082, 0.079897314990575993, 0.051811860629177822, 0.05936381965465605, 0.063038602309119562, -0.0096553750564754778, -0.069242556576336475, -0.047051759275558228, 0.071057903450201951, -0.034427035272532699, 0.033352431404995275, -0.038713428810432646, 0.040541117523422751, 0.067513694210917949, 0.082805954892964315, 0.10708141658638523, 0.017928056812146861, 0.0011601162267517867, -0.043673577511548753, 0.12867110066084922], 
	        [-0.051871694661995885, -0.019280829936621956, -0.054682607758164609, 0.0009447920461082629, -0.013017072859738549, -0.012890228722627788, -0.035616894294724373, 0.0014514513795995301, 0.042883217734102162, -0.010520379849197729, 0.007557764016209687, -0.022057597937526343, -0.029115164929706994, 0.0012528790852251032, 0.023269338421732191, -0.067474514241851885, -0.039425127112679564, 0.047182643334052331, 0.018571000663569977, -0.031453248579785112, -0.0042627544710682353, -0.065390808213087154, -0.062309588573350783, -0.00018350956129405474, 0.03407593431333647, 0.020712134681679213, -0.015816412935546649, 0.036106476966187746, -0.0057176038296621896, -0.0078034581275657263, 0.022001767580951286, -0.075063089515289755, -0.056833269479676471, -0.078487811169271574, 0.053314994300153781, 0.08979192045945919, 0.065579735163271619, -0.02013808088107881, -0.069354719259617226, -0.012900359094848712, 0.06749429214896617, 0.0052091689986741314, -0.0050445817378490798, -0.034013340544313847, -0.049220624377965441, 0.036992846717020605, 0.073527164422162408, 0.023626785644426024, -0.12668833039918156, -0.049929820048297914, 0.13709290290146586, -0.043083359856046347, -0.11283440510072536, -0.022957546531399264, -0.016380363567833241, -0.061480443278703056, 0.083722789203042061, 0.026145798642064663, -0.10930012120125338, 0.093485417462155301, 0.21229414611822872, 0.12152486504801896, -0.0085143078714366941, -0.11195109821400444, 0.0087569591283611289, 0.11393373946480671, -0.058279470412456076, -0.0080421662325995125, -0.0037127964633908161, -0.090611461392314269, -0.023750445832424479, -0.0033262359419465592, 0.051599394503568374, 0.11794682063279016, 0.05218760955456582, 0.051040480785423475, 0.13055799836266763, -0.01221412005055704, 0.036431789368042852, 0.036670703720440317, -0.0078012137698507981, -0.080637182319625592, -0.098441747577097227, -0.03508837974768049, -0.032648567450681995, -0.016984796908047974, -0.027536458166992319, 0.06115870091554932, -0.0051669231621845379, 0.054346612146431938, 0.045746752439773088, 0.064739446750120125, 0.049552711275373883, 0.018862295590649777, 0.048983187153556228, 0.062541985576739914, 0.0072514834621828835, -0.023346720324739785, -0.075601926169402353, -0.057354038392425574, -0.017630696493874162, 0.02294588190926191, 0.090873111715422297, 0.0042984842735071613, 0.028246302042173196, 0.0087607006248174284, 0.07435181540431253, 0.035004927442402321, 0.031603063242742584, 0.034524004650933401, -0.076590160387399964, -0.017921124400819347, 0.0062988574109997869, -0.013815145103657209, 0.080616454932859072, 0.019781761084500894, 0.075647735229095237, 0.043189525185656379, 0.074149096904190248, 0.04770033275626058, 0.080840156186910761], 
	        [0.026722003554860107, 0.011659299846958612, -0.030401027328402285, -0.078933516409380317, -0.025083013651028968, -0.051258138411005405, -0.063738133597399105, -0.045360978905662902, -0.0072454540129453099, -0.0016165196721033143, -0.089855064600654358, 0.0097207854833627934, 0.032566632530092121, -0.063546487797010456, 0.0040586505412308974, -0.011780242044409216, 0.046622082528177268, -0.0061913239369574095, -0.00040805875755831446, -0.038285077303976116, -0.045803388237714085, 0.00013567048096911616, 0.071841011636230273, -0.0035184890415564662, -0.054904449860221666, 0.02924191756204008, -0.01689557308935365, -0.018744528704994677, 0.075716926828176739, 0.019648278025953467, -0.043885654656954369, -0.018293295448074808, 0.029236899127084933, 0.079480753652723696, -0.10678554242785285, -0.13518893526708742, -0.0021617736445511959, 0.057839422567807532, 0.046852963852851211, 0.010613998677874176, 0.039439684131787889, -0.09285753056846846, -0.05413777579109947, 0.041015207873276241, 0.06345089058106948, 0.047469937132271711, -0.11150623495169829, 0.024332828493630963, 0.10456565053537453, 0.11492526729638461, 0.064349122666039232, 0.024960207207532441, -0.12312652337245503, -0.0357276852240003, 0.056357845948048858, 0.035122396434681416, 0.040853396388258245, 0.0048171237774400641, -0.018877573782764997, 0.063834223394559408, 0.099594433304481159, 0.10457424633849259, -0.0059323860818025122, 0.051540993351738555, 0.043792467918237224, 0.06682182319421423, -0.022981366626334779, 0.012623816899516915, -0.027434183623551101, -0.037320166273082822, -0.040760599767723449, 0.0054311112775042138, 0.077856612886341992, 0.061025832668360973, 0.06291439314075388, 0.039278945628749652, 0.051551436211894681, 0.068228206982137857, 0.053793243256798989, 0.033116294799969533, -0.087230566689965136, -0.062413283562578893, -0.082179387336970056, -0.049408458616677628, -0.051359759856891118, 0.01704176534606279, 0.0083052629894674324, 0.057973181889856361, 0.049273067989623984, 0.050549115680086437, 0.054189519887507934, 0.076357459282641149, -0.020159764614916531, -0.01496772437088123, -0.008318755358141354, 0.032399494222174856, 0.029724547489281376, 0.081167503706311317, 0.0010766805091777659, 0.003132081148303891, 0.039599122177480288, 0.032665101862452292, -0.0076123889523127567, 0.01439000505445691, -0.024144476806805197, 0.015900895762450868, 0.036463449654478043, 0.0059983182179931529, 0.0073771085938482096, 0.068757588979111023, 0.0018450028156024381, 0.058983317021274982, 0.061022660493410763, 0.019189271609420328, 0.052228673471552065, 0.022903569800211365, 0.0093545739337794684, -0.022264194312743783, 0.028742917273488648, 0.031821039680558945, 0.031024768487282525], 
	        [-0.024931914403123902, 0.0067371102591031948, -0.007391490442242972, 0.017496948430487498, 0.023422622609065046, -0.0094928852122032684, -0.021940305477306223, 0.00025349416488679166, -0.041633427271842161, -0.046280330971315689, -0.06778901544234435, -0.024673968258041953, -0.029907852335896074, -0.0063449215025076638, 0.038828302806607679, 0.06846252343470445, 0.027205296230138769, 0.034295058790694666, 0.020017420759176036, -0.044147644646415102, -0.059872005422267019, -0.051482095492071264, 0.011124069340270715, 0.016763058258717323, 0.050886840442624481, 0.02549815480352427, -0.0939546655207978, -0.092391189277661337, -0.032479032153627907, 0.034462594953754824, 0.059969474942545953, 0.025584824798319902, -0.054353591667338476, -0.021502238752819661, 0.051546501452992721, -0.034007866675401628, -0.10294183533637649, -0.068214384945964324, -0.036091128635311429, -0.035862209668492087, -0.066950369902671863, -0.0788669358196743, 0.01348990123782938, -0.0092991627936537726, 0.051242254594595721, 0.063155120324530495, -0.057574046015223528, 0.018890388699001628, -0.042698436177047515, 0.0063897190194895787, 0.035993788676757676, 0.10789490348622735, -0.068180236257618904, -0.075881929824815911, -0.019747504672663209, 0.10735747383087241, -0.03869822606166641, -0.15857079396383206, 0.077711698878954072, 0.0027821735741544867, 0.033503358473603001, 0.044529328438383697, 0.11469939192954226, 0.03762916616171235, -0.11802211992760672, 0.089816131200894628, 0.14094896752231051, -0.021944857285476876, -0.18628488220757861, 0.05722715554404334, 0.17885030648332761, 0.12350597080986565, 0.03287297640709165, 0.13094265605576585, -0.079054276690131695, -0.098874284973658105, 0.07103695210415123, 0.024172138802402793, 0.044359819339575904, -0.051012505698565642, -0.039065923553229673, 0.10490932756038186, 0.12042204998724948, 0.16359720010359963, -0.0083141685472531146, -0.029805224335517175, -0.023079186944148275, 0.059849592266809526, -0.035424217542300893, -0.025330293256378603, -0.034242830366423213, -0.063441839555084145, -0.046964192520516257, 0.00071815932595863455, 0.022784193984670673, 0.0091085690333239377, 0.017544256490621302, 0.028537852311277645, 0.080903467002397131, 0.062288009683574119, 0.048189715163459962, 0.021557195959710354, -0.022313472699576162, -0.091203959029137333, -0.048678117782736216, -0.018880976433473903, 0.02319770864597645, 0.011883122070171566, 0.040745024174235034, 0.055217772192963144, 0.0752915524448943, 0.12950685960404881, 0.034066733228072771, 0.055263332392194921, 0.00092956340022609663, 0.0025829434849187483, -0.012623470754591415, 0.045045466234092293, 0.035721398778730123, 0.073251215610966064, 0.094939799788321122], 
	        [-0.054693996761883468, -0.036142257709420977, 0.012139987915473143, -0.015154402745934992, 0.0068463302216838166, -0.0093136851521987245, -0.048684400948289616, -0.049430372046362539, -0.041064971222999513, -0.077253849675155653, -0.052659701580420708, 0.02644006417674272, -0.035825803881623458, 0.00018949187702807166, 0.020886062450068934, -0.00065949460591928355, 0.022071058438621102, 0.0040313708607001772, -0.035333022236136671, -0.028226767346863704, -0.01809822098267436, -0.020234382561405761, 0.015320984616764413, -0.0014404272920333708, 0.011179661842263149, 0.011479905349418697, 0.050415046288148357, 0.011825597601556187, -0.0058861573381156773, -0.010693467291456787, -0.052711803776757507, -0.039587295536248207, -0.015153382931397254, 0.021776177677289621, 0.018485275683894062, 0.017270703576438604, 0.025545107202705496, 0.003552691996951074, -0.0072077192628247633, -0.016927777585758572, 0.01010327735896166, -0.011396759513419105, -0.054135995207295812, -0.008775918099563268, 0.045428799230222999, 0.026078742599032825, 0.018401462157094414, -0.010304766106153093, 0.031175273783970961, -0.022964877769659248, 0.0073488459201091344, -0.033664533213207795, 0.0040173488287653797, 0.00073105699963767201, 0.00092920767763406131, 0.038455564657623509, 0.051027184464204699, 0.032163653730152494, 0.003091909476963195, -0.01805086224294028, -0.037580600034212458, -0.042983404923079879, -0.032973836490514191, 0.0034357039654534238, -0.0029191330430502482, 0.049102114568624511, 0.045968351963145374, 0.037533034565610877, 0.053551748804077495, 0.0025191362420830836, -0.04750855266321341, -0.072788896259128044, -0.064427335224849849, -0.041220523667029399, -0.026780660598796205, 0.045893029004908492, 0.043426979158010505, 0.063353229422186602, 0.057675805158847071, 0.04031026644948954, 0.041067495849464855, -0.051029374332638877, -0.081222848002171583, -0.10623271352478328, -0.040384319505111455, 0.012698889514418027, 0.027850330309453372, 0.073422603729637589, 0.013872383376783981, 0.086837219868510659, 0.078231498196284319, 0.025402065662503196, -0.0085959304722693069, -0.1009426660553958, -0.079770896634910687, -0.089307575006007389, 0.015197805521062258, 0.061289339594082198, 0.065948610641877861, 0.041035546434975201, 0.059557826909646928, 0.080006232863982965, 0.074882607029051015, -0.014113346378857847, -0.032420747653342651, -0.11384852443855065, -0.10291516846863054, -0.012980508793377513, 0.052220406103339362, 0.12082717968395887, 0.10605397357987933, 0.086255183281375047, 0.08321354397182873, 0.048514817007833, 0.044243911058542376, -0.042578630343806573, -0.10029735035508303, -0.10409726347948557, -0.086307810468093438, 0.033369049739091161, 0.16060915775050888], 
	        [0.12273861405978125, 0.042814508752045621, 0.018061966478661248, 0.0053062383942378208, 0.035823523447581954, 0.010649293754868217, 0.016551078536122706, 0.01489993969426269, 0.067444152505856128, 0.0014205983259976962, 0.017061484842956845, 0.10625529836546962, 0.035660360418095283, 0.002751078412191129, -0.012307530679996168, -0.013785633291103078, -0.05132782373436337, -0.086000385495835899, 0.051802568141879196, 0.03904805873472704, 0.047853825999159286, -0.026265747542033639, 0.030741255453331229, 0.039406757558914624, -0.0082191970520293089, 0.0099449690730434304, -0.011588775094071746, -0.069863331862633757, -0.071219401021746773, 0.026730481405145667, 0.064361266677040244, 0.049962478130168061, -0.024025875808116548, 0.063809323364770701, -0.014373658398046024, 0.023604867877091828, -0.042856616912313392, -0.030014181333617398, -0.098897121704490082, -0.04373899159435149, 0.034309424166718241, 0.071347736418952548, 0.03761434445919945, -0.00082170423945062548, 0.020111151000193242, -0.0023310749229815061, -0.015928238873940369, -0.024231713696889132, -0.1221269192682253, -0.077411569100787531, 0.0032849717401806887, -0.010022001408555678, 0.084366733947847855, 0.068284080213949994, 0.027109602968543318, -0.034520822432145569, 0.0059705622321129803, -0.054405452170679082, -0.058782564084633948, -0.10071244219183988, 0.0067297619046283036, 0.052325883194804468, 0.021602083823943383, 0.033365772587175026, 0.060449981481694115, 0.028671597117484994, -0.069275563884935831, -0.046529106869698536, -0.071031022601829363, -0.068871541073595624, 0.046653811370795717, 0.13893639005159752, 0.088206715220373294, 0.0091340091832131931, 0.033848018094446569, 0.047381238825923169, 0.043417512003515984, -0.099682793139969056, -0.072929356853561139, -0.076420909130552717, 0.030782008777859689, 0.14194448580394009, 0.1054078132040758, 0.050343613237156831, 0.042627816282501868, 0.0019869408179327142, 0.002912892694045377, 0.033417927689340168, -0.10626474257229218, -0.089797364954523645, -0.012630641916284824, 0.10656465605540676, 0.081787444241139498, 0.015706150749096585, -0.0081474894960576333, 0.017962048380179174, -0.0076820753247799078, -0.018533162764163613, -0.025747232327919242, -0.06863640651652167, -0.016416507375672674, 0.05202743487028412, 0.08441518809008719, -0.031665719212890506, -0.081384934590939706, -0.042068123788522205, 0.00053001779352805818, -0.034027551289153801, -0.036058497578668941, -0.094126599607925632, -0.028723845930421731, 0.036956160575588454, 0.11399236758087031, 0.047784293848876058, -0.084617974292537104, -0.1041988894674926, -0.096930663266632036, -0.038842231479212945, -0.019078175570027882, -0.045970102698338858, -0.1043619020843051], 
	        [0.065757941109192197, 0.074777897508991442, 0.018292785286432484, 0.028173020338814948, -0.0089483449436603552, -0.052545580386797019, -0.1087949901255694, -0.039787230769942346, 0.0030209786294805308, 0.043861504558306494, 0.020559045374589795, 0.04470571436425777, 0.012784570202518724, 0.016258299543353186, -0.038126906658306502, -0.037497943202709987, -0.1176914965804748, -0.048822632662462465, 0.039098390799118754, 0.067055649329849032, 0.075500071483937753, 0.076145526827718329, -0.04103203468659232, 0.015971731655258753, -0.037660696603424096, -0.03882889344260633, -0.10585017234815822, -0.049772329981684821, 0.0044956232113971175, 0.11402219053620558, 0.090970410758093978, 0.082806478184774074, 0.059837386632622405, -0.013124940068416517, -0.029059840714413719, -0.0085931859468618976, -0.055642225665546378, -0.08586524174843943, -0.010731942001337424, 0.12910594217065441, 0.033630584320905196, 0.034969345305899749, 0.022613172456202865, 0.023083805067396955, -0.026126622747118175, -0.036555728898516215, -0.03454946027988387, -0.009697212267244612, -0.039485260868956623, 0.044563725924654886, 0.10334272388553382, -0.022990981360463417, -0.068461711924414873, -0.026650640178318748, -0.04235340979767379, -0.063143412724810472, -0.038670479860085677, -0.032190500890796184, 0.0024621208503444285, 0.033854260568938976, 0.10018347106209433, 0.039049779541599661, -0.14322204153577417, -0.06792156608979899, -0.083174058543035695, -0.086985543398739873, -0.049996676858093628, -0.069642162140837696, -0.017580665091978198, 0.045666600981940773, 0.064474542322985828, 0.066381323532462677, 0.049759120323402989, -0.16687707277418293, -0.10148113813854155, -0.045651850601446282, -0.025088926732828348, -0.046920284310850276, -0.063091363282112678, 0.0092456865886239858, 0.038333207077261205, 0.061578125540969059, 0.056229950013552389, 0.077372534333749188, 0.043186131128634953, -0.038313312025859518, 0.011391766806405483, 0.029085717674323781, -0.087357953773625374, -0.045745395595645708, 0.035034140501439034, 0.038753107277930694, 0.01028453604755696, -0.017745509526202401, 0.011578683352821917, 0.10678493475168932, 0.12920759729821871, 0.062105404373375861, 0.031614742242985883, -0.03599156339869132, -0.03580586208307926, 0.032429174955818194, 0.013349521240161158, -0.00025561537496165965, -0.0075836537904609078, -0.057809872184653305, -0.02737962405414552, 0.077504449878040088, 0.13303768141468877, 0.070151605162437541, -0.018705354807535012, -0.015887137408581595, -0.012405772738829302, -0.036314766817913874, -0.057460340751641914, -0.034056167300506576, -0.07157545200554731, -0.068299510308264991, 0.0017292217190058162, 0.06083852156997098, 0.15051364383348281], 
	        [-0.120254202400746, -0.096169017184156325, -0.017372420837296856, 0.11248443570944938, 0.14311280665471804, 0.082528015127987145, 0.040999748265665256, -0.0022276752168216667, 0.010467790781802488, 0.023760234093264703, -0.028258264318314828, -0.084469173229205441, -0.06310610366941509, 0.034557979503718569, 0.080540040228858856, 0.030927414852254288, -0.055931722549191307, -0.02359479370263956, -0.021307923642893911, -0.06310798271161458, -0.073253467634114292, -0.058338840997439398, -0.045165611251598459, 0.026985236670137049, 0.084702435833259607, 0.041280837981018503, -0.12024366873436408, -0.10042897365913865, -0.049765123602586149, -0.027095288662972609, -0.010458303155168436, -0.089462141062869843, -0.1289437118045591, -0.010213525065954888, 0.053979540894161043, 0.069468772869540479, 0.12952759376479325, -0.14182340494484172, -0.14285062277610125, -0.0528606979553762, 0.063969476799177832, 0.053939270199952309, -0.022029152784641744, -0.10818698528187731, 0.016491832436736686, 0.038639318505357401, 0.024020989335001519, 0.065592897425442109, 0.16112502640598336, 0.023615052509284043, 0.043352450132583868, 0.0076979018918599679, 0.043112121029937528, 0.00071987756274229098, -0.045960857982681895, -0.0069127442592640644, -0.0077204882201102748, -0.031891871843114539, -0.017036960892809219, 0.035037325548395559, 0.16303059281511678, 0.17418427554606328, 0.057001247041575748, 0.022916289242805976, -0.010513114683071652, -0.052886209418476507, -0.0043129908452952349, -0.0018884698638378054, -0.044790060375371074, -0.032320374513797531, -0.048960971185410075, -0.0094052564622430085, 0.052253286388732362, 0.14016474879016858, 0.04065676611467136, 0.024408426423858556, 0.029985555367538438, -0.033973239042800897, -0.017546572766816648, -0.037345271053038906, -0.061375928930807219, -0.03937344145819692, -0.054467136784434225, 0.037876693223627467, 0.09858135152652249, 0.08915095169603543, 0.012958414651170758, 0.027624783264719604, -0.0058828017121677761, -0.057086791129319164, 0.00032844804874246347, -0.037840469280978235, -0.033695751439804925, 0.025912743632823754, -0.017024947537232993, 0.06774754790560647, 0.064529829344964221, 0.059856281606444586, -0.0040794712071662576, -0.064492010817941703, -0.022926783895192725, -0.068256941312238154, -0.038787091103630163, 0.015688747762662825, 5.5171662105987784e-05, 0.032388446527829046, 0.053502152462023958, 0.062621310565998928, 0.011267099083652837, -0.039490456581147762, -0.094319475634422542, -0.047548409339035126, -0.0091541278282420042, -0.048201431835308582, -0.012240843418624294, 0.0012540759296775089, 0.016595878790118618, 0.020434407588746067, 0.036700109021096272, -0.0026055496863919281, -0.039180334358498638], 
	        [-0.039044382493438445, -0.014031835439091891, -0.01717497943397446, -0.041781540002782738, -0.059373536092440463, -0.0085344327706754902, -0.016300069172747539, -0.037294900567202499, -0.017549755907846534, -0.078447962882527866, -0.02004008529828297, -0.056768697829428338, -0.059967040212345959, -0.049253129103857415, -0.069471541008027285, -0.071902666850531496, -0.044718491551717546, -0.03636510105928939, -0.0034411563298461321, -0.046411031373760819, -0.028589990691112652, -0.083768492808513548, 0.095116180742419232, 0.062452246419035309, -0.024833981241255007, -0.097858575559795102, -0.1127986872143521, -0.088067854572432464, -0.08883593725007502, -0.068545154777893094, 0.0011510544062942052, 0.068272249927958051, 0.080893673619898535, 0.1353343839303309, 0.18057622473716234, 0.089392921016127391, -0.03771266910646548, -0.18004516845335108, -0.16759680953524253, -0.11135480418062912, -0.046002363039963315, 0.067488034958263582, 0.16040808091097752, 0.16020908007929302, 0.032242746883539272, 0.072926540225657518, 0.1267341164708839, 0.076774965852314164, -0.027586193949245066, -0.060585053483984741, -0.065958103899050796, 0.04618881719914493, 0.06405321366734254, 0.066545184375501457, 0.04695382149034999, 0.0044609113824994155, 0.0091618342219318277, 0.041960317974973543, 0.090848513403254741, 0.099018853508946403, 0.090333756224992956, 0.067825639738709226, 0.012714203390510964, -0.0052083322470473023, 0.011531736842481339, 0.046913351524415829, -0.0026789314124194552, 0.028085116456833342, 0.027040588615283353, 0.015104267552866583, 0.059852806875527353, 0.032101419463347713, 0.025279126213945874, -0.045499782999878127, -0.0092654514634481905, 0.032695973667332234, 0.0058023061141843219, -0.0018139112732011575, -0.0029108731958343292, 0.010427305260203787, -9.6032476966920188e-05, 0.021288607450265881, 0.041079801640464084, 0.016357363013747531, -0.032396279409626833, -0.0096468473033134161, -0.015146538620363123, 0.013412806275636471, -0.0013427741295518741, 0.038224090646334606, -0.01337749153937268, 0.026455615442210673, 0.022399735833748824, 0.0083203718092760871, 0.0021986789243084309, -0.014293946476503921, -0.011197610424383816, -0.025764602165002509, -0.0044402614564183623, 0.026453211631295465, -0.016392272773541029, -0.011847008501585585, -0.030834902384847707, 0.0092711300250400749, 0.0079231656727102029, 0.015033519474474451, -0.027785535484879158, -0.03370942439196669, -0.015542452577597912, 0.00048635059573182279, -0.026694531555004813, -0.012724799179976064, -0.013286763364002738, -0.042306321931516747, -0.033424166864698804, 0.0087293255484813519, -0.030242759324034616, -0.013050994461220922, -0.037603985335936958, -0.048537758115318075, -0.061784216202301949], 
	        [-0.064895613231398419, -0.020224286971327814, 0.015905264409012548, 0.013551842188797097, 0.082225664059696169, 0.052591399404863487, 0.042257887471961172, 0.07064771573560033, -0.0011991945255137408, -0.034366640312061339, -0.072360555553281497, -0.056223603404509992, -0.046254629023798989, -0.030584855242000546, -0.034996133864494572, -0.043017778242875414, -0.074116618465999901, -0.058193036991492836, 0.099174902047441449, 0.085979159623767315, 0.0260790473140005, -0.090335795957093609, -0.10362582311773169, -0.05683029227387211, -0.032955228570346592, -0.035953196903694445, -0.083669598501602105, -0.14307384019801234, -0.17021343406030898, 0.056559505125885055, 0.1353903981543188, 0.11264594916548558, 0.011673755450064008, -0.065805649175016551, -0.015916968368203999, 0.049371535828759125, 0.032602131500708426, -0.023482372439204213, -0.14884937691675146, -0.14122378994790352, 0.038947574553526224, 0.090754777377725832, 0.11462434476555877, 0.049232968649695563, -0.020681162710889808, 0.0059189166530157098, 0.048035670932309434, 0.048756668898357711, 0.015029939401784822, -0.0045822873172906703, 0.044145082900123096, 0.050071852397185944, 0.0094509750493274383, 0.024378668316836539, 0.052749214069398115, 0.0064390139543627628, -0.0002811989012708239, -0.0064546940403005376, 0.067241804853012926, 0.14641906683964209, 0.12089002549596747, 0.045524123195999813, -0.027903819777222599, -0.020728023595215268, 0.011972589684504081, 0.023139835261794185, 0.062288213971794335, 0.0030852567167743063, -0.010563156113489056, 0.054746231145096608, 0.10798773024900726, 0.014816168604569607, -0.067729122880713061, -0.069428819952578644, -0.039672679449664974, 0.0072944844869031189, 0.031665801169246242, 0.077903468071470375, 0.03314357843621181, -0.011090195620338333, 0.025953154918250638, 0.040728866157606014, 0.015524058836610692, -0.021280018049330086, -0.074601124345350517, -0.032634705813619005, -0.040767214304249212, 0.029068927489674708, 0.050403637093174664, 0.016601304925128416, 0.0082563132518792444, 0.040076199043347638, 0.031009017378264954, 0.02125830223035903, -0.0026364504616102971, -0.025393115408776517, -0.040100437968749382, -0.05110548671081025, -0.067993377103616609, -0.00046432557130123052, -0.0039876483166379033, 0.022729109377199703, 0.039555964359429222, 0.053830169668727355, -0.0014414045704570968, 0.037267802189446919, -0.022231980521954575, -0.034050491080049324, -0.073951655494023091, -0.043557983601915228, 0.0063278734791331892, -0.079884297677682306, -0.05179614099105008, -0.012967977410458104, 0.016769677941412969, 0.03933948218335899, -0.014906721458355397, -0.021082645685981671, 0.00037445636334414081, -0.082723281977227794, -0.1030737258893234], 
	        [-0.037002829518880356, -0.051800501938286336, -0.060853004537176597, -0.0094150409945243096, -0.034328030870577425, 0.0033825861478738173, 0.012446709688320332, 0.028263939384084974, 0.051241250294029178, 0.029467212390683409, 0.094296073781751158, 0.017996331462246259, 0.074494909584215466, 0.018562434067668762, 0.0011775208660011255, -0.03343642198912352, -0.035845758685869263, -0.02469974718432548, -0.024948855129499292, -0.024856433920733188, 0.022654621557346655, 0.013969959583284512, -0.015621110631660393, 0.08434398198734791, 0.12526052771855398, 0.058408231821464381, 0.045127451768280695, -0.043164240869397401, -0.1023993834271598, -0.096781070009609851, 0.0053916393051223234, -0.033844402314595262, -0.012657848528438927, 0.0013785476814248063, 0.011572904307556139, 0.068403154355265131, 0.052980959912984543, 0.1266701829984114, 0.035045725726125722, -0.068960202229844197, -0.060072231451733973, -0.062720555693278807, -0.030009692601680373, -0.0092089352686221815, -0.053346169244103861, -0.051521839481652648, -0.019671024276837101, -0.055873607630573113, 0.041978873563040947, 0.1638861354064878, 0.00106361294464159, -0.053910040513112212, -0.068153591022086388, -0.055292950731728449, -0.039462171388406658, -0.095725937501121905, -0.092290911359049418, -0.11338803995859958, -0.13838339127374222, -0.0357462740536892, 0.22606772554633187, 0.12813795776647591, -0.0024481614307838503, -0.033611168519571522, -0.051839059280132632, -0.084236132619828999, -0.029032249699063171, -0.058898794655031249, -0.11075161830580202, -0.15312117095255712, -0.020724783620647211, 0.16842588938808492, 0.12743855198340154, 0.080331925597410064, 0.021566448195444857, -0.082352620029737575, -0.069017983250065099, 0.049857379267076132, 0.040106054682231364, -0.055333820775483558, -0.042096211664252689, 0.066708704425261028, 0.042419812012600137, 0.069011669576221873, 0.079983677018715033, 0.034371804092794715, -0.017332099818488572, -0.083009418854646341, 0.042453939466233076, 0.051060642403565164, 0.07316878819733981, 0.10110928490296386, 0.015416346633545026, -0.074121651760900326, 0.037506205371324909, 0.056372316384434969, 0.069802712453019444, 0.022830083664882234, -0.088476191224756862, 0.056380990619929745, 0.11796759975891001, 0.085159502068178794, 0.0057506785680517813, -0.052150252418282778, 0.00071341189171907071, -0.033052078906102914, 0.042466154564593551, 0.066152570678099751, 0.041058972780051016, -0.07491213514221709, 0.059832650863602857, 0.050036282518436601, 0.073439101106600166, -0.035055451687694333, -0.043213965757215783, -0.028433835254721582, -0.049722879871748019, -0.042468775260800257, 0.0058211813366477044, 0.0033813738235871967, -0.064579878516043021], 
	        [-0.05204926560099437, -0.057237880289236279, -0.0083905804002989276, 0.0062458102695772955, 0.035746619926900439, 0.078399463599589062, 0.078852151476007562, 0.065079376584073825, 0.051674438501644049, 0.056599491625845932, 0.1112401778738227, -0.049451770190799972, -0.03311327028822704, -0.04470398589450323, -0.0069392182793978074, -0.023794576977256759, 0.010055161607694707, 0.051861925861248687, 0.032051221900923126, 0.0034551032431236958, 0.060342507325651218, 0.071820561865178004, -0.011974167972497493, -0.026068365839870898, -0.020182681121343846, -0.013949638537375686, -0.050699316492772886, -0.020355931447011116, 0.029014508674471667, 0.044992661189607805, 0.04170522023063189, 0.033987569666887124, 0.042094071544786019, -0.031292621485756067, 0.022301326642790088, -0.01743554965010255, 0.0086405189226159418, -0.033429116543261993, -0.059143520853118206, 0.0055852565804648813, 0.0041508387138344781, 0.049460528858195588, 0.050859527708305804, 0.079934023736357787, 0.0095959128701056558, 0.025688470585585318, 0.0055600019316925584, 0.013382028934657897, -0.058013808148885737, -0.089499818472389137, -0.071592085149893764, -0.019107360505553072, -0.0082744851179119318, 0.032585012634967978, 0.046701290308840598, -0.0096067810012472332, -0.020512636464317932, -0.0038438246468142923, 0.014613700602723453, 0.068186284724516349, -0.01830963397214188, -0.11322752216975147, -0.09640633091246717, -0.052403236939622524, 0.027222341781097337, 0.030317752268627929, 0.019657001659076179, -0.0096600042345343605, -0.018626726339795667, 0.0081908090585838672, 0.12179883942046363, 0.1508103124239786, 0.075806639792132646, -0.062761170942153277, -0.10013344453499878, -0.068245483773719195, -0.022265844067301123, 0.00065583914591630342, -0.015208724489903314, 0.018866572887032564, 0.0052684885324918579, 0.065684028931326841, 0.10986728461260108, 0.14928723727825088, 0.059434744289182703, -0.060185571636217253, -0.089354598820007264, -0.066216926969791326, -0.023535680546190665, -0.054962379947465514, -0.059013306627190822, 0.019989607048620271, 0.0054003206627150548, 0.032462771758462849, 0.045866640394699523, 0.10505871662329165, 0.055755510306947052, -0.059889616340963951, -0.092315810433916068, -0.071619045947736437, -0.075031199722232336, -0.062253911446631852, -0.04694709230045966, -0.048116321043479529, -0.036582441951753884, -0.061107036339067312, 0.036504990974571036, 0.10110597080448579, 0.051177845114249831, -0.044432074886152584, -0.10159227266715132, -0.077158568747903805, -0.030393198761254205, -0.050071313080747346, -0.074595676179791612, -0.073458542100526297, -0.078358062777158496, -0.030278657221277715, 0.084453877904946462, 0.12337283504154144, 0.062469168412561921], 
	        [0.11115260218147537, 0.051560842999883991, -0.019027323692840041, -0.053735438913629183, -0.0071101075931705657, -0.060331674975749636, -0.01273389146899935, -0.083913899585844304, -0.0068742819184818144, 0.036449537875718169, 0.057484281155208095, 0.1019949723289555, 0.082976543297385519, 0.018623799266703829, -0.020037210469670844, -0.058991687133825438, -0.0043094092108171798, -0.061801131907737672, -0.032137171525331368, -0.019997943427430342, 0.029477714358382982, 0.09332163289552993, 0.070136049723979091, 0.057019933758274077, 0.053899973004219538, -0.0026387634530392612, -0.0087944700091126295, -0.044886516736232299, -0.03176715948743207, -0.042173672069529447, -0.032508457873831956, 0.034115235511423689, 0.093105995907237046, 0.018636796052156644, 0.046735806088687395, 0.021858174501294951, 0.027569212512874617, -0.0019748228182896871, -0.020011467438642447, -0.038263327232506431, -0.041760709971461987, -0.030814576931739321, 0.028817248098680567, 0.07178725501146116, -0.009708063399979483, 0.040408045290464156, 0.047902942272710962, 0.049152309684650786, 0.016182293978584075, -0.017238522908897977, -0.040468598163172567, -0.045702820531370383, -0.016281604371356659, 0.0034546404119755736, 0.034807390777535141, -0.018385622040759317, 0.01969433114929478, 0.067998668027008519, 0.064831298138631047, -0.014464528171849848, 0.011124972290677312, -0.0612303154617381, -0.076620988117942754, -0.023624167810504887, -0.0028778143977437054, 0.037589255674998712, -0.069263304031074682, 0.0031359656960172622, 0.057377595091023581, 0.052691820606641286, 0.017399699182203937, -0.018570302353960122, -0.046213889206180463, -0.066632711107939349, 0.004937253121457652, -0.0038828611488524456, 0.025713646541403734, -0.083379308461335996, 0.0056691392712922076, 0.11608252277008832, 0.073533161219590859, 0.03822657644961075, -0.077118650194350102, -0.055463194241750072, -0.04304259780973764, -0.019189005860534236, 0.017297615166657204, -0.023170677964515524, -0.097271316382778222, 0.026385141514079502, 0.084668815279573317, 0.092504840629287294, 0.016711157910872847, -0.044362782624102759, -0.0454511239473053, -0.049550862988714514, 0.013625451869519002, 0.020561667154105095, -0.030006622146731568, -0.063980647406975705, 0.075872467722288658, 0.053120016709717416, 0.065923774906762364, 0.031465876517252786, -0.012255926181853973, -0.031398789946512198, -0.01876926970569838, -0.040221379151225214, -0.0015619003771453512, -0.0069604389489614123, 0.060783419102048972, 0.075568709103222456, 0.05225568745879651, 0.078139550494287488, 0.038095011814273147, 0.052434561149658568, 0.048883832083824116, -0.055025867820072974, -0.045282107044195954, -0.041013497771644633, 0.099043866859741717], 
	        [-0.11203549175295996, -0.039741638112244869, 0.011060178958798239, 0.068771522760862389, 0.091947029926868651, 0.063013461864849213, 0.053208457143949908, 0.020539339513306422, 0.038057193997243076, 0.038787465988623426, 0.028121764350374646, -0.044919650035753551, -0.028946060113256775, 0.038249964049902802, 0.064448692316739498, 0.074566886448479031, 0.056117982339109772, 0.057712083798571012, -0.019732262989866904, 0.012262999619765316, 0.0040347651881646211, 0.043113689501805767, 0.0036261933857882275, 0.040928710043322158, 0.053219648605966417, 0.046769367826384994, -0.017166264963499114, 0.0054891268723304132, -0.020480699308758406, -0.022929172836275616, -0.019377222102737297, -0.050393274670934379, -0.028341154356359134, 0.044368745080340603, 0.034906291107670129, -0.011071953214126184, -0.065544146068916828, -0.057326320735171105, -0.098654044879250974, -0.021150583208668992, -0.038971057948257913, -0.051954652796451138, -0.065697052369735887, -0.076668618468381175, 0.057536826222298318, 0.0059026131536024304, -0.046203872539273341, -0.082611420120622253, -0.084852191816498154, -0.079141430325910062, -0.097004168435828902, -0.076062125522098539, -0.06316389153647553, -0.083320929461625837, -0.057460537409920194, 0.02780118613240987, -0.018767946276596975, -0.029691882937965902, -0.014540521259465585, 0.08390634737694766, 0.20739444418621977, 0.046700493845665721, -0.060571735762272969, -0.1303813417107452, -0.13805261674986721, -0.12358535758970328, 0.0074710539580880447, -0.022238309187360118, -0.0067832182121356881, 0.00050856838356390724, 0.12335224504872636, 0.15023440850791586, 0.24255876784390559, 0.13265122710423893, -0.036349215955504527, -0.096342261434848489, -0.12379973942082877, -0.005922294079732774, 0.0092528719228638871, -0.0086414366404968038, 0.014911679170252864, -0.0069709626853085849, 0.062192115575895698, 0.048857235728622855, 0.099736221902574501, 0.10382748525934579, -0.0017267232813016238, -0.03337998864511238, -0.041015759215952706, 0.028074948889879575, -0.024175373112944334, 0.00037851506203986224, 0.028290086601225291, -0.017177690879414606, 0.012211197073898714, 0.021090624041023867, 0.04880110436342628, 0.058893006766919061, 0.041186307677804096, -0.050228037757938743, -0.06358869101157405, -0.01627885622405395, -0.0047556909859505087, 0.019166267525767756, -0.0042859855426942489, 0.072221293664227526, 0.027667668809319687, 0.0076072348731966626, 0.046251642681222054, 0.045327516936598013, -0.058087271467788915, -0.052568654253287897, -0.044762413503640928, -0.023155518065321151, -0.00017763235014638958, 0.052359997711985393, 0.017613369441475152, 0.026754240173532909, -0.0071592410268532612, 0.021450091526662492, 0.026061341438602878], 
	        [0.074443033622211968, 0.025009703449449541, -0.0072387396885091188, -0.034581203239581096, 0.0075069226962646007, 0.05053220778206742, 0.097728950382035856, 0.10515405254550375, -0.0020885631160830892, -0.06460650708474773, -0.071900877008339387, 0.062709555161575961, 0.04810964818959447, -0.0061288197958455914, -0.048707571007934714, -0.028878035144916103, 0.049283029611296138, 0.10301464073332151, 0.091885368660922062, 0.1083066909121139, -0.0069201860463068421, -0.0710800467482154, -0.032385403501740219, -0.041456597157549895, -0.037318284584525352, -0.037271263481650524, -0.04033581670492567, -0.030542208455988901, 0.027846343886639854, 0.051125764403077464, 0.039457863125580993, 0.061533816212355034, -0.0088597136956959643, -0.058002594376894451, -0.036151038770433672, -0.039853560057399352, -0.048559742972093256, -0.05876298366017621, -0.083101870117629206, -0.091875530060523458, -0.077266837651363607, 0.00086206636286371985, 0.064567560492729381, 0.05176416503907634, -0.08735727608117326, -0.053385067235642, -0.019429217609104946, -0.023415415744384521, -0.085630336992695857, -0.12611138326972099, -0.086691614144378967, -0.12449403321207964, -0.05512595439100107, 0.030267444104458113, 0.083602405077763398, -0.12583781900425739, -0.091278147423601561, -0.073530346048646777, -0.085045520153049808, 0.011889706660064834, 0.13738456218349074, 0.12691757918372121, -0.020511658061573332, -0.083331527006269501, -0.045688290860109199, 0.094721631783419011, -0.1176819000585845, -0.11560656474484407, -0.060549525031994025, 0.081984888033411141, 0.1704420734813879, 0.11965727243025565, 0.11254484229099559, 0.074741052413934445, -0.025737622919062741, -0.033587219072488843, 0.03411352154081515, 0.051552692766032665, -0.020222946025836006, 0.045690451059582811, 0.056071133353337008, 0.020997592772981258, 0.044561510792265002, 0.02939148849213119, 0.026725272806523891, 0.013325176508616088, -0.019772518292927338, 0.0027475572519997937, 0.12423204721233166, 0.045549710745386038, 0.018947387510806379, 0.0057239875049261008, -0.0058699208305394712, 0.0050369550657840267, 0.043724054901299908, 0.019509400602205587, -0.0018887858002489578, -0.0096177381092612257, -0.013199600334816992, 0.10143636127977371, 0.08518214265041664, -0.013319980029247946, 0.0029189074659387582, 0.010087593201327683, 0.009493285904375974, 0.017930356539244602, 0.031406637685000433, 0.011733720402003947, -0.050901070261947852, -0.015735781911257421, 0.029231279797781562, 0.048511610011102664, 0.013899380735429394, -0.031157761675669398, -0.040662087603105253, -0.0083011423756094577, 0.043045372058056516, -0.01096803936953996, -0.0012438578375955772, -0.022626520337825511, -0.11765611182461798], 
	        [-0.039873480685186327, 0.00012184835774546317, 0.018432499523696314, -0.06030489971984803, 0.014643208225874137, 0.012981315846513394, -0.0070294048340999865, -0.055624566982403527, -0.011913096749220649, 0.0084124976996370008, 0.010420634562858239, 0.014232327032235419, 0.0046832226936113219, 0.032819982634319213, 0.01320726418626594, -0.023533808891275709, -0.011404581263416494, -0.042582175203416311, -0.018915023456131434, -0.049511208703627144, -0.01836613958153846, -0.0058433446262533108, 0.02231630230741475, 0.021334764569425978, 0.034666291388462299, 0.060010301185060864, -0.034246065227552185, -0.047005499650124551, -0.047921871802546437, -0.041048831403235529, -0.026713641204057077, -0.038789996127014961, -0.018331240491325174, 0.037976867862023977, 0.028813877664190697, 0.019770359402909235, 0.03728944535318747, -0.066962988411517793, -0.10295356437958489, -0.090035338267466014, -0.060415802785235138, -0.030821512733484054, 0.02401335406847712, -0.023615740770755671, 0.014617912689912915, 0.0051973456583133126, -0.0053408769578060511, 0.019716826597634293, -0.078766904193264292, -0.029296548169388054, -0.023280430828030781, -0.014403388911157673, -0.0092263628747704454, -0.033409036299127719, -0.020726200729135634, -0.035931925994181074, -0.023010380673947554, -0.039252395604041306, -0.016760733401697973, 0.053608280303007586, 0.13329950551225564, 0.16489717632675976, 0.090281268337484705, 0.045229665505339148, 0.017404381514372763, 0.013597897839994186, -0.047297713743641646, -0.067622094327431645, -0.027195636559411811, 0.065506393613748479, 0.02232560477300298, 0.046885888199241804, 0.043068894433184998, 0.12018260070272857, 0.084302508484961486, 0.02067188016168707, 0.020184511766629731, -0.071050894359262914, -0.079541739094958583, -0.016269072364149793, 0.033354715485268173, 0.028706024706301091, -0.012011749840849373, -0.015402866346903674, 0.031358471867631604, 0.10476667408686299, 0.0025587486589462027, 0.02110857377048439, -0.039307670372500075, -0.093767551228405063, -0.022120949123226506, 0.023658016755843218, 0.001624116197708074, 0.011496266326477288, -0.039666836714535372, 0.010910001919740123, 0.063815810827050498, 0.062964749256176525, 0.011666021976556945, -0.024049027553408542, -0.0027908618863511994, -0.053241603898009714, -0.014763231808325047, -0.0095880408564158331, -0.031086972870322235, -0.030644620324520727, 0.010272461123314607, 0.03748199758443737, 0.060317495169656093, 0.024907320438576977, -0.045599623540660161, -0.020357685838190937, -0.062106166980994727, 0.036986556057447252, -0.038453069856899391, -0.044856589426634154, -0.034310651524162267, -0.011783723308224799, 0.018762824804810944, 0.061657489154879043, 0.040804009950206069], 
	        [-0.030967376640442579, -0.034704706474157576, -0.030029036584246833, -0.073209132466448931, -0.048949076143639865, -0.038640662410442561, 0.051474764052445811, 0.074236855663231974, 0.11134675135754504, 0.076704056724054892, 0.047486303599635876, -0.068455613733398521, -0.035128511996496081, -0.0025321681540545343, -0.057133697514561765, -0.053440600419679241, 0.017148650385363479, 0.052110170662047414, 0.058782183168318736, 0.047056961446036369, 0.040322325256064898, 0.0078030024380692647, -0.05608339456723066, -0.04684682593449583, -0.0065577385795995147, 0.015471094977111979, 0.0066614780906229729, 0.052620395249402485, 0.00019300929351519225, 0.077547069508788119, 0.050313782394810311, -0.024569188095571692, 0.034662886943856788, -0.0044029950458541103, -0.038893398080935566, 0.018694283839760885, 0.035428018363409447, 0.060685907655044814, 0.0587413540716437, 0.0014872430743369924, -0.045756325846127051, -0.047944642008308877, -0.09281792081715598, -0.021043716683786656, 0.007562208390103603, 0.0087802886352499401, 0.024402794551533658, -0.01824493391613341, 0.0056819486787151258, -0.122005902409504, -0.11277710237979818, -0.054719494073167244, -0.090166889383778037, -0.032774893151098286, -0.079640484686983273, -0.0081433425803733028, 0.036415554732213973, -0.029719246379058512, -0.08343173036099473, -0.097009718713933338, -0.078382336396330896, -0.061852431233739499, -0.023645551992256014, -0.040447890302015635, -0.078556226205249061, -0.035218950640358182, -0.027448566314184852, -0.0024221651587159679, -0.0086513582329476105, -0.069055941187435799, -0.046263515682347614, -0.026683587106414781, 0.0085151284734774242, 0.01510527176030271, 0.031314100341752416, 0.036056075842148129, 0.025591220637012156, 0.0051353834527485057, -0.023005349498057173, 0.02104724020668694, -0.014202301085685001, -0.043601992702429357, 0.014083946209181006, 0.047988366041463205, 0.0040768949537646898, 0.040069615686237701, 0.031368092441017473, 0.041401907932681482, 0.0083542366285301942, 0.053523984896854969, 0.038346576189893421, -0.0075354880301602006, 0.03383654934661684, 0.037701959013775557, 0.023170719193185016, 0.00063874518894980505, 0.022456779814042073, 0.058804006814905982, 0.033465949399417834, 0.011933873490689997, -0.0031202988762389951, 0.016068746672777481, 0.037621893043980711, -0.010942651485316122, 0.046299383766535571, -0.0027637682590763851, 4.2316925059140975e-06, -0.0038944346280027366, 0.0096576323773187346, -0.01850966706940272, -0.054006078059137416, 0.017238219091326883, 0.0091596910151990184, 0.028996863874777658, 0.033952601882988653, 0.070753339834244089, 0.0037809506474898429, 0.027199587204016329, 0.0091419719045753873, 0.027115188408680799, 0.012709694003767591], 
	        [-0.059221606655608681, -0.0013807397121916331, 0.027612645957779638, 0.10526838045136652, 0.056162190642178922, 0.063381996846630956, 0.0052813907213748162, 0.022701227707487698, 0.023071399548784132, 0.011640586008089752, 0.037100581562280036, -0.096537301671241846, -0.037974704225794617, 0.00038732579738916815, 0.050625050016267568, 0.065086729085677475, 0.0010273202640978113, 0.01030282761678826, 0.0050327500226482608, 0.050959342703142202, 0.053161832471559013, 0.03088817116176755, -0.021359024956780739, -0.030126662636484423, 0.014336380788901357, 0.044081582390044685, 0.045143284913980009, 0.01394262266053127, -0.074479563024112405, -0.021194650491958511, 0.010166296540795764, 0.028011887127611046, -0.022728767470732637, -0.033769750654749603, 0.0042313533530659725, 0.022686514054856353, 0.046542045913330762, 0.11310013896650321, -0.0045051511040681974, 0.072383588936866153, 0.037891919978813249, 0.044639985453488233, 0.053304796345090825, 0.055297501218708925, -0.025259737537897203, 0.023523250437604698, 0.029550788938781603, -0.057103923688581644, -0.037228050464029057, -0.040334547113759743, -0.066002394454861085, 0.051805877339979295, 0.09092132214492693, 0.015823331139374411, -0.038665412143877739, 0.0092906515574926254, -0.028826426019922906, -0.074980989084462088, -0.05787442193814954, -0.10795622255952429, -0.046546338514420166, -0.11181899441749669, -0.10192418752175381, -0.085702414165345311, -0.093905868491930569, -0.14398389568329137, -0.056828585605448137, -0.06626357512710776, -0.071883231030884079, -0.05541027253169447, -0.0092822545503814802, 0.0018363519548447033, -0.0066183382174312272, -0.011825162483750359, -0.092520252931136554, -0.088262059348965707, 0.0069521222062057519, -0.025393087237703255, -0.0063946991298149333, -0.043361744350810506, -0.02217358952694239, 0.0077218815463931945, -0.025334117749954241, -0.0083152640572634468, 0.037370584638286568, 0.012798906233440717, 0.015685495564438989, -0.0096592020340569573, -0.0057848888032873691, -0.010756955350811635, 0.017757324648215944, 0.044529547669743041, 0.0041941047626251615, 0.054645185961794018, 0.039709597938149141, 0.033910773481424995, 0.065271769100368901, 0.034889848272914054, 0.095387104413498985, 0.012473593139358034, -0.0089935075779601324, 0.044380357060880754, 0.030765480187302234, 0.018886724239982972, 0.031787912403243176, 0.031673790743440955, 0.020196643029900062, -0.0012983094411241694, 0.046204156701180166, 0.043616528938776683, 0.052279675166504697, 0.035528670172807794, 0.048752827422166391, -0.010956478364744832, -0.010948307255129602, 0.0023335073954288315, 0.00082619959707538188, -0.028699221681917506, 0.014221929018802294, -0.0098068806836790964, -0.035272762342824268], 
	        [0.062946872449031063, 0.064519394879077666, 0.032897359514565301, -0.045711891879663097, 0.020599391374711062, 0.063655199236485299, 0.014615769796257505, -0.027440870743054617, 0.035616222562863675, 0.0094036093827168515, 0.056507446197265193, 0.031272529009901337, -0.011034554575282393, 0.038887056697409605, -0.021343232536083438, -0.016082974355130925, 0.03398009131937528, 0.052626400504158947, -0.02529516749703499, -0.026548720706405481, 0.030680991925506617, 0.027583071986928488, 0.080966719325337916, 0.035373199613146035, 0.034900256392934439, -0.012798813313152833, 0.04319156099995615, 0.022703220357838422, 0.050265373853632632, 0.0003437400231437425, -0.012567197236507482, 0.073429633782059245, 0.0065301063919971924, 0.017281768786973933, 0.049276004779088722, -0.02725340162513791, -0.0086520578662400288, 0.047527074820523915, 0.17861942818684309, 0.086809068021657401, -0.019355178240588661, -0.041870304853726628, -0.055304753608100707, 0.078290837231694221, -0.12690621836570407, -0.096279890589654596, -0.092541121932859904, -0.10216764911335079, -0.041913347291723559, -0.0061568695399335446, -0.02394181893475637, -0.05181154571828913, -0.12530688042526772, -0.097862179590048642, -0.10634083467860724, -0.088741745636640959, -0.060958836535120312, -0.031993056376924268, -0.036846220231738974, -0.092274010347915825, -0.11353320653734295, -0.036146695566072848, 0.011596830638808633, -0.013143670931630894, -0.063917360565445863, -0.11042459480083613, -0.012415575911984202, -0.061286683792012901, -0.019683898333121175, -0.02351836883559362, -0.0066523400160384549, -0.014484754457127935, 0.018028020927321566, 0.008084275012827935, 0.036972370716564971, -0.018618144071885362, -0.10924354613828609, 0.030523206341700047, 0.01298880090453846, 0.040120142620378607, 0.061496119916373056, 0.048449961530989391, 0.01921366891131086, 0.021510068544701624, 0.07209312331150311, 0.037410161917291698, 0.049160122975013168, -0.013141343062868835, 0.060642537004008013, 0.022194682981879085, 0.05129865380619493, 0.013217705879822975, 0.041765969490498975, 0.010615751276552232, -0.010207688567782834, -0.00057559828671693847, 0.076314244622539648, 0.017510356925100834, 0.060847396478783206, 0.03300347337813607, 0.048984734512022551, -0.0064822252096019221, -0.0021063249759751858, 0.010622816122664164, 0.028538830399705187, 0.028618408701009158, -0.023485260352655107, -0.0028276174189336839, 0.044105954184393642, 0.022574759621766721, -0.025473428596684167, 0.026401062552437127, -0.029859950686759645, -0.035148145207273412, -0.028004242193563095, -0.010874515898578971, -0.02520644976850539, -0.031472616887933583, -0.013822064554071298, -0.01097289405425797, 0.076092357186882495], 
	        [0.03690386612248002, 0.056002218089369685, -0.010951719270400923, 0.040331097511643155, -0.0037441455323561496, 0.049112125114183058, 0.0079169665374183087, 0.11344386642727713, 0.0007563312264983052, -0.037482571931358309, -0.018735772189985789, 0.011744945269622539, 0.036505508708255696, 0.053399713960056966, 0.023086150106013142, 0.0044152509684453195, -0.0036748654077677217, 0.049656981135381167, 0.0045969535450092955, 0.040392794162983123, -0.029097892231179194, -0.074893865276321803, 0.0016705057712694963, -0.032135738557994634, 0.036750173986759005, 0.032029774955991561, -0.025110352420147287, 0.022110635776293401, -0.011118779729623884, 0.027123502587836187, 0.061095462079700222, -0.024783808630182078, -0.059955925032526225, 0.013711673076898898, 0.036557533368247498, 0.084110261886928162, 0.055950231294746772, -0.020007452447925414, 0.020788588159875922, 0.049865734304206946, 0.039021923151225379, 0.088845664746401071, 0.012344115511745107, -0.05538843672808838, -0.0283890960033647, 0.025833332510384673, 0.10641983969927944, 0.052722918301459212, -0.05478356057464559, -0.10190284716601143, -0.049794325260415453, -0.0069085612468734042, 0.018752575433158634, 0.0082097852631209702, 0.013268033828822395, -0.18180783799950825, -0.12595865108667029, -0.094587062767344646, -0.027564647202767342, -0.064339970972324884, -0.091630782859498369, -0.092278488340619053, -0.075570027119632732, -0.11647913534085745, 0.0033701825247711877, 0.029872248721253027, -0.049119870012074435, -0.10950490287540141, -0.082985533821943222, -0.020757266879069626, 0.032839871737627147, 0.027498688090949394, -0.051265177840992882, -0.028726904129193459, -0.074362520404752469, -0.078828379945006022, -0.048211245977380933, 0.024174951415566678, 0.0074472807679010818, -0.0074232491688529523, -0.00077866185976915858, 0.056674802683761974, 0.022479560933966962, -0.022053321065962445, -0.025989291569709812, 0.0064102606195954315, -0.020235352690214578, -0.064838171573315492, 0.081539627065815912, 0.050559787196516853, 0.027640931483737141, 0.056668491330416827, 0.031151110583386293, 0.039877476311591838, 0.032443819125262119, 0.042982667461244774, -0.0018215713348507297, 0.0070637700109989279, -0.0058429795351756103, 0.067603762059298383, 0.03091253675538988, 0.028071888777783896, -0.0010850231199715735, 0.015534670537972986, 0.043687190194000733, 0.01938400318015672, 0.032939688927880212, 0.057370488644266582, 0.0076083295877509421, 0.0044986928101548411, -0.011421955766557471, -0.029081272069140879, -0.0036106413708782165, -0.0032691409082095807, -0.063551586196383944, -0.022937264529547606, 0.0091467010626821721, -0.011390797309113472, 0.068187506046327936, 0.003884385505889279, 0.071448625051746401], 
	        [0.093670053378816731, -0.0060185803724412124, 0.064975253447979997, 0.057204813928574239, 0.032039357303312588, 0.017360690928795997, -0.054310388367495258, -0.074304010831156467, -0.022133608826072002, -0.03441434222392329, 0.0044162963247191128, 0.028938348016603214, 0.01658488166499885, 0.025525405954675534, 0.035893961967071938, 0.0076746895655852576, -0.0019368459518004297, 0.0066707535959328046, -0.1042360605814506, -0.00055454840969697966, 0.0022380826663202374, -0.02840948162941799, -0.004017714090244609, -0.013989051801159828, 0.02542809328073873, 0.064148365472184235, 0.077485765766674375, 0.034007352893400962, 0.046771269374739369, 0.054056001025575479, -0.068291615724358462, -0.01191564128605152, -0.08236908091325304, -0.034026953075964254, -0.093926696408503804, -0.028299026068272781, -0.083187856060272347, 0.0068670213408899561, 0.07996019523365458, 0.063771902655339469, 0.00087634234802598868, 0.020691801513151017, -0.012739227946535911, -0.018539467931270818, -0.082159033883173249, -0.035509269486481018, -0.0903794995968909, -0.072582351048290333, -0.10221116757608581, -0.10665056526245895, 0.00090250733424238061, 0.015334595491633053, 0.046227730069698332, 0.038103240152997334, -0.0062461221580594889, -0.06724561414366495, -0.053325522122090241, -0.0029145163841420574, -0.055345741892996264, -0.055246137408700977, -0.11556942735569369, -0.12678748176917243, -0.018650402834112373, 0.0201115675159311, 0.0072374544322631939, 0.013539302016072579, 0.039109407585483882, 0.051641698907963052, 0.0078965365952058768, 0.023870730531144614, -0.017458058805458504, 0.018892420656760625, -0.10504680212429973, -0.089680004128360968, -0.04272524613046922, 0.026724916448450958, 0.011635965581891422, 0.084889133812557832, 0.034194689506569786, 0.065857255458405553, 0.0042427078937929356, -0.012401464228490738, 0.042722865239520375, 0.033509236615387683, -0.0086452874579218859, -0.091769778804805302, 0.020750157767451382, 0.01987667311893981, 0.010694698759597054, 0.047156458758485842, 0.044111484618501104, -0.014434725200227233, 0.071373855704184225, 0.03475623227161978, 0.040578493255194692, -0.0071662870654205096, 0.025407664409730447, 0.043339417631733802, 0.010480242779609582, -0.0087307063681051136, -0.013411411822995711, -0.020394509035250141, 0.0060121542292144725, 0.024188238197290803, 0.041668193822485079, 0.041183226601004416, 0.10243115564821167, -0.02940584456446451, 0.0031099245285817669, 0.0030508999908164854, -0.017382195539308282, 0.0048263750639246927, -0.026781565476663695, 0.011942148044968376, 0.0024678281518802359, 0.040929003265524629, 0.080622599957161575, 0.029178579118654943, 0.043038714976740611, 0.0055501733506574946, 0.00027909537625575576], 
	        [-0.033397311394149677, 0.0096415007713644973, -0.018236744035314625, -0.034138584815056695, -0.0024438916753326198, 0.0055087071850375355, -0.0026268037119103198, -0.028241098838151658, 0.0052159942036530127, -0.021235364030436632, -0.047073948370721506, -0.026121704506604584, -0.027138348751118566, -0.048107435408362653, -0.040211279822578397, -0.030102378969085283, -0.0032792712208641666, 0.059678613392050002, 0.006758383300518157, 0.030667242997798105, 0.0095436115343644611, -0.016919082533258429, 0.0038233095813847151, -0.058995625065273824, -0.030890606711754587, -0.058149589871913064, -0.0815351815818076, -0.0063579538770199284, -0.017080813200946385, 0.043337478406891949, 0.062983597436613734, 0.040401309594868401, 0.0072034023998875183, 0.011592685433827972, -0.0033021456500918062, -0.057816788607124699, -0.037812512707325552, -0.12425681152290456, -0.10985738895947982, -0.093812839880628898, 0.065001290338761564, 0.034843561028987141, 0.056616004034855671, -0.014925007654415651, -0.021164736244188381, -0.0032162052770800531, -0.012309755363306994, -0.017827196918306518, 0.035551161867388673, -0.07046756271563373, -0.034864456303405046, -0.017196442705869938, 0.02847927116818913, -0.022806581184283581, 0.03213417823424855, 0.026469237488508546, 0.009589558238125101, 0.035119287178089001, 0.13550727924378436, 0.13688661973317756, 0.16247997796144609, 0.015875158167285394, -0.020831151874117201, -0.0011812318416458828, -0.019841048216886314, -0.088082464896673471, 0.030457768879803171, 0.026063097480707995, 0.047026463061375465, 0.070569136656278841, 0.062916792803278332, 0.049798812429405107, 0.085485860229359792, 0.035141696932625741, -0.020167444245680122, -0.061685159646736681, -0.092847554814415742, -0.0015896852645350262, 0.016608882932934957, 0.055001587269276467, 0.070867931570141707, 0.013234850523530295, -0.00082083705696721354, 0.038004857877911483, 0.07357330886595341, -0.035371927316790286, -0.031697507137062611, -0.086248516693940486, 0.010390223430695129, 0.020133865530716527, 0.013595826448211168, 0.055294702876020299, 0.0095627226336793825, -0.021797178139167303, -0.0091913269986637625, 0.042724178575335753, 0.02896574564861093, -0.04832930579382462, -0.097000076388255058, -0.035392090036565821, -0.0091230528722667514, 0.047734194414938147, 0.024899519254075436, 0.040201783336123773, -0.042437436186437194, -0.0088865115923605353, 0.0034760730494084874, -0.012834489181082792, -0.011082107946660119, -0.086373612626070725, 0.010906720579881624, 0.001585372406144106, 0.059934049355052657, 0.039390631946712135, 0.025936130645470831, 0.018352465543086088, -0.066654985053579988, -0.036968952314477735, 3.6890828317398539e-05, -0.037622268779505898, -0.087738993271721605], 
	        [-0.0096923145306643255, -0.014831123980443256, -0.020109046114375438, -0.041529783531830268, -0.079112823290570247, -0.028439541923334352, -0.047215277761511222, 0.017919873457542868, -0.043730620825476289, -0.0083077673092849316, 0.0080637615090816683, -0.042847844269627344, 0.015732582480551337, -0.035877042331939335, -0.020274620631426151, 0.0060017334212957209, -0.011038427925582694, -0.0079321859154538772, 0.0024669467939925456, -0.047174751648789807, 0.019484888947581012, 0.038912158226446558, 0.039176172588516966, 0.0053797578511889238, 0.01139452493864973, 0.022134514065384248, 0.10262246569682075, 0.060645448427255277, -0.0049047335544548376, -0.026337548147820675, -0.00031049715236153297, 0.021471089177500111, -0.02913111856188328, 0.049020954146217169, 0.04824653180085528, 0.087540872822502711, 0.07299558540439087, 0.019711133472069112, 0.053346275999322679, 0.068713013463729239, 0.0089235415332704765, -0.0091036040048159544, 0.0059129844090943101, -0.012742345396119917, 0.056214606413909123, 0.063790565651105968, -0.020641135671904988, -0.030946926450396303, -0.016711976557631042, 0.1127244564225961, 0.02689697887910851, -0.013567479905524482, -0.017090058647780196, 0.01477668396540264, -0.010781920436714542, -0.006922091337546267, -0.089428459457285198, -0.067232570801827068, -0.026910735478631764, 0.035336793970009189, 0.16956999523533778, -0.0065457838988597361, -0.024077365950438537, 0.032166605250999306, -0.017459200412506121, -0.040088844438940743, -0.099301197361124693, -0.011984969849644441, -0.027641332988394961, 0.012259320892963398, 0.099469618921912001, 0.030178783959567166, 0.017806737961083313, -0.031243892294941327, 0.036952968809518559, -0.062248228689263954, -0.018966613344436702, -0.066056215647809571, -0.02680077856103967, -0.012533495449249166, 0.024584778032468828, 0.056249746142491924, 0.041206463201368705, -0.010337287195679248, -0.044756156557245824, -0.072391192005918537, -0.0056600512539719122, -0.022191532906063322, -0.02597985228049178, -0.0048569317681961439, 0.0022456495424232501, 0.048041845230600719, 0.021878224718166694, -0.031093682711296713, 0.03107864582201561, 0.028619968620320131, -0.059947445075684995, 0.016801646203229784, -0.0025822067852190656, 0.084438821665531974, -0.003253904863717641, 0.02175579697998456, 0.044396143599607973, -0.0081787327528522191, 0.04342802310153146, -0.012815929012254187, 0.014790808529243901, -0.028622217225797268, -0.048854772240751264, -0.035404776408354405, 0.070880645278505183, 0.054724662067758528, 0.086068694846379121, 0.049869516112302004, 0.024134618019859611, 0.016045127809092008, 0.021408152684806558, -0.0019594348922353459, -0.052756609552716119, -0.046484303325115398, -0.068062813120118207], 
	        [-0.044331925230770723, -0.054329522119882984, -0.051769461081186574, -0.01525353279808098, -0.01070122111548966, 0.0092804570085843405, -0.0062410209171876582, 0.020071586960402881, 0.063349260545734795, -0.04992151146932073, -0.024847935737445589, 0.061077328397192293, 0.073126703765815121, 0.034270104298964765, 0.035888286964653064, 0.065558812412295553, 0.0050893801576369253, -0.01742526677567887, 0.06410303374113939, 0.063690998960531819, 0.011936936642071773, 0.0065558893104545879, 0.059351618349500423, 0.036170614252957374, 0.073144876020142385, 0.043276296735218094, -0.0077362104397021465, -0.022748848048502378, 0.004668960540261835, -0.00069002660498715396, 0.063939712901835977, -0.014966710082811807, 0.0030727592791528514, 0.026662644906728487, 0.052820346942979893, 0.017109036507216773, -0.022408542987520336, -0.087084724994147211, -0.097569765420874172, 0.021721228084129754, 0.051712419939002871, 0.032756768677244273, 0.017819938585971133, -0.037825552779906096, -0.099906582374084577, -0.11007916981172988, -0.063039969832338297, -0.11065720406183299, -0.056463971331915969, 0.026810997895988217, 0.075619829451265996, 0.073184027699837118, 0.035501377120659039, -0.023904618994720753, -0.017844665146339908, -0.11756514198915489, -0.12168288991626966, -0.083114279850997466, -0.034920888410994, 0.046766450072332821, 0.058773833741353781, 0.010496365445282875, -0.0022130497808088385, 0.051099528389418059, 0.024774714859440425, 0.023471290407304626, 0.015631876716462951, 0.017970346390513474, 0.0019335540535132985, 0.03051462142073259, -0.031110061550176205, 0.03360548749067617, 0.036258212592403839, -0.022201080422089837, -0.023002827294496608, 0.014758321300040728, -0.0070368058672472117, 0.11790263516593479, 0.049474341493852388, 0.062413173309873948, 0.052777269288969954, 0.0094326378468209612, 0.032163792810796982, -0.0071375680551991191, 0.0032748797229581496, 0.0067896199680393572, 0.022973239078915367, -0.030044038850916659, 0.095054792203179583, 0.077918278809296693, 0.025170796867169457, 0.03248633395739102, 0.00548093487382893, 0.046288431253225307, -0.0048346651023808999, 0.010140951369667767, 0.0064050414683687936, -0.016192674375299247, -0.020769896639595678, 0.071543155267954142, 0.041811635752456604, -0.0011513813928812448, -0.0069609227018348346, 0.016359548418687996, 0.025002761420305327, 0.02055238314967053, -0.0015891153508810953, 0.036688265432544012, -0.059254810876512506, -0.004524146766604867, -0.022764896844005511, 0.055697322831434269, 0.058835090349322952, -0.017695954014236001, 0.01434475115987981, -0.020605598415603534, 0.021010015372295208, -0.022474770741166539, -0.040296790452836906, -0.040551682538183538, -0.036579658592001969], 
	        [0.048679672604873575, -0.0052210780917486968, 0.011189809961728723, -0.014770773614183955, -0.034142207536203256, -0.028004372616342227, 0.0059493580101942483, 0.015102059175930433, 0.019900835917708519, 0.039960819331958518, 0.0038194214559740605, 0.01388991934048571, 0.075502995650847393, 0.05989103883686564, 0.075512404372436573, 0.073756282062729772, 0.10697289779941345, 0.068740762469562872, 0.048031325115771309, 0.042366249770111879, -4.2026778606093357e-05, -0.012109444919293957, -0.011318629446975792, -0.037381626729477938, -0.021548420500173249, 0.018481632817077147, -0.0052013341004672684, 0.027476505756756441, -0.013858276037494007, 0.043728377691453817, -0.02503235093554558, -0.029686717094650691, -0.019073492339460648, 0.033491515961355481, -0.065963899461171427, -0.062341635557177519, -0.075624328092431956, -0.053585585183758444, -0.02877361255805902, 0.0066218070173488103, -0.10035769919352369, -0.089046460941984568, -0.046139804006717938, 0.07297541439744247, 0.08725084363158328, 0.045168092371441648, -0.05333664579595656, -0.082409439250664893, -0.091444433373020814, -0.074425623111224221, -0.092126329411898994, -0.037674636051740117, -0.0056525304036601151, 0.067513154505640993, 0.093934210469869675, 0.0092896691237717884, 0.018516434326696123, 0.037297581799338571, -0.021567249747191534, -0.034818877231227827, -0.02178280374647603, -0.02580882232156104, -0.036853163117586477, 0.005007242741758529, -0.0054865350633394733, 0.03688895314986719, 0.02030363893313307, 0.062349708701591948, 0.038517231153257302, 0.067307645991564954, 0.058616348298225311, -0.0042177704428246199, 0.054673040661478024, 0.039230731169713394, 0.031392491178710777, 0.043919434454236447, 0.043292679240196676, 0.01880512733348403, 0.017382645623532596, 0.059661624010023243, 0.033698675096640159, 0.013341888531181467, 0.08421015245705174, 0.025430986838139963, 0.012904413846026745, 0.065431122065089942, 0.011197289986359183, 0.029135622794168346, 0.062540987885654917, 0.045382776129875506, -0.0053462603961966226, -0.017266787058448405, 0.020420174075574692, 0.013123043389498143, 0.01525904905961481, -0.018730258477720974, 0.023824284687915143, 0.052818399981128895, 0.015447226033022343, -0.012489602024893638, 0.014683734340722451, -0.02685260219002731, 0.028989118420292514, -0.0048952379910385084, 0.024941536558213226, 0.080074825915833162, 0.013282727442137699, -0.030419960916935621, -0.0077058669293919302, 0.0057615039328642731, -0.022997491985162988, -0.031813252703541905, -0.0074071331247387365, 0.0074685762164737393, 0.066651669608706721, -0.043189594128709249, 0.0087486094318929737, 0.035607481241798619, 0.0093449129697469185, -0.060325944063403136, -0.02989706486831599], 
	        [-0.021246880546086595, -0.022203836487912819, 0.086827201278774843, -0.025228269953020035, 0.046971762650786793, -0.032032705567453051, -0.018784965671998312, -0.004315941436901353, -0.0418268952943677, -0.06928924256853522, -0.0081666516254654542, -0.017438229004257164, -0.024335471310471764, 0.028654380266214648, 0.072066491882920122, 0.016590540091147674, 0.024633229035089028, 0.078139556365993512, 0.056622200409004196, 0.037502807115330446, 0.037840229470096992, 0.032000001430608604, 0.013106472326739116, 0.012369223564270927, -0.028705902974894969, 0.0050659301606566509, 0.013853418541047425, 0.00055953040940459609, 0.020322571781100932, 0.07527603584001831, 0.091912646107956533, 0.11098583412431406, 0.078216838723305357, 0.015546123816145365, -0.01174475399733392, 0.051737996061461511, -0.012734123174444889, 0.016768985632801714, -0.044365898602312492, -0.099553508533813909, -0.050100281868429075, -0.0572477447691047, 0.016222179759918118, 0.067599657169812671, -0.008648050879736989, -0.0032868833097521172, 0.0085922588825274523, 0.046767940575399347, 0.072793826165235873, 0.045294967050798711, -0.084825295102879616, -0.14860512013508548, -0.051316060883006345, -0.12479434422523886, -0.085078856704692979, -0.0057128248462955805, 0.044162552063783153, -0.001048023139082116, 0.030855043319812047, 0.035139310135952784, 0.072277327757524351, 0.053917648452753389, -0.044671527799533012, -0.082684884460253502, -0.10599899450799834, -0.15447137644238773, -0.011133194850090913, 0.028927718717327938, 0.0038563782177809536, 0.016247602026169011, 0.017415917794260313, -0.021407239152637751, 0.026964006691972034, 0.028130757592115849, 0.025157803866096017, 0.037924085124599397, -0.0046849643873905084, -0.027697413203631536, -0.041378992383391267, 0.0087612328882413319, 0.0052052300046328374, 0.043900410523183886, 0.077610211778951319, 0.023415755123284865, 0.060860467661889836, 0.035574343781129072, 0.071927577630225378, 0.064070926820927313, 0.013357966646117945, -0.048365636178152809, 0.029793021490433041, 0.005225453074711478, 0.001772380719733067, 0.043271021300702546, 0.061871883282456325, 0.060250041239335972, 0.0059220775592172988, 0.067275053929414422, 0.10149603554983715, -0.030661903793952457, 0.00089428604746767844, -0.057645311311752261, 0.033294846298777651, 0.024005678533927544, 0.0049160862915328327, -0.018549226060485483, 0.028088385775127147, 0.023382362593578041, 0.034065125172518744, 0.07678838837073973, -0.057670084152690565, -0.034527649268692978, 0.021760161147630741, -0.072333662591223591, -0.00053618118175239454, 0.029546492159811099, 0.0043528145210185842, 0.0050096626752825398, 0.045672332663587202, 0.027025414018034634, 0.047574909566606413], 
	        [8.4608016445507188e-05, -0.00051458603662822393, -0.00065583344160838331, 0.00020678855120534164, -0.0011087422000772406, 1.7282608213937956e-05, -0.00069139299457388927, -0.00067753460732458931, 7.4613346472338082e-06, -0.00070526584292512906, 0.00036510757807054156, -0.00022612583636142519, 0.00083733124736023318, -0.00038556424752306945, -0.00020677490024442052, 0.00010703864033769633, 0.00015849441156012833, -0.00023178848590595102, -0.00023816000343533997, -0.000420628080187814, -0.00035892451039670759, -0.0010410723256383952, -0.00070994799374692746, 0.0007230031202940905, -0.00024735560793927303, 0.0004891872672126707, 0.00024923784651577352, 0.00060668980402729254, 0.0014982106812944096, 0.00053619751642124819, 0.00050086941012989633, 0.00089806877848291194, 0.00023875283911756195, 0.0001569025840717983, -5.4315342210856099e-05, 0.00056173407996628483, -0.00015464198944174475, 0.0003080961595964592, 0.0010477498266872332, 0.0005403071450221222, 0.0020027631503172446, 0.00073696212701762631, 0.00041837758978503781, 0.0011534221243659493, -0.0014158435817800425, -1.73851858713929e-05, -0.00033269545836868853, 0.00025908994851942674, -6.7895175314192091e-05, 0.0020025402967875014, -0.00060120961823892718, -0.00063728772747552453, 0.00088528834369269727, 0.00051385231712379464, 0.00080076929798790497, -0.00021374130033396943, -0.00012763782981460581, -0.00032299201148121293, -5.5463761258908728e-05, -0.00038413195736432953, 0.00098095746371240633, 0.0016769261261450272, -0.0002368271084003809, -0.00047131327166750892, -0.0011833841321572391, 0.00011652969229286516, -0.00069780759172321442, -0.00081516216404033115, 0.00031471538464767062, 3.2977760094066362e-05, -0.00074268117841487513, 9.2834374935888298e-05, 0.0016276084011049713, 0.00052039347413883026, 0.0003285769128429112, -0.00090914431575088526, -0.00066273949795000141, -0.00049429425680350917, 0.00081787103240475723, -0.00028646816494606181, -0.00047774822091328339, -0.0011287002050334449, -0.00014958608778612575, 0.00067727909838368253, 0.0018426861751217457, 0.00042127435964937898, -0.0011897602501548844, -0.0021020944752171283, 0.00025862501872599489, -0.00028164777099942001, -6.7871288290041742e-06, 0.00010673321891338397, -0.00081946733629025144, -0.00050655780311133561, -0.00045739009384393806, 0.0012233134687435353, 0.0012483089084911257, 0.00023366693745787998, -0.00049653822033247572, -0.00060431039974054301, 0.00048856312080340636, -0.00039402287572039285, -0.00030282982425909599, -0.00048297968441542161, -0.00045029888856688155, 6.8065154860727506e-05, 0.00029380813408220671, 0.00080750067552030902, 0.0010027117298195727, 0.0012117980796380462, -0.00031499882641429153, -0.00096615449547508142, -0.00016520767145138809, -0.00025930083458174102, 0.00070444567594835084, -0.00051524971604912512, -4.9950991088697216e-05, 0.00023269835482522989, 0.00098128070058338401, 0.0017427389161336626, 0.0012748954300746823], 
	        [-0.09216726473640563, 0.0056728742547598144, -0.0093745125247278963, -0.013062003758843106, 0.026810754174940429, 0.049001345358430204, -0.021651121797821183, 0.037001156569604607, 0.0042183127400313627, 0.0018620748056430826, -0.00028650345860718393, 0.0053573451925248185, -0.024952282021024397, -0.053963168016106317, 0.02220135440090492, -0.013351422685652972, 0.012385499720994092, -0.018031103648731638, 0.025521909572096997, 0.01253732595969557, -0.011991546378321899, 0.045186572016900094, -0.0094335083884424294, -0.0044184293091944493, -0.013784342121793192, 0.025926061962200528, -0.04105356169652366, -0.03889277471178329, -0.039895674599080957, 0.035441461163177923, 0.023677237357549445, -0.041021777310156667, -0.057695608854404799, -0.01762676919993638, -0.020216604797755007, 0.027628137586160582, -0.018841264850454086, -0.015264367494595166, -0.042662519918908834, -0.076631880879329428, -0.057528782374830695, -0.014904729302692682, -0.066897780001713703, -0.06532989573225445, -0.0076505652205603458, -0.048586565493310384, 0.085981797610375443, 0.023144594932235765, 0.069502587525011622, 0.023606740362224744, -0.03701131089094889, -0.086463629853619134, 0.0048593320315824251, -0.047933152033371423, -0.065202394397951363, -0.0083087466099175528, 0.0036048909369455263, -0.014176009427905843, 0.086524500164412141, 0.025019184064985066, 0.18351010232889509, 0.1773063621666941, 0.05264594509899273, 0.046296374049865419, 0.017268040614808002, 0.091744326777185067, -0.011476730811934746, -0.0031098305214721789, -0.044720850821788796, 0.035194984568811871, 0.035161502690833665, -0.085225661297846492, 0.059125980810968093, 0.14804082639627478, 0.094893897974964725, 0.10021021442994898, 0.09479988677758025, 0.016819487190214488, -0.001620802251457232, 0.0056983698526431037, 0.024660235147196684, -0.001744068586085468, -0.031929007957278016, -0.08234588274111157, -0.036631877507097843, -0.00060561413909040454, -0.0084923776484023029, 0.029092555992398725, 0.021733620396429669, -0.019868686758322113, 0.0049377342712525838, 0.0354455889830066, 0.035659507135636787, 0.057301879108241027, -0.038291855034349676, -0.061603790001514017, -0.062081937237464455, -0.043689034974759226, -0.019286854706340784, -0.015927077135257463, 0.020688030294743746, 0.0061874980221431662, 0.0079544756336816427, 0.038210084103014429, 0.017747129076694818, 0.018299098668275414, -0.071993890721030018, -0.04880614394384078, -0.041477514541540167, -0.074196014839536834, -0.043570050319461741, -0.024269573468651304, 0.048012036866646256, -0.0022007186161765308, -0.012800711217039476, 0.05287613915145286, 0.06224964320115732, 0.025342119373221679, 0.0028708573689360251, -0.041475224097980136, -0.016770635320925542], 
	        [0.020791522234705886, -0.026685059276677248, 0.0052683881367612678, -0.034938985350819116, 0.021609135295030821, 0.072759833840912294, 0.041388662663081791, -0.022050570784842675, -0.03766921280042098, -0.038135589145765356, 0.056138069483269673, 0.01870086519715047, 0.024053272871131241, -0.044521548367207869, -0.0072802659094019905, 0.025521806490733729, 0.055898032390660567, 0.020086252624459025, 0.022257708387705265, -0.043113185738142573, 0.025460765149070363, -0.041999586106773602, -0.022103861342994947, 0.020436961749637446, -0.0089104142150475685, -0.040754212701411704, -0.044989111609801367, 0.014513662447400134, -0.024972880286720952, 0.041775700269714146, -0.020617899446434662, -0.027451770104515237, -0.0581210200819193, -0.01972807133154101, -0.064863569531781962, -0.065429246017521078, -0.034021394098613274, -0.070154069814679601, -0.047185801462871463, -0.066864913651470764, -0.066928175305740994, -0.045242116038150926, -0.041527188035858031, 0.0090971915515874469, 0.066566987623413135, 0.09217912843511486, 0.035601037862094155, -0.031646183711611257, -0.084854398526009359, -0.078071918455593067, -0.058063889054538138, 0.027433416517916739, 0.038430683267361994, 0.093545180120055263, 0.020820155765660042, 0.053867582404908895, 0.080126804974505278, 0.12823246066629901, 0.10909482374666421, 0.12328440515687174, 0.10908470088869585, 0.12750021442141796, 0.089820420443205415, 0.13206669887005298, 0.040999003255566858, 0.058589622623364139, -0.028140612810618193, 0.011014387203399659, 0.010818445027512502, 0.057563125740994966, 0.043454150260847313, 0.0638052153810197, 0.039304942349605, 0.014669342715182604, 0.031072595757211559, -0.064253742074883269, -0.058945218947391416, 0.01193269465678194, -0.088116225981897403, -0.13130241652649149, -0.083772332396980051, -0.057941723086485299, -0.054054451777421325, -0.052884392643230117, -0.09093972499912327, -0.054181261740231752, -0.048566262449049533, 0.041761684409925268, 0.052504158945313288, 0.04064045371279662, -0.017347415771619662, -0.076719756803110536, -0.061854859388876034, -0.020823169528688797, -0.062266455107789991, -0.047703214610949791, -0.040227307948697298, 0.046901220891254883, 0.057527412627830121, 0.02543790657840345, 0.069956528520047301, -0.0081337298400100972, -0.020791993788821496, -0.040001890418240753, -0.05758450686937977, -0.023269358988961084, -0.04372684111076177, -0.025274229592385768, 0.047881871341667451, 0.055113090538271091, 0.041259701309823663, 0.030577926161307056, 0.04016185297326795, 0.077325910227506373, 0.049074284090185986, 0.020718323049837589, 0.05262692548423558, 0.057604266834923888, 0.051058314474601463, 0.023973320452055122, 0.10154029156391102], 
	        [0.038641739990258633, -0.0050244591541973721, 0.0046136555572029725, -0.0067584458968164562, 0.03142115173410135, 0.043863820713166662, -0.0015664513032071729, -0.080587538587864549, 0.023010888007158094, -0.031974497946145916, -0.045852604775241584, 0.0073321619577446512, 0.024538236370796981, 0.026493986359803483, 0.012817297004288597, 0.015872668762235975, 0.010885319603060616, -0.025021809184165841, 0.03751411496590415, -0.046294554576462262, 0.011215007929641349, -0.02865689693597509, -0.015741373908333564, 0.010582364969449747, -0.0060245340950563914, -0.0021638463212280828, -0.012232405683626778, -0.038573436738902116, -0.034196779922251591, 0.021758828506470554, 0.0040701402954654298, 0.033018994443948589, -0.051703841216797261, -0.053297422863193972, -0.087986965234679054, -0.036088517832627981, -0.024713800986492014, -0.045558468938308061, -0.06323440947763162, -0.0079875844696831663, -0.0012689882118882348, 0.047524990788468238, 0.014455312192059422, -0.018256989781913674, -0.027677988718192631, -0.073305419918544265, -0.062178446834711937, -0.056046138548416793, -0.061582574394783318, -0.013981639384921803, 0.036486130784949389, -0.018426595901044535, 0.072796751112711278, -0.0075590705083293415, -0.024644110824231222, 0.06168186724387318, 0.060668636974430631, 0.037713982535211056, 0.078054934945803039, 0.14418916995002865, 0.15559892027908628, 0.067521632288650851, 0.019945580585251987, 0.026658612914922927, -0.012069655500885873, 0.0057425840485807404, 0.083144548120109421, 0.11628270848199979, 0.053997152612150712, 0.074409611827373545, 0.067028727192838367, -0.054231046134796825, 0.0039030350681543971, 0.062433312935196959, 0.025820518574058156, -0.026726551682383845, -0.010193345611774624, 0.020415993983784991, 0.060395051991757931, 0.011092152032282707, -0.04696569874087772, -0.07052421722415371, -0.072561804228264887, -0.027650589315538845, 0.068449933489119735, 0.03300031824163617, 0.041736298644040548, 0.011928446975795447, -0.054917381191681824, -0.051653802268125909, -0.028773541890526888, -0.037452616870395278, -0.082340063854409298, 0.012374637017067137, -0.0058925331814810994, 0.11104715646061467, 0.016941481040333578, 0.03319422535043131, -0.00183737049680259, -0.095054133079783387, -0.05896573649709879, -0.040233306687047658, -0.046408592586160452, 0.0083076855640988323, 0.044775412494742942, 0.063589932355388373, -0.010508998580612362, 0.066094053744825035, -0.0027753074050847724, -0.010075721966416776, -0.050323575669113996, -0.0068444216705598714, -0.0041475728122527351, -0.0038945396282382776, 0.028366828254517029, 0.032085016082864043, 0.029300197945124618, 0.0032286359611920848, 0.071385590020760878, 0.023726429769362518, -0.071250665399322441], 
	        [0.10872537789851011, 0.014278189525074661, 0.012273877115053775, -0.0081392543273338877, 0.057053104705377521, 0.042321601806311455, 0.03332397665498274, -0.0094696243183966938, 0.022832248497195895, -0.060308217357328699, -0.029388353818991391, 0.047862958793470828, -0.010046448412779706, -0.018988029533582834, -0.039885552090269713, -0.040504055383590309, -0.014328694386006549, 0.066888009783769464, 0.054680567071356045, 0.036468027087737401, 0.027426069930502159, -0.041156646091381657, -0.071083792516037081, -0.038858148067829321, -0.052404651812680655, -0.037439793873889099, -0.072141553723678531, -0.064831984361939266, -0.093370898670026015, 0.012492784149001596, -0.012992603451236887, 0.012827984972397261, 0.028495833153019318, -0.088967419902127892, -0.059144923132213638, -0.073603628874425425, 0.0014228258212915287, -0.061365580816495208, -0.054662891582800743, -0.10167804607960763, -0.086349086183820561, -0.013058338568626704, -0.020967276930948797, -0.02496861635421278, -0.00867806660644585, -0.05092789276026935, -0.012321465172884127, -0.00979595224133116, -0.06038602061828513, -0.073566019699290497, -0.098900952710465395, -0.095044913253043817, -0.050810313973777735, -0.020639393298860699, 0.0068008806732431596, 0.15285717060929618, 0.097545372872726313, 0.11067705492765795, 0.11229427860410809, 0.18427633371321137, 0.11307184167377732, -0.0045716220662144038, 0.0064434015987714695, -0.052854132609023295, -0.020146160375414821, 0.0036234729462064491, 0.055736679511239132, 0.046045942922945615, 0.022877085053644025, 0.019701551970110434, -0.044509960624947387, 0.026260060577445368, 0.0012791409413432393, 0.11282744913606092, 0.045955737539801839, -0.036756266818064348, 0.013792875001360963, -0.00031411118081339784, -0.024157026907081533, -0.0076891189431453205, -0.018310688556061716, -0.036924502766096871, 0.01587681789027176, -0.00074296065299485348, 0.04435085579041969, 0.093549734756817104, 0.034106620050054992, 0.0074666958029946731, -0.055729238389459056, -0.024914950480349144, -0.040394064221819001, -0.014479423659402343, -0.021786228199499567, 0.034462836766090535, 0.019018078277086774, 0.019995937468091644, 0.057264247676035301, 0.04080735202882977, -0.028382616191986051, 0.012260696627029324, 0.036426534866617746, -0.022902539374817468, 0.0068340274728649064, -0.0095408080735063794, 0.021714345796159974, -0.002425244709437491, 0.026186714013621812, 0.06273849289505809, 0.013100065944167471, 0.02184527152625354, -0.0064556273106626955, -0.018059624197655194, -0.011501119699467793, 0.011069356592404581, -0.0076555726632192645, -0.060373289292683437, 0.018730638535199164, 0.010878747575572504, 0.039313330705399122, 0.050533322267807532, 0.030800301775522385], 
	        [0.040802901586182709, 0.065103705890545233, 0.01571760146393637, -0.042967026067333894, 0.053812288839959845, 0.074783021511556802, 0.057112073514354537, -0.0020897181911366594, -0.031444155008721532, 0.03665938914354934, 0.079577902386804983, -0.014494517062943354, 0.023853876703959682, -0.085960234475358457, 0.016421056516635474, 0.053098980528390891, 0.044587319319406481, 0.075787383037682066, -0.020575193628669223, -0.052303363133645836, -0.0027125538469783411, -0.025364536060143633, -0.075564109154979769, -0.039844635860099079, -0.035503765834440412, -0.031982916804728603, 0.016275057515532626, -0.014982688136025823, 0.0085162879583037827, -0.010415191123769537, -0.080245107677651376, -0.068933869414995408, -0.082117266151384732, -0.10868042731437648, -0.11517402154338535, -0.052169980652789334, -0.078002618803070467, -0.084743043622459768, -0.090079412279082061, -0.045560705318270327, -0.099137819733507423, -0.089931119548774821, -0.071756723384732823, -0.1011983905001102, -0.026108924802754015, -0.02895558848827974, -0.052952747867330424, -0.040651011278506941, -0.062403675645972413, -0.062530867826569025, -0.047639683852648468, 0.021549892035432196, 0.042011742541525871, -0.0014168202056091244, -0.060017710153938739, 0.050238665733522286, 0.094413292104875743, 0.14252847594850043, 0.12070740630935128, 0.11697697498229397, 0.098975653037204459, 0.12840555821628419, 0.1092645611216749, 0.10934335033079282, 0.037269298258601313, 0.022780470067651784, 0.044473900840241241, -0.0060598467528648128, 0.0061609144853983725, -0.0064768658816174163, 0.034870432574956867, 0.039379809714831654, -0.0013957543834296031, -0.028962960938971525, 0.0046569189597002736, 0.043727516840792277, -0.006941018795027367, 0.018088182930952126, 0.0082023947523770183, -0.009919468949588936, -0.060300576196604963, -0.04961731590236345, 0.032033275510473247, -0.01701144350548291, -0.040658744671612526, -0.017714249349095157, -0.017210598588884591, 0.055569751424096779, 0.064732172425609261, 0.0142514421392548, -0.026792644729731044, -0.037619803421594447, -0.035454019366795209, -0.0033597142606219474, -0.0018841722971697202, -0.03513935986915321, 0.001299552487248638, -0.020445085521288382, 0.037428045865738391, 0.021313292534809361, 0.054608035940519203, 0.044538080793511958, -0.025502640115099909, -0.045072000923970221, 0.014585725040689751, -0.031780543877902773, 0.0068856119179188241, 0.0054808839404315718, 0.010447966359669152, 0.036007093277555829, 0.072977664284250968, 0.0081451532648436076, 0.018677942155355585, 0.0022220414820895706, 0.038133960894140659, -0.022256466219839181, 0.018473324676275091, -0.019158933928994693, 0.053864036371846072, 0.0041178771402385003, 0.042051744426760795], 
	        [-0.11959471143292481, 0.00046908871164344848, -0.017806537583872739, 0.060028987830965261, 0.010482881406572234, 0.1134097871181696, 0.060972001775857071, 0.0095573140622628831, 0.024171870288714075, 0.011559219957486627, 0.074094322684175498, -0.0015330263524836879, -0.042433991686828154, 0.0093887703280045344, 0.054396766959822755, 0.0498214705214945, 0.0059163111595279677, 0.023110497561564927, -0.025327700927906302, -0.071391862957095473, 0.0028116491031619471, 0.040639736088270678, 0.023985187089475772, 0.00080593035361482476, -0.017294104303814381, 0.019318061091531672, -0.051785631407524797, -0.06040231096160379, -0.051630865282623027, -0.026410009167490766, -0.025387094238179267, -0.086705148484331765, -0.031667117402875984, -0.03259729996049833, 0.0060777751022725451, -0.030850143895008959, -0.10889563458102586, -0.059264340142843021, -0.058026751391014861, -0.065550940259139531, -0.076388204506250154, -0.014694324172739949, -0.1161029182457609, -0.13336448135124818, -0.013871869353886061, -0.071354914609700726, -0.046295795137470362, -0.046341257133683728, -0.059803897951158161, -0.0556899798471754, -0.088752078300497958, -0.0092766852217181367, -0.010765871754746199, -0.013689713283032208, -0.058953596738130137, 0.018926773961227689, -0.027282178971395361, -0.039857478520104385, 0.012549232916158878, 0.010688241731306974, 0.080319165930301445, 0.15262100299518466, 0.086960661319310489, 0.15252525992290902, 0.069463873136678234, 0.11198174180776471, 0.01737147006474421, 0.015812778630970917, 0.032806003786103988, 0.017746821396218554, 0.073544673139239528, -0.032110260377912717, 0.019566763627964195, 0.029618292548164962, 0.038786297055650301, 0.032627871772587649, 0.069816775578256801, -0.0062508202311634649, 0.051458415560465681, 0.030408800781210513, 0.046777479573010872, 0.040002134296522718, -0.02008807639444515, -0.01263470418907111, -0.045249735132798174, -0.034253925513510058, -0.021875531092695553, -0.045998549423427841, -0.024164107680801648, 0.0075636530397308332, -0.00091421816686280792, 0.035702717797856873, 0.088574974690186048, -0.013734861595105412, -0.0098033211306002566, -0.04282565326207903, -0.0012702256209832369, 0.012700494745847814, -0.043166253351587705, -0.032268233451616377, -0.0035432592129699403, 0.0067580471025863592, -0.0053453862422648962, 0.023287783646401855, 0.074292726072946569, 0.019466527108545371, -0.017987962764354493, -0.0012524056877380139, 0.022263654018090235, 0.0012391427069160937, 0.0013565429618937579, -0.0046713438401512937, 0.016578328153419922, 0.036584208476039909, 0.001097170617763564, 0.011356767972489225, 0.053430214295184963, -0.00068444374047767209, -0.0384483419844764, -0.00058389549992762108, 0.0032910175381761254], 
	        [0.0087136750269642335, 0.021184676494079766, 0.044118373966988256, 0.040648025991879715, 0.032447241186740375, -0.013324459836625741, -0.020142424050336942, -0.025882484787532859, -0.0024840579433286908, -0.019010478599687353, -0.002112799546736252, 0.009101832461506542, 0.039625693797873313, 0.017970409804111777, 0.037360151074966881, 0.019343344984558475, 0.014756799698268486, -0.0010528464090698991, -0.025961909366916235, -0.010285595270832736, -0.011165374267784578, -0.0019598758278640237, 0.0087081620119244998, 0.034494100706365091, 0.028652254710913989, 0.040299978182407034, 0.033374343071050708, 0.050349542304153089, 0.0063625956689595461, -0.024011839291926199, -0.042233372866263372, 0.022057516258499003, 0.053376443527016197, 0.020620147730700943, 0.029540439011999847, 0.057651788173259826, 0.067979091933384042, 0.062646746017868765, 0.049240173935889892, 0.021169919247216541, 0.011453866008363397, 0.010299220942533334, -0.0018357416874219962, 0.055929573434282689, -0.011231564367321699, 0.032042065774273598, 0.01571280002325131, -0.0070039251490842721, -0.009101648993736014, 0.016511365940874906, -0.019704911391892579, -0.039092331240561939, -0.045771081107692201, -0.0077691616125735372, 0.049862458553556741, -0.06736549253306108, -0.076963070633090172, -0.040595361000206484, -0.030389356872258563, -0.092514337569437666, -0.057211588696462493, -0.00095436298004251963, -0.045682047502914935, -0.036818864364637389, -0.068243509434178257, -0.027587536268803375, -0.041645167478661045, -0.04303078919819505, -0.054497722201413787, -0.068638447295754565, -0.09778610861618825, -0.065713312081331784, -0.052881969043814835, -0.01339699229959858, -0.019033794283482786, -0.023493218289815446, -0.036063450059278426, 0.027782266928957237, 0.012906654330914466, -0.017337278434917267, -0.064487941544117314, -0.099835383781717732, -0.10289791170276469, -0.064663551431551017, -0.0641236728999387, 0.010795364389364459, 0.024949528393138493, 0.018119888699965225, 0.10433442726226234, 0.10219165136667126, 0.013336681266255849, -0.023600080179398731, -0.089887755873483743, -0.10446013110840585, -0.11164381762372182, -0.051551762026531431, 0.045266919305088242, 0.069677166083149861, 0.13697123941472913, 0.064482888607458697, 0.098551199117389618, 0.09360636141971522, 0.037819160682802944, -0.0035166197905182836, -0.0028484068050251173, -0.031608943165469139, 0.0046811946910951807, 0.017171967845917853, 0.10536533016879272, 0.082514398940340364, 0.010270426109688261, 0.04723579496187133, 0.079022702429357855, 0.073711303154692515, 0.040152485755633946, 0.077664793581362607, 0.044442834049414938, 0.014455191975205124, 0.022399756108926826, 0.017224699650463141, 0.064738964118889505], 
	        [0.086171813825423521, 0.043276344722271272, 0.030057182293563189, -0.012272805932473568, -0.0084497919375918426, 0.033191584991409173, -0.034725622268988551, 0.018176702115917775, -0.0097127781766898486, 0.0085166182323308352, 0.030226931221559766, 0.052416098527926294, 0.051668837837120909, -0.013910386317496911, -0.014892754899464261, -0.030204392408315697, -0.023348595772105338, -0.039154056656942125, -0.020299148174262385, -0.026870214226325, -0.021026881302678255, -0.048342252841896659, 0.050216024122317592, 0.0017508003206529706, 0.01784781112040023, -0.035663337208851044, -0.055701361822959372, -0.034565501095180508, -0.0001449409970588969, -0.011843034224678937, -0.030725274086672746, 0.037181115372523707, -0.014334667924480585, 0.026402505410657532, -0.02157219826244711, -0.050784579030140373, -0.0067591136459494716, -0.057082366222224006, 0.0016645285356211514, -0.0041546960728905628, -0.028755773827423173, -0.03714082137578157, -0.058966690069682928, -0.016029429438384403, -0.0031721930051920033, 0.0023077585454026051, -0.048021525210782345, -0.093376311841670362, -0.055542556473841764, -0.11398186442053326, -0.027456752012806465, 0.016614108182758672, 0.0027741155498583747, -0.016348951668857664, -0.072146978965869676, 0.0015395126311125717, -0.052682834934778711, -0.060378727516170197, -0.068266862134838471, -0.036771885672760463, 0.11935191252954988, 0.10244934755298962, 0.027542982076475292, -0.032070419062542696, -0.022385148133489435, 0.056289823602901912, -0.034119337486394785, -0.069686895736583362, -0.049955802720861683, 0.029733455414129237, 0.20068856127367213, 0.1162085020692212, -0.043410251863060023, -0.0030593783022195981, 0.00063195918916066768, -0.0015553440469552871, 0.065277285494402815, 0.010466423234828076, -0.020040852081297265, 0.061755629831554908, 0.12136556526370923, 0.078247187170092367, -0.08072517073390352, -0.075077412337979363, 0.012154159684612222, 0.036821934539862315, 0.02472102052087196, 0.040715988579243925, 0.021622540244536845, 0.038658271107198355, 0.052578818327128657, 0.083631018106240448, 0.04788200302645329, -0.075156815694368884, -0.050687783633637906, -0.0088389729616671769, 0.091034820744931355, 0.078447244012908812, 0.06227592062517176, 0.060594909680654375, 0.01693797817353428, 0.06408103556895299, -0.014547815241575009, 0.065658196419567896, 0.018129490859442446, -0.08798530089434585, -0.026622130825924434, 0.060886174973499241, 0.077750707436133701, 0.066437874598894484, 0.019421765119352175, 0.048504723287502369, 0.07041372195878251, 0.035827424258234999, 0.083548417322279078, 0.060027813387995552, -0.005432499769252413, -0.0020892485624801555, -0.030512250542840812, -0.00047303040700700464, -0.023511765584947494], 
	        [-0.019836270599180916, -0.0017613217539587485, 0.020980704061465912, 0.032444977290163338, 0.035482360716385192, 0.051463914122762917, 0.01387059443680283, 0.012773320795543788, -0.0056081410148611094, -0.011615184428147185, -0.044318141985502046, -0.060123468169623585, -0.014777416807908089, -0.0053582542779810755, -0.054379500064678565, -0.04137798510918636, -0.048976925694358256, 0.076953418090969714, 0.026914330698442304, -0.0014016954910277407, 0.0097461019716972574, 0.0046963778137781992, -0.0069130491706136665, -0.040628477563491361, 0.034128908242092887, 0.011113734772594072, 0.026923522254639856, -0.034901970199125179, -0.083572453474777542, -0.017956322789516803, -0.013806163282359438, -0.06239361835505905, -0.0041426826588957799, -0.037637167036336384, -0.037724529658588551, -0.013774694560670805, -0.057704817420390679, 0.0048236498871859993, 0.07228227823302627, 0.032161882846836277, -0.065744929925494702, -0.043635280281107837, 0.00026056292826356561, -0.019142520605292868, -0.028407833505873292, -0.057929038649120537, -0.05076593603511028, 0.034535717074437706, -0.092192499765500688, -0.10532839199459904, -0.012076014852148213, 0.047512930831949463, 0.0020511676860901244, -0.026304839763800526, 0.059014485786431731, -0.04121884738294615, -0.037908511573603157, -0.035253683963737445, -0.003764225518756617, 0.1058253214787373, 0.15061197856457278, -0.044965430671133816, -0.038672944035853724, 0.032859085087083864, 0.036836423091902562, 0.091521334284663594, 0.067930349704352549, 0.001657465766571567, 0.011255029837672278, 0.019714575278699853, -0.046029623685046345, -0.0051819605809679953, 0.13027259585766382, 0.076244041762153464, -0.062532299911886025, -0.073583991135358184, 0.077174533475065421, 0.049432650608868409, 0.035864444263751481, 0.035719679749892569, 0.020318474287435453, 0.02861748003954917, -0.18444657518134203, -0.027969189014098672, 0.14692467780203242, 0.14809587852238354, -0.03290596643929547, -0.022816759205720398, 0.081642802242600315, 0.073319424746687803, 0.096551558434272475, 0.057497490294592224, 0.019593324904571427, -0.060101281088941985, -0.055289785260653201, 0.077752523928707032, 0.082231188321325199, 0.043012682164453975, -0.084998541929117044, 0.047226746411041548, 0.11708089871954172, 0.073957832946588489, 0.068481921009760804, -0.025787797068816443, -0.042547833499527232, -0.028797349310348233, -0.028665140255539324, -0.050465025239779027, 0.0099282727284533898, 0.0074795255927929058, 0.035767022417524885, 0.013422682869269679, 0.059916646550554516, -0.017252353019081054, 0.00014025453940576249, -0.028232578424891228, -0.037232130930961754, 0.03807283410302556, 0.017200727451423696, 0.048123699773181455, 0.082874942910174415], 
	        [0.0081889230474460895, -0.058861620555009528, -0.043961481598665794, -0.063177035412865831, -0.018314195969373462, 0.034878450378990955, 0.035304175797457732, 0.014293668892683664, -0.027456916509392928, -0.068367628925221052, 0.001669119251847942, -0.040967945915871377, -0.03943941310209053, -0.021637978943057967, -0.037684292945808551, -0.017747783335439818, -0.042288824584737462, -0.0018176642328489589, 0.030934243801926706, 0.011733255516551085, 0.02708984163398926, 0.0017191072696037882, 0.043276004610731736, -0.072532619647830976, -0.030223836313618479, 0.021071961346727626, -0.0074147497494400638, -0.043925229543362393, 0.020288776715248001, -0.034527237586023503, 3.0471360021155913e-05, 0.026067397032741996, 0.088540464798406104, 0.01413941347644106, 0.022766394260563719, -0.0018480555055750275, 0.042675799328757251, 0.017054471283286493, -0.096746137235194679, -0.10757348404679792, 0.070754873906539423, 0.01575558139579953, 0.0096692478638847699, -0.0032289840854645077, -0.015101060431773538, 0.057926005617948362, 0.05010944609735675, 0.03438493002343132, 0.05420170443576617, -0.15712629885767235, -0.10755100231803701, 0.054215855416940288, 0.15265730024840482, 0.055888119645312602, -0.095941401277040039, 0.03328672046334586, 0.09353086897835676, 0.14384249052592857, 0.12025171427727349, 0.055496873043967186, 0.036285296296363331, 0.066833079592868674, 0.042161382611612397, 0.047587995565539137, 0.021867654432298031, -0.0564119641379216, 0.067603194336726846, 0.031338290457222959, 0.050713005156545185, 0.052148045957678787, 0.018648322758803917, -0.050759157693301679, -0.044588001217457346, -0.039312995512573896, -0.059936417610193665, -0.055184693439938245, -0.019957035127630418, 0.050192754841022036, -7.1757395827626302e-05, -0.033091702048858869, -0.034428104974273177, -0.034413465790208278, -0.023267082967762434, 0.031901848606379901, 0.020238538810505934, 0.0042221466771613057, 0.015602237108089854, 0.060847091700473442, 0.041401859346669609, -0.0034146015221089565, -0.0074559961064889491, -0.015893641385376203, 0.056392351962400708, 0.063354540983474289, 0.0087304477448395465, 0.013014118991186936, -0.0020131002441534374, 0.045231849909967176, 0.035378207480516677, 0.082600299684899986, 0.033715599170522123, 0.016512586361955336, 0.015814071825167364, -0.016536993108816449, 0.022388288048192512, -0.012153283754204335, 0.024539743316687932, 0.023108504039178981, 0.0067064141727297411, 0.01196006995554437, 0.01808564781799793, 0.022564539714186704, 0.029240080645026825, 0.0070031422851894731, 0.042819312072206572, 0.063646286047359391, 0.071444911692377322, 0.025002430371161628, -0.02988386458099207, -0.044839473616139255, 0.0048106139958749294], 
	        [0.00760442586653437, -0.031647161439197435, -0.063172441009770042, -0.074495313815639272, -0.018994314341887673, 0.052826629441971945, 0.032890225420068343, -0.013629701917450165, -0.064807806031904142, -0.029393773930843553, -0.036471213615816359, -0.0098221768646617295, -0.03512116201717283, -0.03943473473657854, -0.028818473185370876, 0.03850092276204857, -0.0049328775196173652, -0.027624833158639117, -0.067846866445995579, -0.0011073069182334881, -0.05184142360008933, -0.055930573972024514, -0.01741185166520046, -0.057527466793733051, -0.055499304805210641, 0.028375118140619545, 0.035910848122856304, -0.01496101773521763, 0.011606597964401194, -0.0075876694292307534, -0.0045075356731610269, -0.0082002978749069391, 0.013779697793775076, -0.050073087994743797, -0.04908451276428849, 0.070063159827065333, 0.041211290659651782, 0.044221912404898908, -0.092510156542300173, -0.017245900432612329, 0.0054614497516805513, 0.0057317904111747475, 0.033492765079685211, 0.0086141350275894379, 0.019265007144101023, 0.0091441578432992152, 0.05844498925238964, 0.11212586773198896, 0.0075004000045361648, -0.14040933702091665, -0.13224491934624966, 0.046900879586457916, 0.043118887082018047, 0.082579685212893703, 0.068683773505795701, 0.041317670630771582, 0.085514694418916445, 0.023787162317564083, 0.088925450535202996, 0.13628690428327328, 0.0054697771027137181, -0.086543108426525212, 0.025964600319029363, 0.10587654052203503, 0.094459611375660418, 0.081346300231989077, 0.041592204326461928, 0.0066817887839110994, 0.077674394412019773, 0.0056683876342300127, 0.042096017073306194, 0.032191303817394351, 0.030452658585607126, -0.025984256753419858, 0.025271063575447547, 0.034211665699899252, -0.011964155896605516, 0.037076527694802561, 0.04508649436861286, 0.0051587756376244853, 0.02880706384910163, 0.038599720493081482, 0.024875515796822671, -0.013891640751740861, 0.021755723908671087, -0.065358451817548596, -0.061057887606313227, -0.024592482102494873, -0.0075328437080993543, 0.019986689878947826, 0.040909136201569898, 0.040437015091600761, 0.040034799263731949, 0.018812605341074366, -0.030276192569776476, -0.030270565458533134, -0.016190643318727164, 0.006809905422805987, 0.037916482000601909, -0.038319315218418547, 0.010306777237133882, 0.015829001844016963, 0.040800282130470392, 0.05615449330992818, 0.04786297945430712, 0.034288336490960442, 0.060681491982977377, 0.0032702943730984618, 0.0013152591778692133, 0.060954595988390148, -0.040791733055038019, 0.016183415755703048, 0.019528209635753736, 0.028893550793992792, -0.0012918699135948258, 0.034618023394595597, 0.043405940357484581, 0.029089370346889853, 0.0088268285651632861, 0.018259597579594153, 0.075373115466755555], 
	        [0.027450771793035074, 0.041262824664966939, -0.013144559153806662, 0.012207909150661903, 0.0092477333330207509, -0.012848538408191307, 0.0045635591482721073, 0.010876267701812489, 0.02890459475433247, 0.026391802511985279, 0.010732731929258464, 0.015032366451770748, -0.029908421422182082, 0.021411606012816192, -0.057536773751919248, -0.053416159980357834, -0.048865576382574959, -0.035570469790391759, -0.018461415692559838, -0.0029790588112649907, 0.032112270223907544, 0.051477612075197313, -0.0057662482825229858, -0.017766588527875229, -0.028238377182112806, 0.023528561546172357, -0.04216007246124067, -0.041032389593882487, -0.06680999261373205, -0.039632149520821544, -0.022226688774540718, -0.0041149160188688749, 0.032302323242771602, -0.013890604091560638, -0.034276275118401742, -0.0051502741378656337, -0.021066308656931813, 0.022151630661472133, -0.0022992341581987014, -0.062769638896883875, -0.019723620835675727, -0.057691275310445302, -0.042378894883198112, 0.028983236593136813, -0.019395597488888486, -0.029331542199886471, -0.010745732705029043, -0.013921448513401852, -0.029609437928951193, -0.12537702206143342, -0.095617188384870627, -0.035129241573632897, -0.039982481822552207, 0.0090952641871177801, -0.022086955744048412, 0.029136077983963546, -0.032593887678401656, -0.020183882523267208, 0.061602041888744921, 0.15458403910635235, 0.16957224934392182, -0.040427938845436127, -0.14425377583803428, -0.071643094865452436, -0.042253187333205683, -0.027875249558229672, 0.058879183410993005, -0.00047065192114704134, -0.043920137358857254, 0.05496654067473021, -0.069296625387029825, 0.11118740085537496, 0.2366565621922726, 0.12148462555955851, -0.011433917074149466, -0.048194932808641386, -0.079327638115028978, 0.0017254253058667443, 0.037708824963847712, 0.042182164843196458, 0.035829815786488792, -0.073357898816589731, -0.14576211923026078, 0.048290332077963939, 0.14879922368454307, 0.10064792412919202, 0.063705043016025004, -0.030692614056442261, 0.056255605990735619, 0.10255361685355899, 0.078604273448134934, 0.0164658420906807, -0.0056463798547232141, -0.13298053803801668, -0.028765330682998365, 0.05939355800317566, 0.1402292273171811, 0.011410410356375363, 0.016039694083752262, 0.032382125330787596, 0.10195998512893362, 0.061382477156473686, 0.082411738292981068, -0.063666416770640277, -0.018779258750025916, -0.038365933733688989, 0.077993417865157774, 0.037853307835213006, 0.040996995997873285, 0.011082725441736859, -0.0056644922101654026, -0.014754708114634627, 0.018864758145484002, 0.0075267868116950659, 0.014018215345551104, -0.010120746615713067, 0.019767300172685923, 0.0399406347657522, 0.099260521955006772, 0.052915278088062984, 0.022179211937403773], 
	        [-0.09716085296718216, 0.021642032331918873, 0.029135209902749426, 0.013999315045878299, 0.059316507135864754, 0.033067474971013311, 0.0085646291438248312, 0.010286012651575784, -0.0083817553445004675, 0.018753974201751927, -0.030375458058801961, -0.041904429008824615, -0.055862255737819402, -0.010903003336047129, 0.068264567248243077, 0.026035515966818988, -0.0012923504068929892, -0.0017623356640995083, 0.005468527639103056, -0.021755603593697069, -0.049505653044107159, -0.066112447625837761, -0.022252491484929221, -0.0081982834517316944, -0.037367281479721751, 0.012774986112044792, -0.062950628458933039, -0.045045256304144507, 0.048001463004758223, 0.030007357346820335, -0.0018969086500039145, -0.015723154153853357, -0.055120061189717733, -0.012097061948313372, 0.0026362460701923537, -0.072632828079189402, -0.068872601631521924, 0.017772853215430318, 0.072338704068217213, 0.018535361160719493, -0.045281275098323914, -0.011332122576621917, -0.027280199109967439, -0.058723208914210012, 0.026327853635139689, -0.010818050423826983, -0.030610533234455353, -0.028512931740957648, 0.0012488868339177971, -0.11197453226805695, -0.055269858760533572, 0.01115586891047237, 0.0082228892980596331, -0.032306255269305653, -0.01502375948544021, 0.049382773019192819, 0.015328141296235664, 0.037662383891850018, -0.035013020016662372, -0.029449621040367344, 0.12073107144262626, 0.022860361772779912, -0.023256473556698243, -0.083648467631806001, 0.0074002327452034888, 0.010004461021878228, 0.099371522997238476, -0.025221784791065922, -0.096640580498928999, 0.053094250603911208, 0.15893756445998802, 0.033387109550868377, -0.04808482373966641, -0.010053840415886486, 0.037823846526014906, 0.039700388908815387, 0.054256090345082275, -0.02401468040990247, -0.02904286935058728, 0.046138517230890852, 0.16216994825276426, 0.016089864404032872, -0.091198675686446171, -0.076360513817770065, 0.031988084842499293, 0.036454996777462445, 0.025464944340111234, 0.074147409146892329, -0.046979415183956125, -0.049629380484653082, 0.079771651767589866, 0.087758100333019146, 0.049828916696142006, -0.03045459513307306, -0.024452096514010858, 0.0670092926908578, 0.1175218881400763, 0.11426518181326391, 0.074066541158350152, 0.0062338373377257422, -0.043366039912113838, -0.039950077856114423, -0.035409502206233817, -0.035863781498548762, 0.01781322399419219, -0.024727256297427454, -0.022275869771454817, 0.076761480744383326, 0.062045464769250311, 0.069837551721133845, 0.073012923366347696, 0.060190713224507614, -0.025405925372675192, 0.023372682335303596, 0.030477986314785502, -0.0002301213960560905, -0.026087148164954402, -0.019019953457663552, -0.036714807308876246, 0.058817728969904087, 0.068381158254896449], 
	        [-0.011512245145694655, -0.033323501539032144, -0.077599795617108003, 0.030092014051291281, 0.036890045147122533, 0.015052871160868519, 0.028016899365407681, -0.01018960630350095, -0.078317704208198474, -0.059233122702466653, -0.01852728410941332, 0.053961496737718939, -0.026974467838019357, -0.01804059271627316, 0.044307115164341854, 0.015818943834284213, -0.031953640726807273, -0.02740130304193715, -0.046790507127582773, -0.020608188350333664, -0.026272324411271628, -0.080186654850075562, 0.083845698779704644, 0.001406750687297384, -0.04985438587843697, -0.021416757758446515, 0.066537065419636068, -0.0073244717556784477, -0.018144551509999312, -0.015182424540353442, -0.045130661218423247, 0.029947581486485145, 0.0064481392557531048, 0.042274921462388107, -0.074358994945938048, -0.014176533090006271, 0.077655160397082798, -0.010551243188291676, -0.12637948483078057, -0.033586964208765883, 0.062817071093444254, 0.0053909310356757764, 0.025794636422243125, 0.059721803691538844, -0.082995318825107134, 0.0042617087053962791, 0.10584522112949336, 0.071364312990742557, -0.026422021145727979, -0.16100970751240665, -0.054720311746107982, 0.048999446881141787, 0.075434840832607986, 0.010535530941215229, -0.048016579048604152, -0.080339712203917474, 0.039576695247329777, 0.036637245201813592, 0.12098760898076155, 0.1354854848272127, 0.051194513568370764, 0.018225873276029245, 0.085661323891760843, 0.18621829874239049, 0.10338152957413216, 0.023906079145933318, -0.0041822936350238149, -0.10643206407862182, -0.078124959614174122, -0.073468903649519218, -0.048419863477576881, 0.015108685112589434, -0.03264596890745973, 0.036235615700722507, 0.0080904621985001118, 0.11267954130800725, 0.10278655485723889, 0.04428157837866404, 0.010681413475295332, 0.048922714210986845, 0.05487352908643979, -0.018064605730554309, -0.018189270455657311, -0.071125211325311799, -0.10260837121452346, -0.052490034378075492, 0.024031776304340315, 0.019694437269126286, 0.049636749977074832, 0.032195647589762615, 0.0083280385163384298, 0.070138954785336591, 0.067549912235517831, 0.057433630830398048, 0.020438461876702188, 0.0032421342973983297, -0.050695230761191784, -0.015383897879732399, 0.020203015057404895, -0.015662916885770546, 0.031709069862233888, 0.012505528157918055, 0.02862303507568463, 0.05946324529661641, 0.011987063839091858, 0.029655839160397587, -0.0016058379565756595, 0.032924927535037493, 0.031881210667308521, 0.050423216186573444, 0.015557492045852508, 0.021385779192598299, 0.0099932753661932591, 0.01435070815322266, 0.039479442983270135, 0.066851597833738896, 0.040296519398888356, 0.0099526419122588083, -0.0023557651823443021, 0.01814873401521766, 0.059119163848392789], 
	        [-0.015757148978644712, -0.049129440678390021, -0.023997668342014205, -0.0210026283214945, -0.0015357942036982875, 0.0021065236794876874, -0.037107041689779741, -0.042351598868691012, -0.061162744591386403, -0.034051484714528485, -0.022720119467757083, -0.060739564477761535, -0.026757001184959561, 0.00055934070843080205, -0.022616038258239973, 0.0070861976821720955, 0.013566118550461286, -0.002811474898052356, -0.038580343099048009, -0.014823359019323232, -0.034835879559876048, -0.026656015152450085, -0.019477669860262788, -0.012106727392046226, 0.0042483765645461719, 0.016084907645647312, 0.00066552379900409325, 0.0016008277659419479, 0.020524088921093323, 0.061832709878829155, 0.0036079221207767423, -0.069861609806567429, -0.027833309957886129, -0.032568850186226357, 0.045124349364128763, -0.020541851129595723, 0.0062259884473188087, -0.01720385416905687, -0.06713753737721917, -0.021510388883911769, 0.10815002779082451, 0.037209771283314999, -0.006027660384665387, -0.016395255789040913, 0.027666465419402944, 0.073069001175329412, 0.050575531097015479, 0.042567636344617243, -0.040728282661866906, -0.1802492901591394, -0.05180382591629118, 0.068698953085444853, 0.10468627376672648, 0.046930524622527739, -0.024345410159748448, 0.081518930532773398, 0.13437717506819735, 0.12767282811582661, 0.058828417946620012, -0.065397413329707027, -0.010971808997436964, 0.015964690557018213, 0.064316346804789856, 0.092047644756938635, 0.079924220572783422, 0.0045625327525128379, -0.018286902500448191, 0.017429694084018413, 0.076145282866436848, 0.042835485463588514, 0.080206981146474676, 0.03611723597888207, 0.047379298714446218, -0.019874915866582681, 0.037657544445781559, 0.026115602677467167, 0.07158768649462971, -0.057638081455141071, -0.08380678196623717, -0.020457096575091122, -0.0066815930156417236, -0.010481709236786138, 0.0098188814326595486, -0.018910890692478463, 0.027174343530639883, 0.0048186838638660939, 0.0084831162501448551, 0.046647277306884644, 0.074896293430210287, -0.0027052061320910203, -0.052390985898152595, -0.035810710910889471, -0.010963380484187036, 0.036472476309506702, 0.015668137547351885, 0.031880374182724422, 0.028320973681942418, 0.029976561112701736, -0.0029437318832178684, 0.034619959909237122, 0.085724767242456062, 0.014661848811874373, 0.057456266218902825, -0.0077949735252234144, 0.056966918817289783, 0.039173853530589081, -4.3950988622729753e-05, 0.039524712301200832, 0.033815106883289522, -0.053148463650792468, 0.046135279317716708, 0.034368318225618644, 0.025850606000479254, 0.04364205260106227, 0.028915316089906759, -0.0046553412351980628, 0.04069494423398308, 0.050441914764901605, 0.023379190793916069, -0.0043673996422118923, -0.067829031610357429]
	      ]
	    }, 
	    "numPatches": 71, 
	    "patchSize": [11, 11], 
	    "canvasSize": [114, 102]
	  }, 
	  "shapeModel": {
	    "eigenVectors": [
	      [-0.25918455544134117, -0.04931221385289683, -0.13803814349503365, -0.050835603939836389, 0.00068526965694575893, -0.019143738616150919, 0.023318915050125469, -0.016196086952925716, 0.0036093752391787967, -0.23833211080603259, 0.020657546002336193, -0.015932434823103549, 0.064261608443706916, -0.090634823520771873, 0.022055884293867813, -0.093725674338304407, 0.055117695896951036, -0.053233288056152572, 0.0062574485928118722, -0.094495464626663847], 
	      [-0.015370973540248745, -0.27558869894124727, 0.043057403787850598, -0.017591738525834334, -0.095866808468540898, 0.0374588242132479, 0.028917777439805392, 0.1301742315782318, 0.063868665266122795, 0.093354241092818813, 0.031861264081329624, 0.020242117972802134, 0.27294001002937818, -0.13041313331164875, -0.0031444285383698803, 0.065211427933209776, 0.23796562485879649, -0.14726562188674308, 0.036056872536145354, -0.1295200257644685],
	      [-0.27438982091500397, -0.039852896309116981, -0.13450394922360476, -0.02978745313734707, -0.079525846479578263, -0.11664515605739997, 0.035665518184535103, 0.002417177334119754, 0.071000059730337906, -0.19400193419982176, 0.047707150663056336, -0.060782105477894047, 0.075256164849826432, -0.086536933340027627, -0.01049404960505459, 0.0038623295139433526, 0.019088595829792152, -0.010833090632415429, 0.017289975723166609, -0.048709062934321569],
	      [-6.061111652085234e-05, -0.29074417421901644, 0.061164679549491507, -0.040564059065553715, -0.096173988191784646, -0.0062410078701849517, 0.098421939897005872, 0.12644765063670191, 0.052339831131799547, 0.14548890663706876, 0.019044522282414742, 0.11593290854472875, 0.11303783009345467, -0.2265378936630382, -0.026028516734775083, 0.14284328457404893, 0.10352737588140382, -0.031495507236198358, -0.047636212684011393, -0.031405728625543],
	      [-0.28061079598099281, -0.028500046273409296, -0.1334817649766244, -0.048224158070504508, -0.11475625312727053, -0.16357836516870289, 0.048639735952709248, 0.010323257138876579, 0.0443093902362139, -0.1122958426982017, 0.056896751191640699, -0.046270327611954258, -0.037397127347545092, -0.13317587328341315, -0.010863704903627043, 0.039312364878041281, -0.010946095593356596, -0.012651374705749084, 0.01110571327997853, 0.030546324103711924],
	      [0.014069445433529164, -0.25865071929613004, 0.06560840664757342, -0.045936250949625834, -0.077032475339967266, -0.012716551912464895, 0.12470762874060179, 0.11891551534656634, -0.013669877748084244, 0.1204323060226194, 0.011009487547689111, 0.19012847506135711, -0.03216941527475374, -0.17265241492952857, -0.036626526966033413, 0.11828907037835129, -0.077253487513163063, 0.04910794244586042, -0.088365360868488049, 0.034692232042363554],
	      [-0.26489741712968851, -0.016037983258916397, -0.15478385413970339, -0.054519082640759414, -0.11072137606892071, -0.13806773721053522, 0.08315118429370677, -0.00084688851852063318, -0.066659068943074468, -0.014543116847374027, 0.052713555008319181, 0.02738844249422287, -0.14573813333209454, -0.069109651372657108, 0.0058712282175771742, 0.038653027715924451, 0.035448688300325895, -0.027970894206667783, -0.0058316372883610388, -0.012350421356814981],
	      [0.046354114624841548, -0.20340754175093081, 0.067448564665621949, -0.041981284856941324, -0.013920156097499539, -0.049310247697232024, 0.10476409205774134, 0.16148555792101416, -0.057377287008889992, 0.068718208751115062, -0.055874799238903254, 0.29988249724968391, -0.16587089947669748, -0.018901809319898571, -0.021824056547298361, 0.010150208790264993, -0.15609860291657318, 0.1312205105925727, -0.13142200190156222, 0.1313708927136652],
	      [-0.20187217065452481, 0.0034527151175131731, -0.14526611889720326, -0.05454907575651035, -0.077670454771007258, -0.099693213880673814, 0.11162648299874731, -0.02756432531919592, -0.17000009910036681, 0.05281736505253104, 0.0046486044929276646, 0.1380118729404875, -0.22662371465236356, 0.025099449481837843, 0.057390225910467232, -0.010585092198184265, 0.062813389289858523, -0.066384169837743451, 0.029034161785279667, -0.11014692197967303],
	      [0.059919400550256997, -0.17456494999571195, 0.045546642557409332, -0.02138218670533986, 0.056054364424078185, -0.055753394121748678, 0.050949925906493082, 0.14366157895544562, -0.05830434414633804, -0.039881695287267399, -0.029733515204826259, 0.24120260128368567, -0.15389614651721623, 0.099337119716714856, -0.0079105830001858224, -0.091413272768399764, -0.17108589062548851, 0.079535911804176379, -0.070080057453948172, 0.10304814751540158],
	      [-0.11406660762823512, 0.0077005020180582742, -0.09712804940172437, -0.048797807796913756, -0.034682059363515927, -0.034999010561767685, 0.08692061344032842, -0.095835584563062681, -0.20896282413005149, 0.082039982644742646, -0.038156988159574197, 0.17097326940727633, -0.22949142171270936, 0.12076557157672954, 0.083445432006383657, -0.068849538566075189, 0.10657376324662199, -0.11111649307286262, 0.14356689523278729, -0.14730065680490895],
	      [0.050548778821860631, -0.13771378257629774, -0.0080120262544440511, -0.0015714671798822168, 0.11898190894868126, -0.070033187766031402, 0.016790814058871895, 0.1115574984393187, -0.082310332466199038, -0.17681195482737475, 0.031785253577691228, 0.1357465923958473, -0.030874986613362576, 0.14056871465194681, 0.01192742650959086, -0.12276147059314364, -0.089723294438478984, 0.026135494001851646, -0.012284577171365987, 0.045455675500381779],
	      [-0.010279976005766538, -0.0013953711369666941, -0.04250049853613809, -0.040683978397024659, -3.7807469383838166e-05, 0.035049138884785544, 0.013909369315673437, -0.1642247505591371, -0.15344312139650054, 0.063720470459392275, -0.0320687619302093, 0.093030342984283365, -0.10431016285986502, 0.21547866370529961, 0.062045477425420881, -0.097500495716327684, 0.082375488307347727, -0.15217807555912072, 0.21187698224878029, -0.078833239119551118],
	      [0.020506937371916202, -0.080791931896572647, -0.076177957918269826, 0.048751387201977775, 0.16094247296613129, -0.084899633131099411, 0.019595650306679674, 0.042553966112101993, -0.09219934929892451, -0.29635110512711466, 0.068276859562881098, 0.016316501361075333, 0.097753223293390701, 0.078153996089610878, 0.043342705639799292, -0.075376215034118968, 0.033022672135110301, 0.059877672085514894, 0.024112321053863524, -0.088305909642851566],
	      [0.040972435984073623, -0.0012967065227411441, -0.0020002072259834333, 0.0014908104373190423, 0.0030002881861055167, -0.0021443336138593531, 0.00056119264462986193, -0.19612476201187881, -0.0017679409974512839, -0.005915857570869501, 0.0012463328686438402, 0.024610291061966494, 0.0022006976231346842, 0.22487906560306467, -0.00058423344006947042, -0.082013296389981449, 0.00042633285032667168, 0.0033161283064071234, 0.27617149440602085, -0.0016608591645283499],
	      [-0.00080695403900045968, -0.065839220606613555, -0.10155889748442845, 0.075694689232978118, 0.15233719604557805, -0.10887679778045856, 0.028494100773441226, 0.0038626863414954055, -0.089765768359496567, -0.30037286375515754, 0.063281539229365746, -0.00048470083109641848, 0.1117386345766342, -0.0044290036927669973, -0.029663978449883902, 0.0016152557001810619, 0.021646704240411981, 0.16837372165287368, -0.0054392104719929515, -0.084328775256603178],
	      [-0.011079460967186748, -0.0017868787382064001, 0.039468046485298627, 0.042572005521116126, 0.0063748590623499482, -0.038364866443237666, -0.013127007549216979, -0.16577295084318866, 0.14969379516837522, -0.075339827378120047, 0.034732282019907856, 0.092315739679176251, 0.10807828706143377, 0.21223426285676972, -0.060290750609962682, -0.09445696025894304, -0.081011345255935258, 0.15441773571152759, 0.21076325569431353, 0.075295075514214896],
	      [-0.020086262263831419, -0.080784221136093515, -0.077792332238160178, 0.047111656712928704, 0.16081617519949246, -0.083453740869734394, 0.020128133010894365, -0.0360546459811006, -0.098169645018887586, -0.29361230607088495, 0.066961209884496664, -0.019966901109739643, 0.093570222859445912, -0.086577822140769686, 0.045752123360719078, 0.0791568260887245, 0.036240583447840397, 0.053839253272887647, -0.032436240265909071, -0.091341473993148653],
	      [-0.11596849930813256, -0.013116985772102267, 0.096737255583673187, 0.048698089400280059, 0.039340055065449797, 0.032214325050749303, -0.08619207218565357, -0.10015382155604448, 0.20555982124599514, -0.088938300452201954, 0.03937893647811963, 0.1654956838827967, 0.22809775661613474, 0.11513705136942748, -0.082911080726013248, -0.063962435697576758, -0.11002395504744786, 0.11205940383716617, 0.1439392637120111, 0.14897623582114547],
	      [-0.046018226654389961, -0.13730378118266232, -0.011830212484348301, -0.0034916534255774868, 0.11752403995019094, -0.071356957547947811, 0.020200276481911836, -0.1076974779384491, -0.090474375313770575, -0.17344452956176146, 0.030258179923130457, -0.14237336413481283, -0.039887226837474088, -0.14521482782108197, 0.015203825792165698, 0.12537720862495605, -0.085457392267481364, 0.02174003429599114, 0.0066221299522591405, 0.039620488272067433],
	      [-0.2040749366376528, -0.010323501069181723, 0.14694685748653932, 0.053664853798831569, 0.07981735270651405, 0.097420623037042547, -0.10953377373376602, -0.033199598310539855, 0.16757254284815026, -0.054346740346640714, -0.0058157513624386148, 0.12840753724004372, 0.22038833739666719, 0.021168603923268747, -0.057657198208393295, -0.0069775024105939165, -0.069501154359836337, 0.069464401864851408, 0.031771035766236862, 0.11411900652766432],
	      [-0.051924253325491068, -0.17429362677494198, 0.039791494349163466, -0.023513465098568491, 0.052952634705427687, -0.059635560339677464, 0.055305687484985627, -0.1424648306435416, -0.064952853084940268, -0.037771093229790866, -0.029527419227873053, -0.24644974400170233, -0.16270006974558165, -0.10024837118797988, -0.0056447186125896803, 0.091759168888906895, -0.16847994951283402, 0.076860367844075961, 0.068882496250225952, 0.09863121958635232],
	      [-0.26651717704026873, 0.0080164106263588761, 0.15731959607269588, 0.052823798159396113, 0.11008740922723979, 0.13601908508035385, -0.078961634198715797, -0.0072046965504718591, 0.064348155222560377, 0.017237605925488529, -0.054872736396182065, 0.015559383693739215, 0.13909397820541167, -0.068311802263162552, -0.0067259934445731695, 0.038223390076617916, -0.04156755263603501, 0.033115987080266057, -0.00065239724213180667, 0.017513549002972584],
	      [-0.03588787939011167, -0.20388129416118475, 0.061301672646978556, -0.044095407904282118, -0.018268995429649042, -0.05470840045462301, 0.10795691158419214, -0.16132698157729128, -0.059957480403291671, 0.068092285932813801, -0.053755882208369909, -0.3007283566909435, -0.17148068120730831, 0.021608331263090086, -0.021575953678715676, -0.011664293426726147, -0.15458176445677577, 0.1300174016145369, 0.13154970526426454, 0.13078272042359684],
	      [-0.2809471673004571, 0.018293619273973799, 0.13596157055287497, 0.046378029155166152, 0.11163412106971948, 0.16295080001590137, -0.043691675935328148, 0.0056329745488485471, -0.044813277771594974, 0.11695075889501491, -0.05641913180049743, -0.053720719978482434, 0.03610146135197502, -0.12627443909954122, 0.0094131173123349898, 0.034624267714095353, 0.0078957648480725562, 0.014575180101932733, 0.014576471105685423, -0.029156635373887185],
	      [-0.0030095351372760588, -0.25957232272307262, 0.060301707578672363, -0.04779944544237455, -0.081491244326026321, -0.019147559060772947, 0.12652610020709304, -0.11922977407437629, -0.011914602642074834, 0.11591728350468518, 0.013241249151964583, -0.18815914671221168, -0.033616973409560061, 0.17776230094115714, -0.037025879925952965, -0.11974525580807824, -0.077624578833955071, 0.048571714178185676, 0.087859549048355606, 0.035868084615777118],
	      [-0.27417464809767067, 0.028373991287752209, 0.13680799115243847, 0.028167150771118182, 0.075677341587864086, 0.11630896046960627, -0.031762513797499781, -0.002563550650307844, -0.068884128538267364, 0.1995800873684675, -0.046920279658476186, -0.065299807041030028, -0.070746960308591109, -0.077549936108553166, 0.0094610434231444662, -0.0017650943059575458, -0.014997421039161352, 0.0095845597607114308, 0.019152234841120983, 0.047434694682454287],
	      [0.010864613936708935, -0.29208790595457063, 0.055821178220925659, -0.041705477694428728, -0.099230722224523796, -0.010829050067781528, 0.099749938133941091, -0.12644476780740671, 0.055094856748521673, 0.13773729035274815, 0.020908213939107564, -0.11344971939308535, 0.11591336845781641, 0.22976959221520196, -0.026421533223327465, -0.14288458971934956, 0.10419870157452782, -0.0318976338136387, 0.046918481646092865, -0.033299284419085695],
	      [-0.25837833137347876, 0.038422717347508448, 0.13962647397057357, 0.050103509953396942, -0.0044594765706110371, 0.020603827321857861, -0.02216219920682656, -0.021309114011150192, -0.0010917590066734501, 0.2418230933395254, -0.019386994764398195, -0.016717109149155869, -0.053464810497761417, -0.085429543562532892, -0.022162591507878665, -0.09622067935685491, -0.045705099076477906, 0.047393448869087945, 0.0048328631429115712, 0.089322356732992353],
	      [0.025564398752122981, -0.27731664250606558, 0.037588786187509049, -0.019579739085062099, -0.095765482451470027, 0.03667599404697252, 0.029813530107823345, -0.12943556489477503, 0.063961254324508471, 0.083897561937034196, 0.032649943180716366, -0.019599083680427811, 0.27525863734504508, 0.13388072923874367, -0.0022735435936609982, -0.061470425631865222, 0.23995133451147066, -0.14924747016700576, -0.036275296743394379, -0.13314032633541523],
	      [-0.041103875384795478, 0.038239853031118279, 0.089308340197752648, 0.10751656645645798, -0.15823655809172577, -0.20815985286534691, -0.056779787102027732, 0.031965366692216453, -0.036292401444057432, -0.01028392045647775, -0.22616361790176892, 0.0035659176428170783, 0.061194979549606385, -0.077356786233732905, 0.10905509076128247, -0.32122938814240976, -0.062436557004036941, 0.045060861466935012, -0.13893160149555642, -0.075946865540707897],
	      [-0.00058625790621224356, -0.028013371862265588, 0.033925327852879071, 0.096975699528199108, 0.12885275561493442, -0.1343267701212868, -0.054634853688639656, -0.18670671387006435, 0.12024253293549851, -0.016775889537029812, -0.37344128248102121, 0.16617216199661805, -0.043638146038944767, -0.021518964566529398, 0.088330233282570475, -0.099975305795148767, 0.11085010836922597, -0.017708386232239637, -0.082914213924979024, -0.0077088662798212998],
	      [0.027140406330796465, 0.023191258515235343, 0.068434406926246014, 0.071893202281616386, -0.14539857122015881, -0.16792155660430991, -0.070781226760149307, 0.066657108411771637, -0.076044747467265861, -0.034879855298791729, -0.27800383194452666, 0.061320468907899509, 0.072299824382141803, -0.023704580444342142, -0.04401851516889442, -0.27110695514654515, -0.046476184600678129, 0.00043869932085638733, -0.123130650146417, -0.15560608030108736],
	      [0.0076812184072904523, 0.0270311651114079, 0.051859835503390045, 0.093607017053067176, 0.23700136702110891, -0.11818205744677762, 0.012899446976310756, -0.13978186955176913, 0.10628086971480236, 0.053511612608857485, -0.1084063259342577, 0.14453111355415171, -0.046948170771035469, -0.028787155822266295, -0.027495091326601381, 0.054014240557880865, 0.070313223463565402, -0.078649587711269939, -0.033769719376426907, 0.11645995186870747],
	      [0.059718922428571741, 0.019365231759092102, 0.039768313524315972, 0.029429966402313459, -0.099502797903459367, -0.095192410148050341, -0.037385318448383657, 0.087589530307537841, -0.063223996440049848, -0.023055656510996579, -0.11333588796545234, 0.070632460945445522, 0.040519800690015498, -0.016140269978734072, -0.20118930063482968, -0.13465123232579196, -0.11306409222256064, -0.21054801092291384, -0.043694131861398491, -0.05304245009937468],
	      [0.0041644730679859399, 0.070451588741912277, 0.057002625903047041, 0.12331122141071403, 0.23820814567299181, -0.13581472991575944, 0.032580608751462875, -0.092174145754420192, 0.027563573177978199, 0.12746487446937488, 0.12378971431383365, 0.10985577224508172, -0.021825682517284502, -0.040456493338143169, -0.0041164909929070218, 0.063284870734335225, -0.0047004007689977496, -0.052424157462174416, -0.018129540228518343, -0.030724004702528798],
	      [0.072668914107824084, 0.016043138606478196, 0.026273691374946138, 0.003534210656636574, -0.059452568136465732, -0.049834770359896835, -0.023930069153882849, 0.10364100685763086, -0.062651308587342996, -0.0089580363305431388, 0.013307479894258992, 0.068490119380549511, 0.042476545594048995, -0.012886684482588185, -0.32344815313001357, -0.10205399447154681, -0.17376613813501907, -0.23316498095342783, -0.011128358009024508, 0.0081901718752386641],
	      [0.00094691433464800026, 0.086262349909223726, 0.056561901106857174, 0.14777082451223772, 0.20316466873179587, -0.15155458483522241, 0.024606362028327177, -0.059727599838801694, -0.081607162628284866, 0.20453126101362504, 0.20790338659205185, 0.061225806497161923, 0.028168686557436835, -0.03613120581327809, 0.026537321190343684, 0.0399906464556435, -0.049028578602568942, -0.014036011010793178, -0.0096336013044976583, -0.23758677297853398],
	      [-0.041048915985355559, -0.039313219925048652, -0.087903278890068839, -0.10361478783196754, 0.16318740146031308, 0.20270933480404102, 0.054584517473603988, 0.039292121166248098, 0.040998785186190767, 0.009615397758339965, 0.21128404722349167, -0.0029798466635748131, -0.062865767668902076, -0.076449491545646189, -0.10549253270595446, -0.31704376863591516, 0.066752841216077483, -0.045723181789561418, -0.13555912932484426, 0.075584434365469327],
	      [0.0022042609665398039, -0.026485960470782596, 0.037415518961758119, 0.1011339414049796, 0.12252229572983372, -0.14241885794880885, -0.056828178864929177, 0.18530329432091194, 0.11872027940742755, -0.017167807538024354, -0.38205683466253854, -0.16618370469188254, -0.041194763832225485, 0.024548186385952311, 0.09255575874027222, 0.112546125407831, 0.1083057171416579, -0.015920390263162824, 0.088320321679712793, -0.010693282303843322],
	      [0.026816912653847814, -0.022108926689108781, -0.066339365110991089, -0.068151690447571606, 0.154617702418614, 0.16313793805226023, 0.071234250106644068, 0.072109302523390373, 0.08017056572858236, 0.036959816474844275, 0.27351976347701962, 0.055582028975215948, -0.074092332445527556, -0.022552708724486555, 0.042901765024783274, -0.27302351570941347, 0.049208713355905966, -0.003535172477924954, -0.12170548706792439, 0.1600709991585626],
	      [-0.0087439103230266685, 0.027923354373289518, 0.054514211233918808, 0.096365207751641604, 0.23109253250922421, -0.12470228964547822, 0.010102445531173702, 0.13704885861179808, 0.10320420183042034, 0.052096726920325277, -0.1192686088871901, -0.14683351370610781, -0.044064970409795748, 0.029698195291400976, -0.029206990301820602, -0.043297565538332972, 0.068428704932438536, -0.078571322120720946, 0.03859177852602421, 0.11024267705524989],
	      [0.059508635688315326, -0.01657619560715708, -0.037493005500270155, -0.024551786635688039, 0.10880503745780122, 0.089770908937590918, 0.038639182155073365, 0.091150946000188748, 0.064260277665368251, 0.028056683600415983, 0.11812219496600855, 0.066252134990526679, -0.041347760355287144, -0.014534786232973301, 0.20087119446951981, -0.13703864218459774, 0.11279133483747732, 0.20832054150697926, -0.042946400162149997, 0.05179156411057094],
	      [-0.0065126653897697728, 0.071159456831373979, 0.058524291187230383, 0.12437439455627154, 0.23410551313326314, -0.13945759111788802, 0.031083302663808848, 0.088653843731240148, 0.025052764449437451, 0.12645821454533035, 0.11923113656771699, -0.1125517207508219, -0.020213297081514984, 0.041060640001920251, -0.012035091209235904, -0.057933925975352643, -0.0091486339462259602, -0.060673793152006633, 0.019835929550468437, -0.032788715505280473],
	      [0.07257527558866439, -0.012634132825075228, -0.024026201740383193, 0.0022869797091045522, 0.067406035601524444, 0.043828689541326828, 0.024880382727502041, 0.10591239790125603, 0.059389455848107335, 0.017004471070657168, -0.0051110016551842363, 0.066026250938385003, -0.0413344685392531, -0.011454031274301169, 0.32424222491809251, -0.10354947723779616, 0.17170089296042518, 0.23243149868662624, -0.010740406772858133, -0.017538756921170968],
	      [-0.0038075054296584183, 0.08682715010851387, 0.057552559849395196, 0.14779538878396109, 0.20066618261034311, -0.15339929104950317, 0.023645037900407406, 0.055600435751653965, -0.084010761179813057, 0.20401992821861864, 0.20826613944580338, -0.063875112688849336, 0.029819348392480016, 0.036610597346155127, 0.013781028965228558, -0.035941276484260015, -0.055832567903871658, -0.02320595540794813, 0.010064307647554213, -0.23708004052505138],
	      [-0.023504007886404551, -0.039047800473709746, -0.085567297317111615, -0.079150315989127945, 0.12465270020306099, 0.13891518919190615, 0.024300699494946811, 0.066995320302391054, -0.036811078599646774, -0.0058878608825939736, -0.090782550970527828, -0.0042989063216246773, 0.043496107700883378, 0.062508429522197345, -0.078226082145878048, 0.043008728528105333, -0.0069160402174302023, -0.042679506006784697, -0.01902871870181784, -0.015975265866074697],
	      [-0.0073612866881341606, -0.021107032591126607, 0.039763310309730814, 0.055625685982699735, -0.049656312820928236, 0.08481039531092055, -0.11231670001231263, 0.12600108757905643, -0.023631913679965172, -0.057175431216096452, -0.0059588667870986217, -0.12646241348822884, -0.03442652732340299, 0.013453138542856213, 0.017896987050537695, -0.076871198151648765, 0.010909247964377937, -0.022517785800987001, 0.0081302635992548909, -0.034045787038876937],
	      [0.016948514923620445, -0.02193513643769434, -0.063152363053562643, -0.05279979640116144, 0.10435342424836205, 0.10824853130712549, 0.033041462823043537, 0.08633503164767041, -0.015563261507495417, 0.0087724257539355619, -0.091029953142718001, 0.005261084458105819, 0.0074128482411619833, 0.12677166922406993, -0.010973650363561953, 0.12218436711438121, -0.032292648360242045, -0.041307828155396936, 0.0097001513532332835, -0.046119921825401256],
	      [-0.0066832172944956327, 0.0080822202324519078, 0.046932304539841756, 0.080999330413291576, -0.021246022388930752, 0.077223007894173301, -0.1208024553957209, 0.097572471349082826, -0.098662078545974516, -0.081071918722385755, -0.00075065076725868026, -0.10367608652818795, -0.10332194965606889, 0.018813730318266546, -0.010497200676673153, -0.061595641076937518, 0.18741244184973282, -0.10373942661667772, 0.0019642020598160115, 0.19296689375226381],
	      [0.0011332836074734035, -0.011108535310006282, -0.044177040561706557, -0.026937857839190442, 0.058202747644603162, 0.067660378971863971, 0.01252332721829966, 0.086955312557543449, 0.014537206052818295, -0.0024289122507333647, -0.067246547639804657, 0.010135633490719997, -0.021703799990268176, 0.059668358321338308, 0.090059081877064975, 0.058504432644668598, -0.095514911708738368, -0.060412988824551053, -0.017228627814190295, -0.065438091003328161],
	      [0.0015010210285302467, 0.012001351176920534, 0.026456098121273891, 0.050506276299144316, -0.059043613350488425, 0.092763446808496491, -0.059215687883914112, 0.051446206696285059, -0.03372817088174114, -0.013303363349763798, 0.052355162524900162, -0.072966497652211054, -0.013674015384355876, 0.03057299590116571, -0.00012694541907415412, -0.036559417235039519, -0.07723897190816445, 0.00060168847264390314, 0.0056980306445756287, -0.095808032622795122],
	      [0.0045410658335984311, -0.029739632923257285, -0.061285405847324483, -0.051928527681961829, 0.095878693787256303, 0.10776669151268725, 0.018083231455709298, 0.11656925567843941, -0.018095403188716327, 0.0028618652877730761, -0.1116403729402848, -0.0016145266116992633, 0.018507271803891171, 0.085962991157207722, -0.0049371044283928944, 0.10296554953916494, -0.034908946306265815, -0.032021722740051613, 0.026463113300104341, -0.058609101108032663],
	      [-0.0038940101674299864, 0.01249229063887494, 0.035153288200359269, 0.021732063618845297, -0.075236503021887086, 0.11222268661870922, -0.1223327365171915, 0.089597851601173534, -0.025863497436002837, -0.0013532772920339293, 0.037452430817598512, -0.095172396847614027, -0.025294237043152014, 0.0092336770328444798, 0.045197831390106642, -0.060782377972329979, -0.10825269327067877, 0.10079245210813292, -0.015704918925440504, -0.15393418284118934],
	      [-0.0022816888324770947, -0.024060777904828332, -0.064375093915972514, -0.051683675703232124, 0.082586761882057172, 0.10799981168598963, 0.011766005324578267, 0.13475702007336832, -0.022040198973617333, 0.002726563752619001, -0.078307843630374088, -0.00853731897183721, 0.018274693017327637, 0.14968884350468206, 0.011604584974515436, 0.20993316574217549, -0.039923368624747504, -0.056634414817972573, 0.061774450547349605, -0.10280319608126552],
	      [-0.0045581789111749909, -0.00066198929864758874, 0.030116361303995344, 0.052015237018933534, -0.057149166326883417, 0.10832378488024449, -0.12176894478021971, 0.094733181412691519, -0.053777107185287908, -0.066173515321594226, 0.02667771816372827, -0.096802491865775248, -0.073708163708604835, 0.014542543817590731, 0.0079362155357385559, -0.062350724930571956, 0.0114457464518416, -0.02293387196898488, -0.0045563429569467628, -0.014345756963712557],
	      [-0.02319593145002526, 0.038186433726972717, 0.08706661401447259, 0.081279187172167727, -0.12651124179728229, -0.13546806794789074, -0.028704304423922179, 0.061982096023738401, 0.035852029667403952, 0.0036320225960270566, 0.090477520800764724, 0.00068386220739691012, -0.044817915269828791, 0.06193024001847991, 0.078870109330660007, 0.046002165330352646, 0.0073402265804111229, 0.041759774758871937, -0.019334089807545696, 0.014622330486136953],
	      [0.0082810441729772831, -0.022628164438439315, 0.036363277368764858, 0.052466019430260261, -0.044709627260733048, 0.09021438636649573, -0.11127276398624342, -0.12854130381332382, -0.025063016988668928, -0.057362925765527095, -0.0095287923605207759, 0.1265336119507815, -0.032687178519142643, -0.01590396394734752, 0.014802970227304249, 0.075118124442728321, 0.010628470124414376, -0.024180821376674457, -0.0073747062951664902, -0.034648408127107316],
	      [0.017198522016467425, 0.022236361949753605, 0.064951340141844366, 0.055948184803736797, -0.10510905763267528, -0.10512394373069515, -0.03777241447816871, 0.082426181285644662, 0.011666390781661908, -0.011957815046176372, 0.090929803683901009, 0.0093392317964502772, -0.011475382834925737, 0.12593257195353708, 0.010551815031581582, 0.12451493177521945, 0.039646936943170577, 0.03719107313677409, 0.0096152888906913137, 0.053682193055150589],
	      [0.0060106898082263171, 0.0072122605101080043, 0.044409296126462966, 0.078857533847899383, -0.017120649032104904, 0.081425388748712191, -0.11940777277719844, -0.10089623131434634, -0.099198367818690861, -0.080663635662292399, -0.0043343566705041454, 0.10338853261811562, -0.10294994506346151, -0.023790752142643957, -0.010921145722281386, 0.056736886871193083, 0.18599558835956628, -0.10528546614138183, -0.0023446205569316245, 0.19100128644165718],
	      [0.0010733023256969559, 0.01157247180697759, 0.045184485859170752, 0.028905643369866726, -0.060482443709835215, -0.063955365071974413, -0.014845222571675594, 0.084862194545056543, -0.015853973269866806, 0.0019032111181755047, 0.069255873790655065, 0.013000816134354817, 0.021148557038695486, 0.058418279958511371, -0.08999424051007307, 0.059898583580402356, 0.092399570333022443, 0.06038983059651247, -0.017439626135533855, 0.061614920444553849],
	      [-0.0015444798414713842, 0.011554647683167758, 0.0246961186876711, 0.049406435936464904, -0.05670610296740488, 0.095355625030301761, -0.058676663018436867, -0.054830160517857759, -0.03312961518654288, -0.013388684721706963, 0.049666740963896033, 0.072510824197000667, -0.014517994556078053, -0.032898717753508326, 0.0034192131689155551, 0.034227464304296157, -0.080939956402453508, -0.0017775286940463495, -0.005015237764972166, -0.098310347613168508],
	      [0.0046908702369999706, 0.030208451863458361, 0.062622034091439752, 0.052743953778594359, -0.098766764690733908, -0.10326437154591862, -0.022886037597294896, 0.11295095822829268, 0.017062999846528665, -0.0029129309928138786, 0.11302847979225221, 0.0021341214358619517, -0.019488875651691228, 0.08553275343853213, 0.0067129322364770753, 0.10527899609166107, 0.030619444487241902, 0.035965574913564891, 0.027060969805652244, 0.052502519649912253],
	      [0.0037121867556401582, 0.011311610311061645, 0.032712925387670642, 0.019670534211132365, -0.071402951632534434, 0.11637895325503753, -0.12152584485104628, -0.094118262926394095, -0.026555943824720034, -0.0012395424097627105, 0.03302756727713687, 0.095162163403298403, -0.024545901145632716, -0.01261129372682537, 0.044968383374253566, 0.056680991926790526, -0.10954327798574533, 0.099453439107694774, 0.014650759610565341, -0.15612253139789609],
	      [-0.0021004419336657651, 0.024016053328674791, 0.065510998051054106, 0.053691686183182048, -0.084772954903796452, -0.10365082949147385, -0.016551511206833645, 0.13092241552622599, 0.019905643125049638, -0.0053300195908336321, 0.07929754711756351, -0.0047191176774989373, -0.021162766878001702, 0.14900015141933146, -0.011283098688825861, 0.21222541347290966, 0.040343082701711962, 0.055687478374924389, 0.061905950329526664, 0.10215861174289849],
	      [0.0046444851811399722, -0.0016088647336668569, 0.027558248660570186, 0.04993986434842837, -0.053853008893656552, 0.11249225413654093, -0.12121122997047816, -0.099965750296801714, -0.054603232503147428, -0.066014840536623001, 0.023573672637086641, 0.097063578004294562, -0.072931441095314686, -0.020425237513237268, 0.0083869895337177064, 0.054036292009652237, 0.0098648949467138435, -0.025146056897783802, 0.0021204516891783834, -0.018382489334929881],
	      [0.081810771753296499, 0.0013428505322772349, 0.00052034004062908137, 0.0014149728204025361, -5.5785446345156184e-05, 0.00050436857578441802, 0.00014499662069079183, 0.053461428336135319, -0.0023340734387916891, -0.00054673940084752561, 0.0024140020816934941, 0.050804016409159894, 0.0020717140421122162, -0.043036085806402301, -0.0041824626647224408, -0.048410973331845873, -0.0026616866809261075, -0.0028679704469060968, 0.023711183240833517, -0.00077900682440931561],
	      [-0.0016112669680105572, 0.068182145216188247, 0.026419842982680058, 0.071844095823552181, -0.0028324607335239714, 0.025608904825977018, 0.0073620856604533986, -0.0010529253262692335, -0.11851068329922455, -0.027760249058210628, 0.12256899523055254, -0.0010005874743438097, 0.10518959800104026, 0.0008475977185642829, -0.21236114512593507, 0.0009534563792407331, -0.13514497960633581, -0.14561887029600593, -0.00046699286059298517, -0.039553438859890044],
	      [0.093166740094738354, -0.014400575595609583, -0.02425869037887983, -0.036742157033356856, 0.00078129167135466688, 0.019454205498741453, -0.0039861327960365994, -0.02099317038141546, -0.038746820011047511, 0.022798678000079339, -0.026621044116277828, 0.0015937490043979945, 0.056984551915887666, -0.12002685484945716, -0.024167878123722158, -0.0052871980258868368, -0.06641761215588543, 0.13427170902105776, 0.12116397276410566, 0.017717186022320208],
	      [-0.0043276594230666661, 0.10938077275025079, 0.025032360614155796, -0.053334284454520042, -0.076358196693512861, 0.04166704372049216, 0.12200349265013893, 0.019618940666931924, -0.0087274878540610709, -0.02790569419575932, -0.0020209270918830997, -0.037179968015268169, 0.085756673591485144, -0.004389545295775843, 0.18879471579957491, -0.013536420311015865, -0.080458557180323409, -0.096480592550878083, 0.0087287715663233352, 0.10538650345322242],
	      [0.068925789004882776, -0.0038994871276475762, -0.038483088818842055, -0.053421640113207228, 0.020614388358821466, -0.02427508186739339, -0.033834645110336244, -0.0013678098316814412, -0.040894256133445342, -0.0036977002778182584, -0.022243390064701673, -0.0092915975150358755, 0.047028873154851922, -0.13509260700221762, 0.039418674703283973, -0.023948367571516027, -0.17001516730115412, -0.072578057599643309, 0.1202115539637188, 0.10088447004350533],
	      [-0.0035850918142771512, 0.098584534210232375, 0.036484755081029566, -0.078370073077591376, -0.060738169839910622, 0.024631053138221219, 0.11530991223411222, 0.025280805195852688, 0.02033204974869221, -0.017891370222691924, -0.012565485446069457, -0.029378799703956352, 0.056812766852860047, 0.016354624703901362, 0.17160493997741857, -0.027596329561658473, -0.057952679396500159, -0.014688921034535446, 0.0048945221808571505, 0.096282275263389047],
	      [0.082029257315952384, -0.0074757163649968785, -0.024317219559781427, -0.059450697624626736, 0.015388354923859244, -0.017755496878605441, -0.031009613692150929, 0.014232679001682458, -0.045997650792277849, 0.014613540618649851, -0.029813283030589052, -0.025341296256074276, 0.057084476163641755, -0.13353605511897121, 0.028972212579385332, -0.022874981819277038, -0.15035368981841191, -0.014709236489244142, 0.11573380339300179, 0.087448158866064024],
	      [0.0031065122369682264, 0.097354708154303596, 0.048803407878371549, -0.089656786129114069, -0.053981454541723428, 0.01618876328493523, 0.10550879640444577, 0.028379974224971769, 0.022378952453626672, -0.012573185226640944, -0.023347021041790376, -0.037642437913027099, 0.067803785546888304, 0.010191767475728952, 0.14003184385552006, -0.021789923937985227, -0.031733332445823145, 0.0074465847536980302, 0.0062392987933809346, 0.02754136582668306],
	      [0.1387392468659556, 0.0029894476997011136, 0.00093655830249406418, -0.00071956529721012004, -0.0008872730067093457, 0.00037083649983887671, 0.0039663222876059846, 0.011515406413235096, -0.001605791484448746, -0.00059454204947576147, -0.00015462731808354332, -0.021428183483375163, 0.0017941691288204662, -0.18742897143429363, 0.00028052668699122749, -0.061963185529603594, 0.0010059641470246006, -0.00058911793994807001, 0.18354627085177028, 0.001104489680699863],
	      [-0.0027324759423598926, 0.15178677915220828, 0.047552987208318576, -0.03653534359011034, -0.045050566340589578, 0.018828922114365518, 0.20138679301047269, -0.00022679646676340305, -0.081532758522211576, -0.030187389720664079, -0.0078510764992025268, 0.00042202907381617971, 0.091097480429496794, 0.0036914223402121347, 0.014243514709650809, 0.00122036783099561, 0.051077012598222192, -0.029911984964390393, -0.0036149523710262976, 0.056079566555546495],
	      [0.081843326175564626, 0.011303243144873897, 0.026219987228758131, 0.055874374446870795, -0.017501931484022883, 0.018379157328786692, 0.035139955952998056, 0.013104185338561095, 0.046843147349681404, -0.015097274885653114, 0.028870878407626664, -0.023839480142389981, -0.054370445929998568, -0.13383379839837584, -0.023436016295804645, -0.021999268190288232, 0.1489875979432729, 0.014991037574045143, 0.11539838184369516, -0.086295907464403285],
	      [-0.0063339904172092188, 0.096984855670291956, 0.047808075231963468, -0.091928118806094347, -0.053333678815841917, 0.015477089583819052, 0.10420597754290616, -0.028918375044037915, 0.020550448601090406, -0.011988029328599841, -0.02450280834026132, 0.038611055599596503, 0.069998895439423989, -0.0049259057318324553, 0.14106402636925069, 0.022673724386324326, -0.037628873079354773, 0.0068616364698298798, -0.010791457969181364, 0.030963263322166375],
	      [0.069013500164363681, 0.0077782114133199123, 0.039889826275969542, 0.050294404698156978, -0.022989956636996347, 0.02522610009548568, 0.038348713762754429, -0.0023621762657445875, 0.041663113891177821, 0.0029903632691728448, 0.021731376833849146, -0.0081276070323543018, -0.04475541031321123, -0.1356318045872692, -0.032631192325708366, -0.022843195367171557, 0.16760144609996055, 0.071943400497696125, 0.11992561030559708, -0.097015137991933759],
	      [0.00086837107609009359, 0.098354541392438252, 0.03494119686036181, -0.080412765420858859, -0.059879380230085794, 0.023656125049108481, 0.11388825761211437, -0.025207342945575004, 0.018706078492882101, -0.018023091946400036, -0.013431570532555042, 0.029721871750519709, 0.058620462599582583, -0.01102269478220743, 0.17302396547131629, 0.028517891577622866, -0.064602054354914035, -0.01753527789696872, -0.0096240348389936663, 0.10017991728015548],
	      [0.093264891131244823, 0.01869625635332417, 0.025225522728041395, 0.034613636044571898, -0.0037872760428480719, -0.017798486629238417, 0.0087869071633989888, -0.021749382668845366, 0.038373129017708049, -0.02387977956539547, 0.026520826150974057, 0.0030564676199522, -0.053563707436167715, -0.11976093779742616, 0.031582894163982841, -0.0047501037484688367, 0.063198064822796177, -0.13796648876910192, 0.12072631763615553, -0.013553871931192441],
	      [0.00065587974480378023, 0.10872892910029817, 0.024057766727453193, -0.054739640129557052, -0.076268218539154262, 0.042400737230636511, 0.12175192703198599, -0.018777124089696604, -0.010246368849578542, -0.026986359795397864, -0.0030675587070682357, 0.037088381781813853, 0.087933926719009473, 0.009112177063499604, 0.18769670173732864, 0.013734105437928577, -0.08301134398793153, -0.091118848539309905, -0.013492812125432366, 0.10600238839912123],
	      [0.15198329888645534, 0.0028006329231055624, 0.00074600501456857128, 0.00047877576221698378, -0.00028276186426712897, 0.00046544182592499889, 0.0027810265190758971, 0.014577335068213435, -0.0023713561635063558, -7.4399427398391733e-05, 0.00042809416639977911, 0.032335351595210671, 0.0025660999077709401, -0.11258044828872535, -0.0019629261392470339, -0.068299111724211686, -0.00085203598771659819, -0.001085913705477137, 0.13519669471746937, 0.00036773380244120628],
	      [-0.0029933181650393316, 0.14219986221144601, 0.03787779876667053, 0.024309450501608269, -0.014357004020670722, 0.023632430715189428, 0.14120436296966274, -0.00028710129453176221, -0.12040368336844545, -0.0037775705046386573, 0.0217361336336362, -0.00063684625884668155, 0.13029163882764647, 0.00221727718347658, -0.099665980582218289, 0.0013451541931120844, -0.0432614353180815, -0.055136386499758307, -0.0026627052124549278, 0.018671385173615346],
	      [0.1316377984929808, -0.02362242079673707, -0.010985661443978204, -0.039968343205424334, 0.011570505836073249, 0.033205834150693059, -0.051170416514177627, -0.014142357469543666, -0.040076184864964268, 0.014047529939951571, -0.038612435433181186, -0.0061341283358575102, 0.019089531531501298, -0.16518066221941546, 0.03038866293059846, -0.0032824916332468497, -0.11074112146459174, -0.013923765545995706, 0.17523174961640861, 0.020527889008506092],
	      [-0.01333077899561892, 0.15174038102342471, 0.050439117821201064, -0.032633802973101728, -0.024681537713083592, 0.047849917736861383, 0.19726449414187786, 0.024421895341756646, -0.12826274594269291, -0.0096122374810214146, -0.051464351914932593, -0.034670744528944086, 0.12764585703241688, 0.0036731932047622887, 0.04396417565977026, -0.024460064437484951, 0.038083140431675586, 0.0069072900028640674, -0.0048465499204577989, 0.038264694747099537],
	      [0.13206061186311063, 0.029578852069042368, 0.012963173373203693, 0.038652398078394837, -0.012533364143145624, -0.031296001493739657, 0.058897988383271399, -0.015092997962523761, 0.034994783686450703, -0.01441511635728865, 0.036556092321482714, -0.0047642170603121895, -0.014048695159930489, -0.16519719776774375, -0.028634015353771358, -0.0023168354615989029, 0.11215475975367495, 0.014184941121037223, 0.17528669136738098, -0.01900530438792368],
	      [0.0081372264961395695, 0.15069257947128609, 0.049967444401719879, -0.034182242142128616, -0.024206810868850334, 0.049120284400353223, 0.19509669177023312, -0.023846103652028865, -0.1297412721720777, -0.0090516643337693273, -0.052944799577375898, 0.034885387950180834, 0.12829851595375544, 0.002833614167307253, 0.045126630063328788, 0.024570343445953734, 0.033693195647928866, 0.0063536877131480183, -0.0020569271343593674, 0.039043302836162586],
	      [-0.0038309214028131441, -0.006327609729933484, -0.052088333861299019, -0.18060229644188955, 0.066849870072778358, -0.12575488626154094, -0.2125060648853131, -0.073443087091755968, -0.16677568935528311, 0.074329338740259696, 0.013077140393708553, -0.062464753970647387, 0.12874919357305487, 0.012954480511230384, 0.029466872112777671, 0.0018815134527229026, 0.01668552514963443, -0.033447189900894674, -0.18253121075591622, 0.065848575934592049],
	      [0.0040363724128006729, 0.0054285031489339237, -0.044557203531833921, -0.17695699954660296, 0.0049670275463198459, -0.10595366487499482, -0.15416871677359822, 0.058039359533206859, 0.23028436557624588, -0.0065144055070889047, 0.086590768314136965, -0.058097017518508931, -0.016970687725788164, 0.018175711463983675, 0.14783066559284957, -0.078001208441342826, -0.097636412590754701, -0.23238594617718841, 0.021669545651174356, 0.02589071093035987],
	      [0.066274862156580475, 0.010935323985695435, 0.014806079420386867, -0.12123528814039794, 0.02855589378925754, -0.036047598017287408, -0.10364050007965218, -0.075579190193593049, -0.14632862610243588, 0.04639984248265229, -0.037991214935095025, -0.05285698609791422, 0.077592314922658084, -0.036722314655055044, -0.06038133373732392, 0.045720314892436477, 0.040593347514767376, 0.17850961871979443, -0.11243932211559991, 0.010951767221505329],
	      [0.00064917569290233825, 0.075925963194159299, 0.0174751696005488, -0.19376068891082923, 0.0040828318816701452, -0.031841460036281556, -0.044576969573996782, 0.030139223137968539, 0.14151154571182542, -0.021340478372072667, 0.010565323177547331, -0.049083297160211432, -0.090521299110574008, 0.019607952775614269, -0.10735829803366925, -0.035450005106403344, 0.0033882421104407122, -0.0017408685781109632, 0.013726786778436431, -0.052913524981135822],
	      [0.10398820287198415, 0.002555304662503209, 0.0092925475363547921, -0.039068549667282911, 0.0011161779327457165, -0.0035912785865321356, -0.041179596831509013, -0.062868314541723383, -0.065948016538531801, 0.030964888548817092, -0.014728513450262418, -0.042241476052874177, 0.064679635499551844, -0.073966411482394828, -0.027365421654483347, 0.052599561053486892, 0.011955557066130695, 0.12005062922777424, -0.03260051882859781, -0.005169167432061912],
	      [-0.0023092618200368058, 0.1119484805026983, 0.046231968719573899, -0.16547162937327961, 0.0046113699175225863, -0.010780969312844432, 0.051679447504111693, 0.011460267729800142, 0.08980407463741813, -0.034390966251272775, -0.051200507366371613, -0.020256685820207513, -0.08342543815233526, 0.0026742274714927723, -0.23595294011547635, -0.023520579545326849, 0.056009972045851487, 0.075816529529921281, 0.0087273605289674705, -0.033058495383148763],
	      [0.1120645151564317, 0.0022079729500584741, 0.00098928742937460612, -0.003301014092801275, 0.00025018449162577777, -0.00015106332155457444, 0.00091684303783099363, -0.063279768671292175, 0.0017042671887136874, -0.00032171922161875388, -0.0013785209562622491, -0.052334921761096997, -0.0015448840382170492, -0.053191625186315088, -0.0044536651788212962, 0.059985955751636004, 0.0014679630382097369, 0.0015595511447703578, -0.019700230648099601, -0.00085419779416753654],
	      [-0.0022071158563591849, 0.1121080333929546, 0.050230265803129975, -0.16760630973155033, 0.01270291438164515, -0.0076701174698927919, 0.046551960656267183, 0.0012462979974182488, 0.086532782431857316, -0.016335032202010345, -0.069993282025136702, 0.0010307387266987771, -0.078440232404101987, 0.0010476115406416152, -0.22613123252942074, -0.0011814261982336107, 0.074534631098160928, 0.079184942827846119, 0.00038799696207817563, -0.043371199284965904],
	      [0.10399848794160393, 0.0018546282231649443, -0.0074649658195946539, 0.032522836809174546, -0.00093374048841793583, 0.0031639948630730577, 0.043182531456502818, -0.063270806840101071, 0.069432893861544234, -0.032295013728537755, 0.012701080887017291, -0.041411114897206752, -0.067914338774211269, -0.074014348575406799, 0.018053595514753489, 0.053484889263948468, -0.0097409030935217272, -0.11697226908769014, -0.032918875737885253, 0.0038634864930026259],
	      [-0.0017870457628367537, 0.1119622803578736, 0.046562008727237675, -0.16688162507129661, 0.0046517431565028695, -0.010914014738721261, 0.05001793145007153, -0.0089759518469328132, 0.087137741288496093, -0.033145059523410833, -0.051740734507055609, 0.021904227503264234, -0.080813993640496004, 0.00024026050450727578, -0.23684746977845314, 0.021431241345078487, 0.05643728484132754, 0.080484706574742798, -0.0074369529950133462, -0.03323639392378238],
	      [0.066197905559296805, -0.007937272624853435, -0.014106515811415555, 0.11351197925830203, -0.028372988239404456, 0.034765891745263566, 0.10180491786473986, -0.076707305856766231, 0.15178714152250369, -0.04720413741476337, 0.038377760867838853, -0.05088335009753632, -0.08109640280587968, -0.037465896519152928, 0.056107295015633704, 0.047080696866891356, -0.040428456400197134, -0.17843973287559281, -0.1128926164266072, -0.013026734771989946],
	      [-0.003258233035928045, 0.076297659865239037, 0.018044604513067886, -0.19838404729853476, 0.0052040488702490692, -0.033236135022211573, -0.048623226669103181, -0.027139933490635631, 0.13564014175458514, -0.01949694361924361, 0.0090612326347666739, 0.051126467923420758, -0.087395917408481461, -0.018146812493972552, -0.10965254701379751, 0.033622284848530311, 0.0049839703200505025, 0.0052892655613498776, -0.0092888637319964926, -0.052441267265233169],
	      [-0.0039868820031456502, 0.0065364490733629474, 0.050293508064377906, 0.17349459134769435, -0.066602452923475206, 0.12148545825215637, 0.20627090330577347, -0.075671422129284432, 0.17571376211231018, -0.074528200706336797, -0.0096575032954606538, -0.060128753635612778, -0.12931756777555675, 0.012228769086885426, -0.02362321502366381, 0.0049513379063351008, -0.020517001886349622, 0.024271097161742621, -0.18324289428534218, -0.064778069009668593],
	      [-0.003882400409842432, 0.0051751449104026556, -0.04657361868699695, -0.18393095427827572, 0.0075953772763110682, -0.11082307499956565, -0.16241654870757216, -0.055102542314522565, 0.22353901984468466, -0.003582649320105733, 0.08703852818268723, 0.060511502372577727, -0.011888050816356367, -0.018671696740185807, 0.14887627733685901, 0.077866635114920285, -0.096903707084442264, -0.23352271053475368, -0.014465607580724772, 0.028463408799233134],
	      [0.030970322681001344, 0.0047092200014083761, -0.0075287381199665099, 0.16357528456660905, -0.052689892202482637, 0.089603666894719117, 0.14218940432389821, -0.10513747604797508, 0.14519927390557394, -0.054724870498712809, -0.029363608692248001, -0.050838750489416849, -0.061890285829241144, 0.044141490765737125, -0.050417517293536961, 0.025015137007616546, -0.016424178217207281, 0.044950698551189411, -0.2067799302490973, -0.068404093672558383],
	      [-0.0061910554636544247, 0.025490142152652336, -0.17773317220354787, -0.011649348642623007, -0.033779282406239355, -0.037805216091529065, -0.10672838541759473, -0.042820997106558227, 0.11269092441672976, 0.087330253747772396, 0.0073968040077101753, 0.043681348504218676, 0.017817631930504733, -0.025762018942079048, 0.053616783973747938, 0.05392914604451754, -0.045882436605483475, -0.054493601747828906, -0.018289999358621918, 0.050792370931913529],
	      [0.072541861006159419, 0.006476680970671134, -0.026270676170072199, 0.11039354583740993, -0.034051788978890947, 0.048185260694194772, 0.068956955964512401, -0.088822070980787649, 0.083965194657350153, -0.032425744904939727, -0.026027916755625602, -0.062975614492549584, -0.033734092336045483, 0.050170467939578731, -0.0071563112069314367, 0.036377300918928768, -0.027785475091142361, 0.045788377840654343, -0.16056788078199066, -0.044453878673682577],
	      [-0.0046479508538619374, 0.046087217023970839, -0.27900795030851655, 0.098063569589822888, -0.061903898032388743, 0.015660875349017691, -0.064717698941130067, -0.035866374649349185, 0.014465297947944376, 0.15613902852083919, -0.056401659837762089, 0.029190158094928927, 0.06489892032450216, -0.012065605931256339, 0.018024896454018453, 0.032618292440983028, 0.022591293266887181, 0.09812652322448133, -0.011371173195259793, 0.053107627097234475],
	      [0.092348192058670925, 0.0010952096884211909, -0.0059954126082538226, 0.0025490185537617518, -0.0015525730855718725, 0.00060010147540871892, -0.00090016832239136872, -0.096893901856154083, -0.00043212015089025225, 0.003109771883908815, -0.0013362209789642928, -0.068512309872291427, 0.0017057933812730085, 0.027410918821544273, -0.00020315778991813945, 0.051832972363327026, 0.00062915076693509831, 0.0030023947570177061, -0.12667198858307449, 0.0010261238764925802],
	      [-0.0018188019527347944, 0.055608382484283542, -0.30441220616984355, 0.12942434694989627, -0.078830637539146028, 0.03046966505748637, -0.045705315521775092, 0.0019083299193569704, -0.021940549726592977, 0.15789614188725432, -0.06784553503059583, 0.0013493531405928255, 0.086610273619572284, -0.00053985932553349931, -0.010315171793919409, -0.0010208528098808126, 0.031944619243145525, 0.1524441554727779, 0.0024948107272665665, 0.052100606489871464],
	      [0.072668617825301429, -0.0046569824991961615, 0.015264415714518009, -0.10644670145937027, 0.031587927348150538, -0.047531249409710249, -0.071451728359471056, -0.087340958401163751, -0.083330512075594679, 0.03854854525064836, 0.023786927187687674, -0.064076134823726288, 0.036263315230795352, 0.050606642360040699, 0.0078604886212777329, 0.035064751329812231, 0.028653455870299018, -0.041889155266448416, -0.1599956242713681, 0.04651050844387359],
	      [0.0017880236959115089, 0.046306495045648009, -0.27982598588173846, 0.10233424838085241, -0.063196675309032335, 0.017546016482861838, -0.061952343350116838, 0.039335913735030842, 0.017760194700190777, 0.15474118656366273, -0.057382765514220439, -0.026687867962290814, 0.063520318115506472, 0.010080796040363754, 0.017729139880527298, -0.034025346994416339, 0.021479725887446274, 0.09985333633117191, 0.017684686388847928, 0.05131607924740187],
	      [0.031190077233784839, -0.0037018982930456636, 0.0005246879936731259, -0.16390712475261301, 0.051318978608620253, -0.091022753824708383, -0.14628154898705953, -0.10336987404471408, -0.14064948860692097, 0.058121044994734826, 0.029632085365876047, -0.052519270838883962, 0.062543856649474996, 0.045121634388888533, 0.052489570288457181, 0.022872287624848182, 0.014604828763976164, -0.047061515545538023, -0.20589940927102812, 0.070350987521525382],
	      [0.004966803486139159, 0.02565579952003115, -0.17789178480673115, -0.0051995673065931896, -0.03582774197123851, -0.034247770305137808, -0.10104693652841799, 0.046927559098234456, 0.11832072913574611, 0.08510774817530592, 0.0062348810597435385, -0.041645707450159532, 0.015366895686711617, 0.024003977526008316, 0.051590024080869948, -0.054872291107689583, -0.046493554346182915, -0.052681416896737082, 0.026417738211326147, 0.048059583131722365],
	      [0.057822167916677866, 0.0015818691524278872, -0.0086989311774794305, -0.10253564278062774, 0.025956947528960845, -0.056268310823976389, -0.10131954273559655, -0.10023331381082408, -0.11388888765265529, 0.05842928132354492, 0.015546668169134321, -0.071095203622811659, 0.06231399292864441, 0.036858492295635148, -0.0010999714881740621, 0.026105216445068306, 0.061097310720830501, 0.077303858214289992, -0.18755963663306235, 0.047389410510084273],
	      [0.0013806130436272196, 0.028279785525396724, -0.24779758418898035, 0.092947078419168605, -0.038757957330367888, 0.0028008391133760783, 0.01252921060623961, 0.044696812467934832, 0.077376575265403702, 0.071988012448027799, 0.010778528628600051, -0.031045644082364751, 0.0010043548601519081, 0.0066662232244777365, -0.12622795800741801, -0.045083852480253137, -0.044807980460019228, 0.017776390020602231, 0.016228237723703562, 0.056646065257650355],
	      [0.08743934914534307, 0.00080254649884021882, -0.0057786355332734261, 0.0027136736414979869, -0.00091802840943314655, 0.00011137735951005171, 0.00064188936915962668, -0.10811931560815041, 0.00033513970260685885, 0.0014622751318325126, -0.00028756414198402813, -0.059023549879327397, 0.00068450082974115685, 0.025379280968380467, -0.0033295795726401762, 0.027241769541909207, 2.5402298056486418e-05, 0.0016213486083215725, -0.13466444154822188, 0.0019403531333068763],
	      [-0.0017221220624478687, 0.040748646711902918, -0.29340552623742644, 0.13778457530947336, -0.046612146936721104, 0.0056550949769633985, 0.032591411425749707, 0.0021294149671227474, 0.017016446225115087, 0.074245832271085804, -0.014600835771580457, 0.0011624715696626617, 0.034754973731009088, -0.00049984612319328887, -0.1690566987716989, -0.00053652792257516575, 0.0012897810540676788, 0.082322658852477748, 0.0026522224614447111, 0.098519854537740509],
	      [0.057722966076044338, -0.00046713096417426854, -0.0010648000347449808, 0.10611590201326676, -0.02746290579936882, 0.056334957908550129, 0.10173430596600778, -0.10191551293463318, 0.11684725680985987, -0.055549455027095192, -0.015110209275042964, -0.069817653430995413, -0.062226122825756187, 0.036567427603391177, -0.0038710846599720981, 0.027860140717788494, -0.062814236601042656, -0.076543967770580645, -0.18805317015343495, -0.045122231921033401],
	      [-0.0036562798504169839, 0.028320140678325608, -0.24794793875814208, 0.088837676506122579, -0.037705850825817878, 0.00058311248019061101, 0.0085300555789909818, -0.040715481890351971, 0.072832216131135635, 0.074232828980148546, 0.011382317260704876, 0.033820929378822563, 0.0034571782525573127, -0.0081123501438758478, -0.12617338080416468, 0.04402100225222013, -0.042367536752229679, 0.020806430133868493, -0.0088305259631811031, 0.05846808637309852],
	      [0.06632787150069476, 0.0005024945974418921, 0.00068789731494344527, 0.099052827103458627, -0.027081197212793062, 0.043963347280316291, 0.085985928084049035, -0.064402105970983711, 0.11344648894176523, -0.045255083619287213, -0.0033627481062759495, -0.065526585575091861, -0.065674092536073009, -0.020837968861429697, 0.024402999253028874, 0.015466292580588225, -0.049326952278705233, -0.099548532965597292, -0.11056103199623027, -0.052035175908553173],
	      [-0.0034584653198352355, 0.081730476144182482, 0.042050903254929328, -0.20673617233092098, -0.019186781291530772, -0.017709312635985481, -0.062968880438414046, -0.020672760790206416, 0.10430012736186442, 0.0046453384558402724, 0.0023476603249214939, 0.04000959099000892, -0.060975072974956919, 0.0036578431925638182, -0.017462918205026205, 0.022780444868397098, 0.078177903575462684, 0.099431926790962424, -0.0024518885244070067, -0.12599928693973769],
	      [0.097128615119178252, 0.0021091910624301854, 0.0011487974317803925, -0.0036646797964441928, -0.00020402199216735107, -0.0002950630790080626, 0.00015780066191907344, -0.082650389488317363, 0.0016065974001583869, -0.00015594162162705649, -5.4727904831485806e-05, -0.048473628411413568, -0.0013575663381852705, -0.037546402774221881, -0.0016561616161499832, 0.026718742004923881, 0.0026342928535636671, 0.0026626671036050439, -0.042087730824440769, -0.0029947917415798823],
	      [-0.0019129526080266935, 0.10709246327169396, 0.05832925663349231, -0.18607114049263718, -0.010359050961291636, -0.014981588209040738, 0.0080122004553344981, 0.0016278032784891297, 0.081573678237876118, -0.0079178091943084804, -0.0027787649219276709, 0.00095469037395777079, -0.068929328310090771, 0.00073947815503061336, -0.084090261052632717, -0.00052622687082184809, 0.13375408026912178, 0.13519475977153123, 0.00082891982293697986, -0.1520581185386175],
	      [0.066412611420979081, 0.0027160178727324764, 0.00096838289061252475, -0.10711621231805085, 0.026304719983661629, -0.044626555190009395, -0.088398635285978924, -0.063538176615308029, -0.10925171370014186, 0.04540289816921849, 0.0034525790352213999, -0.067051140879800644, 0.063222280478838544, -0.020965836164988375, -0.025071674259481383, 0.014557322724614043, 0.052366940659376415, 0.1033864484065217, -0.11037875047163209, 0.047033623955948213],
	      [0.00084413531333646472, 0.081686880699964534, 0.042045379078425649, -0.20267566347704935, -0.020238219422379647, -0.015964530372102555, -0.059534368323843435, 0.023192550627061579, 0.10868617885682233, 0.0028598252732636277, 0.0022134321387772254, -0.037398466479719547, -0.063513693057426587, -0.0028345153014708558, -0.016488512201080392, -0.023371761373115647, 0.076175037607720986, 0.095435112861314508, 0.0068033078519711999, -0.12795045157687654],
	      [0.20703888776046808, 0.0040955306438840667, 0.00091829030602567484, -0.00029318224193783675, -0.00055127789316487255, -0.00022805224437934772, 0.0051995057930183932, -0.0070650309926390707, -0.0025937632986591107, -0.00022702125921550729, -0.00086173305987560507, 0.0039240564283781008, 0.0027605436927608689, -0.18348670413797583, -0.00045015275908286324, -0.021588694232823304, 0.00096281376926177914, -0.00018547586884016306, 0.23464452882669662, 0.0015329766435944019],
	      [-0.0040776405575057902, 0.20794724236737283, 0.046625444523509314, -0.014886090234270774, -0.027990687319841629, -0.011579167501817512, 0.26400068400072507, 0.00013914611514436953, -0.13169622503382422, -0.01152682006741342, -0.043753796281685783, -7.7284474501817166e-05, 0.14016436409825117, 0.0036137792018137043, -0.022856140762930171, 0.00042519034051920836, 0.048886087210756428, -0.0094173866110174916, -0.0046213349467353892, 0.077835644112284094],
	      [0.001600149798509044, -0.029891049610734331, -0.073100016972691292, -0.058468287694032256, 0.11859715192490811, 0.12934983734389552, 0.032157533878495161, 0.082573315128634459, -0.041100473797450493, -0.0057089075464736442, -0.11638049064707184, -0.0053600186457387336, 0.0098026006087696335, 0.099418622679411317, -0.049008089369327941, 0.096626712331893835, 0.019636547733371066, -0.043651581474207432, 0.0051686639646904564, 0.0072428841031747272],
	      [-0.0084655797579516363, -0.0046796039747889337, 0.045349170381251615, 0.075740338407896624, -0.034637874980380609, 0.082185012813799529, -0.12096517723818774, 0.11907027593886906, -0.077532966005268225, -0.07891922561825053, -0.012653839329841899, -0.11579889444409854, -0.086081021299873675, 0.014700684484061042, -0.0022790983807368559, -0.072634107643920642, 0.13958423960770075, -0.080189569403226982, 0.0020189064619431322, 0.12988268130836492],
	      [0.01424380662597859, -0.014200096866361181, -0.056192009903351103, -0.043173116638536083, 0.080962018527769866, 0.084430862834772316, 0.022292726265859285, 0.0819540031923333, 0.021520036248995907, 0.023644742127952947, -0.069978359098797141, 0.010578253533974168, 0.0055637826130301481, 0.10753640013705529, 0.04781691310140064, 0.10988794493865349, -0.10152366815496501, -0.038775585391088246, 0.009852910151646431, -0.10479520228312821],
	      [-0.0019267548176591992, 0.0089253887142499537, 0.038395556537414034, 0.072665186105416488, -0.035316486177484258, 0.085965924697292445, -0.095827634585293003, 0.067000919870278841, -0.079359015546978925, -0.060241496386490526, 0.022959701461265629, -0.082723836506042564, -0.073346522132294159, 0.034408742374915882, -0.038907662769628905, -0.046992930274581561, 0.098012549165148996, -0.061028767847837867, 0.00076321736854494809, 0.10756844632916053],
	      [0.0059814141378770683, -0.019986810144644714, -0.052159516892456757, -0.044470068674562206, 0.076646118870655117, 0.092443985277207139, 0.004678028369475922, 0.10415240351429292, 0.0046581309098169387, 0.0051387821644296996, -0.096441880503777305, 0.0059706943668324346, -0.0081662190478821537, 0.083068312844982603, 0.047686224996273292, 0.097270615186996257, -0.082539469495457859, -0.026822366473815737, 0.0086196546781417416, -0.097324503721316472],
	      [-0.0021942894961033254, 0.014672723795261092, 0.0297720048321981, 0.032614772081342773, -0.070295075024643439, 0.11259463615333912, -0.099268692243530854, 0.067976663605742033, -0.030441862025488736, -0.007886017458831291, 0.043349675685024236, -0.085122999155765849, -0.02423614615027082, 0.010447936760906771, 0.034457826074821618, -0.043728626489175956, -0.10420367455137278, 0.051653432878078387, -0.0020921056059804294, -0.13233775532920924],
	      [-0.0042059935392670346, -0.036744548164445875, -0.071150072959197758, -0.055275730345418772, 0.11733258745742503, 0.12551113047364854, 0.026702116872438945, 0.098002215324570499, -0.032058017685709768, -0.0047389532692274257, -0.10681090062656813, 0.0020600345006132207, 0.030173430742514089, 0.081617365370315068, -0.060517548931821992, 0.076498984061509942, 0.010560607875077087, -0.048467808387472493, 0.0058354971872773553, -0.010407245460860998],
	      [-0.0044631564451177276, -0.00045295155675293449, 0.035712505776059139, 0.033807803564813034, -0.072124316297525748, 0.10250509947932059, -0.1226494724455383, 0.11180724612070779, -0.025713763387405553, -0.018860328071287888, 0.019240580467794626, -0.11284980000963721, -0.030120981721104612, 0.016747429515335161, 0.051983556502342557, -0.066147016249778562, -0.080512483822065731, 0.055429747589261724, -0.0091079370182397448, -0.11890323290806679],
	      [0.0019322395797021119, 0.029683610868556625, 0.074828944142974155, 0.061405208380541323, -0.11986904124223763, -0.12601350788764124, -0.036895578153987703, 0.077820909748784958, 0.038015754250682834, 0.0025970500443394723, 0.11579199621960418, -0.00079630137938405913, -0.013184423524449153, 0.098762687832966226, 0.048880345050464534, 0.099411734305558719, -0.014125215491144956, 0.040460280290956802, 0.0050851616444164346, -0.0021231601220420642],
	      [0.0083960091842815946, -0.0058529296934387584, 0.042435702587835022, 0.073379424307888352, -0.02994127217609336, 0.087214405816630577, -0.11960517297381305, -0.12222924768386143, -0.079091163809245135, -0.079082811840663722, -0.017226487294788227, 0.11592014345432393, -0.085628290786705655, -0.018603874644254632, -0.0042070156653518124, 0.068773121287758837, 0.14024917911015872, -0.081846156446419099, -0.0022208560358934135, 0.13006714598651917],
	      [0.014308626336015217, 0.014540520423140585, 0.057660251751921007, 0.046000814992156927, -0.082289813667776351, -0.080980494820433804, -0.026048634371759079, 0.079252299607605575, -0.024628094656255289, -0.02599840397250559, 0.070828125770320438, 0.01382728639225384, -0.0084474740718789628, 0.10609816881106175, -0.049311813835476996, 0.11165306622847265, 0.10530416416182468, 0.036342518602119435, 0.0098152177824551573, 0.10894942298282573],
	      [0.0013644133178536335, 0.0083593409153309445, 0.036153230930321134, 0.070908901359961918, -0.03210123372298971, 0.089223709106505664, -0.094875549231313291, -0.070175885527856877, -0.078450125954942412, -0.059263772307063395, 0.020186511169956366, 0.08224316825811924, -0.0730705697779436, -0.038616285181248482, -0.036994707959346715, 0.04262966971973222, 0.09393906535445655, -0.062508222411948575, -0.0011505820661768321, 0.10335873595850939],
	      [0.0060631753715524039, 0.020549046454011372, 0.053291335098044221, 0.045719783410926723, -0.079354536584653024, -0.087938902453332982, -0.0085830875044931674, 0.101395065582099, -0.0058531614203063097, -0.005445307614197795, 0.098073976573685884, 0.0093177669338030018, 0.007205592342012423, 0.08259250865896775, -0.046292474156033811, 0.098916989702066069, 0.078372460116979403, 0.028835410650639128, 0.0086953465132257254, 0.092038254344599224],
	      [0.0019570707435616432, 0.01387436820763277, 0.027695145380569608, 0.030838478735115384, -0.067222634834479697, 0.11614728554614781, -0.099007513947460796, -0.072024930603050749, -0.030234841632456377, -0.0076775633166532029, 0.039518676801310174, 0.084821892196893151, -0.024538894693039576, -0.013710634372263898, 0.036308740940865211, 0.039864702454276729, -0.10737284251528514, 0.050557250359913708, 0.0017510858493843574, -0.13606726368738839],
	      [-0.0040269958559816504, 0.036698218288480453, 0.072501070354695815, 0.056564040810879776, -0.12008147931184913, -0.12137767813607811, -0.031510710584075563, 0.09352382549573536, 0.031020682241923343, 0.0039926562394971814, 0.10748566435040698, 0.0065018775352949773, -0.031336039816478478, 0.080894644984347966, 0.062517461426333687, 0.07904418680908222, -0.013722582803368383, 0.05061275847617297, 0.0061895952050397204, 0.0057173813576256987],
	      [0.0046253055555129877, -0.0018994102698154198, 0.032883289803905605, 0.031605114052025748, -0.067448435171749935, 0.10736758608785574, -0.12150296809183195, -0.115579360433701, -0.02695610132653348, -0.019032297528091081, 0.015019999618782623, 0.11268117275248012, -0.028909549827634367, -0.019948111144142567, 0.04956037623096271, 0.063083586239858991, -0.080034225248293553, 0.053478351200525617, 0.0088711022623346666, -0.11922080818583679]
	    ], 
	    "numEvalues": 20, 
	    "eigenValues": [
	      448.2615028731629, 
	      152.88433766749935, 
	      77.079422234111703, 
	      38.340488190771154, 
	      27.754350120854401, 
	      15.293153116152746, 
	      13.085890189100295, 
	      10.196616391772121, 
	      7.2364679411701438, 
	      6.5964537073839553, 
	      5.7388999381293884, 
	      5.6223215910853748, 
	      4.6227291984146053, 
	      4.393149515511058, 
	      3.9714381417641094, 
	      3.5791364382171165, 
	      3.4263759023353697, 
	      3.078849017302407, 
	      2.6395798573836098, 
	      2.4414195196560233
	    ], 
	    "numPtsPerSample": 71, 
	    "nonRegularizedVectors": [0], 
	    "meanShape": [
	      [25.011254225136952, 34.815173567571549], 
	      [24.381567267455893, 45.626763203908808], 
	      [25.830707280728745, 56.164927637057076], 
	      [28.675368741312013, 66.695735954974964], 
	      [33.59842962462659, 75.549155778418879], 
	      [40.332640541597783, 82.561857303541444], 
	      [48.359309091167063, 87.999836114954576], 
	      [57.763839129670998, 89.783311477497705], 
	      [67.090852037871969, 87.63091750236714], 
	      [74.897176557764965, 81.881107153483129], 
	      [81.35004130814275, 74.608685557615786], 
	      [85.920682599877409, 65.568286826736994], 
	      [88.348489374468954, 54.933637000847114], 
	      [89.381567267455921, 44.346585170183118], 
	      [88.326664228593643, 33.56817361245254], 
	      [81.566856326247773, 27.444862527091914], 
	      [76.619772918209833, 25.17298033285374], 
	      [69.153548565650397, 25.746811251285578], 
	      [63.337202235413088, 27.340674714612589], 
	      [31.524715699235657, 28.430444822342793], 
	      [36.378507746326761, 25.965533928582431], 
	      [43.861536613791145, 26.244938607124027], 
	      [49.736130518962113, 27.608548456866743], 
	      [35.982434927065498, 35.443406084328842], 
	      [41.74296700227427, 32.491136119230305], 
	      [48.056933854020826, 35.383200094731308], 
	      [41.827893337283342, 37.01094114500529], 
	      [41.960848751111143, 34.61071899652552], 
	      [77.388728098024785, 34.627907207783039], 
	      [71.516418152976826, 31.904746609209838], 
	      [65.321222211179702, 35.043179129766543], 
	      [71.609524186972465, 36.424390535431939], 
	      [71.382163563407005, 34.031264828125074], 
	      [56.645668790714296, 33.009120609139984], 
	      [50.194189402484938, 46.941098052316647], 
	      [47.456988308925929, 51.770997981023982], 
	      [50.07251572822895, 55.035267306968535], 
	      [57.101339593814998, 56.145435575714828], 
	      [64.081000008569561, 54.759369555253215], 
	      [66.565969098022094, 51.394645712515057], 
	      [63.640714233003223, 46.676268118194287], 
	      [56.826129496946521, 42.171866411747999], 
	      [52.142251303692888, 53.25579760946124], 
	      [61.942803190976235, 53.062775282622852], 
	      [45.090870407180603, 66.45744111296608], 
	      [49.30691311256561, 63.535961653371373], 
	      [54.022310354591866, 62.360055474188812], 
	      [57.235786373192525, 62.971861611246879], 
	      [60.422680620195308, 62.233999883085119], 
	      [65.180722218119797, 63.223326242164035], 
	      [69.508528157121361, 65.976534203943174], 
	      [66.692952911540658, 69.861040892668086], 
	      [62.796902525468738, 72.430437387210816], 
	      [57.438793685614598, 73.279393032509802], 
	      [52.051412524023078, 72.642070314310331], 
	      [48.057213957229465, 70.228072641153915], 
	      [51.312826281003822, 68.334857344858165], 
	      [57.355342381712035, 69.042220849614353], 
	      [63.365320267430491, 68.097482913273097], 
	      [63.302666508653772, 65.1057867536814], 
	      [57.283082963456252, 65.373307571221233], 
	      [51.257633954541575, 65.343014232008443], 
	      [56.997384601005933, 50.86720524009678], 
	      [38.345016967805378, 33.379866011204456], 
	      [45.43217757469057, 33.213084051757619], 
	      [45.102977179460538, 36.387811845290685], 
	      [38.616928471611573, 36.562115185290565], 
	      [74.946726694421386, 32.658993629837994], 
	      [67.858495092410578, 32.771396681549788], 
	      [68.312444531975871, 35.930700302534717], 
	      [74.800326543573135, 35.849481471486683]
	    ]
	  }, 
	  "hints": {
	    "rightEye": [71.382163563407005, 34.031264828125074], 
	    "leftEye": [41.960848751111143, 34.61071899652552], 
	    "nose": [56.997384601005933, 50.86720524009678]
	  }
	}
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;"use strict";

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){
	  return {
	  faceDeformer : function() {
	  
	  var gl, verticeMap;
	  var numTriangles;
	  var maxx, minx, maxy, miny;
	  var width, height;
	  var first = true;
	  var textureVertices, gridVertices;
	  var texCoordBuffer, gridCoordbuffer;
	  var texCoordLocation;
	  var pdmModel;

	  var usegrid = false;
	  var drawProgram, gridProgram;
	  
	  this.init = function(canvas) {
	    // ready a webgl element
	    gl = getWebGLContext(canvas); 
	  }

	  this.load = function(element, points, pModel, vertices) {
	    pdmModel = pModel;
	    if (vertices) {
	      verticeMap = vertices;
	    } else {
	      verticeMap = pdmModel.path.vertices;
	    }
	    numTriangles = verticeMap.length;
	    
	    // get cropping
	    maxx = 0;
	    minx = element.width;
	    maxy = 0;
	    miny = element.height;
	    for (var i = 0;i < points.length;i++) {
	      if (points[i][0] > maxx) maxx = points[i][0];
	      if (points[i][0] < minx) minx = points[i][0];
	      if (points[i][1] > maxy) maxy = points[i][1];
	      if (points[i][1] < miny) miny = points[i][1];
	    }
	    minx = Math.floor(minx);
	    maxx = Math.ceil(maxx);
	    miny = Math.floor(miny);
	    maxy = Math.ceil(maxy);
	    width = maxx-minx;
	    height = maxy-miny;

	    if (element.tagName == 'VIDEO' || element.tagName == 'IMG') {
	      var ca = document.createElement('canvas');
	      ca.width = element.width;
	      ca.height = element.height;
	      var cc = ca.getContext('2d');
	      cc.drawImage(element, 0, 0, element.width, element.height);
	    } else if (element.tagName == 'CANVAS') {
	      var cc = element.getContext('2d');
	    }
	    var image = cc.getImageData(minx, miny, width, height);
	    
	    // correct points
	    var nupoints = [];
	    for (var i = 0;i < points.length;i++) {
	      nupoints[i] = [];
	      nupoints[i][0] = points[i][0] - minx;
	      nupoints[i][1] = points[i][1] - miny;
	    }
	    
	    // create vertices based on points
	    var textureVertices = [];
	    for (var i = 0;i < verticeMap.length;i++) {
	      textureVertices.push(nupoints[verticeMap[i][0]][0]/width);
	      textureVertices.push(nupoints[verticeMap[i][0]][1]/height);
	      textureVertices.push(nupoints[verticeMap[i][1]][0]/width);
	      textureVertices.push(nupoints[verticeMap[i][1]][1]/height);
	      textureVertices.push(nupoints[verticeMap[i][2]][0]/width);
	      textureVertices.push(nupoints[verticeMap[i][2]][1]/height); 
	    }
	    
	    if (first) {
	      // create program for drawing grid
	      var gridVertexShaderProg = [
	        "attribute vec2 a_position;",
	        "",
	        "uniform vec2 u_resolution;",
	        "",
	        "void main() {",
	        "  vec2 zeroToOne = a_position / u_resolution;",
	        "  vec2 zeroToTwo = zeroToOne * 2.0;",
	        "  vec2 clipSpace = zeroToTwo - 1.0;",
	        "  gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);",
	        "}"
	      ].join('\n');
	      
	      var gridFragmentShaderProg = [
	        "void main() {",
	        "  gl_FragColor = vec4(0.2, 0.2, 0.2, 1.0);",
	        "}"
	      ].join('\n');

	      var gridVertexShader = loadShader(gl, gridVertexShaderProg, gl.VERTEX_SHADER);
	      var gridFragmentShader = loadShader(gl, gridFragmentShaderProg, gl.FRAGMENT_SHADER);
	      try {
	        gridProgram = createProgram(gl, [gridVertexShader, gridFragmentShader]);
	      } catch(err) {
	        alert("There was a problem setting up the webGL programs. Maybe you should try it in another browser. :(");
	      }

	      gridCoordbuffer = gl.createBuffer();

	      // create program for drawing deformed face
	      var vertexShaderProg = [
	        "attribute vec2 a_texCoord;",
	        "attribute vec2 a_position;",
	        "",
	        "varying vec2 v_texCoord;",
	        "",
	        "uniform vec2 u_resolution;",
	        "",
	        "void main() {",
	        "  vec2 zeroToOne = a_position / u_resolution;",
	        "  vec2 zeroToTwo = zeroToOne * 2.0;",
	        "  vec2 clipSpace = zeroToTwo - 1.0;",
	        "  gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);",
	        "  ",
	        "  v_texCoord = a_texCoord;",
	        "}"
	      ].join('\n');
	      
	      var fragmentShaderProg = [
	        "precision mediump float;",
	        "",
	        "uniform sampler2D u_image;",
	        "",
	        "varying vec2 v_texCoord;",
	        "",
	        "void main() {",
	        "  gl_FragColor = texture2D(u_image, v_texCoord);",
	        "}"
	      ].join('\n');
	    
	      var vertexShader = loadShader(gl, vertexShaderProg, gl.VERTEX_SHADER);
	      var fragmentShader = loadShader(gl, fragmentShaderProg, gl.FRAGMENT_SHADER);
	      drawProgram = createProgram(gl, [vertexShader, fragmentShader]);

	      texCoordBuffer = gl.createBuffer();
	      
	      first = false;
	    }

	    // load program for drawing grid
	    gl.useProgram(gridProgram);

	    // set the resolution for grid program
	    var resolutionLocation = gl.getUniformLocation(gridProgram, "u_resolution");
	    gl.uniform2f(resolutionLocation, gl.drawingBufferWidth, gl.drawingBufferHeight);

	    // load program for drawing deformed face
	    gl.useProgram(drawProgram);
	    
	    // look up where the vertex data needs to go.
	    texCoordLocation = gl.getAttribLocation(drawProgram, "a_texCoord");
	    
	    // provide texture coordinates for face vertices (i.e. where we're going to copy face vertices from).
	    gl.enableVertexAttribArray(texCoordLocation);

	    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureVertices), gl.STATIC_DRAW);
	    
	    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);
	    
	    // Create the texture.
	    var texture = gl.createTexture();
	    gl.bindTexture(gl.TEXTURE_2D, texture);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
	    
	    // Upload the image into the texture.
	    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
	    
	    // set the resolution for draw program
	    resolutionLocation = gl.getUniformLocation(drawProgram, "u_resolution");
	    gl.uniform2f(resolutionLocation, gl.drawingBufferWidth, gl.drawingBufferHeight);
	  }

	  this.draw = function(points) {
	    
	    if (usegrid) {
	      // switch program if needed
	      gl.useProgram(drawProgram);

	      //texCoordLocation = gl.getAttribLocation(drawProgram, "a_texCoord");

	      gl.enableVertexAttribArray(texCoordLocation);
	      gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
	      gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);
	      
	      usegrid = false;
	    }

	    // create drawvertices based on points
	    var vertices = [];
	    for (var i = 0;i < verticeMap.length;i++) {
	      vertices.push(points[verticeMap[i][0]][0]);
	      vertices.push(points[verticeMap[i][0]][1]);
	      vertices.push(points[verticeMap[i][1]][0]);
	      vertices.push(points[verticeMap[i][1]][1]);
	      vertices.push(points[verticeMap[i][2]][0]);
	      vertices.push(points[verticeMap[i][2]][1]); 
	    }
	    
	    var positionLocation = gl.getAttribLocation(drawProgram, "a_position");
	    
	    // Create a buffer for the position of the vertices.
	    var drawPosBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, drawPosBuffer);
	    gl.enableVertexAttribArray(positionLocation);
	    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
	    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
	    
	    // Draw the face vertices
	    gl.drawArrays(gl.TRIANGLES, 0, numTriangles*3);
	  }

	  this.drawGrid = function(points) {
	    
	    if (!usegrid) {
	      gl.useProgram(gridProgram);

	      usegrid = true;
	    }

	    // create drawvertices based on points
	    var vertices = [];
	    // create new texturegrid
	    for (var i = 0;i < verticeMap.length;i++) {
	      vertices.push(points[verticeMap[i][0]][0]);
	      vertices.push(points[verticeMap[i][0]][1]);
	      vertices.push(points[verticeMap[i][1]][0]);
	      vertices.push(points[verticeMap[i][1]][1]);

	      vertices.push(points[verticeMap[i][1]][0]);
	      vertices.push(points[verticeMap[i][1]][1]);
	      vertices.push(points[verticeMap[i][2]][0]);
	      vertices.push(points[verticeMap[i][2]][1]);

	      vertices.push(points[verticeMap[i][2]][0]);
	      vertices.push(points[verticeMap[i][2]][1]);
	      vertices.push(points[verticeMap[i][0]][0]);
	      vertices.push(points[verticeMap[i][0]][1]);
	    }

	    var positionLocation = gl.getAttribLocation(gridProgram, "a_position");
	    
	    // Create a buffer for position of the vertices (lines)
	    gl.bindBuffer(gl.ARRAY_BUFFER, gridCoordbuffer);
	    gl.enableVertexAttribArray(positionLocation);
	    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
	    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);

	    // Draw the lines
	    gl.drawArrays(gl.LINES, 0, numTriangles*6);
	  }

	  this.clear = function() {
	    gl.clear(gl.COLOR_BUFFER_BIT);
	  }
	  
	  this.calculatePositions = function(parameters, useTransforms) {
	    var x, y, a, b;
	    var numParameters = parameters.length;
	    var positions = [];
	    for (var i = 0;i < pdmModel.patchModel.numPatches;i++) {
	      x = pdmModel.shapeModel.meanShape[i][0];
	      y = pdmModel.shapeModel.meanShape[i][1];
	      for (var j = 0;j < numParameters-4;j++) {
	        x += pdmModel.shapeModel.eigenVectors[(i*2)][j]*parameters[j+4];
	        y += pdmModel.shapeModel.eigenVectors[(i*2)+1][j]*parameters[j+4];
	      }
	      if (useTransforms) {
	        a = parameters[0]*x - parameters[1]*y + parameters[2];
	        b = parameters[0]*y + parameters[1]*x + parameters[3];
	        x += a;
	        y += b;
	      }
	      positions[i] = [x,y];
	    }
	    
	    return positions;
	  }
	}


	  }
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); 

/***/ },
/* 15 */
/***/ function(module, exports) {

	// helper functions

	/**
	 * Provides requestAnimationFrame in a cross browser way.
	 */
	window.requestAnimFrame = (function() {
	  return window.requestAnimationFrame ||
	         window.webkitRequestAnimationFrame ||
	         window.mozRequestAnimationFrame ||
	         window.oRequestAnimationFrame ||
	         window.msRequestAnimationFrame ||
	         function(/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {
	           return window.setTimeout(callback, 1000/60);
	         };
	})();

	/**
	 * Provides cancelRequestAnimationFrame in a cross browser way.
	 */
	window.cancelRequestAnimFrame = (function() {
	  return window.cancelAnimationFrame ||
	         window.webkitCancelRequestAnimationFrame ||
	         window.mozCancelRequestAnimationFrame ||
	         window.oCancelRequestAnimationFrame ||
	         window.msCancelRequestAnimationFrame ||
	         window.clearTimeout;
	})();

	// video support utility functions
	function supports_video() {
	  return !!document.createElement('video').canPlayType;
	}

	function supports_h264_baseline_video() {
	  if (!supports_video()) { return false; }
	  var v = document.createElement("video");
	  return v.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"');
	}

	function supports_ogg_theora_video() {
	  if (!supports_video()) { return false; }
	  var v = document.createElement("video");
	  return v.canPlayType('video/ogg; codecs="theora, vorbis"');
	}

/***/ }
/******/ ]);


},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/lib/cornerstone.js":[function(require,module,exports){
/*! cornerstone - v0.9.0 - 2016-02-03 | (c) 2014 Chris Hafey | https://github.com/chafey/cornerstone */
if(typeof cornerstone === 'undefined'){
    cornerstone = {
        internal : {},
        rendering: {}
    };
}

(function (cornerstone) {

    "use strict";

    function disable(element) {
        if(element === undefined) {
            throw "disable: element element must not be undefined";
        }

        // Search for this element in this list of enabled elements
        var enabledElements = cornerstone.getEnabledElements();
        for(var i=0; i < enabledElements.length; i++) {
            if(enabledElements[i].element === element) {
                // We found it!

                // Fire an event so dependencies can cleanup
                var eventData = {
                    element : element
                };
                $(element).trigger("CornerstoneElementDisabled", eventData);

                // remove the child dom elements that we created (e.g.canvas)
                enabledElements[i].element.removeChild(enabledElements[i].canvas);

                // remove this element from the list of enabled elements
                enabledElements.splice(i, 1);
                return;
            }
        }
    }

    // module/private exports
    cornerstone.disable = disable;

}(cornerstone));
/**
 * This module is responsible for enabling an element to display images with cornerstone
 */
(function ($, cornerstone) {

    "use strict";

    /**
     * sets a new image object for a given element
     * @param element
     * @param image
     */
    function displayImage(element, image, viewport) {
        if(element === undefined) {
            throw "displayImage: parameter element cannot be undefined";
        }
        if(image === undefined) {
            throw "displayImage: parameter image cannot be undefined";
        }

        var enabledElement = cornerstone.getEnabledElement(element);

        enabledElement.image = image;

        if(enabledElement.viewport === undefined) {
            enabledElement.viewport = cornerstone.internal.getDefaultViewport(enabledElement.canvas, image);
        }

        // merge viewport
        if(viewport) {
            for(var attrname in viewport)
            {
                if(viewport[attrname] !== null) {
                    enabledElement.viewport[attrname] = viewport[attrname];
                }
            }
        }

        var now = new Date();
        var frameRate;
        if(enabledElement.lastImageTimeStamp !== undefined) {
            var timeSinceLastImage = now.getTime() - enabledElement.lastImageTimeStamp;
            frameRate = (1000 / timeSinceLastImage).toFixed();
        } else {
        }
        enabledElement.lastImageTimeStamp = now.getTime();

        var newImageEventData = {
            viewport : enabledElement.viewport,
            element : enabledElement.element,
            image : enabledElement.image,
            enabledElement : enabledElement,
            frameRate : frameRate
        };

        $(enabledElement.element).trigger("CornerstoneNewImage", newImageEventData);

        cornerstone.updateImage(element);
    }

    // module/private exports
    cornerstone.displayImage = displayImage;
}($, cornerstone));
/**
 * This module is responsible for immediately drawing an enabled element
 */

(function ($, cornerstone) {

    "use strict";

    /**
     * Immediately draws the enabled element
     *
     * @param element
     */
    function draw(element) {
        var enabledElement = cornerstone.getEnabledElement(element);

        if(enabledElement.image === undefined) {
            throw "draw: image has not been loaded yet";
        }

        cornerstone.drawImage(enabledElement);
    }

    // Module exports
    cornerstone.draw = draw;

}($, cornerstone));
/**
 * This module is responsible for drawing invalidated enabled elements
 */

(function ($, cornerstone) {

    "use strict";

    /**
     * Draws all invalidated enabled elements and clears the invalid flag after drawing it
     */
    function drawInvalidated()
    {
        var enabledElements = cornerstone.getEnabledElements();
        for(var i=0;i < enabledElements.length; i++) {
            var ee = enabledElements[i];
            if(ee.invalid === true) {
                cornerstone.drawImage(ee);
            }
        }
    }

    // Module exports
    cornerstone.drawInvalidated = drawInvalidated;
}($, cornerstone));
/**
 * This module is responsible for enabling an element to display images with cornerstone
 */
(function (cornerstone) {

    "use strict";

    function enable(element) {
        if(element === undefined) {
            throw "enable: parameter element cannot be undefined";
        }

        var canvas = document.createElement('canvas');
        element.appendChild(canvas);

        var el = {
            element: element,
            canvas: canvas,
            image : undefined, // will be set once image is loaded
            invalid: false, // true if image needs to be drawn, false if not
            data : {}
        };
        cornerstone.addEnabledElement(el);

        cornerstone.resize(element, true);

        return element;
    }

    // module/private exports
    cornerstone.enable = enable;
}(cornerstone));
(function (cornerstone) {

    "use strict";

    function getElementData(el, dataType) {
        var ee = cornerstone.getEnabledElement(el);
        if(ee.data.hasOwnProperty(dataType) === false)
        {
            ee.data[dataType] = {};
        }
        return ee.data[dataType];
    }

    function removeElementData(el, dataType) {
        var ee = cornerstone.getEnabledElement(el);
        delete ee.data[dataType];
    }

    // module/private exports
    cornerstone.getElementData = getElementData;
    cornerstone.removeElementData = removeElementData;

}(cornerstone));
(function (cornerstone) {

    "use strict";

    var enabledElements = [];

    function getEnabledElement(element) {
        if(element === undefined) {
            throw "getEnabledElement: parameter element must not be undefined";
        }
        for(var i=0; i < enabledElements.length; i++) {
            if(enabledElements[i].element == element) {
                return enabledElements[i];
            }
        }

        throw "element not enabled";
    }

    function addEnabledElement(enabledElement) {
        if(enabledElement === undefined) {
            throw "getEnabledElement: enabledElement element must not be undefined";
        }

        enabledElements.push(enabledElement);
    }

    function getEnabledElementsByImageId(imageId) {
        var ees = [];
        enabledElements.forEach(function(enabledElement) {
            if(enabledElement.image && enabledElement.image.imageId === imageId) {
                ees.push(enabledElement);
            }
        });
        return ees;
    }

    function getEnabledElements() {
        return enabledElements;
    }

    // module/private exports
    cornerstone.getEnabledElement = getEnabledElement;
    cornerstone.addEnabledElement = addEnabledElement;
    cornerstone.getEnabledElementsByImageId = getEnabledElementsByImageId;
    cornerstone.getEnabledElements = getEnabledElements;
}(cornerstone));
/**
 * This module will fit an image to fit inside the canvas displaying it such that all pixels
 * in the image are viewable
 */
(function (cornerstone) {

    "use strict";

    function getImageSize(enabledElement) {
      if(enabledElement.viewport.rotation === 0 ||enabledElement.viewport.rotation === 180) {
        return {
          width: enabledElement.image.width,
          height: enabledElement.image.height
        };
      } else {
        return {
          width: enabledElement.image.height,
          height: enabledElement.image.width
        };
      }
    }

    /**
     * Adjusts an images scale and center so the image is centered and completely visible
     * @param element
     */
    function fitToWindow(element)
    {
        var enabledElement = cornerstone.getEnabledElement(element);
        var imageSize = getImageSize(enabledElement);

        var verticalScale = enabledElement.canvas.height / imageSize.height;
        var horizontalScale= enabledElement.canvas.width / imageSize.width;
        if(horizontalScale < verticalScale) {
          enabledElement.viewport.scale = horizontalScale;
        }
        else
        {
          enabledElement.viewport.scale = verticalScale;
        }
        enabledElement.viewport.translation.x = 0;
        enabledElement.viewport.translation.y = 0;
        cornerstone.updateImage(element);
    }

    cornerstone.fitToWindow = fitToWindow;
}(cornerstone));

/**
 * This file is responsible for returning the default viewport for an image
 */

(function ($, cornerstone) {

    "use strict";

    /**
     * returns a default viewport for display the specified image on the specified
     * enabled element.  The default viewport is fit to window
     *
     * @param element
     * @param image
     */
    function getDefaultViewportForImage(element, image) {
        var enabledElement = cornerstone.getEnabledElement(element);
        var viewport = cornerstone.internal.getDefaultViewport(enabledElement.canvas, image);
        return viewport;
    }

    // Module exports
    cornerstone.getDefaultViewportForImage = getDefaultViewportForImage;
}($, cornerstone));
/**
 * This module is responsible for returning the currently displayed image for an element
 */

(function ($, cornerstone) {

    "use strict";

    /**
     * returns the currently displayed image for an element or undefined if no image has
     * been displayed yet
     *
     * @param element
     */
    function getImage(element) {
        var enabledElement = cornerstone.getEnabledElement(element);
        return enabledElement.image;
    }

    // Module exports
    cornerstone.getImage = getImage;
}($, cornerstone));
/**
 * This module returns a subset of the stored pixels of an image
 */
(function (cornerstone) {

    "use strict";

    /**
     * Returns array of pixels with modality LUT transformation applied
     */
    function getPixels(element, x, y, width, height) {

        var storedPixels = cornerstone.getStoredPixels(element, x, y, width, height);
        var ee = cornerstone.getEnabledElement(element);

        var mlutfn = cornerstone.internal.getModalityLUT(ee.image.slope, ee.image.intercept, ee.viewport.modalityLUT);

        var modalityPixels = storedPixels.map(mlutfn);

        return modalityPixels;
    }

    // module exports
    cornerstone.getPixels = getPixels;
}(cornerstone));
/**
 * This module returns a subset of the stored pixels of an image
 */
(function (cornerstone) {

    "use strict";

    /**
     * Returns an array of stored pixels given a rectangle in the image
     * @param element
     * @param x
     * @param y
     * @param width
     * @param height
     * @returns {Array}
     */
    function getStoredPixels(element, x, y, width, height) {
        if(element === undefined) {
            throw "getStoredPixels: parameter element must not be undefined";
        }

        x = Math.round(x);
        y = Math.round(y);
        var ee = cornerstone.getEnabledElement(element);
        var storedPixels = [];
        var index = 0;
        var pixelData = ee.image.getPixelData();
        for(var row=0; row < height; row++) {
            for(var column=0; column < width; column++) {
                var spIndex = ((row + y) * ee.image.columns) + (column + x);
                storedPixels[index++] = pixelData[spIndex];
            }
        }
        return storedPixels;
    }

    // module exports
    cornerstone.getStoredPixels = getStoredPixels;
}(cornerstone));
/**
 * This module contains functions to deal with getting and setting the viewport for an enabled element
 */
(function (cornerstone) {

    "use strict";

    /**
     * Returns the viewport for the specified enabled element
     * @param element
     * @returns {*}
     */
    function getViewport(element) {
        var enabledElement = cornerstone.getEnabledElement(element);

        var viewport = enabledElement.viewport;
        if(viewport === undefined) {
            return undefined;
        }
        return {
            scale : viewport.scale,
            translation : {
                x : viewport.translation.x,
                y : viewport.translation.y
            },
            voi : {
                windowWidth: viewport.voi.windowWidth,
                windowCenter : viewport.voi.windowCenter
            },
            invert : viewport.invert,
            pixelReplication: viewport.pixelReplication,
            rotation: viewport.rotation, 
            hflip: viewport.hflip,
            vflip: viewport.vflip,
            modalityLUT: viewport.modalityLUT,
            voiLUT: viewport.voiLUT
        };
    }

    // module/private exports
    cornerstone.getViewport = getViewport;

}(cornerstone));

/**
 * This module deals with caching images
 */

(function (cornerstone) {

    "use strict";

    // dictionary of imageId to cachedImage objects
    var imageCache = {};
    // dictionary of sharedCacheKeys to number of imageId's in cache with this shared cache key
    var sharedCacheKeys = {};
    // array of cachedImage objects
    var cachedImages = [];

    var maximumSizeInBytes = 1024 * 1024 * 1024; // 1 GB
    var cacheSizeInBytes = 0;

    function setMaximumSizeBytes(numBytes) {
        if (numBytes === undefined) {
            throw "setMaximumSizeBytes: parameter numBytes must not be undefined";
        }
        if (numBytes.toFixed === undefined) {
            throw "setMaximumSizeBytes: parameter numBytes must be a number";
        }

        maximumSizeInBytes = numBytes;
        purgeCacheIfNecessary();
    }

    function purgeCacheIfNecessary() {
        // if max cache size has not been exceeded, do nothing
        if (cacheSizeInBytes <= maximumSizeInBytes) {
            return;
        }

        // cache size has been exceeded, create list of images sorted by timeStamp
        // so we can purge the least recently used image
        function compare(a,b) {
            if (a.timeStamp > b.timeStamp) {
                return -1;
            }
            if (a.timeStamp < b.timeStamp) {
                return 1;
            }
            return 0;
        }
        cachedImages.sort(compare);

        // remove images as necessary
        while(cacheSizeInBytes > maximumSizeInBytes) {
            var lastCachedImage = cachedImages[cachedImages.length - 1];
            cacheSizeInBytes -= lastCachedImage.sizeInBytes;
            delete imageCache[lastCachedImage.imageId];
            lastCachedImage.imagePromise.reject();
            cachedImages.pop();
            $(cornerstone).trigger('CornerstoneImageCachePromiseRemoved', {imageId: lastCachedImage.imageId});
        }

        var cacheInfo = cornerstone.imageCache.getCacheInfo();
        $(cornerstone).trigger('CornerstoneImageCacheFull', cacheInfo);
    }

    function putImagePromise(imageId, imagePromise) {
        if (imageId === undefined) {
            throw "getImagePromise: imageId must not be undefined";
        }
        if (imagePromise === undefined) {
            throw "getImagePromise: imagePromise must not be undefined";
        }

        if (imageCache.hasOwnProperty(imageId) === true) {
            throw "putImagePromise: imageId already in cache";
        }

        var cachedImage = {
            loaded : false,
            imageId : imageId,
            sharedCacheKey: undefined, // the sharedCacheKey for this imageId.  undefined by default
            imagePromise : imagePromise,
            timeStamp : new Date(),
            sizeInBytes: 0
        };

        imageCache[imageId] = cachedImage;
        cachedImages.push(cachedImage);

        imagePromise.then(function(image) {
            cachedImage.loaded = true;

            if (image.sizeInBytes === undefined) {
                throw "putImagePromise: image does not have sizeInBytes property or";
            }
            if (image.sizeInBytes.toFixed === undefined) {
                throw "putImagePromise: image.sizeInBytes is not a number";
            }

            // If this image has a shared cache key, reference count it and only
            // count the image size for the first one added with this sharedCacheKey
            if(image.sharedCacheKey) {
              cachedImage.sizeInBytes = image.sizeInBytes;
              cachedImage.sharedCacheKey = image.sharedCacheKey;
              if(sharedCacheKeys[image.sharedCacheKey]) {
                sharedCacheKeys[image.sharedCacheKey]++;
              } else {
                sharedCacheKeys[image.sharedCacheKey] = 1;
                cacheSizeInBytes += cachedImage.sizeInBytes;
              }
            }
            else {
              cachedImage.sizeInBytes = image.sizeInBytes;
              cacheSizeInBytes += cachedImage.sizeInBytes;
            }
            purgeCacheIfNecessary();
        });
    }

    function getImagePromise(imageId) {
        if (imageId === undefined) {
            throw "getImagePromise: imageId must not be undefined";
        }
        var cachedImage = imageCache[imageId];
        if (cachedImage === undefined) {
            return undefined;
        }

        // bump time stamp for cached image
        cachedImage.timeStamp = new Date();
        return cachedImage.imagePromise;
    }

    function removeImagePromise(imageId) {
        if (imageId === undefined) {
            throw "removeImagePromise: imageId must not be undefined";
        }
        var cachedImage = imageCache[imageId];
        if (cachedImage === undefined) {
            throw "removeImagePromise: imageId must not be undefined";
        }
        cachedImages.splice( cachedImages.indexOf(cachedImage), 1);

        // If this is using a sharedCacheKey, decrement the cache size only
        // if it is the last imageId in the cache with this sharedCacheKey
        if(cachedImages.sharedCacheKey) {
          if(sharedCacheKeys[cachedImages.sharedCacheKey] === 1) {
            cacheSizeInBytes -= cachedImage.sizeInBytes;
            delete sharedCacheKeys[cachedImages.sharedCacheKey];
          } else {
            sharedCacheKeys[cachedImages.sharedCacheKey]--;
          }
        } else {
          cacheSizeInBytes -= cachedImage.sizeInBytes;
        }
        delete imageCache[imageId];

        decache(cachedImage.imagePromise, cachedImage.imageId);

        return cachedImage.imagePromise;
    }

    function getCacheInfo() {
        return {
            maximumSizeInBytes : maximumSizeInBytes,
            cacheSizeInBytes : cacheSizeInBytes,
            numberOfImagesCached: cachedImages.length
        };
    }

    function decache(imagePromise, imageId) {
      imagePromise.then(function(image) {
        if(image.decache) {
          image.decache();
        }
        imagePromise.reject();
        delete imageCache[imageId];
      }).always(function() {
        delete imageCache[imageId];
      });
    }

    function purgeCache() {
        while (cachedImages.length > 0) {
          var removedCachedImage = cachedImages.pop();
          decache(removedCachedImage.imagePromise, removedCachedImage.imageId);
        }
        cacheSizeInBytes = 0;
    }

    function changeImageIdCacheSize(imageId, newCacheSize) {
      var cacheEntry = imageCache[imageId];
      if(cacheEntry) {
        cacheEntry.imagePromise.then(function(image) {
          var cacheSizeDifference = newCacheSize - image.sizeInBytes;
          image.sizeInBytes = newCacheSize;
          cacheSizeInBytes += cacheSizeDifference;
        });
      }
    }

    // module exports
    cornerstone.imageCache = {
        putImagePromise : putImagePromise,
        getImagePromise: getImagePromise,
        removeImagePromise: removeImagePromise,
        setMaximumSizeBytes: setMaximumSizeBytes,
        getCacheInfo : getCacheInfo,
        purgeCache: purgeCache,
        cachedImages: cachedImages,
        changeImageIdCacheSize: changeImageIdCacheSize
    };

}(cornerstone));

/**
 * This module deals with ImageLoaders, loading images and caching images
 */

(function ($, cornerstone) {

    "use strict";

    var imageLoaders = {};

    var unknownImageLoader;

    function loadImageFromImageLoader(imageId) {
        var colonIndex = imageId.indexOf(":");
        var scheme = imageId.substring(0, colonIndex);
        var loader = imageLoaders[scheme];
        var imagePromise;
        if(loader === undefined || loader === null) {
            if(unknownImageLoader !== undefined) {
                imagePromise = unknownImageLoader(imageId);
                return imagePromise;
            }
            else {
                return undefined;
            }
        }
        imagePromise = loader(imageId);

        // broadcast an image loaded event once the image is loaded
        // This is based on the idea here: http://stackoverflow.com/questions/3279809/global-custom-events-in-jquery
        imagePromise.then(function(image) {
            $(cornerstone).trigger('CornerstoneImageLoaded', {image: image});
        });

        return imagePromise;
    }

    // Loads an image given an imageId and returns a promise which will resolve
    // to the loaded image object or fail if an error occurred.  The loaded image
    // is not stored in the cache
    function loadImage(imageId) {
        if(imageId === undefined) {
            throw "loadImage: parameter imageId must not be undefined";
        }

        var imagePromise = cornerstone.imageCache.getImagePromise(imageId);
        if(imagePromise !== undefined) {
            return imagePromise;
        }

        imagePromise = loadImageFromImageLoader(imageId);
        if(imagePromise === undefined) {
            throw "loadImage: no image loader for imageId";
        }

        return imagePromise;
    }

    // Loads an image given an imageId and returns a promise which will resolve
    // to the loaded image object or fail if an error occurred.  The image is
    // stored in the cache
    function loadAndCacheImage(imageId) {
        if(imageId === undefined) {
            throw "loadAndCacheImage: parameter imageId must not be undefined";
        }

        var imagePromise = cornerstone.imageCache.getImagePromise(imageId);
        if(imagePromise !== undefined) {
            return imagePromise;
        }

        imagePromise = loadImageFromImageLoader(imageId);
        if(imagePromise === undefined) {
            throw "loadAndCacheImage: no image loader for imageId";
        }

        cornerstone.imageCache.putImagePromise(imageId, imagePromise);

        return imagePromise;
    }


    // registers an imageLoader plugin with cornerstone for the specified scheme
    function registerImageLoader(scheme, imageLoader) {
        imageLoaders[scheme] = imageLoader;
    }

    // Registers a new unknownImageLoader and returns the previous one (if it exists)
    function registerUnknownImageLoader(imageLoader) {
        var oldImageLoader = unknownImageLoader;
        unknownImageLoader = imageLoader;
        return oldImageLoader;
    }

    // module exports

    cornerstone.loadImage = loadImage;
    cornerstone.loadAndCacheImage = loadAndCacheImage;
    cornerstone.registerImageLoader = registerImageLoader;
    cornerstone.registerUnknownImageLoader = registerUnknownImageLoader;

}($, cornerstone));

(function (cornerstone) {

    "use strict";

    function calculateTransform(enabledElement, scale) {

        var transform = new cornerstone.internal.Transform();
        transform.translate(enabledElement.canvas.width/2, enabledElement.canvas.height / 2);

        //Apply the rotation before scaling for non square pixels
        var angle = enabledElement.viewport.rotation;
        if(angle!==0) {
            transform.rotate(angle*Math.PI/180);
        }

        // apply the scale
        var widthScale = enabledElement.viewport.scale;
        var heightScale = enabledElement.viewport.scale;
        if(enabledElement.image.rowPixelSpacing < enabledElement.image.columnPixelSpacing) {
            widthScale = widthScale * (enabledElement.image.columnPixelSpacing / enabledElement.image.rowPixelSpacing);
        }
        else if(enabledElement.image.columnPixelSpacing < enabledElement.image.rowPixelSpacing) {
            heightScale = heightScale * (enabledElement.image.rowPixelSpacing / enabledElement.image.columnPixelSpacing);
        }
        transform.scale(widthScale, heightScale);

        // unrotate to so we can translate unrotated
        if(angle!==0) {
            transform.rotate(-angle*Math.PI/180);
        }

        // apply the pan offset
        transform.translate(enabledElement.viewport.translation.x, enabledElement.viewport.translation.y);

        // rotate again so we can apply general scale
        if(angle!==0) {
            transform.rotate(angle*Math.PI/180);
        }

        if(scale !== undefined) {
            // apply the font scale
            transform.scale(scale, scale);
        }

        //Apply Flip if required
        if(enabledElement.viewport.hflip) {
            transform.scale(-1,1);
        }

        if(enabledElement.viewport.vflip) {
            transform.scale(1,-1);
        }

        // translate the origin back to the corner of the image so the event handlers can draw in image coordinate system
        transform.translate(-enabledElement.image.width / 2 , -enabledElement.image.height/ 2);
        return transform;
    }

    // Module exports
    cornerstone.internal.calculateTransform = calculateTransform;
}(cornerstone));
/**
 * This module is responsible for drawing an image to an enabled elements canvas element
 */

(function ($, cornerstone) {

    "use strict";

    /**
     * Internal API function to draw an image to a given enabled element
     * @param enabledElement
     * @param invalidated - true if pixel data has been invalidated and cached rendering should not be used
     */
    function drawImage(enabledElement, invalidated) {

        var start = new Date();

        enabledElement.image.render(enabledElement, invalidated);

        var context = enabledElement.canvas.getContext('2d');

        var end = new Date();
        var diff = end - start;
        //console.log(diff + ' ms');

        var eventData = {
            viewport : enabledElement.viewport,
            element : enabledElement.element,
            image : enabledElement.image,
            enabledElement : enabledElement,
            canvasContext: context,
            renderTimeInMs : diff
        };

        $(enabledElement.element).trigger("CornerstoneImageRendered", eventData);
        enabledElement.invalid = false;
    }

    // Module exports
    cornerstone.internal.drawImage = drawImage;
    cornerstone.drawImage = drawImage;

}($, cornerstone));
/**
 * This module generates a lut for an image
 */

(function (cornerstone) {

  "use strict";

  function generateLutNew(image, windowWidth, windowCenter, invert, modalityLUT, voiLUT)
  {
    if(image.lut === undefined) {
      image.lut =  new Int16Array(image.maxPixelValue - Math.min(image.minPixelValue,0)+1);
    }
    var lut = image.lut;
    var maxPixelValue = image.maxPixelValue;
    var minPixelValue = image.minPixelValue;

    var mlutfn = cornerstone.internal.getModalityLUT(image.slope, image.intercept, modalityLUT);
    var vlutfn = cornerstone.internal.getVOILUT(windowWidth, windowCenter, voiLUT);

    var offset = 0;
    if(minPixelValue < 0) {
      offset = minPixelValue;
    }
    var storedValue;
    var modalityLutValue;
    var voiLutValue;
    var clampedValue;

    for(storedValue = image.minPixelValue; storedValue <= maxPixelValue; storedValue++)
    {
      modalityLutValue = mlutfn(storedValue);
      voiLutValue = vlutfn(modalityLutValue);
      clampedValue = Math.min(Math.max(voiLutValue, 0), 255);
      if(!invert) {
        lut[storedValue+ (-offset)] = Math.round(clampedValue);
      } else {
        lut[storedValue + (-offset)] = Math.round(255 - clampedValue);
      }
    }
    return lut;
  }



  /**
   * Creates a LUT used while rendering to convert stored pixel values to
   * display pixels
   *
   * @param image
   * @returns {Array}
   */
  function generateLut(image, windowWidth, windowCenter, invert, modalityLUT, voiLUT)
  {
    if(modalityLUT || voiLUT) {
      return generateLutNew(image, windowWidth, windowCenter, invert, modalityLUT, voiLUT);
    }

    if(image.lut === undefined) {
      image.lut =  new Int16Array(image.maxPixelValue - Math.min(image.minPixelValue,0)+1);
    }
    var lut = image.lut;

    var maxPixelValue = image.maxPixelValue;
    var minPixelValue = image.minPixelValue;
    var slope = image.slope;
    var intercept = image.intercept;
    var localWindowWidth = windowWidth;
    var localWindowCenter = windowCenter;
    var modalityLutValue;
    var voiLutValue;
    var clampedValue;
    var storedValue;

    // NOTE: As of Nov 2014, most javascript engines have lower performance when indexing negative indexes.
    // We improve performance by offsetting the pixel values for signed data to avoid negative indexes
    // when generating the lut and then undo it in storedPixelDataToCanvasImagedata.  Thanks to @jpambrun
    // for this contribution!

    var offset = 0;
    if(minPixelValue < 0) {
      offset = minPixelValue;
    }

    if(invert === true) {
      for(storedValue = image.minPixelValue; storedValue <= maxPixelValue; storedValue++)
      {
        modalityLutValue =  storedValue * slope + intercept;
        voiLutValue = (((modalityLutValue - (localWindowCenter)) / (localWindowWidth) + 0.5) * 255.0);
        clampedValue = Math.min(Math.max(voiLutValue, 0), 255);
        lut[storedValue + (-offset)] = Math.round(255 - clampedValue);
      }
    }
    else {
      for(storedValue = image.minPixelValue; storedValue <= maxPixelValue; storedValue++)
      {
        modalityLutValue = storedValue * slope + intercept;
        voiLutValue = (((modalityLutValue - (localWindowCenter)) / (localWindowWidth) + 0.5) * 255.0);
        clampedValue = Math.min(Math.max(voiLutValue, 0), 255);
        lut[storedValue+ (-offset)] = Math.round(clampedValue);
      }
    }
  }


  // Module exports
  cornerstone.internal.generateLutNew = generateLutNew;
  cornerstone.internal.generateLut = generateLut;
  cornerstone.generateLutNew = generateLutNew;
  cornerstone.generateLut = generateLut;
}(cornerstone));

/**
 * This module contains a function to get a default viewport for an image given
 * a canvas element to display it in
 *
 */
(function (cornerstone) {

    "use strict";

    /**
     * Creates a new viewport object containing default values for the image and canvas
     * @param canvas
     * @param image
     * @returns viewport object
     */
    function getDefaultViewport(canvas, image) {
        if(canvas === undefined) {
            throw "getDefaultViewport: parameter canvas must not be undefined";
        }
        if(image === undefined) {
            throw "getDefaultViewport: parameter image must not be undefined";
        }
        var viewport = {
            scale : 1.0,
            translation : {
                x : 0,
                y : 0
            },
            voi : {
                windowWidth: image.windowWidth,
                windowCenter: image.windowCenter,
            },
            invert: image.invert,
            pixelReplication: false,
            rotation: 0,
            hflip: false,
            vflip: false,
            modalityLUT: image.modalityLUT,
            voiLUT: image.voiLUT
        };

        // fit image to window
        var verticalScale = canvas.height / image.rows;
        var horizontalScale= canvas.width / image.columns;
        if(horizontalScale < verticalScale) {
            viewport.scale = horizontalScale;
        }
        else {
            viewport.scale = verticalScale;
        }
        return viewport;
    }

    // module/private exports
    cornerstone.internal.getDefaultViewport = getDefaultViewport;
    cornerstone.getDefaultViewport = getDefaultViewport;
}(cornerstone));

(function (cornerstone) {

    "use strict";

    function getTransform(enabledElement)
    {
        // For now we will calculate it every time it is requested.  In the future, we may want to cache
        // it in the enabled element to speed things up
        var transform = cornerstone.internal.calculateTransform(enabledElement);
        return transform;
    }

    // Module exports
    cornerstone.internal.getTransform = getTransform;

}(cornerstone));
/**
 * This module is responsible for drawing an image to an enabled elements canvas element
 */

(function ($, cornerstone) {

    "use strict";

    cornerstone.drawImage = cornerstone.internal.drawImage;
    cornerstone.generateLut = cornerstone.internal.generateLut;
    cornerstone.storedPixelDataToCanvasImageData = cornerstone.internal.storedPixelDataToCanvasImageData;
    cornerstone.storedColorPixelDataToCanvasImageData = cornerstone.internal.storedColorPixelDataToCanvasImageData;

}($, cornerstone));
/**
 * This module generates a Modality LUT
 */

(function (cornerstone) {

  "use strict";


  function generateLinearModalityLUT(slope, intercept) {
    var localSlope = slope;
    var localIntercept = intercept;
    return function(sp) {
      return sp * localSlope + localIntercept;
    }
  }

  function generateNonLinearModalityLUT(modalityLUT) {
    var minValue = modalityLUT.lut[0];
    var maxValue = modalityLUT.lut[modalityLUT.lut.length -1];
    var maxValueMapped = modalityLUT.firstValueMapped + modalityLUT.lut.length;
    return function(sp) {
      if(sp < modalityLUT.firstValueMapped) {
        return minValue;
      }
      else if(sp >= maxValueMapped)
      {
        return maxValue;
      }
      else
      {
        return modalityLUT.lut[sp];
      }
    }
  }

  function getModalityLUT(slope, intercept, modalityLUT) {
    if (modalityLUT) {
      return generateNonLinearModalityLUT(modalityLUT);
    } else {
      return generateLinearModalityLUT(slope, intercept);
    }
  }

    // Module exports
    cornerstone.internal.getModalityLUT = getModalityLUT;

}(cornerstone));

/**
 * This module contains a function to convert stored pixel values to display pixel values using a LUT
 */
(function (cornerstone) {

    "use strict";

    function storedColorPixelDataToCanvasImageData(image, lut, canvasImageDataData)
    {
        var minPixelValue = image.minPixelValue;
        var canvasImageDataIndex = 0;
        var storedPixelDataIndex = 0;
        var numPixels = image.width * image.height * 4;
        var storedPixelData = image.getPixelData();
        var localLut = lut;
        var localCanvasImageDataData = canvasImageDataData;
        // NOTE: As of Nov 2014, most javascript engines have lower performance when indexing negative indexes.
        // We have a special code path for this case that improves performance.  Thanks to @jpambrun for this enhancement
        if(minPixelValue < 0){
            while(storedPixelDataIndex < numPixels) {
                localCanvasImageDataData[canvasImageDataIndex++] = localLut[storedPixelData[storedPixelDataIndex++] + (-minPixelValue)]; // red
                localCanvasImageDataData[canvasImageDataIndex++] = localLut[storedPixelData[storedPixelDataIndex++] + (-minPixelValue)]; // green
                localCanvasImageDataData[canvasImageDataIndex] = localLut[storedPixelData[storedPixelDataIndex] + (-minPixelValue)]; // blue
                storedPixelDataIndex+=2;
                canvasImageDataIndex+=2;
            }
        }else{
            while(storedPixelDataIndex < numPixels) {
                localCanvasImageDataData[canvasImageDataIndex++] = localLut[storedPixelData[storedPixelDataIndex++]]; // red
                localCanvasImageDataData[canvasImageDataIndex++] = localLut[storedPixelData[storedPixelDataIndex++]]; // green
                localCanvasImageDataData[canvasImageDataIndex] = localLut[storedPixelData[storedPixelDataIndex]]; // blue
                storedPixelDataIndex+=2;
                canvasImageDataIndex+=2;
            }
        }
    }

    // Module exports
    cornerstone.internal.storedColorPixelDataToCanvasImageData = storedColorPixelDataToCanvasImageData;
    cornerstone.storedColorPixelDataToCanvasImageData = storedColorPixelDataToCanvasImageData;

}(cornerstone));

/**
 * This module contains a function to convert stored pixel values to display pixel values using a LUT
 */
(function (cornerstone) {

    "use strict";

    /**
     * This function transforms stored pixel values into a canvas image data buffer
     * by using a LUT.  This is the most performance sensitive code in cornerstone and
     * we use a special trick to make this go as fast as possible.  Specifically we
     * use the alpha channel only to control the luminance rather than the red, green and
     * blue channels which makes it over 3x faster.  The canvasImageDataData buffer needs
     * to be previously filled with white pixels.
     *
     * NOTE: Attribution would be appreciated if you use this technique!
     *
     * @param pixelData the pixel data
     * @param lut the lut
     * @param canvasImageDataData a canvasImgageData.data buffer filled with white pixels
     */
    function storedPixelDataToCanvasImageData(image, lut, canvasImageDataData)
    {
        var pixelData = image.getPixelData();
        var minPixelValue = image.minPixelValue;
        var canvasImageDataIndex = 3;
        var storedPixelDataIndex = 0;
        var localNumPixels = pixelData.length;
        var localPixelData = pixelData;
        var localLut = lut;
        var localCanvasImageDataData = canvasImageDataData;
        // NOTE: As of Nov 2014, most javascript engines have lower performance when indexing negative indexes.
        // We have a special code path for this case that improves performance.  Thanks to @jpambrun for this enhancement
        if(minPixelValue < 0){
            while(storedPixelDataIndex < localNumPixels) {
                localCanvasImageDataData[canvasImageDataIndex] = localLut[localPixelData[storedPixelDataIndex++] + (-minPixelValue)]; // alpha
                canvasImageDataIndex += 4;
            }
        }else{
            while(storedPixelDataIndex < localNumPixels) {
                localCanvasImageDataData[canvasImageDataIndex] = localLut[localPixelData[storedPixelDataIndex++]]; // alpha
                canvasImageDataIndex += 4;
            }
        }
    }

    // Module exports
    cornerstone.internal.storedPixelDataToCanvasImageData = storedPixelDataToCanvasImageData;
    cornerstone.storedPixelDataToCanvasImageData = storedPixelDataToCanvasImageData;

}(cornerstone));

// Last updated November 2011
// By Simon Sarris
// www.simonsarris.com
// sarris@acm.org
//
// Free to use and distribute at will
// So long as you are nice to people, etc

// Simple class for keeping track of the current transformation matrix

// For instance:
//    var t = new Transform();
//    t.rotate(5);
//    var m = t.m;
//    ctx.setTransform(m[0], m[1], m[2], m[3], m[4], m[5]);

// Is equivalent to:
//    ctx.rotate(5);

// But now you can retrieve it :)

(function (cornerstone) {

    "use strict";


    // Remember that this does not account for any CSS transforms applied to the canvas
    function Transform() {
        this.reset();
    }

    Transform.prototype.reset = function() {
        this.m = [1,0,0,1,0,0];
    };

    Transform.prototype.clone = function() {
        var transform = new Transform();
        transform.m[0] = this.m[0];
        transform.m[1] = this.m[1];
        transform.m[2] = this.m[2];
        transform.m[3] = this.m[3];
        transform.m[4] = this.m[4];
        transform.m[5] = this.m[5];
        return transform;
    };


    Transform.prototype.multiply = function(matrix) {
        var m11 = this.m[0] * matrix.m[0] + this.m[2] * matrix.m[1];
        var m12 = this.m[1] * matrix.m[0] + this.m[3] * matrix.m[1];

        var m21 = this.m[0] * matrix.m[2] + this.m[2] * matrix.m[3];
        var m22 = this.m[1] * matrix.m[2] + this.m[3] * matrix.m[3];

        var dx = this.m[0] * matrix.m[4] + this.m[2] * matrix.m[5] + this.m[4];
        var dy = this.m[1] * matrix.m[4] + this.m[3] * matrix.m[5] + this.m[5];

        this.m[0] = m11;
        this.m[1] = m12;
        this.m[2] = m21;
        this.m[3] = m22;
        this.m[4] = dx;
        this.m[5] = dy;
    };

    Transform.prototype.invert = function() {
        var d = 1 / (this.m[0] * this.m[3] - this.m[1] * this.m[2]);
        var m0 = this.m[3] * d;
        var m1 = -this.m[1] * d;
        var m2 = -this.m[2] * d;
        var m3 = this.m[0] * d;
        var m4 = d * (this.m[2] * this.m[5] - this.m[3] * this.m[4]);
        var m5 = d * (this.m[1] * this.m[4] - this.m[0] * this.m[5]);
        this.m[0] = m0;
        this.m[1] = m1;
        this.m[2] = m2;
        this.m[3] = m3;
        this.m[4] = m4;
        this.m[5] = m5;
    };

    Transform.prototype.rotate = function(rad) {
        var c = Math.cos(rad);
        var s = Math.sin(rad);
        var m11 = this.m[0] * c + this.m[2] * s;
        var m12 = this.m[1] * c + this.m[3] * s;
        var m21 = this.m[0] * -s + this.m[2] * c;
        var m22 = this.m[1] * -s + this.m[3] * c;
        this.m[0] = m11;
        this.m[1] = m12;
        this.m[2] = m21;
        this.m[3] = m22;
    };

    Transform.prototype.translate = function(x, y) {
        this.m[4] += this.m[0] * x + this.m[2] * y;
        this.m[5] += this.m[1] * x + this.m[3] * y;
    };

    Transform.prototype.scale = function(sx, sy) {
        this.m[0] *= sx;
        this.m[1] *= sx;
        this.m[2] *= sy;
        this.m[3] *= sy;
    };

    Transform.prototype.transformPoint = function(px, py) {
        var x = px;
        var y = py;
        px = x * this.m[0] + y * this.m[2] + this.m[4];
        py = x * this.m[1] + y * this.m[3] + this.m[5];
        return {x: px, y: py};
    };

    cornerstone.internal.Transform = Transform;
}(cornerstone));
/**
 * This module generates a VOI LUT
 */

(function (cornerstone) {

  "use strict";

  function generateLinearVOILUT(windowWidth, windowCenter) {
    return function(modalityLutValue) {
      return (((modalityLutValue - (windowCenter)) / (windowWidth) + 0.5) * 255.0);
    }
  }

  function generateNonLinearVOILUT(voiLUT) {
    var shift = voiLUT.numBitsPerEntry - 8;
    var minValue = voiLUT.lut[0] >> shift;
    var maxValue = voiLUT.lut[voiLUT.lut.length -1] >> shift;
    var maxValueMapped = voiLUT.firstValueMapped + voiLUT.lut.length - 1;
    return function(modalityLutValue) {
      if(modalityLutValue < voiLUT.firstValueMapped) {
        return minValue;
      }
      else if(modalityLutValue >= maxValueMapped)
      {
        return maxValue;
      }
      else
      {
        return voiLUT.lut[modalityLutValue - voiLUT.firstValueMapped] >> shift;
      }
    }
  }

  function getVOILUT(windowWidth, windowCenter, voiLUT) {
    if(voiLUT) {
      return generateNonLinearVOILUT(voiLUT);
    } else {
      return generateLinearVOILUT(windowWidth, windowCenter);
    }
  }

  // Module exports
  cornerstone.internal.getVOILUT = getVOILUT;
}(cornerstone));

/**
 * This module contains a function to make an image is invalid
 */
(function (cornerstone) {

    "use strict";

    /**
     * Sets the invalid flag on the enabled element and fire an event
     * @param element
     */
    function invalidate(element) {
        var enabledElement = cornerstone.getEnabledElement(element);
        enabledElement.invalid = true;
        var eventData = {
            element: element
        };
        $(enabledElement.element).trigger("CornerstoneInvalidated", eventData);
    }

    // module exports
    cornerstone.invalidate = invalidate;
}(cornerstone));
/**
 * This module contains a function to immediately invalidate an image
 */
(function (cornerstone) {

    "use strict";

    /**
     * Forces the image to be updated/redrawn for the specified enabled element
     * @param element
     */
    function invalidateImageId(imageId) {

        var enabledElements = cornerstone.getEnabledElementsByImageId(imageId);
        enabledElements.forEach(function(enabledElement) {
            cornerstone.drawImage(enabledElement, true);
        });
    }

    // module exports
    cornerstone.invalidateImageId = invalidateImageId;
}(cornerstone));
/**
 * This module contains a helper function to covert page coordinates to pixel coordinates
 */
(function (cornerstone) {

    "use strict";

    /**
     * Converts a point in the page coordinate system to the pixel coordinate
     * system
     * @param element
     * @param pageX
     * @param pageY
     * @returns {{x: number, y: number}}
     */
    function pageToPixel(element, pageX, pageY) {
        var enabledElement = cornerstone.getEnabledElement(element);

        if(enabledElement.image === undefined) {
            throw "image has not been loaded yet";
        }

        var image = enabledElement.image;

        // convert the pageX and pageY to the canvas client coordinates
        var rect = element.getBoundingClientRect();
        var clientX = pageX - rect.left - window.pageXOffset;
        var clientY = pageY - rect.top - window.pageYOffset;

        var pt = {x: clientX, y: clientY};
        var transform = cornerstone.internal.getTransform(enabledElement);
        transform.invert();
        return transform.transformPoint(pt.x, pt.y);
    }

    // module/private exports
    cornerstone.pageToPixel = pageToPixel;

}(cornerstone));

(function (cornerstone) {

    "use strict";

    /**
     * Converts a point in the pixel coordinate system to the canvas coordinate system
     * system.  This can be used to render using canvas context without having the weird
     * side effects that come from scaling and non square pixels
     * @param element
     * @param pt
     * @returns {x: number, y: number}
     */
    function pixelToCanvas(element, pt) {
        var enabledElement = cornerstone.getEnabledElement(element);
        var transform = cornerstone.internal.getTransform(enabledElement);
        return transform.transformPoint(pt.x, pt.y);
    }

    // module/private exports
    cornerstone.pixelToCanvas = pixelToCanvas;

}(cornerstone));

/**
 * This module is responsible for drawing an image to an enabled elements canvas element
 */

(function (cornerstone) {

    "use strict";

    var colorRenderCanvas = document.createElement('canvas');
    var colorRenderCanvasContext;
    var colorRenderCanvasData;

    var lastRenderedImageId;
    var lastRenderedViewport = {};

    function initializeColorRenderCanvas(image)
    {
        // Resize the canvas
        colorRenderCanvas.width = image.width;
        colorRenderCanvas.height = image.height;

        // get the canvas data so we can write to it directly
        colorRenderCanvasContext = colorRenderCanvas.getContext('2d');
        colorRenderCanvasContext.fillStyle = 'white';
        colorRenderCanvasContext.fillRect(0,0, colorRenderCanvas.width, colorRenderCanvas.height);
        colorRenderCanvasData = colorRenderCanvasContext.getImageData(0,0,image.width, image.height);
    }


    function getLut(image, viewport)
    {
        // if we have a cached lut and it has the right values, return it immediately
        if(image.lut !== undefined &&
            image.lut.windowCenter === viewport.voi.windowCenter &&
            image.lut.windowWidth === viewport.voi.windowWidth &&
            image.lut.invert === viewport.invert) {
            return image.lut;
        }

        // lut is invalid or not present, regenerate it and cache it
        cornerstone.generateLut(image, viewport.voi.windowWidth, viewport.voi.windowCenter, viewport.invert);
        image.lut.windowWidth = viewport.voi.windowWidth;
        image.lut.windowCenter = viewport.voi.windowCenter;
        image.lut.invert = viewport.invert;
        return image.lut;
    }

    function doesImageNeedToBeRendered(enabledElement, image)
    {
        if(image.imageId !== lastRenderedImageId ||
            lastRenderedViewport.windowCenter !== enabledElement.viewport.voi.windowCenter ||
            lastRenderedViewport.windowWidth !== enabledElement.viewport.voi.windowWidth ||
            lastRenderedViewport.invert !== enabledElement.viewport.invert ||
            lastRenderedViewport.rotation !== enabledElement.viewport.rotation ||  
            lastRenderedViewport.hflip !== enabledElement.viewport.hflip ||
            lastRenderedViewport.vflip !== enabledElement.viewport.vflip
            )
        {
            return true;
        }

        return false;
    }

    function getRenderCanvas(enabledElement, image, invalidated)
    {

        // The ww/wc is identity and not inverted - get a canvas with the image rendered into it for
        // fast drawing
        if(enabledElement.viewport.voi.windowWidth === 255 &&
            enabledElement.viewport.voi.windowCenter === 128 &&
            enabledElement.viewport.invert === false &&
            image.getCanvas &&
            image.getCanvas()
        )
        {
            return image.getCanvas();
        }

        // apply the lut to the stored pixel data onto the render canvas
        if(doesImageNeedToBeRendered(enabledElement, image) === false && invalidated !== true) {
            return colorRenderCanvas;
        }

        // If our render canvas does not match the size of this image reset it
        // NOTE: This might be inefficient if we are updating multiple images of different
        // sizes frequently.
        if(colorRenderCanvas.width !== image.width || colorRenderCanvas.height != image.height) {
            initializeColorRenderCanvas(image);
        }

        // get the lut to use
        var colorLut = getLut(image, enabledElement.viewport);

        // the color image voi/invert has been modified - apply the lut to the underlying
        // pixel data and put it into the renderCanvas
        cornerstone.storedColorPixelDataToCanvasImageData(image, colorLut, colorRenderCanvasData.data);
        colorRenderCanvasContext.putImageData(colorRenderCanvasData, 0, 0);
        return colorRenderCanvas;
    }

    /**
     * API function to render a color image to an enabled element
     * @param enabledElement
     * @param invalidated - true if pixel data has been invaldiated and cached rendering should not be used
     */
    function renderColorImage(enabledElement, invalidated) {

        if(enabledElement === undefined) {
            throw "drawImage: enabledElement parameter must not be undefined";
        }
        var image = enabledElement.image;
        if(image === undefined) {
            throw "drawImage: image must be loaded before it can be drawn";
        }

        // get the canvas context and reset the transform
        var context = enabledElement.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);

        // clear the canvas
        context.fillStyle = 'black';
        context.fillRect(0,0, enabledElement.canvas.width, enabledElement.canvas.height);

        // turn off image smooth/interpolation if pixelReplication is set in the viewport
        if(enabledElement.viewport.pixelReplication === true) {
            context.imageSmoothingEnabled = false;
            context.mozImageSmoothingEnabled = false; // firefox doesn't support imageSmoothingEnabled yet
        }
        else {
            context.imageSmoothingEnabled = true;
            context.mozImageSmoothingEnabled = true;
        }

        // save the canvas context state and apply the viewport properties
        context.save();
        cornerstone.setToPixelCoordinateSystem(enabledElement, context);

        var renderCanvas = getRenderCanvas(enabledElement, image, invalidated);

        context.drawImage(renderCanvas, 0,0, image.width, image.height, 0, 0, image.width, image.height);

        context.restore();

        lastRenderedImageId = image.imageId;
        lastRenderedViewport.windowCenter = enabledElement.viewport.voi.windowCenter;
        lastRenderedViewport.windowWidth = enabledElement.viewport.voi.windowWidth;
        lastRenderedViewport.invert = enabledElement.viewport.invert;
        lastRenderedViewport.rotation = enabledElement.viewport.rotation;
        lastRenderedViewport.hflip = enabledElement.viewport.hflip;
        lastRenderedViewport.vflip = enabledElement.viewport.vflip;
    }

    // Module exports
    cornerstone.rendering.colorImage = renderColorImage;
    cornerstone.renderColorImage = renderColorImage;
}(cornerstone));

/**
 * This module is responsible for drawing a grayscale imageß
 */

(function (cornerstone) {

    "use strict";

    var grayscaleRenderCanvas = document.createElement('canvas');
    var grayscaleRenderCanvasContext;
    var grayscaleRenderCanvasData;

    var lastRenderedImageId;
    var lastRenderedViewport = {};

    function initializeGrayscaleRenderCanvas(image)
    {
        // Resize the canvas
        grayscaleRenderCanvas.width = image.width;
        grayscaleRenderCanvas.height = image.height;

        // NOTE - we need to fill the render canvas with white pixels since we control the luminance
        // using the alpha channel to improve rendering performance.
        grayscaleRenderCanvasContext = grayscaleRenderCanvas.getContext('2d');
        grayscaleRenderCanvasContext.fillStyle = 'white';
        grayscaleRenderCanvasContext.fillRect(0,0, grayscaleRenderCanvas.width, grayscaleRenderCanvas.height);
        grayscaleRenderCanvasData = grayscaleRenderCanvasContext.getImageData(0,0,image.width, image.height);
    }

    function lutMatches(a, b) {
      // if undefined, they are equal
      if(!a && !b) {
        return true;
      }
      // if one is undefined, not equal
      if(!a || !b) {
        return false;
      }
      // check the unique ids
      return (a.id !== b.id)
    }

    function getLut(image, viewport, invalidated)
    {
        // if we have a cached lut and it has the right values, return it immediately
        if(image.lut !== undefined &&
            image.lut.windowCenter === viewport.voi.windowCenter &&
            image.lut.windowWidth === viewport.voi.windowWidth &&
            lutMatches(image.lut.modalityLUT, viewport.modalityLUT) &&
            lutMatches(image.lut.voiLUT, viewport.voiLUT) &&
            image.lut.invert === viewport.invert &&
            invalidated !== true) {
            return image.lut;
        }

        // lut is invalid or not present, regenerate it and cache it
        cornerstone.generateLut(image, viewport.voi.windowWidth, viewport.voi.windowCenter, viewport.invert, viewport.modalityLUT, viewport.voiLUT);
        image.lut.windowWidth = viewport.voi.windowWidth;
        image.lut.windowCenter = viewport.voi.windowCenter;
        image.lut.invert = viewport.invert;
        image.lut.voiLUT = viewport.voiLUT;
        image.lut.modalityLUT = viewport.modalityLUT;
        return image.lut;
    }

    function doesImageNeedToBeRendered(enabledElement, image)
    {
        if(image.imageId !== lastRenderedImageId ||
            lastRenderedViewport.windowCenter !== enabledElement.viewport.voi.windowCenter ||
            lastRenderedViewport.windowWidth !== enabledElement.viewport.voi.windowWidth ||
            lastRenderedViewport.invert !== enabledElement.viewport.invert ||
            lastRenderedViewport.rotation !== enabledElement.viewport.rotation ||
            lastRenderedViewport.hflip !== enabledElement.viewport.hflip ||
            lastRenderedViewport.vflip !== enabledElement.viewport.vflip ||
            lastRenderedViewport.modalityLUT !== enabledElement.viewport.modalityLUT ||
            lastRenderedViewport.voiLUT !== enabledElement.viewport.voiLUT
            )
        {
            return true;
        }

        return false;
    }

    function getRenderCanvas(enabledElement, image, invalidated)
    {
        // apply the lut to the stored pixel data onto the render canvas

        if(doesImageNeedToBeRendered(enabledElement, image) === false && invalidated !== true) {
            return grayscaleRenderCanvas;
        }

        // If our render canvas does not match the size of this image reset it
        // NOTE: This might be inefficient if we are updating multiple images of different
        // sizes frequently.
        if(grayscaleRenderCanvas.width !== image.width || grayscaleRenderCanvas.height != image.height) {
            initializeGrayscaleRenderCanvas(image);
        }

        // get the lut to use
        var lut = getLut(image, enabledElement.viewport, invalidated);
        // gray scale image - apply the lut and put the resulting image onto the render canvas
        cornerstone.storedPixelDataToCanvasImageData(image, lut, grayscaleRenderCanvasData.data);
        grayscaleRenderCanvasContext.putImageData(grayscaleRenderCanvasData, 0, 0);
        return grayscaleRenderCanvas;
    }

    /**
     * API function to draw a grayscale image to a given enabledElement
     * @param enabledElement
     * @param invalidated - true if pixel data has been invaldiated and cached rendering should not be used
     */
    function renderGrayscaleImage(enabledElement, invalidated) {

        if(enabledElement === undefined) {
            throw "drawImage: enabledElement parameter must not be undefined";
        }
        var image = enabledElement.image;
        if(image === undefined) {
            throw "drawImage: image must be loaded before it can be drawn";
        }

        // get the canvas context and reset the transform
        var context = enabledElement.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);

        // clear the canvas
        context.fillStyle = 'black';
        context.fillRect(0,0, enabledElement.canvas.width, enabledElement.canvas.height);

        // turn off image smooth/interpolation if pixelReplication is set in the viewport
        if(enabledElement.viewport.pixelReplication === true) {
            context.imageSmoothingEnabled = false;
            context.mozImageSmoothingEnabled = false; // firefox doesn't support imageSmoothingEnabled yet
        }
        else {
            context.imageSmoothingEnabled = true;
            context.mozImageSmoothingEnabled = true;
        }

        // save the canvas context state and apply the viewport properties
        cornerstone.setToPixelCoordinateSystem(enabledElement, context);

        var renderCanvas = getRenderCanvas(enabledElement, image, invalidated);

        // Draw the render canvas half the image size (because we set origin to the middle of the canvas above)
        context.drawImage(renderCanvas, 0,0, image.width, image.height, 0, 0, image.width, image.height);

        lastRenderedImageId = image.imageId;
        lastRenderedViewport.windowCenter = enabledElement.viewport.voi.windowCenter;
        lastRenderedViewport.windowWidth = enabledElement.viewport.voi.windowWidth;
        lastRenderedViewport.invert = enabledElement.viewport.invert;
        lastRenderedViewport.rotation = enabledElement.viewport.rotation;
        lastRenderedViewport.hflip = enabledElement.viewport.hflip;
        lastRenderedViewport.vflip = enabledElement.viewport.vflip;
        lastRenderedViewport.modalityLUT = enabledElement.viewport.modalityLUT;
        lastRenderedViewport.voiLUT = enabledElement.viewport.voiLUT;
    }

    // Module exports
    cornerstone.rendering.grayscaleImage = renderGrayscaleImage;
    cornerstone.renderGrayscaleImage = renderGrayscaleImage;

}(cornerstone));

/**
 * This module is responsible for drawing an image to an enabled elements canvas element
 */

(function (cornerstone) {

    "use strict";

    /**
     * API function to draw a standard web image (PNG, JPG) to an enabledImage
     *
     * @param enabledElement
     * @param invalidated - true if pixel data has been invaldiated and cached rendering should not be used
     */
    function renderWebImage(enabledElement, invalidated) {

        if(enabledElement === undefined) {
            throw "drawImage: enabledElement parameter must not be undefined";
        }
        var image = enabledElement.image;
        if(image === undefined) {
            throw "drawImage: image must be loaded before it can be drawn";
        }

        // get the canvas context and reset the transform
        var context = enabledElement.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);

        // clear the canvas
        context.fillStyle = 'black';
        context.fillRect(0,0, enabledElement.canvas.width, enabledElement.canvas.height);

        // turn off image smooth/interpolation if pixelReplication is set in the viewport
        if(enabledElement.viewport.pixelReplication === true) {
            context.imageSmoothingEnabled = false;
            context.mozImageSmoothingEnabled = false; // firefox doesn't support imageSmoothingEnabled yet
        }
        else {
            context.imageSmoothingEnabled = true;
            context.mozImageSmoothingEnabled = true;
        }

        // save the canvas context state and apply the viewport properties
        cornerstone.setToPixelCoordinateSystem(enabledElement, context);

        // if the viewport ww/wc and invert all match the initial state of the image, we can draw the image
        // directly.  If any of those are changed, we call renderColorImage() to apply the lut
        if(enabledElement.viewport.voi.windowWidth === enabledElement.image.windowWidth &&
            enabledElement.viewport.voi.windowCenter === enabledElement.image.windowCenter &&
            enabledElement.viewport.invert === false)
        {
            context.drawImage(image.getImage(), 0, 0, image.width, image.height, 0, 0, image.width, image.height);
        } else {
            cornerstone.renderColorImage(enabledElement, invalidated);
        }

    }

    // Module exports
    cornerstone.rendering.webImage = renderWebImage;
    cornerstone.renderWebImage = renderWebImage;

}(cornerstone));
/**
 */
(function (cornerstone) {

  "use strict";

  /**
   * Resets the viewport to the default settings
   *
   * @param element
   */
  function reset(element)
  {
    var enabledElement = cornerstone.getEnabledElement(element);
    var defaultViewport = cornerstone.internal.getDefaultViewport(enabledElement.canvas, enabledElement.image);
    enabledElement.viewport = defaultViewport;
    cornerstone.updateImage(element);
  }

  cornerstone.reset = reset;
}(cornerstone));

/**
 * This module is responsible for enabling an element to display images with cornerstone
 */
(function (cornerstone) {

    "use strict";

    function setCanvasSize(element, canvas)
    {
        // the device pixel ratio is 1.0 for normal displays and > 1.0
        // for high DPI displays like Retina
        /*

        This functionality is disabled due to buggy behavior on systems with mixed DPI's.  If the canvas
        is created on a display with high DPI (e.g. 2.0) and then the browser window is dragged to
        a different display with a different DPI (e.g. 1.0), the canvas is not recreated so the pageToPixel
        produces incorrect results.  I couldn't find any way to determine when the DPI changed other than
        by polling which is not very clean.  If anyone has any ideas here, please let me know, but for now
        we will disable this functionality.  We may want
        to add a mechanism to optionally enable this functionality if we can determine it is safe to do
        so (e.g. iPad or iPhone or perhaps enumerate the displays on the system.  I am choosing
        to be cautious here since I would rather not have bug reports or safety issues related to this
        scenario.

        var devicePixelRatio = window.devicePixelRatio;
        if(devicePixelRatio === undefined) {
            devicePixelRatio = 1.0;
        }
        */

        canvas.width = element.clientWidth;
        canvas.height = element.clientHeight;
        canvas.style.width = element.clientWidth + "px";
        canvas.style.height = element.clientHeight + "px";
    }

    /**
     * resizes an enabled element and optionally fits the image to window
     * @param element
     * @param fitToWindow true to refit, false to leave viewport parameters as they are
     */
    function resize(element, fitToWindow) {

        var enabledElement = cornerstone.getEnabledElement(element);

        setCanvasSize(element, enabledElement.canvas);

        if(enabledElement.image === undefined ) {
            return;
        }

        if(fitToWindow === true) {
            cornerstone.fitToWindow(element);
        }
        else {
            cornerstone.updateImage(element);
        }
    }

    // module/private exports
    cornerstone.resize = resize;

}(cornerstone));
/**
 * This module contains a function that will set the canvas context to the pixel coordinates system
 * making it easy to draw geometry on the image
 */

(function (cornerstone) {

    "use strict";

    /**
     * Sets the canvas context transformation matrix to the pixel coordinate system.  This allows
     * geometry to be driven using the canvas context using coordinates in the pixel coordinate system
     * @param ee
     * @param context
     * @param scale optional scaler to apply
     */
    function setToPixelCoordinateSystem(enabledElement, context, scale)
    {
        if(enabledElement === undefined) {
            throw "setToPixelCoordinateSystem: parameter enabledElement must not be undefined";
        }
        if(context === undefined) {
            throw "setToPixelCoordinateSystem: parameter context must not be undefined";
        }

        var transform = cornerstone.internal.calculateTransform(enabledElement, scale);
        context.setTransform(transform.m[0],transform.m[1],transform.m[2],transform.m[3],transform.m[4],transform.m[5],transform.m[6]);
    }

    // Module exports
    cornerstone.setToPixelCoordinateSystem = setToPixelCoordinateSystem;
}(cornerstone));
/**
 * This module contains functions to deal with getting and setting the viewport for an enabled element
 */
(function (cornerstone) {

    "use strict";

    /**
     * Sets the viewport for an element and corrects invalid values
     *
     * @param element - DOM element of the enabled element
     * @param viewport - Object containing the viewport properties
     * @returns {*}
     */
    function setViewport(element, viewport) {

        var enabledElement = cornerstone.getEnabledElement(element);

        enabledElement.viewport.scale = viewport.scale;
        enabledElement.viewport.translation.x = viewport.translation.x;
        enabledElement.viewport.translation.y = viewport.translation.y;
        enabledElement.viewport.voi.windowWidth = viewport.voi.windowWidth;
        enabledElement.viewport.voi.windowCenter = viewport.voi.windowCenter;
        enabledElement.viewport.invert = viewport.invert;
        enabledElement.viewport.pixelReplication = viewport.pixelReplication;
        enabledElement.viewport.rotation = viewport.rotation;
        enabledElement.viewport.hflip = viewport.hflip;
        enabledElement.viewport.vflip = viewport.vflip;
        enabledElement.viewport.modalityLUT = viewport.modalityLUT;
        enabledElement.viewport.voiLUT = viewport.voiLUT;

        // prevent window width from being too small (note that values close to zero are valid and can occur with
        // PET images in particular)
        if(enabledElement.viewport.voi.windowWidth < 0.000001) {
            enabledElement.viewport.voi.windowWidth = 0.000001;
        }
        // prevent scale from getting too small
        if(enabledElement.viewport.scale < 0.0001) {
            enabledElement.viewport.scale = 0.25;
        }

        if(enabledElement.viewport.rotation===360 || enabledElement.viewport.rotation===-360) {
            enabledElement.viewport.rotation = 0;
        }

        // Force the image to be updated since the viewport has been modified
        cornerstone.updateImage(element);
    }


    // module/private exports
    cornerstone.setViewport = setViewport;

}(cornerstone));

/**
 * This module contains a function to immediately redraw an image
 */
(function (cornerstone) {

    "use strict";

    /**
     * Forces the image to be updated/redrawn for the specified enabled element
     * @param element
     */
    function updateImage(element, invalidated) {
        var enabledElement = cornerstone.getEnabledElement(element);

        if(enabledElement.image === undefined) {
            throw "updateImage: image has not been loaded yet";
        }

        cornerstone.drawImage(enabledElement, invalidated);
    }

    // module exports
    cornerstone.updateImage = updateImage;

}(cornerstone));

module.exports = cornerstone;
},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/lib/cornerstoneMath.js":[function(require,module,exports){
/*! cornerstoneMath - v0.1.3 - 2016-02-04 | (c) 2014 Chris Hafey | https://github.com/chafey/cornerstoneMath */
// Begin Source: src/vector3.js
// Based on THREE.JS

var cornerstoneMath;
module.exports = cornerstoneMath = (function (cornerstoneMath) {

    "use strict";

    if(cornerstoneMath === undefined) {
        cornerstoneMath = {};
    }

    cornerstoneMath.Vector3 = function ( x, y, z ) {

        this.x = x || 0;
        this.y = y || 0;
        this.z = z || 0;

    };

    cornerstoneMath.Vector3.prototype = {

        constructor: cornerstoneMath.Vector3,

        set: function ( x, y, z ) {

            this.x = x;
            this.y = y;
            this.z = z;

            return this;

        },

        setX: function ( x ) {

            this.x = x;

            return this;

        },

        setY: function ( y ) {

            this.y = y;

            return this;

        },

        setZ: function ( z ) {

            this.z = z;

            return this;

        },

        setComponent: function ( index, value ) {

            switch ( index ) {

                case 0: this.x = value; break;
                case 1: this.y = value; break;
                case 2: this.z = value; break;
                default: throw new Error( "index is out of range: " + index );

            }

        },

        getComponent: function ( index ) {

            switch ( index ) {

                case 0: return this.x;
                case 1: return this.y;
                case 2: return this.z;
                default: throw new Error( "index is out of range: " + index );

            }

        },

        copy: function ( v ) {

            this.x = v.x;
            this.y = v.y;
            this.z = v.z;

            return this;

        },

        add: function ( v, w ) {

            if ( w !== undefined ) {

                console.warn( 'DEPRECATED: Vector3\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
                return this.addVectors( v, w );

            }

            this.x += v.x;
            this.y += v.y;
            this.z += v.z;

            return this;

        },

        addScalar: function ( s ) {

            this.x += s;
            this.y += s;
            this.z += s;

            return this;

        },

        addVectors: function ( a, b ) {

            this.x = a.x + b.x;
            this.y = a.y + b.y;
            this.z = a.z + b.z;

            return this;

        },

        sub: function ( v, w ) {

            if ( w !== undefined ) {

                console.warn( 'DEPRECATED: Vector3\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
                return this.subVectors( v, w );

            }

            this.x -= v.x;
            this.y -= v.y;
            this.z -= v.z;

            return this;

        },

        subVectors: function ( a, b ) {

            this.x = a.x - b.x;
            this.y = a.y - b.y;
            this.z = a.z - b.z;

            return this;

        },

        multiply: function ( v, w ) {

            if ( w !== undefined ) {

                console.warn( 'DEPRECATED: Vector3\'s .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
                return this.multiplyVectors( v, w );

            }

            this.x *= v.x;
            this.y *= v.y;
            this.z *= v.z;

            return this;

        },

        multiplyScalar: function ( scalar ) {

            this.x *= scalar;
            this.y *= scalar;
            this.z *= scalar;

            return this;

        },

        multiplyVectors: function ( a, b ) {

            this.x = a.x * b.x;
            this.y = a.y * b.y;
            this.z = a.z * b.z;

            return this;

        },


        applyAxisAngle: function () {

            var quaternion;

            return function ( axis, angle ) {

                if ( quaternion === undefined ) quaternion = new cornerstoneMath.Quaternion();

                this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

                return this;

            };

        }(),

        applyMatrix3: function ( m ) {

            var x = this.x;
            var y = this.y;
            var z = this.z;

            var e = m.elements;

            this.x = e[0] * x + e[3] * y + e[6] * z;
            this.y = e[1] * x + e[4] * y + e[7] * z;
            this.z = e[2] * x + e[5] * y + e[8] * z;

            return this;

        },

        applyMatrix4: function ( m ) {

            // input: THREE.Matrix4 affine matrix

            var x = this.x, y = this.y, z = this.z;

            var e = m.elements;

            this.x = e[0] * x + e[4] * y + e[8]  * z + e[12];
            this.y = e[1] * x + e[5] * y + e[9]  * z + e[13];
            this.z = e[2] * x + e[6] * y + e[10] * z + e[14];

            return this;

        },

        applyProjection: function ( m ) {

            // input: THREE.Matrix4 projection matrix

            var x = this.x, y = this.y, z = this.z;

            var e = m.elements;
            var d = 1 / ( e[3] * x + e[7] * y + e[11] * z + e[15] ); // perspective divide

            this.x = ( e[0] * x + e[4] * y + e[8]  * z + e[12] ) * d;
            this.y = ( e[1] * x + e[5] * y + e[9]  * z + e[13] ) * d;
            this.z = ( e[2] * x + e[6] * y + e[10] * z + e[14] ) * d;

            return this;

        },

        applyQuaternion: function ( q ) {

            var x = this.x;
            var y = this.y;
            var z = this.z;

            var qx = q.x;
            var qy = q.y;
            var qz = q.z;
            var qw = q.w;

            // calculate quat * vector

            var ix =  qw * x + qy * z - qz * y;
            var iy =  qw * y + qz * x - qx * z;
            var iz =  qw * z + qx * y - qy * x;
            var iw = -qx * x - qy * y - qz * z;

            // calculate result * inverse quat

            this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
            this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
            this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;

            return this;

        },

        transformDirection: function ( m ) {

            // input: THREE.Matrix4 affine matrix
            // vector interpreted as a direction

            var x = this.x, y = this.y, z = this.z;

            var e = m.elements;

            this.x = e[0] * x + e[4] * y + e[8]  * z;
            this.y = e[1] * x + e[5] * y + e[9]  * z;
            this.z = e[2] * x + e[6] * y + e[10] * z;

            this.normalize();

            return this;

        },

        divide: function ( v ) {

            this.x /= v.x;
            this.y /= v.y;
            this.z /= v.z;

            return this;

        },

        divideScalar: function ( scalar ) {

            if ( scalar !== 0 ) {

                var invScalar = 1 / scalar;

                this.x *= invScalar;
                this.y *= invScalar;
                this.z *= invScalar;

            } else {

                this.x = 0;
                this.y = 0;
                this.z = 0;

            }

            return this;

        },

        min: function ( v ) {

            if ( this.x > v.x ) {

                this.x = v.x;

            }

            if ( this.y > v.y ) {

                this.y = v.y;

            }

            if ( this.z > v.z ) {

                this.z = v.z;

            }

            return this;

        },

        max: function ( v ) {

            if ( this.x < v.x ) {

                this.x = v.x;

            }

            if ( this.y < v.y ) {

                this.y = v.y;

            }

            if ( this.z < v.z ) {

                this.z = v.z;

            }

            return this;

        },

        clamp: function ( min, max ) {

            // This function assumes min < max, if this assumption isn't true it will not operate correctly

            if ( this.x < min.x ) {

                this.x = min.x;

            } else if ( this.x > max.x ) {

                this.x = max.x;

            }

            if ( this.y < min.y ) {

                this.y = min.y;

            } else if ( this.y > max.y ) {

                this.y = max.y;

            }

            if ( this.z < min.z ) {

                this.z = min.z;

            } else if ( this.z > max.z ) {

                this.z = max.z;

            }

            return this;

        },

        clampScalar: ( function () {

            var min, max;

            return function ( minVal, maxVal ) {

                if ( min === undefined ) {

                    min = new cornerstoneMath.Vector3();
                    max = new cornerstoneMath.Vector3();

                }

                min.set( minVal, minVal, minVal );
                max.set( maxVal, maxVal, maxVal );

                return this.clamp( min, max );

            };

        } )(),

        floor: function () {

            this.x = Math.floor( this.x );
            this.y = Math.floor( this.y );
            this.z = Math.floor( this.z );

            return this;

        },

        ceil: function () {

            this.x = Math.ceil( this.x );
            this.y = Math.ceil( this.y );
            this.z = Math.ceil( this.z );

            return this;

        },

        round: function () {

            this.x = Math.round( this.x );
            this.y = Math.round( this.y );
            this.z = Math.round( this.z );

            return this;

        },

        roundToZero: function () {

            this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
            this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
            this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

            return this;

        },

        negate: function () {

            return this.multiplyScalar( - 1 );

        },

        dot: function ( v ) {

            return this.x * v.x + this.y * v.y + this.z * v.z;

        },

        lengthSq: function () {

            return this.x * this.x + this.y * this.y + this.z * this.z;

        },

        length: function () {

            return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

        },

        lengthManhattan: function () {

            return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

        },

        normalize: function () {

            return this.divideScalar( this.length() );

        },

        setLength: function ( l ) {

            var oldLength = this.length();

            if ( oldLength !== 0 && l !== oldLength  ) {

                this.multiplyScalar( l / oldLength );
            }

            return this;

        },

        lerp: function ( v, alpha ) {

            this.x += ( v.x - this.x ) * alpha;
            this.y += ( v.y - this.y ) * alpha;
            this.z += ( v.z - this.z ) * alpha;

            return this;

        },

        cross: function ( v, w ) {

            if ( w !== undefined ) {

                console.warn( 'DEPRECATED: Vector3\'s .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
                return this.crossVectors( v, w );

            }

            var x = this.x, y = this.y, z = this.z;

            this.x = y * v.z - z * v.y;
            this.y = z * v.x - x * v.z;
            this.z = x * v.y - y * v.x;

            return this;

        },

        crossVectors: function ( a, b ) {

            var ax = a.x, ay = a.y, az = a.z;
            var bx = b.x, by = b.y, bz = b.z;

            this.x = ay * bz - az * by;
            this.y = az * bx - ax * bz;
            this.z = ax * by - ay * bx;

            return this;

        },

        projectOnVector: function () {

            var v1, dot;

            return function ( vector ) {

                if ( v1 === undefined ) v1 = new cornerstoneMath.Vector3();

                v1.copy( vector ).normalize();

                dot = this.dot( v1 );

                return this.copy( v1 ).multiplyScalar( dot );

            };

        }(),

        projectOnPlane: function () {

            var v1;

            return function ( planeNormal ) {

                if ( v1 === undefined ) v1 = new cornerstoneMath.Vector3();

                v1.copy( this ).projectOnVector( planeNormal );

                return this.sub( v1 );

            };

        }(),

        reflect: function () {

            // reflect incident vector off plane orthogonal to normal
            // normal is assumed to have unit length

            var v1;

            return function ( normal ) {

                if ( v1 === undefined ) v1 = new cornerstoneMath.Vector3();

                return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

            };

        }(),

        angleTo: function ( v ) {

            var theta = this.dot( v ) / ( this.length() * v.length() );

            // clamp, to handle numerical problems

            return Math.acos( cornerstoneMath.clamp( theta, -1, 1 ) );

        },

        distanceTo: function ( v ) {

            return Math.sqrt( this.distanceToSquared( v ) );

        },

        distanceToSquared: function ( v ) {

            var dx = this.x - v.x;
            var dy = this.y - v.y;
            var dz = this.z - v.z;

            return dx * dx + dy * dy + dz * dz;

        },

        setEulerFromRotationMatrix: function ( m, order ) {

            console.error( "REMOVED: Vector3\'s setEulerFromRotationMatrix has been removed in favor of Euler.setFromRotationMatrix(), please update your code.");

        },

        setEulerFromQuaternion: function ( q, order ) {

            console.error( "REMOVED: Vector3\'s setEulerFromQuaternion: has been removed in favor of Euler.setFromQuaternion(), please update your code.");

        },

        getPositionFromMatrix: function ( m ) {

            console.warn( "DEPRECATED: Vector3\'s .getPositionFromMatrix() has been renamed to .setFromMatrixPosition(). Please update your code." );

            return this.setFromMatrixPosition( m );

        },

        getScaleFromMatrix: function ( m ) {

            console.warn( "DEPRECATED: Vector3\'s .getScaleFromMatrix() has been renamed to .setFromMatrixScale(). Please update your code." );

            return this.setFromMatrixScale( m );
        },

        getColumnFromMatrix: function ( index, matrix ) {

            console.warn( "DEPRECATED: Vector3\'s .getColumnFromMatrix() has been renamed to .setFromMatrixColumn(). Please update your code." );

            return this.setFromMatrixColumn( index, matrix );

        },

        setFromMatrixPosition: function ( m ) {

            this.x = m.elements[ 12 ];
            this.y = m.elements[ 13 ];
            this.z = m.elements[ 14 ];

            return this;

        },

        setFromMatrixScale: function ( m ) {

            var sx = this.set( m.elements[ 0 ], m.elements[ 1 ], m.elements[  2 ] ).length();
            var sy = this.set( m.elements[ 4 ], m.elements[ 5 ], m.elements[  6 ] ).length();
            var sz = this.set( m.elements[ 8 ], m.elements[ 9 ], m.elements[ 10 ] ).length();

            this.x = sx;
            this.y = sy;
            this.z = sz;

            return this;
        },

        setFromMatrixColumn: function ( index, matrix ) {

            var offset = index * 4;

            var me = matrix.elements;

            this.x = me[ offset ];
            this.y = me[ offset + 1 ];
            this.z = me[ offset + 2 ];

            return this;

        },

        equals: function ( v ) {

            return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

        },

        fromArray: function ( array ) {

            this.x = array[ 0 ];
            this.y = array[ 1 ];
            this.z = array[ 2 ];

            return this;

        },

        toArray: function () {

            return [ this.x, this.y, this.z ];

        },

        clone: function () {

            return new cornerstoneMath.Vector3( this.x, this.y, this.z );

        }

    };

    return cornerstoneMath;
}(cornerstoneMath)); 
// End Source; src/vector3.js

// Begin Source: src/Line3.js
// Copied from THREE.JS
/**
 * @author bhouston / http://exocortex.com
 */


var cornerstoneMath = (function (cornerstoneMath) {

    "use strict";

    if (cornerstoneMath === undefined) {
        cornerstoneMath = {};
    }

    cornerstoneMath.Line3 = function ( start, end ) {

        this.start = ( start !== undefined ) ? start : new cornerstoneMath.Vector3();
        this.end = ( end !== undefined ) ? end : new cornerstoneMath.Vector3();

    };

    cornerstoneMath.Line3.prototype = {

        constructor: cornerstoneMath.Line3,

        set: function ( start, end ) {

            this.start.copy( start );
            this.end.copy( end );

            return this;

        },

        copy: function ( line ) {

            this.start.copy( line.start );
            this.end.copy( line.end );

            return this;

        },

        center: function ( optionalTarget ) {

            var result = optionalTarget || new cornerstoneMath.Vector3();
            return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

        },

        delta: function ( optionalTarget ) {

            var result = optionalTarget || new cornerstoneMath.Vector3();
            return result.subVectors( this.end, this.start );

        },

        distanceSq: function () {

            return this.start.distanceToSquared( this.end );

        },

        distance: function () {

            return this.start.distanceTo( this.end );

        },

        at: function ( t, optionalTarget ) {

            var result = optionalTarget || new cornerstoneMath.Vector3();

            return this.delta( result ).multiplyScalar( t ).add( this.start );

        },

        closestPointToPointParameter: function () {

            var startP = new cornerstoneMath.Vector3();
            var startEnd = new cornerstoneMath.Vector3();

            return function ( point, clampToLine ) {

                startP.subVectors( point, this.start );
                startEnd.subVectors( this.end, this.start );

                var startEnd2 = startEnd.dot( startEnd );
                var startEnd_startP = startEnd.dot( startP );

                var t = startEnd_startP / startEnd2;

                if ( clampToLine ) {

                    t = cornerstoneMath.Math.clamp( t, 0, 1 );

                }

                return t;

            };

        }(),

        closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

            var t = this.closestPointToPointParameter( point, clampToLine );

            var result = optionalTarget || new cornerstoneMath.Vector3();

            return this.delta( result ).multiplyScalar( t ).add( this.start );

        },

        applyMatrix4: function ( matrix ) {

            this.start.applyMatrix4( matrix );
            this.end.applyMatrix4( matrix );

            return this;

        },

        equals: function ( line ) {

            return line.start.equals( this.start ) && line.end.equals( this.end );

        },

        clone: function () {

            return new cornerstoneMath.Line3().copy( this );

        },

        intersectLine: function ( line ) {
            // http://stackoverflow.com/questions/2316490/the-algorithm-to-find-the-point-of-intersection-of-two-3d-line-segment/10288710#10288710
            var da = this.end.clone().sub(this.start);
            var db = line.end.clone().sub(line.start);
            var dc = line.start.clone().sub(this.start);

            var daCrossDb = da.clone().cross(db);
            var dcCrossDb = dc.clone().cross(db);

            if (dc.dot(da) === 0){
                // Lines are not coplanar, stop here
                return;
            }

            var s = dcCrossDb.dot(daCrossDb) / daCrossDb.lengthSq();

            // Make sure we have an intersection
            if (s > 1.0 || isNaN(s)) {
                return;
            }

            var intersection = this.start.clone().add(da.clone().multiplyScalar(s));
            var distanceTest = intersection.clone().sub(line.start).lengthSq() + intersection.clone().sub(line.end).lengthSq();
            if (distanceTest <= line.distanceSq()) {
                return intersection;
            }
            return;
        }
    };

    return cornerstoneMath;
}(cornerstoneMath)); 
// End Source; src/Line3.js

// Begin Source: src/lineSegment.js
var cornerstoneMath = (function (cornerstoneMath) {

    "use strict";

    if(cornerstoneMath === undefined) {
        cornerstoneMath = {};
    }

    // based on  http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment
    function sqr(x)
    {
        return x * x;
    }

    function dist2(v, w) {
        return sqr(v.x - w.x) + sqr(v.y - w.y);
    }

    function distanceToPointSquared(lineSegment, point)
    {
        var l2 = dist2(lineSegment.start, lineSegment.end);
        if(l2 === 0) {
            return dist2(point, lineSegment.start);
        }
        var t = ((point.x - lineSegment.start.x) * (lineSegment.end.x - lineSegment.start.x) +
            (point.y - lineSegment.start.y) * (lineSegment.end.y - lineSegment.start.y)) / l2;
        if(t < 0) {
            return dist2(point, lineSegment.start);
        }
        if(t > 1) {
            return dist2(point, lineSegment.end);
        }

        var pt = {
            x : lineSegment.start.x + t * (lineSegment.end.x - lineSegment.start.x),
            y : lineSegment.start.y + t * (lineSegment.end.y - lineSegment.start.y)
        };
        return dist2(point, pt);
    }

    function distanceToPoint(lineSegment, point)
    {
        return Math.sqrt(distanceToPointSquared(lineSegment, point));
    }

    // Returns intersection points of two lines
    function intersectLine(lineSegment1, lineSegment2) {
        var intersectionPoint = {};

        var x1 = lineSegment1.start.x, y1 = lineSegment1.start.y, x2 = lineSegment1.end.x, y2 = lineSegment1.end.y,
            x3 = lineSegment2.start.x, y3 = lineSegment2.start.y, x4 = lineSegment2.end.x, y4 = lineSegment2.end.y;

        var a1, a2, b1, b2, c1, c2; // Coefficients of line equations
        var r1, r2, r3, r4; // Sign values

        var denom, num; //Intermediate values

        // Compute a1, b1, c1, where line joining points 1 and 2 is "a1 x  +  b1 y  +  c1  =  0"
        a1 = y2 - y1;
        b1 = x1 - x2;
        c1 = x2 * y1 - x1 * y2;

        // Compute r3 and r4
        r3 = a1 * x3 + b1 * y3 + c1;
        r4 = a1 * x4 + b1 * y4 + c1;

        /* Check signs of r3 and r4.  If both point 3 and point 4 lie on
         * same side of line 1, the line segments do not intersect.
         */

        if (r3 !== 0 &&
            r4 !== 0 &&
            cornerstoneMath.sign(r3) === cornerstoneMath.sign(r4)) {
            return;
        }

        /* Compute a2, b2, c2 */

        a2 = y4 - y3;
        b2 = x3 - x4;
        c2 = x4 * y3 - x3 * y4;

        /* Compute r1 and r2 */

        r1 = a2 * x1 + b2 * y1 + c2;
        r2 = a2 * x2 + b2 * y2 + c2;

        /* Check signs of r1 and r2.  If both point 1 and point 2 lie
         * on same side of second line segment, the line segments do
         * not intersect.
         */

        if (r1 !== 0 &&
            r2 !== 0 &&
            cornerstoneMath.sign(r1) === cornerstoneMath.sign(r2)) {
            return;
        }

        /* Line segments intersect: compute intersection point.
         */

        denom = (a1 * b2) - (a2 * b1);

        /* The denom/2 is to get rounding instead of truncating.  It
         * is added or subtracted to the numerator, depending upon the
         * sign of the numerator.
         */

        num = (b1 * c2) - (b2 * c1);
        var x = parseFloat(num / denom);

        num = (a2 * c1) - (a1 * c2);
        var y = parseFloat(num / denom);

        intersectionPoint.x = x;
        intersectionPoint.y = y;

        return intersectionPoint;
    }

    // module exports
    cornerstoneMath.lineSegment =
    {
        distanceToPoint : distanceToPoint,
        intersectLine: intersectLine
    };


    return cornerstoneMath;
}(cornerstoneMath)); 
// End Source; src/lineSegment.js

// Begin Source: src/math.js
// Based on THREE.JS

var cornerstoneMath = (function (cornerstoneMath) {

    "use strict";

    if (cornerstoneMath === undefined) {
        cornerstoneMath = {};
    }

    function clamp(x,a,b) {
        return ( x < a ) ? a : ( ( x > b ) ? b : x );
    }

    function degToRad(degrees) {
        var degreeToRadiansFactor = Math.PI / 180;
        return degrees * degreeToRadiansFactor;
    }

    function radToDeg(radians) {
        var radianToDegreesFactor = 180 / Math.PI;
        return radians * radianToDegreesFactor;
    }

    // Returns sign of number
    function sign(x) {
        return typeof x === 'number' ? x ? x < 0 ? -1 : 1 : x === x ? 0 : NaN : NaN;
    }

    cornerstoneMath.clamp = clamp;
    cornerstoneMath.degToRad = degToRad;
    cornerstoneMath.radToDeg = radToDeg;
    cornerstoneMath.sign = sign;

    return cornerstoneMath;
}(cornerstoneMath)); 
// End Source; src/math.js

// Begin Source: src/matrix4.js
// Based on THREE.JS

var cornerstoneMath = (function (cornerstoneMath) {

    "use strict";

    if(cornerstoneMath === undefined) {
        cornerstoneMath = {};
    }

    cornerstoneMath.Matrix4 = function Matrix4(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 )
    {
        this.elements = new Float32Array( 16 );

        // TODO: if n11 is undefined, then just set to identity, otherwise copy all other values into matrix
        //   we should not support semi specification of Matrix4, it is just weird.

        var te = this.elements;

        te[0] = ( n11 !== undefined ) ? n11 : 1; te[4] = n12 || 0; te[8] = n13 || 0; te[12] = n14 || 0;
        te[1] = n21 || 0; te[5] = ( n22 !== undefined ) ? n22 : 1; te[9] = n23 || 0; te[13] = n24 || 0;
        te[2] = n31 || 0; te[6] = n32 || 0; te[10] = ( n33 !== undefined ) ? n33 : 1; te[14] = n34 || 0;
        te[3] = n41 || 0; te[7] = n42 || 0; te[11] = n43 || 0; te[15] = ( n44 !== undefined ) ? n44 : 1;
    };

    cornerstoneMath.Matrix4.prototype.makeRotationFromQuaternion = function(q) {
        var te = this.elements;

        var x = q.x, y = q.y, z = q.z, w = q.w;
        var x2 = x + x, y2 = y + y, z2 = z + z;
        var xx = x * x2, xy = x * y2, xz = x * z2;
        var yy = y * y2, yz = y * z2, zz = z * z2;
        var wx = w * x2, wy = w * y2, wz = w * z2;

        te[0] = 1 - ( yy + zz );
        te[4] = xy - wz;
        te[8] = xz + wy;

        te[1] = xy + wz;
        te[5] = 1 - ( xx + zz );
        te[9] = yz - wx;

        te[2] = xz - wy;
        te[6] = yz + wx;
        te[10] = 1 - ( xx + yy );

        // last column
        te[3] = 0;
        te[7] = 0;
        te[11] = 0;

        // bottom row
        te[12] = 0;
        te[13] = 0;
        te[14] = 0;
        te[15] = 1;

        return this;
    };

    cornerstoneMath.Matrix4.prototype.multiplyMatrices = function(a, b)
    {
        var ae = a.elements;
        var be = b.elements;
        var te = this.elements;

        var a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
        var a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
        var a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
        var a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];

        var b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
        var b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
        var b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
        var b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];

        te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
        te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
        te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
        te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

        te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
        te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
        te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
        te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

        te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
        te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
        te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
        te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

        te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
        te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
        te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
        te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

        return this;
    };

    cornerstoneMath.Matrix4.prototype.multiply = function(m, n )
    {

        if (n !== undefined) {

            console.warn('DEPRECATED: Matrix4\'s .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');
            return this.multiplyMatrices(m, n);
        }

        return this.multiplyMatrices(this, m);
    };

    cornerstoneMath.Matrix4.prototype.getInverse = function ( m, throwOnInvertible ) {

        // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
        var te = this.elements;
        var me = m.elements;

        var n11 = me[0], n12 = me[4], n13 = me[8], n14 = me[12];
        var n21 = me[1], n22 = me[5], n23 = me[9], n24 = me[13];
        var n31 = me[2], n32 = me[6], n33 = me[10], n34 = me[14];
        var n41 = me[3], n42 = me[7], n43 = me[11], n44 = me[15];

        te[0] = n23*n34*n42 - n24*n33*n42 + n24*n32*n43 - n22*n34*n43 - n23*n32*n44 + n22*n33*n44;
        te[4] = n14*n33*n42 - n13*n34*n42 - n14*n32*n43 + n12*n34*n43 + n13*n32*n44 - n12*n33*n44;
        te[8] = n13*n24*n42 - n14*n23*n42 + n14*n22*n43 - n12*n24*n43 - n13*n22*n44 + n12*n23*n44;
        te[12] = n14*n23*n32 - n13*n24*n32 - n14*n22*n33 + n12*n24*n33 + n13*n22*n34 - n12*n23*n34;
        te[1] = n24*n33*n41 - n23*n34*n41 - n24*n31*n43 + n21*n34*n43 + n23*n31*n44 - n21*n33*n44;
        te[5] = n13*n34*n41 - n14*n33*n41 + n14*n31*n43 - n11*n34*n43 - n13*n31*n44 + n11*n33*n44;
        te[9] = n14*n23*n41 - n13*n24*n41 - n14*n21*n43 + n11*n24*n43 + n13*n21*n44 - n11*n23*n44;
        te[13] = n13*n24*n31 - n14*n23*n31 + n14*n21*n33 - n11*n24*n33 - n13*n21*n34 + n11*n23*n34;
        te[2] = n22*n34*n41 - n24*n32*n41 + n24*n31*n42 - n21*n34*n42 - n22*n31*n44 + n21*n32*n44;
        te[6] = n14*n32*n41 - n12*n34*n41 - n14*n31*n42 + n11*n34*n42 + n12*n31*n44 - n11*n32*n44;
        te[10] = n12*n24*n41 - n14*n22*n41 + n14*n21*n42 - n11*n24*n42 - n12*n21*n44 + n11*n22*n44;
        te[14] = n14*n22*n31 - n12*n24*n31 - n14*n21*n32 + n11*n24*n32 + n12*n21*n34 - n11*n22*n34;
        te[3] = n23*n32*n41 - n22*n33*n41 - n23*n31*n42 + n21*n33*n42 + n22*n31*n43 - n21*n32*n43;
        te[7] = n12*n33*n41 - n13*n32*n41 + n13*n31*n42 - n11*n33*n42 - n12*n31*n43 + n11*n32*n43;
        te[11] = n13*n22*n41 - n12*n23*n41 - n13*n21*n42 + n11*n23*n42 + n12*n21*n43 - n11*n22*n43;
        te[15] = n12*n23*n31 - n13*n22*n31 + n13*n21*n32 - n11*n23*n32 - n12*n21*n33 + n11*n22*n33;

        var det = n11 * te[ 0 ] + n21 * te[ 4 ] + n31 * te[ 8 ] + n41 * te[ 12 ];

        if ( det === 0 ) {

            var msg = "Matrix4.getInverse(): can't invert matrix, determinant is 0";

            if ( throwOnInvertible || false ) {

                throw new Error( msg );

            } else {

                console.warn( msg );

            }

            this.identity();

            return this;
        }

        this.multiplyScalar( 1 / det );

        return this;

    };

    cornerstoneMath.Matrix4.prototype.applyToVector3Array = function() {

        var v1 = new cornerstoneMath.Vector3();

        return function ( array, offset, length ) {

            if ( offset === undefined ) offset = 0;
            if ( length === undefined ) length = array.length;

            for ( var i = 0, j = offset, il; i < length; i += 3, j += 3 ) {

                v1.x = array[ j ];
                v1.y = array[ j + 1 ];
                v1.z = array[ j + 2 ];

                v1.applyMatrix4( this );

                array[ j ]     = v1.x;
                array[ j + 1 ] = v1.y;
                array[ j + 2 ] = v1.z;

            }

            return array;

        };

    };

    cornerstoneMath.Matrix4.prototype.makeTranslation = function ( x, y, z ) {

        this.set(

            1, 0, 0, x,
            0, 1, 0, y,
            0, 0, 1, z,
            0, 0, 0, 1

        );

        return this;

    };
    cornerstoneMath.Matrix4.prototype.multiplyScalar = function ( s ) {

        var te = this.elements;

        te[0] *= s; te[4] *= s; te[8] *= s; te[12] *= s;
        te[1] *= s; te[5] *= s; te[9] *= s; te[13] *= s;
        te[2] *= s; te[6] *= s; te[10] *= s; te[14] *= s;
        te[3] *= s; te[7] *= s; te[11] *= s; te[15] *= s;

        return this;

    };
    cornerstoneMath.Matrix4.prototype.set = function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

        var te = this.elements;

        te[0] = n11; te[4] = n12; te[8] = n13; te[12] = n14;
        te[1] = n21; te[5] = n22; te[9] = n23; te[13] = n24;
        te[2] = n31; te[6] = n32; te[10] = n33; te[14] = n34;
        te[3] = n41; te[7] = n42; te[11] = n43; te[15] = n44;

        return this;

    };

    cornerstoneMath.Matrix4.prototype.makeScale = function ( x, y, z ) {

        this.set(

            x, 0, 0, 0,
            0, y, 0, 0,
            0, 0, z, 0,
            0, 0, 0, 1

        );

        return this;

    };


    return cornerstoneMath;
}(cornerstoneMath)); 
// End Source; src/matrix4.js

// Begin Source: src/plane.js
// Copied from Three.JS
/**
 * @author bhouston / http://exocortex.com
 */

var cornerstoneMath = (function (cornerstoneMath) {

    "use strict";

    if (cornerstoneMath === undefined) {
        cornerstoneMath = {};
    }

    cornerstoneMath.Plane = function ( normal, constant ) {

        this.normal = ( normal !== undefined ) ? normal : new cornerstoneMath.Vector3( 1, 0, 0 );
        this.constant = ( constant !== undefined ) ? constant : 0;

    };

    cornerstoneMath.Plane.prototype = {

        constructor: cornerstoneMath.Plane,

        set: function ( normal, constant ) {

            this.normal.copy( normal );
            this.constant = constant;

            return this;

        },

        setComponents: function ( x, y, z, w ) {

            this.normal.set( x, y, z );
            this.constant = w;

            return this;

        },

        setFromNormalAndCoplanarPoint: function ( normal, point ) {

            this.normal.copy( normal );
            this.constant = - point.dot( this.normal ); // must be this.normal, not normal, as this.normal is normalized

            return this;

        },

        setFromCoplanarPoints: function () {

            var v1 = new cornerstoneMath.Vector3();
            var v2 = new cornerstoneMath.Vector3();

            return function ( a, b, c ) {

                var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

                // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

                this.setFromNormalAndCoplanarPoint( normal, a );

                return this;

            };

        }(),


        copy: function ( plane ) {

            this.normal.copy( plane.normal );
            this.constant = plane.constant;

            return this;

        },

        normalize: function () {

            // Note: will lead to a divide by zero if the plane is invalid.

            var inverseNormalLength = 1.0 / this.normal.length();
            this.normal.multiplyScalar( inverseNormalLength );
            this.constant *= inverseNormalLength;

            return this;

        },

        negate: function () {

            this.constant *= - 1;
            this.normal.negate();

            return this;

        },

        distanceToPoint: function ( point ) {

            return this.normal.dot( point ) + this.constant;

        },

        distanceToSphere: function ( sphere ) {

            return this.distanceToPoint( sphere.center ) - sphere.radius;

        },

        projectPoint: function ( point, optionalTarget ) {

            return this.orthoPoint( point, optionalTarget ).sub( point ).negate();

        },

        orthoPoint: function ( point, optionalTarget ) {

            var perpendicularMagnitude = this.distanceToPoint( point );

            var result = optionalTarget || new cornerstoneMath.Vector3();
            return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );

        },

        isIntersectionLine: function ( line ) {

            // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

            var startSign = this.distanceToPoint( line.start );
            var endSign = this.distanceToPoint( line.end );

            return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

        },

        intersectLine: function () {

            var v1 = new cornerstoneMath.Vector3();

            return function ( line, optionalTarget ) {

                var result = optionalTarget || new cornerstoneMath.Vector3();

                var direction = line.delta( v1 );

                var denominator = this.normal.dot( direction );

                if ( denominator === 0 ) {

                    // line is coplanar, return origin
                    if ( this.distanceToPoint( line.start ) === 0 ) {

                        return result.copy( line.start );

                    }

                    // Unsure if this is the correct method to handle this case.
                    return undefined;

                }

                var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

                if ( t < 0 || t > 1 ) {

                    return undefined;

                }

                return result.copy( direction ).multiplyScalar( t ).add( line.start );

            };

        }(),

        intersectPlane: function (targetPlane) {
            // Returns the intersection line between two planes
            var direction = this.normal.clone().cross(targetPlane.normal);
            var origin = new cornerstoneMath.Vector3();
            var intersectionData = {
                origin: origin,
                direction: direction
            };

            // If the planes are parallel, return an empty vector for the
            // intersection line
            if (this.normal.clone().cross(targetPlane.normal).length < 1e-10) {
                intersectionData.direction = new cornerstoneMath.Vector3();
                return intersectionData;
            }

            var h1 = this.constant;
            var h2 = targetPlane.constant;
            var n1dotn2 = this.normal.clone().dot(targetPlane.normal);

            var c1 = -(h1 - h2 * n1dotn2) / (1 - n1dotn2 * n1dotn2);
            var c2 = -(h2 - h1 * n1dotn2) / (1 - n1dotn2 * n1dotn2);
            intersectionData.origin = this.normal.clone().multiplyScalar(c1).add(targetPlane.normal.clone().multiplyScalar(c2));
            return intersectionData;
        },

        coplanarPoint: function ( optionalTarget ) {

            var result = optionalTarget || new cornerstoneMath.Vector3();
            return result.copy( this.normal ).multiplyScalar( - this.constant );

        },

        translate: function ( offset ) {

            this.constant = this.constant - offset.dot( this.normal );

            return this;

        },

        equals: function ( plane ) {

            return plane.normal.equals( this.normal ) && ( plane.constant == this.constant );

        },

        clone: function () {

            return new cornerstoneMath.Plane().copy( this );

        }
    };

    return cornerstoneMath;
}(cornerstoneMath)); 
// End Source; src/plane.js

// Begin Source: src/point.js
var cornerstoneMath = (function (cornerstoneMath) {

    "use strict";

    if(cornerstoneMath === undefined) {
        cornerstoneMath = {};
    }

    function pageToPoint(e)
    {
        return {
            x : e.pageX,
            y : e.pageY
        };
    }

    function subtract(lhs, rhs)
    {
        return {
            x : lhs.x - rhs.x,
            y : lhs.y - rhs.y
        };
    }

    function copy(point)
    {
        return {
            x : point.x,
            y : point.y
        };
    }

    function distance(from, to)
    {
        return Math.sqrt(distanceSquared(from, to));
    }

    function distanceSquared(from, to)
    {
        var delta = subtract(from, to);
        return delta.x * delta.x + delta.y * delta.y;
    }

    function insideRect(point, rect)
    {
        if( point.x < rect.left ||
            point.x > rect.left + rect.width ||
            point.y < rect.top ||
            point.y > rect.top + rect.height)
        {
            return false;
        }
        return true;
    }

    /**
     * Returns the closest source point to a target point
     * given an array of source points.
     *
     * @param sources An Array of source Points
     * @param target The target Point
     * @returns Point The closest point from the points array
     */
    function findClosestPoint(sources, target) {
        var distances = [];
        var minDistance;
        sources.forEach(function(source, index) {
            var distance = cornerstoneMath.point.distance(source, target);
            distances.push(distance);
            
            if (index === 0) {
                minDistance = distance;
            } else {
                minDistance = Math.min(distance, minDistance);
            }
        });

        var index = distances.indexOf(minDistance);
        return sources[index];
    }

    // module exports
    cornerstoneMath.point =
    {
        subtract : subtract,
        copy: copy,
        pageToPoint: pageToPoint,
        distance: distance,
        distanceSquared: distanceSquared,
        insideRect: insideRect,
        findClosestPoint: findClosestPoint
    };


    return cornerstoneMath;
}(cornerstoneMath)); 
// End Source; src/point.js

// Begin Source: src/quaternion.js
// Based on THREE.JS

var cornerstoneMath = (function (cornerstoneMath) {

    "use strict";

    if(cornerstoneMath === undefined) {
        cornerstoneMath = {};
    }

    cornerstoneMath.Quaternion = function Quaternion(x, y, z, w)
    {
        this.x = x || 0;
        this.y = y || 0;
        this.z = z || 0;
        this.w = ( w !== undefined ) ? w : 1;
    };

    cornerstoneMath.Quaternion.prototype.setFromAxisAngle = function(axis, angle)
    {
        var halfAngle = angle / 2, s = Math.sin( halfAngle );

        this.x = axis.x * s;
        this.y = axis.y * s;
        this.z = axis.z * s;
        this.w = Math.cos( halfAngle );

        return this;
    };

    cornerstoneMath.Quaternion.prototype.multiplyQuaternions = function( a, b)
    {
        var qax = a.x, qay = a.y, qaz = a.z, qaw = a.w;
        var qbx = b.x, qby = b.y, qbz = b.z, qbw = b.w;

        this.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
        this.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
        this.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
        this.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

        return this;
    };

    cornerstoneMath.Quaternion.prototype.setFromRotationMatrix = function(m)
    {
        var te = m.elements,

            m11 = te[0], m12 = te[4], m13 = te[8],
            m21 = te[1], m22 = te[5], m23 = te[9],
            m31 = te[2], m32 = te[6], m33 = te[10],

            trace = m11 + m22 + m33,
            s;

        if ( trace > 0 ) {

            s = 0.5 / Math.sqrt( trace + 1.0 );

            this.w = 0.25 / s;
            this.x = ( m32 - m23 ) * s;
            this.y = ( m13 - m31 ) * s;
            this.z = ( m21 - m12 ) * s;

        } else if ( m11 > m22 && m11 > m33 ) {

            s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

            this.w = (m32 - m23 ) / s;
            this.x = 0.25 * s;
            this.y = (m12 + m21 ) / s;
            this.z = (m13 + m31 ) / s;

        } else if ( m22 > m33 ) {

            s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

            this.w = (m13 - m31 ) / s;
            this.x = (m12 + m21 ) / s;
            this.y = 0.25 * s;
            this.z = (m23 + m32 ) / s;

        } else {

            s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

            this.w = ( m21 - m12 ) / s;
            this.x = ( m13 + m31 ) / s;
            this.y = ( m23 + m32 ) / s;
            this.z = 0.25 * s;

        }

        return this;
    };

    return cornerstoneMath;
}(cornerstoneMath)); 
// End Source; src/quaternion.js

// Begin Source: src/rect.js
var cornerstoneMath = (function (cornerstoneMath) {

    "use strict";

    if(cornerstoneMath === undefined) {
        cornerstoneMath = {};
    }

    function rectToLineSegments(rect)
    {
        var top = {
            start : {
                x :rect.left,
                y :rect.top
            },
            end : {
                x :rect.left + rect.width,
                y :rect.top

            }
        };
        var right = {
            start : {
                x :rect.left + rect.width,
                y :rect.top
            },
            end : {
                x :rect.left + rect.width,
                y :rect.top + rect.height

            }
        };
        var bottom = {
            start : {
                x :rect.left + rect.width,
                y :rect.top + rect.height
            },
            end : {
                x :rect.left,
                y :rect.top + rect.height

            }
        };
        var left = {
            start : {
                x :rect.left,
                y :rect.top + rect.height
            },
            end : {
                x :rect.left,
                y :rect.top

            }
        };
        var lineSegments = [top, right, bottom, left];
        return lineSegments;
    }

    function pointNearLineSegment(point, lineSegment, maxDistance)
    {
        if(maxDistance === undefined) {
            maxDistance = 5;
        }
        var distance = cornerstoneMath.lineSegment.distanceToPoint(lineSegment, point);

        return (distance < maxDistance);
    }
    function distanceToPoint(rect, point)
    {
        var minDistance = 655535;
        var lineSegments = rectToLineSegments(rect);
        lineSegments.forEach(function(lineSegment) {
            var distance = cornerstoneMath.lineSegment.distanceToPoint(lineSegment, point);
            if(distance < minDistance) {
                minDistance = distance;
            }
        });
        return minDistance;
    }

    // Returns top-left and bottom-right points of the rectangle
    function rectToPoints (rect) {
        var rectPoints = {
            topLeft: {
                x: rect.left,
                y: rect.top
            },
            bottomRight: {
                x: rect.left + rect.width,
                y: rect.top + rect.height
            }
        };

        return rectPoints;
    }

    // Returns whether two non-rotated rectangles are intersected
    function doesIntersect (rect1, rect2) {
        var intersectLeftRight;
        var intersectTopBottom;

        var rect1Points = rectToPoints(rect1);
        var rect2Points = rectToPoints(rect2);

        if (rect1.width >= 0) {
            if (rect2.width >= 0)
                intersectLeftRight = !((rect1Points.bottomRight.x <= rect2Points.topLeft.x) || (rect2Points.bottomRight.x <= rect1Points.topLeft.x));
            else
                intersectLeftRight = !((rect1Points.bottomRight.x <= rect2Points.bottomRight.x) || (rect2Points.topLeft.x <= rect1Points.topLeft.x));
        } else {
            if (rect2.width >= 0)
                intersectLeftRight = !((rect1Points.topLeft.x <= rect2Points.topLeft.x) || (rect2Points.bottomRight.x <= rect1Points.bottomRight.x));
            else
                intersectLeftRight = !((rect1Points.topLeft.x <= rect2Points.bottomRight.x) || (rect2Points.topLeft.x <= rect1Points.bottomRight.x));
        }

        if (rect1.height >= 0) {
            if (rect2.height >= 0)
                intersectTopBottom = !((rect1Points.bottomRight.y <= rect2Points.topLeft.y) || (rect2Points.bottomRight.y  <= rect1Points.topLeft.y));
            else
                intersectTopBottom = !((rect1Points.bottomRight.y <= rect2Points.bottomRight.y ) || (rect2Points.topLeft.y <= rect1Points.topLeft.y));
        } else {
            if (rect2.height >= 0)
                intersectTopBottom = !((rect1Points.topLeft.y <= rect2Points.topLeft.y) || (rect2Points.bottomRight.y  <= rect1Points.bottomRight.y ));
            else
                intersectTopBottom = !((rect1Points.topLeft.y <= rect2Points.bottomRight.y ) || (rect2Points.top <= rect1Points.bottomRight.y ));
        }

        return intersectLeftRight && intersectTopBottom;
    }

    // Returns intersection points of two non-rotated rectangles
    function getIntersectionRect(rect1, rect2) {
        var intersectRect = {
            topLeft: {},
            bottomRight: {}
        };

        if (!doesIntersect(rect1, rect2)) {
            return;
        }

        var rect1Points = rectToPoints(rect1);
        var rect2Points = rectToPoints(rect2);

        if (rect1.width >= 0) {
            if (rect2.width >= 0) {
                intersectRect.topLeft.x = Math.max(rect1Points.topLeft.x, rect2Points.topLeft.x);
                intersectRect.bottomRight.x = Math.min(rect1Points.bottomRight.x, rect2Points.bottomRight.x);
            } else {
                intersectRect.topLeft.x = Math.max(rect1Points.topLeft.x, rect2Points.bottomRight.x);
                intersectRect.bottomRight.x = Math.min(rect1Points.bottomRight.x, rect2Points.topLeft.x);
            }
        } else {
            if (rect2.width >= 0) {
                intersectRect.topLeft.x = Math.min(rect1Points.topLeft.x, rect2Points.bottomRight.x);
                intersectRect.bottomRight.x = Math.max(rect1Points.bottomRight.x, rect2Points.topLeft.x);
            } else {
                intersectRect.topLeft.x = Math.min(rect1Points.topLeft.x, rect2Points.topLeft.x);
                intersectRect.bottomRight.x = Math.max(rect1Points.bottomRight.x, rect2Points.bottomRight.x);
            }
        }

        if (rect1.height >= 0) {
            if (rect2.height >= 0) {
                intersectRect.topLeft.y = Math.max(rect1Points.topLeft.y, rect2Points.topLeft.y);
                intersectRect.bottomRight.y = Math.min(rect1Points.bottomRight.y, rect2Points.bottomRight.y);
            } else {
                intersectRect.topLeft.y = Math.max(rect1Points.topLeft.y, rect2Points.bottomRight.y);
                intersectRect.bottomRight.y = Math.min(rect1Points.bottomRight.y, rect2Points.topLeft.y);
            }
        } else {
            if (rect2.height >= 0) {
                intersectRect.topLeft.y = Math.min(rect1Points.topLeft.y, rect2Points.bottomRight.y);
                intersectRect.bottomRight.y = Math.max(rect1Points.bottomRight.y, rect2Points.topLeft.y);
            } else {
                intersectRect.topLeft.y = Math.min(rect1Points.topLeft.y, rect2Points.topLeft.y);
                intersectRect.bottomRight.y = Math.max(rect1Points.bottomRight.y, rect2Points.bottomRight.y);
            }
        }

        // Returns top-left and bottom-right points of intersected rectangle
        return intersectRect;

    }

    // module exports
    cornerstoneMath.rect =
    {
        distanceToPoint : distanceToPoint,
        getIntersectionRect : getIntersectionRect

    };


    return cornerstoneMath;
}(cornerstoneMath)); 
// End Source; src/rect.js

},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/lib/cornerstoneTools.js":[function(require,module,exports){
/*! cornerstoneTools - v0.7.8 - 2016-02-12 | (c) 2014 Chris Hafey | https://github.com/chafey/cornerstoneTools */
// Begin Source: src/header.js
var cornerstoneMath = require("./cornerstoneMath");


if (typeof cornerstone === 'undefined') {
    cornerstone = {};
}

if (typeof cornerstoneTools === 'undefined') {
    cornerstoneTools = {
        referenceLines: {},
        orientation: {}
    };
}
 
// End Source; src/header.js

// Begin Source: src/inputSources/mouseWheelInput.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function mouseWheel(e) {
        // !!!HACK/NOTE/WARNING!!!
        // for some reason I am getting mousewheel and DOMMouseScroll events on my
        // mac os x mavericks system when middle mouse button dragging.
        // I couldn't find any info about this so this might break other systems
        // webkit hack
        if (e.originalEvent.type === 'mousewheel' && e.originalEvent.wheelDeltaY === 0) {
            return;
        }
        // firefox hack
        if (e.originalEvent.type === 'DOMMouseScroll' && e.originalEvent.axis === 1) {
            return;
        }

        var element = e.currentTarget;
        var startingCoords = cornerstone.pageToPixel(element, e.pageX || e.originalEvent.pageX, e.pageY || e.originalEvent.pageY);

        e = window.event || e; // old IE support
        var wheelDelta = e.wheelDelta || -e.detail || -e.originalEvent.detail;
        var direction = Math.max(-1, Math.min(1, (wheelDelta)));

        var mouseWheelData = {
            element: element,
            viewport: cornerstone.getViewport(element),
            image: cornerstone.getEnabledElement(element).image,
            direction: direction,
            pageX: e.pageX || e.originalEvent.pageX,
            pageY: e.pageY || e.originalEvent.pageY,
            imageX: startingCoords.x,
            imageY: startingCoords.y
        };

        $(element).trigger('CornerstoneToolsMouseWheel', mouseWheelData);
    }

    var mouseWheelEvents = 'mousewheel DOMMouseScroll';

    function enable(element) {
        // Prevent handlers from being attached multiple times
        disable(element);
        
        $(element).on(mouseWheelEvents, mouseWheel);
    }

    function disable(element) {
        $(element).unbind(mouseWheelEvents, mouseWheel);
    }

    // module exports
    cornerstoneTools.mouseWheelInput = {
        enable: enable,
        disable: disable
    };

})($, cornerstone, cornerstoneTools);

// End Source; src/inputSources/mouseWheelInput.js

// Begin Source: src/inputSources/mouseInput.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    var isClickEvent;
    var preventClickTimeout;
    var clickDelay = 200;

    function preventClickHandler() {
        isClickEvent = false;
    }

    function activateMouseDown(mouseEventDetail) {
        $(mouseEventDetail.element).trigger('CornerstoneToolsMouseDownActivate', mouseEventDetail);
    }

    function mouseDoubleClick(e) {
        var element = e.currentTarget;
        var eventType = 'CornerstoneToolsMouseDoubleClick';

        var startPoints = {
            page: cornerstoneMath.point.pageToPoint(e),
            image: cornerstone.pageToPixel(element, e.pageX, e.pageY),
            client: {
                x: e.clientX,
                y: e.clientY
            }
        };
        startPoints.canvas = cornerstone.pixelToCanvas(element, startPoints.image);

        var lastPoints = cornerstoneTools.copyPoints(startPoints);
        var eventData = {
            event: e,
            which: e.which,
            viewport: cornerstone.getViewport(element),
            image: cornerstone.getEnabledElement(element).image,
            element: element,
            startPoints: startPoints,
            lastPoints: lastPoints,
            currentPoints: startPoints,
            deltaPoints: {
                x: 0,
                y: 0
            },
            type: eventType
        };

        var event = $.Event(eventType, eventData);
        $(eventData.element).trigger(event, eventData);
    }

    function mouseDown(e) {
        preventClickTimeout = setTimeout(preventClickHandler, clickDelay);

        var element = e.currentTarget;
        var eventType = 'CornerstoneToolsMouseDown';

        // Prevent CornerstoneToolsMouseMove while mouse is down
        $(element).off('mousemove', mouseMove);

        var startPoints = {
            page: cornerstoneMath.point.pageToPoint(e),
            image: cornerstone.pageToPixel(element, e.pageX, e.pageY),
            client: {
                x: e.clientX,
                y: e.clientY
            }
        };
        startPoints.canvas = cornerstone.pixelToCanvas(element, startPoints.image);

        var lastPoints = cornerstoneTools.copyPoints(startPoints);
        var eventData = {
            event: e,
            which: e.which,
            viewport: cornerstone.getViewport(element),
            image: cornerstone.getEnabledElement(element).image,
            element: element,
            startPoints: startPoints,
            lastPoints: lastPoints,
            currentPoints: startPoints,
            deltaPoints: {
                x: 0,
                y: 0
            },
            type: eventType
        };

        var event = $.Event(eventType, eventData);
        $(eventData.element).trigger(event, eventData);

        if (event.isImmediatePropagationStopped() === false) {
            // no tools responded to this event, give the active tool a chance
            if (activateMouseDown(eventData) === true) {
                return cornerstoneTools.pauseEvent(e);
            }
        }

        var whichMouseButton = e.which;

        function onMouseMove(e) {
            // calculate our current points in page and image coordinates
            var eventType = 'CornerstoneToolsMouseDrag';
            var currentPoints = {
                page: cornerstoneMath.point.pageToPoint(e),
                image: cornerstone.pageToPixel(element, e.pageX, e.pageY),
                client: {
                    x: e.clientX,
                    y: e.clientY
                }
            };
            currentPoints.canvas = cornerstone.pixelToCanvas(element, currentPoints.image);

            // Calculate delta values in page and image coordinates
            var deltaPoints = {
                page: cornerstoneMath.point.subtract(currentPoints.page, lastPoints.page),
                image: cornerstoneMath.point.subtract(currentPoints.image, lastPoints.image),
                client: cornerstoneMath.point.subtract(currentPoints.client, lastPoints.client),
                canvas: cornerstoneMath.point.subtract(currentPoints.canvas, lastPoints.canvas)
            };

            var eventData = {
                which: whichMouseButton,
                viewport: cornerstone.getViewport(element),
                image: cornerstone.getEnabledElement(element).image,
                element: element,
                startPoints: startPoints,
                lastPoints: lastPoints,
                currentPoints: currentPoints,
                deltaPoints: deltaPoints,
                type: eventType
            };

            $(eventData.element).trigger(eventType, eventData);

            // update the last points
            lastPoints = cornerstoneTools.copyPoints(currentPoints);

            // prevent left click selection of DOM elements
            return cornerstoneTools.pauseEvent(e);
        }

        // hook mouseup so we can unbind our event listeners
        // when they stop dragging
        function onMouseUp(e) {
            // Cancel the timeout preventing the click event from triggering
            clearTimeout(preventClickTimeout);

            var eventType = 'CornerstoneToolsMouseUp';
            if (isClickEvent) {
                eventType = 'CornerstoneToolsMouseClick';
            }

            // calculate our current points in page and image coordinates
            var currentPoints = {
                page: cornerstoneMath.point.pageToPoint(e),
                image: cornerstone.pageToPixel(element, e.pageX, e.pageY),
                client: {
                    x: e.clientX,
                    y: e.clientY
                }
            };
            currentPoints.canvas = cornerstone.pixelToCanvas(element, currentPoints.image);

            // Calculate delta values in page and image coordinates
            var deltaPoints = {
                page: cornerstoneMath.point.subtract(currentPoints.page, lastPoints.page),
                image: cornerstoneMath.point.subtract(currentPoints.image, lastPoints.image),
                client: cornerstoneMath.point.subtract(currentPoints.client, lastPoints.client),
                canvas: cornerstoneMath.point.subtract(currentPoints.canvas, lastPoints.canvas)
            };

            var eventData = {
                event: e,
                which: whichMouseButton,
                viewport: cornerstone.getViewport(element),
                image: cornerstone.getEnabledElement(element).image,
                element: element,
                startPoints: startPoints,
                lastPoints: lastPoints,
                currentPoints: currentPoints,
                deltaPoints: deltaPoints,
                type: eventType
            };

            var event = $.Event(eventType, eventData);
            $(eventData.element).trigger(event, eventData);

            $(document).off('mousemove', onMouseMove);
            $(document).off('mouseup', onMouseUp);

            $(eventData.element).on('mousemove', mouseMove);

            isClickEvent = true;
        }

        $(document).on('mousemove', onMouseMove);
        $(document).on('mouseup', onMouseUp);

        return cornerstoneTools.pauseEvent(e);
    }

    function mouseMove(e) {
        var element = e.currentTarget;
        var eventType = 'CornerstoneToolsMouseMove';

        var startPoints = {
            page: cornerstoneMath.point.pageToPoint(e),
            image: cornerstone.pageToPixel(element, e.pageX, e.pageY),
            client: {
                x: e.clientX,
                y: e.clientY
            }
        };
        startPoints.canvas = cornerstone.pixelToCanvas(element, startPoints.image);

        var lastPoints = cornerstoneTools.copyPoints(startPoints);

        var whichMouseButton = e.which;

        // calculate our current points in page and image coordinates
        var currentPoints = {
            page: cornerstoneMath.point.pageToPoint(e),
            image: cornerstone.pageToPixel(element, e.pageX, e.pageY),
            client: {
                x: e.clientX,
                y: e.clientY
            }
        };
        currentPoints.canvas = cornerstone.pixelToCanvas(element, currentPoints.image);

        // Calculate delta values in page and image coordinates
        var deltaPoints = {
            page: cornerstoneMath.point.subtract(currentPoints.page, lastPoints.page),
            image: cornerstoneMath.point.subtract(currentPoints.image, lastPoints.image),
            client: cornerstoneMath.point.subtract(currentPoints.client, lastPoints.client),
            canvas: cornerstoneMath.point.subtract(currentPoints.canvas, lastPoints.canvas)
        };

        var eventData = {
            which: whichMouseButton,
            viewport: cornerstone.getViewport(element),
            image: cornerstone.getEnabledElement(element).image,
            element: element,
            startPoints: startPoints,
            lastPoints: lastPoints,
            currentPoints: currentPoints,
            deltaPoints: deltaPoints,
            type: eventType
        };
        $(element).trigger(eventType, eventData);

        // update the last points
        lastPoints = cornerstoneTools.copyPoints(currentPoints);
    }

    function disable(element) {
        $(element).off('mousedown', mouseDown);
        $(element).off('mousemove', mouseMove);
        $(element).off('dblclick', mouseDoubleClick);
    }

    function enable(element) {
        // Prevent handlers from being attached multiple times
        disable(element);
        
        $(element).on('mousedown', mouseDown);
        $(element).on('mousemove', mouseMove);
        $(element).on('dblclick', mouseDoubleClick);
    }

    // module exports
    cornerstoneTools.mouseInput = {
        enable: enable,
        disable: disable
    };

})($, cornerstone, cornerstoneMath, cornerstoneTools);

// End Source; src/inputSources/mouseInput.js

// Begin Source: src/inputSources/touchInput.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    /*jshint newcap: false */

    var lastScale = 1.0,
        lastRotation = 0.0,
        startPoints,
        currentPoints,
        lastPoints,
        deltaPoints,
        eventData,
        touchStartDelay,
        pressDelay = 700,
        pressTimeout,
        isPress = false,
        pressMaxDistance = 5,
        pageDistanceMoved,
        preventNextPinch = false;
    
    function onTouch(e) {
        ///console.log(e.type);
        var element = e.target.parentNode,
            event,
            eventType;

        // Prevent mouse events from occurring alongside touch events
        e.preventDefault();

        // If more than one finger is placed on the element, stop the press timeout
        if ((e.pointers && e.pointers.length > 1) ||
            (e.originalEvent && e.originalEvent.touches && e.originalEvent.touches.length > 1)) {
            isPress = false;
            clearTimeout(pressTimeout);
        }

        switch (e.type) {
            case 'tap':
                isPress = false;
                clearTimeout(pressTimeout);

                // calculate our current points in page and image coordinates
                currentPoints = {
                    page: cornerstoneMath.point.pageToPoint(e.pointers[0]),
                    image: cornerstone.pageToPixel(element, e.pointers[0].pageX, e.pointers[0].pageY),
                    client: {
                        x: e.pointers[0].clientX,
                        y: e.pointers[0].clientY
                    }
                };
                currentPoints.canvas = cornerstone.pixelToCanvas(element, currentPoints.image);

                eventType = 'CornerstoneToolsTap';
                eventData = {
                    event: e,
                    viewport: cornerstone.getViewport(element),
                    image: cornerstone.getEnabledElement(element).image,
                    element: element,
                    currentPoints: currentPoints,
                    type: eventType,
                    isTouchEvent: true
                };

                event = $.Event(eventType, eventData);
                $(element).trigger(event, eventData);
                break;

            case 'doubletap':
                isPress = false;
                clearTimeout(pressTimeout);

                // calculate our current points in page and image coordinates
                currentPoints = {
                    page: cornerstoneMath.point.pageToPoint(e.pointers[0]),
                    image: cornerstone.pageToPixel(element, e.pointers[0].pageX, e.pointers[0].pageY),
                    client: {
                        x: e.pointers[0].clientX,
                        y: e.pointers[0].clientY
                    }
                };
                currentPoints.canvas = cornerstone.pixelToCanvas(element, currentPoints.image);

                eventType = 'CornerstoneToolsDoubleTap';
                eventData = {
                    event: e,
                    viewport: cornerstone.getViewport(element),
                    image: cornerstone.getEnabledElement(element).image,
                    element: element,
                    currentPoints: currentPoints,
                    type: eventType,
                    isTouchEvent: true
                };

                event = $.Event(eventType, eventData);
                $(element).trigger(event, eventData);
                break;

            case 'pinchstart':
                isPress = false;
                clearTimeout(pressTimeout);
                
                lastScale = 1.0;
                break;

            case 'pinchmove':
                isPress = false;
                clearTimeout(pressTimeout);

                if (preventNextPinch === true) {
                    lastScale = e.scale;
                    preventNextPinch = false;
                    break;
                }

                var scaleChange = (e.scale - lastScale) / lastScale;

                startPoints = {
                    page: e.center,
                    image: cornerstone.pageToPixel(element, e.center.x, e.center.y),
                };
                startPoints.canvas = cornerstone.pixelToCanvas(element, startPoints.image);

                eventType = 'CornerstoneToolsTouchPinch';
                eventData = {
                    event: e,
                    startPoints: startPoints,
                    viewport: cornerstone.getViewport(element),
                    image: cornerstone.getEnabledElement(element).image,
                    element: element,
                    direction: e.scale < 1 ? 1 : -1,
                    scaleChange: scaleChange,
                    type: eventType,
                    isTouchEvent: true
                };

                event = $.Event(eventType, eventData);
                $(element).trigger(event, eventData);

                lastScale = e.scale;
                break;

            case 'touchstart':
                lastScale = 1.0;

                clearTimeout(pressTimeout);

                clearTimeout(touchStartDelay);
                touchStartDelay = setTimeout(function() {
                    startPoints = {
                        page: cornerstoneMath.point.pageToPoint(e.originalEvent.touches[0]),
                        image: cornerstone.pageToPixel(element, e.originalEvent.touches[0].pageX, e.originalEvent.touches[0].pageY),
                        client: {
                            x: e.originalEvent.touches[0].clientX,
                            y: e.originalEvent.touches[0].clientY
                        }
                    };
                    startPoints.canvas = cornerstone.pixelToCanvas(element, startPoints.image);

                    eventType = 'CornerstoneToolsTouchStart';
                    if (e.originalEvent.touches.length > 1) {
                        eventType = 'CornerstoneToolsMultiTouchStart';
                    }

                    eventData = {
                        event: e,
                        viewport: cornerstone.getViewport(element),
                        image: cornerstone.getEnabledElement(element).image,
                        element: element,
                        startPoints: startPoints,
                        currentPoints: startPoints,
                        type: eventType,
                        isTouchEvent: true
                    };

                    event = $.Event(eventType, eventData);
                    $(element).trigger(event, eventData);

                    if (event.isImmediatePropagationStopped() === false) {
                        //isPress = false;
                        //clearTimeout(pressTimeout);

                        // No current tools responded to the drag action.
                        // Create new tool measurement
                        eventType = 'CornerstoneToolsTouchStartActive';
                        if (e.originalEvent.touches.length > 1) {
                            eventType = 'CornerstoneToolsMultiTouchStartActive';
                        }

                        eventData.type = eventType;
                        $(element).trigger(eventType, eventData);
                    }

                    //console.log(eventType);
                    lastPoints = cornerstoneTools.copyPoints(startPoints);
                }, 50);

                isPress = true;
                pageDistanceMoved = 0;
                pressTimeout = setTimeout(function() {
                    if (!isPress) {
                        return;
                    }

                    currentPoints = {
                        page: cornerstoneMath.point.pageToPoint(e.originalEvent.touches[0]),
                        image: cornerstone.pageToPixel(element, e.originalEvent.touches[0].pageX, e.originalEvent.touches[0].pageY),
                        client: {
                            x: e.originalEvent.touches[0].clientX,
                            y: e.originalEvent.touches[0].clientY
                        }
                    };
                    currentPoints.canvas = cornerstone.pixelToCanvas(element, startPoints.image);

                    eventType = 'CornerstoneToolsTouchPress';
                    eventData = {
                        event: e,
                        viewport: cornerstone.getViewport(element),
                        image: cornerstone.getEnabledElement(element).image,
                        element: element,
                        currentPoints: currentPoints,
                        type: eventType,
                        isTouchEvent: true
                    };

                    event = $.Event(eventType, eventData);
                    $(element).trigger(event, eventData);

                    //console.log(eventType);
                }, pressDelay);
                break;

            case 'touchend':
                lastScale = 1.0;

                isPress = false;
                clearTimeout(pressTimeout);

                startPoints = {
                    page: cornerstoneMath.point.pageToPoint(e.originalEvent.changedTouches[0]),
                    image: cornerstone.pageToPixel(element, e.originalEvent.changedTouches[0].pageX, e.originalEvent.changedTouches[0].pageY),
                    client: {
                        x: e.originalEvent.changedTouches[0].clientX,
                        y: e.originalEvent.changedTouches[0].clientY
                    }
                };
                startPoints.canvas = cornerstone.pixelToCanvas(element, startPoints.image);

                eventType = 'CornerstoneToolsTouchEnd';

                eventData = {
                    event: e,
                    viewport: cornerstone.getViewport(element),
                    image: cornerstone.getEnabledElement(element).image,
                    element: element,
                    startPoints: startPoints,
                    currentPoints: startPoints,
                    type: eventType,
                    isTouchEvent: true
                };

                event = $.Event(eventType, eventData);
                $(element).trigger(event, eventData);
                break;

            case 'panmove':
                // calculate our current points in page and image coordinates
                currentPoints = {
                    page: cornerstoneMath.point.pageToPoint(e.pointers[0]),
                    image: cornerstone.pageToPixel(element, e.pointers[0].pageX, e.pointers[0].pageY),
                    client: {
                        x: e.pointers[0].clientX,
                        y: e.pointers[0].clientY
                    }
                };
                currentPoints.canvas = cornerstone.pixelToCanvas(element, currentPoints.image);

                // Calculate delta values in page and image coordinates
                deltaPoints = {
                    page: cornerstoneMath.point.subtract(currentPoints.page, lastPoints.page),
                    image: cornerstoneMath.point.subtract(currentPoints.image, lastPoints.image),
                    client: cornerstoneMath.point.subtract(currentPoints.client, lastPoints.client),
                    canvas: cornerstoneMath.point.subtract(currentPoints.canvas, lastPoints.canvas)
                };

                pageDistanceMoved += Math.sqrt(deltaPoints.page.x * deltaPoints.page.x + deltaPoints.page.y * deltaPoints.page.y);
                //console.log("pageDistanceMoved: " + pageDistanceMoved);
                if (pageDistanceMoved > pressMaxDistance) {
                    //console.log('Press event aborted due to movement');
                    isPress = false;
                    clearTimeout(pressTimeout);
                }
              
                eventType = 'CornerstoneToolsTouchDrag';
                if (e.pointers.length > 1) {
                    eventType = 'CornerstoneToolsMultiTouchDrag';
                }

                eventData = {
                    viewport: cornerstone.getViewport(element),
                    image: cornerstone.getEnabledElement(element).image,
                    element: element,
                    startPoints: startPoints,
                    lastPoints: lastPoints,
                    currentPoints: currentPoints,
                    deltaPoints: deltaPoints,
                    numPointers: e.pointers.length,
                    type: eventType,
                    isTouchEvent: true
                };

                event = $.Event(eventType, eventData);
                $(element).trigger(event, eventData);

                lastPoints = cornerstoneTools.copyPoints(currentPoints);
                break;

            case 'panstart':
                currentPoints = {
                    page: cornerstoneMath.point.pageToPoint(e.pointers[0]),
                    image: cornerstone.pageToPixel(element, e.pointers[0].pageX, e.pointers[0].pageY),
                    client: {
                        x: e.pointers[0].clientX,
                        y: e.pointers[0].clientY
                    }
                };
                currentPoints.canvas = cornerstone.pixelToCanvas(element, currentPoints.image);
                lastPoints = cornerstoneTools.copyPoints(currentPoints);
                break;

            case 'panend':
                isPress = false;
                clearTimeout(pressTimeout);

                // If lastPoints is not yet set, it means panend fired without panstart or pan,
                // so we can ignore this event
                if (!lastPoints) {
                    return false;
                }

                currentPoints = {
                    page: cornerstoneMath.point.pageToPoint(e.pointers[0]),
                    image: cornerstone.pageToPixel(element, e.pointers[0].pageX, e.pointers[0].pageY),
                    client: {
                        x: e.pointers[0].clientX,
                        y: e.pointers[0].clientY
                    }
                };
                currentPoints.canvas = cornerstone.pixelToCanvas(element, currentPoints.image);

                // Calculate delta values in page and image coordinates
                deltaPoints = {
                    page: cornerstoneMath.point.subtract(currentPoints.page, lastPoints.page),
                    image: cornerstoneMath.point.subtract(currentPoints.image, lastPoints.image),
                    client: cornerstoneMath.point.subtract(currentPoints.client, lastPoints.client),
                    canvas: cornerstoneMath.point.subtract(currentPoints.canvas, lastPoints.canvas)
                };

                eventType = 'CornerstoneToolsDragEnd';

                eventData = {
                    event: e.srcEvent,
                    viewport: cornerstone.getViewport(element),
                    image: cornerstone.getEnabledElement(element).image,
                    element: element,
                    startPoints: startPoints,
                    lastPoints: lastPoints,
                    currentPoints: currentPoints,
                    deltaPoints: deltaPoints,
                    type: eventType,
                    isTouchEvent: true
                };

                event = $.Event(eventType, eventData);
                $(element).trigger(event, eventData);

                var remainingPointers = e.pointers.length - e.changedPointers.length;
                if (remainingPointers === 2) {
                    preventNextPinch = true;
                }

                return cornerstoneTools.pauseEvent(e);

            case 'rotatemove':
                isPress = false;
                clearTimeout(pressTimeout);

                var rotation = e.rotation - lastRotation;
                lastRotation = e.rotation;

                eventType = 'CornerstoneToolsTouchRotate';
                eventData = {
                    event: e.srcEvent,
                    viewport: cornerstone.getViewport(element),
                    image: cornerstone.getEnabledElement(element).image,
                    element: element,
                    rotation: rotation,
                    type: eventType
                };
                event = $.Event(eventType, eventData);
                $(element).trigger(event, eventData);
                break;
        }

        //console.log(eventType);
        return false;
    }

    function enable(element) {
        disable(element);

        var hammerOptions = {
            inputClass: Hammer.SUPPORT_POINTER_EVENTS ? Hammer.PointerEventInput : Hammer.TouchInput
        };

        var mc = new Hammer.Manager(element, hammerOptions);

        var panOptions = {
            pointers: 0,
            direction: Hammer.DIRECTION_ALL,
            threshold: 0
        };

        var pan = new Hammer.Pan(panOptions);
        var pinch = new Hammer.Pinch({
            threshold: 0
        });
        var rotate = new Hammer.Rotate({
            threshold: 0
        });
        
        // we want to detect both the same time
        pinch.recognizeWith(pan);
        pinch.recognizeWith(rotate);

        // add to the Manager
        mc.add([ pan, rotate, pinch ]);
        mc.on('tap doubletap panstart panmove panend pinchstart pinchmove rotatemove', onTouch);

        cornerstoneTools.preventGhostClick.enable(element);
        $(element).on('touchstart touchend', onTouch);
        $(element).data('hammer', mc);
        //console.log('touchInput enabled');
    }

    function disable(element) {
        cornerstoneTools.preventGhostClick.disable(element);
        $(element).off('touchstart touchend', onTouch);
        var mc = $(element).data('hammer');
        if (mc) {
            mc.off('tap doubletap panstart panmove panend pinchmove rotatemove', onTouch);
        }

        //console.log('touchInput disabled');
    }

    // module exports
    cornerstoneTools.touchInput = {
        enable: enable,
        disable: disable
    };

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/inputSources/touchInput.js

// Begin Source: src/imageTools/simpleMouseButtonTool.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function simpleMouseButtonTool(mouseDownCallback) {
        var configuration = {};

        var toolInterface = {
            activate: function(element, mouseButtonMask, options) {
                $(element).off('CornerstoneToolsMouseDownActivate', mouseDownCallback);
                var eventData = {
                    mouseButtonMask: mouseButtonMask,
                    options: options
                };
                $(element).on('CornerstoneToolsMouseDownActivate', eventData, mouseDownCallback);
            },
            disable: function(element) {$(element).off('CornerstoneToolsMouseDownActivate', mouseDownCallback);},
            enable: function(element) {$(element).off('CornerstoneToolsMouseDownActivate', mouseDownCallback);},
            deactivate: function(element) {$(element).off('CornerstoneToolsMouseDownActivate', mouseDownCallback);},
            getConfiguration: function() { return configuration;},
            setConfiguration: function(config) {configuration = config;}
        };
        return toolInterface;
    }

    // module exports
    cornerstoneTools.simpleMouseButtonTool = simpleMouseButtonTool;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/simpleMouseButtonTool.js

// Begin Source: src/imageTools/mouseButtonTool.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    function mouseButtonTool(mouseToolInterface) {
        var configuration = {};

        ///////// BEGIN ACTIVE TOOL ///////
        function addNewMeasurement(mouseEventData) {
            var element = mouseEventData.element;

            var measurementData = mouseToolInterface.createNewMeasurement(mouseEventData);
            if (!measurementData) {
                return;
            }

            var eventData = {
                mouseButtonMask: mouseEventData.which
            };

            // associate this data with this imageId so we can render it and manipulate it
            cornerstoneTools.addToolState(mouseEventData.element, mouseToolInterface.toolType, measurementData);

            // since we are dragging to another place to drop the end point, we can just activate
            // the end point and let the moveHandle move it for us.
            $(element).off('CornerstoneToolsMouseMove', mouseToolInterface.mouseMoveCallback || mouseMoveCallback);
            $(element).off('CornerstoneToolsMouseDown', mouseToolInterface.mouseDownCallback || mouseDownCallback);
            $(element).off('CornerstoneToolsMouseDownActivate', mouseToolInterface.mouseDownActivateCallback || mouseDownActivateCallback);

            if (mouseToolInterface.mouseDoubleClickCallback) {
                $(element).off('CornerstoneToolsMouseDoubleClick', mouseToolInterface.mouseDoubleClickCallback);
            }

            cornerstone.updateImage(element);

            var handleMover;
            if (Object.keys(measurementData.handles).length === 1) {
                handleMover = cornerstoneTools.moveHandle;
            } else {
                handleMover = cornerstoneTools.moveNewHandle;
            }

            var preventHandleOutsideImage;
            if (mouseToolInterface.options && mouseToolInterface.options.preventHandleOutsideImage !== undefined) {
                preventHandleOutsideImage = mouseToolInterface.options.preventHandleOutsideImage;
            } else {
                preventHandleOutsideImage = false;
            }

            handleMover(mouseEventData, mouseToolInterface.toolType, measurementData, measurementData.handles.end, function() {
                measurementData.active = false;
                measurementData.invalidated = true;
                if (cornerstoneTools.anyHandlesOutsideImage(mouseEventData, measurementData.handles)) {
                    // delete the measurement
                    cornerstoneTools.removeToolState(element, mouseToolInterface.toolType, measurementData);
                }

                $(element).on('CornerstoneToolsMouseMove', eventData, mouseToolInterface.mouseMoveCallback || mouseMoveCallback);
                $(element).on('CornerstoneToolsMouseDown', eventData, mouseToolInterface.mouseDownCallback || mouseDownCallback);
                $(element).on('CornerstoneToolsMouseDownActivate', eventData, mouseToolInterface.mouseDownActivateCallback || mouseDownActivateCallback);

                if (mouseToolInterface.mouseDoubleClickCallback) {
                    $(element).on('CornerstoneToolsMouseDoubleClick', eventData, mouseToolInterface.mouseDoubleClickCallback);
                }

                cornerstone.updateImage(element);
            }, preventHandleOutsideImage);
        }

        function mouseDownActivateCallback(e, eventData) {
            if (cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
                if (mouseToolInterface.addNewMeasurement) {
                    mouseToolInterface.addNewMeasurement(eventData);
                } else {
                    addNewMeasurement(eventData);
                }

                return false; // false = causes jquery to preventDefault() and stopPropagation() this event
            }
        }

        ///////// END ACTIVE TOOL ///////

        ///////// BEGIN DEACTIVE TOOL ///////

        function mouseMoveCallback(e, eventData) {
            cornerstoneTools.toolCoordinates.setCoords(eventData);
            // if a mouse button is down, do nothing
            if (eventData.which !== 0) {
                return;
            }
          
            // if we have no tool data for this element, do nothing
            var toolData = cornerstoneTools.getToolState(eventData.element, mouseToolInterface.toolType);
            if (!toolData) {
                return;
            }
            
            // We have tool data, search through all data
            // and see if we can activate a handle
            var imageNeedsUpdate = false;
            for (var i = 0; i < toolData.data.length; i++) {
                // get the cursor position in canvas coordinates
                var coords = eventData.currentPoints.canvas;

                var data = toolData.data[i];
                if (cornerstoneTools.handleActivator(eventData.element, data.handles, coords) === true) {
                    imageNeedsUpdate = true;
                }

                if ((mouseToolInterface.pointNearTool(eventData.element, data, coords) && !data.active) || (!mouseToolInterface.pointNearTool(eventData.element, data, coords) && data.active)) {
                    data.active = !data.active;
                    imageNeedsUpdate = true;
                }
            }

            // Handle activation status changed, redraw the image
            if (imageNeedsUpdate === true) {
                cornerstone.updateImage(eventData.element);
            }
        }

        function mouseDownCallback(e, eventData) {
            var data;
            var element = eventData.element;

            function handleDoneMove() {
                data.active = false;
                data.invalidated = true;
                if (cornerstoneTools.anyHandlesOutsideImage(eventData, data.handles)) {
                    // delete the measurement
                    cornerstoneTools.removeToolState(element, mouseToolInterface.toolType, data);
                }

                cornerstone.updateImage(element);
                $(element).on('CornerstoneToolsMouseMove', eventData, mouseToolInterface.mouseMoveCallback || mouseMoveCallback);
            }

            if (cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
                var coords = eventData.startPoints.canvas;
                var toolData = cornerstoneTools.getToolState(e.currentTarget, mouseToolInterface.toolType);

                var i;

                // now check to see if there is a handle we can move
                if (toolData) {

                    var preventHandleOutsideImage;
                    if (mouseToolInterface.options && mouseToolInterface.options.preventHandleOutsideImage !== undefined) {
                        preventHandleOutsideImage = mouseToolInterface.options.preventHandleOutsideImage;
                    } else {
                        preventHandleOutsideImage = false;
                    }

                    for (i = 0; i < toolData.data.length; i++) {
                        data = toolData.data[i];
                        var distanceSq = 25;
                        var handle = cornerstoneTools.getHandleNearImagePoint(element, data.handles, coords, distanceSq);
                        if (handle) {
                            $(element).off('CornerstoneToolsMouseMove', mouseToolInterface.mouseMoveCallback || mouseMoveCallback);
                            data.active = true;
                            cornerstoneTools.moveHandle(eventData, mouseToolInterface.toolType, data, handle, handleDoneMove, preventHandleOutsideImage);
                            e.stopImmediatePropagation();
                            return false;
                        }
                    }
                }

                // Now check to see if there is a line we can move
                // now check to see if we have a tool that we can move
                if (toolData && mouseToolInterface.pointNearTool) {
                    var options = mouseToolInterface.options || {
                        deleteIfHandleOutsideImage: true,
                        preventHandleOutsideImage: false
                    };

                    for (i = 0; i < toolData.data.length; i++) {
                        data = toolData.data[i];
                        if (mouseToolInterface.pointNearTool(element, data, coords)) {
                            $(element).off('CornerstoneToolsMouseMove', mouseToolInterface.mouseMoveCallback || mouseMoveCallback);
                            cornerstoneTools.moveAllHandles(e, data, toolData, mouseToolInterface.toolType, options, handleDoneMove);
                            e.stopImmediatePropagation();
                            return false;
                        }
                    }
                }
            }
        }
        ///////// END DEACTIVE TOOL ///////

        // not visible, not interactive
        function disable(element) {
            $(element).off('CornerstoneImageRendered', mouseToolInterface.onImageRendered);
            $(element).off('CornerstoneToolsMouseMove', mouseToolInterface.mouseMoveCallback || mouseMoveCallback);
            $(element).off('CornerstoneToolsMouseDown', mouseToolInterface.mouseDownCallback || mouseDownCallback);
            $(element).off('CornerstoneToolsMouseDownActivate', mouseToolInterface.mouseDownActivateCallback || mouseDownActivateCallback);

            if (mouseToolInterface.mouseDoubleClickCallback) {
                $(element).off('CornerstoneToolsMouseDoubleClick', mouseToolInterface.mouseDoubleClickCallback);
            }

            cornerstone.updateImage(element);
        }

        // visible but not interactive
        function enable(element) {
            $(element).off('CornerstoneImageRendered', mouseToolInterface.onImageRendered);
            $(element).off('CornerstoneToolsMouseMove', mouseToolInterface.mouseMoveCallback || mouseMoveCallback);
            $(element).off('CornerstoneToolsMouseDown', mouseToolInterface.mouseDownCallback || mouseDownCallback);
            $(element).off('CornerstoneToolsMouseDownActivate', mouseToolInterface.mouseDownActivateCallback || mouseDownActivateCallback);

            if (mouseToolInterface.mouseDoubleClickCallback) {
                $(element).off('CornerstoneToolsMouseDoubleClick', mouseToolInterface.mouseDoubleClickCallback);
            }

            $(element).on('CornerstoneImageRendered', mouseToolInterface.onImageRendered);

            cornerstone.updateImage(element);
        }

        // visible, interactive and can create
        function activate(element, mouseButtonMask) {
            var eventData = {
                mouseButtonMask: mouseButtonMask
            };

            $(element).off('CornerstoneImageRendered', mouseToolInterface.onImageRendered);
            $(element).off('CornerstoneToolsMouseMove', mouseToolInterface.mouseMoveCallback || mouseMoveCallback);
            $(element).off('CornerstoneToolsMouseDown', mouseToolInterface.mouseDownCallback || mouseDownCallback);
            $(element).off('CornerstoneToolsMouseDownActivate', mouseToolInterface.mouseDownActivateCallback || mouseDownActivateCallback);

            $(element).on('CornerstoneImageRendered', mouseToolInterface.onImageRendered);
            $(element).on('CornerstoneToolsMouseMove', eventData, mouseToolInterface.mouseMoveCallback || mouseMoveCallback);
            $(element).on('CornerstoneToolsMouseDown', eventData, mouseToolInterface.mouseDownCallback || mouseDownCallback);
            $(element).on('CornerstoneToolsMouseDownActivate', eventData, mouseToolInterface.mouseDownActivateCallback || mouseDownActivateCallback);

            if (mouseToolInterface.mouseDoubleClickCallback) {
                $(element).off('CornerstoneToolsMouseDoubleClick', mouseToolInterface.mouseDoubleClickCallback);
                $(element).on('CornerstoneToolsMouseDoubleClick', eventData, mouseToolInterface.mouseDoubleClickCallback);
            }

            cornerstone.updateImage(element);
        }

        // visible, interactive
        function deactivate(element, mouseButtonMask) {
            var eventData = {
                mouseButtonMask: mouseButtonMask
            };

            $(element).off('CornerstoneImageRendered', mouseToolInterface.onImageRendered);
            $(element).off('CornerstoneToolsMouseMove', mouseToolInterface.mouseMoveCallback || mouseMoveCallback);
            $(element).off('CornerstoneToolsMouseDown', mouseToolInterface.mouseDownCallback || mouseDownCallback);
            $(element).off('CornerstoneToolsMouseDownActivate', mouseToolInterface.mouseDownActivateCallback || mouseDownActivateCallback);

            $(element).on('CornerstoneImageRendered', mouseToolInterface.onImageRendered);
            $(element).on('CornerstoneToolsMouseMove', eventData, mouseToolInterface.mouseMoveCallback || mouseMoveCallback);
            $(element).on('CornerstoneToolsMouseDown', eventData, mouseToolInterface.mouseDownCallback || mouseDownCallback);

            if (mouseToolInterface.mouseDoubleClickCallback) {
                $(element).off('CornerstoneToolsMouseDoubleClick', mouseToolInterface.mouseDoubleClickCallback);
                $(element).on('CornerstoneToolsMouseDoubleClick', eventData, mouseToolInterface.mouseDoubleClickCallback);
            }

            cornerstone.updateImage(element);
        }

        function getConfiguration() {
            return configuration;
        }

        function setConfiguration(config) {
            configuration = config;
        }

        var toolInterface = {
            enable: enable,
            disable: disable,
            activate: activate,
            deactivate: deactivate,
            getConfiguration: getConfiguration,
            setConfiguration: setConfiguration,
            mouseDownCallback: mouseDownCallback,
            mouseMoveCallback: mouseMoveCallback,
            mouseDownActivateCallback: mouseDownActivateCallback
        };

        // Expose pointNearTool if available
        if (mouseToolInterface.pointNearTool) {
            toolInterface.pointNearTool = mouseToolInterface.pointNearTool;
        }

        if (mouseToolInterface.mouseDoubleClickCallback) {
            toolInterface.mouseDoubleClickCallback = mouseToolInterface.mouseDoubleClickCallback;
        }

        if (mouseToolInterface.addNewMeasurement) {
            toolInterface.addNewMeasurement = mouseToolInterface.addNewMeasurement;
        }

        return toolInterface;
    }

    // module exports
    cornerstoneTools.mouseButtonTool = mouseButtonTool;

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/imageTools/mouseButtonTool.js

// Begin Source: src/imageTools/mouseButtonRectangleTool.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';
    
    function mouseButtonRectangleTool(mouseToolInterface, preventHandleOutsideImage) {
        ///////// BEGIN ACTIVE TOOL ///////
        function addNewMeasurement(mouseEventData) {
            var measurementData = mouseToolInterface.createNewMeasurement(mouseEventData);
            
            //prevent adding new measurement if tool returns nill
            if (!measurementData) {
                return;
            }

            // associate this data with this imageId so we can render it and manipulate it
            cornerstoneTools.addToolState(mouseEventData.element, mouseToolInterface.toolType, measurementData);
           
            // since we are dragging to another place to drop the end point, we can just activate
            // the end point and let the moveHandle move it for us.
            $(mouseEventData.element).off('CornerstoneToolsMouseMove', mouseMoveCallback);
            cornerstoneTools.moveHandle(mouseEventData, mouseToolInterface.toolType, measurementData, measurementData.handles.end, function() {
                measurementData.active = false;
                if (cornerstoneTools.anyHandlesOutsideImage(mouseEventData, measurementData.handles)) {
                    // delete the measurement
                    cornerstoneTools.removeToolState(mouseEventData.element, mouseToolInterface.toolType, measurementData);
                }

                $(mouseEventData.element).on('CornerstoneToolsMouseMove', mouseMoveCallback);
            }, preventHandleOutsideImage);
        }

        function mouseDownActivateCallback(e, eventData) {
            if (cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
                addNewMeasurement(eventData);
                return false; // false = cases jquery to preventDefault() and stopPropagation() this event
            }
        }
        ///////// END ACTIVE TOOL ///////

        ///////// BEGIN DEACTIVE TOOL ///////

        function mouseMoveCallback(e, eventData) {
            cornerstoneTools.toolCoordinates.setCoords(eventData);
            // if a mouse button is down, do nothing
            if (eventData.which !== 0) {
                return;
            }
          
            // if we have no tool data for this element, do nothing
            var toolData = cornerstoneTools.getToolState(eventData.element, mouseToolInterface.toolType);
            if (toolData === undefined) {
                return;
            }
            
            // We have tool data, search through all data
            // and see if we can activate a handle
            var imageNeedsUpdate = false;
            var coords = eventData.currentPoints.canvas;

            for (var i = 0; i < toolData.data.length; i++) {
                // get the cursor position in image coordinates
                var data = toolData.data[i];
                if (cornerstoneTools.handleActivator(eventData.element, data.handles, coords) === true) {
                    imageNeedsUpdate = true;
                }

                if ((mouseToolInterface.pointInsideRect(eventData.element, data, coords) && !data.active) || (!mouseToolInterface.pointInsideRect(eventData.element, data, coords) && data.active)) {
                    data.active = !data.active;
                    imageNeedsUpdate = true;
                }
            }

            // Handle activation status changed, redraw the image
            if (imageNeedsUpdate === true) {
                cornerstone.updateImage(eventData.element);
            }
        }

        function mouseDownCallback(e, eventData) {
            var data;

            function handleDoneMove() {
                data.active = false;
                if (cornerstoneTools.anyHandlesOutsideImage(eventData, data.handles)) {
                    // delete the measurement
                    cornerstoneTools.removeToolState(eventData.element, mouseToolInterface.toolType, data);
                }

                cornerstone.updateImage(eventData.element);
                $(eventData.element).on('CornerstoneToolsMouseMove', mouseMoveCallback);
            }

            if (cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
                var coords = eventData.startPoints.canvas;
                var toolData = cornerstoneTools.getToolState(e.currentTarget, mouseToolInterface.toolType);

                var i;

                // now check to see if there is a handle we can move
                var distanceSq = 25;

                if (toolData !== undefined) {
                    for (i = 0; i < toolData.data.length; i++) {
                        data = toolData.data[i];
                        var handle = cornerstoneTools.getHandleNearImagePoint(eventData.element, data.handles, coords, distanceSq);
                        if (handle !== undefined) {
                            $(eventData.element).off('CornerstoneToolsMouseMove', mouseMoveCallback);
                            data.active = true;
                            cornerstoneTools.moveHandle(eventData, mouseToolInterface.toolType, data, handle, handleDoneMove, preventHandleOutsideImage);
                            e.stopImmediatePropagation();
                            return false;
                        }
                    }
                }

                // Now check to see if there is a line we can move
                // now check to see if we have a tool that we can move
                var options = {
                    deleteIfHandleOutsideImage: true,
                    preventHandleOutsideImage: preventHandleOutsideImage
                };
                
                if (toolData !== undefined && mouseToolInterface.pointInsideRect !== undefined) {
                    for (i = 0; i < toolData.data.length; i++) {
                        data = toolData.data[i];
                        if (mouseToolInterface.pointInsideRect(eventData.element, data, coords)) {
                            $(eventData.element).off('CornerstoneToolsMouseMove', mouseMoveCallback);
                            cornerstoneTools.moveAllHandles(e, data, toolData, mouseToolInterface.toolType, options, handleDoneMove);
                            $(eventData.element).on('CornerstoneToolsMouseMove', mouseMoveCallback);
                            e.stopImmediatePropagation();
                            return false;
                        }
                    }
                }
            }
        }
        ///////// END DEACTIVE TOOL ///////

        // not visible, not interactive
        function disable(element) {
            $(element).off('CornerstoneImageRendered', mouseToolInterface.onImageRendered);
            $(element).off('CornerstoneToolsMouseMove', mouseMoveCallback);
            $(element).off('CornerstoneToolsMouseDown', mouseDownCallback);
            $(element).off('CornerstoneToolsMouseDownActivate', mouseDownActivateCallback);

            cornerstone.updateImage(element);
        }

        // visible but not interactive
        function enable(element) {
            $(element).off('CornerstoneImageRendered', mouseToolInterface.onImageRendered);
            $(element).off('CornerstoneToolsMouseMove', mouseMoveCallback);
            $(element).off('CornerstoneToolsMouseDown', mouseDownCallback);
            $(element).off('CornerstoneToolsMouseDownActivate', mouseDownActivateCallback);

            $(element).on('CornerstoneImageRendered', mouseToolInterface.onImageRendered);

            cornerstone.updateImage(element);
        }

        // visible, interactive and can create
        function activate(element, mouseButtonMask) {
            var eventData = {
                mouseButtonMask: mouseButtonMask
            };

            $(element).off('CornerstoneImageRendered', mouseToolInterface.onImageRendered);
            $(element).off('CornerstoneToolsMouseMove', mouseMoveCallback);
            $(element).off('CornerstoneToolsMouseDown', mouseDownCallback);
            $(element).off('CornerstoneToolsMouseDownActivate', mouseDownActivateCallback);

            $(element).on('CornerstoneImageRendered', mouseToolInterface.onImageRendered);
            $(element).on('CornerstoneToolsMouseMove', eventData, mouseMoveCallback);
            $(element).on('CornerstoneToolsMouseDown', eventData, mouseDownCallback);
            $(element).on('CornerstoneToolsMouseDownActivate', eventData, mouseDownActivateCallback);

            cornerstone.updateImage(element);
        }

        // visible, interactive
        function deactivate(element, mouseButtonMask) {
            var eventData = {
                mouseButtonMask: mouseButtonMask
            };

            $(element).off('CornerstoneImageRendered', mouseToolInterface.onImageRendered);
            $(element).off('CornerstoneToolsMouseMove', mouseMoveCallback);
            $(element).off('CornerstoneToolsMouseDown', mouseDownCallback);
            $(element).off('CornerstoneToolsMouseDownActivate', mouseDownActivateCallback);

            $(element).on('CornerstoneImageRendered', mouseToolInterface.onImageRendered);
            $(element).on('CornerstoneToolsMouseMove', eventData, mouseMoveCallback);
            $(element).on('CornerstoneToolsMouseDown', eventData, mouseDownCallback);

            cornerstone.updateImage(element);
        }

        var toolInterface = {
            enable: enable,
            disable: disable,
            activate: activate,
            deactivate: deactivate
        };

        return toolInterface;
    }

    // module exports
    cornerstoneTools.mouseButtonRectangleTool = mouseButtonRectangleTool;

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/imageTools/mouseButtonRectangleTool.js

// Begin Source: src/imageTools/mouseWheelTool.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function mouseWheelTool(mouseWheelCallback) {
        var toolInterface = {
            activate: function(element) {
                $(element).off('CornerstoneToolsMouseWheel', mouseWheelCallback);
                var eventData = {
                };
                $(element).on('CornerstoneToolsMouseWheel', eventData, mouseWheelCallback);
            },
            disable: function(element) {$(element).off('CornerstoneToolsMouseWheel', mouseWheelCallback);},
            enable: function(element) {$(element).off('CornerstoneToolsMouseWheel', mouseWheelCallback);},
            deactivate: function(element) {$(element).off('CornerstoneToolsMouseWheel', mouseWheelCallback);}
        };
        return toolInterface;
    }

    // module exports
    cornerstoneTools.mouseWheelTool = mouseWheelTool;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/mouseWheelTool.js

// Begin Source: src/imageTools/touchDragTool.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function touchDragTool(touchDragCallback, options) {
        var events = 'CornerstoneToolsTouchDrag';
        if (options && options.fireOnTouchStart === true) {
            events += ' CornerstoneToolsTouchStart';
        }

        var toolInterface = {
            activate: function(element) {
                $(element).off(events, touchDragCallback);

                if (options && options.eventData) {
                    $(element).on(events, options.eventData, touchDragCallback);
                } else {
                    $(element).on(events, touchDragCallback);
                }

                if (options && options.activateCallback) {
                    options.activateCallback(element);
                }
            },
            disable: function(element) {
                $(element).off(events, touchDragCallback);
                if (options && options.disableCallback) {
                    options.disableCallback(element);
                }
            },
            enable: function(element) {
                $(element).off(events, touchDragCallback);
                if (options && options.enableCallback) {
                    options.enableCallback(element);
                }
            },
            deactivate: function(element) {
                $(element).off(events, touchDragCallback);
                if (options && options.deactivateCallback) {
                    options.deactivateCallback(element);
                }
            }
        };
        return toolInterface;
    }

    // module exports
    cornerstoneTools.touchDragTool = touchDragTool;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/touchDragTool.js

// Begin Source: src/imageTools/touchPinchTool.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    /*jshint newcap: false */

    function touchPinchTool(touchPinchCallback) {
        var toolInterface = {
            activate: function(element) {
                $(element).off('CornerstoneToolsTouchPinch', touchPinchCallback);
                var eventData = {
                };
                $(element).on('CornerstoneToolsTouchPinch', eventData, touchPinchCallback);
            },
            disable: function(element) {$(element).off('CornerstoneToolsTouchPinch', touchPinchCallback);},
            enable: function(element) {$(element).off('CornerstoneToolsTouchPinch', touchPinchCallback);},
            deactivate: function(element) {$(element).off('CornerstoneToolsTouchPinch', touchPinchCallback);}
        };
        return toolInterface;
    }

    // module exports
    cornerstoneTools.touchPinchTool = touchPinchTool;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/touchPinchTool.js

// Begin Source: src/imageTools/touchTool.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    function deactivateAllHandles(handles) {
        Object.keys(handles).forEach(function(name) {
            var handle = handles[name];
            handle.active = false;
        });
    }

    function deactivateAllToolInstances(toolData) {
        if (!toolData) {
            return;
        }

        for (var i = 0; i < toolData.data.length; i++) {
            var data = toolData.data[i];
            data.active = false;
            if (!data.handles) {
                continue;
            }

            deactivateAllHandles(data.handles);
        }
    }

    function touchTool(touchToolInterface) {
        ///////// BEGIN ACTIVE TOOL ///////

        function addNewMeasurement(touchEventData) {
            //console.log('touchTool addNewMeasurement');
            var element = touchEventData.element;

            var measurementData = touchToolInterface.createNewMeasurement(touchEventData);
            if (!measurementData) {
                return;
            }

            cornerstoneTools.addToolState(element, touchToolInterface.toolType, measurementData);

            if (Object.keys(measurementData.handles).length === 1 && touchEventData.type === 'CornerstoneToolsTap') {
                measurementData.active = false;
                measurementData.handles.end.active = false;
                measurementData.handles.end.highlight = false;
                measurementData.invalidated = true;
                if (cornerstoneTools.anyHandlesOutsideImage(touchEventData, measurementData.handles)) {
                    // delete the measurement
                    cornerstoneTools.removeToolState(element, touchToolInterface.toolType, measurementData);
                }

                cornerstone.updateImage(element);
                return;
            }

            $(element).off('CornerstoneToolsTouchStartActive', touchToolInterface.touchDownActivateCallback || touchDownActivateCallback);
            $(element).off('CornerstoneToolsTap', touchToolInterface.tapCallback || tapCallback);

            cornerstone.updateImage(element);
            cornerstoneTools.moveNewHandleTouch(touchEventData, touchToolInterface.toolType, measurementData, measurementData.handles.end, function() {
                measurementData.active = false;
                measurementData.invalidated = true;
                if (cornerstoneTools.anyHandlesOutsideImage(touchEventData, measurementData.handles)) {
                    // delete the measurement
                    cornerstoneTools.removeToolState(element, touchToolInterface.toolType, measurementData);
                }

                $(element).on('CornerstoneToolsTouchStartActive', touchToolInterface.touchDownActivateCallback || touchDownActivateCallback);
                $(element).on('CornerstoneToolsTap', touchToolInterface.tapCallback || tapCallback);
                cornerstone.updateImage(element);
            });
        }

        function touchDownActivateCallback(e, eventData) {
            //console.log('touchTool touchDownActivateCallback');
            if (touchToolInterface.addNewMeasurement) {
                touchToolInterface.addNewMeasurement(eventData);
            } else {
                addNewMeasurement(eventData);
            }

            return false; // false = causes jquery to preventDefault() and stopPropagation() this event
        }
        ///////// END ACTIVE TOOL ///////

        ///////// BEGIN INACTIVE TOOL ///////
        function tapCallback(e, eventData) {
            //console.log('touchTool tapCallback');
            var element = eventData.element;
            var coords = eventData.currentPoints.canvas;
            var toolData = cornerstoneTools.getToolState(e.currentTarget, touchToolInterface.toolType);
            var data;
            var i;

            // Deactivate everything
            deactivateAllToolInstances(toolData);

            function doneMovingCallback() {
                console.log('touchTool tapCallback doneMovingCallback');
                deactivateAllToolInstances(toolData);
                if (cornerstoneTools.anyHandlesOutsideImage(eventData, data.handles)) {
                    // delete the measurement
                    cornerstoneTools.removeToolState(element, touchToolInterface.toolType, data);
                }

                cornerstone.updateImage(element);
                $(element).on('CornerstoneToolsTouchStartActive', touchToolInterface.touchDownActivateCallback || touchDownActivateCallback);
                $(element).on('CornerstoneToolsTap', touchToolInterface.tapCallback || tapCallback);
            }

            // now check to see if there is a handle we can move
            if (toolData) {
                for (i = 0; i < toolData.data.length; i++) {
                    data = toolData.data[i];
                    var distanceSq = 25; // Should probably make this a settable property later
                    var handle = cornerstoneTools.getHandleNearImagePoint(element, data.handles, coords, distanceSq);
                    if (handle) {
                        $(element).off('CornerstoneToolsTouchStartActive', touchToolInterface.touchDownActivateCallback || touchDownActivateCallback);
                        $(element).off('CornerstoneToolsTap', touchToolInterface.tapCallback || tapCallback);
                        data.active = true;
                        handle.active = true;
                        cornerstone.updateImage(element);
                        cornerstoneTools.touchMoveHandle(e, touchToolInterface.toolType, data, handle, doneMovingCallback);
                        e.stopImmediatePropagation();
                        return false; // false = causes jquery to preventDefault() and stopPropagation() this event
                    }
                }
            }

            // Now check to see if we have a tool that we can move
            if (toolData && touchToolInterface.pointNearTool) {
                for (i = 0; i < toolData.data.length; i++) {
                    data = toolData.data[i];
                    if (touchToolInterface.pointNearTool(element, data, coords)) {
                        $(element).off('CornerstoneToolsTouchStartActive', touchToolInterface.touchDownActivateCallback || touchDownActivateCallback);
                        $(element).off('CornerstoneToolsTap', touchToolInterface.tapCallback || tapCallback);
                        data.active = true;
                        cornerstone.updateImage(element);
                        cornerstoneTools.touchMoveAllHandles(e, data, toolData, touchToolInterface.toolType, true, doneMovingCallback);
                        e.stopImmediatePropagation();
                        return false; // false = causes jquery to preventDefault() and stopPropagation() this event
                    }
                }
            }

            // If there is nothing to move, add a new instance of the tool
            // Need to check here to see if activation is allowed!
            if (touchToolInterface.touchDownActivateCallback) {
                touchToolInterface.touchDownActivateCallback(e, eventData);
            } else {
                touchDownActivateCallback(e, eventData);
            }

            return false;
        }

        function touchStartCallback(e, eventData) {
            //console.log('touchTool touchStartCallback');
            var element = eventData.element;
            var coords = eventData.startPoints.canvas;
            var data;
            var toolData = cornerstoneTools.getToolState(e.currentTarget, touchToolInterface.toolType);
            var i;

            function doneMovingCallback() {
                //console.log('touchTool touchStartCallback doneMovingCallback');
                data.active = false;
                data.invalidated = true;
                if (cornerstoneTools.anyHandlesOutsideImage(eventData, data.handles)) {
                    // delete the measurement
                    cornerstoneTools.removeToolState(eventData.element, touchToolInterface.toolType, data);
                }

                cornerstone.updateImage(eventData.element);
                $(element).on('CornerstoneToolsTouchStartActive', touchToolInterface.touchDownActivateCallback || touchDownActivateCallback);
                $(element).on('CornerstoneToolsTap', touchToolInterface.tapCallback || tapCallback);
            }

            // now check to see if there is a handle we can move
            var distanceFromTouch = cornerstoneTools.touchSettings.getToolDistanceFromTouch();
            var distanceSq = Math.max(Math.abs(distanceFromTouch.x), Math.abs(distanceFromTouch.y));
            if (toolData) {
                for (i = 0; i < toolData.data.length; i++) {
                    data = toolData.data[i];

                    var handle = cornerstoneTools.getHandleNearImagePoint(eventData.element, data.handles, coords, distanceSq);
                    if (handle) {
                        $(element).off('CornerstoneToolsTouchStartActive', touchToolInterface.touchDownActivateCallback || touchDownActivateCallback);
                        $(element).off('CornerstoneToolsTap', touchToolInterface.tapCallback || tapCallback);
                        data.active = true;
                        cornerstoneTools.touchMoveHandle(e, touchToolInterface.toolType, data, handle, doneMovingCallback);
                        e.stopImmediatePropagation();
                        return false; // false = causes jquery to preventDefault() and stopPropagation() this event
                    }
                }
            }

            // Now check to see if we have a tool that we can move
            if (toolData && touchToolInterface.pointNearTool) {
                for (i = 0; i < toolData.data.length; i++) {
                    data = toolData.data[i];
                    if (touchToolInterface.pointNearTool(eventData.element, data, coords)) {
                        $(element).off('CornerstoneToolsTouchStartActive', touchToolInterface.touchDownActivateCallback || touchDownActivateCallback);
                        $(element).off('CornerstoneToolsTap', touchToolInterface.tapCallback || tapCallback);
                        cornerstoneTools.touchMoveAllHandles(e, data, toolData, touchToolInterface.toolType, true, doneMovingCallback);
                        e.stopImmediatePropagation();
                        return false; // false = causes jquery to preventDefault() and stopPropagation() this event
                    }
                }
            }
        }
        ///////// END INACTIVE TOOL ///////

        // not visible, not interactive
        function disable(element) {
            $(element).off('CornerstoneImageRendered', touchToolInterface.onImageRendered);
            $(element).off('CornerstoneToolsTouchStart', touchToolInterface.touchStartCallback || touchStartCallback);
            $(element).off('CornerstoneToolsTouchStartActive', touchToolInterface.touchDownActivateCallback || touchDownActivateCallback);
            $(element).off('CornerstoneToolsTap', touchToolInterface.tapCallback || tapCallback);

            if (touchToolInterface.doubleTapCallback) {
                $(element).off('CornerstoneToolsDoubleTap', touchToolInterface.doubleTapCallback);
            }
            
            if (touchToolInterface.pressCallback) {
                $(element).off('CornerstoneToolsTouchPress', touchToolInterface.pressCallback);
            }

            cornerstone.updateImage(element);
        }

        // visible but not interactive
        function enable(element) {
            $(element).off('CornerstoneImageRendered', touchToolInterface.onImageRendered);
            $(element).off('CornerstoneToolsTouchStart', touchToolInterface.touchStartCallback || touchStartCallback);
            $(element).off('CornerstoneToolsTouchStartActive', touchToolInterface.touchDownActivateCallback || touchDownActivateCallback);
            $(element).off('CornerstoneToolsTap', touchToolInterface.tapCallback || tapCallback);

            $(element).on('CornerstoneImageRendered', touchToolInterface.onImageRendered);

            if (touchToolInterface.doubleTapCallback) {
                $(element).off('CornerstoneToolsDoubleTap', touchToolInterface.doubleTapCallback);
            }

            if (touchToolInterface.pressCallback) {
                $(element).off('CornerstoneToolsTouchPress', touchToolInterface.pressCallback);
            }

            cornerstone.updateImage(element);
        }

        // visible, interactive and can create
        function activate(element) {
            //console.log('activate touchTool');

            $(element).off('CornerstoneImageRendered', touchToolInterface.onImageRendered);
            $(element).off('CornerstoneToolsTouchStart', touchToolInterface.touchStartCallback || touchStartCallback);
            $(element).off('CornerstoneToolsTouchStartActive', touchToolInterface.touchDownActivateCallback || touchDownActivateCallback);
            $(element).off('CornerstoneToolsTap', touchToolInterface.tapCallback || tapCallback);

            $(element).on('CornerstoneImageRendered', touchToolInterface.onImageRendered);
            $(element).on('CornerstoneToolsTouchStart', touchToolInterface.touchStartCallback || touchStartCallback);
            $(element).on('CornerstoneToolsTouchStartActive', touchToolInterface.touchDownActivateCallback || touchDownActivateCallback);
            $(element).on('CornerstoneToolsTap', touchToolInterface.tapCallback || tapCallback);

            if (touchToolInterface.doubleTapCallback) {
                $(element).off('CornerstoneToolsDoubleTap', touchToolInterface.doubleTapCallback);
                $(element).on('CornerstoneToolsDoubleTap', touchToolInterface.doubleTapCallback);
            }

            if (touchToolInterface.pressCallback) {
                $(element).off('CornerstoneToolsTouchPress', touchToolInterface.pressCallback);
                $(element).on('CornerstoneToolsTouchPress', touchToolInterface.pressCallback);
            }

            cornerstone.updateImage(element);
        }

        // visible, interactive
        function deactivate(element) {
            //console.log('deactivate touchTool');
            
            $(element).off('CornerstoneImageRendered', touchToolInterface.onImageRendered);
            $(element).off('CornerstoneToolsTouchStart', touchToolInterface.touchStartCallback || touchStartCallback);
            $(element).off('CornerstoneToolsTouchStartActive', touchToolInterface.touchDownActivateCallback || touchDownActivateCallback);
            $(element).off('CornerstoneToolsTap', touchToolInterface.tapCallback || tapCallback);

            $(element).on('CornerstoneImageRendered', touchToolInterface.onImageRendered);
            //$(element).on('CornerstoneToolsTap', touchToolInterface.tapCallback || tapCallback);

            if (touchToolInterface.doubleTapCallback) {
                $(element).off('CornerstoneToolsDoubleTap', touchToolInterface.doubleTapCallback);
                $(element).on('CornerstoneToolsDoubleTap', touchToolInterface.doubleTapCallback);
            }

            if (touchToolInterface.pressCallback) {
                $(element).off('CornerstoneToolsTouchPress', touchToolInterface.pressCallback);
                $(element).on('CornerstoneToolsTouchPress', touchToolInterface.pressCallback);
            }

            cornerstone.updateImage(element);
        }

        var toolInterface = {
            enable: enable,
            disable: disable,
            activate: activate,
            deactivate: deactivate,
            touchStartCallback: touchToolInterface.touchStartCallback || touchStartCallback,
            touchDownActivateCallback: touchToolInterface.touchDownActivateCallback || touchDownActivateCallback,
            tapCallback: touchToolInterface.tapCallback || tapCallback
        };

        // Expose pointNearTool if available
        if (touchToolInterface.pointNearTool) {
            toolInterface.pointNearTool = touchToolInterface.pointNearTool;
        }

        if (touchToolInterface.doubleTapCallback) {
            toolInterface.doubleTapCallback = touchToolInterface.doubleTapCallback;
        }

        if (touchToolInterface.pressCallback) {
            toolInterface.pressCallback = touchToolInterface.pressCallback;
        }

        if (touchToolInterface.addNewMeasurement) {
            toolInterface.addNewMeasurement = touchToolInterface.addNewMeasurement;
        }

        return toolInterface;
    }

    // module exports
    cornerstoneTools.touchTool = touchTool;

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/imageTools/touchTool.js

// Begin Source: src/imageTools/AngleTool.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    var toolType = 'angle';

    ///////// BEGIN ACTIVE TOOL ///////
    function createNewMeasurement(mouseEventData) {
        // create the measurement data for this tool with the end handle activated
        var angleData = {
            visible: true,
            active: true,
            handles: {
                start: {
                    x: mouseEventData.currentPoints.image.x - 20,
                    y: mouseEventData.currentPoints.image.y + 10,
                    highlight: true,
                    active: false
                },
                end: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: true
                },
                start2: {
                    x: mouseEventData.currentPoints.image.x - 20,
                    y: mouseEventData.currentPoints.image.y + 10,
                    highlight: true,
                    active: false
                },
                end2: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y + 20,
                    highlight: true,
                    active: false
                }
            }
        };

        return angleData;
    }
    ///////// END ACTIVE TOOL ///////

    function pointNearTool(element, data, coords) {
        var lineSegment = {
            start: cornerstone.pixelToCanvas(element, data.handles.start),
            end: cornerstone.pixelToCanvas(element, data.handles.end)
        };
        
        var distanceToPoint = cornerstoneMath.lineSegment.distanceToPoint(lineSegment, coords);
        if (distanceToPoint < 5) {
            return true;
        }

        lineSegment.start = cornerstone.pixelToCanvas(element, data.handles.start2);
        lineSegment.end = cornerstone.pixelToCanvas(element, data.handles.end2);

        distanceToPoint = cornerstoneMath.lineSegment.distanceToPoint(lineSegment, coords);
        return (distanceToPoint < 5);
    }

    ///////// BEGIN IMAGE RENDERING ///////
    function onImageRendered(e, eventData) {

        // if we have no toolData for this element, return immediately as there is nothing to do
        var toolData = cornerstoneTools.getToolState(e.currentTarget, toolType);
        if (toolData === undefined) {
            return;
        }

        // we have tool data for this element - iterate over each one and draw it
        var context = eventData.canvasContext.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);
        
        //activation color 
        var color;
        var lineWidth = cornerstoneTools.toolStyle.getToolWidth();
        var font = cornerstoneTools.textStyle.getFont();
        var config = cornerstoneTools.angle.getConfiguration();

        for (var i = 0; i < toolData.data.length; i++) {
            context.save();

            // configurable shadow
            if (config && config.shadow) {
                context.shadowColor = config.shadowColor || '#000000';
                context.shadowOffsetX = config.shadowOffsetX || 1;
                context.shadowOffsetY = config.shadowOffsetY || 1;
            }

            var data = toolData.data[i];

            //differentiate the color of activation tool
            if (data.active) {
                color = cornerstoneTools.toolColors.getActiveColor();
            } else {
                color = cornerstoneTools.toolColors.getToolColor();
            }

            // draw the line
            context.beginPath();
            context.strokeStyle = color;
            context.lineWidth = lineWidth;

            var handleStartCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.start);
            var handleEndCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.end);

            context.moveTo(handleStartCanvas.x, handleStartCanvas.y);
            context.lineTo(handleEndCanvas.x, handleEndCanvas.y);

            handleStartCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.start2);
            handleEndCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.end2);

            context.moveTo(handleStartCanvas.x, handleStartCanvas.y);
            context.lineTo(handleEndCanvas.x, handleEndCanvas.y);
            context.stroke();

            // draw the handles
            cornerstoneTools.drawHandles(context, eventData, data.handles);

            // Draw the text
            context.fillStyle = color;

            // Need to work on correct angle to measure.  This is a cobb angle and we need to determine
            // where lines cross to measure angle. For now it will show smallest angle. 
            var dx1 = (Math.ceil(data.handles.start.x) - Math.ceil(data.handles.end.x)) * eventData.image.columnPixelSpacing;
            var dy1 = (Math.ceil(data.handles.start.y) - Math.ceil(data.handles.end.y)) * eventData.image.rowPixelSpacing;
            var dx2 = (Math.ceil(data.handles.start2.x) - Math.ceil(data.handles.end2.x)) * eventData.image.columnPixelSpacing;
            var dy2 = (Math.ceil(data.handles.start2.y) - Math.ceil(data.handles.end2.y)) * eventData.image.rowPixelSpacing;

            var angle = Math.acos(Math.abs(((dx1 * dx2) + (dy1 * dy2)) / (Math.sqrt((dx1 * dx1) + (dy1 * dy1)) * Math.sqrt((dx2 * dx2) + (dy2 * dy2)))));
            angle = angle * (180 / Math.PI);

            var rAngle = cornerstoneTools.roundToDecimal(angle, 2);
            var str = '00B0'; // degrees symbol
            var text = rAngle.toString() + String.fromCharCode(parseInt(str, 16));

            var textX = (handleStartCanvas.x + handleEndCanvas.x) / 2;
            var textY = (handleStartCanvas.y + handleEndCanvas.y) / 2;

            context.font = font;
            cornerstoneTools.drawTextBox(context, text, textX, textY, color);
            context.restore();
        }
    }
    ///////// END IMAGE RENDERING ///////

    // module exports
    cornerstoneTools.angle = cornerstoneTools.mouseButtonTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType
    });
    
    cornerstoneTools.angleTouch = cornerstoneTools.touchTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType
    });

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/imageTools/AngleTool.js

// Begin Source: src/imageTools/annotation.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    var toolType = 'arrowAnnotate';

    // Define a callback to get your text annotation
    // This could be used, e.g. to open a modal
    function getTextCallback(doneChangingTextCallback) {
        doneChangingTextCallback(prompt('Enter your annotation:'));
    }

    function changeTextCallback(data, doneChangingTextCallback) {
        doneChangingTextCallback(prompt('Change your annotation:'));
    }

    var configuration = {
        getTextCallback: getTextCallback,
        changeTextCallback: changeTextCallback,
        drawHandles: false,
        drawHandlesOnHover: true,
        arrowFirst: true
    };

    /// --- Mouse Tool --- ///

    ///////// BEGIN ACTIVE TOOL ///////
    function addNewMeasurement(mouseEventData) {

        var measurementData = createNewMeasurement(mouseEventData);

        function doneChangingTextCallback(text) {
            if (text !== null) {
                measurementData.text = text;
            } else {
                cornerstoneTools.removeToolState(mouseEventData.element, toolType, measurementData);
            }

            measurementData.active = false;
            cornerstone.updateImage(mouseEventData.element);
        }

        var eventData = {
            mouseButtonMask: mouseEventData.which,
        };
        
        // associate this data with this imageId so we can render it and manipulate it
        cornerstoneTools.addToolState(mouseEventData.element, toolType, measurementData);
       
        // since we are dragging to another place to drop the end point, we can just activate
        // the end point and let the moveHandle move it for us.
        $(mouseEventData.element).off('CornerstoneToolsMouseMove', cornerstoneTools.arrowAnnotate.mouseMoveCallback);
        $(mouseEventData.element).off('CornerstoneToolsMouseDown', cornerstoneTools.arrowAnnotate.mouseDownCallback);
        $(mouseEventData.element).off('CornerstoneToolsMouseDownActivate', cornerstoneTools.arrowAnnotate.mouseDownActivateCallback);

        cornerstone.updateImage(mouseEventData.element);
        cornerstoneTools.moveNewHandle(mouseEventData, toolType, measurementData, measurementData.handles.end, function() {
            if (cornerstoneTools.anyHandlesOutsideImage(mouseEventData, measurementData.handles)) {
                // delete the measurement
                cornerstoneTools.removeToolState(mouseEventData.element, toolType, measurementData);
            }

            var config = cornerstoneTools.arrowAnnotate.getConfiguration();
            if (measurementData.text === undefined) {
                config.getTextCallback(doneChangingTextCallback);
            }

            $(mouseEventData.element).on('CornerstoneToolsMouseMove', eventData, cornerstoneTools.arrowAnnotate.mouseMoveCallback);
            $(mouseEventData.element).on('CornerstoneToolsMouseDown', eventData, cornerstoneTools.arrowAnnotate.mouseDownCallback);
            $(mouseEventData.element).on('CornerstoneToolsMouseDownActivate', eventData, cornerstoneTools.arrowAnnotate.mouseDownActivateCallback);
            cornerstone.updateImage(mouseEventData.element);
        });
    }

    function createNewMeasurement(mouseEventData) {
        // create the measurement data for this tool with the end handle activated
        var measurementData = {
            visible: true,
            active: true,
            handles: {
                start: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: false
                },
                end: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: false
                }
            }
        };

        return measurementData;
    }
    ///////// END ACTIVE TOOL ///////

    function pointNearTool(element, data, coords) {
        var lineSegment = {
            start: cornerstone.pixelToCanvas(element, data.handles.start),
            end: cornerstone.pixelToCanvas(element, data.handles.end)
        };

        var distanceToPoint = cornerstoneMath.lineSegment.distanceToPoint(lineSegment, coords);
        if (distanceToPoint < 25) {
            return true;
        }

        if (data.textCoords) {
            var padding = 5;
            var fontSize = cornerstoneTools.textStyle.getFontSize();
            
            var rect = {
                left: data.textCoords.x,
                top: data.textCoords.y,
                width: data.textWidth + (padding * 2),
                height: fontSize + (padding * 2)
            };

            var distanceToTextRect = cornerstoneMath.rect.distanceToPoint(rect, coords);
            return (distanceToTextRect < 25);
        }
    }

    ///////// BEGIN IMAGE RENDERING ///////
    function onImageRendered(e, eventData) {
        // if we have no toolData for this element, return immediately as there is nothing to do
        var toolData = cornerstoneTools.getToolState(e.currentTarget, toolType);
        if (toolData === undefined) {
            return;
        }

        // we have tool data for this element - iterate over each one and draw it
        var context = eventData.canvasContext.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);

        var color;
        var lineWidth = cornerstoneTools.toolStyle.getToolWidth();
        var font = cornerstoneTools.textStyle.getFont();
        var config = cornerstoneTools.arrowAnnotate.getConfiguration();

        for (var i = 0; i < toolData.data.length; i++) {
            context.save();

            if (config && config.shadow) {
                context.shadowColor = config.shadowColor || '#000000';
                context.shadowOffsetX = config.shadowOffsetX || 1;
                context.shadowOffsetY = config.shadowOffsetY || 1;
            }

            var data = toolData.data[i];

            if (data.active) {
                color = cornerstoneTools.toolColors.getActiveColor();
            } else {
                color = cornerstoneTools.toolColors.getToolColor();
            }
            
            // Draw the arrow
            var handleStartCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.start);
            var handleEndCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.end);

            if (config.arrowFirst) {
                cornerstoneTools.drawArrow(context, handleEndCanvas, handleStartCanvas, color, lineWidth);
            } else {
                cornerstoneTools.drawArrow(context, handleStartCanvas, handleEndCanvas, color, lineWidth);
            }

            if (config.drawHandles) {
                cornerstoneTools.drawHandles(context, eventData, data.handles, color);
            } else if (config.drawHandlesOnHover && data.handles.start.active) {
                cornerstoneTools.drawHandles(context, eventData, [ data.handles.start ], color);
            } else if (config.drawHandlesOnHover && data.handles.end.active) {
                cornerstoneTools.drawHandles(context, eventData, [ data.handles.end ], color);
            }

            // Draw the text
            if (data.text && data.text !== '') {
                context.font = font;
                
                var distance = 13;

                // TODO: add 2 dimensional vector operations to cornerstoneMath
                var vector;
                
                var displacement = {
                    x: distance,
                    y: distance / 2
                };

                vector = {
                    x: handleEndCanvas.x - handleStartCanvas.x,
                    y: handleEndCanvas.y - handleStartCanvas.y
                };

                var textWidth = context.measureText(data.text).width;

                var textCoords;
                if (config.arrowFirst) {
                    // Fix text placement if arrow faces right
                    if (vector.x < 0) {
                        displacement.x = -displacement.x - textWidth;
                    }

                    textCoords = {
                        x: vector.x + handleStartCanvas.x + displacement.x,
                        y: vector.y + handleStartCanvas.y + displacement.y
                    };
                } else {
                    // Fix text placement if arrow faces right
                    if (vector.x > 0) {
                        displacement.x = -displacement.x - textWidth;
                    }

                    textCoords = {
                        x: -vector.x + handleEndCanvas.x + displacement.x,
                        y: -vector.y + handleEndCanvas.y + displacement.y
                    };
                }

                data.textCoords = textCoords;
                data.textWidth = textWidth;
                cornerstoneTools.drawTextBox(context, data.text, textCoords.x, textCoords.y, color);
            }

            context.restore();
        }
    }
    // ---- Touch tool ----

    ///////// BEGIN ACTIVE TOOL ///////
    function addNewMeasurementTouch(touchEventData) {
        var element = touchEventData.element;
        var measurementData = createNewMeasurement(touchEventData);
        
        function doneChangingTextCallback(text) {
            if (text !== null) {
                measurementData.text = text;
            } else {
                cornerstoneTools.removeToolState(element, toolType, measurementData);
            }

            measurementData.active = false;
            cornerstone.updateImage(element);
        }
        
        cornerstoneTools.addToolState(element, toolType, measurementData);
        $(element).off('CornerstoneToolsTouchStartActive', cornerstoneTools.arrowAnnotateTouch.touchDownActivateCallback);
        $(element).off('CornerstoneToolsTap', cornerstoneTools.arrowAnnotateTouch.tapCallback);
        cornerstone.updateImage(element);

        cornerstoneTools.moveNewHandleTouch(touchEventData, toolType, measurementData, measurementData.handles.end, function() {
            cornerstone.updateImage(element);

            if (cornerstoneTools.anyHandlesOutsideImage(touchEventData, measurementData.handles)) {
                // delete the measurement
                cornerstoneTools.removeToolState(element, toolType, measurementData);
            }

            var config = cornerstoneTools.arrowAnnotate.getConfiguration();
            if (measurementData.text === undefined) {
                config.getTextCallback(doneChangingTextCallback);
            }

            $(element).on('CornerstoneToolsTouchStartActive', cornerstoneTools.arrowAnnotateTouch.touchDownActivateCallback);
            $(element).on('CornerstoneToolsTap', cornerstoneTools.arrowAnnotateTouch.tapCallback);
        });
    }

    function doubleClickCallback(e, eventData) {
        var element = eventData.element;
        var data;

        function doneChangingTextCallback(data, updatedText, deleteTool) {
            if (deleteTool === true) {
                cornerstoneTools.removeToolState(element, toolType, data);
            } else {
                data.text = updatedText;
            }

            data.active = false;
            cornerstone.updateImage(element);
        }

        if (e.data && e.data.mouseButtonMask && !cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
            return false;
        }

        var config = cornerstoneTools.arrowAnnotate.getConfiguration();

        var coords = eventData.currentPoints.canvas;
        var toolData = cornerstoneTools.getToolState(element, toolType);

        // now check to see if there is a handle we can move
        if (!toolData) {
            return false;
        }

        for (var i = 0; i < toolData.data.length; i++) {
            data = toolData.data[i];
            if (pointNearTool(element, data, coords)) {
                data.active = true;
                cornerstone.updateImage(element);
                // Allow relabelling via a callback
                config.changeTextCallback(data, doneChangingTextCallback);
                
                e.stopImmediatePropagation();
                return false;
            }
        }

        return false; // false = causes jquery to preventDefault() and stopPropagation() this event
    }

    function pressCallback(e, eventData) {
        var element = eventData.element;
        var data;

        function doneChangingTextCallback(data, updatedText, deleteTool) {
            if (deleteTool === true) {
                cornerstoneTools.removeToolState(element, toolType, data);
            } else {
                data.text = updatedText;
            }

            data.active = false;
            cornerstone.updateImage(element);
            $(element).on('CornerstoneToolsTouchStart', cornerstoneTools.arrowAnnotateTouch.touchStartCallback);
            $(element).on('CornerstoneToolsTouchStartActive', cornerstoneTools.arrowAnnotateTouch.touchDownActivateCallback);
        }

        if (e.data && e.data.mouseButtonMask && !cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
            return false;
        }

        var config = cornerstoneTools.arrowAnnotate.getConfiguration();

        var coords = eventData.currentPoints.canvas;
        var toolData = cornerstoneTools.getToolState(element, toolType);

        // now check to see if there is a handle we can move
        if (!toolData) {
            return false;
        }

        for (var i = 0; i < toolData.data.length; i++) {
            data = toolData.data[i];
            if (pointNearTool(element, data, coords)) {
                data.active = true;
                cornerstone.updateImage(element);
                // Allow relabelling via a callback
                $(element).off('CornerstoneToolsTouchStart', cornerstoneTools.arrowAnnotateTouch.touchStartCallback);
                $(element).off('CornerstoneToolsTouchStartActive', cornerstoneTools.arrowAnnotateTouch.touchDownActivateCallback);
                config.changeTextCallback(data, doneChangingTextCallback);
                
                e.stopImmediatePropagation();
                return false;
            }
        }

        return false; // false = causes jquery to preventDefault() and stopPropagation() this event
    }

    cornerstoneTools.arrowAnnotate = cornerstoneTools.mouseButtonTool({
        addNewMeasurement: addNewMeasurement,
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType,
        mouseDoubleClickCallback: doubleClickCallback
    });

    cornerstoneTools.arrowAnnotate.setConfiguration(configuration);

    cornerstoneTools.arrowAnnotateTouch = cornerstoneTools.touchTool({
        addNewMeasurement: addNewMeasurementTouch,
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType,
        pressCallback: pressCallback
    });

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/imageTools/annotation.js

// Begin Source: src/imageTools/crosshairs.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    var toolType = 'crosshairs';

    function chooseLocation(e, eventData) {
        e.stopImmediatePropagation(); // Prevent CornerstoneToolsTouchStartActive from killing any press events
        
        // if we have no toolData for this element, return immediately as there is nothing to do
        var toolData = cornerstoneTools.getToolState(e.currentTarget, toolType);
        if (!toolData) {
            return;
        }

        // Get current element target information
        var sourceElement = e.currentTarget;
        var sourceEnabledElement = cornerstone.getEnabledElement(sourceElement);
        var sourceImageId = sourceEnabledElement.image.imageId;
        var sourceImagePlane = cornerstoneTools.metaData.get('imagePlane', sourceImageId);

        // Get currentPoints from mouse cursor on selected element
        var sourceImagePoint = eventData.currentPoints.image;

        // Transfer this to a patientPoint given imagePlane metadata
        var patientPoint = cornerstoneTools.imagePointToPatientPoint(sourceImagePoint, sourceImagePlane);

        // Get the enabled elements associated with this synchronization context
        var syncContext = toolData.data[0].synchronizationContext;
        var enabledElements = syncContext.getSourceElements();

        // Iterate over each synchronized element
        $.each(enabledElements, function(index, targetElement) {
            // don't do anything if the target is the same as the source
            if (targetElement === sourceElement) {
                return; // Same as 'continue' in a normal for loop
            }

            var minDistance = Number.MAX_VALUE;
            var newImageIdIndex = -1;

            var stackToolDataSource = cornerstoneTools.getToolState(targetElement, 'stack');
            if (stackToolDataSource === undefined) {
                return; // Same as 'continue' in a normal for loop
            }

            var stackData = stackToolDataSource.data[0];

            // Find within the element's stack the closest image plane to selected location
            $.each(stackData.imageIds, function(index, imageId) {
                var imagePlane = cornerstoneTools.metaData.get('imagePlane', imageId);
                var imagePosition = imagePlane.imagePositionPatient;
                var row = imagePlane.rowCosines.clone();
                var column = imagePlane.columnCosines.clone();
                var normal = column.clone().cross(row.clone());
                var distance = Math.abs(normal.clone().dot(imagePosition) - normal.clone().dot(patientPoint));
                //console.log(index + '=' + distance);
                if (distance < minDistance) {
                    minDistance = distance;
                    newImageIdIndex = index;
                }
            });

            if (newImageIdIndex === stackData.currentImageIdIndex) {
                return;
            }

            // Switch the loaded image to the required image
            if (newImageIdIndex !== -1 && stackData.imageIds[newImageIdIndex] !== undefined) {
                var startLoadingHandler = cornerstoneTools.loadHandlerManager.getStartLoadHandler();
                var endLoadingHandler = cornerstoneTools.loadHandlerManager.getEndLoadHandler();
                var errorLoadingHandler = cornerstoneTools.loadHandlerManager.getErrorLoadingHandler();

                if (startLoadingHandler) {
                    startLoadingHandler(targetElement);
                }

                var loader;
                if (stackData.preventCache === true) {
                    loader = cornerstone.loadImage(stackData.imageIds[newImageIdIndex]);
                } else {
                    loader = cornerstone.loadAndCacheImage(stackData.imageIds[newImageIdIndex]);
                }

                loader.then(function(image) {
                    var viewport = cornerstone.getViewport(targetElement);
                    stackData.currentImageIdIndex = newImageIdIndex;
                    cornerstone.displayImage(targetElement, image, viewport);
                    if (endLoadingHandler) {
                        endLoadingHandler(targetElement);
                    }
                }, function(error) {
                    var imageId = stackData.imageIds[newImageIdIndex];
                    if (errorLoadingHandler) {
                        errorLoadingHandler(targetElement, imageId, error);
                    }
                });
            }
        });
    }

    function mouseUpCallback(e, eventData) {
        $(eventData.element).off('CornerstoneToolsMouseDrag', mouseDragCallback);
        $(eventData.element).off('CornerstoneToolsMouseUp', mouseUpCallback);
    }

    function mouseDownCallback(e, eventData) {
        if (cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
            $(eventData.element).on('CornerstoneToolsMouseDrag', mouseDragCallback);
            $(eventData.element).on('CornerstoneToolsMouseUp', mouseUpCallback);
            chooseLocation(e, eventData);
            return false; // false = cases jquery to preventDefault() and stopPropagation() this event
        }
    }

    function mouseDragCallback(e, eventData) {
        chooseLocation(e, eventData);
        return false; // false = causes jquery to preventDefault() and stopPropagation() this event
    }

    function enable(element, mouseButtonMask, synchronizationContext) {
        var eventData = {
            mouseButtonMask: mouseButtonMask,
        };
        
        // Clear any currently existing toolData
        var toolData = cornerstoneTools.getToolState(element, toolType);
        toolData = [];

        cornerstoneTools.addToolState(element, toolType, {
            synchronizationContext: synchronizationContext,
        });

        $(element).off('CornerstoneToolsMouseDown', mouseDownCallback);

        $(element).on('CornerstoneToolsMouseDown', eventData, mouseDownCallback);
    }

    // disables the reference line tool for the given element
    function disable(element) {
        $(element).off('CornerstoneToolsMouseDown', mouseDownCallback);
    }

    // module/private exports
    cornerstoneTools.crosshairs = {
        activate: enable,
        deactivate: disable,
        enable: enable,
        disable: disable
    };

    function dragEndCallback(e, eventData) {
        $(eventData.element).off('CornerstoneToolsTouchDrag', dragCallback);
        $(eventData.element).off('CornerstoneToolsDragEnd', dragEndCallback);
    }

    function dragStartCallback(e, eventData) {
        $(eventData.element).on('CornerstoneToolsTouchDrag', dragCallback);
        $(eventData.element).on('CornerstoneToolsDragEnd', dragEndCallback);
        chooseLocation(e, eventData);
        return false;
    }

    function dragCallback(e, eventData) {
        chooseLocation(e, eventData);
        return false; // false = causes jquery to preventDefault() and stopPropagation() this event
    }

    function enableTouch(element, synchronizationContext) {
        // Clear any currently existing toolData
        var toolData = cornerstoneTools.getToolState(element, toolType);
        toolData = [];

        cornerstoneTools.addToolState(element, toolType, {
            synchronizationContext: synchronizationContext,
        });

        $(element).off('CornerstoneToolsTouchStart', dragStartCallback);

        $(element).on('CornerstoneToolsTouchStart', dragStartCallback);
    }

    // disables the reference line tool for the given element
    function disableTouch(element) {
        $(element).off('CornerstoneToolsTouchStart', dragStartCallback);
    }

    cornerstoneTools.crosshairsTouch = {
        activate: enableTouch,
        deactivate: disableTouch,
        enable: enableTouch,
        disable: disableTouch
    };

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/crosshairs.js

// Begin Source: src/imageTools/displayTool.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function displayTool(onImageRendered) {
        var configuration = {};

        var toolInterface = {
            disable: function(element) {$(element).off('CornerstoneImageRendered', onImageRendered);},
            enable: function(element) {
                $(element).off('CornerstoneImageRendered', onImageRendered);
                $(element).on('CornerstoneImageRendered', onImageRendered);
                cornerstone.updateImage(element);
            },
            getConfiguration: function() { return configuration; },
            setConfiguration: function(config) {configuration = config;}
        };

        return toolInterface;
    }

    // module exports
    cornerstoneTools.displayTool = displayTool;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/displayTool.js

// Begin Source: src/imageTools/dragProbe.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function defaultStrategy(eventData) {
        var enabledElement = cornerstone.getEnabledElement(eventData.element);

        cornerstone.updateImage(eventData.element);

        var context = enabledElement.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);

        var color = cornerstoneTools.toolColors.getActiveColor();
        var font = cornerstoneTools.textStyle.getFont();
        var fontHeight = cornerstoneTools.textStyle.getFontSize();
        var config = cornerstoneTools.dragProbe.getConfiguration();

        context.save();

        if (config && config.shadow) {
            context.shadowColor = config.shadowColor || '#000000';
            context.shadowOffsetX = config.shadowOffsetX || 1;
            context.shadowOffsetY = config.shadowOffsetY || 1;
        }

        var x = Math.round(eventData.currentPoints.image.x);
        var y = Math.round(eventData.currentPoints.image.y);

        var storedPixels;
        var text,
            str;

        if (x < 0 || y < 0 || x >= eventData.image.columns || y >= eventData.image.rows) {
            return;
        }

        if (eventData.image.color) {
            storedPixels = cornerstoneTools.getRGBPixels(eventData.element, x, y, 1, 1);
            text = '' + x + ', ' + y;
            str = 'R: ' + storedPixels[0] + ' G: ' + storedPixels[1] + ' B: ' + storedPixels[2] + ' A: ' + storedPixels[3];
        } else {
            storedPixels = cornerstone.getStoredPixels(eventData.element, x, y, 1, 1);
            var sp = storedPixels[0];
            var mo = sp * eventData.image.slope + eventData.image.intercept;
            var suv = cornerstoneTools.calculateSUV(eventData.image, sp);

            // Draw text
            text = '' + x + ', ' + y;
            str = 'SP: ' + sp + ' MO: ' + parseFloat(mo.toFixed(3));
            if (suv) {
                str += ' SUV: ' + parseFloat(suv.toFixed(3));
            }
        }

        // Draw text
        var coords = {
            // translate the x/y away from the cursor
            x: eventData.currentPoints.image.x + 3,
            y: eventData.currentPoints.image.y - 3
        };
        var textCoords = cornerstone.pixelToCanvas(eventData.element, coords);
        
        context.font = font;
        context.fillStyle = color;

        cornerstoneTools.drawTextBox(context, str, textCoords.x, textCoords.y + fontHeight + 5, color);
        cornerstoneTools.drawTextBox(context, text, textCoords.x, textCoords.y, color);
        context.restore();
    }

    function minimalStrategy(eventData) {
        var element = eventData.element;
        var enabledElement = cornerstone.getEnabledElement(element);
        var image = enabledElement.image;

        cornerstone.updateImage(element);

        var context = enabledElement.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);

        var color = cornerstoneTools.toolColors.getActiveColor();
        var font = cornerstoneTools.textStyle.getFont();
        var config = cornerstoneTools.dragProbe.getConfiguration();
        
        context.save();

        if (config && config.shadow) {
            context.shadowColor = config.shadowColor || '#000000';
            context.shadowOffsetX = config.shadowOffsetX || 1;
            context.shadowOffsetY = config.shadowOffsetY || 1;
        }

        var toolCoords;
        if (eventData.isTouchEvent === true) {
            toolCoords = cornerstone.pageToPixel(element, eventData.currentPoints.page.x,
                eventData.currentPoints.page.y - cornerstoneTools.textStyle.getFontSize() * 4);
        } else {
            toolCoords = eventData.currentPoints.image;
        }

        var storedPixels;
        var text;

        if (toolCoords.x < 0 || toolCoords.y < 0 ||
            toolCoords.x >= image.columns || toolCoords.y >= image.rows) {
            return;
        }
        
        if (image.color) {
            storedPixels = cornerstone.getStoredPixels(element, toolCoords.x, toolCoords.y, 3, 1);
            text = 'R: ' + storedPixels[0] + ' G: ' + storedPixels[1] + ' B: ' + storedPixels[2];
        } else {
            storedPixels = cornerstone.getStoredPixels(element, toolCoords.x, toolCoords.y, 1, 1);
            var huValue = storedPixels[0] * image.slope + image.intercept;
            text = parseFloat(huValue.toFixed(3));
        }

        // Prepare text
        var textCoords = cornerstone.pixelToCanvas(element, toolCoords);
        context.font = font;
        context.fillStyle = color;

        // Translate the x/y away from the cursor
        var translation;
        if (eventData.isTouchEvent === true) {
            var width = context.measureText(text).width;
            translation = {
                x: -width / 2 - 5,
                y: -cornerstoneTools.textStyle.getFontSize() * 1.5
            };

            var handleRadius = 6;

            context.beginPath();
            context.strokeStyle = color;
            context.arc(textCoords.x, textCoords.y, handleRadius, 0, 2 * Math.PI);
            context.stroke();
        } else {
            translation = {
                x: 4,
                y: -4
            };
        }

        cornerstoneTools.drawTextBox(context, text, textCoords.x + translation.x, textCoords.y + translation.y, color);
        context.restore();
    }

    function mouseUpCallback(e, eventData) {
        $(eventData.element).off('CornerstoneToolsMouseDrag', dragCallback);
        $(eventData.element).off('CornerstoneToolsMouseUp', mouseUpCallback);
        $(eventData.element).off('CornerstoneToolsMouseClick', mouseUpCallback);
        cornerstone.updateImage(eventData.element);
    }

    function mouseDownCallback(e, eventData) {
        if (cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
            $(eventData.element).on('CornerstoneToolsMouseDrag', dragCallback);
            $(eventData.element).on('CornerstoneToolsMouseUp', mouseUpCallback);
            $(eventData.element).on('CornerstoneToolsMouseClick', mouseUpCallback);
            cornerstoneTools.dragProbe.strategy(eventData);
            return false; // false = causes jquery to preventDefault() and stopPropagation() this event
        }
    }

    function dragCallback(e, eventData) {
        cornerstoneTools.dragProbe.strategy(eventData);
        return false; // false = causes jquery to preventDefault() and stopPropagation() this event
    }

    cornerstoneTools.dragProbe = cornerstoneTools.simpleMouseButtonTool(mouseDownCallback);
    
    cornerstoneTools.dragProbe.strategies = {
        default: defaultStrategy,
        minimal: minimalStrategy
    };
    cornerstoneTools.dragProbe.strategy = defaultStrategy;

    var options = {
        fireOnTouchStart: true
    };
    cornerstoneTools.dragProbeTouch = cornerstoneTools.touchDragTool(dragCallback, options);

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/dragProbe.js

// Begin Source: src/imageTools/ellipticalRoi.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    var toolType = 'ellipticalRoi';

    ///////// BEGIN ACTIVE TOOL ///////
    function createNewMeasurement(mouseEventData) {
        // create the measurement data for this tool with the end handle activated
        var measurementData = {
            visible: true,
            active: true,
            invalidated: true,
            handles: {
                start: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: false
                },
                end: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: true
                }
            }
        };

        return measurementData;
    }
    ///////// END ACTIVE TOOL ///////

    ///////// BEGIN IMAGE RENDERING ///////
    function pointInEllipse(ellipse, location) {
        var xRadius = ellipse.width / 2;
        var yRadius = ellipse.height / 2;

        if (xRadius <= 0.0 || yRadius <= 0.0) {
            return false;
        }

        var center = {
            x: ellipse.left + xRadius,
            y: ellipse.top + yRadius
        };

        /* This is a more general form of the circle equation
         *
         * X^2/a^2 + Y^2/b^2 <= 1
         */

        var normalized = {
            x: location.x - center.x,
            y: location.y - center.y
        };

        var inEllipse = ((normalized.x * normalized.x) / (xRadius * xRadius)) + ((normalized.y * normalized.y) / (yRadius * yRadius)) <= 1.0;
        return inEllipse;
    }

    function calculateMeanStdDev(sp, ellipse) {
        // TODO: Get a real statistics library here that supports large counts

        var sum = 0;
        var sumSquared = 0;
        var count = 0;
        var index = 0;

        for (var y = ellipse.top; y < ellipse.top + ellipse.height; y++) {
            for (var x = ellipse.left; x < ellipse.left + ellipse.width; x++) {
                if (pointInEllipse(ellipse, {
                    x: x,
                    y: y
                }) === true) {
                    sum += sp[index];
                    sumSquared += sp[index] * sp[index];
                    count++;
                }

                index++;
            }
        }

        if (count === 0) {
            return {
                count: count,
                mean: 0.0,
                variance: 0.0,
                stdDev: 0.0
            };
        }

        var mean = sum / count;
        var variance = sumSquared / count - mean * mean;

        return {
            count: count,
            mean: mean,
            variance: variance,
            stdDev: Math.sqrt(variance)
        };
    }

    function pointNearEllipse(element, data, coords, distance) {
        var startCanvas = cornerstone.pixelToCanvas(element, data.handles.start);
        var endCanvas = cornerstone.pixelToCanvas(element, data.handles.end);

        var minorEllipse = {
            left: Math.min(startCanvas.x, endCanvas.x) + distance / 2,
            top: Math.min(startCanvas.y, endCanvas.y) + distance / 2 ,
            width: Math.abs(startCanvas.x - endCanvas.x) - distance,
            height: Math.abs(startCanvas.y - endCanvas.y) - distance
        };
        
        var majorEllipse = {
            left: Math.min(startCanvas.x, endCanvas.x) - distance / 2,
            top: Math.min(startCanvas.y, endCanvas.y) - distance / 2 ,
            width: Math.abs(startCanvas.x - endCanvas.x) + distance,
            height: Math.abs(startCanvas.y - endCanvas.y) + distance
        };

        var pointInMinorEllipse = pointInEllipse(minorEllipse, coords);
        var pointInMajorEllipse = pointInEllipse(majorEllipse, coords);

        if (pointInMajorEllipse && !pointInMinorEllipse) {
            return true;
        }

        return false;
    }

    function pointNearTool(element, data, coords) {
        return pointNearEllipse(element, data, coords, 15);
    }

    function pointNearToolTouch(element, data, coords) {
        return pointNearEllipse(element, data, coords, 25);
    }

    function onImageRendered(e, eventData) {

        // if we have no toolData for this element, return immediately as there is nothing to do
        var toolData = cornerstoneTools.getToolState(e.currentTarget, toolType);
        if (toolData === undefined) {
            return;
        }

        // we have tool data for this element - iterate over each one and draw it
        var context = eventData.canvasContext.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);

        //activation color 
        var color;
        var lineWidth = cornerstoneTools.toolStyle.getToolWidth();
        var font = cornerstoneTools.textStyle.getFont();
        var fontHeight = cornerstoneTools.textStyle.getFontSize();
        var config = cornerstoneTools.ellipticalRoi.getConfiguration();

        for (var i = 0; i < toolData.data.length; i++) {
            context.save();
            
            if (config && config.shadow) {
                context.shadowColor = config.shadowColor || '#000000';
                context.shadowOffsetX = config.shadowOffsetX || 1;
                context.shadowOffsetY = config.shadowOffsetY || 1;
            }

            var data = toolData.data[i];

            //differentiate the color of activation tool
            if (data.active) {
                color = cornerstoneTools.toolColors.getActiveColor();
            } else {
                color = cornerstoneTools.toolColors.getToolColor();
            }

            // draw the ellipse
            var handleStartCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.start);
            var handleEndCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.end);

            var widthCanvas = Math.abs(handleStartCanvas.x - handleEndCanvas.x);
            var heightCanvas = Math.abs(handleStartCanvas.y - handleEndCanvas.y);
            var leftCanvas = Math.min(handleStartCanvas.x, handleEndCanvas.x);
            var topCanvas = Math.min(handleStartCanvas.y, handleEndCanvas.y);
            var centerX = (handleStartCanvas.x + handleEndCanvas.x) / 2;
            var centerY = (handleStartCanvas.y + handleEndCanvas.y) / 2;

            context.beginPath();
            context.strokeStyle = color;
            context.lineWidth = lineWidth;
            cornerstoneTools.drawEllipse(context, leftCanvas, topCanvas, widthCanvas, heightCanvas);
            context.closePath();

            // draw the handles
            cornerstoneTools.drawHandles(context, eventData, data.handles, color);
            
            context.font = font;

            var textX,
                textY,
                area,
                meanStdDev;

            if (!data.invalidated) {
                textX = data.textX;
                textY = data.textY;
                meanStdDev = data.meanStdDev;
                area = data.area;
            } else {
                // TODO: calculate this in web worker for large pixel counts...
                var width = Math.abs(data.handles.start.x - data.handles.end.x);
                var height = Math.abs(data.handles.start.y - data.handles.end.y);
                var left = Math.min(data.handles.start.x, data.handles.end.x);
                var top = Math.min(data.handles.start.y, data.handles.end.y);

                var pixels = cornerstone.getPixels(eventData.element, left, top, width, height);

                var ellipse = {
                    left: left,
                    top: top,
                    width: width,
                    height: height
                };

                // Calculate the mean, stddev, and area
                meanStdDev = calculateMeanStdDev(pixels, ellipse);
                area = Math.PI * (width * eventData.image.columnPixelSpacing / 2) * (height * eventData.image.rowPixelSpacing / 2);

                data.invalidated = false;
                if (!isNaN(area)) {
                    data.area = area;
                }

                if (!isNaN(meanStdDev.mean) && !isNaN(meanStdDev.stdDev)) {
                    data.meanStdDev = meanStdDev;
                }
            }

            // Draw text

            var areaText,
                areaTextWidth = 0;
            if (area !== undefined) {
                areaText = 'Area: ' + area.toFixed(2) + ' mm' + String.fromCharCode(178);
                areaTextWidth = context.measureText(areaText).width;
            }

            var meanText = 'Mean: ' + meanStdDev.mean.toFixed(2);
            var meanTextWidth = context.measureText(meanText).width;

            var stdDevText = 'StdDev: ' + meanStdDev.stdDev.toFixed(2);
            var stdDevTextWidth = context.measureText(stdDevText).width;

            var longestTextWidth = Math.max(meanTextWidth, areaTextWidth, stdDevTextWidth);

            textX = centerX < (eventData.image.columns / 2) ? centerX + (widthCanvas / 2) + longestTextWidth: centerX - (widthCanvas / 2) - longestTextWidth - 15;
            textY = centerY < (eventData.image.rows / 2) ? centerY + (heightCanvas / 2): centerY - (heightCanvas / 2);

            context.fillStyle = color;
            if (meanStdDev) {
                cornerstoneTools.drawTextBox(context, meanText, textX, textY - fontHeight - 5, color);
                cornerstoneTools.drawTextBox(context, stdDevText, textX, textY, color);
            }
            
            // Char code 178 is a superscript 2 for mm^2
            if (area !== undefined && !isNaN(area)) {
                cornerstoneTools.drawTextBox(context, areaText, textX, textY + fontHeight + 5, color);
            }

            context.restore();
        }
    }
    ///////// END IMAGE RENDERING ///////

    // module exports
    cornerstoneTools.ellipticalRoi = cornerstoneTools.mouseButtonTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType
    });
    cornerstoneTools.ellipticalRoiTouch = cornerstoneTools.touchTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearToolTouch,
        toolType: toolType
    });

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/imageTools/ellipticalRoi.js

// Begin Source: src/imageTools/freehand.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    var toolType = 'freehand';
    var configuration = {
        mouseLocation: {
            handles: {
                start: {
                    highlight: true,
                    active: true,
                }
            }
        },
        freehand: false,
        modifying: false,
        currentHandle: 0,
        currentTool: -1
    };

    ///////// BEGIN ACTIVE TOOL ///////
    function addPoint(eventData) {
        var toolData = cornerstoneTools.getToolState(eventData.element, toolType);
        if (toolData === undefined) {
            return;
        }

        var config = cornerstoneTools.freehand.getConfiguration();

        // Get the toolData from the last-drawn drawing
        // (this should change when modification is added)
        var data = toolData.data[config.currentTool];

        var handleData = {
            x: eventData.currentPoints.image.x,
            y: eventData.currentPoints.image.y,
            highlight: true,
            active: true,
            lines: []
        };

        // If this is not the first handle
        if (data.handles.length){
            // Add the line from the current handle to the new handle
            data.handles[config.currentHandle - 1].lines.push(eventData.currentPoints.image);
        }

        // Add the new handle
        data.handles.push(handleData);

        // Increment the current handle value
        config.currentHandle += 1;

        // Reset freehand value
        config.freehand = false;

        // Force onImageRendered to fire
        cornerstone.updateImage(eventData.element);
    }

    function pointNearHandle(eventData, toolIndex) {
        var toolData = cornerstoneTools.getToolState(eventData.element, toolType);
        if (toolData === undefined) {
            return;
        }

        var data = toolData.data[toolIndex];
        if (data.handles === undefined) {
            return;
        }

        var mousePoint = eventData.currentPoints.canvas;
        for (var i = 0; i < data.handles.length; i++) {
            var handleCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles[i]);
            if (cornerstoneMath.point.distance(handleCanvas, mousePoint) < 5) {
                return i;
            }
        }

        return;
    }

    function pointNearHandleAllTools(eventData) {
        var toolData = cornerstoneTools.getToolState(eventData.element, toolType);
        if (!toolData) {
            return;
        }

        var handleNearby;
        for (var toolIndex = 0; toolIndex < toolData.data.length; toolIndex++) {
            handleNearby = pointNearHandle(eventData, toolIndex);
            if (handleNearby !== undefined) {
                return {
                    handleNearby: handleNearby,
                    toolIndex: toolIndex
                };
            }
        }
    }

    // --- Drawing loop ---
    // On first click, add point
    // After first click, on mouse move, record location
    // If mouse comes close to previous point, snap to it
    // On next click, add another point -- continuously
    // On each click, if it intersects with a current point, end drawing loop

    function mouseUpCallback(e, eventData) {
        $(eventData.element).off('CornerstoneToolsMouseUp', mouseUpCallback);

        // Check if drawing is finished
        var toolData = cornerstoneTools.getToolState(eventData.element, toolType);
        if (toolData === undefined) {
            return;
        }

        var config = cornerstoneTools.freehand.getConfiguration();

        if (!eventData.event.shiftKey) {
            config.freehand = false;
        }

        cornerstone.updateImage(eventData.element);
    }

    function mouseMoveCallback(e, eventData) {
        var toolData = cornerstoneTools.getToolState(eventData.element, toolType);
        if (!toolData) {
            return;
        }

        var config = cornerstoneTools.freehand.getConfiguration();

        var data = toolData.data[config.currentTool];

        // Set the mouseLocation handle
        var x = Math.max(eventData.currentPoints.image.x, 0);
        x = Math.min(x, eventData.image.width);
        config.mouseLocation.handles.start.x = x;

        var y = Math.max(eventData.currentPoints.image.y, 0);
        y = Math.min(y, eventData.image.height);
        config.mouseLocation.handles.start.y = y;

        var currentHandle = config.currentHandle;

        if (config.modifying) {
            // Move the handle
            data.active = true;
            data.highlight = true;
            data.handles[currentHandle].x = config.mouseLocation.handles.start.x;
            data.handles[currentHandle].y = config.mouseLocation.handles.start.y;
            if (currentHandle) {
                var lastLineIndex = data.handles[currentHandle - 1].lines.length - 1;
                var lastLine = data.handles[currentHandle - 1].lines[lastLineIndex];
                lastLine.x = config.mouseLocation.handles.start.x;
                lastLine.y = config.mouseLocation.handles.start.y;
            }
        }

        if (config.freehand) {
            data.handles[currentHandle - 1].lines.push(eventData.currentPoints.image);
        } else {
            // No snapping in freehand mode
            var handleNearby = pointNearHandle(eventData, config.currentTool);

            // If there is a handle nearby to snap to
            // (and it's not the actual mouse handle)
            if (handleNearby !== undefined && handleNearby < (data.handles.length - 1)) {
                config.mouseLocation.handles.start.x = data.handles[handleNearby].x;
                config.mouseLocation.handles.start.y = data.handles[handleNearby].y;
            }
        }

        // Force onImageRendered
        cornerstone.updateImage(eventData.element);
    }

    function startDrawing(eventData) {
        $(eventData.element).on('CornerstoneToolsMouseMove', mouseMoveCallback);
        $(eventData.element).on('CornerstoneToolsMouseUp', mouseUpCallback);

        var measurementData = {
            visible: true,
            active: true,
            handles: []
        };

        var config = cornerstoneTools.freehand.getConfiguration();
        config.mouseLocation.handles.start.x = eventData.currentPoints.image.x;
        config.mouseLocation.handles.start.y = eventData.currentPoints.image.y;

        cornerstoneTools.addToolState(eventData.element, toolType, measurementData);

        var toolData = cornerstoneTools.getToolState(eventData.element, toolType);
        config.currentTool = toolData.data.length - 1;
    }

    function endDrawing(eventData, handleNearby) {
        var toolData = cornerstoneTools.getToolState(eventData.element, toolType);
        if (!toolData) {
            return;
        }

        var config = cornerstoneTools.freehand.getConfiguration();

        var data = toolData.data[config.currentTool];

        data.active = false;
        data.highlight = false;

        // Connect the end of the drawing to the handle nearest to the click
        if (handleNearby !== undefined){
            data.handles[config.currentHandle - 1].lines.push(data.handles[handleNearby]);
        }

        if (config.modifying) {
            config.modifying = false;
        }

        // Reset the current handle
        config.currentHandle = 0;
        config.currentTool = -1;

        $(eventData.element).off('CornerstoneToolsMouseMove', mouseMoveCallback);

        cornerstone.updateImage(eventData.element);
    }

    function mouseDownCallback(e, eventData) {
        if (cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
            var toolData = cornerstoneTools.getToolState(eventData.element, toolType);

            var handleNearby, toolIndex;

            var config = cornerstoneTools.freehand.getConfiguration();
            var currentTool = config.currentTool;

            if (config.modifying) {
                endDrawing(eventData);
                return;
            }

            if (currentTool < 0) {
                var nearby = pointNearHandleAllTools(eventData);
                if (nearby) {
                    handleNearby = nearby.handleNearby;
                    toolIndex = nearby.toolIndex;
                    // This means the user is trying to modify a point
                    if (handleNearby !== undefined) {
                        $(eventData.element).on('CornerstoneToolsMouseMove', mouseMoveCallback);
                        $(eventData.element).on('CornerstoneToolsMouseUp', mouseUpCallback);
                        config.modifying = true;
                        config.currentHandle = handleNearby;
                        config.currentTool = toolIndex;
                    }
                } else {
                    startDrawing(eventData);
                    addPoint(eventData);
                }
            } else if (currentTool >= 0 && toolData.data[currentTool].active) {
                handleNearby = pointNearHandle(eventData, currentTool);
                if (handleNearby !== undefined) {
                    endDrawing(eventData, handleNearby);
                } else if (eventData.event.shiftKey) {
                    config.freehand = true;
                } else {
                    addPoint(eventData);
                }
            }

            return false; // false = causes jquery to preventDefault() and stopPropagation() this event
        }
    }

    ///////// END ACTIVE TOOL ///////

    ///////// BEGIN IMAGE RENDERING ///////
    function onImageRendered(e, eventData) {
        // if we have no toolData for this element, return immediately as there is nothing to do
        var toolData = cornerstoneTools.getToolState(e.currentTarget, toolType);
        if (toolData === undefined) {
            return;
        }

        var config = cornerstoneTools.freehand.getConfiguration();

        // we have tool data for this element - iterate over each one and draw it
        var context = eventData.canvasContext.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);

        var color;
        var lineWidth = cornerstoneTools.toolStyle.getToolWidth();
        var fillColor = cornerstoneTools.toolColors.getFillColor();

        for (var i = 0; i < toolData.data.length; i++) {
            context.save();

            var data = toolData.data[i];

            if (data.active) {
                color = cornerstoneTools.toolColors.getActiveColor();
                fillColor = cornerstoneTools.toolColors.getFillColor();
            } else {
                color = cornerstoneTools.toolColors.getToolColor();
                fillColor = cornerstoneTools.toolColors.getToolColor();
            }

            var handleStart;

            if (data.handles.length) {
                for (var j = 0; j < data.handles.length; j++) {
                    // Draw a line between handle j and j+1
                    handleStart = data.handles[j];
                    var handleStartCanvas = cornerstone.pixelToCanvas(eventData.element, handleStart);

                    context.beginPath();
                    context.strokeStyle = color;
                    context.lineWidth = lineWidth;
                    context.moveTo(handleStartCanvas.x, handleStartCanvas.y);

                    for (var k = 0; k < data.handles[j].lines.length; k++) {
                        var lineCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles[j].lines[k]);
                        context.lineTo(lineCanvas.x, lineCanvas.y);
                        context.stroke();
                    }

                    var mouseLocationCanvas = cornerstone.pixelToCanvas(eventData.element, config.mouseLocation.handles.start);
                    if (j === (data.handles.length - 1)) {
                        if (data.active && !config.freehand && !config.modifying) {
                            // If it's still being actively drawn, keep the last line to 
                            // the mouse location
                            context.lineTo(mouseLocationCanvas.x, mouseLocationCanvas.y);
                            context.stroke();
                        }
                    }
                }
            }
            
            // If the tool is active, draw a handle at the cursor location
            if (data.active){
                cornerstoneTools.drawHandles(context, eventData, config.mouseLocation.handles, color, fillColor);
            }
            // draw the handles
            cornerstoneTools.drawHandles(context, eventData, data.handles, color, fillColor);

            context.restore();
        }
    }
    ///////// END IMAGE RENDERING ///////
    function enable(element) {
        $(element).off('CornerstoneToolsMouseDown', mouseDownCallback);
        $(element).off('CornerstoneToolsMouseUp', mouseUpCallback);
        $(element).off('CornerstoneToolsMouseMove', mouseMoveCallback);
        $(element).off('CornerstoneImageRendered', onImageRendered);

        $(element).on('CornerstoneImageRendered', onImageRendered);
        cornerstone.updateImage(element);
    }

    // disables the reference line tool for the given element
    function disable(element) {
        $(element).off('CornerstoneToolsMouseDown', mouseDownCallback);
        $(element).off('CornerstoneToolsMouseUp', mouseUpCallback);
        $(element).off('CornerstoneToolsMouseMove', mouseMoveCallback);
        $(element).off('CornerstoneImageRendered', onImageRendered);
        cornerstone.updateImage(element);
    }

    // visible and interactive
    function activate(element, mouseButtonMask) {
        var eventData = {
            mouseButtonMask: mouseButtonMask,
        };

        $(element).off('CornerstoneToolsMouseDown', eventData, mouseDownCallback);
        $(element).off('CornerstoneToolsMouseUp', mouseUpCallback);
        $(element).off('CornerstoneToolsMouseMove', mouseMoveCallback);
        $(element).off('CornerstoneImageRendered', onImageRendered);

        $(element).on('CornerstoneImageRendered', onImageRendered);
        $(element).on('CornerstoneToolsMouseDown', eventData, mouseDownCallback);

        cornerstone.updateImage(element);
    }

    // visible, but not interactive
    function deactivate(element) {
        $(element).off('CornerstoneToolsMouseDown', mouseDownCallback);
        $(element).off('CornerstoneToolsMouseUp', mouseUpCallback);
        $(element).off('CornerstoneToolsMouseMove', mouseMoveCallback);
        $(element).off('CornerstoneImageRendered', onImageRendered);

        $(element).on('CornerstoneImageRendered', onImageRendered);

        cornerstone.updateImage(element);
    }

    function getConfiguration() {
        return configuration;
    }

    function setConfiguration(config) {
        configuration = config;
    }

    // module/private exports
    cornerstoneTools.freehand = {
        enable: enable,
        disable: disable,
        activate: activate,
        deactivate: deactivate,
        getConfiguration: getConfiguration,
        setConfiguration: setConfiguration
    };

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/imageTools/freehand.js

// Begin Source: src/imageTools/highlight.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    var toolType = 'highlight';

    ///////// BEGIN ACTIVE TOOL ///////
    function createNewMeasurement(mouseEventData) {
        //if already a highlight measurement, creating a new one will be useless
        var existingToolData = cornerstoneTools.getToolState(mouseEventData.event.currentTarget, toolType);
        if (existingToolData && existingToolData.data && existingToolData.data.length > 0) {
            return;
        }
    
        // create the measurement data for this tool with the end handle activated
        var measurementData = {
            visible: true,
            active: true,
            handles: {
                start: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: false
                },
                end: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: true
                }
            }
        };

        return measurementData;
    }
    ///////// END ACTIVE TOOL ///////

    function pointInsideRect(element, data, coords) {
        var startCanvas = cornerstone.pixelToCanvas(element, data.handles.start);
        var endCanvas = cornerstone.pixelToCanvas(element, data.handles.end);

        var rect = {
            left: Math.min(startCanvas.x, endCanvas.x),
            top: Math.min(startCanvas.y, endCanvas.y),
            width: Math.abs(startCanvas.x - endCanvas.x),
            height: Math.abs(startCanvas.y - endCanvas.y)
        };

        var insideBox = false;
        if ((coords.x >= rect.left && coords.x <= (rect.left + rect.width)) && coords.y >= rect.top && coords.y <= (rect.top + rect.height)) {
            insideBox = true;
        }

        return insideBox;
    }

    function pointNearTool(element, data, coords) {
        var startCanvas = cornerstone.pixelToCanvas(element, data.handles.start);
        var endCanvas = cornerstone.pixelToCanvas(element, data.handles.end);

        var rect = {
            left: Math.min(startCanvas.x, endCanvas.x),
            top: Math.min(startCanvas.y, endCanvas.y),
            width: Math.abs(startCanvas.x - endCanvas.x),
            height: Math.abs(startCanvas.y - endCanvas.y)
        };

        var distanceToPoint = cornerstoneMath.rect.distanceToPoint(rect, coords);
        return (distanceToPoint < 5);
    }

    ///////// BEGIN IMAGE RENDERING ///////

    function onImageRendered(e, eventData) {

        // if we have no toolData for this element, return immediately as there is nothing to do
        var toolData = cornerstoneTools.getToolState(e.currentTarget, toolType);
        if (toolData === undefined) {
            return;
        }

        // we have tool data for this elemen
        var context = eventData.canvasContext.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);

        var color;
        var lineWidth = cornerstoneTools.toolStyle.getToolWidth();

        context.save();

        var data = toolData.data[0];

        if (!data) {
            return;
        }

        if (data.active) {
            color = cornerstoneTools.toolColors.getActiveColor();
        } else {
            color = cornerstoneTools.toolColors.getToolColor();
        }

        var handleStartCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.start);
        var handleEndCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.end);

        var rect = {
            left: Math.min(handleStartCanvas.x, handleEndCanvas.x),
            top: Math.min(handleStartCanvas.y, handleEndCanvas.y),
            width: Math.abs(handleStartCanvas.x - handleEndCanvas.x),
            height: Math.abs(handleStartCanvas.y - handleEndCanvas.y)
        };

        // draw dark fill outside the rectangle
        context.beginPath();
        context.strokeStyle = 'transparent';

        context.rect(0, 0, context.canvas.clientWidth, context.canvas.clientHeight);

        context.rect(rect.width + rect.left, rect.top, -rect.width, rect.height);
        context.stroke();
        context.fillStyle = 'rgba(0,0,0,0.7)';
        context.fill();
        context.closePath();

        // draw dashed stroke rectangle
        context.beginPath();
        context.strokeStyle = color;
        context.lineWidth = lineWidth;
        context.setLineDash([ 4 ]);
        context.strokeRect(rect.left, rect.top, rect.width, rect.height);

        // Strange fix, but restore doesn't seem to reset the line dashes?
        context.setLineDash([]);
        
        // draw the handles last, so they will be on top of the overlay
        cornerstoneTools.drawHandles(context, eventData, data.handles, color);
        context.restore();
    }
    ///////// END IMAGE RENDERING ///////

    // module exports
    var preventHandleOutsideImage = true;

    cornerstoneTools.highlight = cornerstoneTools.mouseButtonRectangleTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        pointInsideRect: pointInsideRect,
        toolType: toolType
    }, preventHandleOutsideImage);
    
    cornerstoneTools.highlightTouch = cornerstoneTools.touchTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        pointInsideRect: pointInsideRect,
        toolType: toolType
    }, preventHandleOutsideImage);

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/imageTools/highlight.js

// Begin Source: src/imageTools/keyboardTool.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function keyboardTool(keyDownCallback) {
        var configuration = {};

        var toolInterface = {
            activate: function(element) {
                $(element).off('CornerstoneToolsKeyDown', keyDownCallback);
                $(element).on('CornerstoneToolsKeyDown', keyDownCallback);
            },
            disable: function(element) {$(element).off('CornerstoneToolsKeyDown', keyDownCallback);},
            enable: function(element) {$(element).off('CornerstoneToolsKeyDown', keyDownCallback);},
            deactivate: function(element) {$(element).off('CornerstoneToolsKeyDown', keyDownCallback);},
            getConfiguration: function() { return configuration; },
            setConfiguration: function(config) {configuration = config;}
        };
        return toolInterface;
    }

    // module exports
    cornerstoneTools.keyboardTool = keyboardTool;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/keyboardTool.js

// Begin Source: src/imageTools/lengthTool.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    var toolType = 'length';

    ///////// BEGIN ACTIVE TOOL ///////
    function createNewMeasurement(mouseEventData) {
        // create the measurement data for this tool with the end handle activated
        var measurementData = {
            visible: true,
            active: true,
            handles: {
                start: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: false
                },
                end: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: true
                }
            }
        };

        return measurementData;
    }
    ///////// END ACTIVE TOOL ///////

    function pointNearTool(element, data, coords) {
        var lineSegment = {
            start: cornerstone.pixelToCanvas(element, data.handles.start),
            end: cornerstone.pixelToCanvas(element, data.handles.end)
        };
        var distanceToPoint = cornerstoneMath.lineSegment.distanceToPoint(lineSegment, coords);
        return (distanceToPoint < 25);
    }

    ///////// BEGIN IMAGE RENDERING ///////
    function onImageRendered(e, eventData) {

        // if we have no toolData for this element, return immediately as there is nothing to do
        var toolData = cornerstoneTools.getToolState(e.currentTarget, toolType);
        if (!toolData) {
            return;
        }

        // we have tool data for this element - iterate over each one and draw it
        var context = eventData.canvasContext.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);

        var lineWidth = cornerstoneTools.toolStyle.getToolWidth();
        var config = cornerstoneTools.length.getConfiguration();

        for (var i = 0; i < toolData.data.length; i++) {
            context.save();

            // configurable shadow
            if (config && config.shadow) {
                context.shadowColor = config.shadowColor || '#000000';
                context.shadowOffsetX = config.shadowOffsetX || 1;
                context.shadowOffsetY = config.shadowOffsetY || 1;
            }

            var data = toolData.data[i];
            var color = cornerstoneTools.toolColors.getColorIfActive(data.active);

            // Get the handle positions in canvas coordinates
            var handleStartCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.start);
            var handleEndCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.end);

            // Draw the measurement line
            context.beginPath();
            context.strokeStyle = color;
            context.lineWidth = lineWidth;
            context.moveTo(handleStartCanvas.x, handleStartCanvas.y);
            context.lineTo(handleEndCanvas.x, handleEndCanvas.y);
            context.stroke();

            // Draw the handles
            cornerstoneTools.drawHandles(context, eventData, data.handles, color);

            // Draw the text
            context.fillStyle = color;

            // Set rowPixelSpacing and columnPixelSpacing to 1 if they are undefined (or zero)
            var dx = (data.handles.end.x - data.handles.start.x) * (eventData.image.columnPixelSpacing || 1);
            var dy = (data.handles.end.y - data.handles.start.y) * (eventData.image.rowPixelSpacing || 1);

            // Calculate the length, and create the text variable with the millimeters or pixels suffix            
            var length = Math.sqrt(dx * dx + dy * dy);

            // Set the length text suffix depending on whether or not pixelSpacing is available
            var suffix = ' mm';
            if (!eventData.image.rowPixelSpacing || !eventData.image.columnPixelSpacing) {
                suffix = ' pixels';
            }

            // Store the length measurement text
            var text = '' + length.toFixed(2) + suffix;

            // Place the length measurement text next to the right-most handle
            var fontSize = cornerstoneTools.textStyle.getFontSize();
            var textCoords = {
                x: Math.max(handleStartCanvas.x, handleEndCanvas.x),
            };

            // Depending on which handle has the largest x-value, 
            // set the y-value for the text box
            if (textCoords.x === handleStartCanvas.x) {
                textCoords.y = handleStartCanvas.y;
            } else {
                textCoords.y = handleEndCanvas.y;
            }

            // Move the textbox slightly to the right and upwards
            // so that it sits beside the length tool handle
            textCoords.x += 10;
            textCoords.y -= fontSize / 2 + 7;

            // Draw the textbox
            cornerstoneTools.drawTextBox(context, text, textCoords.x, textCoords.y, color);

            context.restore();
        }
    }
    ///////// END IMAGE RENDERING ///////

    // module exports
    cornerstoneTools.length = cornerstoneTools.mouseButtonTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType
    });

    cornerstoneTools.lengthTouch = cornerstoneTools.touchTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType
    });

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/imageTools/lengthTool.js

// Begin Source: src/imageTools/magnify.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    var configuration = {
        magnifySize: 100,
        magnificationLevel: 2,
    };

    var browserName;

    /** Remove the magnifying glass when the mouse event ends */
    function mouseUpCallback(e, eventData) {
        $(eventData.element).off('CornerstoneToolsMouseDrag', dragCallback);
        $(eventData.element).off('CornerstoneToolsMouseUp', mouseUpCallback);
        hideTool(eventData);
    }

    function hideTool(eventData) {
        $(eventData.element).find('.magnifyTool').hide();
        // Re-enable the mouse cursor
        document.body.style.cursor = 'default';
    }

    /** Draw the magnifying glass on mouseDown, and begin tracking mouse movements */
    function mouseDownCallback(e, eventData) {
        if (cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
            $(eventData.element).on('CornerstoneToolsMouseDrag', eventData, dragCallback);
            $(eventData.element).on('CornerstoneToolsMouseUp', eventData, mouseUpCallback);
            drawMagnificationTool(eventData);
            return false; // false = causes jquery to preventDefault() and stopPropagation() this event
        }
    }

    function dragEndCallback(e, eventData) {
        $(eventData.element).off('CornerstoneToolsDragEnd', dragEndCallback);
        $(eventData.element).off('CornerstoneToolsTouchEnd', dragEndCallback);
        hideTool(eventData);
    }

    /** Drag callback is triggered by both the touch and mouse magnify tools */
    function dragCallback(e, eventData) {
        drawMagnificationTool(eventData);
        if (eventData.isTouchEvent === true) {
            $(eventData.element).on('CornerstoneToolsDragEnd', dragEndCallback);
            $(eventData.element).on('CornerstoneToolsTouchEnd', dragEndCallback);
        }

        return false; // false = causes jquery to preventDefault() and stopPropagation() this event
    }

    /** Draws the magnifying glass */
    function drawMagnificationTool(eventData) {
        var magnify = $(eventData.element).find('.magnifyTool').get(0);

        if (!magnify) {
            createMagnificationCanvas(eventData.element);
        }

        var config = cornerstoneTools.magnify.getConfiguration();

        var magnifySize = config.magnifySize;
        var magnificationLevel = config.magnificationLevel;

        // The 'not' magnifyTool class here is necessary because cornerstone places
        // no classes of it's own on the canvas we want to select
        var canvas = $(eventData.element).find('canvas').not('.magnifyTool').get(0);
        var context = canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);

        var zoomCtx = magnify.getContext('2d');
        zoomCtx.setTransform(1, 0, 0, 1, 0, 0);

        var getSize = magnifySize / magnificationLevel;

        // Calculate the on-canvas location of the mouse pointer / touch
        var canvasLocation = cornerstone.pixelToCanvas(eventData.element, eventData.currentPoints.image);

        if (eventData.isTouchEvent === true) {
            canvasLocation.y -= 1.25 * getSize;
        }

        canvasLocation.x = Math.max(canvasLocation.x, 0);
        canvasLocation.x = Math.min(canvasLocation.x, canvas.width);

        canvasLocation.y = Math.max(canvasLocation.y, 0);
        canvasLocation.y = Math.min(canvasLocation.y, canvas.height);

        // Clear the rectangle
        zoomCtx.clearRect(0, 0, magnifySize, magnifySize);
        zoomCtx.fillStyle = 'transparent';

        // Fill it with the pixels that the mouse is clicking on
        zoomCtx.fillRect(0, 0, magnifySize, magnifySize);
        
        var copyFrom = {
            x: canvasLocation.x - 0.5 * getSize,
            y: canvasLocation.y - 0.5 * getSize
        };

        if (browserName === 'Safari') {
            // Safari breaks when trying to copy pixels with negative indices
            // This prevents proper Magnify usage
            copyFrom.x = Math.max(copyFrom.x, 0);
            copyFrom.y = Math.max(copyFrom.y, 0);
        }

        copyFrom.x = Math.min(copyFrom.x, canvas.width);
        copyFrom.y = Math.min(copyFrom.y, canvas.height);

        var scaledMagnify = {
            x: (canvas.width - copyFrom.x) * magnificationLevel,
            y: (canvas.height - copyFrom.y) * magnificationLevel
        };
        zoomCtx.drawImage(canvas, copyFrom.x, copyFrom.y, canvas.width - copyFrom.x, canvas.height - copyFrom.y, 0, 0, scaledMagnify.x, scaledMagnify.y);

        // Place the magnification tool at the same location as the pointer
        magnify.style.top = canvasLocation.y - 0.5 * magnifySize + 'px';
        magnify.style.left = canvasLocation.x - 0.5 * magnifySize + 'px';

        magnify.style.display = 'block';

        // Hide the mouse cursor, so the user can see better
        document.body.style.cursor = 'none';
    }

    /** Creates the magnifying glass canvas */
    function createMagnificationCanvas(element) {
        // If the magnifying glass canvas doesn't already exist
        if ($(element).find('.magnifyTool').length === 0) {
            // Create a canvas and append it as a child to the element
            var magnify = document.createElement('canvas');
            // The magnifyTool class is used to find the canvas later on
            magnify.classList.add('magnifyTool');

            var config = cornerstoneTools.magnify.getConfiguration();
            magnify.width = config.magnifySize;
            magnify.height = config.magnifySize;

            // Make sure position is absolute so the canvas can follow the mouse / touch
            magnify.style.position = 'absolute';
            element.appendChild(magnify);
        }
    }

    /** Find the magnifying glass canvas and remove it */
    function removeMagnificationCanvas(element) {
        $(element).find('.magnifyTool').remove();
    }

    // --- Mouse tool activate / disable --- //
    function disable(element) {
        $(element).off('CornerstoneToolsMouseDown', mouseDownCallback);
        removeMagnificationCanvas(element);
    }

    function enable(element) {
        var config = cornerstoneTools.magnify.getConfiguration(config);

        if (!browserName) {
            var infoString = cornerstoneTools.getBrowserInfo();
            var info = infoString.split(' ');
            browserName = info[0];
        }

        createMagnificationCanvas(element);
    }

    function activate(element, mouseButtonMask) {
        var eventData = {
            mouseButtonMask: mouseButtonMask,
        };

        $(element).off('CornerstoneToolsMouseDown', mouseDownCallback);

        $(element).on('CornerstoneToolsMouseDown', eventData, mouseDownCallback);
        createMagnificationCanvas(element);
    }

    // --- Touch tool activate / disable --- //
    function getConfiguration() {
        return configuration;
    }

    function setConfiguration(config) {
        configuration = config;
    }

    // module exports
    cornerstoneTools.magnify = {
        enable: enable,
        activate: activate,
        deactivate: disable,
        disable: disable,
        getConfiguration: getConfiguration,
        setConfiguration: setConfiguration
    };

    var options = {
        fireOnTouchStart: true,
        activateCallback: createMagnificationCanvas,
        disableCallback: removeMagnificationCanvas
    };
    cornerstoneTools.magnifyTouchDrag = cornerstoneTools.touchDragTool(dragCallback, options);

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/magnify.js

// Begin Source: src/imageTools/multiTouchDragTool.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function multiTouchDragTool(touchDragCallback) {
        var configuration = {};
        var events = 'CornerstoneToolsMultiTouchDrag';
        
        var toolInterface = {
            activate: function(element) {
                $(element).off(events, touchDragCallback);
                $(element).on(events, touchDragCallback);
            },
            disable: function(element) {
                $(element).off(events, touchDragCallback);
            },
            enable: function(element) {
                $(element).off(events, touchDragCallback);
            },
            deactivate: function(element) {
                $(element).off(events, touchDragCallback);
            },
            getConfiguration: function() {
                return configuration;
            },
            setConfiguration: function(config) {
                configuration = config;
            }
        };
        return toolInterface;
    }

    // module exports
    cornerstoneTools.multiTouchDragTool = multiTouchDragTool;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/multiTouchDragTool.js

// Begin Source: src/imageTools/orientationMarkers.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function getOrientationMarkers(element) {
        var enabledElement = cornerstone.getEnabledElement(element);
        var imagePlaneMetaData = cornerstoneTools.metaData.get('imagePlane', enabledElement.image.imageId);

        if (!imagePlaneMetaData || !imagePlaneMetaData.rowCosines || !imagePlaneMetaData.columnCosines) {
            return;
        }

        var rowString = cornerstoneTools.orientation.getOrientationString(imagePlaneMetaData.rowCosines);
        var columnString = cornerstoneTools.orientation.getOrientationString(imagePlaneMetaData.columnCosines);

        var oppositeRowString = cornerstoneTools.orientation.invertOrientationString(rowString);
        var oppositeColumnString = cornerstoneTools.orientation.invertOrientationString(columnString);

        return {
            top: oppositeColumnString,
            bottom: columnString,
            left: oppositeRowString,
            right: rowString
        };
    }

    function getOrientationMarkerPositions(element) {
        var enabledElement = cornerstone.getEnabledElement(element);
        var coords;

        coords = {
            x: enabledElement.image.width / 2,
            y: 5
        };
        var topCoords = cornerstone.pixelToCanvas(element, coords);

        coords = {
            x: enabledElement.image.width / 2,
            y: enabledElement.image.height - 5
        };
        var bottomCoords = cornerstone.pixelToCanvas(element, coords);

        coords = {
            x: 5,
            y: enabledElement.image.height / 2
        };
        var leftCoords = cornerstone.pixelToCanvas(element, coords);

        coords = {
            x: enabledElement.image.width - 10,
            y: enabledElement.image.height / 2
        };
        var rightCoords = cornerstone.pixelToCanvas(element, coords);

        return {
            top: topCoords,
            bottom: bottomCoords,
            left: leftCoords,
            right: rightCoords
        };
    }

    function onImageRendered(e, eventData) {
        var element = eventData.element;

        var markers = getOrientationMarkers(element);

        if (!markers) {
            return;
        }

        var coords = getOrientationMarkerPositions(element, markers);

        var context = eventData.canvasContext.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);

        var color = cornerstoneTools.toolColors.getToolColor();

        var textWidths = {
            top: context.measureText(markers.top).width,
            left: context.measureText(markers.left).width,
            right: context.measureText(markers.right).width,
            bottom: context.measureText(markers.bottom).width
        };

        cornerstoneTools.drawTextBox(context, markers.top, coords.top.x - textWidths.top / 2, coords.top.y, color);
        cornerstoneTools.drawTextBox(context, markers.left, coords.left.x - textWidths.left / 2, coords.left.y, color);

        var config = cornerstoneTools.orientationMarkers.getConfiguration();
        if (config && config.drawAllMarkers) {
            cornerstoneTools.drawTextBox(context, markers.right, coords.right.x - textWidths.right / 2, coords.right.y, color);
            cornerstoneTools.drawTextBox(context, markers.bottom, coords.bottom.x - textWidths.bottom / 2, coords.bottom.y, color);
        }
    }
    ///////// END IMAGE RENDERING ///////

    // module exports
    cornerstoneTools.orientationMarkers = cornerstoneTools.displayTool(onImageRendered);

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/orientationMarkers.js

// Begin Source: src/imageTools/pan.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function mouseUpCallback(e, eventData) {
        $(eventData.element).off('CornerstoneToolsMouseDrag', dragCallback);
        $(eventData.element).off('CornerstoneToolsMouseUp', mouseUpCallback);
        $(eventData.element).off('CornerstoneToolsMouseClick', mouseUpCallback);
    }

    function mouseDownCallback(e, eventData) {
        if (cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
            $(eventData.element).on('CornerstoneToolsMouseDrag', dragCallback);
            $(eventData.element).on('CornerstoneToolsMouseUp', mouseUpCallback);
            $(eventData.element).on('CornerstoneToolsMouseClick', mouseUpCallback);
            return false; // false = causes jquery to preventDefault() and stopPropagation() this event
        }
    }
    
    function dragCallback(e, eventData) {
        eventData.viewport.translation.x += (eventData.deltaPoints.page.x / eventData.viewport.scale);
        eventData.viewport.translation.y += (eventData.deltaPoints.page.y / eventData.viewport.scale);
        cornerstone.setViewport(eventData.element, eventData.viewport);
        return false; // false = causes jquery to preventDefault() and stopPropagation() this event
    }

    cornerstoneTools.pan = cornerstoneTools.simpleMouseButtonTool(mouseDownCallback);
    cornerstoneTools.panTouchDrag = cornerstoneTools.touchDragTool(dragCallback);

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/pan.js

// Begin Source: src/imageTools/panMultiTouch.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function touchPanCallback(e, eventData) {
        var config = cornerstoneTools.panMultiTouch.getConfiguration();
        if (config && config.testPointers(eventData)) {
            eventData.viewport.translation.x += (eventData.deltaPoints.page.x / eventData.viewport.scale);
            eventData.viewport.translation.y += (eventData.deltaPoints.page.y / eventData.viewport.scale);
            cornerstone.setViewport(eventData.element, eventData.viewport);
            return false; // false = causes jquery to preventDefault() and stopPropagation() this event
        }
    }

    var configuration = {
        testPointers: function(eventData) {
            return (eventData.numPointers >= 2);
        }
    };

    cornerstoneTools.panMultiTouch = cornerstoneTools.multiTouchDragTool(touchPanCallback);
    cornerstoneTools.panMultiTouch.setConfiguration(configuration);

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/panMultiTouch.js

// Begin Source: src/imageTools/probe.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    var toolType = 'probe';

    ///////// BEGIN ACTIVE TOOL ///////
    function createNewMeasurement(mouseEventData) {
        // create the measurement data for this tool with the end handle activated
        var measurementData = {
            visible: true,
            active: true,
            handles: {
                end: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: true
                }
            }
        };
        return measurementData;
    }
    ///////// END ACTIVE TOOL ///////

    ///////// BEGIN IMAGE RENDERING ///////
    function pointNearTool(element, data, coords) {
        var endCanvas = cornerstone.pixelToCanvas(element, data.handles.end);
        return cornerstoneMath.point.distance(endCanvas, coords) < 5;
    }

    function onImageRendered(e, eventData) {
        // if we have no toolData for this element, return immediately as there is nothing to do
        var toolData = cornerstoneTools.getToolState(e.currentTarget, toolType);
        if (!toolData) {
            return;
        }

        // we have tool data for this element - iterate over each one and draw it
        var context = eventData.canvasContext.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);

        var color;
        var font = cornerstoneTools.textStyle.getFont();
        var fontHeight = cornerstoneTools.textStyle.getFontSize();

        for (var i = 0; i < toolData.data.length; i++) {

            context.save();
            var data = toolData.data[i];
            
            if (data.active) {
                color = cornerstoneTools.toolColors.getActiveColor();
            } else {
                color = cornerstoneTools.toolColors.getToolColor();
            }

            // draw the handles
            cornerstoneTools.drawHandles(context, eventData, data.handles, color);

            var x = Math.round(data.handles.end.x);
            var y = Math.round(data.handles.end.y);
            var storedPixels;

            var text,
                str;

            if (x < 0 || y < 0 || x >= eventData.image.columns || y >= eventData.image.rows) {
                return;
            }

            if (eventData.image.color) {
                text = '' + x + ', ' + y;
                storedPixels = cornerstoneTools.getRGBPixels(eventData.element, x, y, 1, 1);
                str = 'R: ' + storedPixels[0] + ' G: ' + storedPixels[1] + ' B: ' + storedPixels[2];
            } else {
                storedPixels = cornerstone.getStoredPixels(eventData.element, x, y, 1, 1);
                var sp = storedPixels[0];
                var mo = sp * eventData.image.slope + eventData.image.intercept;
                var suv = cornerstoneTools.calculateSUV(eventData.image, sp);

                // Draw text
                text = '' + x + ', ' + y;
                str = 'SP: ' + sp + ' MO: ' + parseFloat(mo.toFixed(3));
                if (suv) {
                    str += ' SUV: ' + parseFloat(suv.toFixed(3));
                }
            }

            var coords = {
                // translate the x/y away from the cursor
                x: data.handles.end.x + 3,
                y: data.handles.end.y - 3
            };
            var textCoords = cornerstone.pixelToCanvas(eventData.element, coords);
            
            context.font = font;
            context.fillStyle = color;

            cornerstoneTools.drawTextBox(context, str, textCoords.x, textCoords.y + fontHeight + 5, color);
            cornerstoneTools.drawTextBox(context, text, textCoords.x, textCoords.y, color);
            context.restore();
        }
    }
    ///////// END IMAGE RENDERING ///////

    // module exports
    cornerstoneTools.probe = cornerstoneTools.mouseButtonTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType
    });
    cornerstoneTools.probeTouch = cornerstoneTools.touchTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType
    });

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/probe.js

// Begin Source: src/imageTools/rectangleRoi.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    var toolType = 'rectangleRoi';

    ///////// BEGIN ACTIVE TOOL ///////
    function createNewMeasurement(mouseEventData) {
        // create the measurement data for this tool with the end handle activated
        var measurementData = {
            visible: true,
            active: true,
            handles: {
                start: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: false
                },
                end: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: true
                }
            }
        };

        return measurementData;
    }
    ///////// END ACTIVE TOOL ///////

    function pointNearTool(element, data, coords) {
        var startCanvas = cornerstone.pixelToCanvas(element, data.handles.start);
        var endCanvas = cornerstone.pixelToCanvas(element, data.handles.end);

        var rect = {
            left: Math.min(startCanvas.x, endCanvas.x),
            top: Math.min(startCanvas.y, endCanvas.y),
            width: Math.abs(startCanvas.x - endCanvas.x),
            height: Math.abs(startCanvas.y - endCanvas.y)
        };

        var distanceToPoint = cornerstoneMath.rect.distanceToPoint(rect, coords);
        return (distanceToPoint < 5);
    }

    ///////// BEGIN IMAGE RENDERING ///////

    function calculateMeanStdDev(sp, ellipse) {
        // TODO: Get a real statistics library here that supports large counts

        var sum = 0;
        var sumSquared = 0;
        var count = 0;
        var index = 0;

        for (var y = ellipse.top; y < ellipse.top + ellipse.height; y++) {
            for (var x = ellipse.left; x < ellipse.left + ellipse.width; x++) {
                sum += sp[index];
                sumSquared += sp[index] * sp[index];
                count++;
                index++;
            }
        }

        if (count === 0) {
            return {
                count: count,
                mean: 0.0,
                variance: 0.0,
                stdDev: 0.0
            };
        }

        var mean = sum / count;
        var variance = sumSquared / count - mean * mean;

        return {
            count: count,
            mean: mean,
            variance: variance,
            stdDev: Math.sqrt(variance)
        };
    }

    function onImageRendered(e, eventData) {

        // if we have no toolData for this element, return immediately as there is nothing to do
        var toolData = cornerstoneTools.getToolState(e.currentTarget, toolType);
        if (toolData === undefined) {
            return;
        }

        // we have tool data for this element - iterate over each one and draw it
        var context = eventData.canvasContext.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);

        //activation color 
        var color;
        var lineWidth = cornerstoneTools.toolStyle.getToolWidth();
        var font = cornerstoneTools.textStyle.getFont();
        var fontHeight = cornerstoneTools.textStyle.getFontSize();
        
        for (var i = 0; i < toolData.data.length; i++) {
            context.save();

            var data = toolData.data[i];

            //differentiate the color of activation tool
            if (data.active) {
                color = cornerstoneTools.toolColors.getActiveColor();
            } else {
                color = cornerstoneTools.toolColors.getToolColor();
            }

            // draw the rectangle
            var handleStartCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.start);
            var handleEndCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.end);

            var widthCanvas = Math.abs(handleStartCanvas.x - handleEndCanvas.x);
            var heightCanvas = Math.abs(handleStartCanvas.y - handleEndCanvas.y);
            var leftCanvas = Math.min(handleStartCanvas.x, handleEndCanvas.x);
            var topCanvas = Math.min(handleStartCanvas.y, handleEndCanvas.y);
            var centerX = (handleStartCanvas.x + handleEndCanvas.x) / 2;
            var centerY = (handleStartCanvas.y + handleEndCanvas.y) / 2;

            context.beginPath();
            context.strokeStyle = color;
            context.lineWidth = lineWidth;
            context.rect(leftCanvas, topCanvas, widthCanvas, heightCanvas);
            context.stroke();

            // draw the handles
            cornerstoneTools.drawHandles(context, eventData, data.handles, color);

            // Calculate the mean, stddev, and area
            // TODO: calculate this in web worker for large pixel counts...

            var width = Math.abs(data.handles.start.x - data.handles.end.x);
            var height = Math.abs(data.handles.start.y - data.handles.end.y);
            var left = Math.min(data.handles.start.x, data.handles.end.x);
            var top = Math.min(data.handles.start.y, data.handles.end.y);
            var pixels = cornerstone.getPixels(eventData.element, left, top, width, height);

            var ellipse = {
                left: left,
                top: top,
                width: width,
                height: height
            };

            var meanStdDev = calculateMeanStdDev(pixels, ellipse);
            var area = (width * eventData.image.columnPixelSpacing) * (height * eventData.image.rowPixelSpacing);
            var areaText = 'Area: ' + area.toFixed(2) + ' mm^2';

            // Draw text
            context.font = font;

            var textSize = context.measureText(area);

            var textX = centerX < (eventData.image.columns / 2) ? centerX + (widthCanvas / 2): centerX - (widthCanvas / 2) - textSize.width;
            var textY = centerY < (eventData.image.rows / 2) ? centerY + (heightCanvas / 2): centerY - (heightCanvas / 2);

            context.fillStyle = color;
            cornerstoneTools.drawTextBox(context, 'Mean: ' + meanStdDev.mean.toFixed(2), textX, textY - fontHeight - 5, color);
            cornerstoneTools.drawTextBox(context, 'StdDev: ' + meanStdDev.stdDev.toFixed(2), textX, textY, color);
            cornerstoneTools.drawTextBox(context, areaText, textX, textY + fontHeight + 5, color);
            context.restore();
        }
    }
    ///////// END IMAGE RENDERING ///////

    // module exports
    cornerstoneTools.rectangleRoi = cornerstoneTools.mouseButtonTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType
    });
    cornerstoneTools.rectangleRoiTouch = cornerstoneTools.touchTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType
    });

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/imageTools/rectangleRoi.js

// Begin Source: src/imageTools/rotate.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    // --- Strategies --- //
    function defaultStrategy(eventData) {
        // Calculate distance from the center of the image
        var rect = eventData.element.getBoundingClientRect(eventData.element);

        var points = {
            x: eventData.currentPoints.client.x,
            y: eventData.currentPoints.client.y
        };

        var width = eventData.element.clientWidth;
        var height = eventData.element.clientHeight;

        var pointsFromCenter = {
            x: points.x - rect.left - width / 2,
            // Invert the coordinate system so that up is positive
            y: -1 * (points.y - rect.top - height / 2)
        };

        var rotationRadians = Math.atan2(pointsFromCenter.y, pointsFromCenter.x);
        var rotationDegrees = rotationRadians * (180 / Math.PI);
        var rotation = -1 * rotationDegrees + 90;
        eventData.viewport.rotation = rotation;
        cornerstone.setViewport(eventData.element, eventData.viewport);
    }

    function horizontalStrategy(eventData) {
        eventData.viewport.rotation += (eventData.deltaPoints.page.x / eventData.viewport.scale);
        cornerstone.setViewport(eventData.element, eventData.viewport);
    }

    function verticalStrategy(eventData) {
        eventData.viewport.rotation += (eventData.deltaPoints.page.y / eventData.viewport.scale);
        cornerstone.setViewport(eventData.element, eventData.viewport);
    }

    // --- Mouse event callbacks --- //
    function mouseUpCallback(e, eventData) {
        $(eventData.element).off('CornerstoneToolsMouseDrag', dragCallback);
        $(eventData.element).off('CornerstoneToolsMouseUp', mouseUpCallback);
        $(eventData.element).off('CornerstoneToolsMouseClick', mouseUpCallback);
    }

    function mouseDownCallback(e, eventData) {
        if (cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
            $(eventData.element).on('CornerstoneToolsMouseDrag', dragCallback);
            $(eventData.element).on('CornerstoneToolsMouseUp', mouseUpCallback);
            $(eventData.element).on('CornerstoneToolsMouseClick', mouseUpCallback);
            return false; // false = causes jquery to preventDefault() and stopPropagation() this event
        }
    }

    function dragCallback(e, eventData) {
        cornerstoneTools.rotate.strategy(eventData);
        cornerstone.setViewport(eventData.element, eventData.viewport);
        return false; // false = causes jquery to preventDefault() and stopPropagation() this event
    }

    cornerstoneTools.rotate = cornerstoneTools.simpleMouseButtonTool(mouseDownCallback);
    cornerstoneTools.rotate.strategies = {
        default: defaultStrategy,
        horizontal: horizontalStrategy,
        vertical: verticalStrategy
    };
    
    cornerstoneTools.rotate.strategy = defaultStrategy;

    cornerstoneTools.rotateTouchDrag = cornerstoneTools.touchDragTool(dragCallback);

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/rotate.js

// Begin Source: src/imageTools/rotateTouch.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function touchRotateCallback(e, eventData) {
        eventData.viewport.rotation += eventData.rotation;
        cornerstone.setViewport(eventData.element, eventData.viewport);
        return false;
    }

    function disable(element) {
        $(element).off('CornerstoneToolsTouchRotate', touchRotateCallback);
    }

    function activate(element) {
        $(element).off('CornerstoneToolsTouchRotate', touchRotateCallback);
        $(element).on('CornerstoneToolsTouchRotate', touchRotateCallback);
    }

    cornerstoneTools.rotateTouch = {
        activate: activate,
        disable: disable
    };

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/rotateTouch.js

// Begin Source: src/imageTools/saveImage.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function saveAs(element, filename) {
        var canvas = $(element).find('canvas').get(0);

        // Thanks to Ken Fyrstenber
        // http://stackoverflow.com/questions/18480474/how-to-save-an-image-from-canvas
        var lnk = document.createElement('a');

        /// the key here is to set the download attribute of the a tag
        lnk.download = filename;

        /// convert canvas content to data-uri for link. When download
        /// attribute is set the content pointed to by link will be
        /// pushed as 'download' in HTML5 capable browsers
        lnk.href = canvas.toDataURL();

        /// create a 'fake' click-event to trigger the download
        if (document.createEvent) {

            var e = document.createEvent('MouseEvents');
            e.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);

            lnk.dispatchEvent(e);

        } else if (lnk.fireEvent) {

            lnk.fireEvent('onclick');
        }
    }

    cornerstoneTools.saveAs = saveAs;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/saveImage.js

// Begin Source: src/imageTools/simpleAngle.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    var toolType = 'simpleAngle';

    ///////// BEGIN ACTIVE TOOL ///////
    function createNewMeasurement(mouseEventData) {
        // create the measurement data for this tool with the end handle activated
        var angleData = {
            visible: true,
            active: true,
            handles: {
                start: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: false
                },
                middle: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: true
                },
                end: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: false
                }
            }
        };

        return angleData;
    }
    ///////// END ACTIVE TOOL ///////

    function pointNearTool(element, data, coords) {
        var lineSegment = {
            start: cornerstone.pixelToCanvas(element, data.handles.start),
            end: cornerstone.pixelToCanvas(element, data.handles.middle)
        };

        var distanceToPoint = cornerstoneMath.lineSegment.distanceToPoint(lineSegment, coords);
        if (distanceToPoint < 25) {
            return true;
        }

        lineSegment.start = cornerstone.pixelToCanvas(element, data.handles.middle);
        lineSegment.end = cornerstone.pixelToCanvas(element, data.handles.end);

        distanceToPoint = cornerstoneMath.lineSegment.distanceToPoint(lineSegment, coords);
        return (distanceToPoint < 25);
    }

    function length(vector) {
        return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));
    }

    ///////// BEGIN IMAGE RENDERING ///////
    function onImageRendered(e, eventData) {

        // if we have no toolData for this element, return immediately as there is nothing to do
        var toolData = cornerstoneTools.getToolState(e.currentTarget, toolType);
        if (toolData === undefined) {
            return;
        }

        // we have tool data for this element - iterate over each one and draw it
        var context = eventData.canvasContext.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);
        
        //activation color 
        var color;
        var lineWidth = cornerstoneTools.toolStyle.getToolWidth();
        var font = cornerstoneTools.textStyle.getFont();
        var config = cornerstoneTools.simpleAngle.getConfiguration();

        for (var i = 0; i < toolData.data.length; i++) {
            context.save();

            if (config && config.shadow) {
                context.shadowColor = config.shadowColor || '#000000';
                context.shadowOffsetX = config.shadowOffsetX || 1;
                context.shadowOffsetY = config.shadowOffsetY || 1;
            }

            var data = toolData.data[i];

            //differentiate the color of activation tool
            if (data.active) {
                color = cornerstoneTools.toolColors.getActiveColor();
            } else {
                color = cornerstoneTools.toolColors.getToolColor();
            }

            // draw the line
            context.beginPath();
            context.strokeStyle = color;
            context.lineWidth = lineWidth;

            var handleStartCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.start);
            var handleMiddleCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.middle);

            context.moveTo(handleStartCanvas.x, handleStartCanvas.y);
            context.lineTo(handleMiddleCanvas.x, handleMiddleCanvas.y);

            var handleEndCanvas = cornerstone.pixelToCanvas(eventData.element, data.handles.end);

            context.lineTo(handleEndCanvas.x, handleEndCanvas.y);
            context.stroke();

            // draw the handles
            cornerstoneTools.drawHandles(context, eventData, data.handles, color);

            // Draw the text
            context.fillStyle = color;

            // Default to isotropic pixel size, update suffix to reflect this
            var columnPixelSpacing = eventData.image.columnPixelSpacing || 1;
            var rowPixelSpacing = eventData.image.rowPixelSpacing || 1;
            var suffix = '';
            if (!eventData.image.rowPixelSpacing || !eventData.image.columnPixelSpacing) {
                suffix = ' (isotropic)';
            }

            var sideA = {
                x: (Math.ceil(data.handles.middle.x) - Math.ceil(data.handles.start.x)) * columnPixelSpacing,
                y: (Math.ceil(data.handles.middle.y) - Math.ceil(data.handles.start.y)) * rowPixelSpacing
            };

            var sideB = {
                x: (Math.ceil(data.handles.end.x) - Math.ceil(data.handles.middle.x)) * columnPixelSpacing,
                y: (Math.ceil(data.handles.end.y) - Math.ceil(data.handles.middle.y)) * rowPixelSpacing
            };

            var sideC = {
                x: (Math.ceil(data.handles.end.x) - Math.ceil(data.handles.start.x)) * columnPixelSpacing,
                y: (Math.ceil(data.handles.end.y) - Math.ceil(data.handles.start.y)) * rowPixelSpacing
            };

            var sideALength = length(sideA);
            var sideBLength = length(sideB);
            var sideCLength = length(sideC);

            // Cosine law
            var angle = Math.acos((Math.pow(sideALength, 2) + Math.pow(sideBLength, 2) - Math.pow(sideCLength, 2)) / (2 * sideALength * sideBLength));
            angle = angle * (180 / Math.PI);

            var rAngle = cornerstoneTools.roundToDecimal(angle, 2);

            if (rAngle) {
                var str = '00B0'; // degrees symbol
                var text = rAngle.toString() + String.fromCharCode(parseInt(str, 16)) + suffix;
                
                var distance = 15;

                var textX = handleMiddleCanvas.x + distance;
                var textY = handleMiddleCanvas.y + distance;

                context.font = font;
                var textWidth = context.measureText(text).width;

                if ((handleMiddleCanvas.x - handleStartCanvas.x) < 0) {
                    textX = handleMiddleCanvas.x - distance - textWidth - 10;
                } else {
                    textX = handleMiddleCanvas.x + distance;
                }

                textY = handleMiddleCanvas.y;
                cornerstoneTools.drawTextBox(context, text, textX, textY, color);
            }

            context.restore();
        }
    }
    ///////// END IMAGE RENDERING ///////

    ///////// BEGIN ACTIVE TOOL ///////
    function addNewMeasurement(mouseEventData) {
        var measurementData = createNewMeasurement(mouseEventData);
        var element = mouseEventData.element;

        var eventData = {
            mouseButtonMask: mouseEventData.which,
        };

        // associate this data with this imageId so we can render it and manipulate it
        cornerstoneTools.addToolState(element, toolType, measurementData);

        // since we are dragging to another place to drop the end point, we can just activate
        // the end point and let the moveHandle move it for us.
        $(element).off('CornerstoneToolsMouseMove', cornerstoneTools.simpleAngle.mouseMoveCallback);
        $(element).off('CornerstoneToolsMouseDrag', cornerstoneTools.simpleAngle.mouseMoveCallback);
        $(element).off('CornerstoneToolsMouseDown', cornerstoneTools.simpleAngle.mouseDownCallback);
        $(element).off('CornerstoneToolsMouseDownActivate', cornerstoneTools.simpleAngle.mouseDownActivateCallback);
        cornerstone.updateImage(element);

        cornerstoneTools.moveNewHandle(mouseEventData, toolType, measurementData, measurementData.handles.middle, function() {
            measurementData.active = false;
            if (cornerstoneTools.anyHandlesOutsideImage(mouseEventData, measurementData.handles)) {
                // delete the measurement
                cornerstoneTools.removeToolState(element, toolType, measurementData);
            }

            measurementData.handles.end.active = true;
            cornerstone.updateImage(element);

            cornerstoneTools.moveNewHandle(mouseEventData, toolType, measurementData, measurementData.handles.end, function() {
                measurementData.active = false;
                if (cornerstoneTools.anyHandlesOutsideImage(mouseEventData, measurementData.handles)) {
                    // delete the measurement
                    cornerstoneTools.removeToolState(element, toolType, measurementData);
                }

                $(element).on('CornerstoneToolsMouseMove', cornerstoneTools.simpleAngle.mouseMoveCallback);
                $(element).on('CornerstoneToolsMouseDrag', cornerstoneTools.simpleAngle.mouseMoveCallback);
                $(element).on('CornerstoneToolsMouseDown', eventData, cornerstoneTools.simpleAngle.mouseDownCallback);
                $(element).on('CornerstoneToolsMouseDownActivate', eventData, cornerstoneTools.simpleAngle.mouseDownActivateCallback);
                cornerstone.updateImage(element);
            });
        });
    }

    function addNewMeasurementTouch(touchEventData) {
        var measurementData = createNewMeasurement(touchEventData);
        var element = touchEventData.element;

        // associate this data with this imageId so we can render it and manipulate it
        cornerstoneTools.addToolState(element, toolType, measurementData);

        // since we are dragging to another place to drop the end point, we can just activate
        // the end point and let the moveHandle move it for us.
        $(element).off('CornerstoneToolsTouchDrag', cornerstoneTools.simpleAngleTouch.touchMoveCallback);
        $(element).off('CornerstoneToolsTouchStartActive', cornerstoneTools.simpleAngleTouch.touchDownActivateCallback);
        $(element).off('CornerstoneToolsTouchStart', cornerstoneTools.simpleAngleTouch.touchStartCallback);
        $(element).off('CornerstoneToolsTap', cornerstoneTools.simpleAngleTouch.tapCallback);
        cornerstone.updateImage(element);

        cornerstoneTools.moveNewHandleTouch(touchEventData, measurementData.handles.middle, function() {
            measurementData.active = false;
            if (cornerstoneTools.anyHandlesOutsideImage(touchEventData, measurementData.handles)) {
                // delete the measurement
                cornerstoneTools.removeToolState(element, toolType, measurementData);
            }

            measurementData.handles.end.active = true;
            cornerstone.updateImage(element);

            cornerstoneTools.moveNewHandleTouch(touchEventData, measurementData.handles.end, function() {
                measurementData.active = false;
                if (cornerstoneTools.anyHandlesOutsideImage(touchEventData, measurementData.handles)) {
                    // delete the measurement
                    cornerstoneTools.removeToolState(element, toolType, measurementData);
                }

                $(element).on('CornerstoneToolsTouchDrag', cornerstoneTools.simpleAngleTouch.touchMoveCallback);
                $(element).on('CornerstoneToolsTouchStart', cornerstoneTools.simpleAngleTouch.touchStartCallback);
                $(element).on('CornerstoneToolsTouchStartActive', cornerstoneTools.simpleAngleTouch.touchDownActivateCallback);
                $(element).on('CornerstoneToolsTap', cornerstoneTools.simpleAngleTouch.tapCallback);
                cornerstone.updateImage(element);
            });
        });
    }

    cornerstoneTools.simpleAngle = cornerstoneTools.mouseButtonTool({
        createNewMeasurement: createNewMeasurement,
        addNewMeasurement: addNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType
    });

    cornerstoneTools.simpleAngleTouch = cornerstoneTools.touchTool({
        createNewMeasurement: createNewMeasurement,
        addNewMeasurement: addNewMeasurementTouch,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType
    });

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/imageTools/simpleAngle.js

// Begin Source: src/imageTools/textMarker.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    var toolType = 'textMarker';

    ///////// BEGIN ACTIVE TOOL ///////
    function createNewMeasurement(mouseEventData) {
        var config = cornerstoneTools.textMarker.getConfiguration();

        if (!config.current) {
            return;
        }

        // create the measurement data for this tool with the end handle activated
        var measurementData = {
            visible: true,
            active: true,
            text: config.current,
            handles: {
                end: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: true
                }
            }
        };

        // Update the current marker for the next marker
        var currentIndex = config.markers.indexOf(config.current);
        if (config.ascending) {
            currentIndex += 1;
            if (currentIndex >= config.markers.length) {
                if (!config.loop) {
                    currentIndex = -1;
                } else {
                    currentIndex -= config.markers.length;
                }
            }
        } else {
            currentIndex -= 1;
            if (currentIndex < 0) {
                if (!config.loop) {
                    currentIndex = -1;
                } else {
                    currentIndex += config.markers.length;
                }
            }
        }

        config.current = config.markers[currentIndex];

        return measurementData;
    }
    ///////// END ACTIVE TOOL ///////

    ///////// BEGIN IMAGE RENDERING ///////
    function pointNearTool(element, data, coords) {
        var endCanvas = cornerstone.pixelToCanvas(element, data.handles.end);

        var rect = {
            left: endCanvas.x - data.textWidth / 2,
            top: endCanvas.y,
            width: data.textWidth,
            height: data.textHeight
        };

        var distanceToPoint = cornerstoneMath.rect.distanceToPoint(rect, coords);
        return (distanceToPoint < 10);
    }

    function onImageRendered(e, eventData) {
        // if we have no toolData for this element, return immediately as there is nothing to do
        var toolData = cornerstoneTools.getToolState(eventData.element, toolType);
        if (!toolData) {
            return;
        }

        // we have tool data for this element - iterate over each one and draw it
        var context = eventData.canvasContext.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);

        var font = cornerstoneTools.textStyle.getFont();
        var fontSize = cornerstoneTools.textStyle.getFontSize();
        var config = cornerstoneTools.textMarker.getConfiguration();

        for (var i = 0; i < toolData.data.length; i++) {
            var data = toolData.data[i];

            var color = cornerstoneTools.toolColors.getToolColor();
            if (data.active) {
                color = cornerstoneTools.toolColors.getActiveColor();
            }

            context.save();

            if (config && config.shadow) {
                context.shadowColor = config.shadowColor || '#000000';
                context.shadowOffsetX = config.shadowOffsetX || 1;
                context.shadowOffsetY = config.shadowOffsetY || 1;
            }

            // Draw text
            context.font = font;
            context.fillStyle = color;

            var measureText = context.measureText(data.text);
            data.textWidth = measureText.width;
            data.textHeight = fontSize;

            var coords = {
                x: data.handles.end.x,
                y: data.handles.end.y
            };

            var textCoords = cornerstone.pixelToCanvas(eventData.element, coords);

            cornerstoneTools.drawTextBox(context, data.text, textCoords.x - data.textWidth / 2, textCoords.y, color);

            context.restore();
        }
    }

    function doubleClickCallback(e, eventData) {
        var element = eventData.element;
        var data;

        function doneChangingTextCallback(data, updatedText, deleteTool) {
            if (deleteTool === true) {
                cornerstoneTools.removeToolState(element, toolType, data);
            } else {
                data.text = updatedText;
            }

            data.active = false;
            cornerstone.updateImage(element);
            $(element).on('CornerstoneToolsMouseMove', eventData, cornerstoneTools.textMarker.mouseMoveCallback);
            $(element).on('CornerstoneToolsMouseDown', eventData, cornerstoneTools.textMarker.mouseDownCallback);
            $(element).on('CornerstoneToolsMouseDownActivate', eventData, cornerstoneTools.textMarker.mouseDownActivateCallback);
            $(element).on('CornerstoneToolsMouseDoubleClick', eventData, cornerstoneTools.textMarker.mouseDoubleClickCallback);
        }

        if (e.data && e.data.mouseButtonMask && !cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
            return false;
        }

        var config = cornerstoneTools.textMarker.getConfiguration();

        var coords = eventData.currentPoints.canvas;
        var toolData = cornerstoneTools.getToolState(element, toolType);

        // now check to see if there is a handle we can move
        if (!toolData) {
            return false;
        }

        for (var i = 0; i < toolData.data.length; i++) {
            data = toolData.data[i];
            if (pointNearTool(element, data, coords)) {
                data.active = true;
                cornerstone.updateImage(element);

                $(element).off('CornerstoneToolsMouseMove', cornerstoneTools.textMarker.mouseMoveCallback);
                $(element).off('CornerstoneToolsMouseDown', cornerstoneTools.textMarker.mouseDownCallback);
                $(element).off('CornerstoneToolsMouseDownActivate', cornerstoneTools.textMarker.mouseDownActivateCallback);
                $(element).off('CornerstoneToolsMouseDoubleClick', cornerstoneTools.textMarker.mouseDoubleClickCallback);
                // Allow relabelling via a callback
                config.changeTextCallback(data, doneChangingTextCallback);
                
                e.stopImmediatePropagation();
                return false;
            }
        }

        return false; // false = causes jquery to preventDefault() and stopPropagation() this event
    }

    function touchPressCallback(e, eventData) {
        var element = eventData.element;
        var data;

        function doneChangingTextCallback(data, updatedText, deleteTool) {
            if (deleteTool === true) {
                cornerstoneTools.removeToolState(element, toolType, data);
            } else {
                data.text = updatedText;
            }

            data.active = false;
            cornerstone.updateImage(element);
            $(element).off('CornerstoneToolsTouchDrag', cornerstoneTools.textMarkerTouch.touchMoveCallback);
            $(element).off('CornerstoneToolsTouchStartActive', cornerstoneTools.textMarkerTouch.touchDownActivateCallback);
            $(element).off('CornerstoneToolsTouchStart', cornerstoneTools.textMarkerTouch.touchStartCallback);
            $(element).off('CornerstoneToolsTap', cornerstoneTools.textMarkerTouch.tapCallback);
            $(element).off('CornerstoneToolsTouchPress', cornerstoneTools.textMarkerTouch.pressCallback);

            $(element).on('CornerstoneToolsTouchDrag', cornerstoneTools.textMarkerTouch.touchMoveCallback);
            $(element).on('CornerstoneToolsTouchStartActive', cornerstoneTools.textMarkerTouch.touchDownActivateCallback);
            $(element).on('CornerstoneToolsTouchStart', cornerstoneTools.textMarkerTouch.touchStartCallback);
            $(element).on('CornerstoneToolsTap', cornerstoneTools.textMarkerTouch.tapCallback);
            $(element).on('CornerstoneToolsTouchPress', cornerstoneTools.textMarkerTouch.pressCallback);
        }

        if (e.data && e.data.mouseButtonMask && !cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
            return false;
        }

        var config = cornerstoneTools.textMarker.getConfiguration();

        var coords = eventData.currentPoints.canvas;
        var toolData = cornerstoneTools.getToolState(element, toolType);

        // now check to see if there is a handle we can move
        if (!toolData) {
            return false;
        }

        for (var i = 0; i < toolData.data.length; i++) {
            data = toolData.data[i];
            if (pointNearTool(element, data, coords)) {
                data.active = true;
                cornerstone.updateImage(element);

                $(element).off('CornerstoneToolsTouchDrag', cornerstoneTools.textMarkerTouch.touchMoveCallback);
                $(element).off('CornerstoneToolsTouchStartActive', cornerstoneTools.textMarkerTouch.touchDownActivateCallback);
                $(element).off('CornerstoneToolsTouchStart', cornerstoneTools.textMarkerTouch.touchStartCallback);
                $(element).off('CornerstoneToolsTap', cornerstoneTools.textMarkerTouch.tapCallback);
                $(element).off('CornerstoneToolsTouchPress', cornerstoneTools.textMarkerTouch.pressCallback);
                // Allow relabelling via a callback
                config.changeTextCallback(data, doneChangingTextCallback);
                
                e.stopImmediatePropagation();
                return false;
            }
        }

        return false; // false = causes jquery to preventDefault() and stopPropagation() this event
    }

    cornerstoneTools.textMarker = cornerstoneTools.mouseButtonTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType,
        mouseDoubleClickCallback: doubleClickCallback
    });

    cornerstoneTools.textMarkerTouch = cornerstoneTools.touchTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        pointNearTool: pointNearTool,
        toolType: toolType,
        pressCallback: touchPressCallback
    });

    ///////// END IMAGE RENDERING ///////

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/textMarker.js

// Begin Source: src/imageTools/wwwc.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function mouseUpCallback(e, eventData) {
        $(eventData.element).off('CornerstoneToolsMouseDrag', mouseDragCallback);
        $(eventData.element).off('CornerstoneToolsMouseUp', mouseUpCallback);
        $(eventData.element).off('CornerstoneToolsMouseClick', mouseUpCallback);
    }

    function mouseDownCallback(e, eventData) {
        if (cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
            $(eventData.element).on('CornerstoneToolsMouseDrag', mouseDragCallback);
            $(eventData.element).on('CornerstoneToolsMouseUp', mouseUpCallback);
            $(eventData.element).on('CornerstoneToolsMouseClick', mouseUpCallback);
            return false; // false = cases jquery to preventDefault() and stopPropagation() this event
        }
    }

    function defaultStrategy(eventData) {
        // here we normalize the ww/wc adjustments so the same number of on screen pixels
        // adjusts the same percentage of the dynamic range of the image.  This is needed to
        // provide consistency for the ww/wc tool regardless of the dynamic range (e.g. an 8 bit
        // image will feel the same as a 16 bit image would)
        var maxVOI = eventData.image.maxPixelValue * eventData.image.slope + eventData.image.intercept;
        var minVOI = eventData.image.minPixelValue * eventData.image.slope + eventData.image.intercept;
        var imageDynamicRange = maxVOI - minVOI;
        var multiplier = imageDynamicRange / 1024;

        var deltaX = eventData.deltaPoints.page.x * multiplier;
        var deltaY = eventData.deltaPoints.page.y * multiplier;

        eventData.viewport.voi.windowWidth += (deltaX);
        eventData.viewport.voi.windowCenter += (deltaY);
    }

    function mouseDragCallback(e, eventData) {
        cornerstoneTools.wwwc.strategy(eventData);
        cornerstone.setViewport(eventData.element, eventData.viewport);
        return false; // false = cases jquery to preventDefault() and stopPropagation() this event
    }

    function touchDragCallback(e, eventData) {
        e.stopImmediatePropagation(); // Prevent CornerstoneToolsTouchStartActive from killing any press events
        var dragData = eventData;

        var maxVOI = dragData.image.maxPixelValue * dragData.image.slope + dragData.image.intercept;
        var minVOI = dragData.image.minPixelValue * dragData.image.slope + dragData.image.intercept;
        var imageDynamicRange = maxVOI - minVOI;
        var multiplier = imageDynamicRange / 1024;
        var deltaX = dragData.deltaPoints.page.x * multiplier;
        var deltaY = dragData.deltaPoints.page.y * multiplier;

        var config = cornerstoneTools.wwwc.getConfiguration();
        if (config.orientation) {
            if (config.orientation === 0) {
                dragData.viewport.voi.windowWidth += (deltaX);
                dragData.viewport.voi.windowCenter += (deltaY);
            } else {
                dragData.viewport.voi.windowWidth += (deltaY);
                dragData.viewport.voi.windowCenter += (deltaX);
            }
        } else {
            dragData.viewport.voi.windowWidth += (deltaX);
            dragData.viewport.voi.windowCenter += (deltaY);
        }

        cornerstone.setViewport(dragData.element, dragData.viewport);
    }

    cornerstoneTools.wwwc = cornerstoneTools.simpleMouseButtonTool(mouseDownCallback);
    cornerstoneTools.wwwc.strategies = {
        default: defaultStrategy
    };
    cornerstoneTools.wwwc.strategy = defaultStrategy;
    cornerstoneTools.wwwcTouchDrag = cornerstoneTools.touchDragTool(touchDragCallback);

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/wwwc.js

// Begin Source: src/imageTools/wwwcRegion.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    var toolType = 'wwwcRegion';

    var configuration = {
        minWindowWidth: 10
    };

    /** Calculates the minimum, maximum, and mean value in the given pixel array */
    function calculateMinMaxMean(storedPixelLuminanceData, globalMin, globalMax) {
        var numPixels = storedPixelLuminanceData.length;

        if (numPixels < 2) {
            return {
                min: globalMin,
                max: globalMax,
                mean: (globalMin + globalMax) / 2
            };
        }

        var min = globalMax;
        var max = globalMin;
        var sum = 0;

        for (var index = 0; index < numPixels; index++) {
            var spv = storedPixelLuminanceData[index];
            min = Math.min(min, spv);
            max = Math.max(max, spv);
            sum += spv;
        }

        return {
            min: min,
            max: max,
            mean: sum / numPixels
        };
    }

    /* Applies the windowing procedure when the mouse drag ends */
    function dragEndCallback(e, eventData) {
        $(eventData.element).off('CornerstoneToolsMouseMove', dragCallback);
        $(eventData.element).off('CornerstoneToolsMouseDrag', dragCallback);
        $(eventData.element).off('CornerstoneToolsMouseUp', dragEndCallback);
        $(eventData.element).off('CornerstoneToolsMouseClick', dragEndCallback);
        
        var toolData = cornerstoneTools.getToolState(eventData.element, toolType);
        if (!toolData) {
            return;
        }

        if (!toolData.data.length) {
            return;
        }

        // Update the endpoint as the mouse/touch is dragged
        var endPoint = {
            x: eventData.currentPoints.image.x,
            y: eventData.currentPoints.image.y
        };

        toolData.data[0].endPoint = endPoint;

        applyWWWCRegion(eventData);

        var mouseData = {
            mouseButtonMask: eventData.which
        };

        $(eventData.element).on('CornerstoneToolsMouseDown', mouseData, mouseDownCallback);
    }

    /** Calculates the minimum and maximum value in the given pixel array */
    function applyWWWCRegion(eventData) {
        var toolData = cornerstoneTools.getToolState(eventData.element, toolType);
        if (!toolData) {
            return;
        }

        if (!toolData.data.length) {
            return;
        }

        var startPoint = toolData.data[0].startPoint;
        var endPoint = toolData.data[0].endPoint;

        // Get the rectangular region defined by the handles
        var width = Math.abs(startPoint.x - endPoint.x);
        var height = Math.abs(startPoint.y - endPoint.y);

        var left = Math.min(startPoint.x, endPoint.x);
        var top = Math.min(startPoint.y, endPoint.y);

        // Bound the rectangle so we don't get undefined pixels
        left = Math.max(left, 0);
        left = Math.min(left, eventData.image.width);
        top = Math.max(top, 0);
        top = Math.min(top, eventData.image.height);
        width = Math.floor(Math.min(width, Math.abs(eventData.image.width - left)));
        height = Math.floor(Math.min(height, Math.abs(eventData.image.height - top)));

        // Get the pixel data in the rectangular region
        var pixelLuminanceData = cornerstoneTools.getLuminance(eventData.element, left, top, width, height);

        // Calculate the minimum and maximum pixel values
        var minMaxMean = calculateMinMaxMean(pixelLuminanceData, eventData.image.minPixelValue, eventData.image.maxPixelValue);

        // Adjust the viewport window width and center based on the calculated values
        var config = cornerstoneTools.wwwcRegion.getConfiguration();
        var viewport = cornerstone.getViewport(eventData.element);
        if (config.minWindowWidth === undefined) {
            config.minWindowWidth = 10;
        }

        viewport.voi.windowWidth = Math.max(Math.abs(minMaxMean.max - minMaxMean.min), config.minWindowWidth);
        viewport.voi.windowCenter = minMaxMean.mean;
        cornerstone.setViewport(eventData.element, viewport);

        // Clear the toolData
        toolData.data = [];

        cornerstone.updateImage(eventData.element);
    }

    function whichMovement(e, eventData) {
        var element = eventData.element;

        $(element).off('CornerstoneToolsMouseMove');
        $(element).off('CornerstoneToolsMouseDrag');

        $(element).on('CornerstoneToolsMouseMove', dragCallback);
        $(element).on('CornerstoneToolsMouseDrag', dragCallback);

        $(element).on('CornerstoneToolsMouseClick', dragEndCallback);
        if (e.type === 'CornerstoneToolsMouseDrag') {
            $(element).on('CornerstoneToolsMouseUp', dragEndCallback);
        }
    }

    /** Records the start point and attaches the drag event handler */
    function mouseDownCallback(e, eventData) {
        if (cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
            $(eventData.element).on('CornerstoneToolsMouseDrag', eventData, whichMovement);
            $(eventData.element).on('CornerstoneToolsMouseMove', eventData, whichMovement);
            $(eventData.element).on('CornerstoneToolsMouseUp', dragEndCallback);

            $(eventData.element).off('CornerstoneToolsMouseDown');
            recordStartPoint(eventData);
            return false;
        }
    }

    /** Records the start point of the click or touch */
    function recordStartPoint(eventData) {
        var toolData = cornerstoneTools.getToolState(eventData.element, toolType);
        if (toolData && toolData.data) {
            toolData.data = [];
        }

        var measurementData = {
            startPoint: {
                x: eventData.currentPoints.image.x,
                y: eventData.currentPoints.image.y
            }
        };

        cornerstoneTools.addToolState(eventData.element, toolType, measurementData);
    }

    /** Draws the rectangular region while the touch or mouse event drag occurs */
    function dragCallback(e, eventData) {
        // if we have no toolData for this element, return immediately as there is nothing to do
        var toolData = cornerstoneTools.getToolState(eventData.element, toolType);
        if (toolData === undefined) {
            return;
        }

        if (!toolData.data.length) {
            return;
        }

        // Update the endpoint as the mouse/touch is dragged
        var endPoint = {
            x: eventData.currentPoints.image.x,
            y: eventData.currentPoints.image.y
        };

        toolData.data[0].endPoint = endPoint;
        cornerstone.updateImage(eventData.element);
    }

    function onImageRendered(e, eventData) {
        var toolData = cornerstoneTools.getToolState(eventData.element, toolType);
        if (!toolData) {
            return;
        }

        if (!toolData.data.length) {
            return;
        }

        var startPoint = toolData.data[0].startPoint;
        var endPoint = toolData.data[0].endPoint;

        if (!startPoint || !endPoint) {
            return;
        }

        // Get the current element's canvas
        var canvas = $(eventData.element).find('canvas').get(0);
        var context = canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);

        // Set to the active tool color
        var color = cornerstoneTools.toolColors.getActiveColor();
        
        // Calculate the rectangle parameters
        var startPointCanvas = cornerstone.pixelToCanvas(eventData.element, startPoint);
        var endPointCanvas = cornerstone.pixelToCanvas(eventData.element, endPoint);

        var left = Math.min(startPointCanvas.x, endPointCanvas.x);
        var top = Math.min(startPointCanvas.y, endPointCanvas.y);
        var width = Math.abs(startPointCanvas.x - endPointCanvas.x);
        var height = Math.abs(startPointCanvas.y - endPointCanvas.y);

        var lineWidth = cornerstoneTools.toolStyle.getToolWidth();
        var config = cornerstoneTools.wwwcRegion.getConfiguration();

        // Draw the rectangle
        context.save();

        if (config && config.shadow) {
            context.shadowColor = config.shadowColor || '#000000';
            context.shadowOffsetX = config.shadowOffsetX || 1;
            context.shadowOffsetY = config.shadowOffsetY || 1;
        }

        context.beginPath();
        context.strokeStyle = color;
        context.lineWidth = lineWidth;
        context.rect(left, top, width, height);
        context.stroke();

        context.restore();
    }

    // --- Mouse tool enable / disable --- ///
    function disable(element) {
        $(element).off('CornerstoneToolsMouseDown', mouseDownCallback);
        $(element).off('CornerstoneImageRendered', onImageRendered);

        cornerstone.updateImage(element);
    }

    function activate(element, mouseButtonMask) {
        var eventData = {
            mouseButtonMask: mouseButtonMask,
        };

        var toolData = cornerstoneTools.getToolState(element, toolType);
        if (!toolData) {
            var data = [];
            cornerstoneTools.addToolState(element, toolType, data);
        }

        $(element).off('CornerstoneToolsMouseDown', mouseDownCallback);
        $(element).off('CornerstoneToolsMouseUp', dragEndCallback);
        $(element).off('CornerstoneToolsMouseDrag', dragCallback);
        $(element).off('CornerstoneImageRendered', onImageRendered);

        $(element).on('CornerstoneToolsMouseDown', eventData, mouseDownCallback);
        $(element).on('CornerstoneImageRendered', onImageRendered);
        cornerstone.updateImage(element);
    }

    // --- Touch tool enable / disable --- //
    function disableTouchDrag(element) {
        $(element).off('CornerstoneToolsTouchDrag', dragCallback);
        $(element).off('CornerstoneToolsTouchStart', recordStartPoint);
        $(element).off('CornerstoneToolsDragEnd', applyWWWCRegion);
        $(element).off('CornerstoneImageRendered', onImageRendered);
    }

    function activateTouchDrag(element) {
        var toolData = cornerstoneTools.getToolState(element, toolType);
        if (toolData === undefined) {
            var data = [];
            cornerstoneTools.addToolState(element, toolType, data);
        }

        $(element).off('CornerstoneToolsTouchDrag', dragCallback);
        $(element).off('CornerstoneToolsTouchStart', recordStartPoint);
        $(element).off('CornerstoneToolsDragEnd', applyWWWCRegion);
        $(element).off('CornerstoneImageRendered', onImageRendered);

        $(element).on('CornerstoneToolsTouchDrag', dragCallback);
        $(element).on('CornerstoneToolsTouchStart', recordStartPoint);
        $(element).on('CornerstoneToolsDragEnd', applyWWWCRegion);
        $(element).on('CornerstoneImageRendered', onImageRendered);
    }

    function getConfiguration() {
        return configuration;
    }

    function setConfiguration(config) {
        configuration = config;
    }

    // module exports
    cornerstoneTools.wwwcRegion = {
        activate: activate,
        deactivate: disable,
        disable: disable,
        setConfiguration: setConfiguration,
        getConfiguration: getConfiguration
    };

    cornerstoneTools.wwwcRegionTouch = {
        activate: activateTouchDrag,
        deactivate: disableTouchDrag,
        disable: disableTouchDrag
    };

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/imageTools/wwwcRegion.js

// Begin Source: src/imageTools/zoom.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    var startPoints;

    function changeViewportScale(viewport, ticks) {
        var config = cornerstoneTools.zoom.getConfiguration();
        var pow = 1.7;
        
        var oldFactor = Math.log(viewport.scale) / Math.log(pow);
        var factor = oldFactor + ticks;
        
        var scale = Math.pow(pow, factor);
        if (config.maxScale && scale > config.maxScale) {
            viewport.scale = config.maxScale;
        } else if (config.minScale && scale < config.minScale) {
            viewport.scale = config.minScale;
        } else {
            viewport.scale = scale;
        }

        return viewport;
    }

    function boundPosition(position, width, height) {
        position.x = Math.max(position.x, 0);
        position.y = Math.max(position.y, 0);
        position.x = Math.min(position.x, width);
        position.y = Math.min(position.y, height);
        return position;
    }

    function correctShift(shift, viewport) {
        // Apply rotations
        if (viewport.rotation !== 0) {
            var angle = viewport.rotation * Math.PI / 180;
    
            var cosA = Math.cos(angle);
            var sinA = Math.sin(angle);
    
            var newX = shift.x * cosA - shift.y * sinA;
            var newY = shift.x * sinA + shift.y * cosA;

            shift.x = newX;
            shift.y = newY;
        }

        // Apply Flips        
        if (viewport.hflip) {
            shift.x *= -1;
        }

        if (viewport.vflip) {
            shift.y *= -1;
        }

        return shift;
    }

    function defaultStrategy(eventData, ticks) {
        var element = eventData.element;

        // Calculate the new scale factor based on how far the mouse has changed
        var viewport = changeViewportScale(eventData.viewport, ticks);
        cornerstone.setViewport(element, viewport);

        // Now that the scale has been updated, determine the offset we need to apply to the center so we can
        // keep the original start location in the same position
        var newCoords = cornerstone.pageToPixel(element, eventData.startPoints.page.x, eventData.startPoints.page.y);
        var shift = {
            x: eventData.startPoints.image.x - newCoords.x,
            y: eventData.startPoints.image.y - newCoords.y
        };

        shift = correctShift(shift, viewport);
        viewport.translation.x -= shift.x;
        viewport.translation.y -= shift.y;
        cornerstone.setViewport(element, viewport);
    }

    function translateStrategy(eventData, ticks) {
        var element = eventData.element;
        var image = eventData.image;

        // Calculate the new scale factor based on how far the mouse has changed
        var viewport = changeViewportScale(eventData.viewport, ticks);
        cornerstone.setViewport(element, viewport);

        var config = cornerstoneTools.zoom.getConfiguration();
        var shift,
            newCoords;

        var outwardsTranslateSpeed = 8;
        var inwardsTranslateSpeed = 8;
        var outwardsMinScaleToTranslate = 3;
        var minTranslation = 0.01;

        if (ticks < 0) {
            // Zoom outwards from the image center
            shift = {
                x: viewport.scale < outwardsMinScaleToTranslate ? viewport.translation.x / outwardsTranslateSpeed : 0,
                y: viewport.scale < outwardsMinScaleToTranslate ? viewport.translation.y / outwardsTranslateSpeed : 0
            };
            
            if (Math.abs(viewport.translation.x) < minTranslation) {
                viewport.translation.x = 0;
                shift.x = 0;
            } else if (Math.abs(viewport.translation.y) < minTranslation) {
                viewport.translation.y = 0;
                shift.y = 0;
            } else if (Math.abs(viewport.translation.x) < minTranslation &&
                       Math.abs(viewport.translation.y) < minTranslation) {
                cornerstone.setViewport(element, viewport);
                return false;
            }
        } else {
            newCoords = cornerstone.pageToPixel(element, startPoints.page.x, startPoints.page.y);
            if (config && config.preventZoomOutsideImage) {
                startPoints.image = boundPosition(startPoints.image, image.width, image.height);
                newCoords = boundPosition(newCoords, image.width, image.height);
            }
            // Zoom inwards to the current image point
            var desiredTranslation = {
                x: image.width / 2 - startPoints.image.x,
                y: image.height / 2 - startPoints.image.y
            };

            var distanceToDesired = {
                x: viewport.translation.x - desiredTranslation.x,
                y: viewport.translation.y - desiredTranslation.y
            };

            shift = {
                x: distanceToDesired.x / inwardsTranslateSpeed,
                y: distanceToDesired.y / inwardsTranslateSpeed
            };

            if (Math.abs(distanceToDesired.x) < minTranslation) {
                viewport.translation.x = desiredTranslation.x;
                shift.x = 0;
            } else if (Math.abs(distanceToDesired.y) < minTranslation) {
                viewport.translation.y = desiredTranslation.y;
                shift.y = 0;
            } else if (Math.abs(distanceToDesired.x) < minTranslation &&
                       Math.abs(distanceToDesired.y) < minTranslation) {
                cornerstone.setViewport(element, viewport);
                return false;
            }
        }

        shift = correctShift(shift, viewport);
        if (!shift.x && !shift.y) {
            return false;
        }

        viewport.translation.x -= shift.x;
        viewport.translation.y -= shift.y;
        cornerstone.setViewport(element, viewport);
    }

    function mouseUpCallback(e, eventData) {
        $(eventData.element).off('CornerstoneToolsMouseDrag', dragCallback);
        $(eventData.element).off('CornerstoneToolsMouseUp', mouseUpCallback);
        $(eventData.element).off('CornerstoneToolsMouseClick', mouseUpCallback);
    }

    function mouseDownCallback(e, eventData) {
        if (cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
            startPoints = eventData.startPoints; // Used for translateStrategy
            $(eventData.element).on('CornerstoneToolsMouseDrag', dragCallback);
            $(eventData.element).on('CornerstoneToolsMouseUp', mouseUpCallback);
            $(eventData.element).on('CornerstoneToolsMouseClick', mouseUpCallback);
            return false; // false = cases jquery to preventDefault() and stopPropagation() this event
        }
    }

    function dragCallback(e, eventData) {
        if (!eventData.deltaPoints.page.y) {
            return false;
        }

        var ticks = eventData.deltaPoints.page.y / 100;
        cornerstoneTools.zoom.strategy(eventData, ticks);
        return false; // false = causes jquery to preventDefault() and stopPropagation() this event
    }

    function mouseWheelCallback(e, eventData) {
        var ticks = -eventData.direction / 4;
        var viewport = changeViewportScale(eventData.viewport, ticks);
        cornerstone.setViewport(eventData.element, viewport);
    }

    function touchPinchCallback(e, eventData) {
        var config = cornerstoneTools.zoom.getConfiguration();
        var viewport = eventData.viewport;
        var element = eventData.element;

        // Change the scale based on the pinch gesture's scale change
        viewport.scale += eventData.scaleChange * viewport.scale;
        if (config.maxScale && viewport.scale > config.maxScale) {
            viewport.scale = config.maxScale;
        } else if (config.minScale && viewport.scale < config.minScale) {
            viewport.scale = config.minScale;
        }

        cornerstone.setViewport(element, viewport);

        // Now that the scale has been updated, determine the offset we need to apply to the center so we can
        // keep the original start location in the same position
        var newCoords = cornerstone.pageToPixel(element, eventData.startPoints.page.x, eventData.startPoints.page.y);
        var shift = {
            x: eventData.startPoints.image.x - newCoords.x,
            y: eventData.startPoints.image.y - newCoords.y
        };

        shift = correctShift(shift, viewport);
        viewport.translation.x -= shift.x;
        viewport.translation.y -= shift.y;
        cornerstone.setViewport(element, viewport);
    }

    cornerstoneTools.zoom = cornerstoneTools.simpleMouseButtonTool(mouseDownCallback);
    cornerstoneTools.zoom.strategies = {
        default: defaultStrategy,
        translate: translateStrategy
    };
    cornerstoneTools.zoom.strategy = defaultStrategy;

    cornerstoneTools.zoomWheel = cornerstoneTools.mouseWheelTool(mouseWheelCallback);
    cornerstoneTools.zoomTouchPinch = cornerstoneTools.touchPinchTool(touchPinchCallback);
    cornerstoneTools.zoomTouchDrag = cornerstoneTools.touchDragTool(dragCallback);

})($, cornerstone, cornerstoneTools);
 
// End Source; src/imageTools/zoom.js

// Begin Source: src/inputSources/keyboardInput.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    var mouseX, mouseY;

    function keyPress(e) {
        var element = e.currentTarget;

        var keyPressData = {
            event: window.event || e, // old IE support
            element: element,
            viewport: cornerstone.getViewport(element),
            image: cornerstone.getEnabledElement(element).image,
            currentPoints: {
                page: {
                    x: mouseX,
                    y: mouseY
                },
                image: cornerstone.pageToPixel(element, mouseX, mouseY),
            },
            keyCode: e.keyCode,
            which: e.which
        };

        keyPressData.currentPoints.canvas = cornerstone.pixelToCanvas(element, keyPressData.currentPoints.image);

        var keyPressEvents = {
            keydown: 'CornerstoneToolsKeyDown',
            keypress: 'CornerstoneToolsKeyPress',
            keyup: 'CornerstoneToolsKeyUp',

        };

        $(element).trigger(keyPressEvents[e.type], keyPressData);
    }

    function mouseMove(e) {
        mouseX = e.pageX || e.originalEvent.pageX;
        mouseY = e.pageY || e.originalEvent.pageY;
    }

    var keyboardEvent = 'keydown keypress keyup';

    function enable(element) {
        // Prevent handlers from being attached multiple times
        disable(element);

        $(element).on(keyboardEvent, keyPress);
        $(element).on('mousemove', mouseMove);
    }

    function disable(element) {
        $(element).off(keyboardEvent, keyPress);
        $(element).off('mousemove', mouseMove);
    }

    // module exports
    cornerstoneTools.keyboardInput = {
        enable: enable,
        disable: disable
    };

})($, cornerstone, cornerstoneTools);
 
// End Source; src/inputSources/keyboardInput.js

// Begin Source: src/inputSources/preventGhostClick.js
(function(cornerstoneTools) {

    'use strict';

    // Functions to prevent ghost clicks following a touch
    // All credit to @kosich
    // https://gist.github.com/kosich/23188dd86633b6c2efb7

    var antiGhostDelay = 2000,
        pointerType = {
            mouse: 0,
            touch: 1
        },
        lastInteractionType,
        lastInteractionTime;

    function handleTap(type, e) {
        var now = Date.now();
        if (type !== lastInteractionType) {
            if (now - lastInteractionTime <= antiGhostDelay) {
                e.preventDefault();
                e.stopPropagation();
                e.stopImmediatePropagation();
                return false;
            }

            lastInteractionType = type;
        }

        lastInteractionTime = now;
    }

    // Cacheing the function references
    // Necessary because a new function reference is created after .bind() is called
    // http://stackoverflow.com/questions/11565471/removing-event-listener-which-was-added-with-bind
    var handleTapMouse = handleTap.bind(null, pointerType.mouse);
    var handleTapTouch = handleTap.bind(null, pointerType.touch);

    function attachEvents(element, eventList, interactionType) {
        var tapHandler = interactionType ? handleTapMouse : handleTapTouch;
        eventList.forEach(function(eventName) {
            element.addEventListener(eventName, tapHandler, true);
        });
    }

    function removeEvents(element, eventList, interactionType) {
        var tapHandler = interactionType ? handleTapMouse : handleTapTouch;
        eventList.forEach(function(eventName) {
            element.removeEventListener(eventName, tapHandler, true);
        });
    }

    var mouseEvents = [ 'mousedown', 'mouseup' ];
    var touchEvents = [ 'touchstart', 'touchend' ];

    function disable(element) {
        removeEvents(element, mouseEvents, pointerType.mouse);
        removeEvents(element, touchEvents, pointerType.touch);
    }

    function enable(element) {
        disable(element);
        attachEvents(element, mouseEvents, pointerType.mouse);
        attachEvents(element, touchEvents, pointerType.touch);
    }

    cornerstoneTools.preventGhostClick = {
        enable: enable,
        disable: disable
    };

})(cornerstoneTools);
 
// End Source; src/inputSources/preventGhostClick.js

// Begin Source: src/manipulators/anyHandlesOutsideImage.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    function anyHandlesOutsideImage(renderData, handles) {
        var image = renderData.image;
        var imageRect = {
            left: 0,
            top: 0,
            width: image.width,
            height: image.height
        };

        var handleOutsideImage = false;

        Object.keys(handles).forEach(function(name) {
            var handle = handles[name];
            if (handle.allowedOutsideImage === true) {
                return;
            }
            
            if (cornerstoneMath.point.insideRect(handle, imageRect) === false) {
                handleOutsideImage = true;
            }
        });

        return handleOutsideImage;
    }

    // module/private exports
    cornerstoneTools.anyHandlesOutsideImage = anyHandlesOutsideImage;

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/manipulators/anyHandlesOutsideImage.js

// Begin Source: src/manipulators/drawHandles.js
(function(cornerstone, cornerstoneTools) {

    'use strict';

    var handleRadius = 6;

    function drawHandles(context, renderData, handles, color, fill) {
        context.strokeStyle = color;

        Object.keys(handles).forEach(function(name) {
            var handle = handles[name];
            if (handle.drawnIndependently === true) {
                return;
            }

            context.beginPath();

            if (handle.active) {
                context.lineWidth = cornerstoneTools.toolStyle.getActiveWidth();
            } else {
                context.lineWidth = cornerstoneTools.toolStyle.getToolWidth();
            }

            var handleCanvasCoords = cornerstone.pixelToCanvas(renderData.element, handle);
            context.arc(handleCanvasCoords.x, handleCanvasCoords.y, handleRadius, 0, 2 * Math.PI);

            if (fill) {
                context.fillStyle = fill;
                context.fill();
            }

            context.stroke();
        });
    }

    // module/private exports
    cornerstoneTools.drawHandles = drawHandles;

})(cornerstone, cornerstoneTools);
 
// End Source; src/manipulators/drawHandles.js

// Begin Source: src/manipulators/getHandleNearImagePoint.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    function getHandleNearImagePoint(element, handles, coords, distanceThreshold) {
        var nearbyHandle;
        
        if (!handles) {
            return;
        }

        Object.keys(handles).forEach(function(name) {
            var handle = handles[name];
            if (handle.hasOwnProperty('pointNearHandle')) {
                if (handle.pointNearHandle(element, handle, coords)) {
                    nearbyHandle = handle;
                    return;
                }
            } else {
                var handleCanvas = cornerstone.pixelToCanvas(element, handle);
                var distance = cornerstoneMath.point.distance(handleCanvas, coords);
                if (distance <= distanceThreshold) {
                    nearbyHandle = handle;
                    return;
                }
            }
        });
        
        return nearbyHandle;
    }

    // module exports
    cornerstoneTools.getHandleNearImagePoint = getHandleNearImagePoint;

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/manipulators/getHandleNearImagePoint.js

// Begin Source: src/manipulators/handleActivator.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    function getActiveHandle(handles) {
        var activeHandle;

        Object.keys(handles).forEach(function(name) {
            var handle = handles[name];
            if (handle.active === true) {
                activeHandle = handle;
                return;
            }
        });

        return activeHandle;
    }

    function handleActivator(element, handles, canvasPoint, distanceThreshold) {
        if (!distanceThreshold) {
            distanceThreshold = 36;
        }

        var activeHandle = getActiveHandle(handles);
        var nearbyHandle = cornerstoneTools.getHandleNearImagePoint(element, handles, canvasPoint, distanceThreshold);
        if (activeHandle !== nearbyHandle) {
            if (nearbyHandle !== undefined) {
                nearbyHandle.active = true;
            }

            if (activeHandle !== undefined) {
                activeHandle.active = false;
            }

            return true;
        }

        return false;
    }

    // module/private exports
    cornerstoneTools.handleActivator = handleActivator;

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/manipulators/handleActivator.js

// Begin Source: src/manipulators/moveAllHandles.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    function moveAllHandles(mouseEventData, data, toolData, toolType, options, doneMovingCallback) {
        var element = mouseEventData.element;

        function mouseDragCallback(e, eventData) {
            data.active = true;

            Object.keys(data.handles).forEach(function(name) {
                var handle = data.handles[name];
                if (handle.movesIndependently === true) {
                    return;
                }

                handle.x += eventData.deltaPoints.image.x;
                handle.y += eventData.deltaPoints.image.y;
                
                if (options.preventHandleOutsideImage === true) {
                    handle.x = Math.max(handle.x, 0);
                    handle.x = Math.min(handle.x, eventData.image.width);

                    handle.y = Math.max(handle.y, 0);
                    handle.y = Math.min(handle.y, eventData.image.height);
                }
            });

            cornerstone.updateImage(element);

            var eventType = 'CornerstoneToolsMeasurementModified';
            var modifiedEventData = {
                toolType: toolType,
                element: element,
                measurementData: data
            };
            $(element).trigger(eventType, modifiedEventData);

            return false; // false = causes jquery to preventDefault() and stopPropagation() this event
        }

        $(element).on('CornerstoneToolsMouseDrag', mouseDragCallback);

        function mouseUpCallback(e, eventData) {
            data.active = false;
            data.invalidated = true;

            $(element).off('CornerstoneToolsMouseDrag', mouseDragCallback);
            $(element).off('CornerstoneToolsMouseUp', mouseUpCallback);
            $(element).off('CornerstoneToolsMouseClick', mouseUpCallback);

            // If any handle is outside the image, delete the tool data
            if (options.deleteIfHandleOutsideImage === true) {
                var image = eventData.image;
                var handleOutsideImage = false;
                var rect = {
                    top: 0,
                    left: 0,
                    width: image.width,
                    height: image.height
                };
                
                Object.keys(data.handles).forEach(function(name) {
                    var handle = data.handles[name];
                    handle.active = false;
                    if (cornerstoneMath.point.insideRect(handle, rect) === false) {
                        handleOutsideImage = true;
                        return false;
                    }
                });

                if (handleOutsideImage) {
                    // find this tool data
                    var indexOfData = -1;
                    toolData.data.forEach(function(thisToolData, index) {
                        if (thisToolData === data) {
                            indexOfData = index;
                            return false;
                        }
                    });

                    if (indexOfData !== -1) {
                        toolData.data.splice(indexOfData, 1);
                    }
                }
            }

            cornerstone.updateImage(element);

            if (typeof doneMovingCallback === 'function') {
                doneMovingCallback();
            }
        }

        $(element).on('CornerstoneToolsMouseUp', mouseUpCallback);
        $(element).on('CornerstoneToolsMouseClick', mouseUpCallback);
        return true;
    }

    // module/private exports
    cornerstoneTools.moveAllHandles = moveAllHandles;

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/manipulators/moveAllHandles.js

// Begin Source: src/manipulators/moveHandle.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function moveHandle(mouseEventData, toolType, data, handle, doneMovingCallback, preventHandleOutsideImage) {
        var element = mouseEventData.element;
        var distanceFromTool = {
            x: handle.x - mouseEventData.currentPoints.image.x,
            y: handle.y - mouseEventData.currentPoints.image.y
        };

        function mouseDragCallback(e, eventData) {
            handle.active = true;
            handle.x = eventData.currentPoints.image.x + distanceFromTool.x;
            handle.y = eventData.currentPoints.image.y + distanceFromTool.y;

            if (preventHandleOutsideImage) {
                handle.x = Math.max(handle.x, 0);
                handle.x = Math.min(handle.x, eventData.image.width);

                handle.y = Math.max(handle.y, 0);
                handle.y = Math.min(handle.y, eventData.image.height);
            }

            cornerstone.updateImage(element);

            var eventType = 'CornerstoneToolsMeasurementModified';
            var modifiedEventData = {
                toolType: toolType,
                element: element,
                measurementData: data
            };
            $(element).trigger(eventType, modifiedEventData);
        }

        $(element).on('CornerstoneToolsMouseDrag', mouseDragCallback);

        function mouseUpCallback() {
            handle.active = false;
            $(element).off('CornerstoneToolsMouseDrag', mouseDragCallback);
            $(element).off('CornerstoneToolsMouseUp', mouseUpCallback);
            $(element).off('CornerstoneToolsMouseClick', mouseUpCallback);
            cornerstone.updateImage(element);

            if (typeof doneMovingCallback === 'function') {
                doneMovingCallback();
            }
        }

        $(element).on('CornerstoneToolsMouseUp', mouseUpCallback);
        $(element).on('CornerstoneToolsMouseClick', mouseUpCallback);
    }

    // module/private exports
    cornerstoneTools.moveHandle = moveHandle;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/manipulators/moveHandle.js

// Begin Source: src/manipulators/moveNewHandle.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function moveNewHandle(mouseEventData, toolType, data, handle, doneMovingCallback, preventHandleOutsideImage) {
        var element = mouseEventData.element;

        function moveCallback(e, eventData) {
            handle.active = true;
            handle.x = eventData.currentPoints.image.x;
            handle.y = eventData.currentPoints.image.y;
            
            if (preventHandleOutsideImage) {
                handle.x = Math.max(handle.x, 0);
                handle.x = Math.min(handle.x, eventData.image.width);

                handle.y = Math.max(handle.y, 0);
                handle.y = Math.min(handle.y, eventData.image.height);
            }

            cornerstone.updateImage(element);

            var eventType = 'CornerstoneToolsMeasurementModified';
            var modifiedEventData = {
                toolType: toolType,
                element: element,
                measurementData: data
            };
            $(element).trigger(eventType, modifiedEventData);
        }

        function whichMovement(e) {
            $(element).off('CornerstoneToolsMouseMove');
            $(element).off('CornerstoneToolsMouseDrag');

            $(element).on('CornerstoneToolsMouseMove', moveCallback);
            $(element).on('CornerstoneToolsMouseDrag', moveCallback);
            
            $(element).on('CornerstoneToolsMouseClick', moveEndCallback);
            if (e.type === 'CornerstoneToolsMouseDrag') {
                $(element).on('CornerstoneToolsMouseUp', moveEndCallback);
            }
        }

        function measurementRemovedCallback(e, eventData) {
            if (eventData.measurementData === data) {
                moveEndCallback();
            }
        }

        $(element).on('CornerstoneToolsMouseDrag', whichMovement);
        $(element).on('CornerstoneToolsMouseMove', whichMovement);
        $(element).on('CornerstoneToolsMeasurementRemoved', measurementRemovedCallback);

        function moveEndCallback() {
            $(element).off('CornerstoneToolsMouseMove', moveCallback);
            $(element).off('CornerstoneToolsMouseDrag', moveCallback);
            $(element).off('CornerstoneToolsMouseClick', moveEndCallback);
            $(element).off('CornerstoneToolsMouseUp', moveEndCallback);
            $(element).off('CornerstoneToolsMeasurementRemoved', measurementRemovedCallback);

            handle.active = false;
            cornerstone.updateImage(element);

            if (typeof doneMovingCallback === 'function') {
                doneMovingCallback();
            }
        }
    }

    // module/private exports
    cornerstoneTools.moveNewHandle = moveNewHandle;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/manipulators/moveNewHandle.js

// Begin Source: src/manipulators/moveNewHandleTouch.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function moveNewHandleTouch(eventData, toolType, data, handle, doneMovingCallback, preventHandleOutsideImage) {
        var element = eventData.element;
        var imageCoords = cornerstone.pageToPixel(element, eventData.currentPoints.page.x, eventData.currentPoints.page.y + 50);
        var distanceFromTouch = {
            x: handle.x - imageCoords.x,
            y: handle.y - imageCoords.y
        };

        function moveCallback(e, eventData) {
            handle.active = true;
            handle.x = eventData.currentPoints.image.x + distanceFromTouch.x;
            handle.y = eventData.currentPoints.image.y + distanceFromTouch.y;
            
            if (preventHandleOutsideImage) {
                handle.x = Math.max(handle.x, 0);
                handle.x = Math.min(handle.x, eventData.image.width);

                handle.y = Math.max(handle.y, 0);
                handle.y = Math.min(handle.y, eventData.image.height);
            }

            cornerstone.updateImage(element);

            var eventType = 'CornerstoneToolsMeasurementModified';
            var modifiedEventData = {
                toolType: toolType,
                element: element,
                measurementData: data
            };
            $(element).trigger(eventType, modifiedEventData);
        }
        
        function moveEndCallback(e, eventData) {
            $(element).off('CornerstoneToolsTouchDrag', moveCallback);
            $(element).off('CornerstoneToolsTouchPinch', moveEndCallback);
            $(element).off('CornerstoneToolsTouchPress', moveEndCallback);
            $(element).off('CornerstoneToolsTouchEnd', moveEndCallback);
            $(element).off('CornerstoneToolsDragEnd', moveEndCallback);
            $(element).off('CornerstoneToolsTap', moveEndCallback);

            if (e.type === 'CornerstoneToolsTouchPinch' || e.type === 'CornerstoneToolsTouchPress') {
                handle.active = false;
                cornerstone.updateImage(element);
                doneMovingCallback();
                return;
            }

            handle.active = false;
            handle.x = eventData.currentPoints.image.x + distanceFromTouch.x;
            handle.y = eventData.currentPoints.image.y + distanceFromTouch.y;
            
            if (preventHandleOutsideImage) {
                handle.x = Math.max(handle.x, 0);
                handle.x = Math.min(handle.x, eventData.image.width);

                handle.y = Math.max(handle.y, 0);
                handle.y = Math.min(handle.y, eventData.image.height);
            }

            cornerstone.updateImage(element);

            if (typeof doneMovingCallback === 'function') {
                doneMovingCallback();
            }
        }

        $(element).on('CornerstoneToolsTouchDrag', moveCallback);
        $(element).on('CornerstoneToolsTouchPinch', moveEndCallback);
        $(element).on('CornerstoneToolsTouchPress', moveEndCallback);
        $(element).on('CornerstoneToolsTouchEnd', moveEndCallback);
        $(element).on('CornerstoneToolsDragEnd', moveEndCallback);
        $(element).on('CornerstoneToolsTap', moveEndCallback);
    }

    // module/private exports
    cornerstoneTools.moveNewHandleTouch = moveNewHandleTouch;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/manipulators/moveNewHandleTouch.js

// Begin Source: src/manipulators/touchMoveAllHandles.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    function touchMoveAllHandles(touchEventData, data, toolData, toolType, deleteIfHandleOutsideImage, doneMovingCallback) {
        //console.log('touchMoveAllHandles');
        var element = touchEventData.element;

        function touchDragCallback(e, eventData) {
            //console.log('touchMoveAllHandles touchDragCallback');
            data.active = true;
            
            Object.keys(data.handles).forEach(function(name) {
                var handle = data.handles[name];
                if (handle.movesIndependently === true) {
                    return;
                }
                
                handle.x += eventData.deltaPoints.image.x;
                handle.y += eventData.deltaPoints.image.y;
            });
            cornerstone.updateImage(element);

            var eventType = 'CornerstoneToolsMeasurementModified';
            var modifiedEventData = {
                toolType: toolType,
                element: element,
                measurementData: data
            };
            $(element).trigger(eventType, modifiedEventData);

            return false; // false = causes jquery to preventDefault() and stopPropagation() this event
        }

        $(element).on('CornerstoneToolsTouchDrag', touchDragCallback);

        function touchEndCallback(e, eventData) {
            //console.log('touchMoveAllHandles touchEndCallback');
            data.active = false;
            data.invalidated = false;

            $(element).off('CornerstoneToolsTouchDrag', touchDragCallback);
            $(element).off('CornerstoneToolsTouchPinch', touchEndCallback);
            $(element).off('CornerstoneToolsTouchPress', touchEndCallback);
            $(element).off('CornerstoneToolsTouchEnd', touchEndCallback);
            $(element).off('CornerstoneToolsDragEnd', touchEndCallback);
            $(element).off('CornerstoneToolsTap', touchEndCallback);

            // If any handle is outside the image, delete the tool data
            if (deleteIfHandleOutsideImage === true) {
                var image = eventData.image;
                var handleOutsideImage = false;
                var rect = {
                    top: 0,
                    left: 0,
                    width: image.width,
                    height: image.height
                };
                
                Object.keys(data.handles).forEach(function(name) {
                    var handle = data.handles[name];
                    if (cornerstoneMath.point.insideRect(handle, rect) === false) {
                        handleOutsideImage = true;
                        return;
                    }
                });

                if (handleOutsideImage) {
                    // find this tool data
                    var indexOfData = -1;
                    for (var i = 0; i < toolData.data.length; i++) {
                        if (toolData.data[i] === data) {
                            indexOfData = i;
                        }
                    }

                    if (indexOfData !== -1) {
                        toolData.data.splice(indexOfData, 1);
                    }
                }
            }

            if (typeof doneMovingCallback === 'function') {
                doneMovingCallback();
            }

            cornerstone.updateImage(element);
        }

        $(element).on('CornerstoneToolsTouchPinch', touchEndCallback);
        $(element).on('CornerstoneToolsTouchPress', touchEndCallback);
        $(element).on('CornerstoneToolsTouchEnd', touchEndCallback);
        $(element).on('CornerstoneToolsDragEnd', touchEndCallback);
        $(element).on('CornerstoneToolsTap', touchEndCallback);
        return true;
    }

    // module/private exports
    cornerstoneTools.touchMoveAllHandles = touchMoveAllHandles;

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/manipulators/touchMoveAllHandles.js

// Begin Source: src/manipulators/touchMoveHandle.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function touchMoveHandle(touchEventData, toolType, data, handle, doneMovingCallback) {
        //console.log('touchMoveHandle');
        var element = touchEventData.element;
        var distanceFromTouch = {
            x: handle.x - touchEventData.currentPoints.image.x,
            y: handle.y - touchEventData.currentPoints.image.y
        };

        function touchDragCallback(e, eventData) {
            handle.active = true;
            var touchMoveData = eventData;
            handle.x = touchMoveData.currentPoints.image.x + distanceFromTouch.x;
            handle.y = touchMoveData.currentPoints.image.y + distanceFromTouch.y;
            cornerstone.updateImage(element);

            var eventType = 'CornerstoneToolsMeasurementModified';
            var modifiedEventData = {
                toolType: toolType,
                element: element,
                measurementData: data
            };
            $(element).trigger(eventType, modifiedEventData);
        }

        $(element).on('CornerstoneToolsTouchDrag', touchDragCallback);

        function touchEndCallback() {
            handle.active = false;
            $(element).off('CornerstoneToolsTouchDrag', touchDragCallback);
            $(element).off('CornerstoneToolsTouchPinch', touchEndCallback);
            $(element).off('CornerstoneToolsTouchEnd', touchEndCallback);
            $(element).off('CornerstoneToolsDragEnd', touchEndCallback);
            $(element).off('CornerstoneToolsTap', touchEndCallback);
            cornerstone.updateImage(element);

            if (typeof doneMovingCallback === 'function') {
                doneMovingCallback();
            }
        }

        $(element).on('CornerstoneToolsTouchPinch', touchEndCallback);
        $(element).on('CornerstoneToolsTouchEnd', touchEndCallback);
        $(element).on('CornerstoneToolsDragEnd', touchEndCallback);
        $(element).on('CornerstoneToolsTap', touchEndCallback);
    }

    // module/private exports
    cornerstoneTools.touchMoveHandle = touchMoveHandle;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/manipulators/touchMoveHandle.js

// Begin Source: src/measurementManager/lineSample.js
(function($, cornerstoneTools) {

    'use strict';

    // This object manages a collection of measurements
    function LineSampleMeasurement() {

        var that = this;
        that.samples = [];

        // adds an element as both a source and a target
        this.set = function(samples) {
            that.samples = samples;
            // fire event
            $(that).trigger('CornerstoneLineSampleUpdated');
        };
    }

    // module/private exports
    cornerstoneTools.LineSampleMeasurement = LineSampleMeasurement;

})($, cornerstoneTools);
 
// End Source; src/measurementManager/lineSample.js

// Begin Source: src/measurementManager/measurementManager.js
(function($, cornerstoneTools) {

    'use strict';

    // This object manages a collection of measurements
    function MeasurementManager() {

        var that = this;
        that.measurements = [];

        // adds an element as both a source and a target
        this.add = function(measurement) {
            var index = that.measurements.push(measurement);
            // fire event
            var eventDetail = {
                index: index,
                measurement: measurement
            };
            $(that).trigger('CornerstoneMeasurementAdded', eventDetail);
        };

        this.remove = function(index) {
            var measurement = that.measurements[index];
            that.measurements.splice(index, 1);
            // fire event
            var eventDetail = {
                index: index,
                measurement: measurement
            };
            $(that).trigger('CornerstoneMeasurementRemoved', eventDetail);
        };

    }

    // module/private exports
    cornerstoneTools.MeasurementManager = new MeasurementManager();

})($, cornerstoneTools);
 
// End Source; src/measurementManager/measurementManager.js

// Begin Source: src/metaData.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    // this module defines a way for tools to access various metadata about an imageId.  This layer of abstraction exists
    // so metadata can be provided to the tools in different ways (e.g. by parsing DICOM P10 or by a WADO-RS document)
    // NOTE: We may want to push this function down into the cornerstone core library, not sure yet...

    var providers = [];

    function addProvider( provider) {
        providers.push(provider);
    }

    function removeProvider( provider) {
        var index = providers.indexOf(provider);
        if (index === -1) {
            return;
        }

        providers.splice(index, 1);
    }

    function getMetaData(type, imageId) {
        var result;
        $.each(providers, function(index, provider) {
            result = provider(type, imageId);
            if (result !== undefined) {
                return true;
            }
        });
        return result;
    }

    // module/private exports
    cornerstoneTools.metaData = {
        addProvider: addProvider,
        removeProvider: removeProvider,
        get: getMetaData
    };

})($, cornerstone, cornerstoneTools);
 
// End Source; src/metaData.js

// Begin Source: src/orientation/getOrientationString.js
(function(cornerstoneMath, cornerstoneTools) {

    'use strict';

    function getOrientationString(vector) {
        // Thanks to David Clunie
        // https://sites.google.com/site/dicomnotes/

        var orientation = '',
            orientationX = vector.x < 0 ? 'R' : 'L',
            orientationY = vector.y < 0 ? 'A' : 'P',
            orientationZ = vector.z < 0 ? 'F' : 'H';

        // Should probably make this a function vector3.abs
        var abs = new cornerstoneMath.Vector3(Math.abs(vector.x), Math.abs(vector.y), Math.abs(vector.z));

        for (var i = 0; i < 3; i++) {
            if (abs.x > 0.0001 && abs.x > abs.y && abs.x > abs.z) {
                orientation += orientationX;
                abs.x = 0;
            } else if (abs.y > 0.0001 && abs.y > abs.x && abs.y > abs.z) {
                orientation += orientationY;
                abs.y = 0;
            } else if (abs.z > 0.0001 && abs.z > abs.x && abs.z > abs.y) {
                orientation += orientationZ;
                abs.z = 0;
            } else {
                break;
            }
        }

        return orientation;
    }

    // module/private exports
    cornerstoneTools.orientation.getOrientationString = getOrientationString;

})(cornerstoneMath, cornerstoneTools);
 
// End Source; src/orientation/getOrientationString.js

// Begin Source: src/orientation/invertOrientationString.js
(function(cornerstoneTools) {

    'use strict';

    function invertOrientationString(string) {
        var inverted = string.replace('H', 'f');
        inverted = inverted.replace('F', 'h');
        inverted = inverted.replace('R', 'l');
        inverted = inverted.replace('L', 'r');
        inverted = inverted.replace('A', 'p');
        inverted = inverted.replace('P', 'a');
        inverted = inverted.toUpperCase();
        return inverted;
    }

    // module/private exports
    cornerstoneTools.orientation.invertOrientationString = invertOrientationString;

})(cornerstoneTools);
 
// End Source; src/orientation/invertOrientationString.js

// Begin Source: src/referenceLines/calculateReferenceLine.js
(function(cornerstoneTools) {

    'use strict';

    // calculates a reference line between two planes by projecting the top left hand corner and bottom right hand corner
    // of the reference image onto the target image.  Ideally we would calculate the intersection between the planes but
    // that requires a bit more math and this works fine for most cases
    function calculateReferenceLine(targetImagePlane, referenceImagePlane) {
        var points = cornerstoneTools.planePlaneIntersection(targetImagePlane, referenceImagePlane);
        if (!points) {
            return;
        }

        return {
            start: cornerstoneTools.projectPatientPointToImagePlane(points.start, targetImagePlane),
            end: cornerstoneTools.projectPatientPointToImagePlane(points.end, targetImagePlane)
        };
    }

    // module/private exports
    cornerstoneTools.referenceLines.calculateReferenceLine = calculateReferenceLine;

})(cornerstoneTools);
 
// End Source; src/referenceLines/calculateReferenceLine.js

// Begin Source: src/referenceLines/referenceLinesTool.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    var toolType = 'referenceLines';

    function onImageRendered(e, eventData) {
        // if we have no toolData for this element, return immediately as there is nothing to do
        var toolData = cornerstoneTools.getToolState(e.currentTarget, toolType);
        if (toolData === undefined) {
            return;
        }

        // Get the enabled elements associated with this synchronization context and draw them
        var syncContext = toolData.data[0].synchronizationContext;
        var enabledElements = syncContext.getSourceElements();

        var renderer = toolData.data[0].renderer;

        // Create the canvas context and reset it to the pixel coordinate system
        var context = eventData.canvasContext.canvas.getContext('2d');
        cornerstone.setToPixelCoordinateSystem(eventData.enabledElement, context);

        // Iterate over each referenced element
        $.each(enabledElements, function(index, referenceEnabledElement) {

            // don't draw ourselves
            if (referenceEnabledElement === e.currentTarget) {
                return;
            }

            // render it
            renderer(context, eventData, e.currentTarget, referenceEnabledElement);
        });
    }

    // enables the reference line tool for a given element.  Note that a custom renderer
    // can be provided if you want different rendering (e.g. all reference lines, first/last/active, etc)
    function enable(element, synchronizationContext, renderer) {
        renderer = renderer || cornerstoneTools.referenceLines.renderActiveReferenceLine;

        cornerstoneTools.addToolState(element, toolType, {
            synchronizationContext: synchronizationContext,
            renderer: renderer
        });
        $(element).on('CornerstoneImageRendered', onImageRendered);
        cornerstone.updateImage(element);
    }

    // disables the reference line tool for the given element
    function disable(element) {
        $(element).off('CornerstoneImageRendered', onImageRendered);
        cornerstone.updateImage(element);
    }

    // module/private exports
    cornerstoneTools.referenceLines.tool = {
        enable: enable,
        disable: disable

    };

})($, cornerstone, cornerstoneTools);
 
// End Source; src/referenceLines/referenceLinesTool.js

// Begin Source: src/referenceLines/renderActiveReferenceLine.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    // renders the active reference line
    function renderActiveReferenceLine(context, eventData, targetElement, referenceElement) {
        var targetImage = cornerstone.getEnabledElement(targetElement).image;
        var referenceImage = cornerstone.getEnabledElement(referenceElement).image;

        // make sure the images are actually loaded for the target and reference
        if (!targetImage || !referenceImage) {
            return;
        }

        var targetImagePlane = cornerstoneTools.metaData.get('imagePlane', targetImage.imageId);
        var referenceImagePlane = cornerstoneTools.metaData.get('imagePlane', referenceImage.imageId);

        // Make sure the target and reference actually have image plane metadata
        if (!targetImagePlane || !referenceImagePlane) {
            return;
        }

        // the image planes must be in the same frame of reference
        if (targetImagePlane.frameOfReferenceUID !== referenceImagePlane.frameOfReferenceUID) {
            return;
        }

        // the image plane normals must be > 30 degrees apart
        var targetNormal = targetImagePlane.rowCosines.clone().cross(targetImagePlane.columnCosines);
        var referenceNormal = referenceImagePlane.rowCosines.clone().cross(referenceImagePlane.columnCosines);
        var angleInRadians = targetNormal.angleTo(referenceNormal);

        angleInRadians = Math.abs(angleInRadians);
        if (angleInRadians < 0.5) { // 0.5 radians = ~30 degrees
            return;
        }

        var referenceLine = cornerstoneTools.referenceLines.calculateReferenceLine(targetImagePlane, referenceImagePlane);
        if (!referenceLine) {
            return;
        }

        var refLineStartCanvas = cornerstone.pixelToCanvas(eventData.element, referenceLine.start);
        var refLineEndCanvas = cornerstone.pixelToCanvas(eventData.element, referenceLine.end);

        var color = cornerstoneTools.toolColors.getActiveColor();
        var lineWidth = cornerstoneTools.toolStyle.getToolWidth();

        // draw the referenceLines
        context.setTransform(1, 0, 0, 1, 0, 0);

        context.save();
        context.beginPath();
        context.strokeStyle = color;
        context.lineWidth = lineWidth;
        context.moveTo(refLineStartCanvas.x, refLineStartCanvas.y);
        context.lineTo(refLineEndCanvas.x, refLineEndCanvas.y);
        context.stroke();
        context.restore();
    }

    // module/private exports
    cornerstoneTools.referenceLines.renderActiveReferenceLine = renderActiveReferenceLine;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/referenceLines/renderActiveReferenceLine.js

// Begin Source: src/requestPool/requestPoolManager.js
(function(cornerstone, cornerstoneTools) {

    'use strict';

    var requestPool = {
        interaction: [],
        thumbnail: [],
        prefetch: []
    };

    var numRequests = {
        interaction: 0,
        thumbnail: 0,
        prefetch: 0
    };

    var maxNumRequests = {
        interaction: 6,
        thumbnail: 6,
        prefetch: 5
    };
    
    var lastElementInteracted;
    var awake = false;
    var grabDelay = 20;

    function requestPoolManager() {

        function addRequest(element, imageId, type, preventCache, doneCallback, failCallback) {
            if (!requestPool.hasOwnProperty(type)) {
                throw 'Request type must be one of interaction, thumbnail, or prefetch';
            }

            if (!element || !imageId) {
                return;
            }

            // Describe the request
            var requestDetails = {
                type: type,
                imageId: imageId,
                preventCache: preventCache,
                doneCallback: doneCallback,
                failCallback: failCallback
            };

            // If this imageId is in the cache, resolve it immediately
            var imagePromise = cornerstone.imageCache.getImagePromise(imageId);
            if (imagePromise) {
                imagePromise.then(function(image) {
                    doneCallback(image);
                }, function(error) {
                    failCallback(error);
                });
                return;
            }

            // Add it to the end of the stack
            requestPool[type].push(requestDetails);

            // Store the last element interacted with,
            // So we know which images to prefetch
            //
            // ---- Not used for now ----
            if (type === 'interaction') {
                lastElementInteracted = element;
            }
        }

        function clearRequestStack(type) {
            //console.log('clearRequestStack');
            if (!requestPool.hasOwnProperty(type)) {
                throw 'Request type must be one of interaction, thumbnail, or prefetch';
            }

            requestPool[type] = [];
        }

        function startAgain() {
            if (!awake) {
                return;
            }

            setTimeout(function() {
                var requestDetails = getNextRequest();
                if (!requestDetails) {
                    return;
                }

                sendRequest(requestDetails);
            }, grabDelay);
        }

        function sendRequest(requestDetails) {
            // Increment the number of current requests of this type
            var type = requestDetails.type;
            numRequests[type]++;

            awake = true;
            var imageId = requestDetails.imageId;
            var doneCallback = requestDetails.doneCallback;
            var failCallback = requestDetails.failCallback;
            
            // Check if we already have this image promise in the cache
            var imagePromise = cornerstone.imageCache.getImagePromise(imageId);
            if (imagePromise) {
                // If we do, remove from list (when resolved, as we could have
                // pending prefetch requests) and stop processing this iteration
                imagePromise.then(function(image) {
                    numRequests[type]--;
                    // console.log(numRequests);

                    doneCallback(image);
                    startAgain();
                }, function(error) {
                    numRequests[type]--;
                    // console.log(numRequests);
                    failCallback(error);
                });
                return;
            }

            var loader;
            if (requestDetails.preventCache === true) {
                loader = cornerstone.loadImage(imageId);
            } else {
                loader = cornerstone.loadAndCacheImage(imageId);
            }

            // Load and cache the image
            loader.then(function(image) {
                numRequests[type]--;
                // console.log(numRequests);
                doneCallback(image);
                startAgain();
            }, function(error) {
                numRequests[type]--;
                // console.log(numRequests);
                failCallback(error);
            });
        }

        function startGrabbing() {
            // Begin by grabbing X images
            if (awake) {
                return;
            }

            var maxSimultaneousRequests = cornerstoneTools.getMaxSimultaneousRequests();
            
            maxNumRequests = {
                interaction: maxSimultaneousRequests,
                thumbnail: maxSimultaneousRequests - 2,
                prefetch: maxSimultaneousRequests - 1
            };

            for (var i = 0; i < maxSimultaneousRequests; i++) {
                var requestDetails = getNextRequest();
                if (requestDetails) {
                    sendRequest(requestDetails);
                }
            }

            //console.log("startGrabbing");
            //console.log(requestPool);
        }

        function getNextRequest() {
            if (requestPool.interaction.length && numRequests.interaction < maxNumRequests.interaction) {
                return requestPool.interaction.shift();
            }

            if (requestPool.thumbnail.length && numRequests.thumbnail < maxNumRequests.thumbnail) {
                return requestPool.thumbnail.shift();
            }

            if (requestPool.prefetch.length && numRequests.prefetch < maxNumRequests.prefetch) {
                return requestPool.prefetch.shift();
            }

            if (!requestPool.interaction.length &&
                !requestPool.thumbnail.length &&
                !requestPool.prefetch.length) {
                awake = false;
            }

            return false;
        }

        function getRequestPool() {
            return requestPool;
        }

        var requestManager = {
            addRequest: addRequest,
            clearRequestStack: clearRequestStack,
            startGrabbing: startGrabbing,
            getRequestPool: getRequestPool
        };

        return requestManager;
    }

    // module/private exports
    cornerstoneTools.requestPoolManager = requestPoolManager();

})(cornerstone, cornerstoneTools);
 
// End Source; src/requestPool/requestPoolManager.js

// Begin Source: src/stackTools/playClip.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    var toolType = 'playClip';

    /**
     * Starts playing a clip or adjusts the frame rate of an already playing clip.  framesPerSecond is
     * optional and defaults to 30 if not specified.  A negative framesPerSecond will play the clip in reverse.
     * The element must be a stack of images
     * @param element
     * @param framesPerSecond
     */
    function playClip(element, framesPerSecond) {
        if (element === undefined) {
            throw 'playClip: element must not be undefined';
        }

        if (framesPerSecond === undefined) {
            framesPerSecond = 30;
        }

        var stackToolData = cornerstoneTools.getToolState(element, 'stack');
        if (stackToolData === undefined || stackToolData.data === undefined || stackToolData.data.length === 0) {
            return;
        }

        var stackData = stackToolData.data[0];

        var playClipToolData = cornerstoneTools.getToolState(element, toolType);
        var playClipData;
        
        if (playClipToolData === undefined || playClipToolData.data.length === 0) {
            playClipData = {
                intervalId: undefined,
                framesPerSecond: framesPerSecond,
                lastFrameTimeStamp: undefined,
                frameRate: 0,
                loop: true
            };
            cornerstoneTools.addToolState(element, toolType, playClipData);
        } else {
            playClipData = playClipToolData.data[0];
            playClipData.framesPerSecond = framesPerSecond;
        }

        // if already playing, do not set a new interval
        if (playClipData.intervalId !== undefined) {
            return;
        }

        playClipData.intervalId = setInterval(function() {

            var newImageIdIndex = stackData.currentImageIdIndex;

            if (playClipData.framesPerSecond > 0) {
                newImageIdIndex++;
            } else {
                newImageIdIndex--;
            }

            if (!playClipData.loop && (newImageIdIndex >= stackData.imageIds.length || newImageIdIndex < 0)) {
                
                var eventDetail = {
                    element: element
                };
                var event = $.Event('CornerstoneToolsClipStopped', eventDetail);
                $(element).trigger(event, eventDetail);

                clearInterval(playClipData.intervalId);
                playClipData.intervalId = undefined;
                return;
            }

            // loop around if we go outside the stack
            if (newImageIdIndex >= stackData.imageIds.length) {
                newImageIdIndex = 0;
            }

            if (newImageIdIndex < 0) {
                newImageIdIndex = stackData.imageIds.length - 1;
            }

            if (newImageIdIndex !== stackData.currentImageIdIndex) {
                var startLoadingHandler = cornerstoneTools.loadHandlerManager.getStartLoadHandler();
                var endLoadingHandler = cornerstoneTools.loadHandlerManager.getEndLoadHandler();
                var errorLoadingHandler = cornerstoneTools.loadHandlerManager.getErrorLoadingHandler();

                if (startLoadingHandler) {
                    startLoadingHandler(element);
                }

                var viewport = cornerstone.getViewport(element);

                var loader;
                if (stackData.preventCache === true) {
                    loader = cornerstone.loadImage(stackData.imageIds[newImageIdIndex]);
                } else {
                    loader = cornerstone.loadAndCacheImage(stackData.imageIds[newImageIdIndex]);
                }

                loader.then(function(image) {
                    stackData.currentImageIdIndex = newImageIdIndex;
                    cornerstone.displayImage(element, image, viewport);
                    if (endLoadingHandler) {
                        endLoadingHandler(element);
                    }
                }, function(error) {
                    var imageId = stackData.imageIds[newImageIdIndex];
                    if (errorLoadingHandler) {
                        errorLoadingHandler(element, imageId, error);
                    }
                });
            }
        }, 1000 / Math.abs(playClipData.framesPerSecond));
    }

    /**
     * Stops an already playing clip.
     * * @param element
     */
    function stopClip(element) {
        var playClipToolData = cornerstoneTools.getToolState(element, toolType);
        var playClipData;
        if (playClipToolData === undefined || playClipToolData.data.length === 0) {
            return;
        } else {
            playClipData = playClipToolData.data[0];
        }

        clearInterval(playClipData.intervalId);
        playClipData.intervalId = undefined;
    }

    // module/private exports
    cornerstoneTools.playClip = playClip;
    cornerstoneTools.stopClip = stopClip;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/stackTools/playClip.js

// Begin Source: src/stackTools/scrollIndicator.js
/*
Display scroll progress bar across bottom of image.
 */
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    var scrollBarHeight = 6;

    var configuration = {
        backgroundColor: 'rgb(19, 63, 141)',
        fillColor: 'white'
    };

    function onImageRendered(e, eventData){
        var element = eventData.element;
        var width = eventData.enabledElement.canvas.width;
        var height = eventData.enabledElement.canvas.height;

        if (!width || !height) {
            return false;
        }

        var context = eventData.enabledElement.canvas.getContext('2d');
        context.setTransform(1, 0, 0, 1, 0, 0);
        context.save();

        var config = cornerstoneTools.scrollIndicator.getConfiguration();

        // draw indicator background
        context.fillStyle = config.backgroundColor;
        context.fillRect(0, height - scrollBarHeight, width, scrollBarHeight);

        // get current image index
        var stackData = cornerstoneTools.getToolState(element, 'stack');
        if (!stackData || !stackData.data || !stackData.data.length) {
            return;
        }

        var imageIds = stackData.data[0].imageIds;
        var currentImageIdIndex = stackData.data[0].currentImageIdIndex;

        // draw current image cursor
        var cursorWidth = width / imageIds.length;
        var xPosition = cursorWidth * currentImageIdIndex;

        context.fillStyle = config.fillColor;
        context.fillRect(xPosition, height - scrollBarHeight, cursorWidth, scrollBarHeight);

        context.restore();
    }

    cornerstoneTools.scrollIndicator = cornerstoneTools.displayTool(onImageRendered);
    cornerstoneTools.scrollIndicator.setConfiguration(configuration);

})($, cornerstone, cornerstoneTools);
 
// End Source; src/stackTools/scrollIndicator.js

// Begin Source: src/stackTools/stackPrefetch.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    var toolType = 'stackPrefetch';
    var requestType = 'prefetch';

    var configuration = {};

    var resetPrefetchTimeout,
        resetPrefetchDelay;

    function sortNumber(a, b) {
        // http://stackoverflow.com/questions/1063007/how-to-sort-an-array-of-integers-correctly
        return a - b;
    }

    function range(lowEnd, highEnd) {
        // Javascript version of Python's range function
        // http://stackoverflow.com/questions/3895478/does-javascript-have-a-method-like-range-to-generate-an-array-based-on-suppl
        lowEnd = Math.round(lowEnd) || 0;
        highEnd = Math.round(highEnd) || 0;

        var arr = [],
            c = highEnd - lowEnd + 1;

        if (c <= 0) {
            return arr;
        }

        while ( c-- ) {
            arr[c] = highEnd--;
        }

        return arr;
    }

    var max = function(arr) {
        return Math.max.apply(null, arr);
    };

    var min = function(arr) {
        return Math.min.apply(null, arr);
    };

    function nearestIndex(arr, x) {
        // Return index of nearest values in array
        // http://stackoverflow.com/questions/25854212/return-index-of-nearest-values-in-an-array        
        var l = [],
            h = [];

        arr.forEach(function(v) {
            if (v < x) {
                l.push(v);
            } else if (v > x) {
                h.push(v);
            }
        });
       
        return {
            low: arr.indexOf(max(l)),
            high: arr.indexOf(min(h))
        };
    }

    function prefetch(element) {
        // Check to make sure stack data exists
        var stackData = cornerstoneTools.getToolState(element, 'stack');
        if (!stackData || !stackData.data || !stackData.data.length) {
            return;
        }

        var stack = stackData.data[0];

        // Get the stackPrefetch tool data
        var stackPrefetchData = cornerstoneTools.getToolState(element, toolType);
        if (!stackPrefetchData) {
            return;
        }

        var stackPrefetch = stackPrefetchData.data[0];

        // If all the requests are complete, disable the stackPrefetch tool
        if (!stackPrefetch || !stackPrefetch.indicesToRequest || !stackPrefetch.indicesToRequest.length) {
            stackPrefetch.enabled = false;
        }

        // Make sure the tool is still enabled
        if (stackPrefetch.enabled === false) {
            return;
        }

        // Remove an imageIdIndex from the list of indices to request
        // This fires when the individual image loading deferred is resolved        
        function removeFromList(imageIdIndex) {
            var index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);
            if (index > -1) { // don't remove last element if imageIdIndex not found
                stackPrefetch.indicesToRequest.splice(index, 1);
            }
        }
        
        // Remove all already cached images from the
        // indicesToRequest array
        stackPrefetchData.data[0].indicesToRequest.sort(sortNumber);
        var indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();

        indicesToRequestCopy.forEach(function(imageIdIndex) {
            var imageId = stack.imageIds[imageIdIndex];

            if (!imageId) {
                return;
            }

            var imagePromise = cornerstone.imageCache.getImagePromise(imageId);
            if (imagePromise && imagePromise.state() === 'resolved'){
                removeFromList(imageIdIndex);
            }
        });

        // Stop here if there are no images left to request
        // After those in the cache have been removed
        if (!stackPrefetch.indicesToRequest.length) {
            return;
        }

        function doneCallback(image) {
            //console.log('prefetch done: ' + image.imageId);
            var imageIdIndex = stack.imageIds.indexOf(image.imageId);
            removeFromList(imageIdIndex);
        }

        function failCallback(error) {
            console.log('prefetch errored: ' + error);
        }

        // Clear the requestPool of prefetch requests
        var requestPoolManager = cornerstoneTools.requestPoolManager;
        requestPoolManager.clearRequestStack(requestType);

        // Identify the nearest imageIdIndex to the currentImageIdIndex 
        var nearest = nearestIndex(stackPrefetch.indicesToRequest, stack.currentImageIdIndex);

        var imageId,
            nextImageIdIndex,
            preventCache = false;

        // Prefetch images around the current image (before and after)
        var lowerIndex = nearest.low;
        var higherIndex = nearest.high;
        while (lowerIndex > 0 || higherIndex < stackPrefetch.indicesToRequest.length) {
            if (lowerIndex >= 0 ) {
                nextImageIdIndex = stackPrefetch.indicesToRequest[lowerIndex--];
                imageId = stack.imageIds[nextImageIdIndex];
                requestPoolManager.addRequest(element, imageId, requestType, preventCache, doneCallback, failCallback);
            }

            if (higherIndex < stackPrefetch.indicesToRequest.length) {
                nextImageIdIndex = stackPrefetch.indicesToRequest[higherIndex++];
                imageId = stack.imageIds[nextImageIdIndex];
                requestPoolManager.addRequest(element, imageId, requestType, preventCache, doneCallback, failCallback);
            }
        }

        // Try to start the requestPool's grabbing procedure
        // in case it isn't already running
        requestPoolManager.startGrabbing();
    }

    function handleCacheFull(e) {
        // Stop prefetching if the ImageCacheFull event is fired from cornerstone
        // console.log('CornerstoneImageCacheFull full, stopping');
        var element = e.data.element;

        var stackPrefetchData = cornerstoneTools.getToolState(element, toolType);
        if (!stackPrefetchData || !stackPrefetchData.data || !stackPrefetchData.data.length) {
            return;
        }

        // Disable the stackPrefetch tool
        // stackPrefetchData.data[0].enabled = false;

        // Clear current prefetch requests from the requestPool
        cornerstoneTools.requestPoolManager.clearRequestStack(requestType);
    }

    function promiseRemovedHandler(e, eventData) {
        // When an imagePromise has been pushed out of the cache, re-add its index
        // it to the indicesToRequest list so that it will be retrieved later if the
        // currentImageIdIndex is changed to an image nearby
        var element = e.data.element;
        var stackData = cornerstoneTools.getToolState(element, 'stack');
        if (!stackData || !stackData.data || !stackData.data.length) {
            return;
        }

        var stack = stackData.data[0];
        var imageIdIndex = stack.imageIds.indexOf(eventData.imageId);

        // Make sure the image that was removed is actually in this stack
        // before adding it to the indicesToRequest array
        if (imageIdIndex < 0) {
            return;
        }
        
        var stackPrefetchData = cornerstoneTools.getToolState(element, toolType);
        if (!stackPrefetchData || !stackPrefetchData.data || !stackPrefetchData.data.length) {
            return;
        }

        stackPrefetchData.data[0].indicesToRequest.push(imageIdIndex);
    }

    function onImageUpdated(e) {
        // Start prefetching again (after a delay)
        // When the user has scrolled to a new image
        clearTimeout(resetPrefetchTimeout);
        resetPrefetchTimeout = setTimeout(function() {
            var element = e.currentTarget;
            prefetch(element);
        }, resetPrefetchDelay);
    }

    function enable(element) {
        // Clear old prefetch data. Skipping this can cause problems when changing the series inside an element
        var stackPrefetchDataArray = cornerstoneTools.getToolState(element, toolType);
        stackPrefetchDataArray.data = [];

        // First check that there is stack data available
        var stackData = cornerstoneTools.getToolState(element, 'stack');
        if (!stackData || !stackData.data || !stackData.data.length) {
            return;
        }

        var stack = stackData.data[0];

        // Check if we are allowed to cache images in this stack
        if (stack.preventCache === true) {
            console.warn('A stack that should not be cached was given the stackPrefetch');
            return;
        }

        // Use the currentImageIdIndex from the stack as the initalImageIdIndex
        var stackPrefetchData = {
            indicesToRequest: range(0, stack.imageIds.length - 1),
            enabled: true,
            direction: 1
        };

        // Remove the currentImageIdIndex from the list to request
        var indexOfCurrentImage = stackPrefetchData.indicesToRequest.indexOf(stack.currentImageIdIndex);
        stackPrefetchData.indicesToRequest.splice(indexOfCurrentImage, 1);

        cornerstoneTools.addToolState(element, toolType, stackPrefetchData);

        prefetch(element);

        $(element).off('CornerstoneNewImage', onImageUpdated);
        $(element).on('CornerstoneNewImage', onImageUpdated);

        $(cornerstone).off('CornerstoneImageCacheFull', handleCacheFull);
        $(cornerstone).on('CornerstoneImageCacheFull', {
            element: element
        }, handleCacheFull);

        $(cornerstone).off('CornerstoneImageCachePromiseRemoved', promiseRemovedHandler);
        $(cornerstone).on('CornerstoneImageCachePromiseRemoved', {
            element: element
        }, promiseRemovedHandler);
    }

    function disable(element) {
        clearTimeout(resetPrefetchTimeout);
        $(element).off('CornerstoneNewImage', onImageUpdated);

        $(cornerstone).off('CornerstoneImageCacheFull', handleCacheFull);
        $(cornerstone).off('CornerstoneImageCachePromiseRemoved', promiseRemovedHandler);

        var stackPrefetchData = cornerstoneTools.getToolState(element, toolType);
        // If there is actually something to disable, disable it
        if (stackPrefetchData && stackPrefetchData.data.length) {
            stackPrefetchData.data[0].enabled = false;

            // Clear current prefetch requests from the requestPool
            cornerstoneTools.requestPoolManager.clearRequestStack(requestType);
        }
    }

    function getConfiguration () {
        return configuration;
    }

    function setConfiguration(config) {
        configuration = config;
    }

    // module/private exports
    cornerstoneTools.stackPrefetch = {
        enable: enable,
        disable: disable,
        getConfiguration: getConfiguration,
        setConfiguration: setConfiguration
    };

})($, cornerstone, cornerstoneTools);
 
// End Source; src/stackTools/stackPrefetch.js

// Begin Source: src/stackTools/stackScroll.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function mouseUpCallback(e, eventData) {
        $(eventData.element).off('CornerstoneToolsMouseDrag', dragCallback);
        $(eventData.element).off('CornerstoneToolsMouseUp', mouseUpCallback);
        $(eventData.element).off('CornerstoneToolsMouseClick', mouseUpCallback);
    }

    function mouseDownCallback(e, eventData) {
        if (cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {
            var mouseDragEventData = {
                deltaY: 0
            };
            $(eventData.element).on('CornerstoneToolsMouseDrag', mouseDragEventData, dragCallback);
            $(eventData.element).on('CornerstoneToolsMouseUp', mouseUpCallback);
            $(eventData.element).on('CornerstoneToolsMouseClick', mouseUpCallback);
            e.stopImmediatePropagation();
            return false;
        }
    }

    function mouseWheelCallback(e, eventData) {
        var images = -eventData.direction;
        cornerstoneTools.scroll(eventData.element, images);
    }

    function dragCallback(e, eventData) {
        var element = eventData.element;

        var toolData = cornerstoneTools.getToolState(element, 'stack');
        if (!toolData || !toolData.data || !toolData.data.length) {
            return;
        }
        
        var stackData = toolData.data[0];

        var config = cornerstoneTools.stackScroll.getConfiguration();

        // The Math.max here makes it easier to mouseDrag-scroll small image stacks
        var pixelsPerImage = $(element).height() / Math.max(stackData.imageIds.length, 8);
        if (config && config.stackScrollSpeed) {
            pixelsPerImage = config.stackScrollSpeed;
        }

        e.data.deltaY = e.data.deltaY || 0;
        e.data.deltaY += eventData.deltaPoints.page.y;
        if (Math.abs(e.data.deltaY) >= pixelsPerImage) {
            var imageDelta = e.data.deltaY / pixelsPerImage;
            var imageIdIndexOffset = Math.round(imageDelta);
            var imageDeltaMod = e.data.deltaY % pixelsPerImage;
            e.data.deltaY = imageDeltaMod;
            cornerstoneTools.scroll(element, imageIdIndexOffset);
        }

        return false; // false = causes jquery to preventDefault() and stopPropagation() this event
    }

    // module/private exports
    cornerstoneTools.stackScroll = cornerstoneTools.simpleMouseButtonTool(mouseDownCallback);
    cornerstoneTools.stackScrollWheel = cornerstoneTools.mouseWheelTool(mouseWheelCallback);

    var options = {
        eventData: {
            deltaY: 0
        }
    };
    cornerstoneTools.stackScrollTouchDrag = cornerstoneTools.touchDragTool(dragCallback, options);

})($, cornerstone, cornerstoneTools);
 
// End Source; src/stackTools/stackScroll.js

// Begin Source: src/stackTools/stackScrollKeyboard.js
(function(cornerstoneTools) {

    'use strict';

    var keys = {
        UP: 38,
        DOWN: 40
    };

    function keyDownCallback(e, eventData) {
        var keyCode = eventData.keyCode;
        if (keyCode !== keys.UP && keyCode !== keys.DOWN) {
            return;
        }

        var images = 1;
        if (keyCode === keys.DOWN) {
            images = -1;
        }

        cornerstoneTools.scroll(eventData.element, images);
    }

    // module/private exports
    cornerstoneTools.stackScrollKeyboard = cornerstoneTools.keyboardTool(keyDownCallback);

})(cornerstoneTools);
 
// End Source; src/stackTools/stackScrollKeyboard.js

// Begin Source: src/stateManagement/applicationState.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function saveApplicationState(elements) {
        // Save imageId-specific tool state data
        var appState = {
            imageIdToolState: cornerstoneTools.globalImageIdSpecificToolStateManager.saveToolState(),
            elementToolState: {},
            elementViewport: {}
        };

        // For each of the given elements, save the viewport and any stack-specific tool data
        elements.forEach(function(element) {
            var toolStateManager = cornerstoneTools.getElementToolStateManager(element);
            if (toolStateManager === cornerstoneTools.globalImageIdSpecificToolStateManager) {
                return;
            }

            appState.elementToolState[element.id] = toolStateManager.saveToolState();

            appState.elementViewport[element.id] = cornerstone.getViewport(element);
        });
        return appState;
    }

    function restoreApplicationState(appState) {
        // Make sure t
        if (!appState.hasOwnProperty('imageIdToolState') ||
            !appState.hasOwnProperty('elementToolState') ||
            !appState.hasOwnProperty('elementViewport')) {
            return;
        }

        // Restore all the imageId specific tool data
        cornerstoneTools.globalImageIdSpecificToolStateManager.restoreToolState(appState.imageIdToolState);

        Object.keys(appState.elementViewport).forEach(function(elementId) {
            // Restore any stack specific tool data
            var element = document.getElementById(elementId);
            if (!element) {
                return;
            }

            if (!appState.elementToolState.hasOwnProperty(elementId)) {
                return;
            }
            
            var toolStateManager = cornerstoneTools.getElementToolStateManager(element);
            if (toolStateManager === cornerstoneTools.globalImageIdSpecificToolStateManager) {
                return;
            }

            toolStateManager.restoreToolState(appState.elementToolState[elementId]);

            // Restore the saved viewport information
            var savedViewport = appState.elementViewport[elementId];
            cornerstone.setViewport(element, savedViewport);

            // Update the element to apply the viewport and tool changes
            cornerstone.updateImage(element);
        });
        return appState;
    }

    cornerstoneTools.appState = {
        save: saveApplicationState,
        restore: restoreApplicationState
    };

})($, cornerstone, cornerstoneTools);
 
// End Source; src/stateManagement/applicationState.js

// Begin Source: src/stateManagement/frameOfReferenceStateManager.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    // This implements a frame-of-reference specific tool state management strategy.  This means that
    // measurement data are tied to a specific frame of reference UID and only visible to objects using
    // that frame-of-reference UID

    function newFrameOfReferenceSpecificToolStateManager() {
        var toolState = {};

        // here we add tool state, this is done by tools as well
        // as modules that restore saved state
        function addFrameOfReferenceSpecificToolState(frameOfReference, toolType, data) {
            // if we don't have any tool state for this frameOfReference, add an empty object
            if (toolState.hasOwnProperty(frameOfReference) === false) {
                toolState[frameOfReference] = {};
            }

            var frameOfReferenceToolState = toolState[frameOfReference];

            // if we don't have tool state for this type of tool, add an empty object
            if (frameOfReferenceToolState.hasOwnProperty(toolType) === false) {
                frameOfReferenceToolState[toolType] = {
                    data: []
                };
            }

            var toolData = frameOfReferenceToolState[toolType];

            // finally, add this new tool to the state
            toolData.data.push(data);
        }

        // here you can get state - used by tools as well as modules
        // that save state persistently
        function getFrameOfReferenceSpecificToolState(frameOfReference, toolType) {
            // if we don't have any tool state for this frame of reference, return undefined
            if (toolState.hasOwnProperty(frameOfReference) === false) {
                return;
            }

            var frameOfReferenceToolState = toolState[frameOfReference];

            // if we don't have tool state for this type of tool, return undefined
            if (frameOfReferenceToolState.hasOwnProperty(toolType) === false) {
                return;
            }

            var toolData = frameOfReferenceToolState[toolType];
            return toolData;
        }

        function removeFrameOfReferenceSpecificToolState(frameOfReference, toolType, data) {
            // if we don't have any tool state for this frame of reference, return undefined
            if (toolState.hasOwnProperty(frameOfReference) === false) {
                return;
            }

            var frameOfReferenceToolState = toolState[frameOfReference];

            // if we don't have tool state for this type of tool, return undefined
            if (frameOfReferenceToolState.hasOwnProperty(toolType) === false) {
                return;
            }

            var toolData = frameOfReferenceToolState[toolType];
            // find this tool data
            var indexOfData = -1;
            for (var i = 0; i < toolData.data.length; i++) {
                if (toolData.data[i] === data) {
                    indexOfData = i;
                }
            }

            if (indexOfData !== -1) {
                toolData.data.splice(indexOfData, 1);
            }
        }

        var frameOfReferenceToolStateManager = {
            get: getFrameOfReferenceSpecificToolState,
            add: addFrameOfReferenceSpecificToolState,
            remove: removeFrameOfReferenceSpecificToolState
        };
        return frameOfReferenceToolStateManager;
    }

    // a global frameOfReferenceSpecificToolStateManager - the most common case is to share 3d information
    // between stacks of images
    var globalFrameOfReferenceSpecificToolStateManager = newFrameOfReferenceSpecificToolStateManager();
    
    // module/private exports
    cornerstoneTools.newFrameOfReferenceSpecificToolStateManager = newFrameOfReferenceSpecificToolStateManager;
    cornerstoneTools.globalFrameOfReferenceSpecificToolStateManager = globalFrameOfReferenceSpecificToolStateManager;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/stateManagement/frameOfReferenceStateManager.js

// Begin Source: src/stateManagement/imageIdSpecificStateManager.js
(function(cornerstone, cornerstoneTools) {

    'use strict';

    // This implements an imageId specific tool state management strategy.  This means that
    // measurements data is tied to a specific imageId and only visible for enabled elements
    // that are displaying that imageId.

    function newImageIdSpecificToolStateManager() {
        var toolState = {};

        // here we add tool state, this is done by tools as well
        // as modules that restore saved state

        function saveImageIdToolState(imageId) {
            return toolState[imageId];
        }

        function restoreImageIdToolState(imageId, imageIdToolState) {
            toolState[imageId] = imageIdToolState;
        }

        function saveToolState() {
            return toolState;
        }

        function restoreToolState(savedToolState) {
            toolState = savedToolState;
        }

        // here we add tool state, this is done by tools as well
        // as modules that restore saved state
        function addImageIdSpecificToolState(element, toolType, data) {
            var enabledImage = cornerstone.getEnabledElement(element);
            // if we don't have any tool state for this imageId, add an empty object
            if (!enabledImage.image || toolState.hasOwnProperty(enabledImage.image.imageId) === false) {
                toolState[enabledImage.image.imageId] = {};
            }

            var imageIdToolState = toolState[enabledImage.image.imageId];

            // if we don't have tool state for this type of tool, add an empty object
            if (imageIdToolState.hasOwnProperty(toolType) === false) {
                imageIdToolState[toolType] = {
                    data: []
                };
            }

            var toolData = imageIdToolState[toolType];

            // finally, add this new tool to the state
            toolData.data.push(data);
        }

        // here you can get state - used by tools as well as modules
        // that save state persistently
        function getImageIdSpecificToolState(element, toolType) {
            var enabledImage = cornerstone.getEnabledElement(element);
            // if we don't have any tool state for this imageId, return undefined
            if (!enabledImage.image || toolState.hasOwnProperty(enabledImage.image.imageId) === false) {
                return;
            }

            var imageIdToolState = toolState[enabledImage.image.imageId];

            // if we don't have tool state for this type of tool, return undefined
            if (imageIdToolState.hasOwnProperty(toolType) === false) {
                return;
            }

            var toolData = imageIdToolState[toolType];
            return toolData;
        }

        // Clears all tool data from this toolStateManager.
        function clearImageIdSpecificToolStateManager(element) {
            var enabledImage = cornerstone.getEnabledElement(element);
            if (!enabledImage.image || toolState.hasOwnProperty(enabledImage.image.imageId) === false) {
                return;
            }

            delete toolState[enabledImage.image.imageId];
        }

        var imageIdToolStateManager = {
            get: getImageIdSpecificToolState,
            add: addImageIdSpecificToolState,
            clear: clearImageIdSpecificToolStateManager,
            saveImageIdToolState: saveImageIdToolState,
            restoreImageIdToolState: restoreImageIdToolState,
            saveToolState: saveToolState,
            restoreToolState: restoreToolState,
            toolState: toolState
        };
        return imageIdToolStateManager;
    }

    // a global imageIdSpecificToolStateManager - the most common case is to share state between all
    // visible enabled images
    var globalImageIdSpecificToolStateManager = newImageIdSpecificToolStateManager();
    
    // module/private exports
    cornerstoneTools.newImageIdSpecificToolStateManager = newImageIdSpecificToolStateManager;
    cornerstoneTools.globalImageIdSpecificToolStateManager = globalImageIdSpecificToolStateManager;

})(cornerstone, cornerstoneTools);
 
// End Source; src/stateManagement/imageIdSpecificStateManager.js

// Begin Source: src/stateManagement/loadHandlerManager.js
(function(cornerstoneTools) {

    'use strict';

    function loadHandlerManager() {
        var defaultStartLoadHandler,
            defaultEndLoadHandler,
            defaultErrorLoadingHandler;

        function setStartLoadHandler(handler) {
            defaultStartLoadHandler = handler;
        }

        function getStartLoadHandler() {
            return defaultStartLoadHandler;
        }

        function setEndLoadHandler(handler) {
            defaultEndLoadHandler = handler;
        }

        function getEndLoadHandler(){
            return defaultEndLoadHandler;
        }

        function setErrorLoadingHandler(handler) {
            defaultErrorLoadingHandler = handler;
        }
        
        function getErrorLoadingHandler() {
            return defaultErrorLoadingHandler;
        }
      
        var loadHandlers = {
            setStartLoadHandler: setStartLoadHandler,
            getStartLoadHandler: getStartLoadHandler,
            setEndLoadHandler: setEndLoadHandler,
            getEndLoadHandler: getEndLoadHandler,
            setErrorLoadingHandler: setErrorLoadingHandler,
            getErrorLoadingHandler: getErrorLoadingHandler
        };

        return loadHandlers;
    }

    // module/private exports
    cornerstoneTools.loadHandlerManager = loadHandlerManager();

})(cornerstoneTools);
 
// End Source; src/stateManagement/loadHandlerManager.js

// Begin Source: src/stateManagement/stackSpecificStateManager.js
(function(cornerstone, cornerstoneTools) {

    'use strict';

    // This implements an Stack specific tool state management strategy.  This means
    // that tool data is shared between all imageIds in a given stack
    function newStackSpecificToolStateManager(toolTypes, oldStateManager) {
        var toolState = {};

        function saveToolState() {
            return toolState;
        }

        function restoreToolState(stackToolState) {
            toolState = stackToolState;
        }

        // here we add tool state, this is done by tools as well
        // as modules that restore saved state
        function addStackSpecificToolState(element, toolType, data) {
            // if this is a tool type to apply to the stack, do so
            if (toolTypes.indexOf(toolType) >= 0) {

                // if we don't have tool state for this type of tool, add an empty object
                if (toolState.hasOwnProperty(toolType) === false) {
                    toolState[toolType] = {
                        data: []
                    };
                }

                var toolData = toolState[toolType];

                // finally, add this new tool to the state
                toolData.data.push(data);
            } else {
                // call the imageId specific tool state manager
                return oldStateManager.add(element, toolType, data);
            }
        }

        // here you can get state - used by tools as well as modules
        // that save state persistently
        function getStackSpecificToolState(element, toolType) {
            // if this is a tool type to apply to the stack, do so
            if (toolTypes.indexOf(toolType) >= 0) {
                // if we don't have tool state for this type of tool, add an empty object
                if (toolState.hasOwnProperty(toolType) === false) {
                    toolState[toolType] = {
                        data: []
                    };
                }

                var toolData = toolState[toolType];
                return toolData;
            } else {
                // call the imageId specific tool state manager
                return oldStateManager.get(element, toolType);
            }
        }

        var stackSpecificToolStateManager = {
            get: getStackSpecificToolState,
            add: addStackSpecificToolState,
            saveToolState: saveToolState,
            restoreToolState: restoreToolState,
            toolState: toolState,
        };
        return stackSpecificToolStateManager;
    }

    var stackStateManagers = [];

    function addStackStateManager(element) {
        var oldStateManager = cornerstoneTools.getElementToolStateManager(element);
        if (!oldStateManager) {
            oldStateManager = cornerstoneTools.globalImageIdSpecificToolStateManager;
        }

        var stackTools = [ 'stack', 'stackPrefetch', 'playClip', 'volume', 'slab', 'referenceLines', 'crosshairs' ];
        var stackSpecificStateManager = cornerstoneTools.newStackSpecificToolStateManager(stackTools, oldStateManager);
        stackStateManagers.push(stackSpecificStateManager);
        cornerstoneTools.setElementToolStateManager(element, stackSpecificStateManager);
    }

    // module/private exports
    cornerstoneTools.newStackSpecificToolStateManager = newStackSpecificToolStateManager;
    cornerstoneTools.addStackStateManager = addStackStateManager;

})(cornerstone, cornerstoneTools);
 
// End Source; src/stateManagement/stackSpecificStateManager.js

// Begin Source: src/stateManagement/textStyleManager.js
(function(cornerstoneTools) {

    'use strict';

    function textStyleManager() {
        var defaultFontSize = 15,
            defaultFont = defaultFontSize + 'px Arial',
            defaultBackgroundColor = 'transparent';

        function setFont(font) {
            defaultFont = font;
        }

        function getFont() {
            return defaultFont;
        }

        function setFontSize(fontSize) {
            defaultFontSize = fontSize;
        }

        function getFontSize() {
            return defaultFontSize;
        }

        function setBackgroundColor(backgroundColor) {
            defaultBackgroundColor = backgroundColor;
        }

        function getBackgroundColor() {
            return defaultBackgroundColor;
        }

        var textStyle = {
            setFont: setFont,
            getFont: getFont,
            setFontSize: setFontSize,
            getFontSize: getFontSize,
            setBackgroundColor: setBackgroundColor,
            getBackgroundColor: getBackgroundColor
        };

        return textStyle;
    }

    // module/private exports
    cornerstoneTools.textStyle = textStyleManager();

})(cornerstoneTools);
 
// End Source; src/stateManagement/textStyleManager.js

// Begin Source: src/stateManagement/timeSeriesSpecificStateManager.js
(function(cornerstone, cornerstoneTools) {

    'use strict';

    // This implements an Stack specific tool state management strategy.  This means
    // that tool data is shared between all imageIds in a given stack
    function newTimeSeriesSpecificToolStateManager(toolTypes, oldStateManager) {
        var toolState = {};

        // here we add tool state, this is done by tools as well
        // as modules that restore saved state
        function addStackSpecificToolState(element, toolType, data) {
            // if this is a tool type to apply to the stack, do so
            if (toolTypes.indexOf(toolType) >= 0) {

                // if we don't have tool state for this type of tool, add an empty object
                if (toolState.hasOwnProperty(toolType) === false) {
                    toolState[toolType] = {
                        data: []
                    };
                }

                var toolData = toolState[toolType];

                // finally, add this new tool to the state
                toolData.data.push(data);
            } else {
                // call the imageId specific tool state manager
                return oldStateManager.add(element, toolType, data);
            }
        }

        // here you can get state - used by tools as well as modules
        // that save state persistently
        function getStackSpecificToolState(element, toolType) {
            // if this is a tool type to apply to the stack, do so
            if (toolTypes.indexOf(toolType) >= 0) {
                // if we don't have tool state for this type of tool, add an empty object
                if (toolState.hasOwnProperty(toolType) === false) {
                    toolState[toolType] = {
                        data: []
                    };
                }

                var toolData = toolState[toolType];
                return toolData;
            } else {
                // call the imageId specific tool state manager
                return oldStateManager.get(element, toolType);
            }
        }

        var imageIdToolStateManager = {
            get: getStackSpecificToolState,
            add: addStackSpecificToolState
        };
        return imageIdToolStateManager;
    }

    var timeSeriesStateManagers = [];

    function addTimeSeriesStateManager(element, tools) {
        tools = tools || [ 'timeSeries' ];
        var oldStateManager = cornerstoneTools.getElementToolStateManager(element);
        if (oldStateManager === undefined) {
            oldStateManager = cornerstoneTools.globalImageIdSpecificToolStateManager;
        }

        var timeSeriesSpecificStateManager = cornerstoneTools.newTimeSeriesSpecificToolStateManager(tools, oldStateManager);
        timeSeriesStateManagers.push(timeSeriesSpecificStateManager);
        cornerstoneTools.setElementToolStateManager(element, timeSeriesSpecificStateManager);
    }

    // module/private exports
    cornerstoneTools.newTimeSeriesSpecificToolStateManager = newTimeSeriesSpecificToolStateManager;
    cornerstoneTools.addTimeSeriesStateManager = addTimeSeriesStateManager;

})(cornerstone, cornerstoneTools);
 
// End Source; src/stateManagement/timeSeriesSpecificStateManager.js

// Begin Source: src/stateManagement/toolColorManager.js
(function(cornerstoneTools) {

    'use strict';

    function toolColorManager() {
        var defaultColor = 'white',
            activeColor = 'greenyellow',
            fillColor = 'transparent';

        function setFillColor(color) {
            fillColor = color;
        }

        function getFillColor() {
            return fillColor;
        }

        function setToolColor(color) {
            defaultColor = color;
        }

        function getToolColor() {
            return defaultColor;
        }

        function setActiveToolColor(color) {
            activeColor = color;
        }

        function getActiveToolColor() {
            return activeColor;
        }

        function getColorIfActive(active) {
            return active ? activeColor : defaultColor;
        }

        var toolColors = {
            setFillColor: setFillColor,
            getFillColor: getFillColor,
            setToolColor: setToolColor,
            getToolColor: getToolColor,
            setActiveColor: setActiveToolColor,
            getActiveColor: getActiveToolColor,
            getColorIfActive: getColorIfActive
        };

        return toolColors;
    }

    // module/private exports
    cornerstoneTools.toolColors = toolColorManager();

})(cornerstoneTools);
 
// End Source; src/stateManagement/toolColorManager.js

// Begin Source: src/stateManagement/toolCoordinateManager.js
(function(cornerstoneTools) {

    'use strict';

    function toolCoordinateManager(){
        var cooordsData = '';

        function setActiveToolCoords(eventData){
            cooordsData = eventData.currentPoints.canvas;
        }

        function getActiveToolCoords(){
            return cooordsData;
        }

        var toolCoords = {
            setCoords: setActiveToolCoords,
            getCoords: getActiveToolCoords
        };

        return toolCoords;
    }

    // module/private exports
    cornerstoneTools.toolCoordinates = toolCoordinateManager();

})(cornerstoneTools);
 
// End Source; src/stateManagement/toolCoordinateManager.js

// Begin Source: src/stateManagement/toolStateManager.js
(function(cornerstone, cornerstoneTools) {

    'use strict';

    function getElementToolStateManager(element) {
        var enabledImage = cornerstone.getEnabledElement(element);
        // if the enabledImage has no toolStateManager, create a default one for it
        // NOTE: This makes state management element specific
        if (enabledImage.toolStateManager === undefined) {
            enabledImage.toolStateManager = cornerstoneTools.globalImageIdSpecificToolStateManager;
        }

        return enabledImage.toolStateManager;
    }

    // here we add tool state, this is done by tools as well
    // as modules that restore saved state
    function addToolState(element, toolType, data) {
        var toolStateManager = getElementToolStateManager(element);
        toolStateManager.add(element, toolType, data);

        var eventType = 'CornerstoneToolsMeasurementAdded';
        var eventData = {
            toolType: toolType,
            element: element,
            measurementData: data
        };
        $(element).trigger(eventType, eventData);
        // TODO: figure out how to broadcast this change to all enabled elements so they can update the image
        // if this change effects them
    }

    // here you can get state - used by tools as well as modules
    // that save state persistently
    function getToolState(element, toolType) {
        var toolStateManager = getElementToolStateManager(element);
        return toolStateManager.get(element, toolType);
    }

    function removeToolState(element, toolType, data) {
        var toolStateManager = getElementToolStateManager(element);
        var toolData = toolStateManager.get(element, toolType);
        // find this tool data
        var indexOfData = -1;
        for (var i = 0; i < toolData.data.length; i++) {
            if (toolData.data[i] === data) {
                indexOfData = i;
            }
        }

        if (indexOfData !== -1) {
            toolData.data.splice(indexOfData, 1);

            var eventType = 'CornerstoneToolsMeasurementRemoved';
            var eventData = {
                toolType: toolType,
                element: element,
                measurementData: data
            };
            $(element).trigger(eventType, eventData);
        }
    }

    function clearToolState(element, toolType) {
        var toolStateManager = getElementToolStateManager(element);
        var toolData = toolStateManager.get(element, toolType);
        
        // If any toolData actually exists, clear it
        if (toolData !== undefined) {
            toolData.data = [];
        }
    }

    // sets the tool state manager for an element
    function setElementToolStateManager(element, toolStateManager) {
        var enabledImage = cornerstone.getEnabledElement(element);
        enabledImage.toolStateManager = toolStateManager;
    }

    // module/private exports
    cornerstoneTools.addToolState = addToolState;
    cornerstoneTools.getToolState = getToolState;
    cornerstoneTools.removeToolState = removeToolState;
    cornerstoneTools.clearToolState = clearToolState;
    cornerstoneTools.setElementToolStateManager = setElementToolStateManager;
    cornerstoneTools.getElementToolStateManager = getElementToolStateManager;

})(cornerstone, cornerstoneTools);
 
// End Source; src/stateManagement/toolStateManager.js

// Begin Source: src/stateManagement/toolStyleManager.js
(function(cornerstoneTools) {

    'use strict';

    function toolStyleManager() {
        var defaultWidth = 1,
            activeWidth = 2;

        function setToolWidth(width){
            defaultWidth = width;
        }

        function getToolWidth(){
            return defaultWidth;
        }

        function setActiveToolWidth(width){
            activeWidth = width;
        }

        function getActiveToolWidth(){
            return activeWidth;
        }

        var toolStyle = {
            setToolWidth: setToolWidth,
            getToolWidth: getToolWidth,
            setActiveWidth: setActiveToolWidth,
            getActiveWidth: getActiveToolWidth
        };

        return toolStyle;
    }

    // module/private exports
    cornerstoneTools.toolStyle = toolStyleManager();

})(cornerstoneTools);
 
// End Source; src/stateManagement/toolStyleManager.js

// Begin Source: src/stateManagement/touchSettingsManager.js
(function(cornerstoneTools) {

    'use strict';

    function touchSettingsManager() {
        var defaultDistanceFromTouch = {
            x: 0,
            y: -55
        };

        function setToolDistanceFromTouch(distance){
            defaultDistanceFromTouch = distance;
        }

        function getToolDistanceFromTouch(){
            return defaultDistanceFromTouch;
        }

        var touchSettings = {
            setToolDistanceFromTouch: setToolDistanceFromTouch,
            getToolDistanceFromTouch: getToolDistanceFromTouch,
        };

        return touchSettings;
    }

    // module/private exports
    cornerstoneTools.touchSettings = touchSettingsManager();

})(cornerstoneTools);
 
// End Source; src/stateManagement/touchSettingsManager.js

// Begin Source: src/synchronization/panZoomSynchronizer.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    // This function synchronizes the target zoom and pan to match the source
    function panZoomSynchronizer(synchronizer, sourceElement, targetElement) {

        // ignore the case where the source and target are the same enabled element
        if (targetElement === sourceElement) {
            return;
        }
        // get the source and target viewports
        var sourceViewport = cornerstone.getViewport(sourceElement);
        var targetViewport = cornerstone.getViewport(targetElement);

        // do nothing if the scale and translation are the same
        if (targetViewport.scale === sourceViewport.scale && targetViewport.translation.x === sourceViewport.translation.x && targetViewport.translation.y === sourceViewport.translation.y) {
            return;
        }

        // scale and/or translation are different, sync them
        targetViewport.scale = sourceViewport.scale;
        targetViewport.translation.x = sourceViewport.translation.x;
        targetViewport.translation.y = sourceViewport.translation.y;
        synchronizer.setViewport(targetElement, targetViewport);
    }

    // module/private exports
    cornerstoneTools.panZoomSynchronizer = panZoomSynchronizer;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/synchronization/panZoomSynchronizer.js

// Begin Source: src/synchronization/stackImageIndexSynchronizer.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    // This function causes the image in the target stack to be set to the one closest
    // to the image in the source stack by image position
    function stackImageIndexSynchronizer(synchronizer, sourceElement, targetElement) {

        // ignore the case where the source and target are the same enabled element
        if (targetElement === sourceElement) {
            return;
        }

        var sourceStackToolDataSource = cornerstoneTools.getToolState(sourceElement, 'stack');
        var sourceStackData = sourceStackToolDataSource.data[0];
        var targetStackToolDataSource = cornerstoneTools.getToolState(targetElement, 'stack');
        var targetStackData = targetStackToolDataSource.data[0];

        var newImageIdIndex = sourceStackData.currentImageIdIndex;

        // clamp the index
        newImageIdIndex = Math.min(Math.max(newImageIdIndex, 0), targetStackData.imageIds.length - 1);

        // Do nothing if the index has not changed
        if (newImageIdIndex === targetStackData.currentImageIdIndex) {
            return;
        }

        var startLoadingHandler = cornerstoneTools.loadHandlerManager.getStartLoadHandler();
        var endLoadingHandler = cornerstoneTools.loadHandlerManager.getEndLoadHandler();
        var errorLoadingHandler = cornerstoneTools.loadHandlerManager.getErrorLoadingHandler();

        if (startLoadingHandler) {
            startLoadingHandler(targetElement);
        }

        var loader;
        if (targetStackData.preventCache === true) {
            loader = cornerstone.loadImage(targetStackData.imageIds[newImageIdIndex]);
        } else {
            loader = cornerstone.loadAndCacheImage(targetStackData.imageIds[newImageIdIndex]);
        }

        loader.then(function(image) {
            var viewport = cornerstone.getViewport(targetElement);
            targetStackData.currentImageIdIndex = newImageIdIndex;
            synchronizer.displayImage(targetElement, image, viewport);
            if (endLoadingHandler) {
                endLoadingHandler(targetElement);
            }
        }, function(error) {
            var imageId = targetStackData.imageIds[newImageIdIndex];
            if (errorLoadingHandler) {
                errorLoadingHandler(targetElement, imageId, error);
            }
        });
    }

    // module/private exports
    cornerstoneTools.stackImageIndexSynchronizer = stackImageIndexSynchronizer;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/synchronization/stackImageIndexSynchronizer.js

// Begin Source: src/synchronization/stackImagePositionOffsetSynchronizer.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    // This function causes the image in the target stack to be set to the one closest
    // to the image in the source stack by image position

    // In the future we will want to have a way to manually register links sets of the same orientation (e.g. an axial link set from a prior with an axial link set of a current).  The user could do this by scrolling the two stacks to a similar location and then doing a user action (e.g. right click link) at which point the system will capture the delta between the image position (patient) of both stacks and use that to sync them.  This offset will need to be adjustable.

    function stackImagePositionOffsetSynchronizer(synchronizer, sourceElement, targetElement, eventData, positionDifference) {

        // ignore the case where the source and target are the same enabled element
        if (targetElement === sourceElement) {
            return;
        }

        var sourceEnabledElement = cornerstone.getEnabledElement(sourceElement);
        var sourceImagePlane = cornerstoneTools.metaData.get('imagePlane', sourceEnabledElement.image.imageId);
        var sourceImagePosition = sourceImagePlane.imagePositionPatient;

        var stackToolDataSource = cornerstoneTools.getToolState(targetElement, 'stack');
        var stackData = stackToolDataSource.data[0];

        var minDistance = Number.MAX_VALUE;
        var newImageIdIndex = -1;

        if (!positionDifference) {
            return;
        }

        var finalPosition = sourceImagePosition.clone().add(positionDifference);

        stackData.imageIds.forEach(function(imageId, index) {
            var imagePlane = cornerstoneTools.metaData.get('imagePlane', imageId);
            var imagePosition = imagePlane.imagePositionPatient;
            var distance = finalPosition.distanceToSquared(imagePosition);

            if (distance < minDistance) {
                minDistance = distance;
                newImageIdIndex = index;
            }
        });

        if (newImageIdIndex === stackData.currentImageIdIndex || newImageIdIndex === -1) {
            return;
        }

        var startLoadingHandler = cornerstoneTools.loadHandlerManager.getStartLoadHandler();
        var endLoadingHandler = cornerstoneTools.loadHandlerManager.getEndLoadHandler();
        var errorLoadingHandler = cornerstoneTools.loadHandlerManager.getErrorLoadingHandler();

        if (startLoadingHandler) {
            startLoadingHandler(targetElement);
        }

        var loader;
        if (stackData.preventCache === true) {
            loader = cornerstone.loadImage(stackData.imageIds[newImageIdIndex]);
        } else {
            loader = cornerstone.loadAndCacheImage(stackData.imageIds[newImageIdIndex]);
        }

        loader.then(function(image) {
            var viewport = cornerstone.getViewport(targetElement);
            stackData.currentImageIdIndex = newImageIdIndex;
            synchronizer.displayImage(targetElement, image, viewport);
            if (endLoadingHandler) {
                endLoadingHandler(targetElement);
            }
        }, function(error) {
            var imageId = stackData.imageIds[newImageIdIndex];
            if (errorLoadingHandler) {
                errorLoadingHandler(targetElement, imageId, error);
            }
        });
    }

    // module/private exports
    cornerstoneTools.stackImagePositionOffsetSynchronizer = stackImagePositionOffsetSynchronizer;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/synchronization/stackImagePositionOffsetSynchronizer.js

// Begin Source: src/synchronization/stackImagePositionSynchronizer.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    // This function causes the image in the target stack to be set to the one closest
    // to the image in the source stack by image position
    function stackImagePositionSynchronizer(synchronizer, sourceElement, targetElement) {

        // ignore the case where the source and target are the same enabled element
        if (targetElement === sourceElement) {
            return;
        }

        var sourceImage = cornerstone.getEnabledElement(sourceElement).image;
        var sourceImagePlane = cornerstoneTools.metaData.get('imagePlane', sourceImage.imageId);
        var sourceImagePosition = sourceImagePlane.imagePositionPatient;

        var stackToolDataSource = cornerstoneTools.getToolState(targetElement, 'stack');
        var stackData = stackToolDataSource.data[0];

        var minDistance = Number.MAX_VALUE;
        var newImageIdIndex = -1;

        $.each(stackData.imageIds, function(index, imageId) {
            var imagePlane = cornerstoneTools.metaData.get('imagePlane', imageId);
            var imagePosition = imagePlane.imagePositionPatient;
            var distance = imagePosition.distanceToSquared(sourceImagePosition);
            //console.log(index + '=' + distance);
            if (distance < minDistance) {
                minDistance = distance;
                newImageIdIndex = index;
            }
        });

        if (newImageIdIndex === stackData.currentImageIdIndex) {
            return;
        }

        var startLoadingHandler = cornerstoneTools.loadHandlerManager.getStartLoadHandler();
        var endLoadingHandler = cornerstoneTools.loadHandlerManager.getEndLoadHandler();
        var errorLoadingHandler = cornerstoneTools.loadHandlerManager.getErrorLoadingHandler();

        if (startLoadingHandler) {
            startLoadingHandler(targetElement);
        }

        if (newImageIdIndex !== -1) {
            var loader;
            if (stackData.preventCache === true) {
                loader = cornerstone.loadImage(stackData.imageIds[newImageIdIndex]);
            } else {
                loader = cornerstone.loadAndCacheImage(stackData.imageIds[newImageIdIndex]);
            }

            loader.then(function(image) {
                var viewport = cornerstone.getViewport(targetElement);
                stackData.currentImageIdIndex = newImageIdIndex;
                synchronizer.displayImage(targetElement, image, viewport);
                if (endLoadingHandler) {
                    endLoadingHandler(targetElement);
                }
            }, function(error) {
                var imageId = stackData.imageIds[newImageIdIndex];
                if (errorLoadingHandler) {
                    errorLoadingHandler(targetElement, imageId, error);
                }
            });
        }
    }

    // module/private exports
    cornerstoneTools.stackImagePositionSynchronizer = stackImagePositionSynchronizer;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/synchronization/stackImagePositionSynchronizer.js

// Begin Source: src/synchronization/stackScrollSynchronizer.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    // This function causes any scrolling actions within the stack to propagate to 
    // all of the other viewports that are synced
    function stackScrollSynchronizer(synchronizer, sourceElement, targetElement, eventData) {
        // If the target and source are the same, stop
        if (sourceElement === targetElement) {
            return;
        }

        // If there is no event, or direction is 0, stop
        if (!eventData || !eventData.direction) {
            return;
        }

        // Get the stack of the target viewport
        var stackToolDataSource = cornerstoneTools.getToolState(targetElement, 'stack');
        var stackData = stackToolDataSource.data[0];

        // Get the new index for the stack
        var newImageIdIndex = stackData.currentImageIdIndex + eventData.direction;

        // Ensure the index does not exceed the bounds of the stack
        newImageIdIndex = Math.min(Math.max(newImageIdIndex, 0), stackData.imageIds.length - 1);

        // If the index has not changed, stop here
        if (stackData.currentImageIdIndex === newImageIdIndex) {
            return;
        }

        var startLoadingHandler = cornerstoneTools.loadHandlerManager.getStartLoadHandler();
        var endLoadingHandler = cornerstoneTools.loadHandlerManager.getEndLoadHandler();
        var errorLoadingHandler = cornerstoneTools.loadHandlerManager.getErrorLoadingHandler();

        if (startLoadingHandler) {
            startLoadingHandler(targetElement);
        }

        var loader;
        if (stackData.preventCache === true) {
            loader = cornerstone.loadImage(stackData.imageIds[newImageIdIndex]);
        } else {
            loader = cornerstone.loadAndCacheImage(stackData.imageIds[newImageIdIndex]);
        }

        loader.then(function(image) {
            var viewport = cornerstone.getViewport(targetElement);
            stackData.currentImageIdIndex = newImageIdIndex;
            synchronizer.displayImage(targetElement, image, viewport);
            if (endLoadingHandler) {
                endLoadingHandler(targetElement);
            }
        }, function(error) {
            var imageId = stackData.imageIds[newImageIdIndex];
            if (errorLoadingHandler) {
                errorLoadingHandler(targetElement, imageId, error);
            }
        });
    }

    // module/private exports
    cornerstoneTools.stackScrollSynchronizer = stackScrollSynchronizer;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/synchronization/stackScrollSynchronizer.js

// Begin Source: src/synchronization/synchronizer.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    // This object is responsible for synchronizing target elements when an event fires on a source
    // element
    function Synchronizer(event, handler) {

        var that = this;
        var sourceElements = []; // source elements fire the events we want to synchronize to
        var targetElements = []; // target elements we want to synchronize to source elements

        var ignoreFiredEvents = false;
        var initialData = {};
        var eventHandler = handler;

        this.setHandler = function(handler) {
            eventHandler = handler;
        };

        this.getHandler = function() {
            return eventHandler;
        };

        this.getDistances = function() {
            if (!sourceElements.length || !targetElements.length) {
                return;
            }

            initialData.distances = {};
            initialData.imageIds = {
                sourceElements: [],
                targetElements: []
            };

            sourceElements.forEach(function(sourceElement) {
                var sourceEnabledElement = cornerstone.getEnabledElement(sourceElement);
                if (!sourceEnabledElement || !sourceEnabledElement.image) {
                    return;
                }

                var sourceImageId = sourceEnabledElement.image.imageId;
                var sourceImagePlane = cornerstoneTools.metaData.get('imagePlane', sourceImageId);
                if (!sourceImagePlane || !sourceImagePlane.imagePositionPatient) {
                    return;
                }

                var sourceImagePosition = sourceImagePlane.imagePositionPatient;

                if (initialData.hasOwnProperty(sourceEnabledElement)) {
                    return;
                } else {
                    initialData.distances[sourceImageId] = {};
                }

                initialData.imageIds.sourceElements.push(sourceImageId);

                targetElements.forEach(function(targetElement) {
                    var targetEnabledElement = cornerstone.getEnabledElement(targetElement);
                    if (!targetEnabledElement || !targetEnabledElement.image) {
                        return;
                    }

                    var targetImageId = targetEnabledElement.image.imageId;

                    initialData.imageIds.targetElements.push(targetImageId);

                    if (sourceElement === targetElement) {
                        return;
                    }

                    if (sourceImageId === targetImageId) {
                        return;
                    }

                    if (initialData.distances[sourceImageId].hasOwnProperty(targetImageId)) {
                        return;
                    }

                    var targetImagePlane = cornerstoneTools.metaData.get('imagePlane', targetImageId);
                    if (!targetImagePlane || !targetImagePlane.imagePositionPatient) {
                        return;
                    }

                    var targetImagePosition = targetImagePlane.imagePositionPatient;

                    initialData.distances[sourceImageId][targetImageId] = targetImagePosition.clone().sub(sourceImagePosition);
                });

                if (!Object.keys(initialData.distances[sourceImageId]).length) {
                    delete initialData.distances[sourceImageId];
                }
            });
        };

        function fireEvent(sourceElement, eventData) {
            // Broadcast an event that something changed
            if (!sourceElements.length || !targetElements.length) {
                return;
            }

            ignoreFiredEvents = true;
            targetElements.forEach(function(targetElement) {
                var targetIndex = targetElements.indexOf(targetElement);
                if (targetIndex === -1) {
                    return;
                }

                var targetImageId = initialData.imageIds.targetElements[targetIndex];
                var sourceIndex = sourceElements.indexOf(sourceElement);
                if (sourceIndex === -1) {
                    return;
                }

                var sourceImageId = initialData.imageIds.sourceElements[sourceIndex];
                
                var positionDifference;
                if (sourceImageId === targetImageId) {
                    positionDifference = 0;
                } else {
                    positionDifference = initialData.distances[sourceImageId][targetImageId];
                }
                
                eventHandler(that, sourceElement, targetElement, eventData, positionDifference);
            });
            ignoreFiredEvents = false;
        }

        function onEvent(e, eventData) {
            if (ignoreFiredEvents === true) {
                return;
            }

            fireEvent(e.currentTarget, eventData);
        }

        // adds an element as a source
        this.addSource = function(element) {
            // Return if this element was previously added
            var index = sourceElements.indexOf(element);
            if (index !== -1) {
                return;
            }

            // Add to our list of enabled elements
            sourceElements.push(element);

            // subscribe to the event
            $(element).on(event, onEvent);

            // Update the inital distances between elements
            that.getDistances();

            that.updateDisableHandlers();
        };

        // adds an element as a target
        this.addTarget = function(element) {
            // Return if this element was previously added
            var index = targetElements.indexOf(element);
            if (index !== -1) {
                return;
            }

            // Add to our list of enabled elements
            targetElements.push(element);

            // Update the inital distances between elements
            that.getDistances();

            // Invoke the handler for this new target element
            eventHandler(that, element, element, 0);

            that.updateDisableHandlers();
        };

        // adds an element as both a source and a target
        this.add = function(element) {
            that.addSource(element);
            that.addTarget(element);
        };

        // removes an element as a source
        this.removeSource = function(element) {
            // Find the index of this element
            var index = sourceElements.indexOf(element);
            if (index === -1) {
                return;
            }

            // remove this element from the array
            sourceElements.splice(index, 1);

            // stop listening for the event
            $(element).off(event, onEvent);

            // Update the inital distances between elements
            that.getDistances();

            // Update everyone listening for events
            fireEvent(element);
            that.updateDisableHandlers();
        };

        // removes an element as a target
        this.removeTarget = function(element) {
            // Find the index of this element
            var index = targetElements.indexOf(element);
            if (index === -1) {
                return;
            }

            // remove this element from the array
            targetElements.splice(index, 1);

            // Update the inital distances between elements
            that.getDistances();

            // Invoke the handler for the removed target
            eventHandler(that, element, element, 0);
            that.updateDisableHandlers();
        };

        // removes an element as both a source and target
        this.remove = function(element) {
            that.removeTarget(element);
            that.removeSource(element);
        };

        // returns the source elements
        this.getSourceElements = function() {
            return sourceElements;
        };

        // returns the target elements
        this.getTargetElements = function() {
            return targetElements;
        };

        this.displayImage = function(element, image, viewport) {
            ignoreFiredEvents = true;
            cornerstone.displayImage(element, image, viewport);
            ignoreFiredEvents = false;
        };

        this.setViewport = function(element, viewport) {
            ignoreFiredEvents = true;
            cornerstone.setViewport(element, viewport);
            ignoreFiredEvents = false;
        };

        function disableHandler(e, eventData) {
            var element = eventData.element;
            that.remove(element);
        }

        this.updateDisableHandlers = function() {
            var elements = $.unique(sourceElements.concat(targetElements));
            elements.forEach(function(element) {
                $(element).off('CornerstoneElementDisabled', disableHandler);
                $(element).on('CornerstoneElementDisabled', disableHandler);
            });
        };

        this.destroy = function() {
            var elements = $.unique(sourceElements.concat(targetElements));
            elements.forEach(function(element) {
                that.remove(element);
            });
        };
    }

    // module/private exports
    cornerstoneTools.Synchronizer = Synchronizer;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/synchronization/synchronizer.js

// Begin Source: src/synchronization/updateImageSynchronizer.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    // This function causes the target image to be drawn immediately
    function updateImageSynchronizer(synchronizer, sourceElement, targetElement) {

        // ignore the case where the source and target are the same enabled element
        if (targetElement === sourceElement) {
            return;
        }

        cornerstone.updateImage(targetElement);
    }

    // module/private exports
    cornerstoneTools.updateImageSynchronizer = updateImageSynchronizer;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/synchronization/updateImageSynchronizer.js

// Begin Source: src/synchronization/wwwcSynchronizer.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    // This function synchronizes the target element ww/wc to match the source element
    function wwwcSynchronizer(synchronizer, sourceElement, targetElement) {

        // ignore the case where the source and target are the same enabled element
        if (targetElement === sourceElement) {
            return;
        }
        // get the source and target viewports
        var sourceViewport = cornerstone.getViewport(sourceElement);
        var targetViewport = cornerstone.getViewport(targetElement);

        // do nothing if the ww/wc already match
        if (targetViewport.voi.windowWidth === sourceViewport.voi.windowWidth && targetViewport.voi.windowCenter === sourceViewport.voi.windowCenter && targetViewport.invert === sourceViewport.invert) {
            return;
        }

        // www/wc are different, sync them
        targetViewport.voi.windowWidth = sourceViewport.voi.windowWidth;
        targetViewport.voi.windowCenter = sourceViewport.voi.windowCenter;
        targetViewport.invert = sourceViewport.invert;
        synchronizer.setViewport(targetElement, targetViewport);
    }

    // module/private exports
    cornerstoneTools.wwwcSynchronizer = wwwcSynchronizer;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/synchronization/wwwcSynchronizer.js

// Begin Source: src/timeSeriesTools/ProbeTool4D.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    var toolType = 'probe4D';

    function updateLineSample(measurementData) {
        var samples = [];

        measurementData.timeSeries.stacks.forEach(function(stack) {
            var loader;
            if (stack.preventCache === true) {
                loader = cornerstone.loadImage(stack.imageIds[measurementData.imageIdIndex]);
            } else {
                loader = cornerstone.loadAndCacheImage(stack.imageIds[measurementData.imageIdIndex]);
            }

            loader.then(function(image) {
                var offset = Math.round(measurementData.handles.end.x) + Math.round(measurementData.handles.end.y) * image.width;
                var sample = image.getPixelData()[offset];
                samples.push(sample);
                //console.log(sample);
            });
        });
        measurementData.lineSample.set(samples);
    }

    ///////// BEGIN ACTIVE TOOL ///////
    function createNewMeasurement(mouseEventData) {
        var timeSeriestoolData = cornerstoneTools.getToolState(mouseEventData.element, 'timeSeries');
        if (timeSeriestoolData === undefined || timeSeriestoolData.data === undefined || timeSeriestoolData.data.length === 0) {
            return;
        }

        var timeSeries = timeSeriestoolData.data[0];

        // create the measurement data for this tool with the end handle activated
        var measurementData = {
            timeSeries: timeSeries,
            lineSample: new cornerstoneTools.LineSampleMeasurement(),
            imageIdIndex: timeSeries.stacks[timeSeries.currentStackIndex].currentImageIdIndex,
            visible: true,
            handles: {
                end: {
                    x: mouseEventData.currentPoints.image.x,
                    y: mouseEventData.currentPoints.image.y,
                    highlight: true,
                    active: true
                }
            }
        };
        updateLineSample(measurementData);
        cornerstoneTools.MeasurementManager.add(measurementData);
        return measurementData;
    }
    ///////// END ACTIVE TOOL ///////

    ///////// BEGIN IMAGE RENDERING ///////

    function onImageRendered(e, eventData) {

        // if we have no toolData for this element, return immediately as there is nothing to do
        var toolData = cornerstoneTools.getToolState(e.currentTarget, toolType);
        if (toolData === undefined) {
            return;
        }

        // we have tool data for this element - iterate over each one and draw it
        var context = eventData.canvasContext.canvas.getContext('2d');
        cornerstone.setToPixelCoordinateSystem(eventData.enabledElement, context);
        var color = 'white';

        for (var i = 0; i < toolData.data.length; i++) {
            context.save();
            var data = toolData.data[i];

            // draw the handles
            context.beginPath();
            cornerstoneTools.drawHandles(context, eventData, data.handles, color);
            context.stroke();

            // Draw text
            var fontParameters = cornerstoneTools.setContextToDisplayFontSize(eventData.enabledElement, eventData.canvasContext, 15);
            context.font = '' + fontParameters.fontSize + 'px Arial';

            // translate the x/y away from the cursor
            var x = Math.round(data.handles.end.x);
            var y = Math.round(data.handles.end.y);
            var textX = data.handles.end.x + 3;
            var textY = data.handles.end.y - 3;

            context.fillStyle = color;

            context.fillText('' + x + ',' + y, textX, textY);

            context.restore();
        }
    }
    ///////// END IMAGE RENDERING ///////

    // module exports
    cornerstoneTools.probeTool4D = cornerstoneTools.mouseButtonTool({
        createNewMeasurement: createNewMeasurement,
        onImageRendered: onImageRendered,
        toolType: toolType
    });

})($, cornerstone, cornerstoneTools);
 
// End Source; src/timeSeriesTools/ProbeTool4D.js

// Begin Source: src/timeSeriesTools/timeSeries.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function incrementTimePoint(element, timePoints, wrap) {
        var toolData = cornerstoneTools.getToolState(element, 'timeSeries');
        if (toolData === undefined || toolData.data === undefined || toolData.data.length === 0) {
            return;
        }

        var timeSeriesData = toolData.data[0];
        var currentStack = timeSeriesData.stacks[timeSeriesData.currentStackIndex];
        var currentImageIdIndex = currentStack.currentImageIdIndex;
        var newStackIndex = timeSeriesData.currentStackIndex + timePoints;

        // loop around if we go outside the stack
        if (wrap) {
            if (newStackIndex >= timeSeriesData.stacks.length) {
                newStackIndex = 0;
            }

            if (newStackIndex < 0) {
                newStackIndex = timeSeriesData.stacks.length - 1;
            }
        } else {
            newStackIndex = Math.min(timeSeriesData.stacks.length - 1, newStackIndex);
            newStackIndex = Math.max(0, newStackIndex);
        }

        if (newStackIndex !== timeSeriesData.currentStackIndex) {
            var viewport = cornerstone.getViewport(element);
            var newStack = timeSeriesData.stacks[newStackIndex];

            var startLoadingHandler = cornerstoneTools.loadHandlerManager.getStartLoadHandler();
            var endLoadingHandler = cornerstoneTools.loadHandlerManager.getEndLoadHandler();
            var errorLoadingHandler = cornerstoneTools.loadHandlerManager.getErrorLoadingHandler();

            if (startLoadingHandler) {
                startLoadingHandler(element);
            }

            var loader;
            if (newStack.preventCache === true) {
                loader = cornerstone.loadImage(newStack.imageIds[currentImageIdIndex]);
            } else {
                loader = cornerstone.loadAndCacheImage(newStack.imageIds[currentImageIdIndex]);
            }

            loader.then(function(image) {
                if (timeSeriesData.currentImageIdIndex !== currentImageIdIndex) {
                    newStack.currentImageIdIndex = currentImageIdIndex;
                    timeSeriesData.currentStackIndex = newStackIndex;
                    cornerstone.displayImage(element, image, viewport);
                    if (endLoadingHandler) {
                        endLoadingHandler(element);
                    }
                }
            }, function(error) {
                var imageId = newStack.imageIds[currentImageIdIndex];
                if (errorLoadingHandler) {
                    errorLoadingHandler(element, imageId, error);
                }
            });
        }
    }

    // module/private exports
    cornerstoneTools.incrementTimePoint = incrementTimePoint;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/timeSeriesTools/timeSeries.js

// Begin Source: src/timeSeriesTools/timeSeriesPlayer.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    var toolType = 'timeSeriesPlayer';

    /**
     * Starts playing a clip or adjusts the frame rate of an already playing clip.  framesPerSecond is
     * optional and defaults to 30 if not specified.  A negative framesPerSecond will play the clip in reverse.
     * The element must be a stack of images
     * @param element
     * @param framesPerSecond
     */
    function playClip(element, framesPerSecond) {
        if (element === undefined) {
            throw 'playClip: element must not be undefined';
        }

        if (framesPerSecond === undefined) {
            framesPerSecond = 30;
        }

        var timeSeriesToolData = cornerstoneTools.getToolState(element, 'timeSeries');
        if (timeSeriesToolData === undefined || timeSeriesToolData.data === undefined || timeSeriesToolData.data.length === 0) {
            return;
        }

        var playClipToolData = cornerstoneTools.getToolState(element, toolType);
        var playClipData;
        if (playClipToolData === undefined || playClipToolData.data.length === 0) {
            playClipData = {
                intervalId: undefined,
                framesPerSecond: framesPerSecond,
                lastFrameTimeStamp: undefined,
                frameRate: 0
            };
            cornerstoneTools.addToolState(element, toolType, playClipData);
        } else {
            playClipData = playClipToolData.data[0];
            playClipData.framesPerSecond = framesPerSecond;
        }

        // if already playing, do not set a new interval
        if (playClipData.intervalId !== undefined) {
            return;
        }

        playClipData.intervalId = setInterval(function() {
            if (playClipData.framesPerSecond > 0) {
                cornerstoneTools.incrementTimePoint(element, 1, true);
            } else {
                cornerstoneTools.incrementTimePoint(element, -1, true);
            }
        }, 1000 / Math.abs(playClipData.framesPerSecond));
    }

    /**
     * Stops an already playing clip.
     * * @param element
     */
    function stopClip(element) {
        var playClipToolData = cornerstoneTools.getToolState(element, toolType);
        var playClipData;
        if (playClipToolData === undefined || playClipToolData.data.length === 0) {
            return;
        } else {
            playClipData = playClipToolData.data[0];
        }

        clearInterval(playClipData.intervalId);
        playClipData.intervalId = undefined;
    }

    // module/private exports
    cornerstoneTools.timeSeriesPlayer = {
        start: playClip,
        stop: stopClip
    };

})($, cornerstone, cornerstoneTools);
 
// End Source; src/timeSeriesTools/timeSeriesPlayer.js

// Begin Source: src/timeSeriesTools/timeSeriesScroll.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function mouseUpCallback(e, eventData) {
        $(eventData.element).off('CornerstoneToolsMouseDrag', mouseDragCallback);
        $(eventData.element).off('CornerstoneToolsMouseUp', mouseUpCallback);
        $(eventData.element).off('CornerstoneToolsMouseClick', mouseUpCallback);
    }

    function mouseDownCallback(e, eventData) {
        if (cornerstoneTools.isMouseButtonEnabled(eventData.which, e.data.mouseButtonMask)) {

            var mouseDragEventData = {
                deltaY: 0,
                options: e.data.options
            };
            $(eventData.element).on('CornerstoneToolsMouseDrag', mouseDragEventData, mouseDragCallback);
            $(eventData.element).on('CornerstoneToolsMouseUp', mouseUpCallback);
            $(eventData.element).on('CornerstoneToolsMouseClick', mouseUpCallback);
            e.stopImmediatePropagation();
            return false;
        }
    }

    function mouseDragCallback(e, eventData) {
        e.data.deltaY += eventData.deltaPoints.page.y;

        var toolData = cornerstoneTools.getToolState(eventData.element, 'timeSeries');
        if (toolData === undefined || toolData.data === undefined || toolData.data.length === 0) {
            return;
        }

        var timeSeriesData = toolData.data[0];

        var pixelsPerTimeSeries = $(eventData.element).height() / timeSeriesData.stacks.length ;
        if (e.data.options !== undefined && e.data.options.timeSeriesScrollSpeed !== undefined) {
            pixelsPerTimeSeries = e.data.options.timeSeriesScrollSpeed;
        }

        if (e.data.deltaY >= pixelsPerTimeSeries || e.data.deltaY <= -pixelsPerTimeSeries) {
            var timeSeriesDelta = Math.round(e.data.deltaY / pixelsPerTimeSeries);
            var timeSeriesDeltaMod = e.data.deltaY % pixelsPerTimeSeries;
            cornerstoneTools.incrementTimePoint(eventData.element, timeSeriesDelta);
            e.data.deltaY = timeSeriesDeltaMod;
        }

        return false; // false = cases jquery to preventDefault() and stopPropagation() this event
    }

    function mouseWheelCallback(e, eventData) {
        var images = -eventData.direction;
        cornerstoneTools.incrementTimePoint(eventData.element, images);
    }

    function onDrag(e) {
        var mouseMoveData = e.originalEvent.detail;
        var eventData = {
            deltaY: 0
        };
        eventData.deltaY += mouseMoveData.deltaPoints.page.y;

        var toolData = cornerstoneTools.getToolState(mouseMoveData.element, 'stack');
        if (toolData === undefined || toolData.data === undefined || toolData.data.length === 0) {
            return;
        }

        if (eventData.deltaY >= 3 || eventData.deltaY <= -3) {
            var timeSeriesDelta = eventData.deltaY / 3;
            var timeSeriesDeltaMod = eventData.deltaY % 3;
            cornerstoneTools.setTimePoint(eventData.element, timeSeriesDelta);
            eventData.deltaY = timeSeriesDeltaMod;
        }

        return false; // false = cases jquery to preventDefault() and stopPropagation() this event
    }

    // module/private exports
    cornerstoneTools.timeSeriesScroll = cornerstoneTools.simpleMouseButtonTool(mouseDownCallback);
    cornerstoneTools.timeSeriesScrollWheel = cornerstoneTools.mouseWheelTool(mouseWheelCallback);
    cornerstoneTools.timeSeriesScrollTouchDrag = cornerstoneTools.touchDragTool(onDrag);

})($, cornerstone, cornerstoneTools);
 
// End Source; src/timeSeriesTools/timeSeriesScroll.js

// Begin Source: src/util/RoundToDecimal.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    function roundToDecimal(value, precision) {
        var multiplier = Math.pow(10, precision);
        return (Math.round(value * multiplier) / multiplier);
    }

    // module exports
    cornerstoneTools.roundToDecimal = roundToDecimal;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/util/RoundToDecimal.js

// Begin Source: src/util/calculateSUV.js
(function(cornerstoneTools) {

    'use strict';

    function calculateSUV(image, storedPixelValue) {
        // if no dicom data set, return undefined
        if (image.data === undefined) {
            return undefined;
        }
        
        // image must be PET
        if (image.data.string('x00080060') !== 'PT') {
            return undefined;
        }

        var modalityPixelValue = storedPixelValue * image.slope + image.intercept;

        var patientWeight = image.data.floatString('x00101030'); // in kg
        if (patientWeight === undefined) {
            return undefined;
        }

        var petSequence = image.data.elements.x00540016;
        if (petSequence === undefined) {
            return undefined;
        }

        petSequence = petSequence.items[0].dataSet;
        var startTime = petSequence.time('x00181072');
        var totalDose = petSequence.floatString('x00181074');
        var halfLife = petSequence.floatString('x00181075');
        var acquisitionTime = image.data.time('x00080032');
        
        if (!startTime || !totalDose || !halfLife || !acquisitionTime) {
            return undefined;
        }

        var acquisitionTimeInSeconds = acquisitionTime.fractionalSeconds + acquisitionTime.seconds + acquisitionTime.minutes * 60 + acquisitionTime.hours * 60 * 60;
        var injectionStartTimeInSeconds = startTime.fractionalSeconds + startTime.seconds + startTime.minutes * 60 + startTime.hours * 60 * 60;
        var durationInSeconds = acquisitionTimeInSeconds - injectionStartTimeInSeconds;
        var correctedDose = totalDose * Math.exp(-durationInSeconds * Math.log(2) / halfLife);
        var suv = modalityPixelValue * patientWeight / correctedDose * 1000;

        return suv;
    }

    // module exports
    cornerstoneTools.calculateSUV = calculateSUV;

})(cornerstoneTools);
 
// End Source; src/util/calculateSUV.js

// Begin Source: src/util/copyPoints.js
(function($, cornerstone, cornerstoneMath, cornerstoneTools) {

    'use strict';

    function copyPoints(points) {
        var page = cornerstoneMath.point.copy(points.page);
        var image = cornerstoneMath.point.copy(points.image);
        var client = cornerstoneMath.point.copy(points.client);
        var canvas = cornerstoneMath.point.copy(points.canvas);
        return {
            page: page,
            image: image,
            client: client,
            canvas: canvas
        };
    }

    // module exports
    cornerstoneTools.copyPoints = copyPoints;

})($, cornerstone, cornerstoneMath, cornerstoneTools);
 
// End Source; src/util/copyPoints.js

// Begin Source: src/util/drawArrow.js
(function(cornerstoneTools) {

    'use strict';

    function drawArrow(context, start, end, color, lineWidth) {
        //variables to be used when creating the arrow
        var headLength = 10;

        var angle = Math.atan2(end.y - start.y, end.x - start.x);

        //starting path of the arrow from the start square to the end square and drawing the stroke
        context.beginPath();
        context.moveTo(start.x, start.y);
        context.lineTo(end.x, end.y);
        context.strokeStyle = color;
        context.lineWidth = lineWidth;
        context.stroke();

        //starting a new path from the head of the arrow to one of the sides of the point
        context.beginPath();
        context.moveTo(end.x, end.y);
        context.lineTo(end.x - headLength * Math.cos(angle - Math.PI / 7), end.y - headLength * Math.sin(angle - Math.PI / 7));

        //path from the side point of the arrow, to the other side point
        context.lineTo(end.x - headLength * Math.cos(angle + Math.PI / 7), end.y - headLength * Math.sin(angle + Math.PI / 7));

        //path from the side point back to the tip of the arrow, and then again to the opposite side point
        context.lineTo(end.x, end.y);
        context.lineTo(end.x - headLength * Math.cos(angle - Math.PI / 7), end.y - headLength * Math.sin(angle - Math.PI / 7));

        //draws the paths created above
        context.strokeStyle = color;
        context.lineWidth = lineWidth;
        context.stroke();
        context.fillStyle = color;
        context.fill();
    }

    // Module exports
    cornerstoneTools.drawArrow = drawArrow;

})(cornerstoneTools);
 
// End Source; src/util/drawArrow.js

// Begin Source: src/util/drawEllipse.js
(function(cornerstoneTools) {

    'use strict';

    // http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas
    function drawEllipse(context, x, y, w, h) {
        var kappa = 0.5522848,
            ox = (w / 2) * kappa, // control point offset horizontal
            oy = (h / 2) * kappa, // control point offset vertical
            xe = x + w, // x-end
            ye = y + h, // y-end
            xm = x + w / 2, // x-middle
            ym = y + h / 2; // y-middle

        context.beginPath();
        context.moveTo(x, ym);
        context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
        context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
        context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
        context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
        context.closePath();
        context.stroke();
    }

    // Module exports
    cornerstoneTools.drawEllipse = drawEllipse;

})(cornerstoneTools);
 
// End Source; src/util/drawEllipse.js

// Begin Source: src/util/drawTextBox.js
(function(cornerstoneTools) {

    'use strict';

    function drawTextBox(context, textLines, x, y, color) {
        if (Object.prototype.toString.call(textLines) !== '[object Array]') {
            textLines = [ textLines ];
        }

        var padding = 5,
            font = cornerstoneTools.textStyle.getFont(),
            fontSize = cornerstoneTools.textStyle.getFontSize(),
            backgroundColor = cornerstoneTools.textStyle.getBackgroundColor();

        context.save();
        context.font = font;
        context.textBaseline = 'top';
        context.strokeStyle = color;

        // Find the longest text width in the array of text data
        var maxWidth = 0;
        textLines.forEach(function(text) {
            // Get the text width in the current font
            var width = context.measureText(text).width;

            // Find the maximum with for all the text rows;
            maxWidth = Math.max(maxWidth, width);
        });

        // Draw the background box with padding
        context.fillStyle = backgroundColor;

        // Calculate the bounding box for this text box
        var boundingBox = {
            left: x,
            top: y,
            width: maxWidth + (padding * 2),
            height: textLines.length * (fontSize + (padding * 2))
        };
        context.fillRect(boundingBox.left, boundingBox.top, boundingBox.width, boundingBox.height);

        // Draw each of the text lines on top of the background box
        textLines.forEach(function(text, index) {
            context.fillStyle = color;
            context.fillText(text, x + padding, y + fontSize * index + padding);

        });

        context.restore();

        // Return the bounding box so it can be used for pointNearHandle
        return boundingBox;
    }

    // module exports
    cornerstoneTools.drawTextBox = drawTextBox;

})(cornerstoneTools);
 
// End Source; src/util/drawTextBox.js

// Begin Source: src/util/getLuminance.js
(function(cornerstone, cornerstoneTools) {

    'use strict';

    function getLuminance(element, x, y, width, height) {
        if (!element) {
            throw 'getLuminance: parameter element must not be undefined';
        }

        x = Math.round(x);
        y = Math.round(y);
        var enabledElement = cornerstone.getEnabledElement(element);
        var image = enabledElement.image;
        var luminance = [];
        var index = 0;
        var pixelData = image.getPixelData();
        var spIndex,
            row,
            column;

        if (image.color) {
            for (row = 0; row < height; row++) {
                for (column = 0; column < width; column++) {
                    spIndex = (((row + y) * image.columns) + (column + x)) * 4;
                    var red = pixelData[spIndex];
                    var green = pixelData[spIndex + 1];
                    var blue = pixelData[spIndex + 2];
                    luminance[index++] = 0.2126 * red + 0.7152 * green + 0.0722 * blue;
                }
            }
        } else {
            for (row = 0; row < height; row++) {
                for (column = 0; column < width; column++) {
                    spIndex = ((row + y) * image.columns) + (column + x);
                    luminance[index++] = pixelData[spIndex] * image.slope + image.intercept;
                }
            }
        }

        return luminance;
    }

    // module exports
    cornerstoneTools.getLuminance = getLuminance;

})(cornerstone, cornerstoneTools);
 
// End Source; src/util/getLuminance.js

// Begin Source: src/util/getMaxSimultaneousRequests.js
(function(cornerstone, cornerstoneTools) {

    'use strict';

    // Maximum concurrent connections to the same server
    // Information from http://sgdev-blog.blogspot.fr/2014/01/maximum-concurrent-connection-to-same.html
    var maxSimultaneousRequests = {
        default: 6,
        IE: {
            9: 6,
            10: 8,
            default: 8
        },
        Firefox: {
            default: 6
        },
        Opera: {
            10: 8,
            11: 6,
            12: 6,
            default: 6
        },
        Chrome: {
            default: 6
        },
        Safari: {
            default: 4
        }
    };

    // Browser name / version detection
    // http://stackoverflow.com/questions/2400935/browser-detection-in-javascript
    function getBrowserInfo() {
        var ua = navigator.userAgent,
            M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [],
            tem;
        
        if (/trident/i.test(M[1])) {
            tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
            return 'IE ' + (tem[1] || '');
        }

        if (M[1] === 'Chrome') {
            tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
            if (tem !== null) {
                return tem.slice(1).join(' ').replace('OPR', 'Opera');
            }
        }

        M = M[2]? [ M[1], M[2] ]: [ navigator.appName, navigator.appVersion, '-?' ];
        if ((tem = ua.match(/version\/(\d+)/i)) !== null) {
            M.splice(1, 1, tem[1]);
        }

        return M.join(' ');
    }

    function getMaxSimultaneousRequests() {
        var config = cornerstoneTools.stackPrefetch.getConfiguration();

        // Give preference to user-chosen values
        if (config.maxSimultaneousRequests) {
            return config.maxSimultaneousRequests;
        }

        var infoString = getBrowserInfo();
        var info = infoString.split(' ');
        var browserName = info[0];
        var browserVersion = info[1];
        var browserData = maxSimultaneousRequests[browserName];

        if (!browserData) {
            return maxSimultaneousRequests['default'];
        }

        if (!browserData[browserVersion]) {
            return browserData['default'];
        }

        return browserData[browserVersion];
    }

    // module exports
    cornerstoneTools.getMaxSimultaneousRequests = getMaxSimultaneousRequests;
    cornerstoneTools.getBrowserInfo = getBrowserInfo;

})(cornerstone, cornerstoneTools);
 
// End Source; src/util/getMaxSimultaneousRequests.js

// Begin Source: src/util/getRGBPixels.js
(function(cornerstone, cornerstoneTools) {

    'use strict';

    function getRGBPixels(element, x, y, width, height) {
        if (!element) {
            throw 'getRGBPixels: parameter element must not be undefined';
        }

        x = Math.round(x);
        y = Math.round(y);
        var enabledElement = cornerstone.getEnabledElement(element);
        var storedPixelData = [];
        var index = 0;
        var pixelData = enabledElement.image.getPixelData();
        var spIndex,
            row,
            column;

        if (enabledElement.image.color) {
            for (row = 0; row < height; row++) {
                for (column = 0; column < width; column++) {
                    spIndex = (((row + y) * enabledElement.image.columns) + (column + x)) * 4;
                    var red = pixelData[spIndex];
                    var green = pixelData[spIndex + 1];
                    var blue = pixelData[spIndex + 2];
                    var alpha = pixelData[spIndex + 3];
                    storedPixelData[index++] = red;
                    storedPixelData[index++] = green;
                    storedPixelData[index++] = blue;
                    storedPixelData[index++] = alpha;
                }
            }
        }

        return storedPixelData;
    }

    // module exports
    cornerstoneTools.getRGBPixels = getRGBPixels;

})(cornerstone, cornerstoneTools);
 
// End Source; src/util/getRGBPixels.js

// Begin Source: src/util/isMouseButtonEnabled.js
(function(cornerstone, cornerstoneTools) {

    'use strict';

    function isMouseButtonEnabled(which, mouseButtonMask) {
        /*jshint bitwise: false*/
        var mouseButton = (1 << (which - 1));
        return ((mouseButtonMask & mouseButton) !== 0);
    }

    // module exports
    cornerstoneTools.isMouseButtonEnabled = isMouseButtonEnabled;

})(cornerstone, cornerstoneTools);
 
// End Source; src/util/isMouseButtonEnabled.js

// Begin Source: src/util/pauseEvent.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    /**
     * This function is used to prevent selection from occuring when left click dragging on the image
     * @param e the event that is provided to your event handler
     * Based on: http://stackoverflow.com/questions/5429827/how-can-i-prevent-text-element-selection-with-cursor-drag
     * @returns {boolean}
     */
    function pauseEvent(e) {
        if (e.stopPropagation) {
            e.stopPropagation();
        }

        if (e.preventDefault) {
            e.preventDefault();
        }

        e.cancelBubble = true;
        e.returnValue = false;
        return false;
    }

    // module exports
    cornerstoneTools.pauseEvent = pauseEvent;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/util/pauseEvent.js

// Begin Source: src/util/pointProjector.js
(function($, cornerstone, cornerstoneTools) {

    'use strict';

    // projects a patient point to an image point
    function projectPatientPointToImagePlane(patientPoint, imagePlane) {
        var point = patientPoint.clone().sub(imagePlane.imagePositionPatient);
        var x = imagePlane.rowCosines.dot(point) / imagePlane.columnPixelSpacing;
        var y = imagePlane.columnCosines.dot(point) / imagePlane.rowPixelSpacing;
        return {
            x: x,
            y: y
        };
    }

    // projects an image point to a patient point
    function imagePointToPatientPoint(imagePoint, imagePlane) {
        var x = imagePlane.rowCosines.clone().multiplyScalar(imagePoint.x);
        x.multiplyScalar(imagePlane.columnPixelSpacing);
        var y = imagePlane.columnCosines.clone().multiplyScalar(imagePoint.y);
        y.multiplyScalar(imagePlane.rowPixelSpacing);
        var patientPoint = x.add(y);
        patientPoint.add(imagePlane.imagePositionPatient);
        return patientPoint;
    }

    function getRectangleFromImagePlane(imagePlane) {
        // Get the points
        var topLeft = imagePointToPatientPoint({
            x: 0,
            y: 0
        }, imagePlane);
        var topRight = imagePointToPatientPoint({
            x: imagePlane.columns,
            y: 0
        }, imagePlane);
        var bottomLeft = imagePointToPatientPoint({
            x: 0,
            y: imagePlane.rows
        }, imagePlane);
        var bottomRight = imagePointToPatientPoint({
            x: imagePlane.columns,
            y: imagePlane.rows
        }, imagePlane);

        // Get each side as a vector
        var rect = {
            top: new cornerstoneMath.Line3(topLeft, topRight),
            left: new cornerstoneMath.Line3(topLeft, bottomLeft),
            right: new cornerstoneMath.Line3(topRight, bottomRight),
            bottom: new cornerstoneMath.Line3(bottomLeft, bottomRight),
        };
        return rect;
    }

    function lineRectangleIntersection(line, rect) {
        var intersections = [];
        Object.keys(rect).forEach(function(side) {
            var segment = rect[side];
            var intersection = line.intersectLine(segment);
            if (intersection) {
                intersections.push(intersection);
            }
        });
        return intersections;
    }

    function planePlaneIntersection(targetImagePlane, referenceImagePlane) {
        // Gets the line of intersection between two planes in patient space

        // First, get the normals of each image plane
        var targetNormal = targetImagePlane.rowCosines.clone().cross(targetImagePlane.columnCosines);
        var targetPlane = new cornerstoneMath.Plane();
        targetPlane.setFromNormalAndCoplanarPoint(targetNormal, targetImagePlane.imagePositionPatient);

        var referenceNormal = referenceImagePlane.rowCosines.clone().cross(referenceImagePlane.columnCosines);
        var referencePlane = new cornerstoneMath.Plane();
        referencePlane.setFromNormalAndCoplanarPoint(referenceNormal, referenceImagePlane.imagePositionPatient);

        var originDirection = referencePlane.clone().intersectPlane(targetPlane);
        var origin = originDirection.origin;
        var direction = originDirection.direction;

        // Calculate the longest possible length in the reference image plane (the length of the diagonal)
        var bottomRight = imagePointToPatientPoint({
            x: referenceImagePlane.columns,
            y: referenceImagePlane.rows
        }, referenceImagePlane);
        var distance = referenceImagePlane.imagePositionPatient.distanceTo(bottomRight);

        // Use this distance to bound the ray intersecting the two planes
        var line = new cornerstoneMath.Line3();
        line.start = origin;
        line.end = origin.clone().add(direction.multiplyScalar(distance));

        // Find the intersections between this line and the reference image plane's four sides
        var rect = getRectangleFromImagePlane(referenceImagePlane);
        var intersections = lineRectangleIntersection(line, rect);

        // Return the intersections between this line and the reference image plane's sides
        // in order to draw the reference line from the target image.
        if (intersections.length !== 2) {
            return;
        }

        var points = {
            start: intersections[0],
            end: intersections[1]
        };
        return points;

    }

    // module/private exports
    cornerstoneTools.projectPatientPointToImagePlane = projectPatientPointToImagePlane;
    cornerstoneTools.imagePointToPatientPoint = imagePointToPatientPoint;
    cornerstoneTools.planePlaneIntersection = planePlaneIntersection;

})($, cornerstone, cornerstoneTools);
 
// End Source; src/util/pointProjector.js

// Begin Source: src/util/scroll.js
(function(cornerstone, cornerstoneTools) {

    'use strict';

    function scroll(element, images) {
        var toolData = cornerstoneTools.getToolState(element, 'stack');
        if (toolData === undefined || toolData.data === undefined || toolData.data.length === 0) {
            return;
        }

        var stackData = toolData.data[0];

        var newImageIdIndex = stackData.currentImageIdIndex + images;
        newImageIdIndex = Math.min(stackData.imageIds.length - 1, newImageIdIndex);
        newImageIdIndex = Math.max(0, newImageIdIndex);

        cornerstoneTools.scrollToIndex(element, newImageIdIndex);
    }

    // module exports
    cornerstoneTools.scroll = scroll;

})(cornerstone, cornerstoneTools);
 
// End Source; src/util/scroll.js

// Begin Source: src/util/scrollToIndex.js
(function(cornerstone, cornerstoneTools) {

    'use strict';

    function scrollToIndex(element, newImageIdIndex) {
        var toolData = cornerstoneTools.getToolState(element, 'stack');
        if (toolData === undefined || toolData.data === undefined || toolData.data.length === 0) {
            return;
        }

        var stackData = toolData.data[0];

        // Allow for negative indexing
        if (newImageIdIndex < 0) {
            newImageIdIndex += stackData.imageIds.length;
        }

        var startLoadingHandler = cornerstoneTools.loadHandlerManager.getStartLoadHandler();
        var endLoadingHandler = cornerstoneTools.loadHandlerManager.getEndLoadHandler();
        var errorLoadingHandler = cornerstoneTools.loadHandlerManager.getErrorLoadingHandler();

        var viewport = cornerstone.getViewport(element);

        function doneCallback(image) {
            //console.log('interaction done: ' + image.imageId);
            if (stackData.currentImageIdIndex === newImageIdIndex) {
                cornerstone.displayImage(element, image, viewport);
                if (endLoadingHandler) {
                    endLoadingHandler(element);
                }
            }
        }

        function failCallback(error) {
            var imageId = stackData.imageIds[newImageIdIndex];
            if (errorLoadingHandler) {
                errorLoadingHandler(element, imageId, error);
            }
        }

        if (newImageIdIndex === stackData.currentImageIdIndex) {
            return;
        }

        if (startLoadingHandler) {
            startLoadingHandler(element);
        }

        var eventData = {
            newImageIdIndex: newImageIdIndex,
            direction: newImageIdIndex - stackData.currentImageIdIndex
        };

        stackData.currentImageIdIndex = newImageIdIndex;

        var newImageId = stackData.imageIds[newImageIdIndex];

        // Retry image loading in cases where previous image promise
        // was rejected, if the option is set
        var config = cornerstoneTools.stackScroll.getConfiguration();
        if (config && config.retryLoadOnScroll === true) {
            var newImagePromise = cornerstone.imageCache.getImagePromise(newImageId);
            if (newImagePromise && newImagePromise.state() === 'rejected') {
                cornerstone.imageCache.removeImagePromise(newImageId);
            }
        }

        var requestPoolManager = cornerstoneTools.requestPoolManager;
        var type = 'interaction';

        cornerstoneTools.requestPoolManager.clearRequestStack(type);

        // Convert the preventCache value in stack data to a boolean
        var preventCache = !!stackData.preventCache;

        requestPoolManager.addRequest(element, newImageId, type, preventCache, doneCallback, failCallback);
        requestPoolManager.startGrabbing();

        $(element).trigger('CornerstoneStackScroll', eventData);
    }

    // module exports
    cornerstoneTools.scrollToIndex = scrollToIndex;
    cornerstoneTools.loadHandlers = {};

})(cornerstone, cornerstoneTools);
 
// End Source; src/util/scrollToIndex.js

// Begin Source: src/util/setContextToDisplayFontSize.js
/**
 * This module sets the transformation matrix for a canvas context so it displays fonts
 * smoothly even when the image is highly scaled up
 */
(function(cornerstone, cornerstoneTools) {

    'use strict';

    /**
     * Sets the canvas context transformation matrix so it is scaled to show text
     * more cleanly even if the image is scaled up.  See
     * https://github.com/chafey/cornerstoneTools/wiki/DrawingText
     * for more information
     *
     * @param ee
     * @param context
     * @param fontSize
     * @returns {{fontSize: number, lineHeight: number, fontScale: number}}
     */
    function setContextToDisplayFontSize(ee, context, fontSize) {
        var fontScale = 0.1;
        cornerstone.setToPixelCoordinateSystem(ee, context, fontScale);
        // return the font size to use
        var scaledFontSize = fontSize / ee.viewport.scale / fontScale;
        // TODO: actually calculate this?
        var lineHeight = fontSize / ee.viewport.scale / fontScale;
        return {
            fontSize: scaledFontSize,
            lineHeight: lineHeight,
            fontScale: fontScale
        };
    }

    // Module exports
    cornerstoneTools.setContextToDisplayFontSize = setContextToDisplayFontSize;

})(cornerstone, cornerstoneTools);
 
// End Source; src/util/setContextToDisplayFontSize.js
module.exports = cornerstoneTools;
},{"./cornerstoneMath":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/lib/cornerstoneMath.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/lib/cornerstoneWADOImageLoader.js":[function(require,module,exports){
/*! cornerstone-wado-image-loader - v0.13.3 - 2016-06-02 | (c) 2014 Chris Hafey | https://github.com/chafey/cornerstoneWADOImageLoader */
//
// This is a cornerstone image loader for WADO-URI requests.  It has limited support for compressed
// transfer syntaxes, check here to see what is currently supported:
//
// https://github.com/chafey/cornerstoneWADOImageLoader/blob/master/docs/TransferSyntaxes.md
//
// It will support implicit little endian transfer syntaxes but explicit little endian is strongly preferred
// to avoid any parsing issues related to SQ elements.  To request that the WADO object be returned as explicit little endian, append
// the following on your WADO url: &transferSyntax=1.2.840.10008.1.2.1
//

/*
  Import dicom parser
*/
var dicomParser = require("./dicomParser.min");


if(typeof cornerstone === 'undefined'){
  cornerstone = {};
}
if(typeof cornerstoneWADOImageLoader === 'undefined'){
  cornerstoneWADOImageLoader = {
    internal: {
      options : {
        // callback allowing customization of the xhr (e.g. adding custom auth headers, cors, etc)
        beforeSend: function (xhr) {
        },
        // callback allowing modification of newly created image objects
        imageCreated : function(image) {
        }
      }
    }
  };
}

(function ($, cornerstone, cornerstoneWADOImageLoader) {

  "use strict";

  // add a decache callback function to clear out our dataSetCacheManager
  function addDecache(image) {
    image.decache = function() {
      //console.log('decache');
      var parsedImageId = cornerstoneWADOImageLoader.parseImageId(image.imageId);
      cornerstoneWADOImageLoader.dataSetCacheManager.unload(parsedImageId.url);
    };
  }

  function loadDataSetFromPromise(xhrRequestPromise, imageId, frame, sharedCacheKey) {
    var deferred = $.Deferred();
    xhrRequestPromise.then(function(dataSet) {
      var imagePromise = cornerstoneWADOImageLoader.createImageObject(dataSet, imageId, frame, sharedCacheKey);
      imagePromise.then(function(image) {
        addDecache(image);
        deferred.resolve(image);
      }, function(error) {
        deferred.reject(error);
      });
    }, function(error) {
      deferred.reject(error);
    });
    return deferred;
  }

  function getLoaderForScheme(scheme) {
    if(scheme === 'dicomweb' || scheme === 'wadouri') {
      return cornerstoneWADOImageLoader.internal.xhrRequest;
    }
    else if(scheme === 'dicomfile') {
      return cornerstoneWADOImageLoader.internal.loadFileRequest;
    }
  }

  function loadImage(imageId) {
    var parsedImageId = cornerstoneWADOImageLoader.parseImageId(imageId);

    var loader = getLoaderForScheme(parsedImageId.scheme);

    // if the dataset for this url is already loaded, use it
    if(cornerstoneWADOImageLoader.dataSetCacheManager.isLoaded(parsedImageId.url)) {
      return loadDataSetFromPromise(cornerstoneWADOImageLoader.dataSetCacheManager.load(parsedImageId.url, loader), imageId, parsedImageId.frame, parsedImageId.url);
    }

    // if multiframe, load the dataSet via the dataSetCacheManager to keep it in memory
    if(parsedImageId.frame !== undefined) {
      return loadDataSetFromPromise(cornerstoneWADOImageLoader.dataSetCacheManager.load(parsedImageId.url, loader), imageId, parsedImageId.frame, parsedImageId.url);
    }

    // not multiframe, load it directly and let cornerstone cache manager its lifetime
    var deferred = $.Deferred();
    var xhrRequestPromise =  loader(parsedImageId.url, imageId);
    xhrRequestPromise.then(function(dataSet) {
      var imagePromise = cornerstoneWADOImageLoader.createImageObject(dataSet, imageId, parsedImageId.frame);
      imagePromise.then(function(image) {
        addDecache(image);
        deferred.resolve(image);
      }, function(error) {
        deferred.reject(error);
      });
    }, function(error) {
      deferred.reject(error);
    });
    return deferred;
  }

  // register dicomweb and wadouri image loader prefixes
  cornerstoneWADOImageLoader.internal.loadImage = loadImage;

}($, cornerstone, cornerstoneWADOImageLoader));
(function (cornerstoneWADOImageLoader) {

  "use strict";

  function convertRGB(dataSet, decodedImageFrame, rgbaBuffer) {
    var planarConfiguration = dataSet.uint16('x00280006');
    if(planarConfiguration === 0) {
      cornerstoneWADOImageLoader.convertRGBColorByPixel(decodedImageFrame, rgbaBuffer);
    } else {
      cornerstoneWADOImageLoader.convertRGBColorByPlane(decodedImageFrame, rgbaBuffer);
    }
  }

  function convertYBRFull(dataSet, decodedImageFrame, rgbaBuffer) {
    var planarConfiguration = dataSet.uint16('x00280006');
    if(planarConfiguration === 0) {
      cornerstoneWADOImageLoader.convertYBRFullByPixel(decodedImageFrame, rgbaBuffer);
    } else {
      cornerstoneWADOImageLoader.convertYBRFullByPlane(decodedImageFrame, rgbaBuffer);
    }
  }

  function convertColorSpace(canvas, dataSet, imageFrame) {
    // extract the fields we need
    var height = dataSet.uint16('x00280010');
    var width = dataSet.uint16('x00280011');
    var photometricInterpretation = dataSet.string('x00280004');

    // setup the canvas context
    canvas.height = height;
    canvas.width = width;
    var context = canvas.getContext('2d');
    var imageData = context.createImageData(width, height);

    // convert based on the photometric interpretation
    var deferred = $.Deferred();
    try {
      if (photometricInterpretation === "RGB" )
      {
        convertRGB(dataSet, imageFrame, imageData.data);
      }
      else if (photometricInterpretation === "YBR_RCT")
      {
        convertRGB(dataSet, imageFrame, imageData.data);
      }
      else if (photometricInterpretation === "YBR_ICT")
      {
        convertRGB(dataSet, imageFrame, imageData.data);
      }
      else if( photometricInterpretation === "PALETTE COLOR" )
      {
        cornerstoneWADOImageLoader.convertPALETTECOLOR(imageFrame, imageData.data, dataSet );
      }
      else if( photometricInterpretation === "YBR_FULL_422" )
      {
        convertYBRFull(dataSet, imageFrame, imageData.data);
      }
      else if(photometricInterpretation === "YBR_FULL" )
      {
        convertYBRFull(dataSet, imageFrame, imageData.data);
      }
      else
      {
        throw "no color space conversion for photometric interpretation " + photometricInterpretation;
      }
      deferred.resolve(imageData);
      return deferred.promise();
    } catch (error) {
      deferred.reject(error);
      return deferred.promise();
    }
  }

  // module exports
  cornerstoneWADOImageLoader.convertColorSpace = convertColorSpace;

}(cornerstoneWADOImageLoader));
(function (cornerstoneWADOImageLoader) {

  "use strict";

  function convertPALETTECOLOR( imageFrame, rgbaBuffer, dataSet ) {
    var len=dataSet.int16('x00281101',0);

    // Account for zero-values for the lookup table length
    //
    // "The first Palette Color Lookup Table Descriptor value is the number of entries in the lookup table.
    //  When the number of table entries is equal to 2^16 then this value shall be 0."
    //
    // See: http://dicom.nema.org/MEDICAL/Dicom/2015c/output/chtml/part03/sect_C.7.6.3.html#sect_C.7.6.3.1.5
    if (!len) {
      len = 65536;
    }

    var start=dataSet.int16('x00281101',1);
    var bits=dataSet.int16('x00281101',2);
    var shift = (bits===8 ? 0 : 8 );

    var buffer = dataSet.byteArray.buffer;
    var rData=new Uint16Array( buffer, dataSet.elements.x00281201.dataOffset, len );
    var gData=new Uint16Array( buffer, dataSet.elements.x00281202.dataOffset, len );
    var bData=new Uint16Array( buffer, dataSet.elements.x00281203.dataOffset, len );

    var numPixels = dataSet.uint16('x00280010') * dataSet.uint16('x00280011');
    var palIndex=0;
    var rgbaIndex=0;

    for( var i=0 ; i < numPixels ; ++i ) {
      var value=imageFrame[palIndex++];
      if( value < start )
        value=0;
      else if( value > start + len -1 )
        value=len-1;
      else
        value=value-start;

      rgbaBuffer[ rgbaIndex++ ] = rData[value] >> shift;
      rgbaBuffer[ rgbaIndex++ ] = gData[value] >> shift;
      rgbaBuffer[ rgbaIndex++ ] = bData[value] >> shift;
      rgbaBuffer[ rgbaIndex++ ] = 255;
    }

  }

  // module exports
  cornerstoneWADOImageLoader.convertPALETTECOLOR = convertPALETTECOLOR;

}(cornerstoneWADOImageLoader));
/**
 */
(function (cornerstoneWADOImageLoader) {

    "use strict";

    function convertRGBColorByPixel(imageFrame, rgbaBuffer) {
        if(imageFrame === undefined) {
            throw "decodeRGB: rgbBuffer must not be undefined";
        }
        if(imageFrame.length % 3 !== 0) {
            throw "decodeRGB: rgbBuffer length must be divisible by 3";
        }

        var numPixels = imageFrame.length / 3;
        var rgbIndex = 0;
        var rgbaIndex = 0;
        for(var i= 0; i < numPixels; i++) {
            rgbaBuffer[rgbaIndex++] = imageFrame[rgbIndex++]; // red
            rgbaBuffer[rgbaIndex++] = imageFrame[rgbIndex++]; // green
            rgbaBuffer[rgbaIndex++] = imageFrame[rgbIndex++]; // blue
            rgbaBuffer[rgbaIndex++] = 255; //alpha
        }
    }

    // module exports
    cornerstoneWADOImageLoader.convertRGBColorByPixel = convertRGBColorByPixel;
}(cornerstoneWADOImageLoader));
/**
 */
(function (cornerstoneWADOImageLoader) {

  "use strict";

  function convertRGBColorByPlane(imageFrame, rgbaBuffer) {
    if(imageFrame === undefined) {
      throw "decodeRGB: rgbBuffer must not be undefined";
    }
    if(imageFrame.length % 3 !== 0) {
      throw "decodeRGB: rgbBuffer length must be divisible by 3";
    }

    var numPixels = imageFrame.length / 3;
    var rgbaIndex = 0;
    var rIndex = 0;
    var gIndex = numPixels;
    var bIndex = numPixels*2;
    for(var i= 0; i < numPixels; i++) {
      rgbaBuffer[rgbaIndex++] = imageFrame[rIndex++]; // red
      rgbaBuffer[rgbaIndex++] = imageFrame[gIndex++]; // green
      rgbaBuffer[rgbaIndex++] = imageFrame[bIndex++]; // blue
      rgbaBuffer[rgbaIndex++] = 255; //alpha
    }
  }

  // module exports
  cornerstoneWADOImageLoader.convertRGBColorByPlane = convertRGBColorByPlane;
}(cornerstoneWADOImageLoader));
/**
 */
(function (cornerstoneWADOImageLoader) {

    "use strict";

    function convertYBRFullByPixel(imageFrame, rgbaBuffer) {
        if(imageFrame === undefined) {
            throw "decodeRGB: ybrBuffer must not be undefined";
        }
        if(imageFrame.length % 3 !== 0) {
            throw "decodeRGB: ybrBuffer length must be divisble by 3";
        }

        var numPixels = imageFrame.length / 3;
        var ybrIndex = 0;
        var rgbaIndex = 0;
        for(var i= 0; i < numPixels; i++) {
            var y = imageFrame[ybrIndex++];
            var cb = imageFrame[ybrIndex++];
            var cr = imageFrame[ybrIndex++];
            rgbaBuffer[rgbaIndex++] = y + 1.40200 * (cr - 128);// red
            rgbaBuffer[rgbaIndex++] = y - 0.34414 * (cb -128) - 0.71414 * (cr- 128); // green
            rgbaBuffer[rgbaIndex++] = y + 1.77200 * (cb - 128); // blue
            rgbaBuffer[rgbaIndex++] = 255; //alpha
        }
    }

    // module exports
    cornerstoneWADOImageLoader.convertYBRFullByPixel = convertYBRFullByPixel;
}(cornerstoneWADOImageLoader));
/**
 */
(function (cornerstoneWADOImageLoader) {

  "use strict";

  function convertYBRFullByPlane(imageFrame, rgbaBuffer) {
    if (imageFrame === undefined) {
      throw "decodeRGB: ybrBuffer must not be undefined";
    }
    if (imageFrame.length % 3 !== 0) {
      throw "decodeRGB: ybrBuffer length must be divisble by 3";
    }


    var numPixels = imageFrame.length / 3;
    var rgbaIndex = 0;
    var yIndex = 0;
    var cbIndex = numPixels;
    var crIndex = numPixels * 2;
    for (var i = 0; i < numPixels; i++) {
      var y = imageFrame[yIndex++];
      var cb = imageFrame[cbIndex++];
      var cr = imageFrame[crIndex++];
      rgbaBuffer[rgbaIndex++] = y + 1.40200 * (cr - 128);// red
      rgbaBuffer[rgbaIndex++] = y - 0.34414 * (cb - 128) - 0.71414 * (cr - 128); // green
      rgbaBuffer[rgbaIndex++] = y + 1.77200 * (cb - 128); // blue
      rgbaBuffer[rgbaIndex++] = 255; //alpha
    }
  }
  // module exports
  cornerstoneWADOImageLoader.convertYBRFullByPlane = convertYBRFullByPlane;
}(cornerstoneWADOImageLoader));
(function (cornerstoneWADOImageLoader) {

  "use strict";

  function configure(options) {
    cornerstoneWADOImageLoader.internal.options = options;
  }

  // module exports
  cornerstoneWADOImageLoader.configure = configure;

}(cornerstoneWADOImageLoader));
(function (cornerstoneWADOImageLoader) {

  "use strict";

  function createImageObject( dataSet, imageId, frame, sharedCacheKey ) {
    if(frame === undefined) {
      frame = 0;
    }

    // make the image based on whether it is color or not
    var photometricInterpretation = dataSet.string('x00280004');
    var isColor = cornerstoneWADOImageLoader.isColorImage(photometricInterpretation);
    if(isColor === false) {
      return cornerstoneWADOImageLoader.makeGrayscaleImage(imageId, dataSet, frame, sharedCacheKey);
    } else {
      return cornerstoneWADOImageLoader.makeColorImage(imageId, dataSet, frame, sharedCacheKey);
    }
  }

  // module exports
  cornerstoneWADOImageLoader.createImageObject = createImageObject;

}(cornerstoneWADOImageLoader));
/**
 * This object supports loading of DICOM P10 dataset from a uri and caching it so it can be accessed
 * by the caller.  This allows a caller to access the datasets without having to go through cornerstone's
 * image loader mechanism.  One reason a caller may need to do this is to determine the number of frames
 * in a multiframe sop instance so it can create the imageId's correctly.
 */
(function (cornerstoneWADOImageLoader) {

  "use strict";

  var loadedDataSets = {};
  var promises = {};

  // returns true if the wadouri for the specified index has been loaded
  function isLoaded(uri) {
    return loadedDataSets[uri] !== undefined;
  }

  // loads the dicom dataset from the wadouri sp
  function load(uri, loadRequest) {

    // if already loaded return it right away
    if(loadedDataSets[uri]) {
      //console.log('using loaded dataset ' + uri);
      var alreadyLoadedpromise = $.Deferred();
      loadedDataSets[uri].cacheCount++;
      alreadyLoadedpromise.resolve(loadedDataSets[uri].dataSet);
      return alreadyLoadedpromise;
    }

    // if we are currently loading this uri, return its promise
    if(promises[uri]) {
      //console.log('returning existing load promise for ' + uri);
      return promises[uri];
    }

    //console.log('loading ' + uri);

    // This uri is not loaded or being loaded, load it via an xhrRequest
    var promise = loadRequest(uri);
    promises[uri] = promise;

    // handle success and failure of the XHR request load
    promise.then(function(dataSet) {
      loadedDataSets[uri] = {
        dataSet: dataSet,
        cacheCount: 1
      };
      // done loading, remove the promise
      delete promises[uri];
    }, function () {
    }).always(function() {
        // error thrown, remove the promise
        delete promises[uri];
      });
    return promise;
  }

  // remove the cached/loaded dicom dataset for the specified wadouri to free up memory
  function unload(uri) {
    //console.log('unload for ' + uri);
    if(loadedDataSets[uri]) {
      loadedDataSets[uri].cacheCount--;
      if(loadedDataSets[uri].cacheCount === 0) {
        //console.log('removing loaded dataset for ' + uri);
        delete loadedDataSets[uri];
      }
    }
  }

  // removes all cached datasets from memory
  function purge() {
    loadedDataSets = {};
    promises = {};
  }

  // module exports
  cornerstoneWADOImageLoader.dataSetCacheManager = {
    isLoaded: isLoaded,
    load: load,
    unload: unload,
    purge: purge
  };

}(cornerstoneWADOImageLoader));
(function ($, cornerstone, cornerstoneWADOImageLoader) {

  "use strict";

  function decodeJpx(dataSet, frame) {
    var height = dataSet.uint16('x00280010');
    var width = dataSet.uint16('x00280011');

    var encodedImageFrame = cornerstoneWADOImageLoader.getEncodedImageFrame(dataSet, frame);

    var jpxImage = new JpxImage();
    jpxImage.parse(encodedImageFrame);

    var j2kWidth = jpxImage.width;
    var j2kHeight = jpxImage.height;
    if(j2kWidth !== width) {
      throw 'JPEG2000 decoder returned width of ' + j2kWidth + ', when ' + width + ' is expected';
    }
    if(j2kHeight !== height) {
      throw 'JPEG2000 decoder returned width of ' + j2kHeight + ', when ' + height + ' is expected';
    }
    var tileCount = jpxImage.tiles.length;
    if(tileCount !== 1) {
      throw 'JPEG2000 decoder returned a tileCount of ' + tileCount + ', when 1 is expected';
    }
    var tileComponents = jpxImage.tiles[0];
    var pixelData = tileComponents.items;

    return pixelData;
  }

  var openJPEG;

  function decodeOpenJPEG(data, bytesPerPixel, signed) {
    var dataPtr = openJPEG._malloc(data.length);
    openJPEG.writeArrayToMemory(data, dataPtr);

    // create param outpout
    var imagePtrPtr=openJPEG._malloc(4);
    var imageSizePtr=openJPEG._malloc(4);
    var imageSizeXPtr=openJPEG._malloc(4);
    var imageSizeYPtr=openJPEG._malloc(4);
    var imageSizeCompPtr=openJPEG._malloc(4);

    var t0 = Date.now();
    var ret = openJPEG.ccall('jp2_decode','number', ['number', 'number', 'number', 'number', 'number', 'number', 'number'],
      [dataPtr, data.length, imagePtrPtr, imageSizePtr, imageSizeXPtr, imageSizeYPtr, imageSizeCompPtr]);
    // add num vomp..etc
    if(ret !== 0){
      console.log('[opj_decode] decoding failed!')
      openJPEG._free(dataPtr);
      openJPEG._free(openJPEG.getValue(imagePtrPtr, '*'));
      openJPEG._free(imageSizeXPtr);
      openJPEG._free(imageSizeYPtr);
      openJPEG._free(imageSizePtr);
      openJPEG._free(imageSizeCompPtr);
      return undefined;
    }

    var imagePtr = openJPEG.getValue(imagePtrPtr, '*')

    var image = {
      length : openJPEG.getValue(imageSizePtr,'i32'),
      sx :  openJPEG.getValue(imageSizeXPtr,'i32'),
      sy :  openJPEG.getValue(imageSizeYPtr,'i32'),
      nbChannels : openJPEG.getValue(imageSizeCompPtr,'i32'), // hard coded for now
      perf_timetodecode : undefined,
      pixelData : undefined
    };

    // Copy the data from the EMSCRIPTEN heap into the correct type array
    var length = image.sx*image.sy*image.nbChannels;
    var src32 = new Uint32Array(openJPEG.HEAP32.buffer, imagePtr, length);
    if(bytesPerPixel === 1) {
      if(Uint8Array.from) {
        image.pixelData = Uint8Array.from(src32);
      } else {
        image.pixelData = new Uint8Array(length);
        for(var i=0; i < length; i++) {
          image.pixelData[i] = src32[i];
        }
      }
    } else {
      if (signed) {
        if(Int16Array.from) {
          image.pixelData = Int16Array.from(src32);
        } else {
          image.pixelData = new Int16Array(length);
          for(var i=0; i < length; i++) {
            image.pixelData[i] = src32[i];
          }
        }
      } else {
        if(Uint16Array.from) {
          image.pixelData = Uint16Array.from(src32);
        } else {
          image.pixelData = new Uint16Array(length);
          for(var i=0; i < length; i++) {
            image.pixelData[i] = src32[i];
          }
        }
      }
    }

    var t1 = Date.now();
    image.perf_timetodecode = t1-t0;

    // free
    openJPEG._free(dataPtr);
    openJPEG._free(imagePtrPtr);
    openJPEG._free(imagePtr);
    openJPEG._free(imageSizePtr);
    openJPEG._free(imageSizeXPtr);
    openJPEG._free(imageSizeYPtr);
    openJPEG._free(imageSizeCompPtr);

    return image;
  }

  function decodeOpenJpeg2000(dataSet, frame) {
    var height = dataSet.uint16('x00280010');
    var width = dataSet.uint16('x00280011');

    var encodedImageFrame = cornerstoneWADOImageLoader.getEncodedImageFrame(dataSet, frame);

    var bytesPerPixel = dataSet.uint16('x00280100') <= 8 ? 1 : 2;
    var signed = dataSet.uint16('x00280103') ? true : false;

    var image = decodeOpenJPEG(encodedImageFrame, bytesPerPixel, signed);
    var j2kWidth = image.sx;
    var j2kHeight = image.sy;

    if(j2kWidth !== width) {
      throw 'JPEG2000 decoder returned width of ' + j2kWidth + ', when ' + width + ' is expected';
    }
    if(j2kHeight !== height) {
      throw 'JPEG2000 decoder returned width of ' + j2kHeight + ', when ' + height + ' is expected';
    }
    return image.pixelData;
  }

  function decodeJPEG2000(dataSet, frame)
  {
    // Try to initialize OpenJPEG
    if(typeof OpenJPEG !== 'undefined' && !openJPEG) {
      openJPEG = OpenJPEG();
      if(!openJPEG || !openJPEG._jp2_decode) {
        throw 'OpenJPEG failed to initialize';
      }
    }

    // OpenJPEG2000 https://github.com/jpambrun/openjpeg
    if(openJPEG && openJPEG._jp2_decode) {
      return decodeOpenJpeg2000(dataSet, frame);
    }

    // OHIF image-JPEG2000 https://github.com/OHIF/image-JPEG2000
    if(typeof JpxImage !== 'undefined') {
      return decodeJpx(dataSet, frame);
    }
    throw 'No JPEG2000 decoder loaded';
  }

  cornerstoneWADOImageLoader.decodeJPEG2000 = decodeJPEG2000;
}($, cornerstone, cornerstoneWADOImageLoader));
(function ($, cornerstone, cornerstoneWADOImageLoader) {

  "use strict";

  function decodeJPEGBaseline(dataSet, frame)
  {
    var height = dataSet.uint16('x00280010');
    var width = dataSet.uint16('x00280011');
    var bitsAllocated = dataSet.uint16('x00280100');
    var encodedImageFrame = cornerstoneWADOImageLoader.getEncodedImageFrame(dataSet, frame);
    var jpeg = new JpegImage();
    jpeg.parse( encodedImageFrame );
    if(bitsAllocated === 8) {
      return jpeg.getData(width, height);
    }
    else if(bitsAllocated === 16) {
      return jpeg.getData16(width, height);
    }
  }

  cornerstoneWADOImageLoader.decodeJPEGBaseline = decodeJPEGBaseline;
}($, cornerstone, cornerstoneWADOImageLoader));
/**
 * Special decoder for 8 bit jpeg that leverages the browser's built in JPEG decoder for increased performance
 */
(function (cornerstoneWADOImageLoader) {

  "use strict";

  function arrayBufferToString(buffer) {
    return binaryToString(String.fromCharCode.apply(null, Array.prototype.slice.apply(new Uint8Array(buffer))));
  }

  function binaryToString(binary) {
    var error;

    try {
      return decodeURIComponent(escape(binary));
    } catch (_error) {
      error = _error;
      if (error instanceof URIError) {
        return binary;
      } else {
        throw error;
      }
    }
  }

  function decodeJPEGBaseline8Bit(canvas, dataSet, frame) {
    var deferred = $.Deferred();

    var height = dataSet.uint16('x00280010');
    var width = dataSet.uint16('x00280011');
    // resize the canvas
    canvas.height = height;
    canvas.width = width;

    var encodedImageFrame = cornerstoneWADOImageLoader.getEncodedImageFrame(dataSet, frame);

    var imgBlob = new Blob([encodedImageFrame], {type: "image/jpeg"});

    var r = new FileReader();
    if(r.readAsBinaryString === undefined) {
      r.readAsArrayBuffer(imgBlob);
    }
    else {
      r.readAsBinaryString(imgBlob); // doesn't work on IE11
    }

    r.onload = function(){
      var img=new Image();
      img.onload = function() {
        var context = canvas.getContext('2d');
        context.drawImage(this, 0, 0);
        var imageData = context.getImageData(0, 0, width, height);
        deferred.resolve(imageData);
      };
      img.onerror = function(error) {
        deferred.reject(error);
      };
      if(r.readAsBinaryString === undefined) {
        img.src = "data:image/jpeg;base64,"+window.btoa(arrayBufferToString(r.result));
      }
      else {
        img.src = "data:image/jpeg;base64,"+window.btoa(r.result); // doesn't work on IE11
      }

    };
    return deferred.promise();
  }

  function isJPEGBaseline8Bit(dataSet) {
    var transferSyntax = dataSet.string('x00020010');
    var bitsAllocated = dataSet.uint16('x00280100');

    if((bitsAllocated === 8) &&
      transferSyntax === "1.2.840.10008.1.2.4.50")
    {
      return true;
    }

  }

  // module exports
  cornerstoneWADOImageLoader.decodeJPEGBaseline8Bit = decodeJPEGBaseline8Bit;
  cornerstoneWADOImageLoader.isJPEGBaseline8Bit = isJPEGBaseline8Bit;

}(cornerstoneWADOImageLoader));
"use strict";
(function (cornerstoneWADOImageLoader) {


  var charLS;

  function jpegLSDecode(data) {

    // prepare input parameters
    var dataPtr = charLS._malloc(data.length);
    charLS.writeArrayToMemory(data, dataPtr);

    // prepare output parameters
    var imagePtrPtr=charLS._malloc(4);
    var imageSizePtr=charLS._malloc(4);
    var widthPtr=charLS._malloc(4);
    var heightPtr=charLS._malloc(4);
    var bitsPerSamplePtr=charLS._malloc(4);
    var stridePtr=charLS._malloc(4);
    var allowedLossyErrorPtr =charLS._malloc(4);
    var componentsPtr=charLS._malloc(4);

    var interleaveModePtr=charLS._malloc(4);

    // Decode the image
    var result = charLS.ccall(
      'jpegls_decode',
      'number',
      ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number'],
      [dataPtr, data.length, imagePtrPtr, imageSizePtr, widthPtr, heightPtr, bitsPerSamplePtr, stridePtr, componentsPtr, allowedLossyErrorPtr, interleaveModePtr]
    );

    // Extract result values into object
    var image = {
      result : result,
      width : charLS.getValue(widthPtr,'i32'),
      height : charLS.getValue(heightPtr,'i32'),
      bitsPerSample : charLS.getValue(bitsPerSamplePtr,'i32'),
      stride : charLS.getValue(stridePtr,'i32'),
      components : charLS.getValue(componentsPtr, 'i32'),
      allowedLossyError : charLS.getValue(allowedLossyErrorPtr, 'i32'),
      interleaveMode: charLS.getValue(interleaveModePtr, 'i32'),
      pixelData: undefined
    };

    // Copy image from emscripten heap into appropriate array buffer type
    var imagePtr = charLS.getValue(imagePtrPtr, '*');
    if(image.bitsPerSample <= 8) {
      image.pixelData = new Uint8Array(image.width * image.height * image.components);
      var src8 = new Uint8Array(charLS.HEAP8.buffer, imagePtr, image.pixelData.length);
      image.pixelData.set(src8);
    } else {
      // I have seen 16 bit signed images, but I don't know if 16 bit unsigned is valid, hoping to get
      // answer here:
      // https://github.com/team-charls/charls/issues/14
      image.pixelData = new Int16Array(image.width * image.height * image.components);
      var src16 = new Int16Array(charLS.HEAP16.buffer, imagePtr, image.pixelData.length);
      image.pixelData.set(src16);
    }

    // free memory and return image object
    charLS._free(dataPtr);
    charLS._free(imagePtr);
    charLS._free(imagePtrPtr);
    charLS._free(imageSizePtr);
    charLS._free(widthPtr);
    charLS._free(heightPtr);
    charLS._free(bitsPerSamplePtr);
    charLS._free(stridePtr);
    charLS._free(componentsPtr);
    charLS._free(interleaveModePtr);

    return image;
  }

  function decodeJPEGLS(dataSet, frame)
  {
    // Try to initialize CharLS
    if(CharLS && !charLS) {
      charLS = CharLS();
    }

    // CharLS https://github.com/chafey/charls
    if(!charLS || !charLS._jpegls_decode) {
      throw 'No JPEG-LS decoder loaded';
    }

    var height = dataSet.uint16('x00280010');
    var width = dataSet.uint16('x00280011');

    var encodedImageFrame = cornerstoneWADOImageLoader.getEncodedImageFrame(dataSet, frame);

    var image = jpegLSDecode(encodedImageFrame);
    //console.log(image);

    // throw error if not success or too much data
    if(image.result !== 0 && image.result !== 6) {
      throw 'JPEG-LS decoder failed to decode frame (error code ' + image.result + ')';
    }

    // Sanity check the size
    if(image.width !== width) {
      throw 'JPEG-LS decoder returned width of ' + image.width + ', when ' + width + ' is expected';
    }
    if(image.height !== height) {
      throw 'JPEG-LS decoder returned width of ' + image.height + ', when ' + height + ' is expected';
    }

    return image.pixelData;
  }

  // module exports
  cornerstoneWADOImageLoader.decodeJPEGLS = decodeJPEGLS;

}(cornerstoneWADOImageLoader));
"use strict";
(function (cornerstoneWADOImageLoader) {

  function decodeJPEGLossless(dataSet, frame) {
    var bitsAllocated = dataSet.uint16('x00280100');
    var pixelRepresentation = dataSet.uint16('x00280103');
    var encodedImageFrame = cornerstoneWADOImageLoader.getEncodedImageFrame(dataSet, frame);
    var byteOutput = bitsAllocated <= 8 ? 1 : 2;
    //console.time('jpeglossless');
    var decoder = new jpeg.lossless.Decoder();
    var decompressedData = decoder.decode(encodedImageFrame.buffer, encodedImageFrame.byteOffset, encodedImageFrame.length, byteOutput);
    //console.timeEnd('jpeglossless');
    if (pixelRepresentation === 0) {
      if (byteOutput === 2) {
        return new Uint16Array(decompressedData.buffer);
      } else {
        // untested!
        return new Uint8Array(decompressedData.buffer);
      }
    } else {
      return new Int16Array(decompressedData.buffer);
    }
  }
  // module exports
  cornerstoneWADOImageLoader.decodeJPEGLossless = decodeJPEGLossless;

}(cornerstoneWADOImageLoader));
/**
 */
(function (cornerstoneWADOImageLoader) {

  function decodeRLE(dataSet, frame) {
    var height = dataSet.uint16('x00280010');
    var width = dataSet.uint16('x00280011');
    var samplesPerPixel = dataSet.uint16('x00280002');
    var pixelDataElement = dataSet.elements.x7fe00010;

    var frameData = dicomParser.readEncapsulatedPixelDataFromFragments(dataSet, pixelDataElement, frame);
    var pixelFormat = cornerstoneWADOImageLoader.getPixelFormat(dataSet);


    var frameSize = width*height;
    var buffer;
    if( pixelFormat===1 ) {
      buffer = new ArrayBuffer(frameSize*samplesPerPixel);
      decode8( frameData, buffer, frameSize, samplesPerPixel);
      return new Uint8Array(buffer);
    } else if( pixelFormat===2 ) {
      buffer = new ArrayBuffer(frameSize*samplesPerPixel*2);
      decode16( frameData, buffer, frameSize );
      return new Uint16Array(buffer);
    } else if( pixelFormat===3 ) {
      buffer = new ArrayBuffer(frameSize*samplesPerPixel*2);
      decode16( frameData, buffer, frameSize );
      return new Int16Array(buffer);
    }
  }

  function decode8( frameData, outFrame, frameSize, samplesSize ) {
    var header=new DataView(frameData.buffer, frameData.byteOffset);
    var data=new DataView( frameData.buffer, frameData.byteOffset );
    var out=new DataView( outFrame );

    var outIndex=0;
    var numSegments = header.getInt32(0,true);
    for( var s=0 ; s < numSegments ; ++s ) {
      outIndex = s;

      var inIndex=header.getInt32( (s+1)*4,true);
      var maxIndex=header.getInt32( (s+2)*4,true);
      if( maxIndex===0 )
        maxIndex = frameData.length;

      var endOfSegment = frameSize * numSegments;

      while( inIndex < maxIndex ) {
        var n=data.getInt8(inIndex++);
        if( n >=0 && n <=127 ) {
          // copy n bytes
          for( var i=0 ; i < n+1 && outIndex < endOfSegment; ++i ) {
            out.setInt8(outIndex, data.getInt8(inIndex++));
            outIndex+=samplesSize;
          }
        } else if( n<= -1 && n>=-127 ) {
          var value=data.getInt8(inIndex++);
          // run of n bytes
          for( var j=0 ; j < -n+1 && outIndex < endOfSegment; ++j ) {
            out.setInt8(outIndex, value );
            outIndex+=samplesSize;
          }
        } else if (n===-128)
          ; // do nothing
      }
    }
  }

  function decode16( frameData, outFrame, frameSize ) {
    var header=new DataView(frameData.buffer, frameData.byteOffset);
    var data=new DataView( frameData.buffer, frameData.byteOffset );
    var out=new DataView( outFrame );

    var numSegments = header.getInt32(0,true);
    for( var s=0 ; s < numSegments ; ++s ) {
      var outIndex=0;
      var highByte=( s===0 ? 1 : 0);

      var inIndex=header.getInt32( (s+1)*4,true);
      var maxIndex=header.getInt32( (s+2)*4,true);
      if( maxIndex===0 )
        maxIndex = frameData.length;

      while( inIndex < maxIndex ) {
        var n=data.getInt8(inIndex++);
        if( n >=0 && n <=127 ) {
          for( var i=0 ; i < n+1 && outIndex < frameSize ; ++i ) {
            out.setInt8( (outIndex*2)+highByte, data.getInt8(inIndex++) );
            outIndex++;
          }
        } else if( n<= -1 && n>=-127 ) {
          var value=data.getInt8(inIndex++);
          for( var j=0 ; j < -n+1 && outIndex < frameSize ; ++j ) {
            out.setInt8( (outIndex*2)+highByte, value );
            outIndex++;
          }
        } else if (n===-128)
          ; // do nothing
      }
    }
  }

  // module exports
  cornerstoneWADOImageLoader.decodeRLE = decodeRLE;

}(cornerstoneWADOImageLoader));
(function (cornerstoneWADOImageLoader) {

  "use strict";

  function decodeTransferSyntax(dataSet, frame) {
    var transferSyntax = dataSet.string('x00020010');

    // Implicit VR Little Endian
    if( transferSyntax === "1.2.840.10008.1.2") {
      return cornerstoneWADOImageLoader.extractUncompressedPixels(dataSet, frame);
    }
    // Explicit VR Little Endian
    else if( transferSyntax === "1.2.840.10008.1.2.1") {
      return cornerstoneWADOImageLoader.extractUncompressedPixels(dataSet, frame);
    }
    // Explicit VR Big Endian (retired)
    else if ( transferSyntax === "1.2.840.10008.1.2.2" )
    {
      return cornerstoneWADOImageLoader.extractUncompressedPixels(dataSet, frame, true);
    }
    // RLE Lossless
    else if ( transferSyntax === "1.2.840.10008.1.2.5" )
    {
      return cornerstoneWADOImageLoader.decodeRLE( dataSet, frame);
    }
    // JPEG Baseline lossy process 1 (8 bit)
    else if ( transferSyntax === "1.2.840.10008.1.2.4.50" )
    {
      return cornerstoneWADOImageLoader.decodeJPEGBaseline(dataSet, frame);
    }
    // JPEG Baseline lossy process 2 & 4 (12 bit)
    else if ( transferSyntax === "1.2.840.10008.1.2.4.51" )
    {
      return cornerstoneWADOImageLoader.decodeJPEGBaseline(dataSet, frame);
    }
    // JPEG Lossless, Nonhierarchical (Processes 14)
    else if ( transferSyntax === "1.2.840.10008.1.2.4.57" )
    {
      return cornerstoneWADOImageLoader.decodeJPEGLossless(dataSet, frame);
    }
    // JPEG Lossless, Nonhierarchical (Processes 14 [Selection 1])
    else if ( transferSyntax === "1.2.840.10008.1.2.4.70" )
    {
      return cornerstoneWADOImageLoader.decodeJPEGLossless(dataSet, frame);
    }
    // JPEG-LS Lossless Image Compression
    else if ( transferSyntax === "1.2.840.10008.1.2.4.80" )
    {
      return cornerstoneWADOImageLoader.decodeJPEGLS(dataSet, frame);
    }
    // JPEG-LS Lossy (Near-Lossless) Image Compression
    else if ( transferSyntax === "1.2.840.10008.1.2.4.81" )
    {
      return cornerstoneWADOImageLoader.decodeJPEGLS(dataSet, frame);
    }
    // JPEG 2000 Lossless
    else if(transferSyntax === "1.2.840.10008.1.2.4.90")
    {
      return cornerstoneWADOImageLoader.decodeJPEG2000(dataSet, frame);
    }
    // JPEG 2000 Lossy
    else if(transferSyntax === "1.2.840.10008.1.2.4.91")
    {
      return cornerstoneWADOImageLoader.decodeJPEG2000(dataSet, frame);
    }
    /* Don't know if these work...
     // JPEG 2000 Part 2 Multicomponent Image Compression (Lossless Only)
     else if(transferSyntax === "1.2.840.10008.1.2.4.92")
     {
     return cornerstoneWADOImageLoader.decodeJPEG2000(dataSet, frame);
     }
     // JPEG 2000 Part 2 Multicomponent Image Compression
     else if(transferSyntax === "1.2.840.10008.1.2.4.93")
     {
     return cornerstoneWADOImageLoader.decodeJPEG2000(dataSet, frame);
     }
     */
    else
    {
      if(console && console.log) {
        console.log("Image cannot be decoded due to Unsupported transfer syntax " + transferSyntax);
      }
      throw "no decoder for transfer syntax " + transferSyntax;
    }
  }

  // module exports
  cornerstoneWADOImageLoader.decodeTransferSyntax = decodeTransferSyntax;

}(cornerstoneWADOImageLoader));
// // jshint ignore: start

// /* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /
//  /* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */
// /*
//  Copyright 2011 notmasteryet

//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at

//  http://www.apache.org/licenses/LICENSE-2.0

//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  */

// // - The JPEG specification can be found in the ITU CCITT Recommendation T.81
// //   (www.w3.org/Graphics/JPEG/itu-t81.pdf)
// // - The JFIF specification can be found in the JPEG File Interchange Format
// //   (www.w3.org/Graphics/JPEG/jfif3.pdf)
// // - The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters
// //   in PostScript Level 2, Technical Note #5116
// //   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)

// var ColorSpace = {Unkown: 0, Grayscale: 1, AdobeRGB: 2, RGB: 3, CYMK: 4};
// var JpegImage = (function jpegImage() {
//   "use strict";
//   var dctZigZag = new Int32Array([
//     0,
//     1, 8,
//     16, 9, 2,
//     3, 10, 17, 24,
//     32, 25, 18, 11, 4,
//     5, 12, 19, 26, 33, 40,
//     48, 41, 34, 27, 20, 13, 6,
//     7, 14, 21, 28, 35, 42, 49, 56,
//     57, 50, 43, 36, 29, 22, 15,
//     23, 30, 37, 44, 51, 58,
//     59, 52, 45, 38, 31,
//     39, 46, 53, 60,
//     61, 54, 47,
//     55, 62,
//     63
//   ]);

//   var dctCos1 = 4017;   // cos(pi/16)
//   var dctSin1 = 799;   // sin(pi/16)
//   var dctCos3 = 3406;   // cos(3*pi/16)
//   var dctSin3 = 2276;   // sin(3*pi/16)
//   var dctCos6 = 1567;   // cos(6*pi/16)
//   var dctSin6 = 3784;   // sin(6*pi/16)
//   var dctSqrt2 = 5793;   // sqrt(2)
//   var dctSqrt1d2 = 2896;  // sqrt(2) / 2

//   function constructor() {
//   }

//   function buildHuffmanTable(codeLengths, values) {
//     var k = 0, code = [], i, j, length = 16;
//     while (length > 0 && !codeLengths[length - 1])
//       length--;
//     code.push({children: [], index: 0});
//     var p = code[0], q;
//     for (i = 0; i < length; i++) {
//       for (j = 0; j < codeLengths[i]; j++) {
//         p = code.pop();
//         p.children[p.index] = values[k];
//         while (p.index > 0) {
//           p = code.pop();
//         }
//         p.index++;
//         code.push(p);
//         while (code.length <= i) {
//           code.push(q = {children: [], index: 0});
//           p.children[p.index] = q.children;
//           p = q;
//         }
//         k++;
//       }
//       if (i + 1 < length) {
//         // p here points to last code
//         code.push(q = {children: [], index: 0});
//         p.children[p.index] = q.children;
//         p = q;
//       }
//     }
//     return code[0].children;
//   }

//   function getBlockBufferOffset(component, row, col) {
//     return 64 * ((component.blocksPerLine + 1) * row + col);
//   }

//   function decodeScan(data, offset,
//                       frame, components, resetInterval,
//                       spectralStart, spectralEnd,
//                       successivePrev, successive) {
//     var precision = frame.precision;
//     var samplesPerLine = frame.samplesPerLine;
//     var scanLines = frame.scanLines;
//     var mcusPerLine = frame.mcusPerLine;
//     var progressive = frame.progressive;
//     var maxH = frame.maxH, maxV = frame.maxV;

//     var startOffset = offset, bitsData = 0, bitsCount = 0;

//     function readBit() {
//       if (bitsCount > 0) {
//         bitsCount--;
//         return (bitsData >> bitsCount) & 1;
//       }
//       bitsData = data[offset++];
//       if (bitsData == 0xFF) {
//         var nextByte = data[offset++];
//         if (nextByte) {
//           throw "unexpected marker: " + ((bitsData << 8) | nextByte).toString(16);
//         }
//         // unstuff 0
//       }
//       bitsCount = 7;
//       return bitsData >>> 7;
//     }

//     function decodeHuffman(tree) {
//       var node = tree;
//       var bit;
//       while ((bit = readBit()) !== null) {
//         node = node[bit];
//         if (typeof node === 'number')
//           return node;
//         if (typeof node !== 'object')
//           throw "invalid huffman sequence";
//       }
//       return null;
//     }

//     function receive(length) {
//       var n = 0;
//       while (length > 0) {
//         var bit = readBit();
//         if (bit === null)
//           return;
//         n = (n << 1) | bit;
//         length--;
//       }
//       return n;
//     }

//     function receiveAndExtend(length) {
//       var n = receive(length);
//       if (n >= 1 << (length - 1))
//         return n;
//       return n + (-1 << length) + 1;
//     }

//     function decodeBaseline(component, offset) {
//       var t = decodeHuffman(component.huffmanTableDC);
//       var diff = t === 0 ? 0 : receiveAndExtend(t);
//       component.blockData[offset] = (component.pred += diff);
//       var k = 1;
//       while (k < 64) {
//         var rs = decodeHuffman(component.huffmanTableAC);
//         var s = rs & 15, r = rs >> 4;
//         if (s === 0) {
//           if (r < 15)
//             break;
//           k += 16;
//           continue;
//         }
//         k += r;
//         var z = dctZigZag[k];
//         component.blockData[offset + z] = receiveAndExtend(s);
//         k++;
//       }
//     }

//     function decodeDCFirst(component, offset) {
//       var t = decodeHuffman(component.huffmanTableDC);
//       var diff = t === 0 ? 0 : (receiveAndExtend(t) << successive);
//       component.blockData[offset] = (component.pred += diff);
//     }

//     function decodeDCSuccessive(component, offset) {
//       component.blockData[offset] |= readBit() << successive;
//     }

//     var eobrun = 0;
//     function decodeACFirst(component, offset) {
//       if (eobrun > 0) {
//         eobrun--;
//         return;
//       }
//       var k = spectralStart, e = spectralEnd;
//       while (k <= e) {
//         var rs = decodeHuffman(component.huffmanTableAC);
//         var s = rs & 15, r = rs >> 4;
//         if (s === 0) {
//           if (r < 15) {
//             eobrun = receive(r) + (1 << r) - 1;
//             break;
//           }
//           k += 16;
//           continue;
//         }
//         k += r;
//         var z = dctZigZag[k];
//         component.blockData[offset + z] = receiveAndExtend(s) * (1 << successive);
//         k++;
//       }
//     }

//     var successiveACState = 0, successiveACNextValue;
//     function decodeACSuccessive(component, offset) {
//       var k = spectralStart, e = spectralEnd, r = 0;
//       while (k <= e) {
//         var z = dctZigZag[k];
//         switch (successiveACState) {
//           case 0: // initial state
//             var rs = decodeHuffman(component.huffmanTableAC);
//             var s = rs & 15;
//             r = rs >> 4;
//             if (s === 0) {
//               if (r < 15) {
//                 eobrun = receive(r) + (1 << r);
//                 successiveACState = 4;
//               } else {
//                 r = 16;
//                 successiveACState = 1;
//               }
//             } else {
//               if (s !== 1)
//                 throw "invalid ACn encoding";
//               successiveACNextValue = receiveAndExtend(s);
//               successiveACState = r ? 2 : 3;
//             }
//             continue;
//           case 1: // skipping r zero items
//           case 2:
//             if (component.blockData[offset + z]) {
//               component.blockData[offset + z] += (readBit() << successive);
//             } else {
//               r--;
//               if (r === 0)
//                 successiveACState = successiveACState == 2 ? 3 : 0;
//             }
//             break;
//           case 3: // set value for a zero item
//             if (component.blockData[offset + z]) {
//               component.blockData[offset + z] += (readBit() << successive);
//             } else {
//               component.blockData[offset + z] = successiveACNextValue << successive;
//               successiveACState = 0;
//             }
//             break;
//           case 4: // eob
//             if (component.blockData[offset + z]) {
//               component.blockData[offset + z] += (readBit() << successive);
//             }
//             break;
//         }
//         k++;
//       }
//       if (successiveACState === 4) {
//         eobrun--;
//         if (eobrun === 0)
//           successiveACState = 0;
//       }
//     }

//     function decodeMcu(component, decode, mcu, row, col) {
//       var mcuRow = (mcu / mcusPerLine) | 0;
//       var mcuCol = mcu % mcusPerLine;
//       var blockRow = mcuRow * component.v + row;
//       var blockCol = mcuCol * component.h + col;
//       var offset = getBlockBufferOffset(component, blockRow, blockCol);
//       decode(component, offset);
//     }

//     function decodeBlock(component, decode, mcu) {
//       var blockRow = (mcu / component.blocksPerLine) | 0;
//       var blockCol = mcu % component.blocksPerLine;
//       var offset = getBlockBufferOffset(component, blockRow, blockCol);
//       decode(component, offset);
//     }

//     var componentsLength = components.length;
//     var component, i, j, k, n;
//     var decodeFn;
//     if (progressive) {
//       if (spectralStart === 0)
//         decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;
//       else
//         decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
//     } else {
//       decodeFn = decodeBaseline;
//     }

//     var mcu = 0, marker;
//     var mcuExpected;
//     if (componentsLength == 1) {
//       mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;
//     } else {
//       mcuExpected = mcusPerLine * frame.mcusPerColumn;
//     }
//     if (!resetInterval) {
//       resetInterval = mcuExpected;
//     }

//     var h, v;
//     while (mcu < mcuExpected) {
//       // reset interval stuff
//       for (i = 0; i < componentsLength; i++) {
//         components[i].pred = 0;
//       }
//       eobrun = 0;

//       if (componentsLength == 1) {
//         component = components[0];
//         for (n = 0; n < resetInterval; n++) {
//           decodeBlock(component, decodeFn, mcu);
//           mcu++;
//         }
//       } else {
//         for (n = 0; n < resetInterval; n++) {
//           for (i = 0; i < componentsLength; i++) {
//             component = components[i];
//             h = component.h;
//             v = component.v;
//             for (j = 0; j < v; j++) {
//               for (k = 0; k < h; k++) {
//                 decodeMcu(component, decodeFn, mcu, j, k);
//               }
//             }
//           }
//           mcu++;
//         }
//       }

//       // find marker
//       bitsCount = 0;
//       marker = (data[offset] << 8) | data[offset + 1];
//       if (marker <= 0xFF00) {
//         throw "marker was not found";
//       }

//       if (marker >= 0xFFD0 && marker <= 0xFFD7) { // RSTx
//         offset += 2;
//       } else {
//         break;
//       }
//     }

//     return offset - startOffset;
//   }

//   // A port of poppler's IDCT method which in turn is taken from:
//   //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,
//   //   "Practical Fast 1-D DCT Algorithms with 11 Multiplications",
//   //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,
//   //   988-991.
//   function quantizeAndInverse(component, blockBufferOffset, p) {
//     var qt = component.quantizationTable;
//     var v0, v1, v2, v3, v4, v5, v6, v7, t;
//     var i;

//     // dequant
//     for (i = 0; i < 64; i++) {
//       p[i] = component.blockData[blockBufferOffset + i] * qt[i];
//     }

//     // inverse DCT on rows
//     for (i = 0; i < 8; ++i) {
//       var row = 8 * i;

//       // check for all-zero AC coefficients
//       if (p[1 + row] === 0 && p[2 + row] === 0 && p[3 + row] === 0 &&
//         p[4 + row] === 0 && p[5 + row] === 0 && p[6 + row] === 0 &&
//         p[7 + row] === 0) {
//         t = (dctSqrt2 * p[0 + row] + 512) >> 10;
//         p[0 + row] = t;
//         p[1 + row] = t;
//         p[2 + row] = t;
//         p[3 + row] = t;
//         p[4 + row] = t;
//         p[5 + row] = t;
//         p[6 + row] = t;
//         p[7 + row] = t;
//         continue;
//       }

//       // stage 4
//       v0 = (dctSqrt2 * p[0 + row] + 128) >> 8;
//       v1 = (dctSqrt2 * p[4 + row] + 128) >> 8;
//       v2 = p[2 + row];
//       v3 = p[6 + row];
//       v4 = (dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128) >> 8;
//       v7 = (dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128) >> 8;
//       v5 = p[3 + row] << 4;
//       v6 = p[5 + row] << 4;

//       // stage 3
//       t = (v0 - v1 + 1) >> 1;
//       v0 = (v0 + v1 + 1) >> 1;
//       v1 = t;
//       t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;
//       v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;
//       v3 = t;
//       t = (v4 - v6 + 1) >> 1;
//       v4 = (v4 + v6 + 1) >> 1;
//       v6 = t;
//       t = (v7 + v5 + 1) >> 1;
//       v5 = (v7 - v5 + 1) >> 1;
//       v7 = t;

//       // stage 2
//       t = (v0 - v3 + 1) >> 1;
//       v0 = (v0 + v3 + 1) >> 1;
//       v3 = t;
//       t = (v1 - v2 + 1) >> 1;
//       v1 = (v1 + v2 + 1) >> 1;
//       v2 = t;
//       t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;
//       v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;
//       v7 = t;
//       t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;
//       v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;
//       v6 = t;

//       // stage 1
//       p[0 + row] = v0 + v7;
//       p[7 + row] = v0 - v7;
//       p[1 + row] = v1 + v6;
//       p[6 + row] = v1 - v6;
//       p[2 + row] = v2 + v5;
//       p[5 + row] = v2 - v5;
//       p[3 + row] = v3 + v4;
//       p[4 + row] = v3 - v4;
//     }

//     // inverse DCT on columns
//     for (i = 0; i < 8; ++i) {
//       var col = i;

//       // check for all-zero AC coefficients
//       if (p[1 * 8 + col] === 0 && p[2 * 8 + col] === 0 && p[3 * 8 + col] === 0 &&
//         p[4 * 8 + col] === 0 && p[5 * 8 + col] === 0 && p[6 * 8 + col] === 0 &&
//         p[7 * 8 + col] === 0) {
//         t = (dctSqrt2 * p[i + 0] + 8192) >> 14;
//         p[0 * 8 + col] = t;
//         p[1 * 8 + col] = t;
//         p[2 * 8 + col] = t;
//         p[3 * 8 + col] = t;
//         p[4 * 8 + col] = t;
//         p[5 * 8 + col] = t;
//         p[6 * 8 + col] = t;
//         p[7 * 8 + col] = t;
//         continue;
//       }

//       // stage 4
//       v0 = (dctSqrt2 * p[0 * 8 + col] + 2048) >> 12;
//       v1 = (dctSqrt2 * p[4 * 8 + col] + 2048) >> 12;
//       v2 = p[2 * 8 + col];
//       v3 = p[6 * 8 + col];
//       v4 = (dctSqrt1d2 * (p[1 * 8 + col] - p[7 * 8 + col]) + 2048) >> 12;
//       v7 = (dctSqrt1d2 * (p[1 * 8 + col] + p[7 * 8 + col]) + 2048) >> 12;
//       v5 = p[3 * 8 + col];
//       v6 = p[5 * 8 + col];

//       // stage 3
//       t = (v0 - v1 + 1) >> 1;
//       v0 = (v0 + v1 + 1) >> 1;
//       v1 = t;
//       t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;
//       v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;
//       v3 = t;
//       t = (v4 - v6 + 1) >> 1;
//       v4 = (v4 + v6 + 1) >> 1;
//       v6 = t;
//       t = (v7 + v5 + 1) >> 1;
//       v5 = (v7 - v5 + 1) >> 1;
//       v7 = t;

//       // stage 2
//       t = (v0 - v3 + 1) >> 1;
//       v0 = (v0 + v3 + 1) >> 1;
//       v3 = t;
//       t = (v1 - v2 + 1) >> 1;
//       v1 = (v1 + v2 + 1) >> 1;
//       v2 = t;
//       t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;
//       v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;
//       v7 = t;
//       t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;
//       v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;
//       v6 = t;

//       // stage 1
//       p[0 * 8 + col] = v0 + v7;
//       p[7 * 8 + col] = v0 - v7;
//       p[1 * 8 + col] = v1 + v6;
//       p[6 * 8 + col] = v1 - v6;
//       p[2 * 8 + col] = v2 + v5;
//       p[5 * 8 + col] = v2 - v5;
//       p[3 * 8 + col] = v3 + v4;
//       p[4 * 8 + col] = v3 - v4;
//     }

//     // convert to 8-bit integers
//     for (i = 0; i < 64; ++i) {
//       var index = blockBufferOffset + i;
//       var q = p[i];
//       q = (q <= -2056 / component.bitConversion) ? 0 :
//         (q >= 2024 / component.bitConversion) ? 255 / component.bitConversion :
//         (q + 2056 / component.bitConversion) >> 4;
//       component.blockData[index] = q;
//     }
//   }

//   function buildComponentData(frame, component) {
//     var lines = [];
//     var blocksPerLine = component.blocksPerLine;
//     var blocksPerColumn = component.blocksPerColumn;
//     var samplesPerLine = blocksPerLine << 3;
//     var computationBuffer = new Int32Array(64);

//     var i, j, ll = 0;
//     for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
//       for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
//         var offset = getBlockBufferOffset(component, blockRow, blockCol);
//         quantizeAndInverse(component, offset, computationBuffer);
//       }
//     }
//     return component.blockData;
//   }

//   function clampToUint8(a) {
//     return a <= 0 ? 0 : a >= 255 ? 255 : a | 0;
//   }

//   constructor.prototype = {
//     load: function load(path) {
//       var handleData = (function (data) {
//         this.parse(data);
//         if (this.onload)
//           this.onload();
//       }).bind(this);

//       if (path.indexOf("data:") > -1) {
//         var offset = path.indexOf("base64,") + 7;
//         var data = atob(path.substring(offset));
//         var arr = new Uint8Array(data.length);
//         for (var i = data.length - 1; i >= 0; i--) {
//           arr[i] = data.charCodeAt(i);
//         }
//         handleData(data);
//       } else {
//         var xhr = new XMLHttpRequest();
//         xhr.open("GET", path, true);
//         xhr.responseType = "arraybuffer";
//         xhr.onload = (function () {
//           // TODO catch parse error
//           var data = new Uint8Array(xhr.response);
//           handleData(data);
//         }).bind(this);
//         xhr.send(null);
//       }
//     },
//     parse: function parse(data) {

//       function readUint16() {
//         var value = (data[offset] << 8) | data[offset + 1];
//         offset += 2;
//         return value;
//       }

//       function readDataBlock() {
//         var length = readUint16();
//         var array = data.subarray(offset, offset + length - 2);
//         offset += array.length;
//         return array;
//       }

//       function prepareComponents(frame) {
//         var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);
//         var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);
//         for (var i = 0; i < frame.components.length; i++) {
//           component = frame.components[i];
//           var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / frame.maxH);
//           var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / frame.maxV);
//           var blocksPerLineForMcu = mcusPerLine * component.h;
//           var blocksPerColumnForMcu = mcusPerColumn * component.v;

//           var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);
//           component.blockData = new Int16Array(blocksBufferSize);
//           component.blocksPerLine = blocksPerLine;
//           component.blocksPerColumn = blocksPerColumn;
//         }
//         frame.mcusPerLine = mcusPerLine;
//         frame.mcusPerColumn = mcusPerColumn;
//       }

//       var offset = 0, length = data.length;
//       var jfif = null;
//       var adobe = null;
//       var pixels = null;
//       var frame, resetInterval;
//       var quantizationTables = [];
//       var huffmanTablesAC = [], huffmanTablesDC = [];
//       var fileMarker = readUint16();
//       if (fileMarker != 0xFFD8) { // SOI (Start of Image)
//         throw "SOI not found";
//       }

//       fileMarker = readUint16();
//       while (fileMarker != 0xFFD9) { // EOI (End of image)
//         var i, j, l;
//         switch (fileMarker) {
//           case 0xFFE0: // APP0 (Application Specific)
//           case 0xFFE1: // APP1
//           case 0xFFE2: // APP2
//           case 0xFFE3: // APP3
//           case 0xFFE4: // APP4
//           case 0xFFE5: // APP5
//           case 0xFFE6: // APP6
//           case 0xFFE7: // APP7
//           case 0xFFE8: // APP8
//           case 0xFFE9: // APP9
//           case 0xFFEA: // APP10
//           case 0xFFEB: // APP11
//           case 0xFFEC: // APP12
//           case 0xFFED: // APP13
//           case 0xFFEE: // APP14
//           case 0xFFEF: // APP15
//           case 0xFFFE: // COM (Comment)
//             var appData = readDataBlock();

//             if (fileMarker === 0xFFE0) {
//               if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49 &&
//                 appData[3] === 0x46 && appData[4] === 0) { // 'JFIF\x00'
//                 jfif = {
//                   version: {major: appData[5], minor: appData[6]},
//                   densityUnits: appData[7],
//                   xDensity: (appData[8] << 8) | appData[9],
//                   yDensity: (appData[10] << 8) | appData[11],
//                   thumbWidth: appData[12],
//                   thumbHeight: appData[13],
//                   thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])
//                 };
//               }
//             }
//             // TODO APP1 - Exif
//             if (fileMarker === 0xFFEE) {
//               if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F &&
//                 appData[3] === 0x62 && appData[4] === 0x65 && appData[5] === 0) { // 'Adobe\x00'
//                 adobe = {
//                   version: appData[6],
//                   flags0: (appData[7] << 8) | appData[8],
//                   flags1: (appData[9] << 8) | appData[10],
//                   transformCode: appData[11]
//                 };
//               }
//             }
//             break;

//           case 0xFFDB: // DQT (Define Quantization Tables)
//             var quantizationTablesLength = readUint16();
//             var quantizationTablesEnd = quantizationTablesLength + offset - 2;
//             while (offset < quantizationTablesEnd) {
//               var quantizationTableSpec = data[offset++];
//               var tableData = new Int32Array(64);
//               if ((quantizationTableSpec >> 4) === 0) { // 8 bit values
//                 for (j = 0; j < 64; j++) {
//                   var z = dctZigZag[j];
//                   tableData[z] = data[offset++];
//                 }
//               } else if ((quantizationTableSpec >> 4) === 1) { //16 bit
//                 for (j = 0; j < 64; j++) {
//                   var zz = dctZigZag[j];
//                   tableData[zz] = readUint16();
//                 }
//               } else
//                 throw "DQT: invalid table spec";
//               quantizationTables[quantizationTableSpec & 15] = tableData;
//             }
//             break;

//           case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)
//           case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)
//           case 0xFFC2: // SOF2 (Start of Frame, Progressive DCT)
//             if (frame) {
//               throw "Only single frame JPEGs supported";
//             }
//             readUint16(); // skip data length
//             frame = {};
//             frame.extended = (fileMarker === 0xFFC1);
//             frame.progressive = (fileMarker === 0xFFC2);
//             frame.precision = data[offset++];
//             frame.scanLines = readUint16();
//             frame.samplesPerLine = readUint16();
//             frame.components = [];
//             frame.componentIds = {};
//             var componentsCount = data[offset++], componentId;
//             var maxH = 0, maxV = 0;
//             for (i = 0; i < componentsCount; i++) {
//               componentId = data[offset];
//               var h = data[offset + 1] >> 4;
//               var v = data[offset + 1] & 15;
//               if (maxH < h)
//                 maxH = h;
//               if (maxV < v)
//                 maxV = v;
//               var qId = data[offset + 2];
//               l = frame.components.push({
//                 h: h,
//                 v: v,
//                 quantizationTable: quantizationTables[qId],
//                 quantizationTableId: qId,
//                 bitConversion: 255 / ((1 << frame.precision) - 1)
//               });
//               frame.componentIds[componentId] = l - 1;
//               offset += 3;
//             }
//             frame.maxH = maxH;
//             frame.maxV = maxV;
//             prepareComponents(frame);
//             break;

//           case 0xFFC4: // DHT (Define Huffman Tables)
//             var huffmanLength = readUint16();
//             for (i = 2; i < huffmanLength; ) {
//               var huffmanTableSpec = data[offset++];
//               var codeLengths = new Uint8Array(16);
//               var codeLengthSum = 0;
//               for (j = 0; j < 16; j++, offset++)
//                 codeLengthSum += (codeLengths[j] = data[offset]);
//               var huffmanValues = new Uint8Array(codeLengthSum);
//               for (j = 0; j < codeLengthSum; j++, offset++)
//                 huffmanValues[j] = data[offset];
//               i += 17 + codeLengthSum;

//               ((huffmanTableSpec >> 4) === 0 ?
//                 huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] =
//                 buildHuffmanTable(codeLengths, huffmanValues);
//             }
//             break;

//           case 0xFFDD: // DRI (Define Restart Interval)
//             readUint16(); // skip data length
//             resetInterval = readUint16();
//             break;

//           case 0xFFDA: // SOS (Start of Scan)
//             var scanLength = readUint16();
//             var selectorsCount = data[offset++];
//             var components = [], component;
//             for (i = 0; i < selectorsCount; i++) {
//               var componentIndex = frame.componentIds[data[offset++]];
//               component = frame.components[componentIndex];
//               var tableSpec = data[offset++];
//               component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
//               component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
//               components.push(component);
//             }
//             var spectralStart = data[offset++];
//             var spectralEnd = data[offset++];
//             var successiveApproximation = data[offset++];
//             var processed = decodeScan(data, offset,
//               frame, components, resetInterval,
//               spectralStart, spectralEnd,
//               successiveApproximation >> 4, successiveApproximation & 15);
//             offset += processed;
//             break;
//           default:
//             if (data[offset - 3] == 0xFF &&
//               data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {
//               // could be incorrect encoding -- last 0xFF byte of the previous
//               // block was eaten by the encoder
//               offset -= 3;
//               break;
//             }
//             throw "unknown JPEG marker " + fileMarker.toString(16);
//         }
//         fileMarker = readUint16();
//       }

//       this.width = frame.samplesPerLine;
//       this.height = frame.scanLines;
//       this.jfif = jfif;
//       this.adobe = adobe;
//       this.components = [];
//       switch (frame.components.length)
//       {
//         case 1:
//           this.colorspace = ColorSpace.Grayscale;
//           break;
//         case 3:
//           if (this.adobe)
//             this.colorspace = ColorSpace.AdobeRGB;
//           else
//             this.colorspace = ColorSpace.RGB;
//           break;
//         case 4:
//           this.colorspace = ColorSpace.CYMK;
//           break;
//         default:
//           this.colorspace = ColorSpace.Unknown;
//       }
//       for (var i = 0; i < frame.components.length; i++) {
//         var component = frame.components[i];
//         if (!component.quantizationTable && component.quantizationTableId !== null)
//           component.quantizationTable = quantizationTables[component.quantizationTableId];
//         this.components.push({
//           output: buildComponentData(frame, component),
//           scaleX: component.h / frame.maxH,
//           scaleY: component.v / frame.maxV,
//           blocksPerLine: component.blocksPerLine,
//           blocksPerColumn: component.blocksPerColumn,
//           bitConversion: component.bitConversion
//         });
//       }
//     },
//     getData16: function getData16(width, height) {
//       if (this.components.length !== 1)
//         throw 'Unsupported color mode';
//       var scaleX = this.width / width, scaleY = this.height / height;

//       var component, componentScaleX, componentScaleY;
//       var x, y, i;
//       var offset = 0;
//       var numComponents = this.components.length;
//       var dataLength = width * height * numComponents;
//       var data = new Uint16Array(dataLength);
//       var componentLine;

//       // lineData is reused for all components. Assume first component is
//       // the biggest
//       var lineData = new Uint16Array((this.components[0].blocksPerLine << 3) *
//       this.components[0].blocksPerColumn * 8);

//       // First construct image data ...
//       for (i = 0; i < numComponents; i++) {
//         component = this.components[i];
//         var blocksPerLine = component.blocksPerLine;
//         var blocksPerColumn = component.blocksPerColumn;
//         var samplesPerLine = blocksPerLine << 3;

//         var j, k, ll = 0;
//         var lineOffset = 0;
//         for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
//           var scanLine = blockRow << 3;
//           for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
//             var bufferOffset = getBlockBufferOffset(component, blockRow, blockCol);
//             var offset = 0, sample = blockCol << 3;
//             for (j = 0; j < 8; j++) {
//               var lineOffset = (scanLine + j) * samplesPerLine;
//               for (k = 0; k < 8; k++) {
//                 lineData[lineOffset + sample + k] =
//                   component.output[bufferOffset + offset++];
//               }
//             }
//           }
//         }

//         componentScaleX = component.scaleX * scaleX;
//         componentScaleY = component.scaleY * scaleY;
//         offset = i;

//         var cx, cy;
//         var index;
//         for (y = 0; y < height; y++) {
//           for (x = 0; x < width; x++) {
//             cy = 0 | (y * componentScaleY);
//             cx = 0 | (x * componentScaleX);
//             index = cy * samplesPerLine + cx;
//             data[offset] = lineData[index];
//             offset += numComponents;
//           }
//         }
//       }
//       return data;
//     },
//     getData: function getData(width, height) {
//       var scaleX = this.width / width, scaleY = this.height / height;

//       var component, componentScaleX, componentScaleY;
//       var x, y, i;
//       var offset = 0;
//       var Y, Cb, Cr, K, C, M, Ye, R, G, B;
//       var colorTransform;
//       var numComponents = this.components.length;
//       var dataLength = width * height * numComponents;
//       var data = new Uint8Array(dataLength);
//       var componentLine;

//       // lineData is reused for all components. Assume first component is
//       // the biggest
//       var lineData = new Uint8Array((this.components[0].blocksPerLine << 3) *
//       this.components[0].blocksPerColumn * 8);

//       // First construct image data ...
//       for (i = 0; i < numComponents; i++) {
//         component = this.components[i];
//         var blocksPerLine = component.blocksPerLine;
//         var blocksPerColumn = component.blocksPerColumn;
//         var samplesPerLine = blocksPerLine << 3;

//         var j, k, ll = 0;
//         var lineOffset = 0;
//         for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
//           var scanLine = blockRow << 3;
//           for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
//             var bufferOffset = getBlockBufferOffset(component, blockRow, blockCol);
//             var offset = 0, sample = blockCol << 3;
//             for (j = 0; j < 8; j++) {
//               var lineOffset = (scanLine + j) * samplesPerLine;
//               for (k = 0; k < 8; k++) {
//                 lineData[lineOffset + sample + k] =
//                   component.output[bufferOffset + offset++] * component.bitConversion;
//               }
//             }
//           }
//         }

//         componentScaleX = component.scaleX * scaleX;
//         componentScaleY = component.scaleY * scaleY;
//         offset = i;

//         var cx, cy;
//         var index;
//         for (y = 0; y < height; y++) {
//           for (x = 0; x < width; x++) {
//             cy = 0 | (y * componentScaleY);
//             cx = 0 | (x * componentScaleX);
//             index = cy * samplesPerLine + cx;
//             data[offset] = lineData[index];
//             offset += numComponents;
//           }
//         }
//       }

//       // ... then transform colors, if necessary
//       switch (numComponents) {
//         case 1:
//         case 2:
//           break;
//         // no color conversion for one or two compoenents

//         case 3:
//           // The default transform for three components is true
//           colorTransform = true;
//           // The adobe transform marker overrides any previous setting
//           if (this.adobe && this.adobe.transformCode)
//             colorTransform = true;
//           else if (typeof this.colorTransform !== 'undefined')
//             colorTransform = !!this.colorTransform;

//           if (colorTransform) {
//             for (i = 0; i < dataLength; i += numComponents) {
//               Y = data[i    ];
//               Cb = data[i + 1];
//               Cr = data[i + 2];

//               R = clampToUint8(Y - 179.456 + 1.402 * Cr);
//               G = clampToUint8(Y + 135.459 - 0.344 * Cb - 0.714 * Cr);
//               B = clampToUint8(Y - 226.816 + 1.772 * Cb);

//               data[i    ] = R;
//               data[i + 1] = G;
//               data[i + 2] = B;
//             }
//           }
//           break;
//         case 4:
//           if (!this.adobe)
//             throw 'Unsupported color mode (4 components)';
//           // The default transform for four components is false
//           colorTransform = false;
//           // The adobe transform marker overrides any previous setting
//           if (this.adobe && this.adobe.transformCode)
//             colorTransform = true;
//           else if (typeof this.colorTransform !== 'undefined')
//             colorTransform = !!this.colorTransform;

//           if (colorTransform) {
//             for (i = 0; i < dataLength; i += numComponents) {
//               Y = data[i];
//               Cb = data[i + 1];
//               Cr = data[i + 2];

//               C = clampToUint8(434.456 - Y - 1.402 * Cr);
//               M = clampToUint8(119.541 - Y + 0.344 * Cb + 0.714 * Cr);
//               Y = clampToUint8(481.816 - Y - 1.772 * Cb);

//               data[i    ] = C;
//               data[i + 1] = M;
//               data[i + 2] = Y;
//               // K is unchanged
//             }
//           }
//           break;
//         default:
//           throw 'Unsupported color mode';
//       }
//       return data;
//     }
//   };

//   return constructor;
// })();
// (function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.jpeg = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
//   /*
//    * Copyright (C) 2015 Michael Martinez
//    * Changes: Added support for selection values 2-7, fixed minor bugs &
//    * warnings, split into multiple class files, and general clean up.
//    *
//    * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
//    */

//   /*
//    * Copyright (C) Helmut Dersch
//    *
//    * Permission is hereby granted, free of charge, to any person obtaining a copy
//    * of this software and associated documentation files (the "Software"), to deal
//    * in the Software without restriction, including without limitation the rights
//    * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//    * copies of the Software, and to permit persons to whom the Software is
//    * furnished to do so, subject to the following conditions:

//    * The above copyright notice and this permission notice shall be included in
//    * all copies or substantial portions of the Software.

//    * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//    * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//    * THE SOFTWARE.
//    */

//   /*jslint browser: true, node: true */
//   /*global require, module */

//   "use strict";

//   /*** Imports ***/
//   var jpeg = jpeg || {};
//   jpeg.lossless = jpeg.lossless || {};


//   /*** Constructor ***/
//   jpeg.lossless.ComponentSpec = jpeg.lossless.ComponentSpec || function () {
//     this.hSamp = 0; // Horizontal sampling factor
//     this.quantTableSel = 0; // Quantization table destination selector
//     this.vSamp = 0; // Vertical
//   };


//   /*** Exports ***/

//   var moduleType = typeof module;
//   if ((moduleType !== 'undefined') && module.exports) {
//     module.exports = jpeg.lossless.ComponentSpec;
//   }

// },{}],2:[function(require,module,exports){
//   /*
//    * Copyright (C) 2015 Michael Martinez
//    * Changes: Added support for selection values 2-7, fixed minor bugs &
//    * warnings, split into multiple class files, and general clean up.
//    *
//    * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
//    */

//   /*
//    * Copyright (C) Helmut Dersch
//    *
//    * Permission is hereby granted, free of charge, to any person obtaining a copy
//    * of this software and associated documentation files (the "Software"), to deal
//    * in the Software without restriction, including without limitation the rights
//    * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//    * copies of the Software, and to permit persons to whom the Software is
//    * furnished to do so, subject to the following conditions:

//    * The above copyright notice and this permission notice shall be included in
//    * all copies or substantial portions of the Software.

//    * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//    * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//    * THE SOFTWARE.
//    */

//   /*jslint browser: true, node: true */
//   /*global require, module */

//   "use strict";

//   /*** Imports ***/
//   var jpeg = jpeg || {};
//   jpeg.lossless = jpeg.lossless || {};


//   /*** Constructor ***/
//   jpeg.lossless.DataStream = jpeg.lossless.DataStream || function (data, offset, length) {
//     this.buffer = new DataView(data, offset, length);
//     this.index = 0;
//   };



//   jpeg.lossless.DataStream.prototype.get16 = function () {
//     var value = this.buffer.getUint16(this.index, false);
//     this.index += 2;
//     return value;
//   };



//   jpeg.lossless.DataStream.prototype.get8 = function () {
//     var value = this.buffer.getUint8(this.index);
//     this.index += 1;
//     return value;
//   };


//   /*** Exports ***/

//   var moduleType = typeof module;
//   if ((moduleType !== 'undefined') && module.exports) {
//     module.exports = jpeg.lossless.DataStream;
//   }

// },{}],3:[function(require,module,exports){
//   /*
//    * Copyright (C) 2015 Michael Martinez
//    * Changes: Added support for selection values 2-7, fixed minor bugs &
//    * warnings, split into multiple class files, and general clean up.
//    *
//    * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
//    */

//   /*
//    * Copyright (C) Helmut Dersch
//    *
//    * Permission is hereby granted, free of charge, to any person obtaining a copy
//    * of this software and associated documentation files (the "Software"), to deal
//    * in the Software without restriction, including without limitation the rights
//    * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//    * copies of the Software, and to permit persons to whom the Software is
//    * furnished to do so, subject to the following conditions:

//    * The above copyright notice and this permission notice shall be included in
//    * all copies or substantial portions of the Software.

//    * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//    * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//    * THE SOFTWARE.
//    */

//   /*jslint browser: true, node: true */
//   /*global require, module */

//   "use strict";

//   /*** Imports ***/
//   var jpeg = jpeg || {};
//   jpeg.lossless = jpeg.lossless || {};
//   jpeg.lossless.DataStream = jpeg.lossless.DataStream || ((typeof require !== 'undefined') ? require('./data-stream.js') : null);
//   jpeg.lossless.HuffmanTable = jpeg.lossless.HuffmanTable || ((typeof require !== 'undefined') ? require('./huffman-table.js') : null);
//   jpeg.lossless.QuantizationTable = jpeg.lossless.QuantizationTable || ((typeof require !== 'undefined') ? require('./quantization-table.js') : null);
//   jpeg.lossless.ScanHeader = jpeg.lossless.ScanHeader || ((typeof require !== 'undefined') ? require('./scan-header.js') : null);
//   jpeg.lossless.FrameHeader = jpeg.lossless.FrameHeader || ((typeof require !== 'undefined') ? require('./frame-header.js') : null);
//   jpeg.lossless.Utils = jpeg.lossless.Utils || ((typeof require !== 'undefined') ? require('./utils.js') : null);


//   /*** Constructor ***/
//   jpeg.lossless.Decoder = jpeg.lossless.Decoder || function (buffer, numBytes) {
//     this.buffer = buffer;
//     this.frame = new jpeg.lossless.FrameHeader();
//     this.huffTable = new jpeg.lossless.HuffmanTable();
//     this.quantTable = new jpeg.lossless.QuantizationTable();
//     this.scan = new jpeg.lossless.ScanHeader();
//     this.DU = jpeg.lossless.Utils.createArray(10, 4, 64); // at most 10 data units in a MCU, at most 4 data units in one component
//     this.HuffTab = jpeg.lossless.Utils.createArray(4, 2, 50 * 256);
//     this.IDCT_Source = [];
//     this.nBlock = []; // number of blocks in the i-th Comp in a scan
//     this.acTab = jpeg.lossless.Utils.createArray(10, 1); // ac HuffTab for the i-th Comp in a scan
//     this.dcTab = jpeg.lossless.Utils.createArray(10, 1); // dc HuffTab for the i-th Comp in a scan
//     this.qTab = jpeg.lossless.Utils.createArray(10, 1); // quantization table for the i-th Comp in a scan
//     this.marker = 0;
//     this.markerIndex = 0;
//     this.numComp = 0;
//     this.restartInterval = 0;
//     this.selection = 0;
//     this.xDim = 0;
//     this.yDim = 0;
//     this.xLoc = 0;
//     this.yLoc = 0;
//     this.numBytes = 0;
//     this.outputData = null;
//     this.restarting = false;
//     this.mask = 0;

//     if (typeof numBytes !== "undefined") {
//       this.numBytes = numBytes;
//     }
//   };


//   /*** Static Pseudo-constants ***/

//   jpeg.lossless.Decoder.IDCT_P = [0, 5, 40, 16, 45, 2, 7, 42, 21, 56, 8, 61, 18, 47, 1, 4, 41, 23, 58, 13, 32, 24, 37, 10, 63, 17, 44, 3, 6, 43, 20,
//     57, 15, 34, 29, 48, 53, 26, 39, 9, 60, 19, 46, 22, 59, 12, 33, 31, 50, 55, 25, 36, 11, 62, 14, 35, 28, 49, 52, 27, 38, 30, 51, 54];
//   jpeg.lossless.Decoder.TABLE = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53,
//     10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63];
//   jpeg.lossless.Decoder.MAX_HUFFMAN_SUBTREE = 50;
//   jpeg.lossless.Decoder.MSB = 0x80000000;
//   jpeg.lossless.Decoder.RESTART_MARKER_BEGIN = 0xFFD0;
//   jpeg.lossless.Decoder.RESTART_MARKER_END = 0xFFD7;

//   /*** Prototype Methods ***/

//   jpeg.lossless.Decoder.prototype.decompress = function (buffer, offset, length) {
//     return this.decode(buffer, offset, length).buffer;
//   };



//   jpeg.lossless.Decoder.prototype.decode = function (buffer, offset, length, numBytes) {
//     /*jslint bitwise: true */

//     var current, scanNum = 0, pred = [], i, compN, temp = [], index = [], mcuNum;

//     if (typeof buffer !== "undefined") {
//       this.buffer = buffer;
//     }

//     if (typeof numBytes !== "undefined") {
//       this.numBytes = numBytes;
//     }

//     this.stream = new jpeg.lossless.DataStream(this.buffer, offset, length);
//     this.buffer = null;

//     this.xLoc = 0;
//     this.yLoc = 0;
//     current = this.stream.get16();

//     if (current !== 0xFFD8) { // SOI
//       throw new Error("Not a JPEG file");
//     }

//     current = this.stream.get16();

//     while ((((current >> 4) !== 0x0FFC) || (current === 0xFFC4))) { // SOF 0~15
//       switch (current) {
//         case 0xFFC4: // DHT
//           this.huffTable.read(this.stream, this.HuffTab);
//           break;
//         case 0xFFCC: // DAC
//           throw new Error("Program doesn't support arithmetic coding. (format throw new IOException)");
//         case 0xFFDB:
//           this.quantTable.read(this.stream, jpeg.lossless.Decoder.TABLE);
//           break;
//         case 0xFFDD:
//           this.restartInterval = this.readNumber();
//           break;
//         case 0xFFE0:
//         case 0xFFE1:
//         case 0xFFE2:
//         case 0xFFE3:
//         case 0xFFE4:
//         case 0xFFE5:
//         case 0xFFE6:
//         case 0xFFE7:
//         case 0xFFE8:
//         case 0xFFE9:
//         case 0xFFEA:
//         case 0xFFEB:
//         case 0xFFEC:
//         case 0xFFED:
//         case 0xFFEE:
//         case 0xFFEF:
//           this.readApp();
//           break;
//         case 0xFFFE:
//           this.readComment();
//           break;
//         default:
//           if ((current >> 8) !== 0xFF) {
//             throw new Error("ERROR: format throw new IOException! (decode)");
//           }
//       }

//       current = this.stream.get16();
//     }

//     if ((current < 0xFFC0) || (current > 0xFFC7)) {
//       throw new Error("ERROR: could not handle arithmetic code!");
//     }

//     this.frame.read(this.stream);
//     current = this.stream.get16();

//     do {
//       while (current !== 0x0FFDA) { // SOS
//         switch (current) {
//           case 0xFFC4: // DHT
//             this.huffTable.read(this.stream, this.HuffTab);
//             break;
//           case 0xFFCC: // DAC
//             throw new Error("Program doesn't support arithmetic coding. (format throw new IOException)");
//           case 0xFFDB:
//             this.quantTable.read(this.stream, jpeg.lossless.Decoder.TABLE);
//             break;
//           case 0xFFDD:
//             this.restartInterval = this.readNumber();
//             break;
//           case 0xFFE0:
//           case 0xFFE1:
//           case 0xFFE2:
//           case 0xFFE3:
//           case 0xFFE4:
//           case 0xFFE5:
//           case 0xFFE6:
//           case 0xFFE7:
//           case 0xFFE8:
//           case 0xFFE9:
//           case 0xFFEA:
//           case 0xFFEB:
//           case 0xFFEC:
//           case 0xFFED:
//           case 0xFFEE:
//           case 0xFFEF:
//             this.readApp();
//             break;
//           case 0xFFFE:
//             this.readComment();
//             break;
//           default:
//             if ((current >> 8) !== 0xFF) {
//               throw new Error("ERROR: format throw new IOException! (Parser.decode)");
//             }
//         }

//         current = this.stream.get16();
//       }

//       this.precision = this.frame.precision;
//       this.components = this.frame.components;

//       if (!this.numBytes) {
//         this.numBytes = parseInt(Math.ceil(this.precision / 8));
//       }

//       if (this.numBytes == 1) {
//         this.mask = 0xFF;
//       } else {
//         this.mask = 0xFFFF;
//       }

//       this.scan.read(this.stream);
//       this.numComp = this.scan.numComp;
//       this.selection = this.scan.selection;

//       if (this.numBytes === 1) {
//         if (this.numComp === 3) {
//           this.getter = this.getValueRGB;
//           this.setter = this.setValueRGB;
//           this.output = this.outputRGB;
//         } else {
//           this.getter = this.getValue8;
//           this.setter = this.setValue8;
//           this.output = this.outputSingle;
//         }
//       } else {
//         this.getter = this.getValue16;
//         this.setter = this.setValue16;
//         this.output = this.outputSingle;
//       }

//       switch (this.selection) {
//         case 2:
//           this.selector = this.select2;
//           break;
//         case 3:
//           this.selector = this.select3;
//           break;
//         case 4:
//           this.selector = this.select4;
//           break;
//         case 5:
//           this.selector = this.select5;
//           break;
//         case 6:
//           this.selector = this.select6;
//           break;
//         case 7:
//           this.selector = this.select7;
//           break;
//         default:
//           this.selector = this.select1;
//           break;
//       }

//       this.scanComps = this.scan.components;
//       this.quantTables = this.quantTable.quantTables;

//       for (i = 0; i < this.numComp; i+=1) {
//         compN = this.scanComps[i].scanCompSel;
//         this.qTab[i] = this.quantTables[this.components[compN].quantTableSel];
//         this.nBlock[i] = this.components[compN].vSamp * this.components[compN].hSamp;
//         this.dcTab[i] = this.HuffTab[this.scanComps[i].dcTabSel][0];
//         this.acTab[i] = this.HuffTab[this.scanComps[i].acTabSel][1];
//       }

//       this.xDim = this.frame.dimX;
//       this.yDim = this.frame.dimY;
//       this.outputData = new DataView(new ArrayBuffer(this.xDim * this.yDim * this.numBytes * this.numComp));

//       scanNum+=1;

//       while (true) { // Decode one scan
//         temp[0] = 0;
//         index[0] = 0;

//         for (i = 0; i < 10; i+=1) {
//           pred[i] = (1 << (this.precision - 1));
//         }

//         if (this.restartInterval === 0) {
//           current = this.decodeUnit(pred, temp, index);

//           while ((current === 0) && ((this.xLoc < this.xDim) && (this.yLoc < this.yDim))) {
//             this.output(pred);
//             current = this.decodeUnit(pred, temp, index);
//           }

//           break; //current=MARKER
//         }

//         for (mcuNum = 0; mcuNum < this.restartInterval; mcuNum+=1) {
//           this.restarting = (mcuNum == 0);
//           current = this.decodeUnit(pred, temp, index);
//           this.output(pred);

//           if (current !== 0) {
//             break;
//           }
//         }

//         if (current === 0) {
//           if (this.markerIndex !== 0) {
//             current = (0xFF00 | this.marker);
//             this.markerIndex = 0;
//           } else {
//             current = this.stream.get16();
//           }
//         }

//         if (!((current >= jpeg.lossless.Decoder.RESTART_MARKER_BEGIN) &&
//           (current <= jpeg.lossless.Decoder.RESTART_MARKER_END))) {
//           break; //current=MARKER
//         }
//       }

//       if ((current === 0xFFDC) && (scanNum === 1)) { //DNL
//         this.readNumber();
//         current = this.stream.get16();
//       }
//     } while ((current !== 0xFFD9) && ((this.xLoc < this.xDim) && (this.yLoc < this.yDim)) && (scanNum === 0));

//     return this.outputData;
//   };



//   jpeg.lossless.Decoder.prototype.decodeUnit = function (prev, temp, index) {
//     if (this.numComp == 1) {
//       return this.decodeSingle(prev, temp, index);
//     } else if (this.numComp == 3) {
//       return this.decodeRGB(prev, temp, index);
//     } else {
//       return -1;
//     }
//   };



//   jpeg.lossless.Decoder.prototype.select1 = function (compOffset) {
//     return this.getPreviousX(compOffset);
//   };



//   jpeg.lossless.Decoder.prototype.select2 = function (compOffset) {
//     return this.getPreviousY(compOffset);
//   };



//   jpeg.lossless.Decoder.prototype.select3 = function (compOffset) {
//     return this.getPreviousXY(compOffset);
//   };



//   jpeg.lossless.Decoder.prototype.select4 = function (compOffset) {
//     return (this.getPreviousX(compOffset) + this.getPreviousY(compOffset)) - this.getPreviousXY(compOffset);
//   };



//   jpeg.lossless.Decoder.prototype.select5 = function (compOffset) {
//     return this.getPreviousX(compOffset) + ((this.getPreviousY(compOffset) - this.getPreviousXY(compOffset)) >> 1);
//   };



//   jpeg.lossless.Decoder.prototype.select6 = function (compOffset) {
//     return this.getPreviousY(compOffset) + ((this.getPreviousX(compOffset) - this.getPreviousXY(compOffset)) >> 1);
//   };



//   jpeg.lossless.Decoder.prototype.select7 = function (compOffset) {
//     return ((this.getPreviousX(compOffset) + this.getPreviousY(compOffset)) / 2);
//   };



//   jpeg.lossless.Decoder.prototype.decodeRGB = function (prev, temp, index) {
//     /*jslint bitwise: true */

//     var value, actab, dctab, qtab, ctrC, i, k, j;

//     prev[0] = this.selector(0);
//     prev[1] = this.selector(1);
//     prev[2] = this.selector(2);

//     for (ctrC = 0; ctrC < this.numComp; ctrC+=1) {
//       qtab = this.qTab[ctrC];
//       actab = this.acTab[ctrC];
//       dctab = this.dcTab[ctrC];
//       for (i = 0; i < this.nBlock[ctrC]; i+=1) {
//         for (k = 0; k < this.IDCT_Source.length; k+=1) {
//           this.IDCT_Source[k] = 0;
//         }

//         value = this.getHuffmanValue(dctab, temp, index);

//         if (value >= 0xFF00) {
//           return value;
//         }

//         prev[ctrC] = this.IDCT_Source[0] = prev[ctrC] + this.getn(index, value, temp, index);
//         this.IDCT_Source[0] *= qtab[0];

//         for (j = 1; j < 64; j+=1) {
//           value = this.getHuffmanValue(actab, temp, index);

//           if (value >= 0xFF00) {
//             return value;
//           }

//           j += (value >> 4);

//           if ((value & 0x0F) === 0) {
//             if ((value >> 4) === 0) {
//               break;
//             }
//           } else {
//             this.IDCT_Source[jpeg.lossless.Decoder.IDCT_P[j]] = this.getn(index, value & 0x0F, temp, index) * qtab[j];
//           }
//         }
//       }
//     }

//     return 0;
//   };



//   jpeg.lossless.Decoder.prototype.decodeSingle = function (prev, temp, index) {
//     /*jslint bitwise: true */

//     var value, i, n, nRestart;

//     if (this.restarting) {
//       this.restarting = false;
//       prev[0] = (1 << (this.frame.precision - 1));
//     } else {
//       prev[0] = this.selector();
//     }

//     for (i = 0; i < this.nBlock[0]; i+=1) {
//       value = this.getHuffmanValue(this.dcTab[0], temp, index);
//       if (value >= 0xFF00) {
//         return value;
//       }

//       n = this.getn(prev, value, temp, index);
//       nRestart = (n >> 8);

//       if ((nRestart >= jpeg.lossless.Decoder.RESTART_MARKER_BEGIN) && (nRestart <= jpeg.lossless.Decoder.RESTART_MARKER_END)) {
//         return nRestart;
//       }

//       prev[0] += n;
//     }

//     return 0;
//   };



// //	Huffman table for fast search: (HuffTab) 8-bit Look up table 2-layer search architecture, 1st-layer represent 256 node (8 bits) if codeword-length > 8
// //	bits, then the entry of 1st-layer = (# of 2nd-layer table) | MSB and it is stored in the 2nd-layer Size of tables in each layer are 256.
// //	HuffTab[*][*][0-256] is always the only 1st-layer table.
// //
// //	An entry can be: (1) (# of 2nd-layer table) | MSB , for code length > 8 in 1st-layer (2) (Code length) << 8 | HuffVal
// //
// //	HuffmanValue(table   HuffTab[x][y] (ex) HuffmanValue(HuffTab[1][0],...)
// //	                ):
// //	    return: Huffman Value of table
// //	            0xFF?? if it receives a MARKER
// //	    Parameter:  table   HuffTab[x][y] (ex) HuffmanValue(HuffTab[1][0],...)
// //	                temp    temp storage for remainded bits
// //	                index   index to bit of temp
// //	                in      FILE pointer
// //	    Effect:
// //	        temp  store new remainded bits
// //	        index change to new index
// //	        in    change to new position
// //	    NOTE:
// //	      Initial by   temp=0; index=0;
// //	    NOTE: (explain temp and index)
// //	      temp: is always in the form at calling time or returning time
// //	       |  byte 4  |  byte 3  |  byte 2  |  byte 1  |
// //	       |     0    |     0    | 00000000 | 00000??? |  if not a MARKER
// //	                                               ^index=3 (from 0 to 15)
// //	                                               321
// //	    NOTE (marker and marker_index):
// //	      If get a MARKER from 'in', marker=the low-byte of the MARKER
// //	        and marker_index=9
// //	      If marker_index=9 then index is always > 8, or HuffmanValue()
// //	        will not be called
//   jpeg.lossless.Decoder.prototype.getHuffmanValue = function (table, temp, index) {
//     /*jslint bitwise: true */

//     var code, input, mask;
//     mask = 0xFFFF;

//     if (index[0] < 8) {
//       temp[0] <<= 8;
//       input = this.stream.get8();
//       if (input === 0xFF) {
//         this.marker = this.stream.get8();
//         if (this.marker !== 0) {
//           this.markerIndex = 9;
//         }
//       }
//       temp[0] |= input;
//     } else {
//       index[0] -= 8;
//     }

//     code = table[temp[0] >> index[0]];

//     if ((code & jpeg.lossless.Decoder.MSB) !== 0) {
//       if (this.markerIndex !== 0) {
//         this.markerIndex = 0;
//         return 0xFF00 | this.marker;
//       }

//       temp[0] &= (mask >> (16 - index[0]));
//       temp[0] <<= 8;
//       input = this.stream.get8();

//       if (input === 0xFF) {
//         this.marker = this.stream.get8();
//         if (this.marker !== 0) {
//           this.markerIndex = 9;
//         }
//       }

//       temp[0] |= input;
//       code = table[((code & 0xFF) * 256) + (temp[0] >> index[0])];
//       index[0] += 8;
//     }

//     index[0] += 8 - (code >> 8);

//     if (index[0] < 0) {
//       throw new Error("index=" + index[0] + " temp=" + temp[0] + " code=" + code + " in HuffmanValue()");
//     }

//     if (index[0] < this.markerIndex) {
//       this.markerIndex = 0;
//       return 0xFF00 | this.marker;
//     }

//     temp[0] &= (mask >> (16 - index[0]));
//     return code & 0xFF;
//   };



//   jpeg.lossless.Decoder.prototype.getn = function (PRED, n, temp, index) {
//     /*jslint bitwise: true */

//     var result, one, n_one, mask, input;
//     one = 1;
//     n_one = -1;
//     mask = 0xFFFF;

//     if (n === 0) {
//       return 0;
//     }

//     if (n === 16) {
//       if (PRED[0] >= 0) {
//         return -32768;
//       } else {
//         return 32768;
//       }
//     }

//     index[0] -= n;

//     if (index[0] >= 0) {
//       if ((index[0] < this.markerIndex) && !this.isLastPixel()) { // this was corrupting the last pixel in some cases
//         this.markerIndex = 0;
//         return (0xFF00 | this.marker) << 8;
//       }

//       result = temp[0] >> index[0];
//       temp[0] &= (mask >> (16 - index[0]));
//     } else {
//       temp[0] <<= 8;
//       input = this.stream.get8();

//       if (input === 0xFF) {
//         this.marker = this.stream.get8();
//         if (this.marker !== 0) {
//           this.markerIndex = 9;
//         }
//       }

//       temp[0] |= input;
//       index[0] += 8;

//       if (index[0] < 0) {
//         if (this.markerIndex !== 0) {
//           this.markerIndex = 0;
//           return (0xFF00 | this.marker) << 8;
//         }

//         temp[0] <<= 8;
//         input = this.stream.get8();

//         if (input === 0xFF) {
//           this.marker = this.stream.get8();
//           if (this.marker !== 0) {
//             this.markerIndex = 9;
//           }
//         }

//         temp[0] |= input;
//         index[0] += 8;
//       }

//       if (index[0] < 0) {
//         throw new Error("index=" + index[0] + " in getn()");
//       }

//       if (index[0] < this.markerIndex) {
//         this.markerIndex = 0;
//         return (0xFF00 | this.marker) << 8;
//       }

//       result = temp[0] >> index[0];
//       temp[0] &= (mask >> (16 - index[0]));
//     }

//     if (result < (one << (n - 1))) {
//       result += (n_one << n) + 1;
//     }

//     return result;
//   };



//   jpeg.lossless.Decoder.prototype.getPreviousX = function (compOffset) {
//     /*jslint bitwise: true */

//     if (this.xLoc > 0) {
//       return this.getter((((this.yLoc * this.xDim) + this.xLoc) - 1), compOffset);
//     } else if (this.yLoc > 0) {
//       return this.getPreviousY(compOffset);
//     } else {
//       return (1 << (this.frame.precision - 1));
//     }
//   };



//   jpeg.lossless.Decoder.prototype.getPreviousXY = function (compOffset) {
//     /*jslint bitwise: true */

//     if ((this.xLoc > 0) && (this.yLoc > 0)) {
//       return this.getter(((((this.yLoc - 1) * this.xDim) + this.xLoc) - 1), compOffset);
//     } else {
//       return this.getPreviousY(compOffset);
//     }
//   };



//   jpeg.lossless.Decoder.prototype.getPreviousY = function (compOffset) {
//     /*jslint bitwise: true */

//     if (this.yLoc > 0) {
//       return this.getter((((this.yLoc - 1) * this.xDim) + this.xLoc), compOffset);
//     } else {
//       return this.getPreviousX(compOffset);
//     }
//   };



//   jpeg.lossless.Decoder.prototype.isLastPixel = function () {
//     return (this.xLoc === (this.xDim - 1)) && (this.yLoc === (this.yDim - 1));
//   };



//   jpeg.lossless.Decoder.prototype.outputSingle = function (PRED) {
//     if ((this.xLoc < this.xDim) && (this.yLoc < this.yDim)) {
//       this.setter((((this.yLoc * this.xDim) + this.xLoc)), this.mask & PRED[0]);

//       this.xLoc+=1;

//       if (this.xLoc >= this.xDim) {
//         this.yLoc+=1;
//         this.xLoc = 0;
//       }
//     }
//   };



//   jpeg.lossless.Decoder.prototype.outputRGB = function (PRED) {
//     var offset = ((this.yLoc * this.xDim) + this.xLoc);

//     if ((this.xLoc < this.xDim) && (this.yLoc < this.yDim)) {
//       this.setter(offset, PRED[0], 0);
//       this.setter(offset, PRED[1], 1);
//       this.setter(offset, PRED[2], 2);

//       this.xLoc+=1;

//       if (this.xLoc >= this.xDim) {
//         this.yLoc+=1;
//         this.xLoc = 0;
//       }
//     }
//   };



//   jpeg.lossless.Decoder.prototype.setValue16 = function (index, val) {
//     this.outputData.setInt16(index * 2, val, true);
//   };



//   jpeg.lossless.Decoder.prototype.getValue16 = function (index) {
//     return this.outputData.getInt16(index * 2, true) & this.mask;
//   };



//   jpeg.lossless.Decoder.prototype.setValue8 = function (index, val) {
//     this.outputData.setInt8(index, val);
//   };



//   jpeg.lossless.Decoder.prototype.getValue8 = function (index) {
//     return this.outputData.getInt8(index) & this.mask;
//   };



//   jpeg.lossless.Decoder.prototype.setValueRGB = function (index, val, compOffset) {
//     this.outputData.setUint8(index * 3 + compOffset, val);
//   };



//   jpeg.lossless.Decoder.prototype.getValueRGB = function (index, compOffset) {
//     return this.outputData.getUint8(index * 3 + compOffset);
//   };



//   jpeg.lossless.Decoder.prototype.readApp = function() {
//     var count = 0, length = this.stream.get16();
//     count += 2;

//     while (count < length) {
//       this.stream.get8();
//       count+=1;
//     }

//     return length;
//   };



//   jpeg.lossless.Decoder.prototype.readComment = function () {
//     var sb = "", count = 0, length;

//     length = this.stream.get16();
//     count += 2;

//     while (count < length) {
//       sb += this.stream.get8();
//       count+=1;
//     }

//     return sb;
//   };



//   jpeg.lossless.Decoder.prototype.readNumber = function() {
//     var Ld = this.stream.get16();

//     if (Ld !== 4) {
//       throw new Error("ERROR: Define number format throw new IOException [Ld!=4]");
//     }

//     return this.stream.get16();
//   };



//   /*** Exports ***/

//   var moduleType = typeof module;
//   if ((moduleType !== 'undefined') && module.exports) {
//     module.exports = jpeg.lossless.Decoder;
//   }

// },{"./data-stream.js":2,"./frame-header.js":4,"./huffman-table.js":5,"./quantization-table.js":7,"./scan-header.js":9,"./utils.js":10}],4:[function(require,module,exports){
//   /*
//    * Copyright (C) 2015 Michael Martinez
//    * Changes: Added support for selection values 2-7, fixed minor bugs &
//    * warnings, split into multiple class files, and general clean up.
//    *
//    * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
//    */

//   /*
//    * Copyright (C) Helmut Dersch
//    *
//    * Permission is hereby granted, free of charge, to any person obtaining a copy
//    * of this software and associated documentation files (the "Software"), to deal
//    * in the Software without restriction, including without limitation the rights
//    * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//    * copies of the Software, and to permit persons to whom the Software is
//    * furnished to do so, subject to the following conditions:

//    * The above copyright notice and this permission notice shall be included in
//    * all copies or substantial portions of the Software.

//    * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//    * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//    * THE SOFTWARE.
//    */

//   /*jslint browser: true, node: true */
//   /*global require, module */

//   "use strict";

//   /*** Imports ***/
//   var jpeg = jpeg || {};
//   jpeg.lossless = jpeg.lossless || {};
//   jpeg.lossless.ComponentSpec = jpeg.lossless.ComponentSpec || ((typeof require !== 'undefined') ? require('./component-spec.js') : null);
//   jpeg.lossless.DataStream = jpeg.lossless.DataStream || ((typeof require !== 'undefined') ? require('./data-stream.js') : null);


//   /*** Constructor ***/
//   jpeg.lossless.FrameHeader = jpeg.lossless.FrameHeader || function () {
//     this.components = []; // Components
//     this.dimX = 0; // Number of samples per line
//     this.dimY = 0; // Number of lines
//     this.numComp = 0; // Number of component in the frame
//     this.precision = 0; // Sample Precision (from the original image)
//   };



//   /*** Prototype Methods ***/

//   jpeg.lossless.FrameHeader.prototype.read = function (data) {
//     /*jslint bitwise: true */

//     var count = 0, length, i, c, temp;

//     length = data.get16();
//     count += 2;

//     this.precision = data.get8();
//     count+=1;

//     this.dimY = data.get16();
//     count += 2;

//     this.dimX = data.get16();
//     count += 2;

//     this.numComp = data.get8();
//     count+=1;
//     for (i = 1; i <= this.numComp; i+=1) {
//       if (count > length) {
//         throw new Error("ERROR: frame format error");
//       }

//       c = data.get8();
//       count+=1;

//       if (count >= length) {
//         throw new Error("ERROR: frame format error [c>=Lf]");
//       }

//       temp = data.get8();
//       count+=1;

//       if (!this.components[c]) {
//         this.components[c] = new jpeg.lossless.ComponentSpec();
//       }

//       this.components[c].hSamp = temp >> 4;
//       this.components[c].vSamp = temp & 0x0F;
//       this.components[c].quantTableSel = data.get8();
//       count+=1;
//     }

//     if (count !== length) {
//       throw new Error("ERROR: frame format error [Lf!=count]");
//     }

//     return 1;
//   };


//   /*** Exports ***/

//   var moduleType = typeof module;
//   if ((moduleType !== 'undefined') && module.exports) {
//     module.exports = jpeg.lossless.FrameHeader;
//   }

// },{"./component-spec.js":1,"./data-stream.js":2}],5:[function(require,module,exports){
//   /*
//    * Copyright (C) 2015 Michael Martinez
//    * Changes: Added support for selection values 2-7, fixed minor bugs &
//    * warnings, split into multiple class files, and general clean up.
//    *
//    * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
//    */

//   /*
//    * Copyright (C) Helmut Dersch
//    *
//    * Permission is hereby granted, free of charge, to any person obtaining a copy
//    * of this software and associated documentation files (the "Software"), to deal
//    * in the Software without restriction, including without limitation the rights
//    * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//    * copies of the Software, and to permit persons to whom the Software is
//    * furnished to do so, subject to the following conditions:

//    * The above copyright notice and this permission notice shall be included in
//    * all copies or substantial portions of the Software.

//    * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//    * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//    * THE SOFTWARE.
//    */

//   /*jslint browser: true, node: true */
//   /*global require, module */

//   "use strict";

//   /*** Imports ***/
//   var jpeg = jpeg || {};
//   jpeg.lossless = jpeg.lossless || {};
//   jpeg.lossless.DataStream = jpeg.lossless.DataStream || ((typeof require !== 'undefined') ? require('./data-stream.js') : null);
//   jpeg.lossless.Utils = jpeg.lossless.Utils || ((typeof require !== 'undefined') ? require('./utils.js') : null);


//   /*** Constructor ***/
//   jpeg.lossless.HuffmanTable = jpeg.lossless.HuffmanTable || function () {
//     this.l = jpeg.lossless.Utils.createArray(4, 2, 16);
//     this.th = [];
//     this.v = jpeg.lossless.Utils.createArray(4, 2, 16, 200);
//     this.tc = jpeg.lossless.Utils.createArray(4, 2);

//     this.tc[0][0] = 0;
//     this.tc[1][0] = 0;
//     this.tc[2][0] = 0;
//     this.tc[3][0] = 0;
//     this.tc[0][1] = 0;
//     this.tc[1][1] = 0;
//     this.tc[2][1] = 0;
//     this.tc[3][1] = 0;
//     this.th[0] = 0;
//     this.th[1] = 0;
//     this.th[2] = 0;
//     this.th[3] = 0;
//   };



//   /*** Static Pseudo-constants ***/

//   jpeg.lossless.HuffmanTable.MSB = 0x80000000;


//   /*** Prototype Methods ***/

//   jpeg.lossless.HuffmanTable.prototype.read = function(data, HuffTab) {
//     /*jslint bitwise: true */

//     var count = 0, length, temp, t, c, i, j;

//     length = data.get16();
//     count += 2;

//     while (count < length) {
//       temp = data.get8();
//       count+=1;
//       t = temp & 0x0F;
//       if (t > 3) {
//         throw new Error("ERROR: Huffman table ID > 3");
//       }

//       c = temp >> 4;
//       if (c > 2) {
//         throw new Error("ERROR: Huffman table [Table class > 2 ]");
//       }

//       this.th[t] = 1;
//       this.tc[t][c] = 1;

//       for (i = 0; i < 16; i+=1) {
//         this.l[t][c][i] = data.get8();
//         count+=1;
//       }

//       for (i = 0; i < 16; i+=1) {
//         for (j = 0; j < this.l[t][c][i]; j+=1) {
//           if (count > length) {
//             throw new Error("ERROR: Huffman table format error [count>Lh]");
//           }

//           this.v[t][c][i][j] = data.get8();
//           count+=1;
//         }
//       }
//     }

//     if (count !== length) {
//       throw new Error("ERROR: Huffman table format error [count!=Lf]");
//     }

//     for (i = 0; i < 4; i+=1) {
//       for (j = 0; j < 2; j+=1) {
//         if (this.tc[i][j] !== 0) {
//           this.buildHuffTable(HuffTab[i][j], this.l[i][j], this.v[i][j]);
//         }
//       }
//     }

//     return 1;
//   };



// //	Build_HuffTab()
// //	Parameter:  t       table ID
// //	            c       table class ( 0 for DC, 1 for AC )
// //	            L[i]    # of codewords which length is i
// //	            V[i][j] Huffman Value (length=i)
// //	Effect:
// //	    build up HuffTab[t][c] using L and V.
//   jpeg.lossless.HuffmanTable.prototype.buildHuffTable = function(tab, L, V) {
//     /*jslint bitwise: true */

//     var currentTable, temp, k, i, j, n;
//     temp = 256;
//     k = 0;

//     for (i = 0; i < 8; i+=1) { // i+1 is Code length
//       for (j = 0; j < L[i]; j+=1) {
//         for (n = 0; n < (temp >> (i + 1)); n+=1) {
//           tab[k] = V[i][j] | ((i + 1) << 8);
//           k+=1;
//         }
//       }
//     }

//     for (i = 1; k < 256; i+=1, k+=1) {
//       tab[k] = i | jpeg.lossless.HuffmanTable.MSB;
//     }

//     currentTable = 1;
//     k = 0;

//     for (i = 8; i < 16; i+=1) { // i+1 is Code length
//       for (j = 0; j < L[i]; j+=1) {
//         for (n = 0; n < (temp >> (i - 7)); n+=1) {
//           tab[(currentTable * 256) + k] = V[i][j] | ((i + 1) << 8);
//           k+=1;
//         }

//         if (k >= 256) {
//           if (k > 256) {
//             throw new Error("ERROR: Huffman table error(1)!");
//           }

//           k = 0;
//           currentTable+=1;
//         }
//       }
//     }
//   };


//   /*** Exports ***/

//   var moduleType = typeof module;
//   if ((moduleType !== 'undefined') && module.exports) {
//     module.exports = jpeg.lossless.HuffmanTable;
//   }

// },{"./data-stream.js":2,"./utils.js":10}],6:[function(require,module,exports){
//   /*jslint browser: true, node: true */
//   /*global require, module */

//   "use strict";

//   /*** Imports ****/
//   var jpeg = jpeg || {};
//   jpeg.lossless = jpeg.lossless || {};
//   jpeg.lossless.ComponentSpec = jpeg.lossless.ComponentSpec || ((typeof require !== 'undefined') ? require('./component-spec.js') : null);
//   jpeg.lossless.DataStream = jpeg.lossless.DataStream || ((typeof require !== 'undefined') ? require('./data-stream.js') : null);
//   jpeg.lossless.Decoder = jpeg.lossless.Decoder || ((typeof require !== 'undefined') ? require('./decoder.js') : null);
//   jpeg.lossless.FrameHeader = jpeg.lossless.FrameHeader || ((typeof require !== 'undefined') ? require('./frame-header.js') : null);
//   jpeg.lossless.HuffmanTable = jpeg.lossless.HuffmanTable || ((typeof require !== 'undefined') ? require('./huffman-table.js') : null);
//   jpeg.lossless.QuantizationTable = jpeg.lossless.QuantizationTable || ((typeof require !== 'undefined') ? require('./quantization-table.js') : null);
//   jpeg.lossless.ScanComponent = jpeg.lossless.ScanComponent || ((typeof require !== 'undefined') ? require('./scan-component.js') : null);
//   jpeg.lossless.ScanHeader = jpeg.lossless.ScanHeader || ((typeof require !== 'undefined') ? require('./scan-header.js') : null);
//   jpeg.lossless.Utils = jpeg.lossless.Utils || ((typeof require !== 'undefined') ? require('./utils.js') : null);


//   /*** Exports ***/
//   var moduleType = typeof module;
//   if ((moduleType !== 'undefined') && module.exports) {
//     module.exports = jpeg;
//   }

// },{"./component-spec.js":1,"./data-stream.js":2,"./decoder.js":3,"./frame-header.js":4,"./huffman-table.js":5,"./quantization-table.js":7,"./scan-component.js":8,"./scan-header.js":9,"./utils.js":10}],7:[function(require,module,exports){
//   /*
//    * Copyright (C) 2015 Michael Martinez
//    * Changes: Added support for selection values 2-7, fixed minor bugs &
//    * warnings, split into multiple class files, and general clean up.
//    *
//    * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
//    */

//   /*
//    * Copyright (C) Helmut Dersch
//    *
//    * Permission is hereby granted, free of charge, to any person obtaining a copy
//    * of this software and associated documentation files (the "Software"), to deal
//    * in the Software without restriction, including without limitation the rights
//    * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//    * copies of the Software, and to permit persons to whom the Software is
//    * furnished to do so, subject to the following conditions:

//    * The above copyright notice and this permission notice shall be included in
//    * all copies or substantial portions of the Software.

//    * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//    * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//    * THE SOFTWARE.
//    */

//   /*jslint browser: true, node: true */
//   /*global require, module */

//   "use strict";

//   /*** Imports ***/
//   var jpeg = jpeg || {};
//   jpeg.lossless = jpeg.lossless || {};
//   jpeg.lossless.DataStream = jpeg.lossless.DataStream || ((typeof require !== 'undefined') ? require('./data-stream.js') : null);
//   jpeg.lossless.Utils = jpeg.lossless.Utils || ((typeof require !== 'undefined') ? require('./utils.js') : null);


//   /*** Constructor ***/
//   jpeg.lossless.QuantizationTable = jpeg.lossless.QuantizationTable || function () {
//     this.precision = []; // Quantization precision 8 or 16
//     this.tq = []; // 1: this table is presented
//     this.quantTables = jpeg.lossless.Utils.createArray(4, 64); // Tables

//     this.tq[0] = 0;
//     this.tq[1] = 0;
//     this.tq[2] = 0;
//     this.tq[3] = 0;
//   };



//   /*** Static Methods ***/

//   jpeg.lossless.QuantizationTable.enhanceQuantizationTable = function(qtab, table) {
//     /*jslint bitwise: true */

//     var i;

//     for (i = 0; i < 8; i+=1) {
//       qtab[table[(0 * 8) + i]] *= 90;
//       qtab[table[(4 * 8) + i]] *= 90;
//       qtab[table[(2 * 8) + i]] *= 118;
//       qtab[table[(6 * 8) + i]] *= 49;
//       qtab[table[(5 * 8) + i]] *= 71;
//       qtab[table[(1 * 8) + i]] *= 126;
//       qtab[table[(7 * 8) + i]] *= 25;
//       qtab[table[(3 * 8) + i]] *= 106;
//     }

//     for (i = 0; i < 8; i+=1) {
//       qtab[table[0 + (8 * i)]] *= 90;
//       qtab[table[4 + (8 * i)]] *= 90;
//       qtab[table[2 + (8 * i)]] *= 118;
//       qtab[table[6 + (8 * i)]] *= 49;
//       qtab[table[5 + (8 * i)]] *= 71;
//       qtab[table[1 + (8 * i)]] *= 126;
//       qtab[table[7 + (8 * i)]] *= 25;
//       qtab[table[3 + (8 * i)]] *= 106;
//     }

//     for (i = 0; i < 64; i+=1) {
//       qtab[i] >>= 6;
//     }
//   };


//   /*** Prototype Methods ***/

//   jpeg.lossless.QuantizationTable.prototype.read = function (data, table) {
//     /*jslint bitwise: true */

//     var count = 0, length, temp, t, i;

//     length = data.get16();
//     count += 2;

//     while (count < length) {
//       temp = data.get8();
//       count+=1;
//       t = temp & 0x0F;

//       if (t > 3) {
//         throw new Error("ERROR: Quantization table ID > 3");
//       }

//       this.precision[t] = temp >> 4;

//       if (this.precision[t] === 0) {
//         this.precision[t] = 8;
//       } else if (this.precision[t] === 1) {
//         this.precision[t] = 16;
//       } else {
//         throw new Error("ERROR: Quantization table precision error");
//       }

//       this.tq[t] = 1;

//       if (this.precision[t] === 8) {
//         for (i = 0; i < 64; i+=1) {
//           if (count > length) {
//             throw new Error("ERROR: Quantization table format error");
//           }

//           this.quantTables[t][i] = data.get8();
//           count+=1;
//         }

//         jpeg.lossless.QuantizationTable.enhanceQuantizationTable(this.quantTables[t], table);
//       } else {
//         for (i = 0; i < 64; i+=1) {
//           if (count > length) {
//             throw new Error("ERROR: Quantization table format error");
//           }

//           this.quantTables[t][i] = data.get16();
//           count += 2;
//         }

//         jpeg.lossless.QuantizationTable.enhanceQuantizationTable(this.quantTables[t], table);
//       }
//     }

//     if (count !== length) {
//       throw new Error("ERROR: Quantization table error [count!=Lq]");
//     }

//     return 1;
//   };



//   /*** Exports ***/

//   var moduleType = typeof module;
//   if ((moduleType !== 'undefined') && module.exports) {
//     module.exports = jpeg.lossless.QuantizationTable;
//   }

// },{"./data-stream.js":2,"./utils.js":10}],8:[function(require,module,exports){
//   /*
//    * Copyright (C) 2015 Michael Martinez
//    * Changes: Added support for selection values 2-7, fixed minor bugs &
//    * warnings, split into multiple class files, and general clean up.
//    *
//    * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
//    */

//   /*
//    * Copyright (C) Helmut Dersch
//    *
//    * Permission is hereby granted, free of charge, to any person obtaining a copy
//    * of this software and associated documentation files (the "Software"), to deal
//    * in the Software without restriction, including without limitation the rights
//    * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//    * copies of the Software, and to permit persons to whom the Software is
//    * furnished to do so, subject to the following conditions:

//    * The above copyright notice and this permission notice shall be included in
//    * all copies or substantial portions of the Software.

//    * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//    * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//    * THE SOFTWARE.
//    */

//   /*jslint browser: true, node: true */
//   /*global require, module */

//   "use strict";

//   /*** Imports ***/
//   var jpeg = jpeg || {};
//   jpeg.lossless = jpeg.lossless || {};


//   /*** Constructor ***/
//   jpeg.lossless.ScanComponent = jpeg.lossless.ScanComponent || function () {
//     this.acTabSel = 0; // AC table selector
//     this.dcTabSel = 0; // DC table selector
//     this.scanCompSel = 0; // Scan component selector
//   };



//   /*** Exports ***/

//   var moduleType = typeof module;
//   if ((moduleType !== 'undefined') && module.exports) {
//     module.exports = jpeg.lossless.ScanComponent;
//   }

// },{}],9:[function(require,module,exports){
//   /*
//    * Copyright (C) 2015 Michael Martinez
//    * Changes: Added support for selection values 2-7, fixed minor bugs &
//    * warnings, split into multiple class files, and general clean up.
//    *
//    * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
//    */

//   /*
//    * Copyright (C) Helmut Dersch
//    *
//    * Permission is hereby granted, free of charge, to any person obtaining a copy
//    * of this software and associated documentation files (the "Software"), to deal
//    * in the Software without restriction, including without limitation the rights
//    * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//    * copies of the Software, and to permit persons to whom the Software is
//    * furnished to do so, subject to the following conditions:

//    * The above copyright notice and this permission notice shall be included in
//    * all copies or substantial portions of the Software.

//    * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//    * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//    * THE SOFTWARE.
//    */

//   /*jslint browser: true, node: true */
//   /*global require, module */

//   "use strict";

//   /*** Imports ***/
//   var jpeg = jpeg || {};
//   jpeg.lossless = jpeg.lossless || {};
//   jpeg.lossless.DataStream = jpeg.lossless.DataStream || ((typeof require !== 'undefined') ? require('./data-stream.js') : null);
//   jpeg.lossless.ScanComponent = jpeg.lossless.ScanComponent || ((typeof require !== 'undefined') ? require('./scan-component.js') : null);


//   /*** Constructor ***/
//   jpeg.lossless.ScanHeader = jpeg.lossless.ScanHeader || function () {
//     this.ah = 0;
//     this.al = 0;
//     this.numComp = 0; // Number of components in the scan
//     this.selection = 0; // Start of spectral or predictor selection
//     this.spectralEnd = 0; // End of spectral selection
//     this.components = [];
//   };


//   /*** Prototype Methods ***/

//   jpeg.lossless.ScanHeader.prototype.read = function(data) {
//     /*jslint bitwise: true */

//     var count = 0, length, i, temp;

//     length = data.get16();
//     count += 2;

//     this.numComp = data.get8();
//     count+=1;

//     for (i = 0; i < this.numComp; i+=1) {
//       this.components[i] = new jpeg.lossless.ScanComponent();

//       if (count > length) {
//         throw new Error("ERROR: scan header format error");
//       }

//       this.components[i].scanCompSel = data.get8();
//       count+=1;

//       temp = data.get8();
//       count+=1;

//       this.components[i].dcTabSel = (temp >> 4);
//       this.components[i].acTabSel = (temp & 0x0F);
//     }

//     this.selection = data.get8();
//     count+=1;

//     this.spectralEnd = data.get8();
//     count+=1;

//     temp = data.get8();
//     this.ah = (temp >> 4);
//     this.al = (temp & 0x0F);
//     count+=1;

//     if (count !== length) {
//       throw new Error("ERROR: scan header format error [count!=Ns]");
//     }

//     return 1;
//   };



//   /*** Exports ***/

//   var moduleType = typeof module;
//   if ((moduleType !== 'undefined') && module.exports) {
//     module.exports = jpeg.lossless.ScanHeader;
//   }

// },{"./data-stream.js":2,"./scan-component.js":8}],10:[function(require,module,exports){
//   /*
//    * Copyright (C) 2015 Michael Martinez
//    * Changes: Added support for selection values 2-7, fixed minor bugs &
//    * warnings, split into multiple class files, and general clean up.
//    *
//    * 08-25-2015: Helmut Dersch agreed to a license change from LGPL to MIT.
//    */

//   /*
//    * Copyright (C) Helmut Dersch
//    *
//    * Permission is hereby granted, free of charge, to any person obtaining a copy
//    * of this software and associated documentation files (the "Software"), to deal
//    * in the Software without restriction, including without limitation the rights
//    * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//    * copies of the Software, and to permit persons to whom the Software is
//    * furnished to do so, subject to the following conditions:

//    * The above copyright notice and this permission notice shall be included in
//    * all copies or substantial portions of the Software.

//    * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//    * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//    * THE SOFTWARE.
//    */

//   /*jslint browser: true, node: true */
//   /*global require, module */

//   "use strict";

//   /*** Imports ***/
//   var jpeg = jpeg || {};
//   jpeg.lossless = jpeg.lossless || {};


//   /*** Constructor ***/
//   jpeg.lossless.Utils = jpeg.lossless.Utils || {};


//   /*** Static methods ***/

// // http://stackoverflow.com/questions/966225/how-can-i-create-a-two-dimensional-array-in-javascript
//   jpeg.lossless.Utils.createArray = function (length) {
//     var arr = new Array(length || 0),
//       i = length;

//     if (arguments.length > 1) {
//       var args = Array.prototype.slice.call(arguments, 1);
//       while(i--) arr[length-1 - i] = jpeg.lossless.Utils.createArray.apply(this, args);
//     }

//     return arr;
//   };


// // http://stackoverflow.com/questions/18638900/javascript-crc32
//   jpeg.lossless.Utils.makeCRCTable = function(){
//     var c;
//     var crcTable = [];
//     for(var n =0; n < 256; n++){
//       c = n;
//       for(var k =0; k < 8; k++){
//         c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
//       }
//       crcTable[n] = c;
//     }
//     return crcTable;
//   };

//   jpeg.lossless.Utils.crc32 = function(dataView) {
//     var crcTable = jpeg.lossless.Utils.crcTable || (jpeg.lossless.Utils.crcTable = jpeg.lossless.Utils.makeCRCTable());
//     var crc = 0 ^ (-1);

//     for (var i = 0; i < dataView.byteLength; i++ ) {
//       crc = (crc >>> 8) ^ crcTable[(crc ^ dataView.getUint8(i)) & 0xFF];
//     }

//     return (crc ^ (-1)) >>> 0;
//   };


//   /*** Exports ***/

//   var moduleType = typeof module;
//   if ((moduleType !== 'undefined') && module.exports) {
//     module.exports = jpeg.lossless.Utils;
//   }

// },{}]},{},[6])(6)
// });
(function ($, cornerstone, cornerstoneWADOImageLoader) {

  "use strict";

  function swap16(val) {
    return ((val & 0xFF) << 8)
      | ((val >> 8) & 0xFF);
  }


  function extractUncompressedPixels(dataSet, frame, bigEndian)
  {
    var pixelFormat = cornerstoneWADOImageLoader.getPixelFormat(dataSet);
    var imageFrame = getImageFrame(dataSet, frame, pixelFormat);
    // byte swap 16 bit data if bigEndian
    if(bigEndian && (pixelFormat === 2 || pixelFormat === 3)) {
      for(var i=0; i < imageFrame.length; i++) {
        imageFrame[i] = swap16(imageFrame[i]);
      }
    }
    return imageFrame;
  }

  function getImageFrame(dataSet, frame, pixelFormat) {
    // Note - we may want to sanity check the rows * columns * bitsAllocated * samplesPerPixel against the buffer size
    var pixelDataElement = dataSet.elements.x7fe00010;
    var height = dataSet.uint16('x00280010');
    var width = dataSet.uint16('x00280011');
    var samplesPerPixel = dataSet.uint16('x00280002');
    var pixelDataOffset = pixelDataElement.dataOffset;
    var numPixels = width * height * samplesPerPixel;
    if (!numPixels) {
      throw "Sanity check failed when calculating the number of pixels";
    }
    var frameOffset = 0;
    if(pixelFormat === 1) {
      frameOffset = pixelDataOffset + frame * numPixels;
      if(frameOffset >= dataSet.byteArray.length) {
        throw 'frame exceeds size of pixelData';
      }
      return new Uint8Array(dataSet.byteArray.buffer, frameOffset, numPixels);
    }
    else if(pixelFormat === 2) {
      frameOffset = pixelDataOffset + frame * numPixels * 2;
      if(frameOffset >= dataSet.byteArray.length) {
        throw 'frame exceeds size of pixelData';
      }
      return new Uint16Array(dataSet.byteArray.buffer, frameOffset, numPixels);
    }
    else if(pixelFormat === 3) {
      frameOffset = pixelDataOffset + frame * numPixels * 2;
      if(frameOffset >= dataSet.byteArray.length) {
        throw 'frame exceeds size of pixelData';
      }
      return new Int16Array(dataSet.byteArray.buffer, frameOffset, numPixels);
    }
    throw "Unknown pixel format";
  }

  cornerstoneWADOImageLoader.extractUncompressedPixels = extractUncompressedPixels;
}($, cornerstone, cornerstoneWADOImageLoader));
/**
 * Function to deal with extracting an image frame from an encapsulated data set.
 */
(function ($, cornerstone, cornerstoneWADOImageLoader) {

  "use strict";

  function isMultiFrame(dataSet) {
    var numberOfFrames = dataSet.intString('x00280008');
    return numberOfFrames > 1;
  }

  function isFragmented(dataSet) {
    var numberOfFrames = dataSet.intString('x00280008');
    var pixelDataElement = dataSet.elements.x7fe00010;
    if(numberOfFrames != pixelDataElement.fragments.length) {
      return true;
    }
  }

  function getEncodedImageFrameEmptyBasicOffsetTable(dataSet, frame) {
    var pixelDataElement = dataSet.elements.x7fe00010;

    if(isMultiFrame(dataSet)) {
      if(isFragmented(dataSet)) {
        // decoding multi-frame with an empty basic offset table requires parsing the fragments
        // to find frame boundaries.
        throw 'multi-frame sop instance with no basic offset table is not currently supported';
      }

      // not fragmented, a frame maps to the fragment
      return dicomParser.readEncapsulatedPixelDataFromFragments(dataSet, pixelDataElement, frame);
    }

    // Single frame - all fragments are for the one image frame
    var startFragment = 0;
    var numFragments = pixelDataElement.fragments.length;
    return dicomParser.readEncapsulatedPixelDataFromFragments(dataSet, pixelDataElement, startFragment, numFragments);
  }

  function getEncodedImageFrame(dataSet, frame) {
    // Empty basic offset table
    if(!dataSet.elements.x7fe00010.basicOffsetTable.length) {
      return getEncodedImageFrameEmptyBasicOffsetTable(dataSet, frame);
    }

    // Basic Offset Table is not empty
    return dicomParser.readEncapsulatedImageFrame(dataSet, dataSet.elements.x7fe00010, frame);
  }
  cornerstoneWADOImageLoader.getEncodedImageFrame = getEncodedImageFrame;
}($, cornerstone, cornerstoneWADOImageLoader));
(function (cornerstoneWADOImageLoader) {

  "use strict";

  function getMinMax(storedPixelData)
  {
    // we always calculate the min max values since they are not always
    // present in DICOM and we don't want to trust them anyway as cornerstone
    // depends on us providing reliable values for these
    var min = 65535;
    var max = -32768;
    var numPixels = storedPixelData.length;
    var pixelData = storedPixelData;
    for(var index = 0; index < numPixels; index++) {
      var spv = pixelData[index];
      // TODO: test to see if it is faster to use conditional here rather than calling min/max functions
      min = Math.min(min, spv);
      max = Math.max(max, spv);
    }

    return {
      min: min,
      max: max
    };
  }

  // module exports
  cornerstoneWADOImageLoader.getMinMax = getMinMax;

}(cornerstoneWADOImageLoader));


(function (cornerstoneWADOImageLoader) {

  "use strict";

  function getPixelFormat(dataSet) {
    var pixelRepresentation = dataSet.uint16('x00280103');
    var bitsAllocated = dataSet.uint16('x00280100');
    if(pixelRepresentation === 0 && bitsAllocated === 8) {
      return 1; // unsigned 8 bit
    } else if(pixelRepresentation === 0 && bitsAllocated === 16) {
      return 2; // unsigned 16 bit
    } else if(pixelRepresentation === 1 && bitsAllocated === 16) {
      return 3; // signed 16 bit data
    }
  }


  // module exports
  cornerstoneWADOImageLoader.getPixelFormat = getPixelFormat;

}(cornerstoneWADOImageLoader));
(function (cornerstoneWADOImageLoader) {

    "use strict";

    function getPixelSpacing(dataSet) {
      // NOTE - these are not required for all SOP Classes
      // so we return them as undefined.  We also do not
      // deal with the complexity associated with projection
      // radiographs here and leave that to a higher layer
      var pixelSpacing = dataSet.string('x00280030');
      if (pixelSpacing && pixelSpacing.length > 0) {
        var split = pixelSpacing.split('\\');

        // Make sure that neither pixel spacing value is 0 or undefined
        if (parseFloat(split[0]) && parseFloat(split[1])) {
          return {
            row: parseFloat(split[0]),
            column: parseFloat(split[1])
          };
        }
      }

      return {
        row: undefined,
        column: undefined
      };
    }
    // module exports
    cornerstoneWADOImageLoader.getPixelSpacing = getPixelSpacing;
}(cornerstoneWADOImageLoader));
(function (cornerstoneWADOImageLoader) {

    "use strict";

    function getRescaleSlopeAndIntercept(dataSet)
    {
        // NOTE - we default these to an identity transform since modality LUT
        // module is not required for all SOP Classes
        var result = {
            intercept : 0.0,
            slope: 1.0
        };

        if(dataSet.elements.x00281052 && dataSet.elements.x00281053) {
          result.intercept = dataSet.floatString('x00281052') || result.intercept;
          result.slope = dataSet.floatString('x00281053') || result.slope;
        }

        return result;
    }

    // module exports
    cornerstoneWADOImageLoader.getRescaleSlopeAndIntercept = getRescaleSlopeAndIntercept;
}(cornerstoneWADOImageLoader));
(function (cornerstoneWADOImageLoader) {

    "use strict";

    function getWindowWidthAndCenter(dataSet)
    {
        // NOTE - Default these to undefined since they may not be present as
        // they are not present or required for all sop classes.  We leave it up
        // to a higher layer to determine reasonable default values for these
        // if they are not provided.  We also use the first ww/wc values if
        // there are multiple and again leave it up the higher levels to deal with
        // this
        var result = {
            windowCenter : undefined,
            windowWidth: undefined
        };

        if(dataSet.elements.x00281050 && dataSet.elements.x00281051) {
          result.windowCenter = dataSet.floatString('x00281050');
          result.windowWidth = dataSet.floatString('x00281051');
        }

        return result;
    }

    // module exports
    cornerstoneWADOImageLoader.getWindowWidthAndCenter = getWindowWidthAndCenter;
}(cornerstoneWADOImageLoader));

(function ($, cornerstone, cornerstoneWADOImageLoader) {

  "use strict";

  // register dicomfile image loader prefixes
  cornerstone.registerImageLoader('dicomfile', cornerstoneWADOImageLoader.internal.loadImage);

}($, cornerstone, cornerstoneWADOImageLoader));
/**
 */
(function (cornerstoneWADOImageLoader) {

  "use strict";

  var files = [];

  function add(file) {
    var fileIndex =  files.push(file);
    return 'dicomfile:' + (fileIndex - 1);
  }

  function get(index) {
    return files[index];
  }

  function remove(index) {
    files[index] = undefined;
  }

  function purge() {
    files = [];
  }

  // module exports
  cornerstoneWADOImageLoader.fileManager = {
    add : add,
    get : get,
    remove:remove,
    purge: purge
  };

}(cornerstoneWADOImageLoader));
(function ($, cornerstone, cornerstoneWADOImageLoader) {

  "use strict";

  function loadFileRequest(uri) {

    var parsedImageId = cornerstoneWADOImageLoader.parseImageId(uri);
    var fileIndex = parseInt(parsedImageId.url);
    var file = cornerstoneWADOImageLoader.fileManager.get(fileIndex);
    
    // create a deferred object
    var deferred = $.Deferred();

    var fileReader = new FileReader();
    fileReader.onload = function (e) {
      // Parse the DICOM File
      var dicomPart10AsArrayBuffer = e.target.result;
      var byteArray = new Uint8Array(dicomPart10AsArrayBuffer);
      var dataSet = dicomParser.parseDicom(byteArray);

      deferred.resolve(dataSet);
    };
    fileReader.readAsArrayBuffer(file);

    return deferred.promise();
  }
  cornerstoneWADOImageLoader.internal.loadFileRequest = loadFileRequest;
}($, cornerstone, cornerstoneWADOImageLoader));

(function (cornerstoneWADOImageLoader) {

  function checkToken(token, data, dataOffset) {

    if(dataOffset + token.length > data.length) {
      //console.log('dataOffset >> ', dataOffset);
      return false;
    }

    var endIndex = dataOffset;

    for(var i = 0; i < token.length; i++) {
      if(token[i] !== data[endIndex++]) {
        if(endIndex > 520000) {
          //console.log('token=',uint8ArrayToString(token));
          //console.log('data=', uint8ArrayToString(data, dataOffset, endIndex-dataOffset));
          //console.log('miss at %d %s dataOffset=%d', i, String.fromCharCode(data[endIndex]), endIndex);
          //console.log('miss at %d %s dataOffset=%d', i, String.fromCharCode(token[endIndex]), endIndex);
        }
        return false;
      }
    }
    return true;
  }

  function stringToUint8Array(str) {
    var uint=new Uint8Array(str.length);
    for(var i=0,j=str.length;i<j;i++){
      uint[i]=str.charCodeAt(i);
    }
    return uint;
  }

  function findIndexOfString(data, str, offset) {

    offset = offset || 0;

    var token = stringToUint8Array(str);

    for(var i=offset; i < data.length; i++) {
      if(token[0] === data[i]) {
        //console.log('match @', i);
        if(checkToken(token, data, i)) {
          return i;
        }
      }
    }
    return -1;
  }
  cornerstoneWADOImageLoader.internal.findIndexOfString = findIndexOfString;

}(cornerstoneWADOImageLoader));
(function (cornerstoneWADOImageLoader) {

  "use strict";

  function findBoundary(header) {
    for(var i=0; i < header.length; i++) {
      if(header[i].substr(0,2) === '--') {
        return header[i];
      }
    }
    return undefined;
  }

  function findContentType(header) {
    for(var i=0; i < header.length; i++) {
      if(header[i].substr(0,13) === 'Content-Type:') {
        return header[i].substr(13).trim();
      }
    }
    return undefined;
  }

  function uint8ArrayToString(data, offset, length) {
    offset = offset || 0;
    length = length || data.length - offset;
    var str = "";
    for(var i=offset; i < offset + length; i++) {
      str += String.fromCharCode(data[i]);
    }
    return str;
  };

  cornerstoneWADOImageLoader.internal.getImageFrame = function(uri, mediaType) {
    mediaType = mediaType || 'application/octet-stream';

    var deferred = $.Deferred();

    var xhr = new XMLHttpRequest();
    xhr.responseType = "arraybuffer";
    xhr.open("get", uri, true);
    xhr.setRequestHeader('Accept', 'multipart/related;type=' + mediaType);
    xhr.onreadystatechange = function (oEvent) {
      // TODO: consider sending out progress messages here as we receive the pixel data
      if (xhr.readyState === 4) {
        if (xhr.status === 200) {
          // request succeeded, Parse the multi-part mime response
          var imageFrameAsArrayBuffer = xhr.response;
          var response = new Uint8Array(xhr.response);
          // First look for the multipart mime header
          var tokenIndex = cornerstoneWADOImageLoader.internal.findIndexOfString(response, '\n\r\n');
          if(tokenIndex === -1) {
            deferred.reject('invalid response - no multipart mime header');
          }
          var header = uint8ArrayToString(response, 0, tokenIndex);
          // Now find the boundary  marker
          var split = header.split('\r\n');
          var boundary = findBoundary(split);
          if(!boundary) {
            deferred.reject('invalid response - no boundary marker')
          }
          var offset = tokenIndex + 4; // skip over the \n\r\n

          // find the terminal boundary marker
          var endIndex = cornerstoneWADOImageLoader.internal.findIndexOfString(response, boundary, offset);
          if(endIndex === -1) {
            deferred.reject('invalid response - terminating boundary not found');
          }
          // return the info for this pixel data
          var length = endIndex - offset - 1;
          deferred.resolve({
            contentType: findContentType(split),
            arrayBuffer: imageFrameAsArrayBuffer,
            offset: offset,
            length: length
          });
        }
        else {
          // request failed, reject the deferred
          deferred.reject(xhr.response);
        }
      }
    };
    xhr.send();

    return deferred.promise();
  };
}(cornerstoneWADOImageLoader));
/**
 */
(function (cornerstoneWADOImageLoader) {

  "use strict";

  var images = [];

  function add(image) {
    var fileIndex =  images.push(image);
    return 'wadors:' + (fileIndex - 1);
  }

  function get(index) {
    return images[index];
  }

  function remove(index) {
    images[index] = undefined;
  }

  function purge() {
    images = [];
  }

  // module exports
  cornerstoneWADOImageLoader.imageManager = {
    add : add,
    get : get,
    remove:remove,
    purge: purge
  };

}(cornerstoneWADOImageLoader));

(function ($, cornerstone, cornerstoneWADOImageLoader) {

  "use strict";


  function loadImage(imageId) {
    var deferred = $.Deferred();
    var index = imageId.substring(7);
    var image = cornerstoneWADOImageLoader.imageManager.get(index);
    if(image === undefined) {
      deferred.reject('unknown imageId');
      return deferred.promise();
    }

    var mediaType;// = 'image/dicom+jp2';

    cornerstoneWADOImageLoader.internal.getImageFrame(image.uri, mediaType).then(function(result) {
      //console.log(result);
      // TODO: add support for retrieving compressed pixel data
      var storedPixelData;
      if(image.instance.bitsAllocated === 16) {
        if(image.instance.pixelRepresentation === 0) {
          storedPixelData = new Uint16Array(result.arrayBuffer, result.offset, result.length / 2);
        } else {
          storedPixelData = new Int16Array(result.arrayBuffer, result.offset, result.length / 2);
        }
      } else if(image.instance.bitsAllocated === 8) {
        storedPixelData = new Uint8Array(result.arrayBuffer, result.offset, result.length);
      }

      // TODO: handle various color space conversions

      var minMax = cornerstoneWADOImageLoader.getMinMax(storedPixelData);
      image.imageId = imageId;
      image.minPixelValue = minMax.min;
      image.maxPixelValue = minMax.max;
      image.render = cornerstone.renderGrayscaleImage;
      image.getPixelData = function() {
        return storedPixelData;
      };
      //console.log(image);
      deferred.resolve(image);
    }).fail(function(reason) {
      deferred.reject(reason);
    });

    return deferred.promise();
  }

  // registery dicomweb and wadouri image loader prefixes
  cornerstone.registerImageLoader('wadors', loadImage);

}($, cornerstone, cornerstoneWADOImageLoader));

(function ($, cornerstone, cornerstoneWADOImageLoader) {

  "use strict";

  // register dicomweb and wadouri image loader prefixes
  cornerstone.registerImageLoader('dicomweb', cornerstoneWADOImageLoader.internal.loadImage);
  cornerstone.registerImageLoader('wadouri', cornerstoneWADOImageLoader.internal.loadImage);

}($, cornerstone, cornerstoneWADOImageLoader));
(function (cornerstoneWADOImageLoader) {

  "use strict";

  var options = {
    // callback allowing customization of the xhr (e.g. adding custom auth headers, cors, etc)
    beforeSend : function(xhr) {}
  };

  function configure(opts) {
    options = opts;
  }

  function isColorImage(photoMetricInterpretation)
  {
    if(photoMetricInterpretation === "RGB" ||
      photoMetricInterpretation === "PALETTE COLOR" ||
      photoMetricInterpretation === "YBR_FULL" ||
      photoMetricInterpretation === "YBR_FULL_422" ||
      photoMetricInterpretation === "YBR_PARTIAL_422" ||
      photoMetricInterpretation === "YBR_PARTIAL_420" ||
      photoMetricInterpretation === "YBR_RCT" ||
      photoMetricInterpretation === "YBR_ICT")
    {
      return true;
    }
    else
    {
      return false;
    }
  }

  cornerstoneWADOImageLoader.isColorImage = isColorImage;

}(cornerstoneWADOImageLoader));
(function ($, cornerstone, cornerstoneWADOImageLoader) {

    "use strict";

    var canvas = document.createElement('canvas');
    var lastImageIdDrawn = "";

    function extractStoredPixels(dataSet, frame) {

        // special case for JPEG Baseline 8 bit
        if(cornerstoneWADOImageLoader.isJPEGBaseline8Bit(dataSet) === true)
        {
          return cornerstoneWADOImageLoader.decodeJPEGBaseline8Bit(canvas, dataSet, frame);
        }

        var decodedImageFrame = cornerstoneWADOImageLoader.decodeTransferSyntax(dataSet, frame);

        return cornerstoneWADOImageLoader.convertColorSpace(canvas, dataSet, decodedImageFrame);
    }

    function makeColorImage(imageId, dataSet, frame, sharedCacheKey) {

        // extract the DICOM attributes we need
        var pixelSpacing = cornerstoneWADOImageLoader.getPixelSpacing(dataSet);
        var rows = dataSet.uint16('x00280010');
        var columns = dataSet.uint16('x00280011');
        var rescaleSlopeAndIntercept = cornerstoneWADOImageLoader.getRescaleSlopeAndIntercept(dataSet);
        var bytesPerPixel = 4;
        var numPixels = rows * columns;
        //var sizeInBytes = numPixels * bytesPerPixel;
        var sizeInBytes = dataSet.byteArray.length;
        var windowWidthAndCenter = cornerstoneWADOImageLoader.getWindowWidthAndCenter(dataSet);

        // clear the lastImageIdDrawn so we update the canvas
        lastImageIdDrawn = undefined;

        var deferred = $.Deferred();

        // Decompress and decode the pixel data for this image
        var imageDataPromise;
        try {
          imageDataPromise = extractStoredPixels(dataSet, frame);
        }
        catch(err) {
          deferred.reject(err);
          return deferred.promise();
        }

        imageDataPromise.then(function(imageData) {
            function getPixelData() {
                return imageData.data;
            }

            function getImageData() {
                return imageData;
            }

            function getCanvas() {
                if(lastImageIdDrawn === imageId) {
                    return canvas;
                }

                canvas.height = rows;
                canvas.width = columns;
                var context = canvas.getContext('2d');
                context.putImageData(imageData, 0, 0 );
                lastImageIdDrawn = imageId;
                return canvas;
            }

            // Extract the various attributes we need
            var image = {
                imageId : imageId,
                minPixelValue : 0,
                maxPixelValue : 255,
                slope: rescaleSlopeAndIntercept.slope,
                intercept: rescaleSlopeAndIntercept.intercept,
                windowCenter : windowWidthAndCenter.windowCenter,
                windowWidth : windowWidthAndCenter.windowWidth,
                render: cornerstone.renderColorImage,
                getPixelData: getPixelData,
                getImageData: getImageData,
                getCanvas: getCanvas,
                rows: rows,
                columns: columns,
                height: rows,
                width: columns,
                color: true,
                columnPixelSpacing: pixelSpacing.column,
                rowPixelSpacing: pixelSpacing.row,
                data: dataSet,
                invert: false,
                sizeInBytes: sizeInBytes,
                sharedCacheKey: sharedCacheKey
            };

          if(image.windowCenter === undefined || isNaN(image.windowCenter) ||
            image.windowWidth === undefined || isNaN(image.windowWidth)) {
                image.windowWidth = 255;
                image.windowCenter = 128;
            }

            // invoke the callback to allow external code to modify the newly created image object if needed - e.g.
            // apply vendor specific workarounds and such
            if(cornerstoneWADOImageLoader.internal.options.imageCreated) {
                cornerstoneWADOImageLoader.internal.options.imageCreated(image);
            }

            deferred.resolve(image);
        }, function(error) {
            deferred.reject(error);
        });

        return deferred.promise();
    }

    // module exports
    cornerstoneWADOImageLoader.makeColorImage = makeColorImage;
}($, cornerstone, cornerstoneWADOImageLoader));
(function ($, cornerstone, cornerstoneWADOImageLoader) {

    "use strict";

    function getBytesPerPixel(dataSet)
    {
        var pixelFormat = cornerstoneWADOImageLoader.getPixelFormat(dataSet);
        if(pixelFormat ===1) {
            return 1;
        }
        else if(pixelFormat ===2 || pixelFormat ===3){
            return 2;
        }
        throw "unknown pixel format";
    }

    function getLUT(image, pixelRepresentation, lutDataSet) {
      var numLUTEntries = lutDataSet.uint16('x00283002', 0);
      if(numLUTEntries === 0) {
        numLUTEntries = 65535;
      }
      var firstValueMapped = 0;
      if(pixelRepresentation === 0) {
        firstValueMapped = lutDataSet.uint16('x00283002', 1);
      } else {
         firstValueMapped = lutDataSet.int16('x00283002', 1);
      }
      var numBitsPerEntry = lutDataSet.uint16('x00283002', 2);
      //console.log('LUT(', numLUTEntries, ',', firstValueMapped, ',', numBitsPerEntry, ')');
      var lut = {
        id : '1',
        firstValueMapped: firstValueMapped,
        numBitsPerEntry : numBitsPerEntry,
        lut : []
      };

      //console.log("minValue=", minValue, "; maxValue=", maxValue);
      for (var i = 0; i < numLUTEntries; i++) {
        if(pixelRepresentation === 0) {
          lut.lut[i] = lutDataSet.uint16('x00283006', i);
        } else {
          lut.lut[i] = lutDataSet.int16('x00283006', i);
        }
      }
      return lut;
    }

    function isModalityLUTForDisplay(dataSet) {
      // special case for XA and XRF
      // https://groups.google.com/forum/#!searchin/comp.protocols.dicom/Modality$20LUT$20XA/comp.protocols.dicom/UBxhOZ2anJ0/D0R_QP8V2wIJ
      var sopClassUid = dataSet.string('x00080016');
      return  sopClassUid !== '1.2.840.10008.5.1.4.1.1.12.1' && // XA
              sopClassUid !== '1.2.840.10008.5.1.4.1.1.12.2.1	'; // XRF
    }

    function makeGrayscaleImage(imageId, dataSet, frame, sharedCacheKey) {
        var deferred = $.Deferred();

        // extract the DICOM attributes we need
        var pixelSpacing = cornerstoneWADOImageLoader.getPixelSpacing(dataSet);
        var rows = dataSet.uint16('x00280010');
        var columns = dataSet.uint16('x00280011');
        var rescaleSlopeAndIntercept = cornerstoneWADOImageLoader.getRescaleSlopeAndIntercept(dataSet);

        var bytesPerPixel;
        try {
            bytesPerPixel = getBytesPerPixel(dataSet);
        } catch(error) {
            deferred.reject(error);
            return deferred.promise();
        }

        var numPixels = rows * columns;
        //var sizeInBytes = numPixels * bytesPerPixel;
        var sizeInBytes = dataSet.byteArray.length;
        var photometricInterpretation = dataSet.string('x00280004');
        var invert = (photometricInterpretation === "MONOCHROME1");
        var windowWidthAndCenter = cornerstoneWADOImageLoader.getWindowWidthAndCenter(dataSet);

        // Decompress and decode the pixel data for this image
        var storedPixelData;
        try {
          storedPixelData = cornerstoneWADOImageLoader.decodeTransferSyntax(dataSet, frame);
        }
        catch(err) {
          deferred.reject(err);
          return deferred.promise();
        }

        var minMax = cornerstoneWADOImageLoader.getMinMax(storedPixelData);

        function getPixelData() {
            return storedPixelData;
        }


        // Extract the various attributes we need
        var image = {
            imageId : imageId,
            minPixelValue : minMax.min,
            maxPixelValue : minMax.max,
            slope: rescaleSlopeAndIntercept.slope,
            intercept: rescaleSlopeAndIntercept.intercept,
            windowCenter : windowWidthAndCenter.windowCenter,
            windowWidth : windowWidthAndCenter.windowWidth,
            render: cornerstone.renderGrayscaleImage,
            getPixelData: getPixelData,
            rows: rows,
            columns: columns,
            height: rows,
            width: columns,
            color: false,
            columnPixelSpacing: pixelSpacing.column,
            rowPixelSpacing: pixelSpacing.row,
            data: dataSet,
            invert: invert,
            sizeInBytes: sizeInBytes,
            sharedCacheKey: sharedCacheKey
        };

        // modality LUT
        var pixelRepresentation = dataSet.uint16('x00280103');
        if(dataSet.elements.x00283000 && isModalityLUTForDisplay(dataSet)) {
          image.modalityLUT = getLUT(image, pixelRepresentation, dataSet.elements.x00283000.items[0].dataSet);
        }

        // VOI LUT
        if(dataSet.elements.x00283010) {
          pixelRepresentation = 0;
          // if modality LUT can produce negative values, the data is signed
          if(image.minPixelValue * image.slope + image.intercept < 0) {
            pixelRepresentation = 1;
          }
          image.voiLUT = getLUT(image, pixelRepresentation, dataSet.elements.x00283010.items[0].dataSet);
        }

        // TODO: deal with pixel padding and all of the various issues by setting it to min pixel value (or lower)
        // TODO: Mask out overlays embedded in pixel data above high bit

        if(image.windowCenter === undefined || isNaN(image.windowCenter) ||
           image.windowWidth === undefined || isNaN(image.windowWidth)) {
            var maxVoi = image.maxPixelValue * image.slope + image.intercept;
            var minVoi = image.minPixelValue * image.slope + image.intercept;
            image.windowWidth = maxVoi - minVoi;
            image.windowCenter = (maxVoi + minVoi) / 2;
        }

        // invoke the callback to allow external code to modify the newly created image object if needed - e.g.
        // apply vendor specific workarounds and such
      if(cornerstoneWADOImageLoader.internal.options.imageCreated) {
        cornerstoneWADOImageLoader.internal.options.imageCreated(image);
      }
      
        deferred.resolve(image);
        return deferred.promise();
    }

    // module exports
    cornerstoneWADOImageLoader.makeGrayscaleImage = makeGrayscaleImage;
}($, cornerstone, cornerstoneWADOImageLoader));
(function (cornerstoneWADOImageLoader) {

  "use strict";
  function parseImageId(imageId) {
    // build a url by parsing out the url scheme and frame index from the imageId
    var firstColonIndex = imageId.indexOf(':');
    var url = imageId.substring(firstColonIndex + 1);
    var frameIndex = url.indexOf('frame=');
    var frame;
    if(frameIndex !== -1) {
      var frameStr = url.substr(frameIndex + 6);
      frame = parseInt(frameStr);
      url = url.substr(0, frameIndex-1);
    }
    return {
      scheme: imageId.substr(0, firstColonIndex),
      url : url,
      frame: frame
    };
  }

  // module exports
  cornerstoneWADOImageLoader.parseImageId = parseImageId;
  
}(cornerstoneWADOImageLoader));
(function (cornerstoneWADOImageLoader) {

  "use strict";

  // module exports
  cornerstoneWADOImageLoader.version = '0.13.3';

}(cornerstoneWADOImageLoader));
(function ($, cornerstone, cornerstoneWADOImageLoader) {

  "use strict";

  function xhrRequest(url, imageId) {

    var deferred = $.Deferred();

    // Make the request for the DICOM P10 SOP Instance
    var xhr = new XMLHttpRequest();
    xhr.open("get", url, true);
    xhr.responseType = "arraybuffer";
      cornerstoneWADOImageLoader.internal.options.beforeSend(xhr);
    xhr.onreadystatechange = function (oEvent) {
      // TODO: consider sending out progress messages here as we receive the pixel data
      if (xhr.readyState === 4) {
        if (xhr.status === 200) {
          // request succeeded, create an image object and resolve the deferred

          // Parse the DICOM File
          var dicomPart10AsArrayBuffer = xhr.response;
          var byteArray = new Uint8Array(dicomPart10AsArrayBuffer);
          var dataSet = dicomParser.parseDicom(byteArray);

          deferred.resolve(dataSet);
        }
        else {
          // request failed, reject the deferred
          deferred.reject(xhr);
        }
      }
    };
    xhr.onprogress = function (oProgress) {
      // console.log('progress:',oProgress)

      if (oProgress.lengthComputable) {  //evt.loaded the bytes browser receive
        //evt.total the total bytes seted by the header
        //
        var loaded = oProgress.loaded;
        var total = oProgress.total;
        var percentComplete = Math.round((loaded / total) * 100);

        $(cornerstone).trigger('CornerstoneImageLoadProgress', {
          imageId: imageId,
          loaded: loaded,
          total: total,
          percentComplete: percentComplete
        });
      }
    };

    xhr.send();

    return deferred.promise();
  }

  cornerstoneWADOImageLoader.internal.xhrRequest = xhrRequest;
}($, cornerstone, cornerstoneWADOImageLoader));

module.exports = cornerstoneWADOImageLoader;


},{"./dicomParser.min":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/lib/dicomParser.min.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/lib/dicomParser.min.js":[function(require,module,exports){
(function (Buffer){
/*! dicom-parser - v1.6.1 - 2016-05-24 | (c) 2014 Chris Hafey | https://github.com/chafey/dicomParser */
!function(a,b){"undefined"!=typeof module&&module.exports?module.exports=b():"function"==typeof define&&define.amd?define([],b):("undefined"==typeof cornerstone&&(dicomParser={},"undefined"!=typeof Package&&(a.dicomParser=dicomParser)),dicomParser=b())}(this,function(){var a=function(a){return void 0===a&&(a={}),a.parseDicom=function(b,c){function d(c){if(void 0===c.elements.x00020010)throw"dicomParser.parseDicom: missing required meta header attribute 0002,0010";var d=c.elements.x00020010;return a.readFixedString(b,d.dataOffset,d.length)}function e(a){return"1.2.840.10008.1.2"!==a}function f(d,e){if("1.2.840.10008.1.2.1.99"===d){if(c&&c.inflater){var f=c.inflater(b,e);return new a.ByteStream(a.littleEndianByteArrayParser,f,0)}if("undefined"!=typeof module&&this.module!==module){var g=require("zlib"),h=a.sharedCopy(b,e,b.length-e),i=g.inflateRawSync(h),j=a.alloc(b,i.length+e);return b.copy(j,0,0,e),i.copy(j,e),new a.ByteStream(a.littleEndianByteArrayParser,j,0)}if("undefined"!=typeof pako){var k=b.slice(e),l=pako.inflateRaw(k),m=a.alloc(b,l.length+e);return m.set(b.slice(0,e),0),m.set(l,e),new a.ByteStream(a.littleEndianByteArrayParser,m,0)}throw"dicomParser.parseDicom: no inflater available to handle deflate transfer syntax"}return"1.2.840.10008.1.2.2"===d?new a.ByteStream(a.bigEndianByteArrayParser,b,e):new a.ByteStream(a.littleEndianByteArrayParser,b,e)}function g(a,b){for(var c in a.elements)a.elements.hasOwnProperty(c)&&(b.elements[c]=a.elements[c]);return void 0!==a.warnings&&(b.warnings=a.warnings.concat(b.warnings)),b}function h(b){var g=d(b),h=e(g),i=f(g,b.position),j={},k=new a.DataSet(i.byteArrayParser,i.byteArray,j);k.warnings=i.warnings;try{h?a.parseDicomDataSetExplicit(k,i,i.byteArray.length,c):a.parseDicomDataSetImplicit(k,i,i.byteArray.length,c)}catch(l){var m={exception:l,dataSet:k};throw m}return k}function i(){var d=a.readPart10Header(b,c),e=h(d);return g(d,e)}if(void 0===b)throw"dicomParser.parseDicom: missing required parameter 'byteArray'";return i()},a}(a),a=function(a){"use strict";return void 0===a&&(a={}),a.explicitDataSetToJS=function(b,c){if(void 0===b)throw"dicomParser.explicitDataSetToJS: missing required parameter dataSet";c=c||{omitPrivateAttibutes:!0,maxElementLength:128};var d={};for(var e in b.elements){var f=b.elements[e];if(c.omitPrivateAttibutes!==!0||!a.isPrivateTag(e))if(f.items){for(var g=[],h=0;h<f.items.length;h++)g.push(a.explicitDataSetToJS(f.items[h].dataSet,c));d[e]=g}else{var i;i=void 0,f.length<c.maxElementLength&&(i=a.explicitElementToString(b,f)),void 0!==i?d[e]=i:d[e]={dataOffset:f.dataOffset,length:f.length}}}return d},a}(a),a=function(a){"use strict";return void 0===a&&(a={}),a.explicitElementToString=function(b,c){function d(a,c){for(var d="",e=0;a>e;e++)0!==e&&(d+="/"),d+=c.call(b,g,e).toString();return d}if(void 0===b||void 0===c)throw"dicomParser.explicitElementToString: missing required parameters";if(void 0===c.vr)throw"dicomParser.explicitElementToString: cannot convert implicit element to string";var e,f=c.vr,g=c.tag;if(a.isStringVr(f)===!0)e=b.string(g);else{if("AT"==f){var h=b.uint32(g);if(void 0===h)return;return 0>h&&(h=4294967295+h+1),"x"+h.toString(16).toUpperCase()}"US"==f?e=d(c.length/2,b.uint16):"SS"===f?e=d(c.length/2,b.int16):"UL"==f?e=d(c.length/4,b.uint32):"SL"===f?e=d(c.length/4,b.int32):"FD"==f?e=d(c.length/8,b["double"]):"FL"==f&&(e=d(c.length/4,b["float"]))}return e},a}(a),a=function(a){"use strict";function b(a,b){switch(a){case 2:return b%4==0&&b%100||b%400==0?29:28;case 9:case 4:case 6:case 11:return 30;default:return 31}}function c(a,c,d){return isNaN(d)?!1:c>0&&12>=c&&a>0&&a<=b(c,d)}return void 0===a&&(a={}),a.parseDA=function(a,b){if(a&&8===a.length){var d=parseInt(a.substring(0,4),10),e=parseInt(a.substring(4,6),10),f=parseInt(a.substring(6,8),10);if(b&&c(f,e,d)!==!0)throw"invalid DA '"+a+"'";return{year:d,month:e,day:f}}if(b)throw"invalid DA '"+a+"'"},a}(a),a=function(a){"use strict";return void 0===a&&(a={}),a.parseTM=function(a,b){if(a.length>=2){var c=parseInt(a.substring(0,2),10),d=a.length>=4?parseInt(a.substring(2,4),10):void 0,e=a.length>=6?parseInt(a.substring(4,6),10):void 0,f=a.length>=8?parseInt(a.substring(7,13),10):void 0;if(b&&(isNaN(c)||void 0!==d&&isNaN(d)||void 0!==e&&isNaN(e)||void 0!==f&&isNaN(f)||0>c||c>23||d&&(0>d||d>59)||e&&(0>e||e>59)||f&&(0>f||f>999999)))throw"invalid TM '"+a+"'";return{hours:c,minutes:d,seconds:e,fractionalSeconds:f}}if(b)throw"invalid TM '"+a+"'"},a}(a),a=function(a){"use strict";void 0===a&&(a={});var b={AE:!0,AS:!0,AT:!1,CS:!0,DA:!0,DS:!0,DT:!0,FL:!1,FD:!1,IS:!0,LO:!0,LT:!0,OB:!1,OD:!1,OF:!1,OW:!1,PN:!0,SH:!0,SL:!1,SQ:!1,SS:!1,ST:!0,TM:!0,UI:!0,UL:!1,UN:void 0,UR:!0,US:!1,UT:!0};return a.isStringVr=function(a){return b[a]},a.isPrivateTag=function(a){var b=parseInt(a[4]),c=b%2===1;return c},a.parsePN=function(a){if(void 0!==a){var b=a.split("^");return{familyName:b[0],givenName:b[1],middleName:b[2],prefix:b[3],suffix:b[4]}}},a}(a),a=function(a){"use strict";void 0===a&&(a={});var b=!1;return a.readEncapsulatedPixelData=function(c,d,e){if(b||(b=!0,console&&console.log&&console.log("WARNING: dicomParser.readEncapsulatedPixelData() has been deprecated")),void 0===c)throw"dicomParser.readEncapsulatedPixelData: missing required parameter 'dataSet'";if(void 0===d)throw"dicomParser.readEncapsulatedPixelData: missing required parameter 'element'";if(void 0===e)throw"dicomParser.readEncapsulatedPixelData: missing required parameter 'frame'";if("x7fe00010"!==d.tag)throw"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to non pixel data tag (expected tag = x7fe00010'";if(d.encapsulatedPixelData!==!0)throw"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data";if(d.hadUndefinedLength!==!0)throw"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data";if(void 0===d.basicOffsetTable)throw"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data";if(void 0===d.fragments)throw"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data";if(0>e)throw"dicomParser.readEncapsulatedPixelData: parameter 'frame' must be >= 0";return 0!==d.basicOffsetTable.length?a.readEncapsulatedImageFrame(c,d,e):a.readEncapsulatedPixelDataFromFragments(c,d,0,d.fragments.length)},a}(a),a=function(a){"use strict";return void 0===a&&(a={}),a.alloc=function(a,b){if("undefined"!=typeof Buffer&&a instanceof Buffer)return Buffer.alloc(b);if(a instanceof Uint8Array)return new Uint8Array(b);throw"dicomParser.alloc: unknown type for byteArray"},a}(a),a=function(a){"use strict";return void 0===a&&(a={}),a.bigEndianByteArrayParser={readUint16:function(a,b){if(0>b)throw"bigEndianByteArrayParser.readUint16: position cannot be less than 0";if(b+2>a.length)throw"bigEndianByteArrayParser.readUint16: attempt to read past end of buffer";return(a[b]<<8)+a[b+1]},readInt16:function(a,b){if(0>b)throw"bigEndianByteArrayParser.readInt16: position cannot be less than 0";if(b+2>a.length)throw"bigEndianByteArrayParser.readInt16: attempt to read past end of buffer";var c=(a[b]<<8)+a[b+1];return 32768&c&&(c=c-65535-1),c},readUint32:function(a,b){if(0>b)throw"bigEndianByteArrayParser.readUint32: position cannot be less than 0";if(b+4>a.length)throw"bigEndianByteArrayParser.readUint32: attempt to read past end of buffer";var c=256*(256*(256*a[b]+a[b+1])+a[b+2])+a[b+3];return c},readInt32:function(a,b){if(0>b)throw"bigEndianByteArrayParser.readInt32: position cannot be less than 0";if(b+4>a.length)throw"bigEndianByteArrayParser.readInt32: attempt to read past end of buffer";var c=(a[b]<<24)+(a[b+1]<<16)+(a[b+2]<<8)+a[b+3];return c},readFloat:function(a,b){if(0>b)throw"bigEndianByteArrayParser.readFloat: position cannot be less than 0";if(b+4>a.length)throw"bigEndianByteArrayParser.readFloat: attempt to read past end of buffer";var c=new Uint8Array(4);c[3]=a[b],c[2]=a[b+1],c[1]=a[b+2],c[0]=a[b+3];var d=new Float32Array(c.buffer);return d[0]},readDouble:function(a,b){if(0>b)throw"bigEndianByteArrayParser.readDouble: position cannot be less than 0";if(b+8>a.length)throw"bigEndianByteArrayParser.readDouble: attempt to read past end of buffer";var c=new Uint8Array(8);c[7]=a[b],c[6]=a[b+1],c[5]=a[b+2],c[4]=a[b+3],c[3]=a[b+4],c[2]=a[b+5],c[1]=a[b+6],c[0]=a[b+7];var d=new Float64Array(c.buffer);return d[0]}},a}(a),a=function(a){"use strict";return void 0===a&&(a={}),a.readFixedString=function(a,b,c){if(0>c)throw"dicomParser.readFixedString - length cannot be less than 0";if(b+c>a.length)throw"dicomParser.readFixedString: attempt to read past end of buffer";for(var d,e="",f=0;c>f;f++){if(d=a[b+f],0===d)return b+=c,e;e+=String.fromCharCode(d)}return e},a}(a),a=function(a){"use strict";return void 0===a&&(a={}),a.ByteStream=function(a,b,c){if(void 0===a)throw"dicomParser.ByteStream: missing required parameter 'byteArrayParser'";if(void 0===b)throw"dicomParser.ByteStream: missing required parameter 'byteArray'";if(b instanceof Uint8Array==!1&&b instanceof Buffer==!1)throw"dicomParser.ByteStream: parameter byteArray is not of type Uint8Array or Buffer";if(0>c)throw"dicomParser.ByteStream: parameter 'position' cannot be less than 0";if(c>=b.length)throw"dicomParser.ByteStream: parameter 'position' cannot be greater than or equal to 'byteArray' length";this.byteArrayParser=a,this.byteArray=b,this.position=c?c:0,this.warnings=[]},a.ByteStream.prototype.seek=function(a){if(this.position+a<0)throw"dicomParser.ByteStream.prototype.seek: cannot seek to position < 0";this.position+=a},a.ByteStream.prototype.readByteStream=function(b){if(this.position+b>this.byteArray.length)throw"dicomParser.ByteStream.prototype.readByteStream: readByteStream - buffer overread";var c=a.sharedCopy(this.byteArray,this.position,b);return this.position+=b,new a.ByteStream(this.byteArrayParser,c)},a.ByteStream.prototype.readUint16=function(){var a=this.byteArrayParser.readUint16(this.byteArray,this.position);return this.position+=2,a},a.ByteStream.prototype.readUint32=function(){var a=this.byteArrayParser.readUint32(this.byteArray,this.position);return this.position+=4,a},a.ByteStream.prototype.readFixedString=function(b){var c=a.readFixedString(this.byteArray,this.position,b);return this.position+=b,c},a}(a),a=function(a){"use strict";function b(a,b){return void 0!==a.parser?a.parser:b}return void 0===a&&(a={}),a.DataSet=function(a,b,c){this.byteArrayParser=a,this.byteArray=b,this.elements=c},a.DataSet.prototype.uint16=function(a,c){var d=this.elements[a];return c=void 0!==c?c:0,d&&0!==d.length?b(d,this.byteArrayParser).readUint16(this.byteArray,d.dataOffset+2*c):void 0},a.DataSet.prototype.int16=function(a,c){var d=this.elements[a];return c=void 0!==c?c:0,d&&0!==d.length?b(d,this.byteArrayParser).readInt16(this.byteArray,d.dataOffset+2*c):void 0},a.DataSet.prototype.uint32=function(a,c){var d=this.elements[a];return c=void 0!==c?c:0,d&&0!==d.length?b(d,this.byteArrayParser).readUint32(this.byteArray,d.dataOffset+4*c):void 0},a.DataSet.prototype.int32=function(a,c){var d=this.elements[a];return c=void 0!==c?c:0,d&&0!==d.length?b(d,this.byteArrayParser).readInt32(this.byteArray,d.dataOffset+4*c):void 0},a.DataSet.prototype["float"]=function(a,c){var d=this.elements[a];return c=void 0!==c?c:0,d&&0!==d.length?b(d,this.byteArrayParser).readFloat(this.byteArray,d.dataOffset+4*c):void 0},a.DataSet.prototype["double"]=function(a,c){var d=this.elements[a];return c=void 0!==c?c:0,d&&0!==d.length?b(d,this.byteArrayParser).readDouble(this.byteArray,d.dataOffset+8*c):void 0},a.DataSet.prototype.numStringValues=function(b){var c=this.elements[b];if(c&&c.length>0){var d=a.readFixedString(this.byteArray,c.dataOffset,c.length),e=d.match(/\\/g);return null===e?1:e.length+1}},a.DataSet.prototype.string=function(b,c){var d=this.elements[b];if(d&&d.length>0){var e=a.readFixedString(this.byteArray,d.dataOffset,d.length);if(c>=0){var f=e.split("\\");return f[c].trim()}return e.trim()}},a.DataSet.prototype.text=function(b,c){var d=this.elements[b];if(d&&d.length>0){var e=a.readFixedString(this.byteArray,d.dataOffset,d.length);if(c>=0){var f=e.split("\\");return f[c].replace(/ +$/,"")}return e.replace(/ +$/,"")}},a.DataSet.prototype.floatString=function(a,b){var c=this.elements[a];if(c&&c.length>0){b=void 0!==b?b:0;var d=this.string(a,b);if(void 0!==d)return parseFloat(d)}},a.DataSet.prototype.intString=function(a,b){var c=this.elements[a];if(c&&c.length>0){b=void 0!==b?b:0;var d=this.string(a,b);if(void 0!==d)return parseInt(d)}},a}(a),a=function(a){"use strict";return void 0===a&&(a={}),a.findEndOfEncapsulatedElement=function(b,c,d){if(void 0===b)throw"dicomParser.findEndOfEncapsulatedElement: missing required parameter 'byteStream'";if(void 0===c)throw"dicomParser.findEndOfEncapsulatedElement: missing required parameter 'element'";c.encapsulatedPixelData=!0,c.basicOffsetTable=[],c.fragments=[];var e=a.readTag(b);if("xfffee000"!==e)throw"dicomParser.findEndOfEncapsulatedElement: basic offset table not found";for(var f=b.readUint32(),g=f/4,h=0;g>h;h++){var i=b.readUint32();c.basicOffsetTable.push(i)}for(var j=b.position;b.position<b.byteArray.length;){var k=a.readTag(b),l=b.readUint32();if("xfffee0dd"===k)return b.seek(l),void(c.length=b.position-c.dataOffset);if("xfffee000"!==k)return d&&d.push("unexpected tag "+k+" while searching for end of pixel data element with undefined length"),l>b.byteArray.length-b.position&&(l=b.byteArray.length-b.position),c.fragments.push({offset:b.position-j-8,position:b.position,length:l}),b.seek(l),void(c.length=b.position-c.dataOffset);c.fragments.push({offset:b.position-j-8,position:b.position,length:l}),b.seek(l)}d&&d.push("pixel data element "+c.tag+" missing sequence delimiter tag xfffee0dd")},a}(a),a=function(a){"use strict";return void 0===a&&(a={}),a.findItemDelimitationItemAndSetElementLength=function(a,b){if(void 0===a)throw"dicomParser.readDicomElementImplicit: missing required parameter 'byteStream'";for(var c=8,d=a.byteArray.length-c;a.position<=d;){var e=a.readUint16();if(65534===e){var f=a.readUint16();if(57357===f){var g=a.readUint32();return 0!==g&&a.warnings("encountered non zero length following item delimiter at position"+a.position-4+" while reading element of undefined length with tag ' + element.tag"),void(b.length=a.position-b.dataOffset)}}}b.length=a.byteArray.length-b.dataOffset,a.seek(a.byteArray.length-a.position)},a}(a),a=function(a){"use strict";return void 0===a&&(a={}),a.littleEndianByteArrayParser={readUint16:function(a,b){if(0>b)throw"littleEndianByteArrayParser.readUint16: position cannot be less than 0";if(b+2>a.length)throw"littleEndianByteArrayParser.readUint16: attempt to read past end of buffer";return a[b]+256*a[b+1]},readInt16:function(a,b){if(0>b)throw"littleEndianByteArrayParser.readInt16: position cannot be less than 0";if(b+2>a.length)throw"littleEndianByteArrayParser.readInt16: attempt to read past end of buffer";var c=a[b]+(a[b+1]<<8);return 32768&c&&(c=c-65535-1),c},readUint32:function(a,b){if(0>b)throw"littleEndianByteArrayParser.readUint32: position cannot be less than 0";if(b+4>a.length)throw"littleEndianByteArrayParser.readUint32: attempt to read past end of buffer";var c=a[b]+256*a[b+1]+256*a[b+2]*256+256*a[b+3]*256*256;return c},readInt32:function(a,b){if(0>b)throw"littleEndianByteArrayParser.readInt32: position cannot be less than 0";if(b+4>a.length)throw"littleEndianByteArrayParser.readInt32: attempt to read past end of buffer";var c=a[b]+(a[b+1]<<8)+(a[b+2]<<16)+(a[b+3]<<24);return c},readFloat:function(a,b){if(0>b)throw"littleEndianByteArrayParser.readFloat: position cannot be less than 0";if(b+4>a.length)throw"littleEndianByteArrayParser.readFloat: attempt to read past end of buffer";var c=new Uint8Array(4);c[0]=a[b],c[1]=a[b+1],c[2]=a[b+2],c[3]=a[b+3];var d=new Float32Array(c.buffer);return d[0]},readDouble:function(a,b){if(0>b)throw"littleEndianByteArrayParser.readDouble: position cannot be less than 0";if(b+8>a.length)throw"littleEndianByteArrayParser.readDouble: attempt to read past end of buffer";var c=new Uint8Array(8);c[0]=a[b],c[1]=a[b+1],c[2]=a[b+2],c[3]=a[b+3],c[4]=a[b+4],c[5]=a[b+5],c[6]=a[b+6],c[7]=a[b+7];var d=new Float64Array(c.buffer);return d[0]}},a}(a),a=function(a){"use strict";return void 0===a&&(a={}),a.parseDicomDataSetExplicit=function(b,c,d,e){if(d=void 0===d?c.byteArray.length:d,e=e||{},void 0===c)throw"dicomParser.parseDicomDataSetExplicit: missing required parameter 'byteStream'";if(d<c.position||d>c.byteArray.length)throw"dicomParser.parseDicomDataSetExplicit: invalid value for parameter 'maxPosition'";for(var f=b.elements;c.position<d;){var g=a.readDicomElementExplicit(c,b.warnings,e.untilTag);if(f[g.tag]=g,g.tag===e.untilTag)return}if(c.position>d)throw"dicomParser:parseDicomDataSetExplicit: buffer overrun"},a.parseDicomDataSetImplicit=function(b,c,d,e){if(d=void 0===d?b.byteArray.length:d,e=e||{},void 0===c)throw"dicomParser.parseDicomDataSetImplicit: missing required parameter 'byteStream'";if(d<c.position||d>c.byteArray.length)throw"dicomParser.parseDicomDataSetImplicit: invalid value for parameter 'maxPosition'";for(var f=b.elements;c.position<d;){var g=a.readDicomElementImplicit(c,e.untilTag,e.vrCallback);if(f[g.tag]=g,g.tag===e.untilTag)return}},a}(a),a=function(a){"use strict";function b(a){return"OB"===a||"OW"===a||"SQ"===a||"OF"===a||"UT"===a||"UN"===a?4:2}return void 0===a&&(a={}),a.readDicomElementExplicit=function(c,d,e){if(void 0===c)throw"dicomParser.readDicomElementExplicit: missing required parameter 'byteStream'";var f={tag:a.readTag(c),vr:c.readFixedString(2)},g=b(f.vr);return 2===g?(f.length=c.readUint16(),f.dataOffset=c.position):(c.seek(2),f.length=c.readUint32(),f.dataOffset=c.position),4294967295===f.length&&(f.hadUndefinedLength=!0),f.tag===e?f:"SQ"===f.vr?(a.readSequenceItemsExplicit(c,f,d),f):4294967295===f.length?"x7fe00010"===f.tag?(a.findEndOfEncapsulatedElement(c,f,d),f):(a.findItemDelimitationItemAndSetElementLength(c,f),f):(c.seek(f.length),f)},a}(a),a=function(a){"use strict";function b(b,c,d){if("undefined"!=typeof d)return"SQ"===d(b.tag);if(c.position+4<=c.byteArray.length){var e=a.readTag(c);return c.seek(-4),"xfffee000"===e||"xfffee0dd"===e}return c.warnings.push("eof encountered before finding sequence item tag or sequence delimiter tag in peeking to determine VR"),!1}return void 0===a&&(a={}),a.readDicomElementImplicit=function(c,d,e){if(void 0===c)throw"dicomParser.readDicomElementImplicit: missing required parameter 'byteStream'";var f={tag:a.readTag(c),length:c.readUint32(),dataOffset:c.position};return 4294967295===f.length&&(f.hadUndefinedLength=!0),f.tag===d?f:b(f,c,e)?(a.readSequenceItemsImplicit(c,f),f):f.hadUndefinedLength?(a.findItemDelimitationItemAndSetElementLength(c,f),f):(c.seek(f.length),f)},a}(a),a=function(a){"use strict";function b(a,b){for(var c=0;c<a.length;c++)if(a[c].offset===b)return c}function c(a,b,c,d,e,f){if(c===d.length-1)return e.length-f;for(var g=d[c+1],h=f+1;h<e.length;h++)if(e[h].offset===g)return h-f;throw"dicomParser.calculateNumberOfFragments: could not find fragment with offset matching basic offset table"}return void 0===a&&(a={}),a.readEncapsulatedImageFrame=function(d,e,f,g,h){if(g=g||e.basicOffsetTable,h=e.fragments,void 0===d)throw"dicomParser.readEncapsulatedImageFrame: missing required parameter 'dataSet'";if(void 0===e)throw"dicomParser.readEncapsulatedImageFrame: missing required parameter 'pixelDataElement'";if(void 0===f)throw"dicomParser.readEncapsulatedImageFrame: missing required parameter 'frame'";if(void 0===g)throw"dicomParser.readEncapsulatedImageFrame: parameter 'pixelDataElement' does not have basicOffsetTable";if("x7fe00010"!==e.tag)throw"dicomParser.readEncapsulatedImageFrame: parameter 'pixelDataElement' refers to non pixel data tag (expected tag = x7fe00010'";if(e.encapsulatedPixelData!==!0)throw"dicomParser.readEncapsulatedImageFrame: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";if(e.hadUndefinedLength!==!0)throw"dicomParser.readEncapsulatedImageFrame: parameter 'pixelDataElement' refers to pixel data element that does not have undefined length";if(void 0===e.fragments)throw"dicomParser.readEncapsulatedImageFrame: parameter 'pixelDataElement' refers to pixel data element that does not have fragments";if(0===g.length)throw"dicomParser.readEncapsulatedImageFrame: basicOffsetTable has zero entries";if(0>f)throw"dicomParser.readEncapsulatedImageFrame: parameter 'frame' must be >= 0";if(f>=g.length)throw"dicomParser.readEncapsulatedImageFrame: parameter 'frame' must be < basicOffsetTable.length";var i=g[f],j=b(h,i);if(void 0===j)throw"dicomParser.readEncapsulatedImageFrame: unable to find fragment that matches basic offset table entry";var k=c(d,e,f,g,h,j);return a.readEncapsulatedPixelDataFromFragments(d,e,j,k,h)},a}(a),a=function(a){"use strict";function b(a,b,c){for(var d=0,e=b;b+c>e;e++)d+=a[e].length;return d}return void 0===a&&(a={}),a.readEncapsulatedPixelDataFromFragments=function(c,d,e,f,g){if(f=f||1,g=g||d.fragments,void 0===c)throw"dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter 'dataSet'";if(void 0===d)throw"dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter 'pixelDataElement'";if(void 0===e)throw"dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter 'startFragmentIndex'";if(void 0===f)throw"dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter 'numFragments'";if("x7fe00010"!==d.tag)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to non pixel data tag (expected tag = x7fe00010'";if(d.encapsulatedPixelData!==!0)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";if(d.hadUndefinedLength!==!0)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";if(void 0===d.basicOffsetTable)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";if(void 0===d.fragments)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";if(d.fragments.length<=0)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";if(0>e)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'startFragmentIndex' must be >= 0";if(e>=d.fragments.length)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'startFragmentIndex' must be < number of fragments";if(1>f)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'numFragments' must be > 0";if(e+f>d.fragments.length)throw"dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'startFragment' + 'numFragments' < number of fragments";var h=new a.ByteStream(c.byteArrayParser,c.byteArray,d.dataOffset),i=a.readSequenceItem(h);if("xfffee000"!==i.tag)throw"dicomParser.readEncapsulatedPixelData: missing basic offset table xfffee000";h.seek(i.length);var j=h.position,k=8;if(1===f)return a.sharedCopy(h.byteArray,j+g[e].offset+k,g[e].length);for(var l=b(g,e,f),m=a.alloc(h.byteArray,l),n=0,o=e;e+f>o;o++)for(var p=j+g[o].offset+k,q=0;q<g[o].length;q++)m[n++]=h.byteArray[p++];return m},a}(a),a=function(a){return void 0===a&&(a={}),a.readPart10Header=function(b,c){function d(){f.seek(128);var a=f.readFixedString(4);if("DICM"!==a)throw"dicomParser.readPart10Header: DICM prefix not found at location 132 - this is not a valid DICOM P10 file."}function e(){d();for(var b=[],c={};f.position<f.byteArray.length;){var e=f.position,g=a.readDicomElementExplicit(f,b);if(g.tag>"x0002ffff"){f.position=e;break}g.parser=a.littleEndianByteArrayParser,c[g.tag]=g}var h=new a.DataSet(f.byteArrayParser,f.byteArray,c);return h.warnings=f.warnings,h.position=f.position,h}if(void 0===b)throw"dicomParser.readPart10Header: missing required parameter 'byteArray'";var f=new a.ByteStream(a.littleEndianByteArrayParser,b);return e()},a}(a),a=function(a){"use strict";function b(b,c){for(var d={};b.position<b.byteArray.length;){var e=a.readDicomElementExplicit(b,c);if(d[e.tag]=e,"xfffee00d"===e.tag)return new a.DataSet(b.byteArrayParser,b.byteArray,d)}return c.push("eof encountered before finding item delimiter tag while reading sequence item of undefined length"),new a.DataSet(b.byteArrayParser,b.byteArray,d)}function c(c,d){var e=a.readSequenceItem(c);return 4294967295===e.length?(e.hadUndefinedLength=!0,e.dataSet=b(c,d),e.length=c.position-e.dataOffset):(e.dataSet=new a.DataSet(c.byteArrayParser,c.byteArray,{}),a.parseDicomDataSetExplicit(e.dataSet,c,c.position+e.length)),e}function d(b,d,e){for(;b.position+4<=b.byteArray.length;){var f=a.readTag(b);if(b.seek(-4),"xfffee0dd"===f)return d.length=b.position-d.dataOffset,b.seek(8),d;var g=c(b,e);d.items.push(g)}e.push("eof encountered before finding sequence delimitation tag while reading sequence of undefined length"),d.length=b.position-d.dataOffset}function e(a,b,d){for(var e=b.dataOffset+b.length;a.position<e;){var f=c(a,d);b.items.push(f)}}return void 0===a&&(a={}),a.readSequenceItemsExplicit=function(a,b,c){if(void 0===a)throw"dicomParser.readSequenceItemsExplicit: missing required parameter 'byteStream'";if(void 0===b)throw"dicomParser.readSequenceItemsExplicit: missing required parameter 'element'";b.items=[],4294967295===b.length?d(a,b,c):e(a,b,c)},a}(a),a=function(a){"use strict";function b(b,c){for(var d={};b.position<b.byteArray.length;){var e=a.readDicomElementImplicit(b,void 0,c);if(d[e.tag]=e,"xfffee00d"===e.tag)return new a.DataSet(b.byteArrayParser,b.byteArray,d)}return b.warnings.push("eof encountered before finding sequence item delimiter in sequence item of undefined length"),new a.DataSet(b.byteArrayParser,b.byteArray,d)}function c(c,d){var e=a.readSequenceItem(c);return 4294967295===e.length?(e.hadUndefinedLength=!0,e.dataSet=b(c,d),e.length=c.position-e.dataOffset):(e.dataSet=new a.DataSet(c.byteArrayParser,c.byteArray,{}),a.parseDicomDataSetImplicit(e.dataSet,c,c.position+e.length,{vrCallback:d})),e}function d(b,d,e){for(;b.position+4<=b.byteArray.length;){var f=a.readTag(b);if(b.seek(-4),"xfffee0dd"===f)return d.length=b.position-d.dataOffset,b.seek(8),d;var g=c(b,e);d.items.push(g)}b.warnings.push("eof encountered before finding sequence delimiter in sequence of undefined length"),d.length=b.byteArray.length-d.dataOffset}function e(a,b,d){for(var e=b.dataOffset+b.length;a.position<e;){var f=c(a,d);b.items.push(f)}}return void 0===a&&(a={}),a.readSequenceItemsImplicit=function(a,b,c){if(void 0===a)throw"dicomParser.readSequenceItemsImplicit: missing required parameter 'byteStream'";if(void 0===b)throw"dicomParser.readSequenceItemsImplicit: missing required parameter 'element'";b.items=[],4294967295===b.length?d(a,b,c):e(a,b,c)},a}(a),a=function(a){"use strict";return void 0===a&&(a={}),a.readSequenceItem=function(b){if(void 0===b)throw"dicomParser.readSequenceItem: missing required parameter 'byteStream'";var c={tag:a.readTag(b),length:b.readUint32(),dataOffset:b.position};if("xfffee000"!==c.tag){var d=b.position;throw"dicomParser.readSequenceItem: item tag (FFFE,E000) not found at offset "+d}return c},a}(a),a=function(a){"use strict";return void 0===a&&(a={}),a.readTag=function(a){if(void 0===a)throw"dicomParser.readTag: missing required parameter 'byteStream'";var b=256*a.readUint16()*256,c=a.readUint16(),d="x"+("00000000"+(b+c).toString(16)).substr(-8);return d},a}(a),a=function(a){"use strict";return void 0===a&&(a={}),a.sharedCopy=function(a,b,c){if("undefined"!=typeof Buffer&&a instanceof Buffer)return a.slice(b,b+c);if(a instanceof Uint8Array)return new Uint8Array(a.buffer,a.byteOffset+b,c);throw"dicomParser.from: unknown type for byteArray"},a}(a),a=function(a){"use strict";return void 0===a&&(a={}),a.version="1.6.1",a}(a);return a});
}).call(this,require("buffer").Buffer)
},{"buffer":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/buffer/index.js","zlib":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/browserify-zlib/src/index.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/lib/libCharLS.js":[function(require,module,exports){
(function (process,__dirname){
var CharLS;
module.exports = CharLS = function(Module) {
  Module = Module || {};

var Module;if(!Module)Module=(typeof CharLS!=="undefined"?CharLS:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=typeof window==="object";var ENVIRONMENT_IS_WORKER=typeof importScripts==="function";var ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof require==="function"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!Module["print"])Module["print"]=function print(x){process["stdout"].write(x+"\n")};if(!Module["printErr"])Module["printErr"]=function printErr(x){process["stderr"].write(x+"\n")};var nodeFS=require("fs");var nodePath=require("path");Module["read"]=function read(filename,binary){filename=nodePath["normalize"](filename);var ret=nodeFS["readFileSync"](filename);if(!ret&&filename!=nodePath["resolve"](filename)){filename=path.join(__dirname,"..","src",filename);ret=nodeFS["readFileSync"](filename)}if(ret&&!binary)ret=ret.toString();return ret};Module["readBinary"]=function readBinary(filename){var ret=Module["read"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};Module["load"]=function load(f){globalEval(read(f))};if(!Module["thisProgram"]){if(process["argv"].length>1){Module["thisProgram"]=process["argv"][1].replace(/\\/g,"/")}else{Module["thisProgram"]="unknown-program"}}Module["arguments"]=process["argv"].slice(2);if(typeof module!=="undefined"){module["exports"]=Module}process["on"]("uncaughtException",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));Module["inspect"]=(function(){return"[Emscripten Module object]"})}else if(ENVIRONMENT_IS_SHELL){if(!Module["print"])Module["print"]=print;if(typeof printErr!="undefined")Module["printErr"]=printErr;if(typeof read!="undefined"){Module["read"]=read}else{Module["read"]=function read(){throw"no read() available (jsc?)"}}Module["readBinary"]=function readBinary(f){if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}var data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){Module["arguments"]=scriptArgs}else if(typeof arguments!="undefined"){Module["arguments"]=arguments}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){Module["read"]=function read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};if(typeof arguments!="undefined"){Module["arguments"]=arguments}if(typeof console!=="undefined"){if(!Module["print"])Module["print"]=function print(x){console.log(x)};if(!Module["printErr"])Module["printErr"]=function printErr(x){console.log(x)}}else{var TRY_USE_DUMP=false;if(!Module["print"])Module["print"]=TRY_USE_DUMP&&typeof dump!=="undefined"?(function(x){dump(x)}):(function(x){})}if(ENVIRONMENT_IS_WORKER){Module["load"]=importScripts}if(typeof Module["setWindowTitle"]==="undefined"){Module["setWindowTitle"]=(function(title){document.title=title})}}else{throw"Unknown runtime environment. Where are we?"}function globalEval(x){eval.call(null,x)}if(!Module["load"]&&Module["read"]){Module["load"]=function load(f){globalEval(Module["read"](f))}}if(!Module["print"]){Module["print"]=(function(){})}if(!Module["printErr"]){Module["printErr"]=Module["print"]}if(!Module["arguments"]){Module["arguments"]=[]}if(!Module["thisProgram"]){Module["thisProgram"]="./this.program"}Module.print=Module["print"];Module.printErr=Module["printErr"];Module["preRun"]=[];Module["postRun"]=[];for(var key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}var Runtime={setTempRet0:(function(value){tempRet0=value}),getTempRet0:(function(){return tempRet0}),stackSave:(function(){return STACKTOP}),stackRestore:(function(stackTop){STACKTOP=stackTop}),getNativeTypeSize:(function(type){switch(type){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:{if(type[type.length-1]==="*"){return Runtime.QUANTUM_SIZE}else if(type[0]==="i"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}),getNativeFieldSize:(function(type){return Math.max(Runtime.getNativeTypeSize(type),Runtime.QUANTUM_SIZE)}),STACK_ALIGN:16,prepVararg:(function(ptr,type){if(type==="double"||type==="i64"){if(ptr&7){assert((ptr&7)===4);ptr+=4}}else{assert((ptr&3)===0)}return ptr}),getAlignSize:(function(type,size,vararg){if(!vararg&&(type=="i64"||type=="double"))return 8;if(!type)return Math.min(size,8);return Math.min(size||(type?Runtime.getNativeFieldSize(type):0),Runtime.QUANTUM_SIZE)}),dynCall:(function(sig,ptr,args){if(args&&args.length){if(!args.splice)args=Array.prototype.slice.call(args);args.splice(0,0,ptr);return Module["dynCall_"+sig].apply(null,args)}else{return Module["dynCall_"+sig].call(null,ptr)}}),functionPointers:[],addFunction:(function(func){for(var i=0;i<Runtime.functionPointers.length;i++){if(!Runtime.functionPointers[i]){Runtime.functionPointers[i]=func;return 2*(1+i)}}throw"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS."}),removeFunction:(function(index){Runtime.functionPointers[(index-2)/2]=null}),warnOnce:(function(text){if(!Runtime.warnOnce.shown)Runtime.warnOnce.shown={};if(!Runtime.warnOnce.shown[text]){Runtime.warnOnce.shown[text]=1;Module.printErr(text)}}),funcWrappers:{},getFuncWrapper:(function(func,sig){assert(sig);if(!Runtime.funcWrappers[sig]){Runtime.funcWrappers[sig]={}}var sigCache=Runtime.funcWrappers[sig];if(!sigCache[func]){sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func,arguments)}}return sigCache[func]}),getCompilerSetting:(function(name){throw"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work"}),stackAlloc:(function(size){var ret=STACKTOP;STACKTOP=STACKTOP+size|0;STACKTOP=STACKTOP+15&-16;return ret}),staticAlloc:(function(size){var ret=STATICTOP;STATICTOP=STATICTOP+size|0;STATICTOP=STATICTOP+15&-16;return ret}),dynamicAlloc:(function(size){var ret=DYNAMICTOP;DYNAMICTOP=DYNAMICTOP+size|0;DYNAMICTOP=DYNAMICTOP+15&-16;if(DYNAMICTOP>=TOTAL_MEMORY){var success=enlargeMemory();if(!success){DYNAMICTOP=ret;return 0}}return ret}),alignMemory:(function(size,quantum){var ret=size=Math.ceil(size/(quantum?quantum:16))*(quantum?quantum:16);return ret}),makeBigInt:(function(low,high,unsigned){var ret=unsigned?+(low>>>0)+ +(high>>>0)*+4294967296:+(low>>>0)+ +(high|0)*+4294967296;return ret}),GLOBAL_BASE:8,QUANTUM_SIZE:4,__dummy__:0};Module["Runtime"]=Runtime;var __THREW__=0;var ABORT=false;var EXITSTATUS=0;var undef=0;var tempValue,tempInt,tempBigInt,tempInt2,tempBigInt2,tempPair,tempBigIntI,tempBigIntR,tempBigIntS,tempBigIntP,tempBigIntD,tempDouble,tempFloat;var tempI64,tempI64b;var tempRet0,tempRet1,tempRet2,tempRet3,tempRet4,tempRet5,tempRet6,tempRet7,tempRet8,tempRet9;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}var globalScope=this;function getCFunc(ident){var func=Module["_"+ident];if(!func){try{func=eval("_"+ident)}catch(e){}}assert(func,"Cannot call unknown function "+ident+" (perhaps LLVM optimizations or closure removed it?)");return func}var cwrap,ccall;((function(){var JSfuncs={"stackSave":(function(){Runtime.stackSave()}),"stackRestore":(function(){Runtime.stackRestore()}),"arrayToC":(function(arr){var ret=Runtime.stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),"stringToC":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){ret=Runtime.stackAlloc((str.length<<2)+1);writeStringToMemory(str,ret)}return ret})};var toC={"string":JSfuncs["stringToC"],"array":JSfuncs["arrayToC"]};ccall=function ccallFunc(ident,returnType,argTypes,args,opts){var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=Runtime.stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);if(returnType==="string")ret=Pointer_stringify(ret);if(stack!==0){if(opts&&opts.async){EmterpreterAsync.asyncFinalizers.push((function(){Runtime.stackRestore(stack)}));return}Runtime.stackRestore(stack)}return ret};var sourceRegex=/^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;function parseJSFunc(jsfunc){var parsed=jsfunc.toString().match(sourceRegex).slice(1);return{arguments:parsed[0],body:parsed[1],returnValue:parsed[2]}}var JSsource={};for(var fun in JSfuncs){if(JSfuncs.hasOwnProperty(fun)){JSsource[fun]=parseJSFunc(JSfuncs[fun])}}cwrap=function cwrap(ident,returnType,argTypes){argTypes=argTypes||[];var cfunc=getCFunc(ident);var numericArgs=argTypes.every((function(type){return type==="number"}));var numericRet=returnType!=="string";if(numericRet&&numericArgs){return cfunc}var argNames=argTypes.map((function(x,i){return"$"+i}));var funcstr="(function("+argNames.join(",")+") {";var nargs=argTypes.length;if(!numericArgs){funcstr+="var stack = "+JSsource["stackSave"].body+";";for(var i=0;i<nargs;i++){var arg=argNames[i],type=argTypes[i];if(type==="number")continue;var convertCode=JSsource[type+"ToC"];funcstr+="var "+convertCode.arguments+" = "+arg+";";funcstr+=convertCode.body+";";funcstr+=arg+"="+convertCode.returnValue+";"}}var cfuncname=parseJSFunc((function(){return cfunc})).returnValue;funcstr+="var ret = "+cfuncname+"("+argNames.join(",")+");";if(!numericRet){var strgfy=parseJSFunc((function(){return Pointer_stringify})).returnValue;funcstr+="ret = "+strgfy+"(ret);"}if(!numericArgs){funcstr+=JSsource["stackRestore"].body.replace("()","(stack)")+";"}funcstr+="return ret})";return eval(funcstr)}}))();Module["ccall"]=ccall;Module["cwrap"]=cwrap;function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=+1?tempDouble>+0?(Math_min(+Math_floor(tempDouble/+4294967296),+4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/+4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}Module["setValue"]=setValue;function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for setValue: "+type)}return null}Module["getValue"]=getValue;var ALLOC_NORMAL=0;var ALLOC_STACK=1;var ALLOC_STATIC=2;var ALLOC_DYNAMIC=3;var ALLOC_NONE=4;Module["ALLOC_NORMAL"]=ALLOC_NORMAL;Module["ALLOC_STACK"]=ALLOC_STACK;Module["ALLOC_STATIC"]=ALLOC_STATIC;Module["ALLOC_DYNAMIC"]=ALLOC_DYNAMIC;Module["ALLOC_NONE"]=ALLOC_NONE;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab==="number"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types==="string"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[_malloc,Runtime.stackAlloc,Runtime.staticAlloc,Runtime.dynamicAlloc][allocator===undefined?ALLOC_STATIC:allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var ptr=ret,stop;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType==="i8"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];if(typeof curr==="function"){curr=Runtime.getFunctionIndex(curr)}type=singleType||types[i];if(type===0){i++;continue}if(type=="i64")type="i32";setValue(ret+i,curr,type);if(previousType!==type){typeSize=Runtime.getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}Module["allocate"]=allocate;function getMemory(size){if(!staticSealed)return Runtime.staticAlloc(size);if(typeof _sbrk!=="undefined"&&!_sbrk.called||!runtimeInitialized)return Runtime.dynamicAlloc(size);return _malloc(size)}Module["getMemory"]=getMemory;function Pointer_stringify(ptr,length){if(length===0||!ptr)return"";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret="";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return Module["UTF8ToString"](ptr)}Module["Pointer_stringify"]=Pointer_stringify;function AsciiToString(ptr){var str="";while(1){var ch=HEAP8[ptr++>>0];if(!ch)return str;str+=String.fromCharCode(ch)}}Module["AsciiToString"]=AsciiToString;function stringToAscii(str,outPtr){return writeAsciiToMemory(str,outPtr,false)}Module["stringToAscii"]=stringToAscii;function UTF8ArrayToString(u8Array,idx){var u0,u1,u2,u3,u4,u5;var str="";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}Module["UTF8ArrayToString"]=UTF8ArrayToString;function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}Module["UTF8ToString"]=UTF8ToString;function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}Module["stringToUTF8Array"]=stringToUTF8Array;function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}Module["stringToUTF8"]=stringToUTF8;function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){++len}else if(u<=2047){len+=2}else if(u<=65535){len+=3}else if(u<=2097151){len+=4}else if(u<=67108863){len+=5}else{len+=6}}return len}Module["lengthBytesUTF8"]=lengthBytesUTF8;function UTF16ToString(ptr){var i=0;var str="";while(1){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)return str;++i;str+=String.fromCharCode(codeUnit)}}Module["UTF16ToString"]=UTF16ToString;function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr}Module["stringToUTF16"]=stringToUTF16;function lengthBytesUTF16(str){return str.length*2}Module["lengthBytesUTF16"]=lengthBytesUTF16;function UTF32ToString(ptr){var i=0;var str="";while(1){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)return str;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}}Module["UTF32ToString"]=UTF32ToString;function stringToUTF32(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr}Module["stringToUTF32"]=stringToUTF32;function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len}Module["lengthBytesUTF32"]=lengthBytesUTF32;function demangle(func){var hasLibcxxabi=!!Module["___cxa_demangle"];if(hasLibcxxabi){try{var buf=_malloc(func.length);writeStringToMemory(func.substr(1),buf);var status=_malloc(4);var ret=Module["___cxa_demangle"](buf,0,0,status);if(getValue(status,"i32")===0&&ret){return Pointer_stringify(ret)}}catch(e){}finally{if(buf)_free(buf);if(status)_free(status);if(ret)_free(ret)}}var i=3;var basicTypes={"v":"void","b":"bool","c":"char","s":"short","i":"int","l":"long","f":"float","d":"double","w":"wchar_t","a":"signed char","h":"unsigned char","t":"unsigned short","j":"unsigned int","m":"unsigned long","x":"long long","y":"unsigned long long","z":"..."};var subs=[];var first=true;function dump(x){if(x)Module.print(x);Module.print(func);var pre="";for(var a=0;a<i;a++)pre+=" ";Module.print(pre+"^")}function parseNested(){i++;if(func[i]==="K")i++;var parts=[];while(func[i]!=="E"){if(func[i]==="S"){i++;var next=func.indexOf("_",i);var num=func.substring(i,next)||0;parts.push(subs[num]||"?");i=next+1;continue}if(func[i]==="C"){parts.push(parts[parts.length-1]);i+=2;continue}var size=parseInt(func.substr(i));var pre=size.toString().length;if(!size||!pre){i--;break}var curr=func.substr(i+pre,size);parts.push(curr);subs.push(curr);i+=pre+size}i++;return parts}function parse(rawList,limit,allowVoid){limit=limit||Infinity;var ret="",list=[];function flushList(){return"("+list.join(", ")+")"}var name;if(func[i]==="N"){name=parseNested().join("::");limit--;if(limit===0)return rawList?[name]:name}else{if(func[i]==="K"||first&&func[i]==="L")i++;var size=parseInt(func.substr(i));if(size){var pre=size.toString().length;name=func.substr(i+pre,size);i+=pre+size}}first=false;if(func[i]==="I"){i++;var iList=parse(true);var iRet=parse(true,1,true);ret+=iRet[0]+" "+name+"<"+iList.join(", ")+">"}else{ret=name}paramLoop:while(i<func.length&&limit-->0){var c=func[i++];if(c in basicTypes){list.push(basicTypes[c])}else{switch(c){case"P":list.push(parse(true,1,true)[0]+"*");break;case"R":list.push(parse(true,1,true)[0]+"&");break;case"L":{i++;var end=func.indexOf("E",i);var size=end-i;list.push(func.substr(i,size));i+=size+2;break};case"A":{var size=parseInt(func.substr(i));i+=size.toString().length;if(func[i]!=="_")throw"?";i++;list.push(parse(true,1,true)[0]+" ["+size+"]");break};case"E":break paramLoop;default:ret+="?"+c;break paramLoop}}}if(!allowVoid&&list.length===1&&list[0]==="void")list=[];if(rawList){if(ret){list.push(ret+"?")}return list}else{return ret+flushList()}}var parsed=func;try{if(func=="Object._main"||func=="_main"){return"main()"}if(typeof func==="number")func=Pointer_stringify(func);if(func[0]!=="_")return func;if(func[1]!=="_")return func;if(func[2]!=="Z")return func;switch(func[3]){case"n":return"operator new()";case"d":return"operator delete()"}parsed=parse()}catch(e){parsed+="?"}if(parsed.indexOf("?")>=0&&!hasLibcxxabi){Runtime.warnOnce("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling")}return parsed}function demangleAll(text){return text.replace(/__Z[\w\d_]+/g,(function(x){var y=demangle(x);return x===y?x:x+" ["+y+"]"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return"(no stack trace available)"}}return err.stack.toString()}function stackTrace(){return demangleAll(jsStackTrace())}Module["stackTrace"]=stackTrace;var PAGE_SIZE=4096;function alignMemoryPage(x){if(x%4096>0){x+=4096-x%4096}return x}var HEAP;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;var STATIC_BASE=0,STATICTOP=0,staticSealed=false;var STACK_BASE=0,STACKTOP=0,STACK_MAX=0;var DYNAMIC_BASE=0,DYNAMICTOP=0;function enlargeMemory(){var OLD_TOTAL_MEMORY=TOTAL_MEMORY;var LIMIT=Math.pow(2,31);if(DYNAMICTOP>=LIMIT)return false;while(TOTAL_MEMORY<=DYNAMICTOP){if(TOTAL_MEMORY<LIMIT/2){TOTAL_MEMORY=alignMemoryPage(2*TOTAL_MEMORY)}else{var last=TOTAL_MEMORY;TOTAL_MEMORY=alignMemoryPage((3*TOTAL_MEMORY+LIMIT)/4);if(TOTAL_MEMORY<=last)return false}}TOTAL_MEMORY=Math.max(TOTAL_MEMORY,16*1024*1024);if(TOTAL_MEMORY>=LIMIT)return false;try{if(ArrayBuffer.transfer){buffer=ArrayBuffer.transfer(buffer,TOTAL_MEMORY)}else{var oldHEAP8=HEAP8;buffer=new ArrayBuffer(TOTAL_MEMORY)}}catch(e){return false}var success=_emscripten_replace_memory(buffer);if(!success)return false;Module["buffer"]=buffer;Module["HEAP8"]=HEAP8=new Int8Array(buffer);Module["HEAP16"]=HEAP16=new Int16Array(buffer);Module["HEAP32"]=HEAP32=new Int32Array(buffer);Module["HEAPU8"]=HEAPU8=new Uint8Array(buffer);Module["HEAPU16"]=HEAPU16=new Uint16Array(buffer);Module["HEAPU32"]=HEAPU32=new Uint32Array(buffer);Module["HEAPF32"]=HEAPF32=new Float32Array(buffer);Module["HEAPF64"]=HEAPF64=new Float64Array(buffer);if(!ArrayBuffer.transfer){HEAP8.set(oldHEAP8)}return true}var byteLength;try{byteLength=Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype,"byteLength").get);byteLength(new ArrayBuffer(4))}catch(e){byteLength=(function(buffer){return buffer.byteLength})}var TOTAL_STACK=Module["TOTAL_STACK"]||5242880;var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||16777216;var totalMemory=64*1024;while(totalMemory<TOTAL_MEMORY||totalMemory<2*TOTAL_STACK){if(totalMemory<16*1024*1024){totalMemory*=2}else{totalMemory+=16*1024*1024}}totalMemory=Math.max(totalMemory,16*1024*1024);if(totalMemory!==TOTAL_MEMORY){TOTAL_MEMORY=totalMemory}assert(typeof Int32Array!=="undefined"&&typeof Float64Array!=="undefined"&&!!(new Int32Array(1))["subarray"]&&!!(new Int32Array(1))["set"],"JS engine does not provide full typed array support");var buffer;buffer=new ArrayBuffer(TOTAL_MEMORY);HEAP8=new Int8Array(buffer);HEAP16=new Int16Array(buffer);HEAP32=new Int32Array(buffer);HEAPU8=new Uint8Array(buffer);HEAPU16=new Uint16Array(buffer);HEAPU32=new Uint32Array(buffer);HEAPF32=new Float32Array(buffer);HEAPF64=new Float64Array(buffer);HEAP32[0]=255;assert(HEAPU8[0]===255&&HEAPU8[3]===0,"Typed arrays 2 must be run on a little-endian system");Module["HEAP"]=HEAP;Module["buffer"]=buffer;Module["HEAP8"]=HEAP8;Module["HEAP16"]=HEAP16;Module["HEAP32"]=HEAP32;Module["HEAPU8"]=HEAPU8;Module["HEAPU16"]=HEAPU16;Module["HEAPU32"]=HEAPU32;Module["HEAPF32"]=HEAPF32;Module["HEAPF64"]=HEAPF64;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Runtime.dynCall("v",func)}else{Runtime.dynCall("vi",func,[callback.arg])}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}Module["addOnPreRun"]=addOnPreRun;function addOnInit(cb){__ATINIT__.unshift(cb)}Module["addOnInit"]=addOnInit;function addOnPreMain(cb){__ATMAIN__.unshift(cb)}Module["addOnPreMain"]=addOnPreMain;function addOnExit(cb){__ATEXIT__.unshift(cb)}Module["addOnExit"]=addOnExit;function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}Module["addOnPostRun"]=addOnPostRun;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}Module["intArrayFromString"]=intArrayFromString;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){chr&=255}ret.push(String.fromCharCode(chr))}return ret.join("")}Module["intArrayToString"]=intArrayToString;function writeStringToMemory(string,buffer,dontAddNull){var array=intArrayFromString(string,dontAddNull);var i=0;while(i<array.length){var chr=array[i];HEAP8[buffer+i>>0]=chr;i=i+1}}Module["writeStringToMemory"]=writeStringToMemory;function writeArrayToMemory(array,buffer){for(var i=0;i<array.length;i++){HEAP8[buffer++>>0]=array[i]}}Module["writeArrayToMemory"]=writeArrayToMemory;function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}Module["writeAsciiToMemory"]=writeAsciiToMemory;function unSign(value,bits,ignore){if(value>=0){return value}return bits<=32?2*Math.abs(1<<bits-1)+value:Math.pow(2,bits)+value}function reSign(value,bits,ignore){if(value<=0){return value}var half=bits<=32?Math.abs(1<<bits-1):Math.pow(2,bits-1);if(value>=half&&(bits<=32||value>half)){value=-2*half+value}return value}if(!Math["imul"]||Math["imul"](4294967295,5)!==-5)Math["imul"]=function imul(a,b){var ah=a>>>16;var al=a&65535;var bh=b>>>16;var bl=b&65535;return al*bl+(ah*bl+al*bh<<16)|0};Math.imul=Math["imul"];if(!Math["clz32"])Math["clz32"]=(function(x){x=x>>>0;for(var i=0;i<32;i++){if(x&1<<31-i)return i}return 32});Math.clz32=Math["clz32"];var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_tan=Math.tan;var Math_acos=Math.acos;var Math_asin=Math.asin;var Math_atan=Math.atan;var Math_atan2=Math.atan2;var Math_exp=Math.exp;var Math_log=Math.log;var Math_sqrt=Math.sqrt;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_pow=Math.pow;var Math_imul=Math.imul;var Math_fround=Math.fround;var Math_min=Math.min;var Math_clz32=Math.clz32;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}Module["addRunDependency"]=addRunDependency;function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["removeRunDependency"]=removeRunDependency;Module["preloadedImages"]={};Module["preloadedAudios"]={};var memoryInitializer=null;var ASM_CONSTS=[];STATIC_BASE=8;STATICTOP=STATIC_BASE+58208;__ATINIT__.push({func:(function(){__GLOBAL__I_000101()})},{func:(function(){__GLOBAL__sub_I_jpegls_cpp()})},{func:(function(){__GLOBAL__sub_I_iostream_cpp()})});allocate([0,0,0,0,0,0,0,0,128,142,0,0,34,188,0,0,32,0,0,0,0,0,0,0,88,142,0,0,94,188,0,0,128,142,0,0,108,188,0,0,32,0,0,0,0,0,0,0,128,142,0,0,168,188,0,0,32,0,0,0,0,0,0,0,128,142,0,0,228,188,0,0,232,2,0,0,0,0,0,0,128,142,0,0,38,189,0,0,40,3,0,0,0,0,0,0,128,142,0,0,108,189,0,0,32,0,0,0,0,0,0,0,128,142,0,0,148,189,0,0,32,0,0,0,0,0,0,0,128,142,0,0,188,189,0,0,32,0,0,0,0,0,0,0,128,142,0,0,228,189,0,0,32,0,0,0,0,0,0,0,128,142,0,0,13,190,0,0,32,0,0,0,0,0,0,0,128,142,0,0,38,190,0,0,32,0,0,0,0,0,0,0,128,142,0,0,66,190,0,0,32,0,0,0,0,0,0,0,128,142,0,0,106,190,0,0,32,0,0,0,0,0,0,0,128,142,0,0,146,190,0,0,32,0,0,0,0,0,0,0,128,142,0,0,186,190,0,0,32,0,0,0,0,0,0,0,128,142,0,0,245,190,0,0,24,1,0,0,0,0,0,0,88,142,0,0,227,190,0,0,128,142,0,0,38,191,0,0,24,1,0,0,0,0,0,0,128,142,0,0,97,191,0,0,24,1,0,0,0,0,0,0,128,142,0,0,156,191,0,0,24,1,0,0,0,0,0,0,128,142,0,0,210,191,0,0,24,1,0,0,0,0,0,0,128,142,0,0,8,192,0,0,24,1,0,0,0,0,0,0,128,142,0,0,61,192,0,0,24,1,0,0,0,0,0,0,128,142,0,0,124,192,0,0,24,1,0,0,0,0,0,0,128,142,0,0,193,192,0,0,152,2,0,0,0,0,0,0,128,142,0,0,104,193,0,0,176,1,0,0,0,0,0,0,88,142,0,0,117,193,0,0,128,142,0,0,130,193,0,0,176,1,0,0,0,0,0,0,88,142,0,0,148,193,0,0,128,142,0,0,161,193,0,0,176,1,0,0,0,0,0,0,128,142,0,0,173,193,0,0,200,1,0,0,0,0,0,0,128,142,0,0,206,193,0,0,224,1,0,0,0,0,0,0,128,142,0,0,20,194,0,0,224,1,0,0,0,0,0,0,128,142,0,0,240,193,0,0,0,2,0,0,0,0,0,0,128,142,0,0,54,194,0,0,240,1,0,0,0,0,0,0,128,142,0,0,91,194,0,0,240,1,0,0,0,0,0,0,128,142,0,0,174,215,0,0,240,2,0,0,0,0,0,0,128,142,0,0,237,215,0,0,240,2,0,0,0,0,0,0,128,142,0,0,5,216,0,0,232,2,0,0,0,0,0,0,128,142,0,0,30,216,0,0,232,2,0,0,0,0,0,0,88,142,0,0,54,216,0,0,128,142,0,0,79,216,0,0,184,1,0,0,0,0,0,0,88,142,0,0,102,216,0,0,128,142,0,0,127,216,0,0,152,2,0,0,0,0,0,0,128,142,0,0,153,216,0,0,136,2,0,0,0,0,0,0,88,142,0,0,179,216,0,0,128,142,0,0,197,216,0,0,192,2,0,0,0,0,0,0,128,142,0,0,239,216,0,0,192,2,0,0,0,0,0,0,88,142,0,0,25,217,0,0,88,142,0,0,74,217,0,0,168,142,0,0,123,217,0,0,0,0,0,0,1,0,0,0,200,2,0,0,3,244,255,255,168,142,0,0,170,217,0,0,0,0,0,0,1,0,0,0,216,2,0,0,3,244,255,255,168,142,0,0,217,217,0,0,0,0,0,0,1,0,0,0,200,2,0,0,3,244,255,255,168,142,0,0,8,218,0,0,0,0,0,0,1,0,0,0,216,2,0,0,3,244,255,255,128,142,0,0,55,218,0,0,160,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,142,0,0,179,218,0,0,128,2,0,0,0,0,0,0,168,142,0,0,201,218,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,144,9,0,0,2,0,0,0,168,142,0,0,219,218,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,152,9,0,0,2,0,0,0,168,142,0,0,253,218,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,152,9,0,0,2,0,0,0,168,142,0,0,32,219,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,152,9,0,0,2,0,0,0,128,142,0,0,67,219,0,0,224,3,0,0,0,0,0,0,128,142,0,0,101,219,0,0,224,3,0,0,0,0,0,0,168,142,0,0,136,219,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,152,9,0,0,2,0,0,0,128,142,0,0,170,219,0,0,112,3,0,0,0,0,0,0,128,142,0,0,192,219,0,0,112,3,0,0,0,0,0,0,128,142,0,0,212,219,0,0,112,3,0,0,0,0,0,0,168,142,0,0,232,219,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,144,9,0,0,2,0,0,0,128,142,0,0,250,219,0,0,112,3,0,0,0,0,0,0,128,142,0,0,15,220,0,0,112,3,0,0,0,0,0,0,168,142,0,0,36,220,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,160,9,0,0,0,0,0,0,168,142,0,0,104,220,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,184,9,0,0,0,0,0,0,168,142,0,0,172,220,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,208,9,0,0,0,0,0,0,168,142,0,0,240,220,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,232,9,0,0,0,0,0,0,168,142,0,0,52,221,0,0,0,0,0,0,3,0,0,0,112,3,0,0,2,0,0,0,0,10,0,0,2,0,0,0,8,10,0,0,0,8,0,0,168,142,0,0,121,221,0,0,0,0,0,0,3,0,0,0,112,3,0,0,2,0,0,0,0,10,0,0,2,0,0,0,16,10,0,0,0,8,0,0,168,142,0,0,190,221,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,24,10,0,0,0,8,0,0,168,142,0,0,3,222,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,24,10,0,0,0,8,0,0,168,142,0,0,72,222,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,32,10,0,0,2,0,0,0,168,142,0,0,100,222,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,32,10,0,0,2,0,0,0,168,142,0,0,128,222,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,32,10,0,0,2,0,0,0,168,142,0,0,156,222,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,32,10,0,0,2,0,0,0,168,142,0,0,184,222,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,40,10,0,0,0,0,0,0,168,142,0,0,254,222,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,48,10,0,0,0,0,0,0,168,142,0,0,68,223,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,56,10,0,0,0,0,0,0,168,142,0,0,138,223,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,64,10,0,0,0,0,0,0,168,142,0,0,208,223,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,72,10,0,0,2,0,0,0,168,142,0,0,229,223,0,0,0,0,0,0,2,0,0,0,112,3,0,0,2,0,0,0,72,10,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,142,0,0,65,227,0,0,88,142,0,0,42,227,0,0,168,142,0,0,20,227,0,0,0,0,0,0,1,0,0,0,88,10,0,0,0,0,0,0,168,142,0,0,229,226,0,0,0,0,0,0,1,0,0,0,88,10,0,0,0,0,0,0,168,142,0,0,207,226,0,0,0,0,0,0,1,0,0,0,80,10,0,0,0,0,0,0,168,142,0,0,160,226,0,0,0,0,0,0,1,0,0,0,80,10,0,0,0,0,0,0,88,142,0,0,141,226,0,0,88,142,0,0,107,226,0,0,88,142,0,0,73,226,0,0,88,142,0,0,52,226,0,0,88,142,0,0,31,226,0,0,88,142,0,0,6,226,0,0,88,142,0,0,237,225,0,0,88,142,0,0,212,225,0,0,88,142,0,0,187,225,0,0,88,142,0,0,163,225,0,0,88,142,0,0,182,226,0,0,88,142,0,0,251,226],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE);allocate([240,141,0,0,0,0,0,0,128,1,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,112,1,0,0,3,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,96,1,0,0,5,0,0,0,6,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,80,1,0,0,7,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,64,1,0,0,9,0,0,0,10,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,48,1,0,0,11,0,0,0,12,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,32,1,0,0,13,0,0,0,14,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,8,1,0,0,15,0,0,0,16,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,184,0,0,0,17,0,0,0,18,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,168,0,0,0,17,0,0,0,19,0,0,0,3,0,0,0,4,0,0,0,56,0,0,0,0,0,0,0,40,3,0,0,20,0,0,0,21,0,0,0,200,255,255,255,200,255,255,255,40,3,0,0,22,0,0,0,23,0,0,0,56,0,0,0,0,0,0,0,88,0,0,0,24,0,0,0,25,0,0,0,200,255,255,255,200,255,255,255,88,0,0,0,26,0,0,0,27,0,0,0,0,0,0,0,72,0,0,0,28,0,0,0,29,0,0,0,9,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,9,0,0,0,3,0,0,0,10,0,0,0,216,139,0,0,176,139,0,0,196,139,0,0,236,139,0,0,0,0,0,0,16,0,0,0,30,0,0,0,31,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,40,0,0,0,32,0,0,0,33,0,0,0,8,0,0,0,9,0,0,0,0,0,0,0,56,0,0,0,34,0,0,0,35,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,104,0,0,0,36,0,0,0,37,0,0,0,12,0,0,0,13,0,0,0,0,0,0,0,120,0,0,0,38,0,0,0,39,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,136,0,0,0,40,0,0,0,41,0,0,0,16,0,0,0,17,0,0,0,0,0,0,0,152,0,0,0,42,0,0,0,43,0,0,0,18,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,200,0,0,0,44,0,0,0,45,0,0,0,20,0,0,0,21,0,0,0,0,0,0,0,216,0,0,0,46,0,0,0,47,0,0,0,22,0,0,0,23,0,0,0,0,0,0,0,232,0,0,0,48,0,0,0,49,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,248,0,0,0,50,0,0,0,51,0,0,0,26,0,0,0,27,0,0,0,0,0,0,0,24,1,0,0,52,0,0,0,53,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,144,1,0,0,54,0,0,0,55,0,0,0,5,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,160,1,0,0,56,0,0,0,57,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,184,1,0,0,58,0,0,0,59,0,0,0,7,0,0,0,0,0,0,0,208,1,0,0,60,0,0,0,61,0,0,0,8,0,0,0,0,0,0,0,240,1,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,6,0,0,0,2,0,0,0,9,0,0,0,28,0,0,0,0,0,0,0,32,2,0,0,62,0,0,0,66,0,0,0,64,0,0,0,65,0,0,0,6,0,0,0,3,0,0,0,10,0,0,0,29,0,0,0,0,0,0,0,48,2,0,0,62,0,0,0,67,0,0,0,64,0,0,0,65,0,0,0,6,0,0,0,4,0,0,0,11,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,249,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,132,144,0,0,244,144,0,0,100,145,0,0,100,145,0,0,164,185,0,0,212,153,0,0,212,147,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,9,0,0,0,151,213,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,9,0,0,0,143,209,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,9,0,0,0,135,205,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+35464);allocate([1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+39376);allocate([64,2,0,0,68,0,0,0,69,0,0,0,10,0,0,0,12,0,0,0,5,0,0,0,31,0,0,0,10,0,0,0,11,0,0,0,13,0,0,0,12,0,0,0,13,0,0,0,11,0,0,0,14,0,0,0,12,0,0,0,0,0,0,0,80,2,0,0,68,0,0,0,70,0,0,0,11,0,0,0,12,0,0,0,5,0,0,0,31,0,0,0,14,0,0,0,11,0,0,0,13,0,0,0,15,0,0,0,16,0,0,0,13,0,0,0,15,0,0,0,14,0,0,0,0,0,0,0,96,2,0,0,71,0,0,0,72,0,0,0,12,0,0,0,1,0,0,0,6,0,0,0,32,0,0,0,17,0,0,0,2,0,0,0,2,0,0,0,18,0,0,0,4,0,0,0,15,0,0,0,16,0,0,0,16,0,0,0,0,0,0,0,112,2,0,0,71,0,0,0,73,0,0,0,13,0,0,0,1,0,0,0,6,0,0,0,32,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,19,0,0,0,20,0,0,0,17,0,0,0,3,0,0,0,18,0,0,0,0,0,0,0,136,2,0,0,74,0,0,0,75,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,2,0,0,71,0,0,0,76,0,0,0,9,0,0,0,1,0,0,0,6,0,0,0,32,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,18,0,0,0,4,0,0,0,15,0,0,0,3,0,0,0,18,0,0,0,0,0,0,0,240,2,0,0,68,0,0,0,77,0,0,0,14,0,0,0,12,0,0,0,5,0,0,0,31,0,0,0,14,0,0,0,11,0,0,0,13,0,0,0,12,0,0,0,13,0,0,0,11,0,0,0,15,0,0,0,14,0,0,0,8,0,0,0,0,0,0,0,248,2,0,0,78,0,0,0,79,0,0,0,248,255,255,255,248,255,255,255,248,2,0,0,80,0,0,0,81,0,0,0,8,0,0,0,0,0,0,0,16,3,0,0,82,0,0,0,83,0,0,0,248,255,255,255,248,255,255,255,16,3,0,0,84,0,0,0,85,0,0,0,4,0,0,0,0,0,0,0,40,3,0,0,20,0,0,0,21,0,0,0,252,255,255,255,252,255,255,255,40,3,0,0,22,0,0,0,23,0,0,0,4,0,0,0,0,0,0,0,64,3,0,0,86,0,0,0,87,0,0,0,252,255,255,255,252,255,255,255,64,3,0,0,88,0,0,0,89,0,0,0,0,0,0,0,176,2,0,0,90,0,0,0,91,0,0,0,7,0,0,0,0,0,0,0,192,2,0,0,92,0,0,0,93,0,0,0,0,0,0,0,88,3,0,0,54,0,0,0,94,0,0,0,21,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,80,4,0,0,95,0,0,0,96,0,0,0,97,0,0,0,1,0,0,0,33,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,4,0,0,98,0,0,0,99,0,0,0,97,0,0,0,2,0,0,0,34,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,4,0,0,100,0,0,0,101,0,0,0,97,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,4,0,0,102,0,0,0,103,0,0,0,97,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,4,0,0,104,0,0,0,105,0,0,0,97,0,0,0,3,0,0,0,4,0,0,0,23,0,0,0,5,0,0,0,24,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,5,0,0,106,0,0,0,107,0,0,0,97,0,0,0,7,0,0,0,8,0,0,0,25,0,0,0,9,0,0,0,26,0,0,0,3,0,0,0,4,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,5,0,0,108,0,0,0,109,0,0,0,97,0,0,0,22,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,1,0,0,0,248,255,255,255,48,5,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,5,0,0,110,0,0,0,111,0,0,0,97,0,0,0,30,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,2,0,0,0,248,255,255,255,88,5,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,5,0,0,112,0,0,0,113,0,0,0,97,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,5,0,0,114,0,0,0,115,0,0,0,97,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,5,0,0,116,0,0,0,117,0,0,0,97,0,0,0,38,0,0,0,39,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,40,0,0,0,19,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,5,0,0,118,0,0,0,119,0,0,0,97,0,0,0,41,0,0,0,42,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,43,0,0,0,25,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,120,0,0,0,121,0,0,0,97,0,0,0,44,0,0,0,45,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,46,0,0,0,31,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,6,0,0,122,0,0,0,123,0,0,0,97,0,0,0,47,0,0,0,48,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,49,0,0,0,37,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,6,0,0,124,0,0,0,125,0,0,0,97,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,6,0,0,126,0,0,0,127,0,0,0,97,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,6,0,0,128,0,0,0,129,0,0,0,97,0,0,0,1,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,6,0,0,130,0,0,0,131,0,0,0,97,0,0,0,2,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,6,0,0,132,0,0,0,133,0,0,0,97,0,0,0,19,0,0,0,7,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,6,0,0,134,0,0,0,135,0,0,0,97,0,0,0,20,0,0,0,8,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,4,0,0,136,0,0,0,137,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,4,0,0,138,0,0,0,139,0,0,0,97,0,0,0,19,0,0,0,21,0,0,0,20,0,0,0,22,0,0,0,21,0,0,0,1,0,0,0,23,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,4,0,0,140,0,0,0,141,0,0,0,97,0,0,0,3,0,0,0,4,0,0,0,12,0,0,0,50,0,0,0,51,0,0,0,13,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,4,0,0,142,0,0,0,143,0,0,0,97,0,0,0,53,0,0,0,54,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,0,0,0,0,160,4,0,0,144,0,0,0,145,0,0,0,97,0,0,0,55,0,0,0,56,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,0,0,0,0,112,3,0,0,146,0,0,0,147,0,0,0,97,0,0,0,0,0,0,0,128,3,0,0,146,0,0,0,148,0,0,0,97,0,0,0,24,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,22,0,0,0,25,0,0,0,23,0,0,0,26,0,0,0,24,0,0,0,5,0,0,0,27,0,0,0,14,0,0,0,0,0,0,0,160,3,0,0,146,0,0,0,149,0,0,0,97,0,0,0,5,0,0,0,6,0,0,0,15,0,0,0,57,0,0,0,58,0,0,0,16,0,0,0,59,0,0,0,0,0,0,0,192,3,0,0,146,0,0,0,150,0,0,0,97,0,0,0,7,0,0,0,8,0,0,0,17,0,0,0,60,0,0,0,61,0,0,0,18,0,0,0,62,0,0,0,0,0,0,0,224,3,0,0,146,0,0,0,151,0,0,0,97,0,0,0,9,0,0,0,10,0,0,0,19,0,0,0,63,0,0,0,64,0,0,0,20,0,0,0,65,0,0,0,0,0,0,0,0,4,0,0,146,0,0,0,152,0,0,0,97,0,0,0,9,0,0,0,10,0,0,0,19,0,0,0,63,0,0,0,64,0,0,0,20,0,0,0,65,0,0,0,0,0,0,0,16,4,0,0,146,0,0,0,153,0,0,0,97,0,0,0,9,0,0,0,10,0,0,0,19,0,0,0,63,0,0,0,64,0,0,0,20,0,0,0,65,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,3,32,2,32,2,32,2,32,2,32,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1,96,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,213,8,213,8,213,8,213,8,213,8,213,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,4,192,4,192,4,192,4,192,4,192,4,192,8,214,8,214,8,214,8,214,8,214,8,214,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,4,192,4,192,4,192,4,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,111,108,111,114,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,0,78,111,32,109,111,114,101,32,98,121,116,101,115,32,97,118,97,105,108,97,98,108,101,32,105,110,32,105,110,112,117,116,32,98,117,102,102,101,114,44,32,115,116,105,108,108,32,110,101,101,100,101,100,105,110,103,32,0,65,110,32,111,100,100,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,40,0,41,32,99,97,110,110,111,116,32,98,101,32,115,119,97,112,112,101,100,46,0,49,56,80,114,111,99,101,115,115,84,114,97,110,115,102,111,114,109,101,100,73,49,54,84,114,97,110,115,102,111,114,109,83,104,105,102,116,101,100,73,49,50,84,114,97,110,115,102,111,114,109,72,112,51,73,116,69,69,69,0,49,49,80,114,111,99,101,115,115,76,105,110,101,0,49,56,80,114,111,99,101,115,115,84,114,97,110,115,102,111,114,109,101,100,73,49,54,84,114,97,110,115,102,111,114,109,83,104,105,102,116,101,100,73,49,50,84,114,97,110,115,102,111,114,109,72,112,50,73,116,69,69,69,0,49,56,80,114,111,99,101,115,115,84,114,97,110,115,102,111,114,109,101,100,73,49,54,84,114,97,110,115,102,111,114,109,83,104,105,102,116,101,100,73,49,50,84,114,97,110,115,102,111,114,109,72,112,49,73,116,69,69,69,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,105,110,103,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,57,98,97,115,105,99,95,111,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,49,56,80,114,111,99,101,115,115,84,114,97,110,115,102,111,114,109,101,100,73,49,50,84,114,97,110,115,102,111,114,109,72,112,51,73,116,69,69,0,49,56,80,114,111,99,101,115,115,84,114,97,110,115,102,111,114,109,101,100,73,49,50,84,114,97,110,115,102,111,114,109,72,112,50,73,116,69,69,0,49,56,80,114,111,99,101,115,115,84,114,97,110,115,102,111,114,109,101,100,73,49,50,84,114,97,110,115,102,111,114,109,72,112,49,73,116,69,69,0,49,56,80,114,111,99,101,115,115,84,114,97,110,115,102,111,114,109,101,100,73,49,51,84,114,97,110,115,102,111,114,109,78,111,110,101,73,116,69,69,0,50,50,80,111,115,116,80,114,111,99,101,115,83,105,110,103,108,101,83,116,114,101,97,109,0,50,53,80,111,115,116,80,114,111,99,101,115,83,105,110,103,108,101,67,111,109,112,111,110,101,110,116,0,49,56,80,114,111,99,101,115,115,84,114,97,110,115,102,111,114,109,101,100,73,49,50,84,114,97,110,115,102,111,114,109,72,112,51,73,104,69,69,0,49,56,80,114,111,99,101,115,115,84,114,97,110,115,102,111,114,109,101,100,73,49,50,84,114,97,110,115,102,111,114,109,72,112,50,73,104,69,69,0,49,56,80,114,111,99,101,115,115,84,114,97,110,115,102,111,114,109,101,100,73,49,50,84,114,97,110,115,102,111,114,109,72,112,49,73,104,69,69,0,49,56,80,114,111,99,101,115,115,84,114,97,110,115,102,111,114,109,101,100,73,49,51,84,114,97,110,115,102,111,114,109,78,111,110,101,73,104,69,69,0,49,53,68,101,99,111,100,101,114,83,116,114,97,116,101,103,121,0,56,74,108,115,67,111,100,101,99,73,49,52,68,101,102,97,117,108,116,84,114,97,105,116,115,84,73,116,116,69,49,53,68,101,99,111,100,101,114,83,116,114,97,116,101,103,121,69,0,56,74,108,115,67,111,100,101,99,73,49,52,68,101,102,97,117,108,116,84,114,97,105,116,115,84,73,116,55,84,114,105,112,108,101,116,73,116,69,69,49,53,68,101,99,111,100,101,114,83,116,114,97,116,101,103,121,69,0,56,74,108,115,67,111,100,101,99,73,49,52,68,101,102,97,117,108,116,84,114,97,105,116,115,84,73,104,55,84,114,105,112,108,101,116,73,104,69,69,49,53,68,101,99,111,100,101,114,83,116,114,97,116,101,103,121,69,0,56,74,108,115,67,111,100,101,99,73,49,53,76,111,115,115,108,101,115,115,84,114,97,105,116,115,84,73,116,76,105,49,54,69,69,49,53,68,101,99,111,100,101,114,83,116,114,97,116,101,103,121,69,0,56,74,108,115,67,111,100,101,99,73,49,53,76,111,115,115,108,101,115,115,84,114,97,105,116,115,84,73,116,76,105,49,50,69,69,49,53,68,101,99,111,100,101,114,83,116,114,97,116,101,103,121,69,0,56,74,108,115,67,111,100,101,99,73,49,53,76,111,115,115,108,101,115,115,84,114,97,105,116,115,84,73,104,76,105,56,69,69,49,53,68,101,99,111,100,101,114,83,116,114,97,116,101,103,121,69,0,56,74,108,115,67,111,100,101,99,73,49,53,76,111,115,115,108,101,115,115,84,114,97,105,116,115,84,73,55,84,114,105,112,108,101,116,73,104,69,76,105,56,69,69,49,53,68,101,99,111,100,101,114,83,116,114,97,116,101,103,121,69,0,56,74,108,115,67,111,100,101,99,73,49,52,68,101,102,97,117,108,116,84,114,97,105,116,115,84,73,104,104,69,49,53,68,101,99,111,100,101,114,83,116,114,97,116,101,103,121,69,0,67,104,97,114,76,83,32,101,114,114,111,114,0,99,104,97,114,108,115,0,49,53,99,104,97,114,108,115,95,99,97,116,101,103,111,114,121,0,69,120,112,101,99,116,101,100,32,74,80,69,71,32,77,97,114,107,101,114,32,115,116,97,114,116,32,98,121,116,101,32,48,120,70,70,32,98,117,116,32,116,104,101,32,98,121,116,101,32,118,97,108,117,101,32,119,97,115,32,48,120,0,74,80,69,71,32,101,110,99,111,100,105,110,103,32,119,105,116,104,32,109,97,114,107,101,114,32,0,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,85,110,107,110,111,119,110,32,74,80,69,71,32,109,97,114,107,101,114,32,0,32,101,110,99,111,117,110,116,101,114,101,100,46,0,109,114,102,120,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,83,116,57,116,121,112,101,95,105,110,102,111,0,83,116,56,98,97,100,95,99,97,115,116,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,85,115,101,114,115,47,99,104,97,102,101,121,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,49,46,51,53,46,48,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,115,116,114,105,110,103,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,85,115,101,114,115,47,99,104,97,102,101,121,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,49,46,51,53,46,48,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,118,101,99,116,111,114,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+41928);allocate([110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,80,79,83,73,88],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+52168);allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,58,32,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,105,111,115,116,114,101,97,109,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,37,112,0,67,0,37,0,0,0,0,0,108,0,108,108,0,0,76,0,37,112,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,37,72,58,37,77,37,72,58,37,77,58,37,83,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,48,49,50,51,52,53,54,55,56,57,0,37,76,102,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,48,49,50,51,52,53,54,55,56,57,0,37,46,48,76,102,0,116,114,117,101,0,102,97,108,115,101,0,83,117,110,100,97,121,0,77,111,110,100,97,121,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,84,104,117,114,115,100,97,121,0,70,114,105,100,97,121,0,83,97,116,117,114,100,97,121,0,83,117,110,0,77,111,110,0,84,117,101,0,87,101,100,0,84,104,117,0,70,114,105,0,83,97,116,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,77,97,114,99,104,0,65,112,114,105,108,0,77,97,121,0,74,117,110,101,0,74,117,108,121,0,65,117,103,117,115,116,0,83,101,112,116,101,109,98,101,114,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,68,101,99,101,109,98,101,114,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,65,77,0,80,77,0,37,109,47,37,100,47,37,121,0,37,72,58,37,77,58,37,83,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,37,73,58,37,77,58,37,83,32,37,112,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+54671);var tempDoublePtr=Runtime.alignMemory(allocate(12,"i8",ALLOC_STATIC),8);assert(tempDoublePtr%8==0);function copyTempFloat(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3]}function copyTempDouble(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3];HEAP8[tempDoublePtr+4]=HEAP8[ptr+4];HEAP8[tempDoublePtr+5]=HEAP8[ptr+5];HEAP8[tempDoublePtr+6]=HEAP8[ptr+6];HEAP8[tempDoublePtr+7]=HEAP8[ptr+7]}function _atexit(func,arg){__ATEXIT__.unshift({func:func,arg:arg})}function ___cxa_atexit(){return _atexit.apply(null,arguments)}Module["_i64Subtract"]=_i64Subtract;function ___assert_fail(condition,filename,line,func){ABORT=true;throw"Assertion failed: "+Pointer_stringify(condition)+", at: "+[filename?Pointer_stringify(filename):"unknown filename",line,func?Pointer_stringify(func):"unknown function"]+" at "+stackTrace()}function __ZSt18uncaught_exceptionv(){return!!__ZSt18uncaught_exceptionv.uncaught_exception}var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:(function(adjusted){if(!adjusted||EXCEPTIONS.infos[adjusted])return adjusted;for(var ptr in EXCEPTIONS.infos){var info=EXCEPTIONS.infos[ptr];if(info.adjusted===adjusted){return ptr}}return adjusted}),addRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount++}),decRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];assert(info.refcount>0);info.refcount--;if(info.refcount===0){if(info.destructor){Runtime.dynCall("vi",info.destructor,[ptr])}delete EXCEPTIONS.infos[ptr];___cxa_free_exception(ptr)}}),clearRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount=0})};function ___resumeException(ptr){if(!EXCEPTIONS.last){EXCEPTIONS.last=ptr}EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr));throw ptr}function ___cxa_find_matching_catch(){var thrown=EXCEPTIONS.last;if(!thrown){return(asm["setTempRet0"](0),0)|0}var info=EXCEPTIONS.infos[thrown];var throwntype=info.type;if(!throwntype){return(asm["setTempRet0"](0),thrown)|0}var typeArray=Array.prototype.slice.call(arguments);var pointer=Module["___cxa_is_pointer_type"](throwntype);if(!___cxa_find_matching_catch.buffer)___cxa_find_matching_catch.buffer=_malloc(4);HEAP32[___cxa_find_matching_catch.buffer>>2]=thrown;thrown=___cxa_find_matching_catch.buffer;for(var i=0;i<typeArray.length;i++){if(typeArray[i]&&Module["___cxa_can_catch"](typeArray[i],throwntype,thrown)){thrown=HEAP32[thrown>>2];info.adjusted=thrown;return(asm["setTempRet0"](typeArray[i]),thrown)|0}}thrown=HEAP32[thrown>>2];return(asm["setTempRet0"](throwntype),thrown)|0}function ___cxa_throw(ptr,type,destructor){EXCEPTIONS.infos[ptr]={ptr:ptr,adjusted:ptr,type:type,destructor:destructor,refcount:0};EXCEPTIONS.last=ptr;if(!("uncaught_exception"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exception=1}else{__ZSt18uncaught_exceptionv.uncaught_exception++}throw ptr}Module["_memset"]=_memset;var _BDtoILow=true;var _emscripten_resume=true;function ___gxx_personality_v0(){}var _emscripten_landingpad=true;function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]);return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?Pointer_stringify(tm_zone):""};var pattern=Pointer_stringify(format);var EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule])}var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){var str=typeof value==="number"?value.toString():value||"";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={"%a":(function(date){return WEEKDAYS[date.tm_wday].substring(0,3)}),"%A":(function(date){return WEEKDAYS[date.tm_wday]}),"%b":(function(date){return MONTHS[date.tm_mon].substring(0,3)}),"%B":(function(date){return MONTHS[date.tm_mon]}),"%C":(function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)}),"%d":(function(date){return leadingNulls(date.tm_mday,2)}),"%e":(function(date){return leadingSomething(date.tm_mday,2," ")}),"%g":(function(date){return getWeekBasedYear(date).toString().substring(2)}),"%G":(function(date){return getWeekBasedYear(date)}),"%H":(function(date){return leadingNulls(date.tm_hour,2)}),"%I":(function(date){return leadingNulls(date.tm_hour<13?date.tm_hour:date.tm_hour-12,2)}),"%j":(function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)}),"%m":(function(date){return leadingNulls(date.tm_mon+1,2)}),"%M":(function(date){return leadingNulls(date.tm_min,2)}),"%n":(function(){return"\n"}),"%p":(function(date){if(date.tm_hour>0&&date.tm_hour<13){return"AM"}else{return"PM"}}),"%S":(function(date){return leadingNulls(date.tm_sec,2)}),"%t":(function(){return"\t"}),"%u":(function(date){var day=new Date(date.tm_year+1900,date.tm_mon+1,date.tm_mday,0,0,0,0);return day.getDay()||7}),"%U":(function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?"01":"00"}),"%V":(function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return"53"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return"01"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)}),"%w":(function(date){var day=new Date(date.tm_year+1900,date.tm_mon+1,date.tm_mday,0,0,0,0);return day.getDay()}),"%W":(function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?"01":"00"}),"%y":(function(date){return(date.tm_year+1900).toString().substring(2)}),"%Y":(function(date){return date.tm_year+1900}),"%z":(function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?"+":"-")+String("0000"+off).slice(-4)}),"%Z":(function(date){return date.tm_zone}),"%%":(function(){return"%"})};for(var rule in EXPANSION_RULES_2){if(pattern.indexOf(rule)>=0){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}function _abort(){Module["abort"]()}function _free(){}Module["_free"]=_free;function ___cxa_free_exception(ptr){try{return _free(ptr)}catch(e){}}function ___cxa_end_catch(){if(___cxa_end_catch.rethrown){___cxa_end_catch.rethrown=false;return}asm["setThrew"](0);var ptr=EXCEPTIONS.caught.pop();if(ptr){EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));EXCEPTIONS.last=0}}function _pthread_once(ptr,func){if(!_pthread_once.seen)_pthread_once.seen={};if(ptr in _pthread_once.seen)return;Runtime.dynCall("v",func);_pthread_once.seen[ptr]=1}function ___lock(){}function ___unlock(){}var PTHREAD_SPECIFIC={};function _pthread_getspecific(key){return PTHREAD_SPECIFIC[key]||0}function ___setErrNo(value){if(Module["___errno_location"])HEAP32[Module["___errno_location"]()>>2]=value;return value}var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name){switch(name){case 30:return PAGE_SIZE;case 85:return totalMemory/PAGE_SIZE;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 79:return 0;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:{if(typeof navigator==="object")return navigator["hardwareConcurrency"]||1;return 1}}___setErrNo(ERRNO_CODES.EINVAL);return-1}var _fabs=Math_abs;var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key,destructor){if(key==0){return ERRNO_CODES.EINVAL}HEAP32[key>>2]=PTHREAD_SPECIFIC_NEXT_KEY;PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY]=0;PTHREAD_SPECIFIC_NEXT_KEY++;return 0}var PATH=undefined;function _emscripten_set_main_loop_timing(mode,value){Browser.mainLoop.timingMode=mode;Browser.mainLoop.timingValue=value;if(!Browser.mainLoop.func){return 1}if(mode==0){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_setTimeout(){setTimeout(Browser.mainLoop.runner,value)};Browser.mainLoop.method="timeout"}else if(mode==1){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_rAF(){Browser.requestAnimationFrame(Browser.mainLoop.runner)};Browser.mainLoop.method="rAF"}else if(mode==2){if(!window["setImmediate"]){var setImmediates=[];var emscriptenMainLoopMessageId="__emcc";function Browser_setImmediate_messageHandler(event){if(event.source===window&&event.data===emscriptenMainLoopMessageId){event.stopPropagation();setImmediates.shift()()}}window.addEventListener("message",Browser_setImmediate_messageHandler,true);window["setImmediate"]=function Browser_emulated_setImmediate(func){setImmediates.push(func);window.postMessage(emscriptenMainLoopMessageId,"*")}}Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_setImmediate(){window["setImmediate"](Browser.mainLoop.runner)};Browser.mainLoop.method="immediate"}return 0}function _emscripten_set_main_loop(func,fps,simulateInfiniteLoop,arg,noSetTiming){Module["noExitRuntime"]=true;assert(!Browser.mainLoop.func,"emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");Browser.mainLoop.func=func;Browser.mainLoop.arg=arg;var thisMainLoopId=Browser.mainLoop.currentlyRunningMainloop;Browser.mainLoop.runner=function Browser_mainLoop_runner(){if(ABORT)return;if(Browser.mainLoop.queue.length>0){var start=Date.now();var blocker=Browser.mainLoop.queue.shift();blocker.func(blocker.arg);if(Browser.mainLoop.remainingBlockers){var remaining=Browser.mainLoop.remainingBlockers;var next=remaining%1==0?remaining-1:Math.floor(remaining);if(blocker.counted){Browser.mainLoop.remainingBlockers=next}else{next=next+.5;Browser.mainLoop.remainingBlockers=(8*remaining+next)/9}}console.log('main loop blocker "'+blocker.name+'" took '+(Date.now()-start)+" ms");Browser.mainLoop.updateStatus();setTimeout(Browser.mainLoop.runner,0);return}if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;Browser.mainLoop.currentFrameNumber=Browser.mainLoop.currentFrameNumber+1|0;if(Browser.mainLoop.timingMode==1&&Browser.mainLoop.timingValue>1&&Browser.mainLoop.currentFrameNumber%Browser.mainLoop.timingValue!=0){Browser.mainLoop.scheduler();return}if(Browser.mainLoop.method==="timeout"&&Module.ctx){Module.printErr("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");Browser.mainLoop.method=""}Browser.mainLoop.runIter((function(){if(typeof arg!=="undefined"){Runtime.dynCall("vi",func,[arg])}else{Runtime.dynCall("v",func)}}));if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;if(typeof SDL==="object"&&SDL.audio&&SDL.audio.queueNewAudioData)SDL.audio.queueNewAudioData();Browser.mainLoop.scheduler()};if(!noSetTiming){if(fps&&fps>0)_emscripten_set_main_loop_timing(0,1e3/fps);else _emscripten_set_main_loop_timing(1,1);Browser.mainLoop.scheduler()}if(simulateInfiniteLoop){throw"SimulateInfiniteLoop"}}var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:(function(){Browser.mainLoop.scheduler=null;Browser.mainLoop.currentlyRunningMainloop++}),resume:(function(){Browser.mainLoop.currentlyRunningMainloop++;var timingMode=Browser.mainLoop.timingMode;var timingValue=Browser.mainLoop.timingValue;var func=Browser.mainLoop.func;Browser.mainLoop.func=null;_emscripten_set_main_loop(func,0,false,Browser.mainLoop.arg,true);_emscripten_set_main_loop_timing(timingMode,timingValue);Browser.mainLoop.scheduler()}),updateStatus:(function(){if(Module["setStatus"]){var message=Module["statusMessage"]||"Please wait...";var remaining=Browser.mainLoop.remainingBlockers;var expected=Browser.mainLoop.expectedBlockers;if(remaining){if(remaining<expected){Module["setStatus"](message+" ("+(expected-remaining)+"/"+expected+")")}else{Module["setStatus"](message)}}else{Module["setStatus"]("")}}}),runIter:(function(func){if(ABORT)return;if(Module["preMainLoop"]){var preRet=Module["preMainLoop"]();if(preRet===false){return}}try{func()}catch(e){if(e instanceof ExitStatus){return}else{if(e&&typeof e==="object"&&e.stack)Module.printErr("exception thrown: "+[e,e.stack]);throw e}}if(Module["postMainLoop"])Module["postMainLoop"]()})},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:(function(){if(!Module["preloadPlugins"])Module["preloadPlugins"]=[];if(Browser.initted)return;Browser.initted=true;try{new Blob;Browser.hasBlobConstructor=true}catch(e){Browser.hasBlobConstructor=false;console.log("warning: no blob constructor, cannot create blobs with mimetypes")}Browser.BlobBuilder=typeof MozBlobBuilder!="undefined"?MozBlobBuilder:typeof WebKitBlobBuilder!="undefined"?WebKitBlobBuilder:!Browser.hasBlobConstructor?console.log("warning: no BlobBuilder"):null;Browser.URLObject=typeof window!="undefined"?window.URL?window.URL:window.webkitURL:undefined;if(!Module.noImageDecoding&&typeof Browser.URLObject==="undefined"){console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");Module.noImageDecoding=true}var imagePlugin={};imagePlugin["canHandle"]=function imagePlugin_canHandle(name){return!Module.noImageDecoding&&/\.(jpg|jpeg|png|bmp)$/i.test(name)};imagePlugin["handle"]=function imagePlugin_handle(byteArray,name,onload,onerror){var b=null;if(Browser.hasBlobConstructor){try{b=new Blob([byteArray],{type:Browser.getMimetype(name)});if(b.size!==byteArray.length){b=new Blob([(new Uint8Array(byteArray)).buffer],{type:Browser.getMimetype(name)})}}catch(e){Runtime.warnOnce("Blob constructor present but fails: "+e+"; falling back to blob builder")}}if(!b){var bb=new Browser.BlobBuilder;bb.append((new Uint8Array(byteArray)).buffer);b=bb.getBlob()}var url=Browser.URLObject.createObjectURL(b);var img=new Image;img.onload=function img_onload(){assert(img.complete,"Image "+name+" could not be decoded");var canvas=document.createElement("canvas");canvas.width=img.width;canvas.height=img.height;var ctx=canvas.getContext("2d");ctx.drawImage(img,0,0);Module["preloadedImages"][name]=canvas;Browser.URLObject.revokeObjectURL(url);if(onload)onload(byteArray)};img.onerror=function img_onerror(event){console.log("Image "+url+" could not be decoded");if(onerror)onerror()};img.src=url};Module["preloadPlugins"].push(imagePlugin);var audioPlugin={};audioPlugin["canHandle"]=function audioPlugin_canHandle(name){return!Module.noAudioDecoding&&name.substr(-4)in{".ogg":1,".wav":1,".mp3":1}};audioPlugin["handle"]=function audioPlugin_handle(byteArray,name,onload,onerror){var done=false;function finish(audio){if(done)return;done=true;Module["preloadedAudios"][name]=audio;if(onload)onload(byteArray)}function fail(){if(done)return;done=true;Module["preloadedAudios"][name]=new Audio;if(onerror)onerror()}if(Browser.hasBlobConstructor){try{var b=new Blob([byteArray],{type:Browser.getMimetype(name)})}catch(e){return fail()}var url=Browser.URLObject.createObjectURL(b);var audio=new Audio;audio.addEventListener("canplaythrough",(function(){finish(audio)}),false);audio.onerror=function audio_onerror(event){if(done)return;console.log("warning: browser could not fully decode audio "+name+", trying slower base64 approach");function encode64(data){var BASE="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var PAD="=";var ret="";var leftchar=0;var leftbits=0;for(var i=0;i<data.length;i++){leftchar=leftchar<<8|data[i];leftbits+=8;while(leftbits>=6){var curr=leftchar>>leftbits-6&63;leftbits-=6;ret+=BASE[curr]}}if(leftbits==2){ret+=BASE[(leftchar&3)<<4];ret+=PAD+PAD}else if(leftbits==4){ret+=BASE[(leftchar&15)<<2];ret+=PAD}return ret}audio.src="data:audio/x-"+name.substr(-3)+";base64,"+encode64(byteArray);finish(audio)};audio.src=url;Browser.safeSetTimeout((function(){finish(audio)}),1e4)}else{return fail()}};Module["preloadPlugins"].push(audioPlugin);var canvas=Module["canvas"];function pointerLockChange(){Browser.pointerLock=document["pointerLockElement"]===canvas||document["mozPointerLockElement"]===canvas||document["webkitPointerLockElement"]===canvas||document["msPointerLockElement"]===canvas}if(canvas){canvas.requestPointerLock=canvas["requestPointerLock"]||canvas["mozRequestPointerLock"]||canvas["webkitRequestPointerLock"]||canvas["msRequestPointerLock"]||(function(){});canvas.exitPointerLock=document["exitPointerLock"]||document["mozExitPointerLock"]||document["webkitExitPointerLock"]||document["msExitPointerLock"]||(function(){});canvas.exitPointerLock=canvas.exitPointerLock.bind(document);document.addEventListener("pointerlockchange",pointerLockChange,false);document.addEventListener("mozpointerlockchange",pointerLockChange,false);document.addEventListener("webkitpointerlockchange",pointerLockChange,false);document.addEventListener("mspointerlockchange",pointerLockChange,false);if(Module["elementPointerLock"]){canvas.addEventListener("click",(function(ev){if(!Browser.pointerLock&&canvas.requestPointerLock){canvas.requestPointerLock();ev.preventDefault()}}),false)}}}),createContext:(function(canvas,useWebGL,setInModule,webGLContextAttributes){if(useWebGL&&Module.ctx&&canvas==Module.canvas)return Module.ctx;var ctx;var contextHandle;if(useWebGL){var contextAttributes={antialias:false,alpha:false};if(webGLContextAttributes){for(var attribute in webGLContextAttributes){contextAttributes[attribute]=webGLContextAttributes[attribute]}}contextHandle=GL.createContext(canvas,contextAttributes);if(contextHandle){ctx=GL.getContext(contextHandle).GLctx}canvas.style.backgroundColor="black"}else{ctx=canvas.getContext("2d")}if(!ctx)return null;if(setInModule){if(!useWebGL)assert(typeof GLctx==="undefined","cannot set in module if GLctx is used, but we are a non-GL context that would replace it");Module.ctx=ctx;if(useWebGL)GL.makeContextCurrent(contextHandle);Module.useWebGL=useWebGL;Browser.moduleContextCreatedCallbacks.forEach((function(callback){callback()}));Browser.init()}return ctx}),destroyContext:(function(canvas,useWebGL,setInModule){}),fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:(function(lockPointer,resizeCanvas,vrDevice){Browser.lockPointer=lockPointer;Browser.resizeCanvas=resizeCanvas;Browser.vrDevice=vrDevice;if(typeof Browser.lockPointer==="undefined")Browser.lockPointer=true;if(typeof Browser.resizeCanvas==="undefined")Browser.resizeCanvas=false;if(typeof Browser.vrDevice==="undefined")Browser.vrDevice=null;var canvas=Module["canvas"];function fullScreenChange(){Browser.isFullScreen=false;var canvasContainer=canvas.parentNode;if((document["webkitFullScreenElement"]||document["webkitFullscreenElement"]||document["mozFullScreenElement"]||document["mozFullscreenElement"]||document["fullScreenElement"]||document["fullscreenElement"]||document["msFullScreenElement"]||document["msFullscreenElement"]||document["webkitCurrentFullScreenElement"])===canvasContainer){canvas.cancelFullScreen=document["cancelFullScreen"]||document["mozCancelFullScreen"]||document["webkitCancelFullScreen"]||document["msExitFullscreen"]||document["exitFullscreen"]||(function(){});canvas.cancelFullScreen=canvas.cancelFullScreen.bind(document);if(Browser.lockPointer)canvas.requestPointerLock();Browser.isFullScreen=true;if(Browser.resizeCanvas)Browser.setFullScreenCanvasSize()}else{canvasContainer.parentNode.insertBefore(canvas,canvasContainer);canvasContainer.parentNode.removeChild(canvasContainer);if(Browser.resizeCanvas)Browser.setWindowedCanvasSize()}if(Module["onFullScreen"])Module["onFullScreen"](Browser.isFullScreen);Browser.updateCanvasDimensions(canvas)}if(!Browser.fullScreenHandlersInstalled){Browser.fullScreenHandlersInstalled=true;document.addEventListener("fullscreenchange",fullScreenChange,false);document.addEventListener("mozfullscreenchange",fullScreenChange,false);document.addEventListener("webkitfullscreenchange",fullScreenChange,false);document.addEventListener("MSFullscreenChange",fullScreenChange,false)}var canvasContainer=document.createElement("div");canvas.parentNode.insertBefore(canvasContainer,canvas);canvasContainer.appendChild(canvas);canvasContainer.requestFullScreen=canvasContainer["requestFullScreen"]||canvasContainer["mozRequestFullScreen"]||canvasContainer["msRequestFullscreen"]||(canvasContainer["webkitRequestFullScreen"]?(function(){canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"])}):null);if(vrDevice){canvasContainer.requestFullScreen({vrDisplay:vrDevice})}else{canvasContainer.requestFullScreen()}}),nextRAF:0,fakeRequestAnimationFrame:(function(func){var now=Date.now();if(Browser.nextRAF===0){Browser.nextRAF=now+1e3/60}else{while(now+2>=Browser.nextRAF){Browser.nextRAF+=1e3/60}}var delay=Math.max(Browser.nextRAF-now,0);setTimeout(func,delay)}),requestAnimationFrame:function requestAnimationFrame(func){if(typeof window==="undefined"){Browser.fakeRequestAnimationFrame(func)}else{if(!window.requestAnimationFrame){window.requestAnimationFrame=window["requestAnimationFrame"]||window["mozRequestAnimationFrame"]||window["webkitRequestAnimationFrame"]||window["msRequestAnimationFrame"]||window["oRequestAnimationFrame"]||Browser.fakeRequestAnimationFrame}window.requestAnimationFrame(func)}},safeCallback:(function(func){return(function(){if(!ABORT)return func.apply(null,arguments)})}),allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:(function(){Browser.allowAsyncCallbacks=false}),resumeAsyncCallbacks:(function(){Browser.allowAsyncCallbacks=true;if(Browser.queuedAsyncCallbacks.length>0){var callbacks=Browser.queuedAsyncCallbacks;Browser.queuedAsyncCallbacks=[];callbacks.forEach((function(func){func()}))}}),safeRequestAnimationFrame:(function(func){return Browser.requestAnimationFrame((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}else{Browser.queuedAsyncCallbacks.push(func)}}))}),safeSetTimeout:(function(func,timeout){Module["noExitRuntime"]=true;return setTimeout((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}else{Browser.queuedAsyncCallbacks.push(func)}}),timeout)}),safeSetInterval:(function(func,timeout){Module["noExitRuntime"]=true;return setInterval((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}}),timeout)}),getMimetype:(function(name){return{"jpg":"image/jpeg","jpeg":"image/jpeg","png":"image/png","bmp":"image/bmp","ogg":"audio/ogg","wav":"audio/wav","mp3":"audio/mpeg"}[name.substr(name.lastIndexOf(".")+1)]}),getUserMedia:(function(func){if(!window.getUserMedia){window.getUserMedia=navigator["getUserMedia"]||navigator["mozGetUserMedia"]}window.getUserMedia(func)}),getMovementX:(function(event){return event["movementX"]||event["mozMovementX"]||event["webkitMovementX"]||0}),getMovementY:(function(event){return event["movementY"]||event["mozMovementY"]||event["webkitMovementY"]||0}),getMouseWheelDelta:(function(event){var delta=0;switch(event.type){case"DOMMouseScroll":delta=event.detail;break;case"mousewheel":delta=event.wheelDelta;break;case"wheel":delta=event["deltaY"];break;default:throw"unrecognized mouse wheel event: "+event.type}return delta}),mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:(function(event){if(Browser.pointerLock){if(event.type!="mousemove"&&"mozMovementX"in event){Browser.mouseMovementX=Browser.mouseMovementY=0}else{Browser.mouseMovementX=Browser.getMovementX(event);Browser.mouseMovementY=Browser.getMovementY(event)}if(typeof SDL!="undefined"){Browser.mouseX=SDL.mouseX+Browser.mouseMovementX;Browser.mouseY=SDL.mouseY+Browser.mouseMovementY}else{Browser.mouseX+=Browser.mouseMovementX;Browser.mouseY+=Browser.mouseMovementY}}else{var rect=Module["canvas"].getBoundingClientRect();var cw=Module["canvas"].width;var ch=Module["canvas"].height;var scrollX=typeof window.scrollX!=="undefined"?window.scrollX:window.pageXOffset;var scrollY=typeof window.scrollY!=="undefined"?window.scrollY:window.pageYOffset;if(event.type==="touchstart"||event.type==="touchend"||event.type==="touchmove"){var touch=event.touch;if(touch===undefined){return}var adjustedX=touch.pageX-(scrollX+rect.left);var adjustedY=touch.pageY-(scrollY+rect.top);adjustedX=adjustedX*(cw/rect.width);adjustedY=adjustedY*(ch/rect.height);var coords={x:adjustedX,y:adjustedY};if(event.type==="touchstart"){Browser.lastTouches[touch.identifier]=coords;Browser.touches[touch.identifier]=coords}else if(event.type==="touchend"||event.type==="touchmove"){var last=Browser.touches[touch.identifier];if(!last)last=coords;Browser.lastTouches[touch.identifier]=last;Browser.touches[touch.identifier]=coords}return}var x=event.pageX-(scrollX+rect.left);var y=event.pageY-(scrollY+rect.top);x=x*(cw/rect.width);y=y*(ch/rect.height);Browser.mouseMovementX=x-Browser.mouseX;Browser.mouseMovementY=y-Browser.mouseY;Browser.mouseX=x;Browser.mouseY=y}}),xhrLoad:(function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response)}else{onerror()}};xhr.onerror=onerror;xhr.send(null)}),asyncLoad:(function(url,onload,onerror,noRunDep){Browser.xhrLoad(url,(function(arrayBuffer){assert(arrayBuffer,'Loading data file "'+url+'" failed (no arrayBuffer).');onload(new Uint8Array(arrayBuffer));if(!noRunDep)removeRunDependency("al "+url)}),(function(event){if(onerror){onerror()}else{throw'Loading data file "'+url+'" failed.'}}));if(!noRunDep)addRunDependency("al "+url)}),resizeListeners:[],updateResizeListeners:(function(){var canvas=Module["canvas"];Browser.resizeListeners.forEach((function(listener){listener(canvas.width,canvas.height)}))}),setCanvasSize:(function(width,height,noUpdates){var canvas=Module["canvas"];Browser.updateCanvasDimensions(canvas,width,height);if(!noUpdates)Browser.updateResizeListeners()}),windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:(function(){if(typeof SDL!="undefined"){var flags=HEAPU32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2];flags=flags|8388608;HEAP32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2]=flags}Browser.updateResizeListeners()}),setWindowedCanvasSize:(function(){if(typeof SDL!="undefined"){var flags=HEAPU32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2];flags=flags&~8388608;HEAP32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2]=flags}Browser.updateResizeListeners()}),updateCanvasDimensions:(function(canvas,wNative,hNative){if(wNative&&hNative){canvas.widthNative=wNative;canvas.heightNative=hNative}else{wNative=canvas.widthNative;hNative=canvas.heightNative}var w=wNative;var h=hNative;if(Module["forcedAspectRatio"]&&Module["forcedAspectRatio"]>0){if(w/h<Module["forcedAspectRatio"]){w=Math.round(h*Module["forcedAspectRatio"])}else{h=Math.round(w/Module["forcedAspectRatio"])}}if((document["webkitFullScreenElement"]||document["webkitFullscreenElement"]||document["mozFullScreenElement"]||document["mozFullscreenElement"]||document["fullScreenElement"]||document["fullscreenElement"]||document["msFullScreenElement"]||document["msFullscreenElement"]||document["webkitCurrentFullScreenElement"])===canvas.parentNode&&typeof screen!="undefined"){var factor=Math.min(screen.width/w,screen.height/h);w=Math.round(w*factor);h=Math.round(h*factor)}if(Browser.resizeCanvas){if(canvas.width!=w)canvas.width=w;if(canvas.height!=h)canvas.height=h;if(typeof canvas.style!="undefined"){canvas.style.removeProperty("width");canvas.style.removeProperty("height")}}else{if(canvas.width!=wNative)canvas.width=wNative;if(canvas.height!=hNative)canvas.height=hNative;if(typeof canvas.style!="undefined"){if(w!=wNative||h!=hNative){canvas.style.setProperty("width",w+"px","important");canvas.style.setProperty("height",h+"px","important")}else{canvas.style.removeProperty("width");canvas.style.removeProperty("height")}}}}),wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:(function(){var handle=Browser.nextWgetRequestHandle;Browser.nextWgetRequestHandle++;return handle})};function _pthread_setspecific(key,value){if(!(key in PTHREAD_SPECIFIC)){return ERRNO_CODES.EINVAL}PTHREAD_SPECIFIC[key]=value;return 0}function _malloc(bytes){var ptr=Runtime.dynamicAlloc(bytes+8);return ptr+8&4294967288}Module["_malloc"]=_malloc;function ___cxa_allocate_exception(size){return _malloc(size)}var SYSCALLS={varargs:0,get:(function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret}),getStr:(function(){var ret=Pointer_stringify(SYSCALLS.get());return ret}),get64:(function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low}),getZero:(function(){assert(SYSCALLS.get()===0)})};function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["_i64Add"]=_i64Add;Module["_bitshift64Lshr"]=_bitshift64Lshr;function ___cxa_pure_virtual(){ABORT=true;throw"Pure virtual function called!"}var _BDtoIHigh=true;function _pthread_cleanup_push(routine,arg){__ATEXIT__.push((function(){Runtime.dynCall("vi",routine,[arg])}));_pthread_cleanup_push.level=__ATEXIT__.length}function _pthread_cond_broadcast(){return 0}function ___cxa_guard_acquire(variable){if(!HEAP8[variable>>0]){HEAP8[variable>>0]=1;return 1}return 0}function _pthread_cleanup_pop(){assert(_pthread_cleanup_push.level==__ATEXIT__.length,"cannot pop if something else added meanwhile!");__ATEXIT__.pop();_pthread_cleanup_push.level=__ATEXIT__.length}function ___cxa_guard_release(){}function ___cxa_begin_catch(ptr){__ZSt18uncaught_exceptionv.uncaught_exception--;EXCEPTIONS.caught.push(ptr);EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));return ptr}function _llvm_eh_typeid_for(type){return type}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}Module["_memcpy"]=_memcpy;function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function _pthread_mutex_lock(){}var _emscripten_postinvoke=true;function _sbrk(bytes){var self=_sbrk;if(!self.called){DYNAMICTOP=alignMemoryPage(DYNAMICTOP);self.called=true;assert(Runtime.dynamicAlloc);self.alloc=Runtime.dynamicAlloc;Runtime.dynamicAlloc=(function(){abort("cannot dynamically allocate, sbrk now has control")})}var ret=DYNAMICTOP;if(bytes!=0){var success=self.alloc(bytes);if(!success)return-1>>>0}return ret}Module["_bitshift64Shl"]=_bitshift64Shl;function ___cxa_guard_abort(){}Module["_memmove"]=_memmove;var _emscripten_preinvoke=true;var _BItoD=true;function _pthread_cond_wait(){return 0}function ___cxa_rethrow(){___cxa_end_catch.rethrown=true;var ptr=EXCEPTIONS.caught.pop();EXCEPTIONS.last=ptr;throw ptr}function _pthread_mutex_unlock(){}function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret}return ret}function _pthread_self(){return 0}function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;assert(offset_high===0);FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.get(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();var ret=0;if(!___syscall146.buffer)___syscall146.buffer=[];var buffer=___syscall146.buffer;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){var curr=HEAPU8[ptr+j];if(curr===0||curr===10){Module["print"](UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}}ret+=len}return ret}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall145(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();return SYSCALLS.doReadv(stream,iov,iovcnt)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}var ___dso_handle=allocate(1,"i32*",ALLOC_STATIC);Module["requestFullScreen"]=function Module_requestFullScreen(lockPointer,resizeCanvas,vrDevice){Browser.requestFullScreen(lockPointer,resizeCanvas,vrDevice)};Module["requestAnimationFrame"]=function Module_requestAnimationFrame(func){Browser.requestAnimationFrame(func)};Module["setCanvasSize"]=function Module_setCanvasSize(width,height,noUpdates){Browser.setCanvasSize(width,height,noUpdates)};Module["pauseMainLoop"]=function Module_pauseMainLoop(){Browser.mainLoop.pause()};Module["resumeMainLoop"]=function Module_resumeMainLoop(){Browser.mainLoop.resume()};Module["getUserMedia"]=function Module_getUserMedia(){Browser.getUserMedia()};Module["createContext"]=function Module_createContext(canvas,useWebGL,setInModule,webGLContextAttributes){return Browser.createContext(canvas,useWebGL,setInModule,webGLContextAttributes)};STACK_BASE=STACKTOP=Runtime.alignMemory(STATICTOP);staticSealed=true;STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=DYNAMICTOP=Runtime.alignMemory(STACK_MAX);assert(DYNAMIC_BASE<TOTAL_MEMORY,"TOTAL_MEMORY not big enough for stack");var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],"i8",ALLOC_DYNAMIC);function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7){try{return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiii(index,a1,a2,a3,a4,a5){try{Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6){try{return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vi(index,a1){try{Module["dynCall_vi"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vii(index,a1,a2){try{Module["dynCall_vii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6){try{return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_ii(index,a1){try{return Module["dynCall_ii"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){try{return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiii(index,a1,a2,a3){try{return Module["dynCall_iiii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15){try{Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6){try{Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7){try{Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){try{Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iii(index,a1,a2){try{return Module["dynCall_iii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiii(index,a1,a2,a3,a4,a5){try{return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_diii(index,a1,a2,a3){try{return Module["dynCall_diii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_i(index){try{return Module["dynCall_i"](index)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiii(index,a1,a2,a3,a4){try{return Module["dynCall_iiiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viii(index,a1,a2,a3){try{Module["dynCall_viii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_v(index){try{Module["dynCall_v"](index)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8){try{return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiid(index,a1,a2,a3,a4,a5){try{return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiii(index,a1,a2,a3,a4){try{Module["dynCall_viiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}Module.asmGlobalArg={"Math":Math,"Int8Array":Int8Array,"Int16Array":Int16Array,"Int32Array":Int32Array,"Uint8Array":Uint8Array,"Uint16Array":Uint16Array,"Uint32Array":Uint32Array,"Float32Array":Float32Array,"Float64Array":Float64Array,"NaN":NaN,"Infinity":Infinity,"byteLength":byteLength};Module.asmLibraryArg={"abort":abort,"assert":assert,"invoke_iiiiiiii":invoke_iiiiiiii,"invoke_viiiii":invoke_viiiii,"invoke_iiiiiid":invoke_iiiiiid,"invoke_vi":invoke_vi,"invoke_vii":invoke_vii,"invoke_iiiiiii":invoke_iiiiiii,"invoke_ii":invoke_ii,"invoke_iiiiiiiiiiii":invoke_iiiiiiiiiiii,"invoke_iiii":invoke_iiii,"invoke_viiiiiiiiiiiiiii":invoke_viiiiiiiiiiiiiii,"invoke_viiiiii":invoke_viiiiii,"invoke_viiiiiii":invoke_viiiiiii,"invoke_viiiiiiiiii":invoke_viiiiiiiiii,"invoke_iii":invoke_iii,"invoke_iiiiii":invoke_iiiiii,"invoke_diii":invoke_diii,"invoke_i":invoke_i,"invoke_iiiii":invoke_iiiii,"invoke_viii":invoke_viii,"invoke_v":invoke_v,"invoke_iiiiiiiii":invoke_iiiiiiiii,"invoke_iiiiid":invoke_iiiiid,"invoke_viiii":invoke_viiii,"_fabs":_fabs,"_strftime":_strftime,"_pthread_cond_wait":_pthread_cond_wait,"___lock":___lock,"_pthread_key_create":_pthread_key_create,"_abort":_abort,"___cxa_guard_acquire":___cxa_guard_acquire,"___setErrNo":___setErrNo,"___gxx_personality_v0":___gxx_personality_v0,"___assert_fail":___assert_fail,"___cxa_free_exception":___cxa_free_exception,"___cxa_allocate_exception":___cxa_allocate_exception,"___cxa_find_matching_catch":___cxa_find_matching_catch,"__isLeapYear":__isLeapYear,"___cxa_guard_release":___cxa_guard_release,"__addDays":__addDays,"_strftime_l":_strftime_l,"_emscripten_set_main_loop_timing":_emscripten_set_main_loop_timing,"_llvm_eh_typeid_for":_llvm_eh_typeid_for,"_sbrk":_sbrk,"___cxa_begin_catch":___cxa_begin_catch,"_emscripten_memcpy_big":_emscripten_memcpy_big,"___cxa_end_catch":___cxa_end_catch,"___resumeException":___resumeException,"__ZSt18uncaught_exceptionv":__ZSt18uncaught_exceptionv,"_sysconf":_sysconf,"_pthread_getspecific":_pthread_getspecific,"__arraySum":__arraySum,"_pthread_self":_pthread_self,"_pthread_mutex_unlock":_pthread_mutex_unlock,"_pthread_once":_pthread_once,"___syscall54":___syscall54,"___unlock":___unlock,"_pthread_cleanup_pop":_pthread_cleanup_pop,"_pthread_cond_broadcast":_pthread_cond_broadcast,"_emscripten_set_main_loop":_emscripten_set_main_loop,"_pthread_setspecific":_pthread_setspecific,"___cxa_atexit":___cxa_atexit,"___cxa_throw":___cxa_throw,"___cxa_rethrow":___cxa_rethrow,"___syscall6":___syscall6,"_pthread_cleanup_push":_pthread_cleanup_push,"___cxa_pure_virtual":___cxa_pure_virtual,"_time":_time,"_pthread_mutex_lock":_pthread_mutex_lock,"___cxa_guard_abort":___cxa_guard_abort,"_atexit":_atexit,"___syscall140":___syscall140,"___syscall145":___syscall145,"___syscall146":___syscall146,"STACKTOP":STACKTOP,"STACK_MAX":STACK_MAX,"tempDoublePtr":tempDoublePtr,"ABORT":ABORT,"cttz_i8":cttz_i8,"___dso_handle":___dso_handle};// EMSCRIPTEN_START_ASM
var asm=(function(global,env,buffer) {
"use asm";var a=global.Int8Array;var b=global.Int16Array;var c=global.Int32Array;var d=global.Uint8Array;var e=global.Uint16Array;var f=global.Uint32Array;var g=global.Float32Array;var h=global.Float64Array;var i=new a(buffer);var j=new b(buffer);var k=new c(buffer);var l=new d(buffer);var m=new e(buffer);var n=new f(buffer);var o=new g(buffer);var p=new h(buffer);var q=global.byteLength;var r=env.STACKTOP|0;var s=env.STACK_MAX|0;var t=env.tempDoublePtr|0;var u=env.ABORT|0;var v=env.cttz_i8|0;var w=env.___dso_handle|0;var x=0;var y=0;var z=0;var A=0;var B=global.NaN,C=global.Infinity;var D=0,E=0,F=0,G=0,H=0.0,I=0,J=0,K=0,L=0.0;var M=0;var N=0;var O=0;var P=0;var Q=0;var R=0;var S=0;var T=0;var U=0;var V=0;var W=global.Math.floor;var X=global.Math.abs;var Y=global.Math.sqrt;var Z=global.Math.pow;var _=global.Math.cos;var $=global.Math.sin;var aa=global.Math.tan;var ba=global.Math.acos;var ca=global.Math.asin;var da=global.Math.atan;var ea=global.Math.atan2;var fa=global.Math.exp;var ga=global.Math.log;var ha=global.Math.ceil;var ia=global.Math.imul;var ja=global.Math.min;var ka=global.Math.clz32;var la=env.abort;var ma=env.assert;var na=env.invoke_iiiiiiii;var oa=env.invoke_viiiii;var pa=env.invoke_iiiiiid;var qa=env.invoke_vi;var ra=env.invoke_vii;var sa=env.invoke_iiiiiii;var ta=env.invoke_ii;var ua=env.invoke_iiiiiiiiiiii;var va=env.invoke_iiii;var wa=env.invoke_viiiiiiiiiiiiiii;var xa=env.invoke_viiiiii;var ya=env.invoke_viiiiiii;var za=env.invoke_viiiiiiiiii;var Aa=env.invoke_iii;var Ba=env.invoke_iiiiii;var Ca=env.invoke_diii;var Da=env.invoke_i;var Ea=env.invoke_iiiii;var Fa=env.invoke_viii;var Ga=env.invoke_v;var Ha=env.invoke_iiiiiiiii;var Ia=env.invoke_iiiiid;var Ja=env.invoke_viiii;var Ka=env._fabs;var La=env._strftime;var Ma=env._pthread_cond_wait;var Na=env.___lock;var Oa=env._pthread_key_create;var Pa=env._abort;var Qa=env.___cxa_guard_acquire;var Ra=env.___setErrNo;var Sa=env.___gxx_personality_v0;var Ta=env.___assert_fail;var Ua=env.___cxa_free_exception;var Va=env.___cxa_allocate_exception;var Wa=env.___cxa_find_matching_catch;var Xa=env.__isLeapYear;var Ya=env.___cxa_guard_release;var Za=env.__addDays;var _a=env._strftime_l;var $a=env._emscripten_set_main_loop_timing;var ab=env._llvm_eh_typeid_for;var bb=env._sbrk;var cb=env.___cxa_begin_catch;var db=env._emscripten_memcpy_big;var eb=env.___cxa_end_catch;var fb=env.___resumeException;var gb=env.__ZSt18uncaught_exceptionv;var hb=env._sysconf;var ib=env._pthread_getspecific;var jb=env.__arraySum;var kb=env._pthread_self;var lb=env._pthread_mutex_unlock;var mb=env._pthread_once;var nb=env.___syscall54;var ob=env.___unlock;var pb=env._pthread_cleanup_pop;var qb=env._pthread_cond_broadcast;var rb=env._emscripten_set_main_loop;var sb=env._pthread_setspecific;var tb=env.___cxa_atexit;var ub=env.___cxa_throw;var vb=env.___cxa_rethrow;var wb=env.___syscall6;var xb=env._pthread_cleanup_push;var yb=env.___cxa_pure_virtual;var zb=env._time;var Ab=env._pthread_mutex_lock;var Bb=env.___cxa_guard_abort;var Cb=env._atexit;var Db=env.___syscall140;var Eb=env.___syscall145;var Fb=env.___syscall146;var Gb=0.0;function Hb(newBuffer){if(q(newBuffer)&16777215||q(newBuffer)<=16777215||q(newBuffer)>2147483648)return false;i=new a(newBuffer);j=new b(newBuffer);k=new c(newBuffer);l=new d(newBuffer);m=new e(newBuffer);n=new f(newBuffer);o=new g(newBuffer);p=new h(newBuffer);buffer=newBuffer;return true}
// EMSCRIPTEN_START_FUNCS
function dc(a){a=a|0;var b=0;b=r;r=r+a|0;r=r+15&-16;return b|0}function ec(){return r|0}function fc(a){a=a|0;r=a}function gc(a,b){a=a|0;b=b|0;r=a;s=b}function hc(a,b){a=a|0;b=b|0;if(!x){x=a;y=b}}function ic(a){a=a|0;i[t>>0]=i[a>>0];i[t+1>>0]=i[a+1>>0];i[t+2>>0]=i[a+2>>0];i[t+3>>0]=i[a+3>>0]}function jc(a){a=a|0;i[t>>0]=i[a>>0];i[t+1>>0]=i[a+1>>0];i[t+2>>0]=i[a+2>>0];i[t+3>>0]=i[a+3>>0];i[t+4>>0]=i[a+4>>0];i[t+5>>0]=i[a+5>>0];i[t+6>>0]=i[a+6>>0];i[t+7>>0]=i[a+7>>0]}function kc(a){a=a|0;M=a}function lc(){return M|0}function mc(a){a=a|0;cb(a|0)|0;Zg()}function nc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0;m=r;r=r+128|0;f=m+116|0;g=m;x=0;k[f>>2]=k[b>>2];k[f+4>>2]=k[b+4>>2];k[f+8>>2]=k[b+8>>2];ra(47,g|0,f|0);e=x;x=0;if(!(e&1)){if(c){e=g+16|0;b=e+84|0;do{k[e>>2]=k[c>>2];e=e+4|0;c=c+4|0}while((e|0)<(b|0))}x=0;k[f>>2]=k[a>>2];k[f+4>>2]=k[a+4>>2];k[f+8>>2]=k[a+8>>2];ra(48,g|0,f|0);g=x;x=0;if(!(g&1)){if(d)i[d>>0]=0;l=0;r=m;return l|0}}a=Wa(648,0)|0;g=M;g=(g|0)==(ab(648)|0);a=cb(a|0)|0;b=(d|0)==0;if(!g){if(!b)i[d>>0]=0;eb();l=14;r=m;return l|0}e=a+12|0;do if(!b){b=k[e>>2]|0;x=0;c=Da(1)|0;g=x;x=0;if(!(g&1))if((b|0)==(c|0)){aj(d,Ob[k[(k[a>>2]|0)+8>>2]&127](a)|0)|0;l=10;break}else{i[d>>0]=0;l=10;break}}else l=10;while(0);if((l|0)==10?(h=k[e>>2]|0,x=0,j=Da(1)|0,l=x,x=0,!(l&1)):0){l=(h|0)==(j|0)?k[a+8>>2]|0:13;eb();r=m;return l|0}b=Wa()|0;x=0;Ga(3);m=x;x=0;if(m&1){m=Wa(0)|0;mc(m)}else fb(b|0);return 0}function oc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0;j=r;r=r+128|0;e=j+116|0;d=j;x=0;k[e>>2]=k[a>>2];k[e+4>>2]=k[a+4>>2];k[e+8>>2]=k[a+8>>2];ra(47,d|0,e|0);e=x;x=0;if((!(e&1)?(x=0,qa(154,d|0),e=x,x=0,!(e&1)):0)?(x=0,ra(49,d|0,1),e=x,x=0,!(e&1)):0){a=d+16|0;d=b+84|0;do{k[b>>2]=k[a>>2];b=b+4|0;a=a+4|0}while((b|0)<(d|0));if(c)i[c>>0]=0;c=0;r=j;return c|0}e=Wa(648,0)|0;b=M;b=(b|0)==(ab(648)|0);e=cb(e|0)|0;a=(c|0)==0;if(!b){if(!a)i[c>>0]=0;eb();c=14;r=j;return c|0}b=e+12|0;do if(!a){a=k[b>>2]|0;x=0;d=Da(1)|0;l=x;x=0;if(!(l&1))if((a|0)==(d|0)){aj(c,Ob[k[(k[e>>2]|0)+8>>2]&127](e)|0)|0;h=13;break}else{i[c>>0]=0;h=13;break}}else h=13;while(0);if((h|0)==13?(f=k[b>>2]|0,x=0,g=Da(1)|0,l=x,x=0,!(l&1)):0){l=(f|0)==(g|0)?k[e+8>>2]|0:13;eb();r=j;return l|0}a=Wa()|0;x=0;Ga(3);l=x;x=0;if(l&1){l=Wa(0)|0;mc(l)}else fb(a|0);return 0}function pc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;e=r;r=r+32|0;f=e+12|0;g=e;h=g;k[h>>2]=0;k[h+4>>2]=0;k[g+4>>2]=a;k[g+8>>2]=b;k[f>>2]=k[g>>2];k[f+4>>2]=k[g+4>>2];k[f+8>>2]=k[g+8>>2];c=oc(f,c,d)|0;r=e;return c|0}function qc(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+48|0;h=g+36|0;i=g+24|0;l=g+12|0;j=g;k[l>>2]=0;k[l+4>>2]=a;k[l+8>>2]=b;k[j>>2]=0;k[j+4>>2]=c;k[j+8>>2]=d;k[i>>2]=k[l>>2];k[i+4>>2]=k[l+4>>2];k[i+8>>2]=k[l+8>>2];k[h>>2]=k[j>>2];k[h+4>>2]=k[j+4>>2];k[h+8>>2]=k[j+8>>2];d=nc(i,h,e,f)|0;r=g;return d|0}function rc(){if(i[8]|0)return 35472;if(!(Qa(8)|0))return 35472;tb(54,35472,w|0)|0;Ya(8);return 35472}function sc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0;m=r;r=r+32|0;j=m;Ag(j,(1<<b)+-1|0,0);f=k[j>>2]|0;l=f+1|0;c=l<<1;k[a>>2]=0;g=a+4|0;k[g>>2]=0;k[a+8>>2]=0;a:do if(l){if(!((f|0)<-1?(x=0,qa(155,a|0),h=x,x=0,h&1):0))d=4;if((d|0)==4?(x=0,e=ta(66,c|0)|0,h=x,x=0,!(h&1)):0){k[g>>2]=e;k[a>>2]=e;k[a+8>>2]=e+c;b=e;while(1){i[b>>0]=0;b=(k[g>>2]|0)+1|0;k[g>>2]=b;c=c+-1|0;if(!c)break a}}c=Wa()|0;b=k[a>>2]|0;if(!b)fb(c|0);if((k[g>>2]|0)!=(b|0))k[g>>2]=b;Sg(b);fb(c|0)}while(0);b=~f;if((f|0)<(b|0)){r=m;return}g=j+12|0;h=j+8|0;f=j+4|0;e=b;do{b=k[g>>2]|0;if((e|0)>(0-b|0)){c=k[h>>2]|0;if((e|0)>(0-c|0)){d=k[f>>2]|0;if((e|0)>(0-d|0))if((e|0)>=0)if((e|0)>0)if((d|0)<=(e|0))if((c|0)>(e|0))b=2;else b=(b|0)>(e|0)?3:4;else b=1;else b=0;else b=-1;else b=-2}else b=-3}else b=-4;i[(k[a>>2]|0)+(e+l)>>0]=b;e=e+1|0}while((e|0)<(l|0));r=m;return}function tc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0;p=k[c+16>>2]|0;switch(p|0){case 64:case 0:{x=0;a=Aa(25,a|0,b|0)|0;b=x;x=0;if(b&1)q=16;else d=a;break}default:{e=(1<<k[b+8>>2])+-1|0;o=k[b+20>>2]|0;n=o<<1;n=((n+e|0)/(n|1|0)|0)+1|0;a=0;while(1)if((1<<a|0)<(n|0))a=a+1|0;else break;d=0;while(1)if((1<<d|0)<(e|0))d=d+1|0;else{g=d;break}e=k[c>>2]|0;x=0;d=ta(66,4624)|0;m=x;x=0;if(m&1)q=16;else{f=((g|0)<8?8:g)+g<<1;h=d+4|0;l=b;m=h+84|0;do{k[h>>2]=k[l>>2];h=h+4|0;l=l+4|0}while((h|0)<(m|0));h=d+88|0;m=h+40|0;do{k[h>>2]=0;h=h+4|0}while((h|0)<(m|0));k[d>>2]=35484;k[d+128>>2]=e;k[d+132>>2]=n;k[d+136>>2]=o;k[d+140>>2]=a;k[d+144>>2]=g;k[d+148>>2]=f;k[d+152>>2]=p;a=d+156|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;k[a+12>>2]=0;k[d+172>>2]=k[b>>2];k[d+176>>2]=0;k[d+180>>2]=0;k[d+184>>2]=0;a=d+4568|0;e=d+188|0;do{k[e>>2]=0;k[e+4>>2]=0;j[e+8>>1]=0;j[e+10>>1]=1;e=e+12|0}while((e|0)!=(a|0));k[a>>2]=0;k[a+4>>2]=0;j[a+8>>1]=0;i[a+10>>0]=0;b=d+4580|0;k[b>>2]=0;k[b+4>>2]=0;j[b+8>>1]=0;i[b+10>>0]=0;b=d+4592|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[b+16>>2]=0;k[b+20>>2]=0;k[b+24>>2]=0;i[b+28>>0]=0;if(!(k[d+28>>2]|0))k[d+20>>2]=1}}}if((q|0)==16){q=Wa()|0;fb(q|0)}if(!d)return d|0;x=0;ra(k[(k[d>>2]|0)+12>>2]|0,d|0,c|0);q=x;x=0;if(!(q&1))return d|0;a=Wa()|0;if(!d){q=a;fb(q|0)}Lb[k[(k[d>>2]|0)+4>>2]&255](d);q=a;fb(q|0);return 0}function uc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0;c=(k[b+24>>2]|0)==2;if(c?(k[b+16>>2]|0)!=3:0){b=0;return b|0}n=k[b+20>>2]|0;a=k[b+8>>2]|0;a:do if(!n){if(c){if((a|0)!=8)break;d=Rg(4600)|0;g=d+4|0;h=b;l=g+84|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(l|0));g=d+88|0;l=g+40|0;do{k[g>>2]=0;g=g+4|0}while((g|0)<(l|0));k[d>>2]=35512;a=d+132|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;k[a+12>>2]=0;k[d+148>>2]=k[b>>2];k[d+152>>2]=0;k[d+156>>2]=0;k[d+160>>2]=0;a=d+4544|0;c=d+164|0;do{k[c>>2]=0;k[c+4>>2]=0;j[c+8>>1]=0;j[c+10>>1]=1;c=c+12|0}while((c|0)!=(a|0));k[a>>2]=0;k[a+4>>2]=0;j[a+8>>1]=0;i[a+10>>0]=0;b=d+4556|0;k[b>>2]=0;k[b+4>>2]=0;j[b+8>>1]=0;i[b+10>>0]=0;b=d+4568|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[b+16>>2]=0;k[b+20>>2]=0;k[b+24>>2]=0;i[b+28>>0]=0;if(!(k[d+28>>2]|0))k[d+20>>2]=1;b=d;return b|0}switch(a|0){case 8:{d=Rg(4600)|0;g=d+4|0;h=b;l=g+84|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(l|0));g=d+88|0;l=g+40|0;do{k[g>>2]=0;g=g+4|0}while((g|0)<(l|0));k[d>>2]=35540;a=d+132|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;k[a+12>>2]=0;k[d+148>>2]=k[b>>2];k[d+152>>2]=0;k[d+156>>2]=0;k[d+160>>2]=0;a=d+4544|0;c=d+164|0;do{k[c>>2]=0;k[c+4>>2]=0;j[c+8>>1]=0;j[c+10>>1]=1;c=c+12|0}while((c|0)!=(a|0));k[a>>2]=0;k[a+4>>2]=0;j[a+8>>1]=0;i[a+10>>0]=0;b=d+4556|0;k[b>>2]=0;k[b+4>>2]=0;j[b+8>>1]=0;i[b+10>>0]=0;b=d+4568|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[b+16>>2]=0;k[b+20>>2]=0;k[b+24>>2]=0;i[b+28>>0]=0;if(!(k[d+28>>2]|0))k[d+20>>2]=1;b=d;return b|0}case 12:{d=Rg(4600)|0;g=d+4|0;h=b;l=g+84|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(l|0));g=d+88|0;l=g+40|0;do{k[g>>2]=0;g=g+4|0}while((g|0)<(l|0));k[d>>2]=35568;a=d+132|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;k[a+12>>2]=0;k[d+148>>2]=k[b>>2];k[d+152>>2]=0;k[d+156>>2]=0;k[d+160>>2]=0;a=d+4544|0;c=d+164|0;do{k[c>>2]=0;k[c+4>>2]=0;j[c+8>>1]=0;j[c+10>>1]=1;c=c+12|0}while((c|0)!=(a|0));k[a>>2]=0;k[a+4>>2]=0;j[a+8>>1]=0;i[a+10>>0]=0;b=d+4556|0;k[b>>2]=0;k[b+4>>2]=0;j[b+8>>1]=0;i[b+10>>0]=0;b=d+4568|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[b+16>>2]=0;k[b+20>>2]=0;k[b+24>>2]=0;i[b+28>>0]=0;if(!(k[d+28>>2]|0))k[d+20>>2]=1;b=d;return b|0}case 16:{d=Rg(4600)|0;g=d+4|0;h=b;l=g+84|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(l|0));g=d+88|0;l=g+40|0;do{k[g>>2]=0;g=g+4|0}while((g|0)<(l|0));k[d>>2]=35596;a=d+132|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;k[a+12>>2]=0;k[d+148>>2]=k[b>>2];k[d+152>>2]=0;k[d+156>>2]=0;k[d+160>>2]=0;a=d+4544|0;c=d+164|0;do{k[c>>2]=0;k[c+4>>2]=0;j[c+8>>1]=0;j[c+10>>1]=1;c=c+12|0}while((c|0)!=(a|0));k[a>>2]=0;k[a+4>>2]=0;j[a+8>>1]=0;i[a+10>>0]=0;b=d+4556|0;k[b>>2]=0;k[b+4>>2]=0;j[b+8>>1]=0;i[b+10>>0]=0;b=d+4568|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[b+16>>2]=0;k[b+20>>2]=0;k[b+24>>2]=0;i[b+28>>0]=0;if(!(k[d+28>>2]|0))k[d+20>>2]=1;b=d;return b|0}default:break a}}while(0);m=(1<<a)+-1|0;if((a|0)<9){f=n<<1;f=((f+m|0)/(f|1|0)|0)+1|0;if(c){a=0;while(1)if((1<<a|0)<(f|0))a=a+1|0;else break;c=0;while(1)if((1<<c|0)<(m|0))c=c+1|0;else break;d=((c|0)<8?8:c)+c<<1;e=Rg(4624)|0;g=e+4|0;h=b;l=g+84|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(l|0));g=e+88|0;l=g+40|0;do{k[g>>2]=0;g=g+4|0}while((g|0)<(l|0));k[e>>2]=35624;k[e+128>>2]=m;k[e+132>>2]=f;k[e+136>>2]=n;k[e+140>>2]=a;k[e+144>>2]=c;k[e+148>>2]=d;k[e+152>>2]=64;a=e+156|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;k[a+12>>2]=0;k[e+172>>2]=k[b>>2];k[e+176>>2]=0;k[e+180>>2]=0;k[e+184>>2]=0;a=e+4568|0;c=e+188|0;do{k[c>>2]=0;k[c+4>>2]=0;j[c+8>>1]=0;j[c+10>>1]=1;c=c+12|0}while((c|0)!=(a|0));k[a>>2]=0;k[a+4>>2]=0;j[a+8>>1]=0;i[a+10>>0]=0;b=e+4580|0;k[b>>2]=0;k[b+4>>2]=0;j[b+8>>1]=0;i[b+10>>0]=0;b=e+4592|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[b+16>>2]=0;k[b+20>>2]=0;k[b+24>>2]=0;i[b+28>>0]=0;if(!(k[e+28>>2]|0))k[e+20>>2]=1;b=e;return b|0}else{a=0;while(1)if((1<<a|0)<(f|0))a=a+1|0;else break;c=0;while(1)if((1<<c|0)<(m|0))c=c+1|0;else break;d=((c|0)<8?8:c)+c<<1;e=Rg(4624)|0;g=e+4|0;h=b;l=g+84|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(l|0));g=e+88|0;l=g+40|0;do{k[g>>2]=0;g=g+4|0}while((g|0)<(l|0));k[e>>2]=35484;k[e+128>>2]=m;k[e+132>>2]=f;k[e+136>>2]=n;k[e+140>>2]=a;k[e+144>>2]=c;k[e+148>>2]=d;k[e+152>>2]=64;a=e+156|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;k[a+12>>2]=0;k[e+172>>2]=k[b>>2];k[e+176>>2]=0;k[e+180>>2]=0;k[e+184>>2]=0;a=e+4568|0;c=e+188|0;do{k[c>>2]=0;k[c+4>>2]=0;j[c+8>>1]=0;j[c+10>>1]=1;c=c+12|0}while((c|0)!=(a|0));k[a>>2]=0;k[a+4>>2]=0;j[a+8>>1]=0;i[a+10>>0]=0;b=e+4580|0;k[b>>2]=0;k[b+4>>2]=0;j[b+8>>1]=0;i[b+10>>0]=0;b=e+4592|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[b+16>>2]=0;k[b+20>>2]=0;k[b+24>>2]=0;i[b+28>>0]=0;if(!(k[e+28>>2]|0))k[e+20>>2]=1;b=e;return b|0}}if((a|0)>=17){b=0;return b|0}f=n<<1;f=((f+m|0)/(f|1|0)|0)+1|0;if(c){a=0;while(1)if((1<<a|0)<(f|0))a=a+1|0;else break;c=0;while(1)if((1<<c|0)<(m|0))c=c+1|0;else break;d=((c|0)<8?8:c)+c<<1;e=Rg(4624)|0;g=e+4|0;h=b;l=g+84|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(l|0));g=e+88|0;l=g+40|0;do{k[g>>2]=0;g=g+4|0}while((g|0)<(l|0));k[e>>2]=35652;k[e+128>>2]=m;k[e+132>>2]=f;k[e+136>>2]=n;k[e+140>>2]=a;k[e+144>>2]=c;k[e+148>>2]=d;k[e+152>>2]=64;a=e+156|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;k[a+12>>2]=0;k[e+172>>2]=k[b>>2];k[e+176>>2]=0;k[e+180>>2]=0;k[e+184>>2]=0;a=e+4568|0;c=e+188|0;do{k[c>>2]=0;k[c+4>>2]=0;j[c+8>>1]=0;j[c+10>>1]=1;c=c+12|0}while((c|0)!=(a|0));k[a>>2]=0;k[a+4>>2]=0;j[a+8>>1]=0;i[a+10>>0]=0;b=e+4580|0;k[b>>2]=0;k[b+4>>2]=0;j[b+8>>1]=0;i[b+10>>0]=0;b=e+4592|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[b+16>>2]=0;k[b+20>>2]=0;k[b+24>>2]=0;i[b+28>>0]=0;if(!(k[e+28>>2]|0))k[e+20>>2]=1;b=e;return b|0}else{a=0;while(1)if((1<<a|0)<(f|0))a=a+1|0;else break;c=0;while(1)if((1<<c|0)<(m|0))c=c+1|0;else break;d=((c|0)<8?8:c)+c<<1;e=Rg(4624)|0;g=e+4|0;h=b;l=g+84|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(l|0));g=e+88|0;l=g+40|0;do{k[g>>2]=0;g=g+4|0}while((g|0)<(l|0));k[e>>2]=35680;k[e+128>>2]=m;k[e+132>>2]=f;k[e+136>>2]=n;k[e+140>>2]=a;k[e+144>>2]=c;k[e+148>>2]=d;k[e+152>>2]=64;a=e+156|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;k[a+12>>2]=0;k[e+172>>2]=k[b>>2];k[e+176>>2]=0;k[e+180>>2]=0;k[e+184>>2]=0;a=e+4568|0;c=e+188|0;do{k[c>>2]=0;k[c+4>>2]=0;j[c+8>>1]=0;j[c+10>>1]=1;c=c+12|0}while((c|0)!=(a|0));k[a>>2]=0;k[a+4>>2]=0;j[a+8>>1]=0;i[a+10>>0]=0;b=e+4580|0;k[b>>2]=0;k[b+4>>2]=0;j[b+8>>1]=0;i[b+10>>0]=0;b=e+4592|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[b+16>>2]=0;k[b+20>>2]=0;k[b+24>>2]=0;i[b+28>>0]=0;if(!(k[e+28>>2]|0))k[e+20>>2]=1;b=e;return b|0}return 0}function vc(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0;a=2656;do{k[a>>2]=0;k[a+4>>2]=0;a=a+8|0}while((a|0)!=4704);Yt(2656,0,2048)|0;a=0;do{g=2656+(a+128<<3)|0;k[g>>2]=0;k[g+4>>2]=1;a=a+1|0}while((a|0)!=128);a=2912;k[a>>2]=1;k[a+4>>2]=3;a=2920;k[a>>2]=1;k[a+4>>2]=3;a=2928;k[a>>2]=1;k[a+4>>2]=3;a=2936;k[a>>2]=1;k[a+4>>2]=3;a=2944;k[a>>2]=1;k[a+4>>2]=3;a=2952;k[a>>2]=1;k[a+4>>2]=3;a=2960;k[a>>2]=1;k[a+4>>2]=3;a=2968;k[a>>2]=1;k[a+4>>2]=3;a=2976;k[a>>2]=1;k[a+4>>2]=3;a=2984;k[a>>2]=1;k[a+4>>2]=3;a=2992;k[a>>2]=1;k[a+4>>2]=3;a=3e3;k[a>>2]=1;k[a+4>>2]=3;a=3008;k[a>>2]=1;k[a+4>>2]=3;a=3016;k[a>>2]=1;k[a+4>>2]=3;a=3024;k[a>>2]=1;k[a+4>>2]=3;a=3032;k[a>>2]=1;k[a+4>>2]=3;a=3040;k[a>>2]=1;k[a+4>>2]=3;a=3048;k[a>>2]=1;k[a+4>>2]=3;a=3056;k[a>>2]=1;k[a+4>>2]=3;a=3064;k[a>>2]=1;k[a+4>>2]=3;a=3072;k[a>>2]=1;k[a+4>>2]=3;a=3080;k[a>>2]=1;k[a+4>>2]=3;a=3088;k[a>>2]=1;k[a+4>>2]=3;a=3096;k[a>>2]=1;k[a+4>>2]=3;a=3104;k[a>>2]=1;k[a+4>>2]=3;a=3112;k[a>>2]=1;k[a+4>>2]=3;a=3120;k[a>>2]=1;k[a+4>>2]=3;a=3128;k[a>>2]=1;k[a+4>>2]=3;a=3136;k[a>>2]=1;k[a+4>>2]=3;a=3144;k[a>>2]=1;k[a+4>>2]=3;a=3152;k[a>>2]=1;k[a+4>>2]=3;a=3160;k[a>>2]=1;k[a+4>>2]=3;a=2720;k[a>>2]=2;k[a+4>>2]=5;a=2728;k[a>>2]=2;k[a+4>>2]=5;a=2736;k[a>>2]=2;k[a+4>>2]=5;a=2744;k[a>>2]=2;k[a+4>>2]=5;a=2752;k[a>>2]=2;k[a+4>>2]=5;a=2760;k[a>>2]=2;k[a+4>>2]=5;a=2768;k[a>>2]=2;k[a+4>>2]=5;a=2776;k[a>>2]=2;k[a+4>>2]=5;a=2672;k[a>>2]=3;k[a+4>>2]=7;a=2680;k[a>>2]=3;k[a+4>>2]=7;a=0;do{g=2656+(a+64<<3)|0;k[g>>2]=-1;k[g+4>>2]=2;a=a+1|0}while((a|0)!=64);a=2784;k[a>>2]=-2;k[a+4>>2]=4;a=2792;k[a>>2]=-2;k[a+4>>2]=4;a=2800;k[a>>2]=-2;k[a+4>>2]=4;a=2808;k[a>>2]=-2;k[a+4>>2]=4;a=2816;k[a>>2]=-2;k[a+4>>2]=4;a=2824;k[a>>2]=-2;k[a+4>>2]=4;a=2832;k[a>>2]=-2;k[a+4>>2]=4;a=2840;k[a>>2]=-2;k[a+4>>2]=4;a=2848;k[a>>2]=-2;k[a+4>>2]=4;a=2856;k[a>>2]=-2;k[a+4>>2]=4;a=2864;k[a>>2]=-2;k[a+4>>2]=4;a=2872;k[a>>2]=-2;k[a+4>>2]=4;a=2880;k[a>>2]=-2;k[a+4>>2]=4;a=2888;k[a>>2]=-2;k[a+4>>2]=4;a=2896;k[a>>2]=-2;k[a+4>>2]=4;a=2904;k[a>>2]=-2;k[a+4>>2]=4;a=2688;k[a>>2]=-3;k[a+4>>2]=6;a=2696;k[a>>2]=-3;k[a+4>>2]=6;a=2704;k[a>>2]=-3;k[a+4>>2]=6;a=2712;k[a>>2]=-3;k[a+4>>2]=6;a=2664;k[a>>2]=-4;k[a+4>>2]=8;a=4704;do{k[a>>2]=0;k[a+4>>2]=0;a=a+8|0}while((a|0)!=6752);Yt(4704,0,2048)|0;c=2;a=0;e=0;f=0;while(1){c=c<<16>>16;b=8-c|0;d=1<<b;if((b|0)!=31){a=(a&1|2)<<b;b=0;do{g=4704+(b+a<<3)|0;k[g>>2]=e;k[g+4>>2]=c;b=b+1|0}while((b|0)<(d|0))}b=(f<<16)+65536|0;a=b>>31^b>>15;f=f+1|0;if((f|0)==7){b=2;e=1;f=-1;g=-1;break}else{c=(a>>1)+2|0;e=b>>16}}while(1){c=b<<16>>16;a=8-c|0;d=1<<a;if((a|0)!=31){a=(e&1|2)<<a;b=0;do{e=4704+(b+a<<3)|0;k[e>>2]=f;k[e+4>>2]=c;b=b+1|0}while((b|0)<(d|0))}a=(g<<16)+-65536|0;e=a>>31^a>>15;b=(e>>1)+2|0;if((b|0)>8){a=6752;break}else{f=a>>16;g=g+-1|0}}do{k[a>>2]=0;k[a+4>>2]=0;a=a+8|0}while((a|0)!=8800);Yt(6752,0,2048)|0;e=3;a=0;d=0;f=0;while(1){b=8-e|0;c=1<<b;if((b|0)!=31){a=(a&3|4)<<b;b=0;do{g=6752+(b+a<<3)|0;k[g>>2]=d;k[g+4>>2]=e;b=b+1|0}while((b|0)<(c|0))}b=(f<<16)+65536|0;a=b>>31^b>>15;f=f+1|0;if((f|0)==12){e=3;b=1;d=-1;f=-1;break}else{e=(a>>2)+3|0;d=b>>16}}while(1){a=8-e|0;c=1<<a;if((a|0)!=31){a=(b&3|4)<<a;b=0;do{g=6752+(b+a<<3)|0;k[g>>2]=d;k[g+4>>2]=e;b=b+1|0}while((b|0)<(c|0))}a=(f<<16)+-65536|0;b=a>>31^a>>15;e=(b>>2)+3|0;if((e|0)>8){a=8800;break}else{d=a>>16;f=f+-1|0}}do{k[a>>2]=0;k[a+4>>2]=0;a=a+8|0}while((a|0)!=10848);Yt(8800,0,2048)|0;e=4;a=0;d=0;f=0;while(1){b=8-e|0;c=1<<b;if((b|0)!=31){a=(a&7|8)<<b;b=0;do{g=8800+(b+a<<3)|0;k[g>>2]=d;k[g+4>>2]=e;b=b+1|0}while((b|0)<(c|0))}b=(f<<16)+65536|0;a=b>>31^b>>15;f=f+1|0;if((f|0)==20){e=4;b=1;d=-1;f=-1;break}else{e=(a>>3)+4|0;d=b>>16}}while(1){a=8-e|0;c=1<<a;if((a|0)!=31){a=(b&7|8)<<a;b=0;do{g=8800+(b+a<<3)|0;k[g>>2]=d;k[g+4>>2]=e;b=b+1|0}while((b|0)<(c|0))}a=(f<<16)+-65536|0;b=a>>31^a>>15;e=(b>>3)+4|0;if((e|0)>8){a=10848;break}else{d=a>>16;f=f+-1|0}}do{k[a>>2]=0;k[a+4>>2]=0;a=a+8|0}while((a|0)!=12896);Yt(10848,0,2048)|0;e=5;a=0;d=0;f=0;while(1){b=8-e|0;c=1<<b;if((b|0)!=31){a=(a&15|16)<<b;b=0;do{g=10848+(b+a<<3)|0;k[g>>2]=d;k[g+4>>2]=e;b=b+1|0}while((b|0)<(c|0))}b=(f<<16)+65536|0;a=b>>31^b>>15;f=f+1|0;if((f|0)==32){e=5;b=1;d=-1;f=-1;break}else{e=(a>>4)+5|0;d=b>>16}}while(1){a=8-e|0;c=1<<a;if((a|0)!=31){a=(b&15|16)<<a;b=0;do{g=10848+(b+a<<3)|0;k[g>>2]=d;k[g+4>>2]=e;b=b+1|0}while((b|0)<(c|0))}a=(f<<16)+-65536|0;b=a>>31^a>>15;e=(b>>4)+5|0;if((e|0)>8){a=12896;break}else{d=a>>16;f=f+-1|0}}do{k[a>>2]=0;k[a+4>>2]=0;a=a+8|0}while((a|0)!=14944);Yt(12896,0,2048)|0;e=6;a=0;d=0;f=0;while(1){b=8-e|0;c=1<<b;if((b|0)!=31){a=(a&31|32)<<b;b=0;do{g=12896+(b+a<<3)|0;k[g>>2]=d;k[g+4>>2]=e;b=b+1|0}while((b|0)<(c|0))}b=(f<<16)+65536|0;a=b>>31^b>>15;f=f+1|0;if((f|0)==48){e=6;b=1;d=-1;f=-1;break}else{e=(a>>5)+6|0;d=b>>16}}while(1){a=8-e|0;c=1<<a;if((a|0)!=31){a=(b&31|32)<<a;b=0;do{g=12896+(b+a<<3)|0;k[g>>2]=d;k[g+4>>2]=e;b=b+1|0}while((b|0)<(c|0))}a=(f<<16)+-65536|0;b=a>>31^a>>15;e=(b>>5)+6|0;if((e|0)>8){a=14944;break}else{d=a>>16;f=f+-1|0}}do{k[a>>2]=0;k[a+4>>2]=0;a=a+8|0}while((a|0)!=16992);Yt(14944,0,2048)|0;e=7;a=0;d=0;f=0;while(1){b=8-e|0;c=1<<b;if((b|0)!=31){a=(a&63|64)<<b;b=0;do{g=14944+(b+a<<3)|0;k[g>>2]=d;k[g+4>>2]=e;b=b+1|0}while((b|0)<(c|0))}b=(f<<16)+65536|0;a=b>>31^b>>15;f=f+1|0;if((f|0)==64){e=7;b=1;d=-1;f=-1;break}else{e=(a>>6)+7|0;d=b>>16}}while(1){a=8-e|0;c=1<<a;if((a|0)!=31){a=(b&63|64)<<a;b=0;do{g=14944+(b+a<<3)|0;k[g>>2]=d;k[g+4>>2]=e;b=b+1|0}while((b|0)<(c|0))}a=(f<<16)+-65536|0;b=a>>31^a>>15;e=(b>>6)+7|0;if((e|0)>8){a=16992;break}else{d=a>>16;f=f+-1|0}}do{k[a>>2]=0;k[a+4>>2]=0;a=a+8|0}while((a|0)!=19040);Yt(16992,0,2048)|0;e=8;a=0;d=0;f=0;while(1){b=8-e|0;c=1<<b;if((b|0)!=31){a=(a&127|128)<<b;b=0;do{g=16992+(b+a<<3)|0;k[g>>2]=d;k[g+4>>2]=e;b=b+1|0}while((b|0)<(c|0))}b=(f<<16)+65536|0;a=b>>31^b>>15;f=f+1|0;if((f|0)==64){f=8;d=1;e=-1;g=-1;break}else{e=(a>>7)+8|0;d=b>>16}}while(1){a=8-f|0;c=1<<a;if((a|0)!=31){a=(d&127|128)<<a;b=0;do{d=16992+(b+a<<3)|0;k[d>>2]=e;k[d+4>>2]=f;b=b+1|0}while((b|0)<(c|0))}b=(g<<16)+-65536|0;d=b>>31^b>>15;a=d>>7;if((a|0)>0){a=19040;break}else{f=a+8|0;e=b>>16;g=g+-1|0}}do{k[a>>2]=0;k[a+4>>2]=0;a=a+8|0}while((a|0)!=21088);Yt(19040,0,2048)|0;a=21088;do{k[a>>2]=0;k[a+4>>2]=0;a=a+8|0}while((a|0)!=23136);Yt(21088,0,2048)|0;a=23136;do{k[a>>2]=0;k[a+4>>2]=0;a=a+8|0}while((a|0)!=25184);Yt(23136,0,2048)|0;a=25184;do{k[a>>2]=0;k[a+4>>2]=0;a=a+8|0}while((a|0)!=27232);Yt(25184,0,2048)|0;a=27232;do{k[a>>2]=0;k[a+4>>2]=0;a=a+8|0}while((a|0)!=29280);Yt(27232,0,2048)|0;a=29280;do{k[a>>2]=0;k[a+4>>2]=0;a=a+8|0}while((a|0)!=31328);Yt(29280,0,2048)|0;a=31328;do{k[a>>2]=0;k[a+4>>2]=0;a=a+8|0}while((a|0)!=33376);Yt(31328,0,2048)|0;a=33376;do{k[a>>2]=0;k[a+4>>2]=0;a=a+8|0}while((a|0)!=35424);Yt(33376,0,2048)|0;sc(35424,8);tb(156,35424,w|0)|0;sc(35436,10);tb(156,35436,w|0)|0;sc(35448,12);tb(156,35448,w|0)|0;sc(35460,16);tb(156,35460,w|0)|0;return}function wc(a){a=a|0;var b=0;b=k[a>>2]|0;if(!b)return;a=a+4|0;if((k[a>>2]|0)!=(b|0))k[a>>2]=b;Sg(b);return}function xc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;k[a>>2]=36060;k[a+4>>2]=c;n=a+8|0;f=k[c>>2]|0;l=c+16|0;d=k[l>>2]|0;g=ia(d,f)|0;k[n>>2]=0;o=a+12|0;k[o>>2]=0;k[a+16>>2]=0;do if(g){if(!((g|0)<0?(x=0,qa(155,n|0),f=x,x=0,f&1):0))m=4;if((m|0)==4?(h=g<<1,x=0,j=ta(66,h|0)|0,f=x,x=0,!(f&1)):0){k[n>>2]=j;f=j+(g<<1)|0;k[a+16>>2]=f;Yt(j|0,0,h|0)|0;k[o>>2]=f;f=k[c>>2]|0;d=k[l>>2]|0;break}g=Wa()|0;e=k[n>>2]|0;d=e;if(e){f=k[o>>2]|0;if((f|0)!=(e|0))k[o>>2]=f+(~((f+-2-d|0)>>>1)<<1);Sg(e)}o=g;fb(o|0)}while(0);g=a+20|0;d=ia(f<<1,d)|0;k[g>>2]=0;h=a+24|0;k[h>>2]=0;k[a+28>>2]=0;if(!d){o=a+36|0;k[o>>2]=k[b>>2];k[o+4>>2]=k[b+4>>2];k[o+8>>2]=k[b+8>>2];return}if(!((d|0)<0?(x=0,qa(155,g|0),c=x,x=0,c&1):0))m=13;if((m|0)==13?(x=0,e=ta(66,d|0)|0,m=x,x=0,!(m&1)):0){k[h>>2]=e;k[g>>2]=e;k[a+28>>2]=e+d;do{i[e>>0]=0;e=(k[h>>2]|0)+1|0;k[h>>2]=e;d=d+-1|0}while((d|0)!=0);o=a+36|0;k[o>>2]=k[b>>2];k[o+4>>2]=k[b+4>>2];k[o+8>>2]=k[b+8>>2];return}f=Wa()|0;e=k[g>>2]|0;if(e){if((k[h>>2]|0)!=(e|0))k[h>>2]=e;Sg(e)}e=k[n>>2]|0;if(!e){o=f;fb(o|0)}d=k[o>>2]|0;if((d|0)!=(e|0))k[o>>2]=d+(~((d+-2-e|0)>>>1)<<1);Sg(e);o=f;fb(o|0)}function yc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;k[a>>2]=36036;k[a+4>>2]=c;n=a+8|0;f=k[c>>2]|0;l=c+16|0;d=k[l>>2]|0;g=ia(d,f)|0;k[n>>2]=0;o=a+12|0;k[o>>2]=0;k[a+16>>2]=0;do if(g){if(!((g|0)<0?(x=0,qa(155,n|0),f=x,x=0,f&1):0))m=4;if((m|0)==4?(h=g<<1,x=0,j=ta(66,h|0)|0,f=x,x=0,!(f&1)):0){k[n>>2]=j;f=j+(g<<1)|0;k[a+16>>2]=f;Yt(j|0,0,h|0)|0;k[o>>2]=f;f=k[c>>2]|0;d=k[l>>2]|0;break}g=Wa()|0;e=k[n>>2]|0;d=e;if(e){f=k[o>>2]|0;if((f|0)!=(e|0))k[o>>2]=f+(~((f+-2-d|0)>>>1)<<1);Sg(e)}o=g;fb(o|0)}while(0);g=a+20|0;d=ia(f<<1,d)|0;k[g>>2]=0;h=a+24|0;k[h>>2]=0;k[a+28>>2]=0;if(!d){o=a+36|0;k[o>>2]=k[b>>2];k[o+4>>2]=k[b+4>>2];k[o+8>>2]=k[b+8>>2];return}if(!((d|0)<0?(x=0,qa(155,g|0),c=x,x=0,c&1):0))m=13;if((m|0)==13?(x=0,e=ta(66,d|0)|0,m=x,x=0,!(m&1)):0){k[h>>2]=e;k[g>>2]=e;k[a+28>>2]=e+d;do{i[e>>0]=0;e=(k[h>>2]|0)+1|0;k[h>>2]=e;d=d+-1|0}while((d|0)!=0);o=a+36|0;k[o>>2]=k[b>>2];k[o+4>>2]=k[b+4>>2];k[o+8>>2]=k[b+8>>2];return}f=Wa()|0;e=k[g>>2]|0;if(e){if((k[h>>2]|0)!=(e|0))k[h>>2]=e;Sg(e)}e=k[n>>2]|0;if(!e){o=f;fb(o|0)}d=k[o>>2]|0;if((d|0)!=(e|0))k[o>>2]=d+(~((d+-2-e|0)>>>1)<<1);Sg(e);o=f;fb(o|0)}function zc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;k[a>>2]=36012;k[a+4>>2]=c;n=a+8|0;f=k[c>>2]|0;l=c+16|0;d=k[l>>2]|0;g=ia(d,f)|0;k[n>>2]=0;o=a+12|0;k[o>>2]=0;k[a+16>>2]=0;do if(g){if(!((g|0)<0?(x=0,qa(155,n|0),f=x,x=0,f&1):0))m=4;if((m|0)==4?(h=g<<1,x=0,j=ta(66,h|0)|0,f=x,x=0,!(f&1)):0){k[n>>2]=j;f=j+(g<<1)|0;k[a+16>>2]=f;Yt(j|0,0,h|0)|0;k[o>>2]=f;f=k[c>>2]|0;d=k[l>>2]|0;break}g=Wa()|0;e=k[n>>2]|0;d=e;if(e){f=k[o>>2]|0;if((f|0)!=(e|0))k[o>>2]=f+(~((f+-2-d|0)>>>1)<<1);Sg(e)}o=g;fb(o|0)}while(0);g=a+20|0;d=ia(f<<1,d)|0;k[g>>2]=0;h=a+24|0;k[h>>2]=0;k[a+28>>2]=0;if(!d){o=a+36|0;k[o>>2]=k[b>>2];k[o+4>>2]=k[b+4>>2];k[o+8>>2]=k[b+8>>2];return}if(!((d|0)<0?(x=0,qa(155,g|0),c=x,x=0,c&1):0))m=13;if((m|0)==13?(x=0,e=ta(66,d|0)|0,m=x,x=0,!(m&1)):0){k[h>>2]=e;k[g>>2]=e;k[a+28>>2]=e+d;do{i[e>>0]=0;e=(k[h>>2]|0)+1|0;k[h>>2]=e;d=d+-1|0}while((d|0)!=0);o=a+36|0;k[o>>2]=k[b>>2];k[o+4>>2]=k[b+4>>2];k[o+8>>2]=k[b+8>>2];return}f=Wa()|0;e=k[g>>2]|0;if(e){if((k[h>>2]|0)!=(e|0))k[h>>2]=e;Sg(e)}e=k[n>>2]|0;if(!e){o=f;fb(o|0)}d=k[o>>2]|0;if((d|0)!=(e|0))k[o>>2]=d+(~((d+-2-e|0)>>>1)<<1);Sg(e);o=f;fb(o|0)}function Ac(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;k[a>>2]=35988;k[a+4>>2]=c;n=a+8|0;f=k[c>>2]|0;l=c+16|0;d=k[l>>2]|0;g=ia(d,f)|0;k[n>>2]=0;o=a+12|0;k[o>>2]=0;k[a+16>>2]=0;do if(g){if(!((g|0)<0?(x=0,qa(155,n|0),f=x,x=0,f&1):0))m=4;if((m|0)==4?(h=g<<1,x=0,j=ta(66,h|0)|0,f=x,x=0,!(f&1)):0){k[n>>2]=j;f=j+(g<<1)|0;k[a+16>>2]=f;Yt(j|0,0,h|0)|0;k[o>>2]=f;f=k[c>>2]|0;d=k[l>>2]|0;break}g=Wa()|0;e=k[n>>2]|0;d=e;if(e){f=k[o>>2]|0;if((f|0)!=(e|0))k[o>>2]=f+(~((f+-2-d|0)>>>1)<<1);Sg(e)}o=g;fb(o|0)}while(0);g=a+20|0;d=ia(f<<1,d)|0;k[g>>2]=0;h=a+24|0;k[h>>2]=0;k[a+28>>2]=0;if(!d){o=a+36|0;k[o>>2]=k[b>>2];k[o+4>>2]=k[b+4>>2];k[o+8>>2]=k[b+8>>2];return}if(!((d|0)<0?(x=0,qa(155,g|0),c=x,x=0,c&1):0))m=13;if((m|0)==13?(x=0,e=ta(66,d|0)|0,m=x,x=0,!(m&1)):0){k[h>>2]=e;k[g>>2]=e;k[a+28>>2]=e+d;do{i[e>>0]=0;e=(k[h>>2]|0)+1|0;k[h>>2]=e;d=d+-1|0}while((d|0)!=0);o=a+36|0;k[o>>2]=k[b>>2];k[o+4>>2]=k[b+4>>2];k[o+8>>2]=k[b+8>>2];return}f=Wa()|0;e=k[g>>2]|0;if(e){if((k[h>>2]|0)!=(e|0))k[h>>2]=e;Sg(e)}e=k[n>>2]|0;if(!e){o=f;fb(o|0)}d=k[o>>2]|0;if((d|0)!=(e|0))k[o>>2]=d+(~((d+-2-e|0)>>>1)<<1);Sg(e);o=f;fb(o|0)}function Bc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;g=a+32|0;xk(g,b)|0;f=a+44|0;k[f>>2]=0;h=a+48|0;e=k[h>>2]|0;if(e&8){b=i[g>>0]|0;if(!(b&1)){b=((b&255)>>>1)+(g+1)|0;k[f>>2]=b;c=g+1|0;d=g+1|0}else{b=(k[a+40>>2]|0)+(k[a+36>>2]|0)|0;k[f>>2]=b;d=k[a+40>>2]|0;c=d}k[a+8>>2]=c;k[a+12>>2]=d;k[a+16>>2]=b}if(!(e&16))return;b=i[g>>0]|0;if(!(b&1)){e=(b&255)>>>1;k[f>>2]=g+1+e;b=10;f=e}else{e=k[a+36>>2]|0;k[f>>2]=(k[a+40>>2]|0)+e;b=(k[g>>2]&-2)+-1|0;f=e}Ak(g,b,0);b=i[g>>0]|0;if(!(b&1)){e=g+1|0;d=(b&255)>>>1;c=g+1|0}else{c=k[a+40>>2]|0;e=c;d=k[a+36>>2]|0}b=a+24|0;k[b>>2]=c;k[a+20>>2]=c;k[a+28>>2]=e+d;if(!(k[h>>2]&3))return;k[b>>2]=c+f;return}function Cc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;o=r;r=r+32|0;g=o+16|0;n=o+8|0;h=o;x=0;ra(50,n|0,a|0);l=x;x=0;a:do if(l&1){c=Wa(0)|0;d=a;e=a}else{do if(i[n>>0]|0){d=k[(k[a>>2]|0)+-12>>2]|0;k[h>>2]=k[a+(d+24)>>2];j=a+d|0;l=k[a+(d+4)>>2]|0;e=b+c|0;d=a+(d+76)|0;c=k[d>>2]|0;do if((c|0)==-1){x=0;c=ta(67,j|0)|0;p=x;x=0;if(p&1)m=13;else{k[g>>2]=c;x=0;c=Aa(26,g|0,43752)|0;p=x;x=0;if(!(p&1)?(x=0,f=Aa(k[(k[c>>2]|0)+28>>2]|0,c|0,32)|0,p=x,x=0,!(p&1)):0){uq(g);c=f<<24>>24;k[d>>2]=c;m=9;break}c=Wa(0)|0;uq(g)}}else m=9;while(0);if((m|0)==9){x=0;k[g>>2]=k[h>>2];c=sa(39,g|0,b|0,((l&176|0)==32?e:b)|0,e|0,j|0,c&255|0)|0;p=x;x=0;if(!(p&1)){if(c)break;p=k[(k[a>>2]|0)+-12>>2]|0;x=0;ra(51,a+p|0,k[a+(p+16)>>2]|5|0);p=x;x=0;if(!(p&1))break;else m=13}else m=13}if((m|0)==13)c=Wa(0)|0;Vl(n);d=a;e=a;break a}while(0);Vl(n);r=o;return a|0}while(0);cb(c|0)|0;x=0;qa(157,d+(k[(k[e>>2]|0)+-12>>2]|0)|0);p=x;x=0;if(!(p&1)){eb();r=o;return a|0}c=Wa()|0;x=0;Ga(3);p=x;x=0;if(p&1){p=Wa(0)|0;mc(p)}else fb(c|0);return 0}function Dc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=k[b+48>>2]|0;if(c&16){c=b+44|0;d=k[c>>2]|0;e=k[b+24>>2]|0;if(d>>>0<e>>>0)k[c>>2]=e;else e=d;d=k[b+20>>2]|0;f=e-d|0;if(f>>>0>4294967279)Og(a);if(f>>>0<11){i[a>>0]=f<<1;c=a+1|0}else{b=f+16&-16;c=Rg(b)|0;k[a+8>>2]=c;k[a>>2]=b|1;k[a+4>>2]=f}if((d|0)!=(e|0)){b=c;while(1){i[b>>0]=i[d>>0]|0;d=d+1|0;if((d|0)==(e|0))break;else b=b+1|0}c=c+f|0}i[c>>0]=0;return}if(!(c&8)){k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;return}d=k[b+8>>2]|0;b=k[b+16>>2]|0;f=b-d|0;if(f>>>0>4294967279)Og(a);if(f>>>0<11){i[a>>0]=f<<1;c=a+1|0}else{e=f+16&-16;c=Rg(e)|0;k[a+8>>2]=c;k[a>>2]=e|1;k[a+4>>2]=f}if((d|0)!=(b|0)){e=c;while(1){i[e>>0]=i[d>>0]|0;d=d+1|0;if((d|0)==(b|0))break;else e=e+1|0}c=c+f|0}i[c>>0]=0;return}function Ec(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;k[a>>2]=35964;k[a+4>>2]=c;o=a+8|0;g=k[c>>2]|0;m=c+16|0;f=k[m>>2]|0;l=ia(f,g)|0;k[o>>2]=0;p=a+12|0;k[p>>2]=0;k[a+16>>2]=0;do if(l){if(!((l|0)<0?(x=0,qa(155,o|0),g=x,x=0,g&1):0))n=4;if((n|0)==4?(h=l<<1,x=0,j=ta(66,h|0)|0,g=x,x=0,!(g&1)):0){k[o>>2]=j;g=j+(l<<1)|0;k[a+16>>2]=g;Yt(j|0,0,h|0)|0;k[p>>2]=g;g=k[c>>2]|0;f=k[m>>2]|0;break}h=Wa()|0;e=k[o>>2]|0;f=e;if(e){g=k[p>>2]|0;if((g|0)!=(e|0))k[p>>2]=g+(~((g+-2-f|0)>>>1)<<1);Sg(e)}p=h;fb(p|0)}while(0);h=a+20|0;f=ia(g<<1,f)|0;k[h>>2]=0;j=a+24|0;k[j>>2]=0;k[a+28>>2]=0;if(!f){p=a+32|0;o=d;o=k[o>>2]|0;d=d+4|0;d=k[d>>2]|0;n=p;k[n>>2]=o;p=p+4|0;k[p>>2]=d;p=a+40|0;k[p>>2]=o;p=a+48|0;k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];return}if(!((f|0)<0?(x=0,qa(155,h|0),m=x,x=0,m&1):0))n=13;if((n|0)==13?(x=0,e=ta(66,f|0)|0,n=x,x=0,!(n&1)):0){k[j>>2]=e;k[h>>2]=e;k[a+28>>2]=e+f;do{i[e>>0]=0;e=(k[j>>2]|0)+1|0;k[j>>2]=e;f=f+-1|0}while((f|0)!=0);p=a+32|0;o=d;o=k[o>>2]|0;d=d+4|0;d=k[d>>2]|0;n=p;k[n>>2]=o;p=p+4|0;k[p>>2]=d;p=a+40|0;k[p>>2]=o;p=a+48|0;k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];return}g=Wa()|0;e=k[h>>2]|0;if(e){if((k[j>>2]|0)!=(e|0))k[j>>2]=e;Sg(e)}e=k[o>>2]|0;if(!e){p=g;fb(p|0)}f=k[p>>2]|0;if((f|0)!=(e|0))k[p>>2]=f+(~((f+-2-e|0)>>>1)<<1);Sg(e);p=g;fb(p|0)}function Fc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;k[a>>2]=35940;k[a+4>>2]=c;o=a+8|0;g=k[c>>2]|0;m=c+16|0;f=k[m>>2]|0;l=ia(f,g)|0;k[o>>2]=0;p=a+12|0;k[p>>2]=0;k[a+16>>2]=0;do if(l){if(!((l|0)<0?(x=0,qa(155,o|0),g=x,x=0,g&1):0))n=4;if((n|0)==4?(h=l<<1,x=0,j=ta(66,h|0)|0,g=x,x=0,!(g&1)):0){k[o>>2]=j;g=j+(l<<1)|0;k[a+16>>2]=g;Yt(j|0,0,h|0)|0;k[p>>2]=g;g=k[c>>2]|0;f=k[m>>2]|0;break}h=Wa()|0;e=k[o>>2]|0;f=e;if(e){g=k[p>>2]|0;if((g|0)!=(e|0))k[p>>2]=g+(~((g+-2-f|0)>>>1)<<1);Sg(e)}p=h;fb(p|0)}while(0);h=a+20|0;f=ia(g<<1,f)|0;k[h>>2]=0;j=a+24|0;k[j>>2]=0;k[a+28>>2]=0;if(!f){p=a+32|0;o=d;o=k[o>>2]|0;d=d+4|0;d=k[d>>2]|0;n=p;k[n>>2]=o;p=p+4|0;k[p>>2]=d;p=a+40|0;k[p>>2]=o;p=a+48|0;k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];return}if(!((f|0)<0?(x=0,qa(155,h|0),m=x,x=0,m&1):0))n=13;if((n|0)==13?(x=0,e=ta(66,f|0)|0,n=x,x=0,!(n&1)):0){k[j>>2]=e;k[h>>2]=e;k[a+28>>2]=e+f;do{i[e>>0]=0;e=(k[j>>2]|0)+1|0;k[j>>2]=e;f=f+-1|0}while((f|0)!=0);p=a+32|0;o=d;o=k[o>>2]|0;d=d+4|0;d=k[d>>2]|0;n=p;k[n>>2]=o;p=p+4|0;k[p>>2]=d;p=a+40|0;k[p>>2]=o;p=a+48|0;k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];return}g=Wa()|0;e=k[h>>2]|0;if(e){if((k[j>>2]|0)!=(e|0))k[j>>2]=e;Sg(e)}e=k[o>>2]|0;if(!e){p=g;fb(p|0)}f=k[p>>2]|0;if((f|0)!=(e|0))k[p>>2]=f+(~((f+-2-e|0)>>>1)<<1);Sg(e);p=g;fb(p|0)}function Gc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;k[a>>2]=35916;k[a+4>>2]=c;o=a+8|0;g=k[c>>2]|0;m=c+16|0;f=k[m>>2]|0;l=ia(f,g)|0;k[o>>2]=0;p=a+12|0;k[p>>2]=0;k[a+16>>2]=0;do if(l){if(!((l|0)<0?(x=0,qa(155,o|0),g=x,x=0,g&1):0))n=4;if((n|0)==4?(h=l<<1,x=0,j=ta(66,h|0)|0,g=x,x=0,!(g&1)):0){k[o>>2]=j;g=j+(l<<1)|0;k[a+16>>2]=g;Yt(j|0,0,h|0)|0;k[p>>2]=g;g=k[c>>2]|0;f=k[m>>2]|0;break}h=Wa()|0;e=k[o>>2]|0;f=e;if(e){g=k[p>>2]|0;if((g|0)!=(e|0))k[p>>2]=g+(~((g+-2-f|0)>>>1)<<1);Sg(e)}p=h;fb(p|0)}while(0);h=a+20|0;f=ia(g<<1,f)|0;k[h>>2]=0;j=a+24|0;k[j>>2]=0;k[a+28>>2]=0;if(!f){p=a+32|0;o=d;o=k[o>>2]|0;d=d+4|0;d=k[d>>2]|0;n=p;k[n>>2]=o;p=p+4|0;k[p>>2]=d;p=a+40|0;k[p>>2]=o;p=a+48|0;k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];return}if(!((f|0)<0?(x=0,qa(155,h|0),m=x,x=0,m&1):0))n=13;if((n|0)==13?(x=0,e=ta(66,f|0)|0,n=x,x=0,!(n&1)):0){k[j>>2]=e;k[h>>2]=e;k[a+28>>2]=e+f;do{i[e>>0]=0;e=(k[j>>2]|0)+1|0;k[j>>2]=e;f=f+-1|0}while((f|0)!=0);p=a+32|0;o=d;o=k[o>>2]|0;d=d+4|0;d=k[d>>2]|0;n=p;k[n>>2]=o;p=p+4|0;k[p>>2]=d;p=a+40|0;k[p>>2]=o;p=a+48|0;k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];return}g=Wa()|0;e=k[h>>2]|0;if(e){if((k[j>>2]|0)!=(e|0))k[j>>2]=e;Sg(e)}e=k[o>>2]|0;if(!e){p=g;fb(p|0)}f=k[p>>2]|0;if((f|0)!=(e|0))k[p>>2]=f+(~((f+-2-e|0)>>>1)<<1);Sg(e);p=g;fb(p|0)}function Hc(a){a=a|0;var b=0,c=0,d=0;k[a>>2]=35916;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}d=k[a+8>>2]|0;if(!d)return;b=a+12|0;c=k[b>>2]|0;if((c|0)!=(d|0))k[b>>2]=c+(~((c+-2-d|0)>>>1)<<1);Sg(d);return}function Ic(a){a=a|0;var b=0,c=0,d=0;k[a>>2]=35916;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}d=k[a+8>>2]|0;if(!d){Sg(a);return}b=a+12|0;c=k[b>>2]|0;if((c|0)!=(d|0))k[b>>2]=c+(~((c+-2-d|0)>>>1)<<1);Sg(d);Sg(a);return}function Jc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=a+48|0;if(!(k[e>>2]|0)){h=a+52|0;Oc(a,b,k[h>>2]|0,c,d);k[h>>2]=(k[h>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}j=a+4|0;f=c<<1;g=ia(f,k[(k[j>>2]|0)+16>>2]|0)|0;h=a+20|0;Oc(a,b,k[h>>2]|0,c,d);b=k[j>>2]|0;if((k[b+28>>2]|0)==536870912)Nc(k[h>>2]|0,ia(f,k[b+16>>2]|0)|0);j=k[e>>2]|0;if((Qb[k[(k[j>>2]|0)+48>>2]&63](j,k[h>>2]|0,g)|0)==(g|0))return;b=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,b|0,3,35472);j=x;x=0;if(j&1){j=Wa()|0;Ua(b|0);fb(j|0)}else ub(b|0,648,74)}function Kc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=k[a+48>>2]|0;if(!e){e=a+52|0;Lc(a,k[e>>2]|0,b,c,d);k[e>>2]=(k[e>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}else{Mc(a,e,b,c,d);return}}function Lc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,n=0,o=0,p=0;l=a+4|0;f=k[l>>2]|0;do if(!(i[f+32>>0]|0))n=b;else{g=a+8|0;$t(k[g>>2]|0,b|0,d*6|0)|0;f=k[l>>2]|0;h=k[f+16>>2]|0;if((d|0)<=0){n=k[g>>2]|0;break}b=k[g>>2]|0;f=b;g=0;while(1){n=f+4|0;o=j[f>>1]|0;j[f>>1]=j[n>>1]|0;j[n>>1]=o;g=g+1|0;if((g|0)==(d|0))break;else f=f+(h<<1)|0}n=b;f=k[l>>2]|0}while(0);switch(k[f+16>>2]|0){case 3:if((k[f+24>>2]|0)==2){if((d|0)<=0)return;f=a+32|0;b=0;do{o=k[f>>2]|0;l=m[n+(b*6|0)+2>>1]<<o;e=32768-l|0;a=e+(m[n+(b*6|0)+4>>1]<<o)&65535;e=e+(m[n+(b*6|0)>>1]<<o)&65535;j[c+(b*6|0)>>1]=(l+49152+((a+e|0)>>>2)&65535)>>>o;j[c+(b*6|0)+2>>1]=a>>>o;j[c+(b*6|0)+4>>1]=e>>>o;b=b+1|0}while((b|0)!=(d|0));return}else{g=(e|0)<(d|0)?e:d;if((g|0)<=0)return;h=e<<1;f=k[a+32>>2]|0;b=0;do{d=m[n+(b*6|0)+2>>1]<<f;o=32768-d|0;a=o+(m[n+(b*6|0)+4>>1]<<f)&65535;o=o+(m[n+(b*6|0)>>1]<<f)&65535;j[c+(b<<1)>>1]=(d+49152+((a+o|0)>>>2)&65535)>>>f;j[c+(b+e<<1)>>1]=a>>>f;j[c+(b+h<<1)>>1]=o>>>f;b=b+1|0}while((b|0)!=(g|0));return}case 4:{if((k[f+24>>2]|0)!=1)return;g=(e|0)<(d|0)?e:d;if((g|0)<=0)return;h=e<<1;l=e*3|0;f=k[a+32>>2]|0;b=0;do{o=j[n+(b<<3)+6>>1]|0;p=m[n+(b<<3)+2>>1]<<f;a=32768-p|0;d=a+(m[n+(b<<3)+4>>1]<<f)&65535;a=a+(m[n+(b<<3)>>1]<<f)&65535;j[c+(b<<1)>>1]=(p+49152+((d+a|0)>>>2)&65535)>>>f;j[c+(b+e<<1)>>1]=d>>>f;j[c+(b+h<<1)>>1]=a>>>f;j[c+(b+l<<1)>>1]=o;b=b+1|0}while((b|0)!=(g|0));return}default:return}}function Mc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;n=r;r=r+176|0;o=n+152|0;q=n+16|0;p=n;j=a+4|0;f=k[j>>2]|0;m=d<<1;g=ia(m,k[f+16>>2]|0)|0;do if(g){h=a+20|0;while(1){f=Qb[k[(k[b>>2]|0)+32>>2]&63](b,k[h>>2]|0,g)|0;if(!f)break;if((g|0)==(f|0)){l=26;break}else g=g-f|0}if((l|0)==26){f=k[j>>2]|0;break}l=q+56|0;j=q+4|0;k[q>>2]=35760;k[l>>2]=35780;x=0;ra(52,q+56|0,j|0);n=x;x=0;if(n&1){q=Wa()|0;Vk(l);fb(q|0)}k[q+128>>2]=0;k[q+132>>2]=-1;k[q>>2]=35800;k[q+56>>2]=35820;x=0;qa(158,j|0);n=x;x=0;do if(n&1)f=Wa()|0;else{k[j>>2]=35836;b=q+36|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[q+52>>2]=16;k[o>>2]=0;k[o+4>>2]=0;k[o+8>>2]=0;x=0;ra(53,j|0,o|0);n=x;x=0;if(n&1){f=Wa()|0;wk(o);wk(b);al(j);break}wk(o);x=0;f=va(28,q|0,48058,57)|0;o=x;x=0;if(!(o&1)?(x=0,Aa(27,f|0,0)|0,o=x,x=0,!(o&1)):0){h=Va(16)|0;x=0;ra(54,p|0,j|0);o=x;x=0;if(!(o&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,h|0,3,35472,p|0);o=x;x=0;if(o&1)g=1;else{x=0;Fa(5,h|0,648,74);x=0;g=0}f=Wa()|0;wk(p);if(!g){p=f;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}}else f=Wa()|0;Ua(h|0);p=f;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}p=Wa()|0;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}while(0);q=f;Vk(l);fb(q|0)}while(0);g=a+20|0;if((k[f+28>>2]|0)!=536870912){q=k[g>>2]|0;Lc(a,q,c,d,e);r=n;return}Nc(k[g>>2]|0,ia(m,k[f+16>>2]|0)|0);q=k[g>>2]|0;Lc(a,q,c,d,e);r=n;return}function Nc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0;e=r;r=r+176|0;c=e+152|0;j=e+16|0;g=e;if(!(b&1)){c=(b|0)/4|0;if((b|0)>3){d=0;do{j=a+(d<<2)|0;h=k[j>>2]|0;k[j>>2]=h>>>8&16711935|h<<8&-16711936;d=d+1|0}while((d|0)<(c|0))}if(!(b&3)){r=e;return}g=a+(b+-2)|0;j=a+(b+-1)|0;h=i[g>>0]|0;i[g>>0]=i[j>>0]|0;i[j>>0]=h;r=e;return}h=j+56|0;f=j+4|0;k[j>>2]=35760;k[h>>2]=35780;x=0;ra(52,j+56|0,f|0);e=x;x=0;if(e&1){j=Wa()|0;Vk(h);fb(j|0)}k[j+128>>2]=0;k[j+132>>2]=-1;k[j>>2]=35800;k[j+56>>2]=35820;x=0;qa(158,f|0);e=x;x=0;do if(e&1)c=Wa()|0;else{k[f>>2]=35836;e=j+36|0;k[e>>2]=0;k[e+4>>2]=0;k[e+8>>2]=0;k[e+12>>2]=0;k[j+52>>2]=16;k[c>>2]=0;k[c+4>>2]=0;k[c+8>>2]=0;x=0;ra(53,f|0,c|0);a=x;x=0;if(a&1){j=Wa()|0;wk(c);wk(e);al(f);c=j;break}wk(c);x=0;c=va(28,j|0,48116,24)|0;a=x;x=0;if((!(a&1)?(x=0,d=Aa(27,c|0,b|0)|0,b=x,x=0,!(b&1)):0)?(x=0,va(28,d|0,48141,20)|0,b=x,x=0,!(b&1)):0){a=Va(16)|0;x=0;ra(54,g|0,f|0);b=x;x=0;if(!(b&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,a|0,1,35472,g|0);b=x;x=0;if(b&1)d=1;else{x=0;Fa(5,a|0,648,74);x=0;d=0}c=Wa()|0;wk(g);if(!d){g=c;k[j>>2]=35800;k[h>>2]=35820;k[f>>2]=35836;wk(e);al(f);Vk(h);fb(g|0)}}else c=Wa()|0;Ua(a|0);g=c;k[j>>2]=35800;k[h>>2]=35820;k[f>>2]=35836;wk(e);al(f);Vk(h);fb(g|0)}g=Wa()|0;k[j>>2]=35800;k[h>>2]=35820;k[f>>2]=35836;wk(e);al(f);Vk(h);fb(g|0)}while(0);j=c;Vk(h);fb(j|0)}function Oc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;n=a+4|0;f=k[n>>2]|0;a:do switch(k[f+16>>2]|0){case 3:{if((k[f+24>>2]|0)==2){if((d|0)<=0)break a;f=a+40|0;a=0;do{e=k[f>>2]|0;h=m[b+(a*6|0)+2>>1]<<e;g=m[b+(a*6|0)+4>>1]<<e;l=(m[b+(a*6|0)>>1]<<e)-(g+h>>2)+16384|0;j[c+(a*6|0)>>1]=(g+32768+l&65535)>>>e;j[c+(a*6|0)+2>>1]=(l&65535)>>>e;j[c+(a*6|0)+4>>1]=(h+32768+l&65535)>>>e;a=a+1|0}while((a|0)!=(d|0))}else{g=(d|0)<(e|0)?d:e;if((g|0)<=0)break a;h=e<<1;f=a+40|0;a=0;do{l=k[f>>2]|0;p=m[b+(a+e<<1)>>1]<<l;q=m[b+(a+h<<1)>>1]<<l;o=(m[b+(a<<1)>>1]<<l)-(q+p>>2)+16384|0;j[c+(a*6|0)>>1]=(q+32768+o&65535)>>>l;j[c+(a*6|0)+2>>1]=(o&65535)>>>l;j[c+(a*6|0)+4>>1]=(p+32768+o&65535)>>>l;a=a+1|0}while((a|0)!=(g|0))}break}case 4:{if((k[f+24>>2]|0)==1?(l=(d|0)<(e|0)?d:e,(l|0)>0):0){h=e<<1;f=a+40|0;a=e*3|0;g=0;do{q=k[f>>2]|0;p=m[b+(g+e<<1)>>1]<<q;s=m[b+(g+h<<1)>>1]<<q;o=(m[b+(g<<1)>>1]<<q)-(s+p>>2)+16384|0;r=j[b+(g+a<<1)>>1]|0;t=au((o&65535)>>>q&65535|0,0,16)|0;p=(p+32768+o&65535)>>>q|M;r=au(r&65535|0,0,48)|0;r=t|(s+32768+o&65535)>>>q&65535|r;p=p&65535|M;q=c+(g<<3)|0;o=q;j[o>>1]=r;j[o+2>>1]=r>>>16;q=q+4|0;j[q>>1]=p;j[q+2>>1]=p>>>16;g=g+1|0}while((g|0)!=(l|0))}break}default:{}}while(0);f=k[n>>2]|0;if(!(i[f+32>>0]|0))return;g=k[f+16>>2]|0;if((d|0)<=0)return;f=c;a=0;while(1){t=f+4|0;s=j[f>>1]|0;j[f>>1]=j[t>>1]|0;j[t>>1]=s;a=a+1|0;if((a|0)==(d|0))break;else f=f+(g<<1)|0}return}function Pc(a){a=a|0;var b=0,c=0,d=0;k[a>>2]=35940;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}d=k[a+8>>2]|0;if(!d)return;b=a+12|0;c=k[b>>2]|0;if((c|0)!=(d|0))k[b>>2]=c+(~((c+-2-d|0)>>>1)<<1);Sg(d);return}function Qc(a){a=a|0;var b=0,c=0,d=0;k[a>>2]=35940;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}d=k[a+8>>2]|0;if(!d){Sg(a);return}b=a+12|0;c=k[b>>2]|0;if((c|0)!=(d|0))k[b>>2]=c+(~((c+-2-d|0)>>>1)<<1);Sg(d);Sg(a);return}function Rc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=a+48|0;if(!(k[e>>2]|0)){h=a+52|0;Vc(a,b,k[h>>2]|0,c,d);k[h>>2]=(k[h>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}j=a+4|0;f=c<<1;g=ia(f,k[(k[j>>2]|0)+16>>2]|0)|0;h=a+20|0;Vc(a,b,k[h>>2]|0,c,d);b=k[j>>2]|0;if((k[b+28>>2]|0)==536870912)Nc(k[h>>2]|0,ia(f,k[b+16>>2]|0)|0);j=k[e>>2]|0;if((Qb[k[(k[j>>2]|0)+48>>2]&63](j,k[h>>2]|0,g)|0)==(g|0))return;b=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,b|0,3,35472);j=x;x=0;if(j&1){j=Wa()|0;Ua(b|0);fb(j|0)}else ub(b|0,648,74)}function Sc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=k[a+48>>2]|0;if(!e){e=a+52|0;Tc(a,k[e>>2]|0,b,c,d);k[e>>2]=(k[e>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}else{Uc(a,e,b,c,d);return}}function Tc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,n=0,o=0,p=0;l=a+4|0;f=k[l>>2]|0;do if(!(i[f+32>>0]|0))n=b;else{g=a+8|0;$t(k[g>>2]|0,b|0,d*6|0)|0;f=k[l>>2]|0;h=k[f+16>>2]|0;if((d|0)<=0){n=k[g>>2]|0;break}b=k[g>>2]|0;f=b;g=0;while(1){n=f+4|0;o=j[f>>1]|0;j[f>>1]=j[n>>1]|0;j[n>>1]=o;g=g+1|0;if((g|0)==(d|0))break;else f=f+(h<<1)|0}n=b;f=k[l>>2]|0}while(0);switch(k[f+16>>2]|0){case 3:if((k[f+24>>2]|0)==2){if((d|0)<=0)return;f=a+32|0;b=0;do{e=k[f>>2]|0;l=m[n+(b*6|0)>>1]<<e;a=m[n+(b*6|0)+2>>1]<<e;o=((m[n+(b*6|0)+4>>1]<<e)+32768-((a+l|0)>>>1)&65535)>>>e&65535;j[c+(b*6|0)>>1]=(l+32768-a&65535)>>>e;j[c+(b*6|0)+2>>1]=(a&65535)>>>e;j[c+(b*6|0)+4>>1]=o;b=b+1|0}while((b|0)!=(d|0));return}else{g=(e|0)<(d|0)?e:d;if((g|0)<=0)return;h=e<<1;f=k[a+32>>2]|0;b=0;do{d=m[n+(b*6|0)>>1]<<f;a=m[n+(b*6|0)+2>>1]<<f;o=((m[n+(b*6|0)+4>>1]<<f)+32768-((a+d|0)>>>1)&65535)>>>f&65535;j[c+(b<<1)>>1]=(d+32768-a&65535)>>>f;j[c+(b+e<<1)>>1]=(a&65535)>>>f;j[c+(b+h<<1)>>1]=o;b=b+1|0}while((b|0)!=(g|0));return}case 4:{if((k[f+24>>2]|0)!=1)return;g=(e|0)<(d|0)?e:d;if((g|0)<=0)return;h=e<<1;l=e*3|0;f=k[a+32>>2]|0;b=0;do{o=j[n+(b<<3)+6>>1]|0;p=m[n+(b<<3)>>1]<<f;d=m[n+(b<<3)+2>>1]<<f;a=((m[n+(b<<3)+4>>1]<<f)+32768-((d+p|0)>>>1)&65535)>>>f&65535;j[c+(b<<1)>>1]=(p+32768-d&65535)>>>f;j[c+(b+e<<1)>>1]=(d&65535)>>>f;j[c+(b+h<<1)>>1]=a;j[c+(b+l<<1)>>1]=o;b=b+1|0}while((b|0)!=(g|0));return}default:return}}function Uc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;n=r;r=r+176|0;o=n+152|0;q=n+16|0;p=n;j=a+4|0;f=k[j>>2]|0;m=d<<1;g=ia(m,k[f+16>>2]|0)|0;do if(g){h=a+20|0;while(1){f=Qb[k[(k[b>>2]|0)+32>>2]&63](b,k[h>>2]|0,g)|0;if(!f)break;if((g|0)==(f|0)){l=26;break}else g=g-f|0}if((l|0)==26){f=k[j>>2]|0;break}l=q+56|0;j=q+4|0;k[q>>2]=35760;k[l>>2]=35780;x=0;ra(52,q+56|0,j|0);n=x;x=0;if(n&1){q=Wa()|0;Vk(l);fb(q|0)}k[q+128>>2]=0;k[q+132>>2]=-1;k[q>>2]=35800;k[q+56>>2]=35820;x=0;qa(158,j|0);n=x;x=0;do if(n&1)f=Wa()|0;else{k[j>>2]=35836;b=q+36|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[q+52>>2]=16;k[o>>2]=0;k[o+4>>2]=0;k[o+8>>2]=0;x=0;ra(53,j|0,o|0);n=x;x=0;if(n&1){f=Wa()|0;wk(o);wk(b);al(j);break}wk(o);x=0;f=va(28,q|0,48058,57)|0;o=x;x=0;if(!(o&1)?(x=0,Aa(27,f|0,0)|0,o=x,x=0,!(o&1)):0){h=Va(16)|0;x=0;ra(54,p|0,j|0);o=x;x=0;if(!(o&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,h|0,3,35472,p|0);o=x;x=0;if(o&1)g=1;else{x=0;Fa(5,h|0,648,74);x=0;g=0}f=Wa()|0;wk(p);if(!g){p=f;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}}else f=Wa()|0;Ua(h|0);p=f;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}p=Wa()|0;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}while(0);q=f;Vk(l);fb(q|0)}while(0);g=a+20|0;if((k[f+28>>2]|0)!=536870912){q=k[g>>2]|0;Tc(a,q,c,d,e);r=n;return}Nc(k[g>>2]|0,ia(m,k[f+16>>2]|0)|0);q=k[g>>2]|0;Tc(a,q,c,d,e);r=n;return}function Vc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,n=0,o=0,p=0,q=0,r=0,s=0;n=a+4|0;f=k[n>>2]|0;a:do switch(k[f+16>>2]|0){case 3:{if((k[f+24>>2]|0)==2){if((d|0)<=0)break a;f=a+40|0;a=0;do{l=k[f>>2]|0;h=m[b+(a*6|0)+2>>1]<<l;g=(m[b+(a*6|0)>>1]<<l)+32768+h&65535;h=h&65535;e=((m[b+(a*6|0)+4>>1]<<l)+32768+((g+h|0)>>>1)&65535)>>>l&65535;j[c+(a*6|0)>>1]=g>>>l;j[c+(a*6|0)+2>>1]=h>>>l;j[c+(a*6|0)+4>>1]=e;a=a+1|0}while((a|0)!=(d|0))}else{g=(d|0)<(e|0)?d:e;if((g|0)<=0)break a;h=e<<1;f=a+40|0;a=0;do{o=k[f>>2]|0;p=m[b+(a+e<<1)>>1]<<o;q=(m[b+(a<<1)>>1]<<o)+32768+p&65535;p=p&65535;l=((m[b+(a+h<<1)>>1]<<o)+32768+((q+p|0)>>>1)&65535)>>>o&65535;j[c+(a*6|0)>>1]=q>>>o;j[c+(a*6|0)+2>>1]=p>>>o;j[c+(a*6|0)+4>>1]=l;a=a+1|0}while((a|0)!=(g|0))}break}case 4:{if((k[f+24>>2]|0)==1?(l=(d|0)<(e|0)?d:e,(l|0)>0):0){h=e<<1;f=a+40|0;a=e*3|0;g=0;do{o=k[f>>2]|0;q=m[b+(g+e<<1)>>1]<<o;s=(m[b+(g<<1)>>1]<<o)+32768+q&65535;q=q&65535;p=((m[b+(g+h<<1)>>1]<<o)+32768+((s+q|0)>>>1)&65535)>>>o;r=j[b+(g+a<<1)>>1]|0;q=au(q>>>o&65535|0,0,16)|0;p=M|p;r=au(r&65535|0,0,48)|0;r=s>>>o&65535|q|r;p=p&65535|M;q=c+(g<<3)|0;o=q;j[o>>1]=r;j[o+2>>1]=r>>>16;q=q+4|0;j[q>>1]=p;j[q+2>>1]=p>>>16;g=g+1|0}while((g|0)!=(l|0))}break}default:{}}while(0);f=k[n>>2]|0;if(!(i[f+32>>0]|0))return;g=k[f+16>>2]|0;if((d|0)<=0)return;f=c;a=0;while(1){s=f+4|0;r=j[f>>1]|0;j[f>>1]=j[s>>1]|0;j[s>>1]=r;a=a+1|0;if((a|0)==(d|0))break;else f=f+(g<<1)|0}return}function Wc(a){a=a|0;var b=0,c=0,d=0;k[a>>2]=35964;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}d=k[a+8>>2]|0;if(!d)return;b=a+12|0;c=k[b>>2]|0;if((c|0)!=(d|0))k[b>>2]=c+(~((c+-2-d|0)>>>1)<<1);Sg(d);return}function Xc(a){a=a|0;var b=0,c=0,d=0;k[a>>2]=35964;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}d=k[a+8>>2]|0;if(!d){Sg(a);return}b=a+12|0;c=k[b>>2]|0;if((c|0)!=(d|0))k[b>>2]=c+(~((c+-2-d|0)>>>1)<<1);Sg(d);Sg(a);return}function Yc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=a+48|0;if(!(k[e>>2]|0)){h=a+52|0;ad(a,b,k[h>>2]|0,c,d);k[h>>2]=(k[h>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}j=a+4|0;f=c<<1;g=ia(f,k[(k[j>>2]|0)+16>>2]|0)|0;h=a+20|0;ad(a,b,k[h>>2]|0,c,d);b=k[j>>2]|0;if((k[b+28>>2]|0)==536870912)Nc(k[h>>2]|0,ia(f,k[b+16>>2]|0)|0);j=k[e>>2]|0;if((Qb[k[(k[j>>2]|0)+48>>2]&63](j,k[h>>2]|0,g)|0)==(g|0))return;b=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,b|0,3,35472);j=x;x=0;if(j&1){j=Wa()|0;Ua(b|0);fb(j|0)}else ub(b|0,648,74)}function Zc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=k[a+48>>2]|0;if(!e){e=a+52|0;_c(a,k[e>>2]|0,b,c,d);k[e>>2]=(k[e>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}else{$c(a,e,b,c,d);return}}function _c(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,n=0,o=0;l=a+4|0;f=k[l>>2]|0;do if(!(i[f+32>>0]|0))n=b;else{g=a+8|0;$t(k[g>>2]|0,b|0,d*6|0)|0;f=k[l>>2]|0;h=k[f+16>>2]|0;if((d|0)<=0){n=k[g>>2]|0;break}b=k[g>>2]|0;f=b;g=0;while(1){n=f+4|0;o=j[f>>1]|0;j[f>>1]=j[n>>1]|0;j[n>>1]=o;g=g+1|0;if((g|0)==(d|0))break;else f=f+(h<<1)|0}n=b;f=k[l>>2]|0}while(0);switch(k[f+16>>2]|0){case 3:if((k[f+24>>2]|0)==2){if((d|0)<=0)return;f=a+32|0;b=0;do{e=k[f>>2]|0;a=m[n+(b*6|0)+2>>1]<<e;o=(32768-a+(m[n+(b*6|0)+4>>1]<<e)&65535)>>>e&65535;j[c+(b*6|0)>>1]=((m[n+(b*6|0)>>1]<<e)+32768-a&65535)>>>e;j[c+(b*6|0)+2>>1]=(a&65535)>>>e;j[c+(b*6|0)+4>>1]=o;b=b+1|0}while((b|0)!=(d|0));return}else{g=(e|0)<(d|0)?e:d;if((g|0)<=0)return;h=e<<1;f=k[a+32>>2]|0;b=0;do{a=m[n+(b*6|0)+2>>1]<<f;o=(32768-a+(m[n+(b*6|0)+4>>1]<<f)&65535)>>>f&65535;j[c+(b<<1)>>1]=((m[n+(b*6|0)>>1]<<f)+32768-a&65535)>>>f;j[c+(b+e<<1)>>1]=(a&65535)>>>f;j[c+(b+h<<1)>>1]=o;b=b+1|0}while((b|0)!=(g|0));return}case 4:{if((k[f+24>>2]|0)!=1)return;h=(e|0)<(d|0)?e:d;if((h|0)<=0)return;l=e<<1;g=e*3|0;f=k[a+32>>2]|0;b=0;do{o=j[n+(b<<3)+6>>1]|0;d=m[n+(b<<3)+2>>1]<<f;a=(32768-d+(m[n+(b<<3)+4>>1]<<f)&65535)>>>f&65535;j[c+(b<<1)>>1]=((m[n+(b<<3)>>1]<<f)+32768-d&65535)>>>f;j[c+(b+e<<1)>>1]=(d&65535)>>>f;j[c+(b+l<<1)>>1]=a;j[c+(b+g<<1)>>1]=o;b=b+1|0}while((b|0)!=(h|0));return}default:return}}function $c(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;n=r;r=r+176|0;o=n+152|0;q=n+16|0;p=n;j=a+4|0;f=k[j>>2]|0;m=d<<1;g=ia(m,k[f+16>>2]|0)|0;do if(g){h=a+20|0;while(1){f=Qb[k[(k[b>>2]|0)+32>>2]&63](b,k[h>>2]|0,g)|0;if(!f)break;if((g|0)==(f|0)){l=26;break}else g=g-f|0}if((l|0)==26){f=k[j>>2]|0;break}l=q+56|0;j=q+4|0;k[q>>2]=35760;k[l>>2]=35780;x=0;ra(52,q+56|0,j|0);n=x;x=0;if(n&1){q=Wa()|0;Vk(l);fb(q|0)}k[q+128>>2]=0;k[q+132>>2]=-1;k[q>>2]=35800;k[q+56>>2]=35820;x=0;qa(158,j|0);n=x;x=0;do if(n&1)f=Wa()|0;else{k[j>>2]=35836;b=q+36|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[q+52>>2]=16;k[o>>2]=0;k[o+4>>2]=0;k[o+8>>2]=0;x=0;ra(53,j|0,o|0);n=x;x=0;if(n&1){f=Wa()|0;wk(o);wk(b);al(j);break}wk(o);x=0;f=va(28,q|0,48058,57)|0;o=x;x=0;if(!(o&1)?(x=0,Aa(27,f|0,0)|0,o=x,x=0,!(o&1)):0){h=Va(16)|0;x=0;ra(54,p|0,j|0);o=x;x=0;if(!(o&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,h|0,3,35472,p|0);o=x;x=0;if(o&1)g=1;else{x=0;Fa(5,h|0,648,74);x=0;g=0}f=Wa()|0;wk(p);if(!g){p=f;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}}else f=Wa()|0;Ua(h|0);p=f;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}p=Wa()|0;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}while(0);q=f;Vk(l);fb(q|0)}while(0);g=a+20|0;if((k[f+28>>2]|0)!=536870912){q=k[g>>2]|0;_c(a,q,c,d,e);r=n;return}Nc(k[g>>2]|0,ia(m,k[f+16>>2]|0)|0);q=k[g>>2]|0;_c(a,q,c,d,e);r=n;return}function ad(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,n=0,o=0,p=0,q=0,r=0,s=0;n=a+4|0;f=k[n>>2]|0;a:do switch(k[f+16>>2]|0){case 3:{if((k[f+24>>2]|0)==2){if((d|0)<=0)break a;f=a+40|0;a=0;do{l=k[f>>2]|0;h=m[b+(a*6|0)+2>>1]<<l;e=(h+32768+(m[b+(a*6|0)+4>>1]<<l)&65535)>>>l&65535;j[c+(a*6|0)>>1]=((m[b+(a*6|0)>>1]<<l)+32768+h&65535)>>>l;j[c+(a*6|0)+2>>1]=(h&65535)>>>l;j[c+(a*6|0)+4>>1]=e;a=a+1|0}while((a|0)!=(d|0))}else{g=(d|0)<(e|0)?d:e;if((g|0)<=0)break a;h=e<<1;f=a+40|0;a=0;do{o=k[f>>2]|0;p=m[b+(a+e<<1)>>1]<<o;l=(p+32768+(m[b+(a+h<<1)>>1]<<o)&65535)>>>o&65535;j[c+(a*6|0)>>1]=((m[b+(a<<1)>>1]<<o)+32768+p&65535)>>>o;j[c+(a*6|0)+2>>1]=(p&65535)>>>o;j[c+(a*6|0)+4>>1]=l;a=a+1|0}while((a|0)!=(g|0))}break}case 4:{if((k[f+24>>2]|0)==1?(l=(d|0)<(e|0)?d:e,(l|0)>0):0){h=e<<1;f=a+40|0;a=e*3|0;g=0;do{q=k[f>>2]|0;s=m[b+(g+e<<1)>>1]<<q;p=((m[b+(g<<1)>>1]<<q)+32768+s&65535)>>>q;o=(s+32768+(m[b+(g+h<<1)>>1]<<q)&65535)>>>q;r=j[b+(g+a<<1)>>1]|0;q=au((s&65535)>>>q&65535|0,0,16)|0;o=o|M;r=au(r&65535|0,0,48)|0;r=q|p&65535|r;o=o&65535|M;p=c+(g<<3)|0;q=p;j[q>>1]=r;j[q+2>>1]=r>>>16;p=p+4|0;j[p>>1]=o;j[p+2>>1]=o>>>16;g=g+1|0}while((g|0)!=(l|0))}break}default:{}}while(0);f=k[n>>2]|0;if(!(i[f+32>>0]|0))return;g=k[f+16>>2]|0;if((d|0)<=0)return;f=c;a=0;while(1){s=f+4|0;r=j[f>>1]|0;j[f>>1]=j[s>>1]|0;j[s>>1]=r;a=a+1|0;if((a|0)==(d|0))break;else f=f+(g<<1)|0}return}function bd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0;n=r;r=r+16|0;l=n;m=k[a>>2]|0;if(!m){a=0;r=n;return a|0}o=b;h=d-o|0;j=e+12|0;g=k[j>>2]|0;h=(g|0)>(h|0)?g-h|0:0;g=c;e=g-o|0;if((e|0)>0?(Qb[k[(k[m>>2]|0)+48>>2]&63](m,b,e)|0)!=(e|0):0){k[a>>2]=0;o=0;r=n;return o|0}do if((h|0)>0){vk(l,h,f);x=0;e=va(k[(k[m>>2]|0)+48>>2]|0,m|0,((i[l>>0]&1)==0?l+1|0:k[l+8>>2]|0)|0,h|0)|0;o=x;x=0;if(o&1){o=Wa()|0;wk(l);fb(o|0)}if((e|0)==(h|0)){wk(l);break}k[a>>2]=0;wk(l);o=0;r=n;return o|0}while(0);d=d-g|0;if((d|0)>0?(Qb[k[(k[m>>2]|0)+48>>2]&63](m,c,d)|0)!=(d|0):0){k[a>>2]=0;o=0;r=n;return o|0}k[j>>2]=0;o=m;r=n;return o|0}function cd(a){a=a|0;k[a>>2]=35836;wk(a+32|0);al(a);return}function dd(a){a=a|0;k[a>>2]=35836;wk(a+32|0);al(a);Sg(a);return}function ed(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0;g=b+44|0;h=k[g>>2]|0;l=b+24|0;m=k[l>>2]|0;if(h>>>0<m>>>0){k[g>>2]=m;h=m}j=h;g=f&24;if(!g){b=a;k[b>>2]=0;k[b+4>>2]=0;b=a+8|0;k[b>>2]=-1;k[b+4>>2]=-1;return}if((e|0)==1&(g|0)==24){b=a;k[b>>2]=0;k[b+4>>2]=0;b=a+8|0;k[b>>2]=-1;k[b+4>>2]=-1;return}a:do switch(e|0){case 0:{g=0;e=0;break}case 1:if(!(f&8)){e=m-(k[b+20>>2]|0)|0;g=e;e=((e|0)<0)<<31>>31;break a}else{e=(k[b+12>>2]|0)-(k[b+8>>2]|0)|0;g=e;e=((e|0)<0)<<31>>31;break a}case 2:{g=b+32|0;if(!(i[g>>0]&1))g=g+1|0;else g=k[b+40>>2]|0;e=h-g|0;g=e;e=((e|0)<0)<<31>>31;break}default:{b=a;k[b>>2]=0;k[b+4>>2]=0;b=a+8|0;k[b>>2]=-1;k[b+4>>2]=-1;return}}while(0);e=Zt(g|0,e|0,c|0,d|0)|0;c=M;if((c|0)>=0){g=b+32|0;if(!(i[g>>0]&1))g=g+1|0;else g=k[b+40>>2]|0;d=h-g|0;h=((d|0)<0)<<31>>31;if(!((h|0)<(c|0)|(h|0)==(c|0)&d>>>0<e>>>0)){g=f&8;if(!((e|0)==0&(c|0)==0)){if((g|0)!=0?(k[b+12>>2]|0)==0:0){b=a;k[b>>2]=0;k[b+4>>2]=0;b=a+8|0;k[b>>2]=-1;k[b+4>>2]=-1;return}if((f&16|0)!=0&(m|0)==0){b=a;k[b>>2]=0;k[b+4>>2]=0;b=a+8|0;k[b>>2]=-1;k[b+4>>2]=-1;return}}if(g){k[b+12>>2]=(k[b+8>>2]|0)+e;k[b+16>>2]=j}if(f&16)k[l>>2]=(k[b+20>>2]|0)+e;b=a;k[b>>2]=0;k[b+4>>2]=0;b=a+8|0;k[b>>2]=e;k[b+4>>2]=c;return}}b=a;k[b>>2]=0;k[b+4>>2]=0;b=a+8|0;k[b>>2]=-1;k[b+4>>2]=-1;return}function fd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;c=c+8|0;Sb[k[(k[b>>2]|0)+16>>2]&15](a,b,k[c>>2]|0,k[c+4>>2]|0,0,d);return}function gd(a){a=a|0;var b=0,c=0,d=0,e=0;b=a+44|0;c=k[b>>2]|0;d=k[a+24>>2]|0;if(c>>>0<d>>>0){k[b>>2]=d;c=d}if(!(k[a+48>>2]&8)){a=-1;return a|0}e=a+16|0;b=k[e>>2]|0;d=a+12|0;if(b>>>0<c>>>0){d=k[d>>2]|0;k[e>>2]=c;b=c}else d=k[d>>2]|0;if(d>>>0>=b>>>0){a=-1;return a|0}a=l[d>>0]|0;return a|0}function hd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0;d=a+44|0;c=k[d>>2]|0;e=k[a+24>>2]|0;if(c>>>0<e>>>0){k[d>>2]=e;c=e}h=a+8|0;d=k[h>>2]|0;j=a+12|0;f=k[j>>2]|0;g=d;if(d>>>0>=f>>>0){a=-1;return a|0}if((b|0)==-1){k[h>>2]=d;k[j>>2]=f+-1;k[a+16>>2]=c;a=0;return a|0}if(!(k[a+48>>2]&16)){e=b&255;d=f+-1|0;if(e<<24>>24!=(i[d>>0]|0)){a=-1;return a|0}}else{e=b&255;d=f+-1|0}k[h>>2]=g;k[j>>2]=d;k[a+16>>2]=c;i[d>>0]=e;a=b;return a|0}function id(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0;s=r;r=r+16|0;m=s;if((b|0)==-1){a=0;r=s;return a|0}n=a+12|0;o=a+8|0;p=(k[n>>2]|0)-(k[o>>2]|0)|0;q=a+24|0;c=k[q>>2]|0;l=a+28|0;d=k[l>>2]|0;do if((c|0)==(d|0)){h=a+48|0;if(!(k[h>>2]&16)){a=-1;r=s;return a|0}j=a+20|0;g=k[j>>2]|0;e=c-g|0;f=a+44|0;g=(k[f>>2]|0)-g|0;d=a+32|0;x=0;ra(55,d|0,0);c=x;x=0;if(!(c&1)){if(!(i[d>>0]&1))c=10;else c=(k[d>>2]&-2)+-1|0;x=0;Fa(6,d|0,c|0,0);c=x;x=0;if(!(c&1)){c=i[d>>0]|0;if(!(c&1)){d=d+1|0;c=(c&255)>>>1}else{d=k[a+40>>2]|0;c=k[a+36>>2]|0}t=d+c|0;k[j>>2]=d;k[l>>2]=t;j=d+e|0;k[q>>2]=j;c=d+g|0;k[f>>2]=c;d=t;break}}t=Wa(0)|0;cb(t|0)|0;eb();t=-1;r=s;return t|0}else{t=a+44|0;h=a+48|0;f=t;j=c;c=k[t>>2]|0}while(0);g=j+1|0;k[m>>2]=g;e=k[(g>>>0<c>>>0?f:m)>>2]|0;k[f>>2]=e;if(k[h>>2]&8){c=a+32|0;if(!(i[c>>0]&1))c=c+1|0;else c=k[a+40>>2]|0;k[o>>2]=c;k[n>>2]=c+p;k[a+16>>2]=e}if((j|0)==(d|0)){t=Vb[k[(k[a>>2]|0)+52>>2]&63](a,b&255)|0;r=s;return t|0}else{k[q>>2]=g;i[j>>0]=b;t=b&255;r=s;return t|0}return 0}function jd(a){a=a|0;var b=0,c=0;k[a>>2]=35800;b=a+56|0;k[b>>2]=35820;c=a+4|0;k[c>>2]=35836;wk(a+36|0);al(c);Vk(b);return}function kd(a){a=a|0;var b=0,c=0;k[a>>2]=35800;b=a+56|0;k[b>>2]=35820;c=a+4|0;k[c>>2]=35836;wk(a+36|0);al(c);Vk(b);Sg(a);return}function ld(a){a=a|0;var b=0,c=0,d=0,e=0;e=k[(k[a>>2]|0)+-12>>2]|0;b=a+e|0;k[b>>2]=35800;c=a+(e+56)|0;k[c>>2]=35820;d=a+(e+4)|0;k[d>>2]=35836;wk(a+(e+36)|0);al(d);Vk(c);Sg(b);return}function md(a){a=a|0;var b=0,c=0,d=0;k[a>>2]=35988;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}d=k[a+8>>2]|0;if(!d)return;b=a+12|0;c=k[b>>2]|0;if((c|0)!=(d|0))k[b>>2]=c+(~((c+-2-d|0)>>>1)<<1);Sg(d);return}function nd(a){a=a|0;var b=0,c=0,d=0;k[a>>2]=35988;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}d=k[a+8>>2]|0;if(!d){Sg(a);return}b=a+12|0;c=k[b>>2]|0;if((c|0)!=(d|0))k[b>>2]=c+(~((c+-2-d|0)>>>1)<<1);Sg(d);Sg(a);return}function od(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=a+36|0;if(!(k[e>>2]|0)){h=a+40|0;sd(a,b,k[h>>2]|0,c,d);k[h>>2]=(k[h>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}j=a+4|0;f=c<<1;g=ia(f,k[(k[j>>2]|0)+16>>2]|0)|0;h=a+20|0;sd(a,b,k[h>>2]|0,c,d);b=k[j>>2]|0;if((k[b+28>>2]|0)==536870912)Nc(k[h>>2]|0,ia(f,k[b+16>>2]|0)|0);j=k[e>>2]|0;if((Qb[k[(k[j>>2]|0)+48>>2]&63](j,k[h>>2]|0,g)|0)==(g|0))return;b=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,b|0,3,35472);j=x;x=0;if(j&1){j=Wa()|0;Ua(b|0);fb(j|0)}else ub(b|0,648,74)}function pd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=k[a+36>>2]|0;if(!e){e=a+40|0;qd(a,k[e>>2]|0,b,c,d);k[e>>2]=(k[e>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}else{rd(a,e,b,c,d);return}}function qd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,n=0,o=0;h=a+4|0;f=k[h>>2]|0;do if(!(i[f+32>>0]|0))l=b;else{a=a+8|0;$t(k[a>>2]|0,b|0,d*6|0)|0;f=k[h>>2]|0;g=k[f+16>>2]|0;if((d|0)<=0){l=k[a>>2]|0;break}a=k[a>>2]|0;f=a;b=0;while(1){l=f+4|0;n=j[f>>1]|0;j[f>>1]=j[l>>1]|0;j[l>>1]=n;b=b+1|0;if((b|0)==(d|0))break;else f=f+(g<<1)|0}l=a;f=k[h>>2]|0}while(0);switch(k[f+16>>2]|0){case 3:{if((k[f+24>>2]|0)==2){if((d|0)>0)f=0;else return;do{h=m[l+(f*6|0)+2>>1]|0;e=32768-h+(m[l+(f*6|0)+4>>1]|0)|0;n=(m[l+(f*6|0)>>1]|0)-h+32768|0;j[c+(f*6|0)>>1]=h+49152+(((e&65535)+(n&65535)|0)>>>2);j[c+(f*6|0)+2>>1]=e;j[c+(f*6|0)+4>>1]=n;f=f+1|0}while((f|0)!=(d|0));return}f=(e|0)<(d|0)?e:d;if((f|0)<=0)return;a=e<<1;b=0;do{h=m[l+(b*6|0)+2>>1]|0;d=32768-h+(m[l+(b*6|0)+4>>1]|0)|0;n=(m[l+(b*6|0)>>1]|0)-h+32768|0;j[c+(b<<1)>>1]=h+49152+(((d&65535)+(n&65535)|0)>>>2);j[c+(b+e<<1)>>1]=d;j[c+(b+a<<1)>>1]=n;b=b+1|0}while((b|0)!=(f|0));return}case 4:{if((k[f+24>>2]|0)!=1)return;f=(e|0)<(d|0)?e:d;if((f|0)<=0)return;a=e<<1;b=e*3|0;g=0;do{n=j[l+(g<<3)+6>>1]|0;o=m[l+(g<<3)+2>>1]|0;h=32768-o+(m[l+(g<<3)+4>>1]|0)|0;d=(m[l+(g<<3)>>1]|0)-o+32768|0;j[c+(g<<1)>>1]=o+49152+(((h&65535)+(d&65535)|0)>>>2);j[c+(g+e<<1)>>1]=h;j[c+(g+a<<1)>>1]=d;j[c+(g+b<<1)>>1]=n;g=g+1|0}while((g|0)!=(f|0));return}default:return}}function rd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;n=r;r=r+176|0;o=n+152|0;q=n+16|0;p=n;j=a+4|0;f=k[j>>2]|0;m=d<<1;g=ia(m,k[f+16>>2]|0)|0;do if(g){h=a+20|0;while(1){f=Qb[k[(k[b>>2]|0)+32>>2]&63](b,k[h>>2]|0,g)|0;if(!f)break;if((g|0)==(f|0)){l=26;break}else g=g-f|0}if((l|0)==26){f=k[j>>2]|0;break}l=q+56|0;j=q+4|0;k[q>>2]=35760;k[l>>2]=35780;x=0;ra(52,q+56|0,j|0);n=x;x=0;if(n&1){q=Wa()|0;Vk(l);fb(q|0)}k[q+128>>2]=0;k[q+132>>2]=-1;k[q>>2]=35800;k[q+56>>2]=35820;x=0;qa(158,j|0);n=x;x=0;do if(n&1)f=Wa()|0;else{k[j>>2]=35836;b=q+36|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[q+52>>2]=16;k[o>>2]=0;k[o+4>>2]=0;k[o+8>>2]=0;x=0;ra(53,j|0,o|0);n=x;x=0;if(n&1){f=Wa()|0;wk(o);wk(b);al(j);break}wk(o);x=0;f=va(28,q|0,48058,57)|0;o=x;x=0;if(!(o&1)?(x=0,Aa(27,f|0,0)|0,o=x,x=0,!(o&1)):0){h=Va(16)|0;x=0;ra(54,p|0,j|0);o=x;x=0;if(!(o&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,h|0,3,35472,p|0);o=x;x=0;if(o&1)g=1;else{x=0;Fa(5,h|0,648,74);x=0;g=0}f=Wa()|0;wk(p);if(!g){p=f;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}}else f=Wa()|0;Ua(h|0);p=f;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}p=Wa()|0;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}while(0);q=f;Vk(l);fb(q|0)}while(0);g=a+20|0;if((k[f+28>>2]|0)!=536870912){q=k[g>>2]|0;qd(a,q,c,d,e);r=n;return}Nc(k[g>>2]|0,ia(m,k[f+16>>2]|0)|0);q=k[g>>2]|0;qd(a,q,c,d,e);r=n;return}function sd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,n=0,o=0,p=0,q=0,r=0;l=a+4|0;a=k[l>>2]|0;a:do switch(k[a+16>>2]|0){case 3:{if((k[a+24>>2]|0)==2){if((d|0)>0)a=0;else break a;while(1){h=m[b+(a*6|0)+2>>1]|0;g=m[b+(a*6|0)+4>>1]|0;e=(m[b+(a*6|0)>>1]|0)-((g+h|0)>>>2)+16384|0;j[c+(a*6|0)>>1]=g+32768+e;j[c+(a*6|0)+2>>1]=e;j[c+(a*6|0)+4>>1]=h+32768+e;a=a+1|0;if((a|0)==(d|0))break a}}a=(d|0)<(e|0)?d:e;if((a|0)>0){f=e<<1;g=0;do{n=m[b+(g+e<<1)>>1]|0;o=m[b+(g+f<<1)>>1]|0;h=(m[b+(g<<1)>>1]|0)-((o+n|0)>>>2)+16384|0;j[c+(g*6|0)>>1]=o+32768+h;j[c+(g*6|0)+2>>1]=h;j[c+(g*6|0)+4>>1]=n+32768+h;g=g+1|0}while((g|0)!=(a|0))}break}case 4:{if((k[a+24>>2]|0)==1?(h=(d|0)<(e|0)?d:e,(h|0)>0):0){a=e<<1;f=e*3|0;g=0;do{n=m[b+(g+e<<1)>>1]|0;p=m[b+(g+a<<1)>>1]|0;o=(m[b+(g<<1)>>1]|0)-((p+n|0)>>>2)+16384|0;q=j[b+(g+f<<1)>>1]|0;r=au(o&65535|0,0,16)|0;n=n+32768+o|M;q=au(q&65535|0,0,48)|0;q=r|p+32768+o&65535|q;n=n&65535|M;o=c+(g<<3)|0;p=o;j[p>>1]=q;j[p+2>>1]=q>>>16;o=o+4|0;j[o>>1]=n;j[o+2>>1]=n>>>16;g=g+1|0}while((g|0)!=(h|0))}break}default:{}}while(0);a=k[l>>2]|0;if(!(i[a+32>>0]|0))return;g=k[a+16>>2]|0;if((d|0)<=0)return;a=c;f=0;while(1){r=a+4|0;q=j[a>>1]|0;j[a>>1]=j[r>>1]|0;j[r>>1]=q;f=f+1|0;if((f|0)==(d|0))break;else a=a+(g<<1)|0}return}function td(a){a=a|0;var b=0,c=0,d=0;k[a>>2]=36012;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}d=k[a+8>>2]|0;if(!d)return;b=a+12|0;c=k[b>>2]|0;if((c|0)!=(d|0))k[b>>2]=c+(~((c+-2-d|0)>>>1)<<1);Sg(d);return}function ud(a){a=a|0;var b=0,c=0,d=0;k[a>>2]=36012;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}d=k[a+8>>2]|0;if(!d){Sg(a);return}b=a+12|0;c=k[b>>2]|0;if((c|0)!=(d|0))k[b>>2]=c+(~((c+-2-d|0)>>>1)<<1);Sg(d);Sg(a);return}function vd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=a+36|0;if(!(k[e>>2]|0)){h=a+40|0;zd(a,b,k[h>>2]|0,c,d);k[h>>2]=(k[h>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}j=a+4|0;f=c<<1;g=ia(f,k[(k[j>>2]|0)+16>>2]|0)|0;h=a+20|0;zd(a,b,k[h>>2]|0,c,d);b=k[j>>2]|0;if((k[b+28>>2]|0)==536870912)Nc(k[h>>2]|0,ia(f,k[b+16>>2]|0)|0);j=k[e>>2]|0;if((Qb[k[(k[j>>2]|0)+48>>2]&63](j,k[h>>2]|0,g)|0)==(g|0))return;b=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,b|0,3,35472);j=x;x=0;if(j&1){j=Wa()|0;Ua(b|0);fb(j|0)}else ub(b|0,648,74)}function wd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=k[a+36>>2]|0;if(!e){e=a+40|0;xd(a,k[e>>2]|0,b,c,d);k[e>>2]=(k[e>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}else{yd(a,e,b,c,d);return}}function xd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,n=0,o=0,p=0;h=a+4|0;f=k[h>>2]|0;do if(!(i[f+32>>0]|0))l=b;else{a=a+8|0;$t(k[a>>2]|0,b|0,d*6|0)|0;f=k[h>>2]|0;g=k[f+16>>2]|0;if((d|0)<=0){l=k[a>>2]|0;break}a=k[a>>2]|0;f=a;b=0;while(1){l=f+4|0;n=j[f>>1]|0;j[f>>1]=j[l>>1]|0;j[l>>1]=n;b=b+1|0;if((b|0)==(d|0))break;else f=f+(g<<1)|0}l=a;f=k[h>>2]|0}while(0);switch(k[f+16>>2]|0){case 3:{if((k[f+24>>2]|0)==2){if((d|0)>0)f=0;else return;do{g=m[l+(f*6|0)>>1]|0;e=j[l+(f*6|0)+2>>1]|0;h=e&65535;n=(m[l+(f*6|0)+4>>1]|0)+32768-((h+g|0)>>>1)&65535;j[c+(f*6|0)>>1]=g+32768-h;j[c+(f*6|0)+2>>1]=e;j[c+(f*6|0)+4>>1]=n;f=f+1|0}while((f|0)!=(d|0));return}f=(e|0)<(d|0)?e:d;if((f|0)<=0)return;a=e<<1;b=0;do{d=j[l+(b*6|0)+2>>1]|0;g=m[l+(b*6|0)>>1]|0;h=d&65535;n=(m[l+(b*6|0)+4>>1]|0)+32768-((h+g|0)>>>1)&65535;j[c+(b<<1)>>1]=g+32768-h;j[c+(b+e<<1)>>1]=d;j[c+(b+a<<1)>>1]=n;b=b+1|0}while((b|0)!=(f|0));return}case 4:{if((k[f+24>>2]|0)!=1)return;f=(e|0)<(d|0)?e:d;if((f|0)<=0)return;a=e<<1;b=e*3|0;g=0;do{h=j[l+(g<<3)+2>>1]|0;n=j[l+(g<<3)+6>>1]|0;p=m[l+(g<<3)>>1]|0;o=h&65535;d=(m[l+(g<<3)+4>>1]|0)+32768-((o+p|0)>>>1)&65535;j[c+(g<<1)>>1]=p+32768-o;j[c+(g+e<<1)>>1]=h;j[c+(g+a<<1)>>1]=d;j[c+(g+b<<1)>>1]=n;g=g+1|0}while((g|0)!=(f|0));return}default:return}}function yd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;n=r;r=r+176|0;o=n+152|0;q=n+16|0;p=n;j=a+4|0;f=k[j>>2]|0;m=d<<1;g=ia(m,k[f+16>>2]|0)|0;do if(g){h=a+20|0;while(1){f=Qb[k[(k[b>>2]|0)+32>>2]&63](b,k[h>>2]|0,g)|0;if(!f)break;if((g|0)==(f|0)){l=26;break}else g=g-f|0}if((l|0)==26){f=k[j>>2]|0;break}l=q+56|0;j=q+4|0;k[q>>2]=35760;k[l>>2]=35780;x=0;ra(52,q+56|0,j|0);n=x;x=0;if(n&1){q=Wa()|0;Vk(l);fb(q|0)}k[q+128>>2]=0;k[q+132>>2]=-1;k[q>>2]=35800;k[q+56>>2]=35820;x=0;qa(158,j|0);n=x;x=0;do if(n&1)f=Wa()|0;else{k[j>>2]=35836;b=q+36|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[q+52>>2]=16;k[o>>2]=0;k[o+4>>2]=0;k[o+8>>2]=0;x=0;ra(53,j|0,o|0);n=x;x=0;if(n&1){f=Wa()|0;wk(o);wk(b);al(j);break}wk(o);x=0;f=va(28,q|0,48058,57)|0;o=x;x=0;if(!(o&1)?(x=0,Aa(27,f|0,0)|0,o=x,x=0,!(o&1)):0){h=Va(16)|0;x=0;ra(54,p|0,j|0);o=x;x=0;if(!(o&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,h|0,3,35472,p|0);o=x;x=0;if(o&1)g=1;else{x=0;Fa(5,h|0,648,74);x=0;g=0}f=Wa()|0;wk(p);if(!g){p=f;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}}else f=Wa()|0;Ua(h|0);p=f;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}p=Wa()|0;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}while(0);q=f;Vk(l);fb(q|0)}while(0);g=a+20|0;if((k[f+28>>2]|0)!=536870912){q=k[g>>2]|0;xd(a,q,c,d,e);r=n;return}Nc(k[g>>2]|0,ia(m,k[f+16>>2]|0)|0);q=k[g>>2]|0;xd(a,q,c,d,e);r=n;return}function zd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,n=0,o=0,p=0,q=0;l=a+4|0;a=k[l>>2]|0;a:do switch(k[a+16>>2]|0){case 3:{if((k[a+24>>2]|0)==2){if((d|0)>0)a=0;else break a;while(1){h=j[b+(a*6|0)+2>>1]|0;e=h&65535;g=(m[b+(a*6|0)>>1]|0)+32768+e|0;e=(m[b+(a*6|0)+4>>1]|0)+32768+(((g&65535)+e|0)>>>1)&65535;j[c+(a*6|0)>>1]=g;j[c+(a*6|0)+2>>1]=h;j[c+(a*6|0)+4>>1]=e;a=a+1|0;if((a|0)==(d|0))break a}}a=(d|0)<(e|0)?d:e;if((a|0)>0){f=e<<1;g=0;do{n=j[b+(g+e<<1)>>1]|0;h=n&65535;o=(m[b+(g<<1)>>1]|0)+32768+h|0;h=(m[b+(g+f<<1)>>1]|0)+32768+(((o&65535)+h|0)>>>1)&65535;j[c+(g*6|0)>>1]=o;j[c+(g*6|0)+2>>1]=n;j[c+(g*6|0)+4>>1]=h;g=g+1|0}while((g|0)!=(a|0))}break}case 4:{if((k[a+24>>2]|0)==1?(h=(d|0)<(e|0)?d:e,(h|0)>0):0){a=e<<1;f=e*3|0;g=0;do{o=j[b+(g+e<<1)>>1]|0;n=o&65535;p=(m[b+(g<<1)>>1]|0)+32768+n&65535;n=(m[b+(g+a<<1)>>1]|0)+32768+((p+n|0)>>>1)|0;q=j[b+(g+f<<1)>>1]|0;o=au(o&65535|0,0,16)|0;n=M|n;q=au(q&65535|0,0,48)|0;q=p|o|q;n=n&65535|M;o=c+(g<<3)|0;p=o;j[p>>1]=q;j[p+2>>1]=q>>>16;o=o+4|0;j[o>>1]=n;j[o+2>>1]=n>>>16;g=g+1|0}while((g|0)!=(h|0))}break}default:{}}while(0);a=k[l>>2]|0;if(!(i[a+32>>0]|0))return;g=k[a+16>>2]|0;if((d|0)<=0)return;a=c;f=0;while(1){q=a+4|0;p=j[a>>1]|0;j[a>>1]=j[q>>1]|0;j[q>>1]=p;f=f+1|0;if((f|0)==(d|0))break;else a=a+(g<<1)|0}return}function Ad(a){a=a|0;var b=0,c=0,d=0;k[a>>2]=36036;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}d=k[a+8>>2]|0;if(!d)return;b=a+12|0;c=k[b>>2]|0;if((c|0)!=(d|0))k[b>>2]=c+(~((c+-2-d|0)>>>1)<<1);Sg(d);return}function Bd(a){a=a|0;var b=0,c=0,d=0;k[a>>2]=36036;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}d=k[a+8>>2]|0;if(!d){Sg(a);return}b=a+12|0;c=k[b>>2]|0;if((c|0)!=(d|0))k[b>>2]=c+(~((c+-2-d|0)>>>1)<<1);Sg(d);Sg(a);return}function Cd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=a+36|0;if(!(k[e>>2]|0)){h=a+40|0;Gd(a,b,k[h>>2]|0,c,d);k[h>>2]=(k[h>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}j=a+4|0;f=c<<1;g=ia(f,k[(k[j>>2]|0)+16>>2]|0)|0;h=a+20|0;Gd(a,b,k[h>>2]|0,c,d);b=k[j>>2]|0;if((k[b+28>>2]|0)==536870912)Nc(k[h>>2]|0,ia(f,k[b+16>>2]|0)|0);j=k[e>>2]|0;if((Qb[k[(k[j>>2]|0)+48>>2]&63](j,k[h>>2]|0,g)|0)==(g|0))return;b=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,b|0,3,35472);j=x;x=0;if(j&1){j=Wa()|0;Ua(b|0);fb(j|0)}else ub(b|0,648,74)}function Dd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=k[a+36>>2]|0;if(!e){e=a+40|0;Ed(a,k[e>>2]|0,b,c,d);k[e>>2]=(k[e>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}else{Fd(a,e,b,c,d);return}}function Ed(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,n=0,o=0;h=a+4|0;f=k[h>>2]|0;do if(!(i[f+32>>0]|0))l=b;else{a=a+8|0;$t(k[a>>2]|0,b|0,d*6|0)|0;f=k[h>>2]|0;g=k[f+16>>2]|0;if((d|0)<=0){l=k[a>>2]|0;break}a=k[a>>2]|0;f=a;b=0;while(1){l=f+4|0;n=j[f>>1]|0;j[f>>1]=j[l>>1]|0;j[l>>1]=n;b=b+1|0;if((b|0)==(d|0))break;else f=f+(g<<1)|0}l=a;f=k[h>>2]|0}while(0);switch(k[f+16>>2]|0){case 3:{if((k[f+24>>2]|0)==2){if((d|0)>0)f=0;else return;do{e=j[l+(f*6|0)+2>>1]|0;h=e&65535;n=32768-h+(m[l+(f*6|0)+4>>1]|0)&65535;j[c+(f*6|0)>>1]=(m[l+(f*6|0)>>1]|0)+32768-h;j[c+(f*6|0)+2>>1]=e;j[c+(f*6|0)+4>>1]=n;f=f+1|0}while((f|0)!=(d|0));return}f=(e|0)<(d|0)?e:d;if((f|0)<=0)return;a=e<<1;b=0;do{d=j[l+(b*6|0)+2>>1]|0;h=d&65535;n=32768-h+(m[l+(b*6|0)+4>>1]|0)&65535;j[c+(b<<1)>>1]=(m[l+(b*6|0)>>1]|0)+32768-h;j[c+(b+e<<1)>>1]=d;j[c+(b+a<<1)>>1]=n;b=b+1|0}while((b|0)!=(f|0));return}case 4:{if((k[f+24>>2]|0)!=1)return;f=(e|0)<(d|0)?e:d;if((f|0)<=0)return;a=e<<1;b=e*3|0;g=0;do{h=j[l+(g<<3)+2>>1]|0;n=j[l+(g<<3)+6>>1]|0;o=h&65535;d=32768-o+(m[l+(g<<3)+4>>1]|0)&65535;j[c+(g<<1)>>1]=(m[l+(g<<3)>>1]|0)+32768-o;j[c+(g+e<<1)>>1]=h;j[c+(g+a<<1)>>1]=d;j[c+(g+b<<1)>>1]=n;g=g+1|0}while((g|0)!=(f|0));return}default:return}}function Fd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;n=r;r=r+176|0;o=n+152|0;q=n+16|0;p=n;j=a+4|0;f=k[j>>2]|0;m=d<<1;g=ia(m,k[f+16>>2]|0)|0;do if(g){h=a+20|0;while(1){f=Qb[k[(k[b>>2]|0)+32>>2]&63](b,k[h>>2]|0,g)|0;if(!f)break;if((g|0)==(f|0)){l=26;break}else g=g-f|0}if((l|0)==26){f=k[j>>2]|0;break}l=q+56|0;j=q+4|0;k[q>>2]=35760;k[l>>2]=35780;x=0;ra(52,q+56|0,j|0);n=x;x=0;if(n&1){q=Wa()|0;Vk(l);fb(q|0)}k[q+128>>2]=0;k[q+132>>2]=-1;k[q>>2]=35800;k[q+56>>2]=35820;x=0;qa(158,j|0);n=x;x=0;do if(n&1)f=Wa()|0;else{k[j>>2]=35836;b=q+36|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[q+52>>2]=16;k[o>>2]=0;k[o+4>>2]=0;k[o+8>>2]=0;x=0;ra(53,j|0,o|0);n=x;x=0;if(n&1){f=Wa()|0;wk(o);wk(b);al(j);break}wk(o);x=0;f=va(28,q|0,48058,57)|0;o=x;x=0;if(!(o&1)?(x=0,Aa(27,f|0,0)|0,o=x,x=0,!(o&1)):0){h=Va(16)|0;x=0;ra(54,p|0,j|0);o=x;x=0;if(!(o&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,h|0,3,35472,p|0);o=x;x=0;if(o&1)g=1;else{x=0;Fa(5,h|0,648,74);x=0;g=0}f=Wa()|0;wk(p);if(!g){p=f;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}}else f=Wa()|0;Ua(h|0);p=f;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}p=Wa()|0;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}while(0);q=f;Vk(l);fb(q|0)}while(0);g=a+20|0;if((k[f+28>>2]|0)!=536870912){q=k[g>>2]|0;Ed(a,q,c,d,e);r=n;return}Nc(k[g>>2]|0,ia(m,k[f+16>>2]|0)|0);q=k[g>>2]|0;Ed(a,q,c,d,e);r=n;return}function Gd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,n=0,o=0,p=0,q=0;l=a+4|0;a=k[l>>2]|0;a:do switch(k[a+16>>2]|0){case 3:{if((k[a+24>>2]|0)==2){if((d|0)>0)a=0;else break a;while(1){h=j[b+(a*6|0)+2>>1]|0;g=h&65535;e=g+32768+(m[b+(a*6|0)+4>>1]|0)&65535;j[c+(a*6|0)>>1]=(m[b+(a*6|0)>>1]|0)+32768+g;j[c+(a*6|0)+2>>1]=h;j[c+(a*6|0)+4>>1]=e;a=a+1|0;if((a|0)==(d|0))break a}}a=(d|0)<(e|0)?d:e;if((a|0)>0){f=e<<1;g=0;do{n=j[b+(g+e<<1)>>1]|0;o=n&65535;h=o+32768+(m[b+(g+f<<1)>>1]|0)&65535;j[c+(g*6|0)>>1]=(m[b+(g<<1)>>1]|0)+32768+o;j[c+(g*6|0)+2>>1]=n;j[c+(g*6|0)+4>>1]=h;g=g+1|0}while((g|0)!=(a|0))}break}case 4:{if((k[a+24>>2]|0)==1?(h=(d|0)<(e|0)?d:e,(h|0)>0):0){a=e<<1;f=e*3|0;g=0;do{o=j[b+(g+e<<1)>>1]|0;n=o&65535;p=(m[b+(g<<1)>>1]|0)+32768+n|0;n=n+32768+(m[b+(g+a<<1)>>1]|0)|0;q=j[b+(g+f<<1)>>1]|0;o=au(o&65535|0,0,16)|0;n=M|n;q=au(q&65535|0,0,48)|0;q=p&65535|o|q;n=n&65535|M;o=c+(g<<3)|0;p=o;j[p>>1]=q;j[p+2>>1]=q>>>16;o=o+4|0;j[o>>1]=n;j[o+2>>1]=n>>>16;g=g+1|0}while((g|0)!=(h|0))}break}default:{}}while(0);a=k[l>>2]|0;if(!(i[a+32>>0]|0))return;g=k[a+16>>2]|0;if((d|0)<=0)return;a=c;f=0;while(1){q=a+4|0;p=j[a>>1]|0;j[a>>1]=j[q>>1]|0;j[q>>1]=p;f=f+1|0;if((f|0)==(d|0))break;else a=a+(g<<1)|0}return}function Hd(a){a=a|0;var b=0,c=0,d=0;k[a>>2]=36060;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}d=k[a+8>>2]|0;if(!d)return;b=a+12|0;c=k[b>>2]|0;if((c|0)!=(d|0))k[b>>2]=c+(~((c+-2-d|0)>>>1)<<1);Sg(d);return}function Id(a){a=a|0;var b=0,c=0,d=0;k[a>>2]=36060;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}d=k[a+8>>2]|0;if(!d){Sg(a);return}b=a+12|0;c=k[b>>2]|0;if((c|0)!=(d|0))k[b>>2]=c+(~((c+-2-d|0)>>>1)<<1);Sg(d);Sg(a);return}function Jd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=a+36|0;if(!(k[e>>2]|0)){h=a+40|0;Nd(a,b,k[h>>2]|0,c,d);k[h>>2]=(k[h>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}j=a+4|0;f=c<<1;g=ia(f,k[(k[j>>2]|0)+16>>2]|0)|0;h=a+20|0;Nd(a,b,k[h>>2]|0,c,d);b=k[j>>2]|0;if((k[b+28>>2]|0)==536870912)Nc(k[h>>2]|0,ia(f,k[b+16>>2]|0)|0);j=k[e>>2]|0;if((Qb[k[(k[j>>2]|0)+48>>2]&63](j,k[h>>2]|0,g)|0)==(g|0))return;b=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,b|0,3,35472);j=x;x=0;if(j&1){j=Wa()|0;Ua(b|0);fb(j|0)}else ub(b|0,648,74)}function Kd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=k[a+36>>2]|0;if(!e){e=a+40|0;Ld(a,k[e>>2]|0,b,c,d);k[e>>2]=(k[e>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}else{Md(a,e,b,c,d);return}}function Ld(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,m=0;h=a+4|0;f=k[h>>2]|0;do if(!(i[f+32>>0]|0))l=b;else{a=a+8|0;$t(k[a>>2]|0,b|0,d*6|0)|0;f=k[h>>2]|0;g=k[f+16>>2]|0;if((d|0)<=0){l=k[a>>2]|0;break}a=k[a>>2]|0;f=a;b=0;while(1){l=f+4|0;m=j[f>>1]|0;j[f>>1]=j[l>>1]|0;j[l>>1]=m;b=b+1|0;if((b|0)==(d|0))break;else f=f+(g<<1)|0}l=a;f=k[h>>2]|0}while(0);switch(k[f+16>>2]|0){case 3:{if((k[f+24>>2]|0)==2){if((d|0)>0)f=0;else return;do{e=j[l+(f*6|0)+2>>1]|0;m=j[l+(f*6|0)+4>>1]|0;j[c+(f*6|0)>>1]=j[l+(f*6|0)>>1]|0;j[c+(f*6|0)+2>>1]=e;j[c+(f*6|0)+4>>1]=m;f=f+1|0}while((f|0)!=(d|0));return}f=(e|0)<(d|0)?e:d;if((f|0)<=0)return;a=e<<1;b=0;do{d=j[l+(b*6|0)+2>>1]|0;m=j[l+(b*6|0)+4>>1]|0;j[c+(b<<1)>>1]=j[l+(b*6|0)>>1]|0;j[c+(b+e<<1)>>1]=d;j[c+(b+a<<1)>>1]=m;b=b+1|0}while((b|0)!=(f|0));return}case 4:{if((k[f+24>>2]|0)!=1)return;f=(e|0)<(d|0)?e:d;if((f|0)<=0)return;a=e<<1;b=e*3|0;g=0;do{h=j[l+(g<<3)+2>>1]|0;d=j[l+(g<<3)+4>>1]|0;m=j[l+(g<<3)+6>>1]|0;j[c+(g<<1)>>1]=j[l+(g<<3)>>1]|0;j[c+(g+e<<1)>>1]=h;j[c+(g+a<<1)>>1]=d;j[c+(g+b<<1)>>1]=m;g=g+1|0}while((g|0)!=(f|0));return}default:return}}function Md(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;n=r;r=r+176|0;o=n+152|0;q=n+16|0;p=n;j=a+4|0;f=k[j>>2]|0;m=d<<1;g=ia(m,k[f+16>>2]|0)|0;do if(g){h=a+20|0;while(1){f=Qb[k[(k[b>>2]|0)+32>>2]&63](b,k[h>>2]|0,g)|0;if(!f)break;if((g|0)==(f|0)){l=26;break}else g=g-f|0}if((l|0)==26){f=k[j>>2]|0;break}l=q+56|0;j=q+4|0;k[q>>2]=35760;k[l>>2]=35780;x=0;ra(52,q+56|0,j|0);n=x;x=0;if(n&1){q=Wa()|0;Vk(l);fb(q|0)}k[q+128>>2]=0;k[q+132>>2]=-1;k[q>>2]=35800;k[q+56>>2]=35820;x=0;qa(158,j|0);n=x;x=0;do if(n&1)f=Wa()|0;else{k[j>>2]=35836;b=q+36|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[q+52>>2]=16;k[o>>2]=0;k[o+4>>2]=0;k[o+8>>2]=0;x=0;ra(53,j|0,o|0);n=x;x=0;if(n&1){f=Wa()|0;wk(o);wk(b);al(j);break}wk(o);x=0;f=va(28,q|0,48058,57)|0;o=x;x=0;if(!(o&1)?(x=0,Aa(27,f|0,0)|0,o=x,x=0,!(o&1)):0){h=Va(16)|0;x=0;ra(54,p|0,j|0);o=x;x=0;if(!(o&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,h|0,3,35472,p|0);o=x;x=0;if(o&1)g=1;else{x=0;Fa(5,h|0,648,74);x=0;g=0}f=Wa()|0;wk(p);if(!g){p=f;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}}else f=Wa()|0;Ua(h|0);p=f;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}p=Wa()|0;k[q>>2]=35800;k[l>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(l);fb(p|0)}while(0);q=f;Vk(l);fb(q|0)}while(0);g=a+20|0;if((k[f+28>>2]|0)!=536870912){q=k[g>>2]|0;Ld(a,q,c,d,e);r=n;return}Nc(k[g>>2]|0,ia(m,k[f+16>>2]|0)|0);q=k[g>>2]|0;Ld(a,q,c,d,e);r=n;return}function Nd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,n=0,o=0,p=0,q=0;l=a+4|0;a=k[l>>2]|0;a:do switch(k[a+16>>2]|0){case 3:{if((k[a+24>>2]|0)==2){if((d|0)>0)a=0;else break a;while(1){h=j[b+(a*6|0)+2>>1]|0;e=j[b+(a*6|0)+4>>1]|0;j[c+(a*6|0)>>1]=j[b+(a*6|0)>>1]|0;j[c+(a*6|0)+2>>1]=h;j[c+(a*6|0)+4>>1]=e;a=a+1|0;if((a|0)==(d|0))break a}}a=(d|0)<(e|0)?d:e;if((a|0)>0){f=e<<1;g=0;do{n=j[b+(g+e<<1)>>1]|0;h=j[b+(g+f<<1)>>1]|0;j[c+(g*6|0)>>1]=j[b+(g<<1)>>1]|0;j[c+(g*6|0)+2>>1]=n;j[c+(g*6|0)+4>>1]=h;g=g+1|0}while((g|0)!=(a|0))}break}case 4:{if((k[a+24>>2]|0)==1?(h=(d|0)<(e|0)?d:e,(h|0)>0):0){a=e<<1;f=e*3|0;g=0;do{n=j[b+(g<<1)>>1]|0;q=j[b+(g+f<<1)>>1]|0;o=m[b+(g+a<<1)>>1]|0;p=au(m[b+(g+e<<1)>>1]|0,0,16)|0;o=M|o;q=au(q&65535|0,0,48)|0;q=p|n&65535|q;o=o&65535|M;n=c+(g<<3)|0;p=n;j[p>>1]=q;j[p+2>>1]=q>>>16;n=n+4|0;j[n>>1]=o;j[n+2>>1]=o>>>16;g=g+1|0}while((g|0)!=(h|0))}break}default:{}}while(0);a=k[l>>2]|0;if(!(i[a+32>>0]|0))return;g=k[a+16>>2]|0;if((d|0)<=0)return;a=c;f=0;while(1){q=a+4|0;p=j[a>>1]|0;j[a>>1]=j[q>>1]|0;j[q>>1]=p;f=f+1|0;if((f|0)==(d|0))break;else a=a+(g<<1)|0}return}function Od(a){a=a|0;return}function Pd(a){a=a|0;Sg(a);return}function Qd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;c=ia(k[a+8>>2]|0,c)|0;a=k[a+4>>2]|0;if((Qb[k[(k[a>>2]|0)+48>>2]&63](a,b,c)|0)==(c|0))return;d=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,d|0,3,35472);a=x;x=0;if(a&1){a=Wa()|0;Ua(d|0);fb(a|0)}else ub(d|0,648,74)}function Rd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0;m=r;r=r+16|0;l=m;j=a+8|0;e=k[j>>2]|0;d=ia(e,c)|0;do if(d){g=a+4|0;f=d;while(1){e=k[g>>2]|0;e=Qb[k[(k[e>>2]|0)+32>>2]&63](e,b,f)|0;if(!e)break;d=f-e|0;if((f|0)==(e|0)){h=11;break}else f=d}if((h|0)==11){e=k[j>>2]|0;f=d;break}d=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,d|0,3,35472);a=x;x=0;if(a&1){a=Wa()|0;Ua(d|0);fb(a|0)}else ub(d|0,648,74)}else f=0;while(0);if((e|0)==2){Nc(b,c<<1);e=k[j>>2]|0}d=k[a+12>>2]|0;if((d|0)<=(ia(e,c)|0)){r=m;return}a=k[a+4>>2]|0;Sb[k[(k[a>>2]|0)+16>>2]&15](l,a,d-f|0,0,1,24);r=m;return}function Sd(a){a=a|0;Sg(a);return}function Td(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=a+4|0;$t(k[d>>2]|0,b|0,ia(k[a+8>>2]|0,c)|0)|0;k[d>>2]=(k[d>>2]|0)+(k[a+12>>2]|0);return}function Ud(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=a+4|0;$t(b|0,k[d>>2]|0,ia(k[a+8>>2]|0,c)|0)|0;k[d>>2]=(k[d>>2]|0)+(k[a+12>>2]|0);return}function Vd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0;k[a+112>>2]=0;k[a+108>>2]=0;l=k[b>>2]|0;e=l;do if(l){g=a+92|0;l=a+96|0;h=k[l>>2]|0;j=k[g>>2]|0;c=j;d=h-c|0;if(d>>>0>=4e4)if(d>>>0>4e4?(f=j+4e4|0,(h|0)!=(f|0)):0){k[l>>2]=f;f=c}else f=c;else{Wd(g,4e4-d|0);f=k[g>>2]|0;e=k[b>>2]|0}c=a+116|0;k[c>>2]=f;h=a+124|0;k[h>>2]=f;j=a+104|0;k[j>>2]=e;d=e;if(e){if((k[d+12>>2]|0)==(k[d+16>>2]|0)){b=(Ob[k[(k[e>>2]|0)+36>>2]&127](d)|0)==-1;d=k[h>>2]|0;if(b)break;e=k[c>>2]|0}else{d=f;e=f}g=d-e|0;if(g>>>0<=64){f=a+92|0;if((d|0)==(e|0))d=e;else{d=e;e=0;do{i[(k[f>>2]|0)+e>>0]=i[d+e>>0]|0;e=e+1|0;d=k[c>>2]|0}while(e>>>0<g>>>0);e=k[h>>2]|0}f=k[f>>2]|0;b=f;m=b-d|0;k[c>>2]=f;d=e+m|0;k[h>>2]=d;f=a+120|0;k[f>>2]=(k[f>>2]|0)+m;j=k[j>>2]|0;d=Qb[k[(k[j>>2]|0)+32>>2]&63](j,d,(k[l>>2]|0)-(b+g)|0)|0;d=(k[h>>2]|0)+d|0;k[h>>2]=d}}else d=f}else{k[a+104>>2]=0;d=k[b+4>>2]|0;c=a+116|0;k[c>>2]=d;d=d+(k[b+8>>2]|0)|0;k[a+124>>2]=d}while(0);c=k[c>>2]|0;if(c>>>0>=d>>>0){l=c;m=a+120|0;k[m>>2]=l;Xd(a);return}while(1){if((i[c>>0]|0)==-1){d=20;break}c=c+1|0;if(c>>>0>=d>>>0){d=20;break}}if((d|0)==20){m=a+120|0;k[m>>2]=c;Xd(a);return}}function Wd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0;j=a+8|0;e=k[j>>2]|0;l=a+4|0;c=k[l>>2]|0;d=c;if((e-d|0)>>>0>=b>>>0){do{i[c>>0]=0;c=(k[l>>2]|0)+1|0;k[l>>2]=c;b=b+-1|0}while((b|0)!=0);return}c=k[a>>2]|0;f=d-c+b|0;if((f|0)<0){Pg(a);e=k[j>>2]|0;c=k[a>>2]|0}d=e-c|0;if(d>>>0<1073741823){d=d<<1;d=d>>>0<f>>>0?f:d;c=(k[l>>2]|0)-c|0;if(!d){e=0;g=0;f=c}else h=8}else{d=2147483647;c=(k[l>>2]|0)-c|0;h=8}if((h|0)==8){e=d;g=Rg(d)|0;f=c}c=g+f|0;e=g+e|0;d=c;do{i[d>>0]=0;d=c+1|0;c=d;b=b+-1|0}while((b|0)!=0);b=k[a>>2]|0;d=(k[l>>2]|0)-b|0;h=g+(f-d)|0;$t(h|0,b|0,d|0)|0;k[a>>2]=h;k[l>>2]=c;k[j>>2]=e;if(!b)return;Sg(b);return}function Xd(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,m=0,n=0;h=a+116|0;b=k[h>>2]|0;j=a+120|0;if(b>>>0<((k[j>>2]|0)+-3|0)>>>0){j=a+112|0;g=k[j>>2]|0;a=a+108|0;k[a>>2]=(l[b+1>>0]<<16|l[b>>0]<<24|l[b+2>>0]<<8|l[b+3>>0])>>>g|k[a>>2];a=32-g>>3;k[h>>2]=b+a;k[j>>2]=(a<<3)+g;return}g=a+104|0;c=k[g>>2]|0;do if(c){if((k[c+12>>2]|0)==(k[c+16>>2]|0)){if((Ob[k[(k[c>>2]|0)+36>>2]&127](c)|0)==-1)break;b=k[h>>2]|0}e=a+124|0;c=k[e>>2]|0;f=c-b|0;if(f>>>0<=64){d=a+92|0;if((c|0)==(b|0))c=b;else{c=0;do{i[(k[d>>2]|0)+c>>0]=i[b+c>>0]|0;c=c+1|0;b=k[h>>2]|0}while(c>>>0<f>>>0);c=b;b=k[e>>2]|0}n=k[d>>2]|0;d=n;m=d-c|0;k[h>>2]=n;c=b+m|0;k[e>>2]=c;k[j>>2]=(k[j>>2]|0)+m;g=k[g>>2]|0;g=Qb[k[(k[g>>2]|0)+32>>2]&63](g,c,(k[a+96>>2]|0)-(d+f)|0)|0;k[e>>2]=(k[e>>2]|0)+g}}while(0);g=a+112|0;f=a+108|0;a=k[a+124>>2]|0;e=a+-1|0;b=k[h>>2]|0;while(1){if(b>>>0>=a>>>0){c=14;break}d=i[b>>0]|0;c=d&255;d=d<<24>>24==-1;if(d){if((b|0)==(e|0)){c=25;break}b=b+1|0;if((i[b>>0]|0)<0){c=25;break}}else b=b+1|0;n=k[g>>2]|0;k[f>>2]=c<<24-n|k[f>>2];k[h>>2]=b;n=n+(d?7:8)|0;k[g>>2]=n;if((n|0)>=24){c=33;break}}if((c|0)==14){if((k[g>>2]|0)>=1)return;b=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,b|0,5,35472);n=x;x=0;if(!(n&1))ub(b|0,648,74);n=Wa()|0;Ua(b|0);fb(n|0)}else if((c|0)==25){if((k[g>>2]|0)>=1)return;b=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,b|0,5,35472);n=x;x=0;if(!(n&1))ub(b|0,648,74);n=Wa()|0;Ua(b|0);fb(n|0)}else if((c|0)==33){a:do if(b>>>0<a>>>0)do{if((i[b>>0]|0)==-1)break a;b=b+1|0}while(b>>>0<a>>>0);while(0);k[j>>2]=b;return}}function Yd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0;j=a+8|0;e=k[j>>2]|0;l=a+4|0;c=k[l>>2]|0;d=c;if((e-d|0)>>>0>=b>>>0){do{i[c>>0]=0;c=(k[l>>2]|0)+1|0;k[l>>2]=c;b=b+-1|0}while((b|0)!=0);return}c=k[a>>2]|0;f=d-c+b|0;if((f|0)<0){Pg(a);e=k[j>>2]|0;c=k[a>>2]|0}d=e-c|0;if(d>>>0<1073741823){d=d<<1;d=d>>>0<f>>>0?f:d;c=(k[l>>2]|0)-c|0;if(!d){e=0;g=0;f=c}else h=8}else{d=2147483647;c=(k[l>>2]|0)-c|0;h=8}if((h|0)==8){e=d;g=Rg(d)|0;f=c}c=g+f|0;e=g+e|0;d=c;do{i[d>>0]=0;d=c+1|0;c=d;b=b+-1|0}while((b|0)!=0);b=k[a>>2]|0;d=(k[l>>2]|0)-b|0;h=g+(f-d)|0;$t(h|0,b|0,d|0)|0;k[a>>2]=h;k[l>>2]=c;k[j>>2]=e;if(!b)return;Sg(b);return}function Zd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0;k[a>>2]=36284;k[a+4>>2]=c;m=a+8|0;d=k[c>>2]|0;j=c+16|0;g=k[j>>2]|0;f=ia(g,d)|0;k[m>>2]=0;n=a+12|0;k[n>>2]=0;k[a+16>>2]=0;do if(!f)f=g;else{if(!((f|0)<0?(x=0,qa(155,m|0),g=x,x=0,g&1):0))l=4;if((l|0)==4?(x=0,h=ta(66,f|0)|0,g=x,x=0,!(g&1)):0){k[n>>2]=h;k[m>>2]=h;k[a+16>>2]=h+f;d=h;do{i[d>>0]=0;d=(k[n>>2]|0)+1|0;k[n>>2]=d;f=f+-1|0}while((f|0)!=0);f=k[j>>2]|0;d=k[c>>2]|0;break}d=Wa()|0;e=k[m>>2]|0;if(e){if((k[n>>2]|0)!=(e|0))k[n>>2]=e;Sg(e)}n=d;fb(n|0)}while(0);g=a+20|0;d=ia(f,d)|0;k[g>>2]=0;f=a+24|0;k[f>>2]=0;k[a+28>>2]=0;if(!d){n=a+36|0;k[n>>2]=k[b>>2];k[n+4>>2]=k[b+4>>2];k[n+8>>2]=k[b+8>>2];return}if(!((d|0)<0?(x=0,qa(155,g|0),c=x,x=0,c&1):0))l=15;if((l|0)==15?(x=0,e=ta(66,d|0)|0,l=x,x=0,!(l&1)):0){k[f>>2]=e;k[g>>2]=e;k[a+28>>2]=e+d;do{i[e>>0]=0;e=(k[f>>2]|0)+1|0;k[f>>2]=e;d=d+-1|0}while((d|0)!=0);n=a+36|0;k[n>>2]=k[b>>2];k[n+4>>2]=k[b+4>>2];k[n+8>>2]=k[b+8>>2];return}d=Wa()|0;e=k[g>>2]|0;if(e){if((k[f>>2]|0)!=(e|0))k[f>>2]=e;Sg(e)}e=k[m>>2]|0;if(!e){n=d;fb(n|0)}if((k[n>>2]|0)!=(e|0))k[n>>2]=e;Sg(e);n=d;fb(n|0)}function _d(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0;k[a>>2]=36260;k[a+4>>2]=c;m=a+8|0;d=k[c>>2]|0;j=c+16|0;g=k[j>>2]|0;f=ia(g,d)|0;k[m>>2]=0;n=a+12|0;k[n>>2]=0;k[a+16>>2]=0;do if(!f)f=g;else{if(!((f|0)<0?(x=0,qa(155,m|0),g=x,x=0,g&1):0))l=4;if((l|0)==4?(x=0,h=ta(66,f|0)|0,g=x,x=0,!(g&1)):0){k[n>>2]=h;k[m>>2]=h;k[a+16>>2]=h+f;d=h;do{i[d>>0]=0;d=(k[n>>2]|0)+1|0;k[n>>2]=d;f=f+-1|0}while((f|0)!=0);f=k[j>>2]|0;d=k[c>>2]|0;break}d=Wa()|0;e=k[m>>2]|0;if(e){if((k[n>>2]|0)!=(e|0))k[n>>2]=e;Sg(e)}n=d;fb(n|0)}while(0);g=a+20|0;d=ia(f,d)|0;k[g>>2]=0;f=a+24|0;k[f>>2]=0;k[a+28>>2]=0;if(!d){n=a+36|0;k[n>>2]=k[b>>2];k[n+4>>2]=k[b+4>>2];k[n+8>>2]=k[b+8>>2];return}if(!((d|0)<0?(x=0,qa(155,g|0),c=x,x=0,c&1):0))l=15;if((l|0)==15?(x=0,e=ta(66,d|0)|0,l=x,x=0,!(l&1)):0){k[f>>2]=e;k[g>>2]=e;k[a+28>>2]=e+d;do{i[e>>0]=0;e=(k[f>>2]|0)+1|0;k[f>>2]=e;d=d+-1|0}while((d|0)!=0);n=a+36|0;k[n>>2]=k[b>>2];k[n+4>>2]=k[b+4>>2];k[n+8>>2]=k[b+8>>2];return}d=Wa()|0;e=k[g>>2]|0;if(e){if((k[f>>2]|0)!=(e|0))k[f>>2]=e;Sg(e)}e=k[m>>2]|0;if(!e){n=d;fb(n|0)}if((k[n>>2]|0)!=(e|0))k[n>>2]=e;Sg(e);n=d;fb(n|0)}function $d(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0;k[a>>2]=36236;k[a+4>>2]=c;m=a+8|0;d=k[c>>2]|0;j=c+16|0;g=k[j>>2]|0;f=ia(g,d)|0;k[m>>2]=0;n=a+12|0;k[n>>2]=0;k[a+16>>2]=0;do if(!f)f=g;else{if(!((f|0)<0?(x=0,qa(155,m|0),g=x,x=0,g&1):0))l=4;if((l|0)==4?(x=0,h=ta(66,f|0)|0,g=x,x=0,!(g&1)):0){k[n>>2]=h;k[m>>2]=h;k[a+16>>2]=h+f;d=h;do{i[d>>0]=0;d=(k[n>>2]|0)+1|0;k[n>>2]=d;f=f+-1|0}while((f|0)!=0);f=k[j>>2]|0;d=k[c>>2]|0;break}d=Wa()|0;e=k[m>>2]|0;if(e){if((k[n>>2]|0)!=(e|0))k[n>>2]=e;Sg(e)}n=d;fb(n|0)}while(0);g=a+20|0;d=ia(f,d)|0;k[g>>2]=0;f=a+24|0;k[f>>2]=0;k[a+28>>2]=0;if(!d){n=a+36|0;k[n>>2]=k[b>>2];k[n+4>>2]=k[b+4>>2];k[n+8>>2]=k[b+8>>2];return}if(!((d|0)<0?(x=0,qa(155,g|0),c=x,x=0,c&1):0))l=15;if((l|0)==15?(x=0,e=ta(66,d|0)|0,l=x,x=0,!(l&1)):0){k[f>>2]=e;k[g>>2]=e;k[a+28>>2]=e+d;do{i[e>>0]=0;e=(k[f>>2]|0)+1|0;k[f>>2]=e;d=d+-1|0}while((d|0)!=0);n=a+36|0;k[n>>2]=k[b>>2];k[n+4>>2]=k[b+4>>2];k[n+8>>2]=k[b+8>>2];return}d=Wa()|0;e=k[g>>2]|0;if(e){if((k[f>>2]|0)!=(e|0))k[f>>2]=e;Sg(e)}e=k[m>>2]|0;if(!e){n=d;fb(n|0)}if((k[n>>2]|0)!=(e|0))k[n>>2]=e;Sg(e);n=d;fb(n|0)}function ae(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0;k[a>>2]=36212;k[a+4>>2]=c;m=a+8|0;d=k[c>>2]|0;j=c+16|0;g=k[j>>2]|0;f=ia(g,d)|0;k[m>>2]=0;n=a+12|0;k[n>>2]=0;k[a+16>>2]=0;do if(!f)f=g;else{if(!((f|0)<0?(x=0,qa(155,m|0),g=x,x=0,g&1):0))l=4;if((l|0)==4?(x=0,h=ta(66,f|0)|0,g=x,x=0,!(g&1)):0){k[n>>2]=h;k[m>>2]=h;k[a+16>>2]=h+f;d=h;do{i[d>>0]=0;d=(k[n>>2]|0)+1|0;k[n>>2]=d;f=f+-1|0}while((f|0)!=0);f=k[j>>2]|0;d=k[c>>2]|0;break}d=Wa()|0;e=k[m>>2]|0;if(e){if((k[n>>2]|0)!=(e|0))k[n>>2]=e;Sg(e)}n=d;fb(n|0)}while(0);g=a+20|0;d=ia(f,d)|0;k[g>>2]=0;f=a+24|0;k[f>>2]=0;k[a+28>>2]=0;if(!d){n=a+36|0;k[n>>2]=k[b>>2];k[n+4>>2]=k[b+4>>2];k[n+8>>2]=k[b+8>>2];return}if(!((d|0)<0?(x=0,qa(155,g|0),c=x,x=0,c&1):0))l=15;if((l|0)==15?(x=0,e=ta(66,d|0)|0,l=x,x=0,!(l&1)):0){k[f>>2]=e;k[g>>2]=e;k[a+28>>2]=e+d;do{i[e>>0]=0;e=(k[f>>2]|0)+1|0;k[f>>2]=e;d=d+-1|0}while((d|0)!=0);n=a+36|0;k[n>>2]=k[b>>2];k[n+4>>2]=k[b+4>>2];k[n+8>>2]=k[b+8>>2];return}d=Wa()|0;e=k[g>>2]|0;if(e){if((k[f>>2]|0)!=(e|0))k[f>>2]=e;Sg(e)}e=k[m>>2]|0;if(!e){n=d;fb(n|0)}if((k[n>>2]|0)!=(e|0))k[n>>2]=e;Sg(e);n=d;fb(n|0)}function be(a){a=a|0;var b=0,c=0;k[a>>2]=36212;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}c=k[a+8>>2]|0;if(!c)return;b=a+12|0;if((k[b>>2]|0)!=(c|0))k[b>>2]=c;Sg(c);return}function ce(a){a=a|0;var b=0,c=0;k[a>>2]=36212;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}b=k[a+8>>2]|0;if(!b){Sg(a);return}c=a+12|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b);Sg(a);return}function de(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;e=a+36|0;if(!(k[e>>2]|0)){e=a+40|0;he(a,b,k[e>>2]|0,c,d);k[e>>2]=(k[e>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}f=ia(k[(k[a+4>>2]|0)+16>>2]|0,c)|0;g=a+20|0;he(a,b,k[g>>2]|0,c,d);a=k[e>>2]|0;if((Qb[k[(k[a>>2]|0)+48>>2]&63](a,k[g>>2]|0,f)|0)==(f|0))return;e=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,e|0,3,35472);g=x;x=0;if(g&1){g=Wa()|0;Ua(e|0);fb(g|0)}else ub(e|0,648,74)}function ee(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=k[a+36>>2]|0;if(!e){e=a+40|0;fe(a,k[e>>2]|0,b,c,d);k[e>>2]=(k[e>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}else{ge(a,e,b,c,d);return}}function fe(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,m=0,n=0;h=a+4|0;f=k[h>>2]|0;if(!(i[f+32>>0]|0))h=b;else{g=a+8|0;$t(k[g>>2]|0,b|0,d*3|0)|0;f=k[h>>2]|0;b=k[f+16>>2]|0;if((d|0)>0){f=k[g>>2]|0;a=0;while(1){j=f+2|0;m=i[f>>0]|0;i[f>>0]=i[j>>0]|0;i[j>>0]=m;a=a+1|0;if((a|0)==(d|0))break;else f=f+b|0}f=k[h>>2]|0}h=k[g>>2]|0}switch(k[f+16>>2]|0){case 3:{if((k[f+24>>2]|0)==2){if((d|0)>0)f=0;else return;do{g=l[h+(f*3|0)+1>>0]|0;e=128-g+(l[h+(f*3|0)+2>>0]|0)|0;j=(l[h+(f*3|0)>>0]|0)-g+128|0;m=c+(f*3|0)|0;i[m>>0]=g+192+(((e&255)+(j&255)|0)>>>2);i[m+1>>0]=e;i[m+2>>0]=j;f=f+1|0}while((f|0)!=(d|0));return}f=(e|0)<(d|0)?e:d;if((f|0)<=0)return;a=e<<1;b=0;do{d=l[h+(b*3|0)+1>>0]|0;j=128-d+(l[h+(b*3|0)+2>>0]|0)|0;m=(l[h+(b*3|0)>>0]|0)-d+128|0;i[c+b>>0]=d+192+(((j&255)+(m&255)|0)>>>2);i[c+(b+e)>>0]=j;i[c+(b+a)>>0]=m;b=b+1|0}while((b|0)!=(f|0));return}case 4:{if((k[f+24>>2]|0)!=1)return;f=(e|0)<(d|0)?e:d;if((f|0)<=0)return;a=e<<1;b=e*3|0;g=0;do{m=i[h+(g<<2)+3>>0]|0;n=l[h+(g<<2)+1>>0]|0;d=128-n+(l[h+(g<<2)+2>>0]|0)|0;j=(l[h+(g<<2)>>0]|0)-n+128|0;i[c+g>>0]=n+192+(((d&255)+(j&255)|0)>>>2);i[c+(g+e)>>0]=d;i[c+(g+a)>>0]=j;i[c+(g+b)>>0]=m;g=g+1|0}while((g|0)!=(f|0));return}default:return}}function ge(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;m=r;r=r+176|0;n=m+152|0;p=m+16|0;o=m;g=ia(k[(k[a+4>>2]|0)+16>>2]|0,d)|0;j=a+20|0;f=k[j>>2]|0;if(!g){p=f;fe(a,p,c,d,e);r=m;return}while(1){h=Qb[k[(k[b>>2]|0)+32>>2]&63](b,f,g)|0;if(!h)break;f=k[j>>2]|0;if((g|0)==(h|0)){l=26;break}else g=g-h|0}if((l|0)==26){fe(a,f,c,d,e);r=m;return}c=p+56|0;j=p+4|0;k[p>>2]=35760;k[c>>2]=35780;x=0;ra(52,p+56|0,j|0);m=x;x=0;if(m&1){p=Wa()|0;Vk(c);fb(p|0)}k[p+128>>2]=0;k[p+132>>2]=-1;k[p>>2]=35800;k[p+56>>2]=35820;x=0;qa(158,j|0);m=x;x=0;do if(m&1)f=Wa()|0;else{k[j>>2]=35836;b=p+36|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[p+52>>2]=16;k[n>>2]=0;k[n+4>>2]=0;k[n+8>>2]=0;x=0;ra(53,j|0,n|0);m=x;x=0;if(m&1){f=Wa()|0;wk(n);wk(b);al(j);break}wk(n);x=0;f=va(28,p|0,48058,57)|0;n=x;x=0;if(!(n&1)?(x=0,Aa(27,f|0,0)|0,n=x,x=0,!(n&1)):0){h=Va(16)|0;x=0;ra(54,o|0,j|0);n=x;x=0;if(!(n&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,h|0,3,35472,o|0);n=x;x=0;if(n&1)g=1;else{x=0;Fa(5,h|0,648,74);x=0;g=0}f=Wa()|0;wk(o);if(!g){o=f;k[p>>2]=35800;k[c>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(c);fb(o|0)}}else f=Wa()|0;Ua(h|0);o=f;k[p>>2]=35800;k[c>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(c);fb(o|0)}o=Wa()|0;k[p>>2]=35800;k[c>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(c);fb(o|0)}while(0);p=f;Vk(c);fb(p|0)}function he(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,m=0,n=0,o=0,p=0;j=a+4|0;a=k[j>>2]|0;a:do switch(k[a+16>>2]|0){case 3:{if((k[a+24>>2]|0)==2){if((d|0)>0)a=0;else break a;while(1){g=l[b+(a*3|0)+1>>0]|0;f=l[b+(a*3|0)+2>>0]|0;h=(l[b+(a*3|0)>>0]|0)-((f+g|0)>>>2)+64|0;e=c+(a*3|0)|0;i[e>>0]=f+128+h;i[e+1>>0]=h;i[e+2>>0]=g+128+h;a=a+1|0;if((a|0)==(d|0))break a}}a=(d|0)<(e|0)?d:e;if((a|0)>0){f=e<<1;g=0;do{n=l[b+(g+e)>>0]|0;o=l[b+(g+f)>>0]|0;m=(l[b+g>>0]|0)-((o+n|0)>>>2)+64|0;h=c+(g*3|0)|0;i[h>>0]=o+128+m;i[h+1>>0]=m;i[h+2>>0]=n+128+m;g=g+1|0}while((g|0)!=(a|0))}break}case 4:{if((k[a+24>>2]|0)==1?(h=(d|0)<(e|0)?d:e,(h|0)>0):0){a=e<<1;f=e*3|0;g=0;do{m=l[b+(g+e)>>0]|0;p=l[b+(g+a)>>0]|0;n=(l[b+g>>0]|0)-((p+m|0)>>>2)+64|0;o=c+(g<<2)|0;n=n<<8&65280|l[b+(g+f)>>0]<<24|p+128+n&255|m+128+n<<16&16711680;i[o>>0]=n;i[o+1>>0]=n>>8;i[o+2>>0]=n>>16;i[o+3>>0]=n>>24;g=g+1|0}while((g|0)!=(h|0))}break}default:{}}while(0);a=k[j>>2]|0;if(!(i[a+32>>0]|0))return;g=k[a+16>>2]|0;if((d|0)>0){a=c;f=0}else return;while(1){p=a+2|0;o=i[a>>0]|0;i[a>>0]=i[p>>0]|0;i[p>>0]=o;f=f+1|0;if((f|0)==(d|0))break;else a=a+g|0}return}function ie(a){a=a|0;var b=0,c=0;k[a>>2]=36236;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}c=k[a+8>>2]|0;if(!c)return;b=a+12|0;if((k[b>>2]|0)!=(c|0))k[b>>2]=c;Sg(c);return}function je(a){a=a|0;var b=0,c=0;k[a>>2]=36236;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}b=k[a+8>>2]|0;if(!b){Sg(a);return}c=a+12|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b);Sg(a);return}function ke(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;e=a+36|0;if(!(k[e>>2]|0)){e=a+40|0;oe(a,b,k[e>>2]|0,c,d);k[e>>2]=(k[e>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}f=ia(k[(k[a+4>>2]|0)+16>>2]|0,c)|0;g=a+20|0;oe(a,b,k[g>>2]|0,c,d);a=k[e>>2]|0;if((Qb[k[(k[a>>2]|0)+48>>2]&63](a,k[g>>2]|0,f)|0)==(f|0))return;e=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,e|0,3,35472);g=x;x=0;if(g&1){g=Wa()|0;Ua(e|0);fb(g|0)}else ub(e|0,648,74)}function le(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=k[a+36>>2]|0;if(!e){e=a+40|0;me(a,k[e>>2]|0,b,c,d);k[e>>2]=(k[e>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}else{ne(a,e,b,c,d);return}}function me(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,m=0,n=0,o=0;h=a+4|0;f=k[h>>2]|0;if(!(i[f+32>>0]|0))h=b;else{g=a+8|0;$t(k[g>>2]|0,b|0,d*3|0)|0;f=k[h>>2]|0;b=k[f+16>>2]|0;if((d|0)>0){f=k[g>>2]|0;a=0;while(1){j=f+2|0;m=i[f>>0]|0;i[f>>0]=i[j>>0]|0;i[j>>0]=m;a=a+1|0;if((a|0)==(d|0))break;else f=f+b|0}f=k[h>>2]|0}h=k[g>>2]|0}switch(k[f+16>>2]|0){case 3:{if((k[f+24>>2]|0)==2){if((d|0)>0)f=0;else return;do{b=l[h+(f*3|0)>>0]|0;e=i[h+(f*3|0)+1>>0]|0;g=e&255;j=(l[h+(f*3|0)+2>>0]|0)+128-((g+b|0)>>>1)&255;m=c+(f*3|0)|0;i[m>>0]=b+128-g;i[m+1>>0]=e;i[m+2>>0]=j;f=f+1|0}while((f|0)!=(d|0));return}f=(e|0)<(d|0)?e:d;if((f|0)<=0)return;a=e<<1;b=0;do{j=i[h+(b*3|0)+1>>0]|0;g=l[h+(b*3|0)>>0]|0;d=j&255;m=(l[h+(b*3|0)+2>>0]|0)+128-((d+g|0)>>>1)&255;i[c+b>>0]=g+128-d;i[c+(b+e)>>0]=j;i[c+(b+a)>>0]=m;b=b+1|0}while((b|0)!=(f|0));return}case 4:{if((k[f+24>>2]|0)!=1)return;f=(e|0)<(d|0)?e:d;if((f|0)<=0)return;a=e<<1;b=e*3|0;g=0;do{d=i[h+(g<<2)+1>>0]|0;m=i[h+(g<<2)+3>>0]|0;o=l[h+(g<<2)>>0]|0;n=d&255;j=(l[h+(g<<2)+2>>0]|0)+128-((n+o|0)>>>1)&255;i[c+g>>0]=o+128-n;i[c+(g+e)>>0]=d;i[c+(g+a)>>0]=j;i[c+(g+b)>>0]=m;g=g+1|0}while((g|0)!=(f|0));return}default:return}}function ne(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;m=r;r=r+176|0;n=m+152|0;p=m+16|0;o=m;g=ia(k[(k[a+4>>2]|0)+16>>2]|0,d)|0;j=a+20|0;f=k[j>>2]|0;if(!g){p=f;me(a,p,c,d,e);r=m;return}while(1){h=Qb[k[(k[b>>2]|0)+32>>2]&63](b,f,g)|0;if(!h)break;f=k[j>>2]|0;if((g|0)==(h|0)){l=26;break}else g=g-h|0}if((l|0)==26){me(a,f,c,d,e);r=m;return}c=p+56|0;j=p+4|0;k[p>>2]=35760;k[c>>2]=35780;x=0;ra(52,p+56|0,j|0);m=x;x=0;if(m&1){p=Wa()|0;Vk(c);fb(p|0)}k[p+128>>2]=0;k[p+132>>2]=-1;k[p>>2]=35800;k[p+56>>2]=35820;x=0;qa(158,j|0);m=x;x=0;do if(m&1)f=Wa()|0;else{k[j>>2]=35836;b=p+36|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[p+52>>2]=16;k[n>>2]=0;k[n+4>>2]=0;k[n+8>>2]=0;x=0;ra(53,j|0,n|0);m=x;x=0;if(m&1){f=Wa()|0;wk(n);wk(b);al(j);break}wk(n);x=0;f=va(28,p|0,48058,57)|0;n=x;x=0;if(!(n&1)?(x=0,Aa(27,f|0,0)|0,n=x,x=0,!(n&1)):0){h=Va(16)|0;x=0;ra(54,o|0,j|0);n=x;x=0;if(!(n&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,h|0,3,35472,o|0);n=x;x=0;if(n&1)g=1;else{x=0;Fa(5,h|0,648,74);x=0;g=0}f=Wa()|0;wk(o);if(!g){o=f;k[p>>2]=35800;k[c>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(c);fb(o|0)}}else f=Wa()|0;Ua(h|0);o=f;k[p>>2]=35800;k[c>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(c);fb(o|0)}o=Wa()|0;k[p>>2]=35800;k[c>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(c);fb(o|0)}while(0);p=f;Vk(c);fb(p|0)}function oe(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,m=0,n=0,o=0;j=a+4|0;a=k[j>>2]|0;a:do switch(k[a+16>>2]|0){case 3:{if((k[a+24>>2]|0)==2){if((d|0)>0)a=0;else break a;while(1){g=i[b+(a*3|0)+1>>0]|0;h=g&255;f=(l[b+(a*3|0)>>0]|0)+128+h|0;h=(l[b+(a*3|0)+2>>0]|0)+128+(((f&255)+h|0)>>>1)&255;e=c+(a*3|0)|0;i[e>>0]=f;i[e+1>>0]=g;i[e+2>>0]=h;a=a+1|0;if((a|0)==(d|0))break a}}a=(d|0)<(e|0)?d:e;if((a|0)>0){f=e<<1;g=0;do{n=i[b+(g+e)>>0]|0;m=n&255;o=(l[b+g>>0]|0)+128+m|0;m=(l[b+(g+f)>>0]|0)+128+(((o&255)+m|0)>>>1)&255;h=c+(g*3|0)|0;i[h>>0]=o;i[h+1>>0]=n;i[h+2>>0]=m;g=g+1|0}while((g|0)!=(a|0))}break}case 4:{if((k[a+24>>2]|0)==1?(h=(d|0)<(e|0)?d:e,(h|0)>0):0){a=e<<1;f=e*3|0;g=0;do{n=l[b+(g+e)>>0]|0;m=(l[b+g>>0]|0)+128+n&255;o=c+(g<<2)|0;n=m|n<<8|l[b+(g+f)>>0]<<24|(l[b+(g+a)>>0]|0)+128+((m+n|0)>>>1)<<16&16711680;i[o>>0]=n;i[o+1>>0]=n>>8;i[o+2>>0]=n>>16;i[o+3>>0]=n>>24;g=g+1|0}while((g|0)!=(h|0))}break}default:{}}while(0);a=k[j>>2]|0;if(!(i[a+32>>0]|0))return;g=k[a+16>>2]|0;if((d|0)>0){a=c;f=0}else return;while(1){o=a+2|0;n=i[a>>0]|0;i[a>>0]=i[o>>0]|0;i[o>>0]=n;f=f+1|0;if((f|0)==(d|0))break;else a=a+g|0}return}function pe(a){a=a|0;var b=0,c=0;k[a>>2]=36260;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}c=k[a+8>>2]|0;if(!c)return;b=a+12|0;if((k[b>>2]|0)!=(c|0))k[b>>2]=c;Sg(c);return}function qe(a){a=a|0;var b=0,c=0;k[a>>2]=36260;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}b=k[a+8>>2]|0;if(!b){Sg(a);return}c=a+12|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b);Sg(a);return}function re(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;e=a+36|0;if(!(k[e>>2]|0)){e=a+40|0;ve(a,b,k[e>>2]|0,c,d);k[e>>2]=(k[e>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}f=ia(k[(k[a+4>>2]|0)+16>>2]|0,c)|0;g=a+20|0;ve(a,b,k[g>>2]|0,c,d);a=k[e>>2]|0;if((Qb[k[(k[a>>2]|0)+48>>2]&63](a,k[g>>2]|0,f)|0)==(f|0))return;e=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,e|0,3,35472);g=x;x=0;if(g&1){g=Wa()|0;Ua(e|0);fb(g|0)}else ub(e|0,648,74)}function se(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=k[a+36>>2]|0;if(!e){e=a+40|0;te(a,k[e>>2]|0,b,c,d);k[e>>2]=(k[e>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}else{ue(a,e,b,c,d);return}}function te(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,m=0,n=0;h=a+4|0;f=k[h>>2]|0;if(!(i[f+32>>0]|0))h=b;else{g=a+8|0;$t(k[g>>2]|0,b|0,d*3|0)|0;f=k[h>>2]|0;b=k[f+16>>2]|0;if((d|0)>0){f=k[g>>2]|0;a=0;while(1){j=f+2|0;m=i[f>>0]|0;i[f>>0]=i[j>>0]|0;i[j>>0]=m;a=a+1|0;if((a|0)==(d|0))break;else f=f+b|0}f=k[h>>2]|0}h=k[g>>2]|0}switch(k[f+16>>2]|0){case 3:{if((k[f+24>>2]|0)==2){if((d|0)>0)f=0;else return;do{e=i[h+(f*3|0)+1>>0]|0;g=e&255;j=128-g+(l[h+(f*3|0)+2>>0]|0)&255;m=c+(f*3|0)|0;i[m>>0]=(l[h+(f*3|0)>>0]|0)+128-g;i[m+1>>0]=e;i[m+2>>0]=j;f=f+1|0}while((f|0)!=(d|0));return}f=(e|0)<(d|0)?e:d;if((f|0)<=0)return;a=e<<1;b=0;do{j=i[h+(b*3|0)+1>>0]|0;d=j&255;m=128-d+(l[h+(b*3|0)+2>>0]|0)&255;i[c+b>>0]=(l[h+(b*3|0)>>0]|0)+128-d;i[c+(b+e)>>0]=j;i[c+(b+a)>>0]=m;b=b+1|0}while((b|0)!=(f|0));return}case 4:{if((k[f+24>>2]|0)!=1)return;f=(e|0)<(d|0)?e:d;if((f|0)<=0)return;a=e<<1;b=e*3|0;g=0;do{d=i[h+(g<<2)+1>>0]|0;m=i[h+(g<<2)+3>>0]|0;n=d&255;j=128-n+(l[h+(g<<2)+2>>0]|0)&255;i[c+g>>0]=(l[h+(g<<2)>>0]|0)+128-n;i[c+(g+e)>>0]=d;i[c+(g+a)>>0]=j;i[c+(g+b)>>0]=m;g=g+1|0}while((g|0)!=(f|0));return}default:return}}function ue(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;m=r;r=r+176|0;n=m+152|0;p=m+16|0;o=m;g=ia(k[(k[a+4>>2]|0)+16>>2]|0,d)|0;j=a+20|0;f=k[j>>2]|0;if(!g){p=f;te(a,p,c,d,e);r=m;return}while(1){h=Qb[k[(k[b>>2]|0)+32>>2]&63](b,f,g)|0;if(!h)break;f=k[j>>2]|0;if((g|0)==(h|0)){l=26;break}else g=g-h|0}if((l|0)==26){te(a,f,c,d,e);r=m;return}c=p+56|0;j=p+4|0;k[p>>2]=35760;k[c>>2]=35780;x=0;ra(52,p+56|0,j|0);m=x;x=0;if(m&1){p=Wa()|0;Vk(c);fb(p|0)}k[p+128>>2]=0;k[p+132>>2]=-1;k[p>>2]=35800;k[p+56>>2]=35820;x=0;qa(158,j|0);m=x;x=0;do if(m&1)f=Wa()|0;else{k[j>>2]=35836;b=p+36|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[p+52>>2]=16;k[n>>2]=0;k[n+4>>2]=0;k[n+8>>2]=0;x=0;ra(53,j|0,n|0);m=x;x=0;if(m&1){f=Wa()|0;wk(n);wk(b);al(j);break}wk(n);x=0;f=va(28,p|0,48058,57)|0;n=x;x=0;if(!(n&1)?(x=0,Aa(27,f|0,0)|0,n=x,x=0,!(n&1)):0){h=Va(16)|0;x=0;ra(54,o|0,j|0);n=x;x=0;if(!(n&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,h|0,3,35472,o|0);n=x;x=0;if(n&1)g=1;else{x=0;Fa(5,h|0,648,74);x=0;g=0}f=Wa()|0;wk(o);if(!g){o=f;k[p>>2]=35800;k[c>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(c);fb(o|0)}}else f=Wa()|0;Ua(h|0);o=f;k[p>>2]=35800;k[c>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(c);fb(o|0)}o=Wa()|0;k[p>>2]=35800;k[c>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(c);fb(o|0)}while(0);p=f;Vk(c);fb(p|0)}function ve(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,m=0,n=0,o=0;j=a+4|0;a=k[j>>2]|0;a:do switch(k[a+16>>2]|0){case 3:{if((k[a+24>>2]|0)==2){if((d|0)>0)a=0;else break a;while(1){g=i[b+(a*3|0)+1>>0]|0;f=g&255;h=f+128+(l[b+(a*3|0)+2>>0]|0)&255;e=c+(a*3|0)|0;i[e>>0]=(l[b+(a*3|0)>>0]|0)+128+f;i[e+1>>0]=g;i[e+2>>0]=h;a=a+1|0;if((a|0)==(d|0))break a}}a=(d|0)<(e|0)?d:e;if((a|0)>0){f=e<<1;g=0;do{n=i[b+(g+e)>>0]|0;o=n&255;m=o+128+(l[b+(g+f)>>0]|0)&255;h=c+(g*3|0)|0;i[h>>0]=(l[b+g>>0]|0)+128+o;i[h+1>>0]=n;i[h+2>>0]=m;g=g+1|0}while((g|0)!=(a|0))}break}case 4:{if((k[a+24>>2]|0)==1?(h=(d|0)<(e|0)?d:e,(h|0)>0):0){a=e<<1;f=e*3|0;g=0;do{n=l[b+(g+e)>>0]|0;o=c+(g<<2)|0;n=(l[b+g>>0]|0)+128+n&255|n<<8|l[b+(g+f)>>0]<<24|n+128+(l[b+(g+a)>>0]|0)<<16&16711680;i[o>>0]=n;i[o+1>>0]=n>>8;i[o+2>>0]=n>>16;i[o+3>>0]=n>>24;g=g+1|0}while((g|0)!=(h|0))}break}default:{}}while(0);a=k[j>>2]|0;if(!(i[a+32>>0]|0))return;g=k[a+16>>2]|0;if((d|0)>0){a=c;f=0}else return;while(1){o=a+2|0;n=i[a>>0]|0;i[a>>0]=i[o>>0]|0;i[o>>0]=n;f=f+1|0;if((f|0)==(d|0))break;else a=a+g|0}return}function we(a){a=a|0;var b=0,c=0;k[a>>2]=36284;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}c=k[a+8>>2]|0;if(!c)return;b=a+12|0;if((k[b>>2]|0)!=(c|0))k[b>>2]=c;Sg(c);return}function xe(a){a=a|0;var b=0,c=0;k[a>>2]=36284;b=k[a+20>>2]|0;if(b){c=a+24|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}b=k[a+8>>2]|0;if(!b){Sg(a);return}c=a+12|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b);Sg(a);return}function ye(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;e=a+36|0;if(!(k[e>>2]|0)){e=a+40|0;Ce(a,b,k[e>>2]|0,c,d);k[e>>2]=(k[e>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}f=ia(k[(k[a+4>>2]|0)+16>>2]|0,c)|0;g=a+20|0;Ce(a,b,k[g>>2]|0,c,d);a=k[e>>2]|0;if((Qb[k[(k[a>>2]|0)+48>>2]&63](a,k[g>>2]|0,f)|0)==(f|0))return;e=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,e|0,3,35472);g=x;x=0;if(g&1){g=Wa()|0;Ua(e|0);fb(g|0)}else ub(e|0,648,74)}function ze(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=k[a+36>>2]|0;if(!e){e=a+40|0;Ae(a,k[e>>2]|0,b,c,d);k[e>>2]=(k[e>>2]|0)+(k[(k[a+4>>2]|0)+12>>2]|0);return}else{Be(a,e,b,c,d);return}}function Ae(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0;h=a+4|0;f=k[h>>2]|0;if(!(i[f+32>>0]|0))h=b;else{g=a+8|0;$t(k[g>>2]|0,b|0,d*3|0)|0;f=k[h>>2]|0;b=k[f+16>>2]|0;if((d|0)>0){f=k[g>>2]|0;a=0;while(1){j=f+2|0;l=i[f>>0]|0;i[f>>0]=i[j>>0]|0;i[j>>0]=l;a=a+1|0;if((a|0)==(d|0))break;else f=f+b|0}f=k[h>>2]|0}h=k[g>>2]|0}switch(k[f+16>>2]|0){case 3:{if((k[f+24>>2]|0)==2){if((d|0)>0)f=0;else return;do{e=i[h+(f*3|0)+1>>0]|0;j=i[h+(f*3|0)+2>>0]|0;l=c+(f*3|0)|0;i[l>>0]=i[h+(f*3|0)>>0]|0;i[l+1>>0]=e;i[l+2>>0]=j;f=f+1|0}while((f|0)!=(d|0));return}f=(e|0)<(d|0)?e:d;if((f|0)<=0)return;a=e<<1;b=0;do{j=i[h+(b*3|0)+1>>0]|0;l=i[h+(b*3|0)+2>>0]|0;i[c+b>>0]=i[h+(b*3|0)>>0]|0;i[c+(b+e)>>0]=j;i[c+(b+a)>>0]=l;b=b+1|0}while((b|0)!=(f|0));return}case 4:{if((k[f+24>>2]|0)!=1)return;f=(e|0)<(d|0)?e:d;if((f|0)<=0)return;a=e<<1;b=e*3|0;g=0;do{d=i[h+(g<<2)+1>>0]|0;j=i[h+(g<<2)+2>>0]|0;l=i[h+(g<<2)+3>>0]|0;i[c+g>>0]=i[h+(g<<2)>>0]|0;i[c+(g+e)>>0]=d;i[c+(g+a)>>0]=j;i[c+(g+b)>>0]=l;g=g+1|0}while((g|0)!=(f|0));return}default:return}}function Be(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;m=r;r=r+176|0;n=m+152|0;p=m+16|0;o=m;g=ia(k[(k[a+4>>2]|0)+16>>2]|0,d)|0;j=a+20|0;f=k[j>>2]|0;if(!g){p=f;Ae(a,p,c,d,e);r=m;return}while(1){h=Qb[k[(k[b>>2]|0)+32>>2]&63](b,f,g)|0;if(!h)break;f=k[j>>2]|0;if((g|0)==(h|0)){l=26;break}else g=g-h|0}if((l|0)==26){Ae(a,f,c,d,e);r=m;return}c=p+56|0;j=p+4|0;k[p>>2]=35760;k[c>>2]=35780;x=0;ra(52,p+56|0,j|0);m=x;x=0;if(m&1){p=Wa()|0;Vk(c);fb(p|0)}k[p+128>>2]=0;k[p+132>>2]=-1;k[p>>2]=35800;k[p+56>>2]=35820;x=0;qa(158,j|0);m=x;x=0;do if(m&1)f=Wa()|0;else{k[j>>2]=35836;b=p+36|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[p+52>>2]=16;k[n>>2]=0;k[n+4>>2]=0;k[n+8>>2]=0;x=0;ra(53,j|0,n|0);m=x;x=0;if(m&1){f=Wa()|0;wk(n);wk(b);al(j);break}wk(n);x=0;f=va(28,p|0,48058,57)|0;n=x;x=0;if(!(n&1)?(x=0,Aa(27,f|0,0)|0,n=x,x=0,!(n&1)):0){h=Va(16)|0;x=0;ra(54,o|0,j|0);n=x;x=0;if(!(n&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,h|0,3,35472,o|0);n=x;x=0;if(n&1)g=1;else{x=0;Fa(5,h|0,648,74);x=0;g=0}f=Wa()|0;wk(o);if(!g){o=f;k[p>>2]=35800;k[c>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(c);fb(o|0)}}else f=Wa()|0;Ua(h|0);o=f;k[p>>2]=35800;k[c>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(c);fb(o|0)}o=Wa()|0;k[p>>2]=35800;k[c>>2]=35820;k[j>>2]=35836;wk(b);al(j);Vk(c);fb(o|0)}while(0);p=f;Vk(c);fb(p|0)}function Ce(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,m=0,n=0;j=a+4|0;a=k[j>>2]|0;a:do switch(k[a+16>>2]|0){case 3:{if((k[a+24>>2]|0)==2){if((d|0)>0)a=0;else break a;while(1){g=i[b+(a*3|0)+1>>0]|0;h=i[b+(a*3|0)+2>>0]|0;e=c+(a*3|0)|0;i[e>>0]=i[b+(a*3|0)>>0]|0;i[e+1>>0]=g;i[e+2>>0]=h;a=a+1|0;if((a|0)==(d|0))break a}}a=(d|0)<(e|0)?d:e;if((a|0)>0){f=e<<1;g=0;do{n=i[b+(g+e)>>0]|0;m=i[b+(g+f)>>0]|0;h=c+(g*3|0)|0;i[h>>0]=i[b+g>>0]|0;i[h+1>>0]=n;i[h+2>>0]=m;g=g+1|0}while((g|0)!=(a|0))}break}case 4:{if((k[a+24>>2]|0)==1?(h=(d|0)<(e|0)?d:e,(h|0)>0):0){a=e<<1;f=e*3|0;g=0;do{n=c+(g<<2)|0;m=l[b+(g+e)>>0]<<8|l[b+g>>0]|l[b+(g+a)>>0]<<16|l[b+(g+f)>>0]<<24;i[n>>0]=m;i[n+1>>0]=m>>8;i[n+2>>0]=m>>16;i[n+3>>0]=m>>24;g=g+1|0}while((g|0)!=(h|0))}break}default:{}}while(0);a=k[j>>2]|0;if(!(i[a+32>>0]|0))return;g=k[a+16>>2]|0;if((d|0)>0){a=c;f=0}else return;while(1){n=a+2|0;m=i[a>>0]|0;i[a>>0]=i[n>>0]|0;i[n>>0]=m;f=f+1|0;if((f|0)==(d|0))break;else a=a+g|0}return}function De(a){a=a|0;var b=0,c=0;k[a>>2]=35680;b=k[a+4608>>2]|0;if(b){c=a+4612|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}a=a+88|0;b=k[a>>2]|0;k[a>>2]=0;if(!b)return;Lb[k[(k[b>>2]|0)+4>>2]&255](b);return}function Ee(a){a=a|0;var b=0,c=0;k[a>>2]=35680;b=k[a+4608>>2]|0;if(b){c=a+4612|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}c=a+88|0;b=k[c>>2]|0;k[c>>2]=0;if(!b){Sg(a);return}Lb[k[(k[b>>2]|0)+4>>2]&255](b);Sg(a);return}function Fe(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,y=0,z=0;u=r;r=r+352|0;v=u+328|0;y=u+192|0;c=u+343|0;d=u+342|0;e=u+341|0;f=u+340|0;o=u+176|0;h=u+168|0;j=u+160|0;l=u+152|0;t=u;q=u+136|0;if((k[a+28>>2]|0)!=0?(k[a+20>>2]|0)!=1:0){p=a+4|0;s=a+32|0;g=k[s>>2]|0;if(!g){a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[c>>0]|0;Ja(36,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}a=k[a+12>>2]|0;if((a|0)==16)switch(g|0){case 1:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[d>>0]|0;Ja(37,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 2:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[e>>0]|0;Ja(38,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 3:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[f>>0]|0;Ja(39,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}default:{g=y+56|0;e=y+4|0;k[y>>2]=35760;k[g>>2]=35780;x=0;ra(52,y+56|0,e|0);u=x;x=0;if(u&1){z=Wa()|0;Vk(g);fb(z|0)}k[y+128>>2]=0;k[y+132>>2]=-1;k[y>>2]=35800;k[y+56>>2]=35820;x=0;qa(158,e|0);u=x;x=0;do if(u&1)a=Wa()|0;else{k[e>>2]=35836;f=y+36|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=0;k[f+12>>2]=0;k[y+52>>2]=16;k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;x=0;ra(53,e|0,v|0);u=x;x=0;if(u&1){a=Wa()|0;wk(v);wk(f);al(e);break}wk(v);x=0;a=va(28,y|0,48036,21)|0;v=x;x=0;do if((!(v&1)?(x=0,m=Aa(27,a|0,k[s>>2]|0)|0,v=x,x=0,!(v&1)):0)?(x=0,va(28,m|0,49453,18)|0,v=x,x=0,!(v&1)):0){d=Va(16)|0;x=0;ra(54,o|0,e|0);v=x;x=0;if(!(v&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,d|0,9,35472,o|0);v=x;x=0;if(v&1)c=1;else{x=0;Fa(5,d|0,648,74);x=0;c=0}a=Wa()|0;wk(o);if(!c)break}else a=Wa()|0;Ua(d|0)}else z=34;while(0);if((z|0)==34)a=Wa()|0;k[y>>2]=35800;k[g>>2]=35820;k[e>>2]=35836;wk(f);al(e);Vk(g);z=a;fb(z|0)}while(0);z=a;Vk(g);fb(z|0)}}if((a|0)<=8){a=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,a|0,8,35472);z=x;x=0;if(!(z&1))ub(a|0,648,74);z=Wa()|0;Ua(a|0);fb(z|0)}c=16-a|0;switch(g|0){case 1:{a=Rg(60)|0;k[h>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[h>>2];k[v+4>>2]=k[h+4>>2];Ja(40,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 2:{a=Rg(60)|0;k[j>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[j>>2];k[v+4>>2]=k[j+4>>2];Ja(41,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 3:{a=Rg(60)|0;k[l>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[l>>2];k[v+4>>2]=k[l+4>>2];Ja(42,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}default:{g=t+56|0;e=t+4|0;k[t>>2]=35760;k[g>>2]=35780;x=0;ra(52,t+56|0,e|0);y=x;x=0;if(y&1){z=Wa()|0;Vk(g);fb(z|0)}k[t+128>>2]=0;k[t+132>>2]=-1;k[t>>2]=35800;k[t+56>>2]=35820;x=0;qa(158,e|0);y=x;x=0;do if(y&1)a=Wa()|0;else{k[e>>2]=35836;f=t+36|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=0;k[f+12>>2]=0;k[t+52>>2]=16;k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;x=0;ra(53,e|0,v|0);y=x;x=0;if(y&1){a=Wa()|0;wk(v);wk(f);al(e);break}wk(v);x=0;a=va(28,t|0,48036,21)|0;y=x;x=0;do if((!(y&1)?(x=0,n=Aa(27,a|0,k[s>>2]|0)|0,y=x,x=0,!(y&1)):0)?(x=0,va(28,n|0,49453,18)|0,y=x,x=0,!(y&1)):0){d=Va(16)|0;x=0;ra(54,q|0,e|0);y=x;x=0;if(!(y&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,d|0,9,35472,q|0);y=x;x=0;if(y&1)c=1;else{x=0;Fa(5,d|0,648,74);x=0;c=0}a=Wa()|0;wk(q);if(!c)break}else a=Wa()|0;Ua(d|0)}else z=64;while(0);if((z|0)==64)a=Wa()|0;k[t>>2]=35800;k[g>>2]=35820;k[e>>2]=35836;wk(f);al(e);Vk(g);z=a;fb(z|0)}while(0);z=a;Vk(g);fb(z|0)}}}c=k[b+4>>2]|0;d=Rg(16)|0;a=k[a+16>>2]|0;if(!c){z=k[b>>2]|0;k[d>>2]=35732;k[d+4>>2]=z;k[d+8>>2]=2;k[d+12>>2]=a;z=d;r=u;return z|0}else{k[d>>2]=35708;k[d+4>>2]=c;k[d+8>>2]=2;k[d+12>>2]=a;z=d;r=u;return z|0}return 0}function Ge(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,l=0;g=r;r=r+32|0;l=g;Ag(l,k[a+128>>2]|0,k[a+136>>2]|0);h=k[b+4>>2]|0;f=k[b+8>>2]|0;f=(f|0)==0?k[l+8>>2]|0:f;e=k[b+12>>2]|0;e=(e|0)==0?k[l+12>>2]|0:e;c=k[b+16>>2]|0;d=k[l+16>>2]|0;k[a+176>>2]=(h|0)==0?k[l+4>>2]|0:h;k[a+180>>2]=f;k[a+184>>2]=e;Re(a);e=a+132|0;b=(k[e>>2]|0)+32|0;b=(b|0)<128?2:(b|0)/64|0;f=0;do{k[a+188+(f*12|0)>>2]=b;k[a+188+(f*12|0)+4>>2]=0;j[a+188+(f*12|0)+8>>1]=0;j[a+188+(f*12|0)+10>>1]=1;f=f+1|0}while((f|0)!=365);h=(k[e>>2]|0)+32|0;h=(h|0)<128?2:(h|0)/64|0;l=((c|0)==0?d:c)&255;k[a+4568>>2]=h;k[a+4572>>2]=0;i[a+4576>>0]=l;i[a+4577>>0]=1;i[a+4578>>0]=0;k[a+4580>>2]=h;k[a+4584>>2]=1;i[a+4588>>0]=l;i[a+4589>>0]=1;i[a+4590>>0]=0;k[a+4592>>2]=0;r=g;return}function He(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=a+88|0;f=k[b>>2]|0;k[b>>2]=0;b=k[g>>2]|0;k[g>>2]=f;if(b)Lb[k[(k[b>>2]|0)+4>>2]&255](b);g=d+4|0;f=k[g>>2]|0;i[a+4620>>0]=e&1;b=a+156|0;k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];Vd(a,d);Ie(a);b=k[a+116>>2]|0;a=k[a+112>>2]|0;while(1){e=b+-1|0;c=(i[e>>0]|0)==-1?7:8;if((a|0)<(c|0))break;else{b=e;a=a-c|0}}b=b-f|0;e=k[g>>2]|0;if(!e)return;k[g>>2]=e+b;d=d+8|0;k[d>>2]=(k[d>>2]|0)-b;return}function Ie(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0;A=r;r=r+32|0;C=A+12|0;z=A;v=a+172|0;w=(k[v>>2]|0)+4|0;if((k[a+28>>2]|0)==1)y=k[a+20>>2]|0;else y=1;b=ia(y<<1,w)|0;k[C>>2]=0;D=C+4|0;k[D>>2]=0;k[C+8>>2]=0;do if(b){if(!((b|0)<0?(x=0,qa(155,C|0),B=x,x=0,B&1):0))g=6;if((g|0)==6?(c=b<<1,x=0,d=ta(66,c|0)|0,B=x,x=0,!(B&1)):0){k[C>>2]=d;B=d+(b<<1)|0;k[C+8>>2]=B;Yt(d|0,0,c|0)|0;k[D>>2]=B;break}d=Wa()|0;b=k[C>>2]|0;if(!b)fb(d|0);c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~((c+-2-b|0)>>>1)<<1);Sg(b);fb(d|0)}while(0);k[z>>2]=0;B=z+4|0;k[B>>2]=0;k[z+8>>2]=0;do if(!y)g=18;else{if(!(y>>>0>1073741823?(x=0,qa(155,z|0),u=x,x=0,u&1):0))g=16;if((g|0)==16?(e=y<<2,x=0,f=ta(66,e|0)|0,u=x,x=0,!(u&1)):0){k[z>>2]=f;g=f+(y<<2)|0;k[z+8>>2]=g;Yt(f|0,0,e|0)|0;k[B>>2]=g;g=18;break}d=Wa()|0;b=k[z>>2]|0;c=b;if(b){e=k[B>>2]|0;if((e|0)!=(b|0))k[B>>2]=e+(~((e+-4-c|0)>>>2)<<2);Sg(b)}}while(0);if((g|0)==18){f=a+8|0;a:do if((k[f>>2]|0)>0){g=a+4596|0;h=ia(y,w)|0;i=h+1|0;l=a+4600|0;m=(y|0)>0;n=a+160|0;o=a+168|0;p=a+164|0;q=a+156|0;s=a+88|0;t=a+4592|0;u=0;b:while(1){d=k[C>>2]|0;c=d+2|0;k[g>>2]=c;d=d+(i<<1)|0;k[l>>2]=d;if(!(u&1))b=d;else{k[g>>2]=d;k[l>>2]=c;b=c;c=d}if(m){e=k[z>>2]|0;d=0;do{k[t>>2]=k[e+(d<<2)>>2];e=k[v>>2]|0;j[c+(e<<1)>>1]=j[c+(e+-1<<1)>>1]|0;j[b+-2>>1]=j[c>>1]|0;x=0;ra(56,a|0,0);e=x;x=0;if(e&1){g=29;break b}e=k[z>>2]|0;k[e+(d<<2)>>2]=k[t>>2];c=(k[g>>2]|0)+(w<<1)|0;k[g>>2]=c;b=(k[l>>2]|0)+(w<<1)|0;k[l>>2]=b;d=d+1|0}while((d|0)<(y|0))}e=k[n>>2]|0;if(((e|0)<=(u|0)?(u|0)<((k[o>>2]|0)+e|0):0)?(e=k[s>>2]|0,x=0,Ja(k[(k[e>>2]|0)+8>>2]|0,e|0,b+((k[q>>2]|0)-h<<1)|0,k[p>>2]|0,w|0),e=x,x=0,e&1):0){g=30;break}u=u+1|0;if((u|0)>=(k[f>>2]|0)){g=42;break a}}if((g|0)==29){d=Wa()|0;break}else if((g|0)==30){d=Wa()|0;break}}else g=42;while(0);do if((g|0)==42){x=0;qa(159,a|0);a=x;x=0;if(a&1){d=Wa()|0;break}b=k[z>>2]|0;c=b;if(b){d=k[B>>2]|0;if((d|0)!=(b|0))k[B>>2]=d+(~((d+-4-c|0)>>>2)<<2);Sg(b)}b=k[C>>2]|0;if(!b){r=A;return}c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~((c+-2-b|0)>>>1)<<1);Sg(b);r=A;return}while(0);b=k[z>>2]|0;c=b;if(b){e=k[B>>2]|0;if((e|0)!=(b|0))k[B>>2]=e+(~((e+-4-c|0)>>>2)<<2);Sg(b)}}b=k[C>>2]|0;if(!b)fb(d|0);c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~((c+-2-b|0)>>>1)<<1);Sg(b);fb(d|0)}function Je(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,l=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;q=a+4596|0;c=k[q>>2]|0;u=a+172|0;b=k[u>>2]|0;if((b|0)<=0)return;r=a+4600|0;s=a+4604|0;t=a+4592|0;h=c;f=m[c+-2>>1]|0;c=m[c>>1]|0;p=0;while(1){n=k[r>>2]|0;g=j[n+(p+-1<<1)>>1]|0;o=g&65535;e=p+1|0;d=m[h+(e<<1)>>1]|0;l=k[s>>2]|0;h=c-f|0;f=f-o|0;l=((((i[l+(d-c)>>0]|0)*9|0)+(i[l+h>>0]|0)|0)*9|0)+(i[l+f>>0]|0)|0;n=n+(p<<1)|0;if(!l){b=Me(a,g,n,b-p|0)|0;c=b+p|0;if((c|0)!=(k[u>>2]|0)){o=Ne(a,o,m[(k[q>>2]|0)+(c<<1)>>1]|0)|0;j[(k[r>>2]|0)+(c<<1)>>1]=o;o=k[t>>2]|0;k[t>>2]=(o|0)<1?0:o+-1|0;b=b+1|0}e=b+p|0;d=k[q>>2]|0;c=m[d+(e+-1<<1)>>1]|0;d=m[d+(e<<1)>>1]|0}else{b=c-o>>31;if((b^f|0)<0)b=c;else b=o+((b^h|0)<0?0:h)|0;o=Le(a,l,m[n>>1]|0,b,0)|0;j[(k[r>>2]|0)+(p<<1)>>1]=o}b=k[u>>2]|0;if((b|0)<=(e|0))break;h=k[q>>2]|0;f=c;c=d;p=e}return}function Ke(a){a=a|0;var b=0,c=0,d=0,e=0;d=a+116|0;c=k[d>>2]|0;if((i[c>>0]|0)!=-1){e=a+112|0;b=k[e>>2]|0;if((b|0)<1){Xd(a);b=k[e>>2]|0;c=k[d>>2]|0}a=a+108|0;d=k[a>>2]|0;k[e>>2]=b+-1;b=d<<1;k[a>>2]=b;if((i[c>>0]|0)!=-1){b=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,b|0,6,35472);a=x;x=0;if(!(a&1))ub(b|0,648,74);a=Wa()|0;Ua(b|0);fb(a|0)}}else b=k[a+108>>2]|0;if(!b)return;b=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,b|0,6,35472);a=x;x=0;if(!(a&1))ub(b|0,648,74);a=Wa()|0;Ua(b|0);fb(a|0)}function Le(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=b>>31;l=(r^b)-r|0;p=a+188+(l*12|0)+10|0;c=j[p>>1]|0;o=a+188+(l*12|0)|0;e=k[o>>2]|0;if((c|0)<(e|0))if((c<<1|0)<(e|0))if((c<<2|0)<(e|0))if((c<<3|0)<(e|0))if((c<<4|0)<(e|0)){b=5;while(1)if((c<<b|0)<(e|0))b=b+1|0;else break}else b=4;else b=3;else b=2;else b=1;else b=0;n=a+188+(l*12|0)+8|0;c=(j[n>>1]^r)-r+d|0;q=a+128|0;e=k[q>>2]|0;if((c&e|0)==(c|0))m=c;else m=e&~(c>>31);c=a+112|0;if((k[c>>2]|0)<8)Xd(a);e=a+108|0;d=k[e>>2]|0;f=d>>>24;g=k[2656+(b<<11)+(f<<3)+4>>2]|0;if(!g){h=k[a+148>>2]|0;e=k[a+140>>2]|0;c=Pe(a)|0;if((c|0)<(h+-1-e|0)){if(b)c=(Qe(a,b)|0)+(c<<b)|0}else c=(Qe(a,e)|0)+1|0;c=c<<31>>31^c>>1;if((((c|0)>-1?c:0-c|0)|0)>65535){c=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,c|0,5,35472);a=x;x=0;if(a&1){a=Wa()|0;Ua(c|0);fb(a|0)}else ub(c|0,648,74)}}else{k[c>>2]=(k[c>>2]|0)-g;k[e>>2]=d<<g;c=k[2656+(b<<11)+(f<<3)>>2]|0}h=a+136|0;d=k[h>>2]|0;if(!b){if(!d)e=(k[a+188+(l*12|0)+4>>2]<<1)+-1+(j[p>>1]|0)>>31;else e=0;g=e^c}else g=c;b=k[a+152>>2]|0;e=(k[o>>2]|0)+((g|0)>-1?g:0-g|0)|0;f=a+188+(l*12|0)+4|0;c=(k[f>>2]|0)+(ia(d<<1|1,g)|0)|0;d=j[p>>1]|0;if((d|0)==(b|0)){e=e>>1;c=c>>1;d=b>>1}k[o>>2]=e;b=d+1|0;j[p>>1]=b;e=b+c|0;if((e|0)>=1){if((c|0)>0){c=c-b|0;p=j[n>>1]|0;j[n>>1]=(p<<16>>16<127&1)+(p&65535);c=(c|0)>0?0:c}}else{c=j[n>>1]|0;j[n>>1]=(c&65535)-(c<<16>>16>-128&1);c=(e|0)>(~d|0)?e:0-d|0}k[f>>2]=c;b=k[h>>2]|0;d=b<<1|1;e=(ia(d,(g^r)-r|0)|0)+m|0;if((e|0)>=(0-b|0)){c=k[q>>2]|0;if((c+b|0)<(e|0))e=e-(ia(k[a+132>>2]|0,d)|0)|0}else{e=(ia(k[a+132>>2]|0,d)|0)+e|0;c=k[q>>2]|0}if((e&c|0)==(e|0)){a=e;a=a&65535;return a|0}a=c&~(e>>31);a=a&65535;return a|0}function Me(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0;h=a+112|0;l=a+108|0;m=a+4592|0;e=k[h>>2]|0;f=0;while(1){if((e|0)<1){Xd(a);e=k[h>>2]|0}g=k[l>>2]|0;e=e+-1|0;k[h>>2]=e;k[l>>2]=g<<1;if((g|0)>=0){n=8;break}g=k[m>>2]|0;o=1<<k[36076+(g<<2)>>2];p=d-f|0;p=(o|0)<(p|0)?o:p;f=p+f|0;if((p|0)==(o|0))k[m>>2]=(g|0)>30?31:g+1|0;if((f|0)==(d|0)){e=d;break}}if((n|0)==8)if((f|0)!=(d|0)){e=k[m>>2]|0;if((e+-4|0)>>>0<28)e=Qe(a,k[36076+(e<<2)>>2]|0)|0;else e=0;e=e+f|0;if((e|0)>(d|0)){e=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,e|0,5,35472);p=x;x=0;if(p&1){p=Wa()|0;Ua(e|0);fb(p|0)}else ub(e|0,648,74)}}else e=d;if((e|0)>0)f=0;else return e|0;do{j[c+(f<<1)>>1]=b;f=f+1|0}while((f|0)!=(e|0));return e|0}
function Ne(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=b-c|0;g=a+128|0;d=a+136|0;if((((f|0)>-1?f:0-f|0)|0)>(k[d>>2]|0)){b=ia(Oe(a,a+4568|0)|0,c-b>>31|1)|0;e=k[d>>2]|0;f=e<<1|1;b=(ia(b,f)|0)+c|0;if((b|0)>=(0-e|0)){d=k[g>>2]|0;if((d+e|0)<(b|0))b=b-(ia(k[a+132>>2]|0,f)|0)|0}else{b=(ia(k[a+132>>2]|0,f)|0)+b|0;d=k[g>>2]|0}if((b&d|0)==(b|0)){a=b;a=a&65535;return a|0}a=d&~(b>>31);a=a&65535;return a|0}else{c=Oe(a,a+4580|0)|0;f=k[d>>2]|0;e=f<<1|1;b=(ia(e,c)|0)+b|0;if((b|0)>=(0-f|0)){d=k[g>>2]|0;if((d+f|0)<(b|0))b=b-(ia(k[a+132>>2]|0,e)|0)|0}else{b=(ia(k[a+132>>2]|0,e)|0)+b|0;d=k[g>>2]|0}if((b&d|0)==(b|0)){a=b;a=a&65535;return a|0}a=d&~(b>>31);a=a&65535;return a|0}return 0}function Oe(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,m=0;m=b+9|0;c=l[m>>0]|0;f=b+4|0;e=(ia(c>>>1,k[f>>2]|0)|0)+(k[b>>2]|0)|0;if((c|0)<(e|0)){d=0;do{c=c<<1;d=d+1|0}while((c|0)<(e|0))}else d=0;g=k[a+148>>2]|0;h=k[36076+(k[a+4592>>2]<<2)>>2]|0;c=k[a+140>>2]|0;e=Pe(a)|0;do if((e|0)<(g+-2-h-c|0))if(!d){d=k[f>>2]|0;a=d+e|0;c=a&1;a=(c+a|0)/2|0;j=8;break}else{h=(Qe(a,d)|0)+(e<<d)|0;d=k[f>>2]|0;e=h+d|0;g=e&1;c=g;f=1;e=(g+e|0)/2|0;break}else{e=(Qe(a,c)|0)+1|0;g=k[f>>2]|0;a=e+g|0;c=a&1;a=(c+a|0)/2|0;if(!d){d=g;j=8}else{h=e;f=1;e=a;d=g}}while(0);if((j|0)==8){h=e;f=l[b+10>>0]<<1>>>0>=(l[m>>0]|0)>>>0;e=a}e=(c|0)!=0^f?e:0-e|0;if((e|0)<0){j=b+10|0;i[j>>0]=(l[j>>0]|0)+1}c=(h+1-d>>1)+(k[b>>2]|0)|0;k[b>>2]=c;d=i[m>>0]|0;if(d<<24>>24!=(i[b+8>>0]|0)){b=d;b=b&255;b=b+1|0;b=b&255;i[m>>0]=b;return e|0}k[b>>2]=c>>1;j=(d&255)>>>1;i[m>>0]=j;b=b+10|0;i[b>>0]=(l[b>>0]|0)>>>1;b=j;b=b&255;b=b+1|0;b=b&255;i[m>>0]=b;return e|0}function Pe(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;f=a+112|0;if((k[f>>2]|0)<16)Xd(a);g=a+108|0;c=k[g>>2]|0;if((c|0)>=0)if(!(c&1073741824))if(!(c&536870912))if(!(c&268435456))if(!(c&134217728))if(!(c&67108864))if(!(c&33554432))if(!(c&16777216))if(!(c&8388608))if(!(c&4194304))if(!(c&2097152))if(!(c&1048576))if(!(c&524288))if(!(c&262144))if(!(c&131072)){e=c>>>12&16;b=e+-1|0;if(!e){b=(k[f>>2]|0)+-15|0;k[f>>2]=b;d=c<<15;k[g>>2]=d;c=b;b=15;while(1){if((c|0)<1){Xd(a);e=k[g>>2]|0;c=k[f>>2]|0}else e=d;c=c+-1|0;k[f>>2]=c;d=e<<1;k[g>>2]=d;if((e|0)<0)break;else b=b+1|0}return b|0}}else b=14;else b=13;else b=12;else b=11;else b=10;else b=9;else b=8;else b=7;else b=6;else b=5;else b=4;else b=3;else b=2;else b=1;else b=0;a=b+1|0;k[f>>2]=(k[f>>2]|0)-a;k[g>>2]=c<<a;g=b;return g|0}function Qe(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;d=a+112|0;c=k[d>>2]|0;if((c|0)<(b|0)){Xd(a);c=k[d>>2]|0;if((c|0)<(b|0)){c=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,c|0,5,35472);a=x;x=0;if(a&1){a=Wa()|0;Ua(c|0);fb(a|0)}else ub(c|0,648,74)}}e=a+108|0;a=k[e>>2]|0;k[d>>2]=c-b;k[e>>2]=a<<b;return a>>>(32-b|0)|0}function Re(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;o=r;r=r+32|0;d=o;n=a+136|0;a:do if(!(k[n>>2]|0)){c=k[a+128>>2]|0;b=a+144|0;if((((c|0)==((1<<k[b>>2])+-1|0)?(Ag(d,c,0),(k[d+4>>2]|0)==(k[a+176>>2]|0)):0)?(k[d+8>>2]|0)==(k[a+180>>2]|0):0)?(k[d+12>>2]|0)==(k[a+184>>2]|0):0)switch(k[b>>2]|0){case 8:{n=k[8856]|0;k[a+4604>>2]=n+(((k[8857]|0)-n|0)>>>1);r=o;return}case 10:{n=k[8859]|0;k[a+4604>>2]=n+(((k[8860]|0)-n|0)>>>1);r=o;return}case 12:{n=k[8862]|0;k[a+4604>>2]=n+(((k[8863]|0)-n|0)>>>1);r=o;return}case 16:{n=k[8865]|0;k[a+4604>>2]=n+(((k[8866]|0)-n|0)>>>1);r=o;return}default:break a}}else b=a+144|0;while(0);m=1<<k[b>>2];c=a+4608|0;d=m<<1;e=a+4612|0;f=k[e>>2]|0;b=k[c>>2]|0;g=f-b|0;if(d>>>0<=g>>>0){if(d>>>0<g>>>0?(h=b+d|0,(f|0)!=(h|0)):0)k[e>>2]=h}else{Yd(c,d-g|0);b=k[c>>2]|0}l=a+4604|0;k[l>>2]=b+m;b=0-m|0;if((m|0)<=(b|0)){r=o;return}h=a+184|0;j=a+180|0;g=a+176|0;f=b;do{b=k[h>>2]|0;if((f|0)>(0-b|0)){c=k[j>>2]|0;if((f|0)>(0-c|0)){d=k[g>>2]|0;if((f|0)>(0-d|0)){e=k[n>>2]|0;if((f|0)>=(0-e|0))if((e|0)<(f|0))if((d|0)<=(f|0))if((c|0)>(f|0))b=2;else b=(b|0)>(f|0)?3:4;else b=1;else b=0;else b=-1}else b=-2}else b=-3}else b=-4;i[(k[l>>2]|0)+f>>0]=b;f=f+1|0}while((f|0)!=(m|0));r=o;return}function Se(a){a=a|0;var b=0,c=0;k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}a=a+88|0;b=k[a>>2]|0;k[a>>2]=0;if(!b)return;Lb[k[(k[b>>2]|0)+4>>2]&255](b);return}function Te(a){a=a|0;var b=0,c=0;k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}c=a+88|0;b=k[c>>2]|0;k[c>>2]=0;if(!b){Sg(a);return}Lb[k[(k[b>>2]|0)+4>>2]&255](b);Sg(a);return}function Ue(a){a=a|0;var b=0,c=0;k[a>>2]=35652;b=k[a+4608>>2]|0;if(b){c=a+4612|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}a=a+88|0;b=k[a>>2]|0;k[a>>2]=0;if(!b)return;Lb[k[(k[b>>2]|0)+4>>2]&255](b);return}function Ve(a){a=a|0;var b=0,c=0;k[a>>2]=35652;b=k[a+4608>>2]|0;if(b){c=a+4612|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}c=a+88|0;b=k[c>>2]|0;k[c>>2]=0;if(!b){Sg(a);return}Lb[k[(k[b>>2]|0)+4>>2]&255](b);Sg(a);return}function We(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,y=0,z=0;u=r;r=r+352|0;v=u+328|0;y=u+192|0;c=u+343|0;d=u+342|0;e=u+341|0;f=u+340|0;o=u+176|0;h=u+168|0;j=u+160|0;l=u+152|0;t=u;q=u+136|0;if((k[a+28>>2]|0)!=0?(k[a+20>>2]|0)!=1:0){p=a+4|0;s=a+32|0;g=k[s>>2]|0;if(!g){a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[c>>0]|0;Ja(36,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}a=k[a+12>>2]|0;if((a|0)==16)switch(g|0){case 1:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[d>>0]|0;Ja(37,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 2:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[e>>0]|0;Ja(38,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 3:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[f>>0]|0;Ja(39,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}default:{g=y+56|0;e=y+4|0;k[y>>2]=35760;k[g>>2]=35780;x=0;ra(52,y+56|0,e|0);u=x;x=0;if(u&1){z=Wa()|0;Vk(g);fb(z|0)}k[y+128>>2]=0;k[y+132>>2]=-1;k[y>>2]=35800;k[y+56>>2]=35820;x=0;qa(158,e|0);u=x;x=0;do if(u&1)a=Wa()|0;else{k[e>>2]=35836;f=y+36|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=0;k[f+12>>2]=0;k[y+52>>2]=16;k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;x=0;ra(53,e|0,v|0);u=x;x=0;if(u&1){a=Wa()|0;wk(v);wk(f);al(e);break}wk(v);x=0;a=va(28,y|0,48036,21)|0;v=x;x=0;do if((!(v&1)?(x=0,m=Aa(27,a|0,k[s>>2]|0)|0,v=x,x=0,!(v&1)):0)?(x=0,va(28,m|0,49453,18)|0,v=x,x=0,!(v&1)):0){d=Va(16)|0;x=0;ra(54,o|0,e|0);v=x;x=0;if(!(v&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,d|0,9,35472,o|0);v=x;x=0;if(v&1)c=1;else{x=0;Fa(5,d|0,648,74);x=0;c=0}a=Wa()|0;wk(o);if(!c)break}else a=Wa()|0;Ua(d|0)}else z=34;while(0);if((z|0)==34)a=Wa()|0;k[y>>2]=35800;k[g>>2]=35820;k[e>>2]=35836;wk(f);al(e);Vk(g);z=a;fb(z|0)}while(0);z=a;Vk(g);fb(z|0)}}if((a|0)<=8){a=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,a|0,8,35472);z=x;x=0;if(!(z&1))ub(a|0,648,74);z=Wa()|0;Ua(a|0);fb(z|0)}c=16-a|0;switch(g|0){case 1:{a=Rg(60)|0;k[h>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[h>>2];k[v+4>>2]=k[h+4>>2];Ja(40,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 2:{a=Rg(60)|0;k[j>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[j>>2];k[v+4>>2]=k[j+4>>2];Ja(41,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 3:{a=Rg(60)|0;k[l>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[l>>2];k[v+4>>2]=k[l+4>>2];Ja(42,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}default:{g=t+56|0;e=t+4|0;k[t>>2]=35760;k[g>>2]=35780;x=0;ra(52,t+56|0,e|0);y=x;x=0;if(y&1){z=Wa()|0;Vk(g);fb(z|0)}k[t+128>>2]=0;k[t+132>>2]=-1;k[t>>2]=35800;k[t+56>>2]=35820;x=0;qa(158,e|0);y=x;x=0;do if(y&1)a=Wa()|0;else{k[e>>2]=35836;f=t+36|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=0;k[f+12>>2]=0;k[t+52>>2]=16;k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;x=0;ra(53,e|0,v|0);y=x;x=0;if(y&1){a=Wa()|0;wk(v);wk(f);al(e);break}wk(v);x=0;a=va(28,t|0,48036,21)|0;y=x;x=0;do if((!(y&1)?(x=0,n=Aa(27,a|0,k[s>>2]|0)|0,y=x,x=0,!(y&1)):0)?(x=0,va(28,n|0,49453,18)|0,y=x,x=0,!(y&1)):0){d=Va(16)|0;x=0;ra(54,q|0,e|0);y=x;x=0;if(!(y&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,d|0,9,35472,q|0);y=x;x=0;if(y&1)c=1;else{x=0;Fa(5,d|0,648,74);x=0;c=0}a=Wa()|0;wk(q);if(!c)break}else a=Wa()|0;Ua(d|0)}else z=64;while(0);if((z|0)==64)a=Wa()|0;k[t>>2]=35800;k[g>>2]=35820;k[e>>2]=35836;wk(f);al(e);Vk(g);z=a;fb(z|0)}while(0);z=a;Vk(g);fb(z|0)}}}c=k[b+4>>2]|0;d=Rg(16)|0;a=k[a+16>>2]|0;if(!c){z=k[b>>2]|0;k[d>>2]=35732;k[d+4>>2]=z;k[d+8>>2]=6;k[d+12>>2]=a;z=d;r=u;return z|0}else{k[d>>2]=35708;k[d+4>>2]=c;k[d+8>>2]=6;k[d+12>>2]=a;z=d;r=u;return z|0}return 0}function Xe(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,l=0;g=r;r=r+32|0;l=g;Ag(l,k[a+128>>2]|0,k[a+136>>2]|0);h=k[b+4>>2]|0;f=k[b+8>>2]|0;f=(f|0)==0?k[l+8>>2]|0:f;e=k[b+12>>2]|0;e=(e|0)==0?k[l+12>>2]|0:e;c=k[b+16>>2]|0;d=k[l+16>>2]|0;k[a+176>>2]=(h|0)==0?k[l+4>>2]|0:h;k[a+180>>2]=f;k[a+184>>2]=e;df(a);e=a+132|0;b=(k[e>>2]|0)+32|0;b=(b|0)<128?2:(b|0)/64|0;f=0;do{k[a+188+(f*12|0)>>2]=b;k[a+188+(f*12|0)+4>>2]=0;j[a+188+(f*12|0)+8>>1]=0;j[a+188+(f*12|0)+10>>1]=1;f=f+1|0}while((f|0)!=365);h=(k[e>>2]|0)+32|0;h=(h|0)<128?2:(h|0)/64|0;l=((c|0)==0?d:c)&255;k[a+4568>>2]=h;k[a+4572>>2]=0;i[a+4576>>0]=l;i[a+4577>>0]=1;i[a+4578>>0]=0;k[a+4580>>2]=h;k[a+4584>>2]=1;i[a+4588>>0]=l;i[a+4589>>0]=1;i[a+4590>>0]=0;k[a+4592>>2]=0;r=g;return}function Ye(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=a+88|0;f=k[b>>2]|0;k[b>>2]=0;b=k[g>>2]|0;k[g>>2]=f;if(b)Lb[k[(k[b>>2]|0)+4>>2]&255](b);g=d+4|0;f=k[g>>2]|0;i[a+4620>>0]=e&1;b=a+156|0;k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];Vd(a,d);Ze(a);b=k[a+116>>2]|0;a=k[a+112>>2]|0;while(1){e=b+-1|0;c=(i[e>>0]|0)==-1?7:8;if((a|0)<(c|0))break;else{b=e;a=a-c|0}}b=b-f|0;e=k[g>>2]|0;if(!e)return;k[g>>2]=e+b;d=d+8|0;k[d>>2]=(k[d>>2]|0)-b;return}function Ze(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0;A=r;r=r+32|0;C=A+12|0;z=A;v=a+172|0;w=(k[v>>2]|0)+4|0;if((k[a+28>>2]|0)==1)y=k[a+20>>2]|0;else y=1;b=ia(y<<1,w)|0;k[C>>2]=0;D=C+4|0;k[D>>2]=0;k[C+8>>2]=0;do if(b){if(!(b>>>0>715827882?(x=0,qa(155,C|0),B=x,x=0,B&1):0))g=6;if((g|0)==6?(x=0,c=ta(66,b*6|0)|0,B=x,x=0,!(B&1)):0){k[D>>2]=c;k[C>>2]=c;d=c+(b*6|0)|0;k[C+8>>2]=d;while(1){j[c>>1]=0;j[c+2>>1]=0;j[c+4>>1]=0;b=b+-1|0;if(!b)break;else c=c+6|0}k[D>>2]=d;break}d=Wa()|0;b=k[C>>2]|0;if(!b)fb(d|0);c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~(((c+-6-b|0)>>>0)/6|0)*6|0);Sg(b);fb(d|0)}while(0);k[z>>2]=0;B=z+4|0;k[B>>2]=0;k[z+8>>2]=0;do if(!y)g=20;else{if(!(y>>>0>1073741823?(x=0,qa(155,z|0),u=x,x=0,u&1):0))g=18;if((g|0)==18?(e=y<<2,x=0,f=ta(66,e|0)|0,u=x,x=0,!(u&1)):0){k[z>>2]=f;g=f+(y<<2)|0;k[z+8>>2]=g;Yt(f|0,0,e|0)|0;k[B>>2]=g;g=20;break}d=Wa()|0;b=k[z>>2]|0;c=b;if(b){e=k[B>>2]|0;if((e|0)!=(b|0))k[B>>2]=e+(~((e+-4-c|0)>>>2)<<2);Sg(b)}}while(0);if((g|0)==20){f=a+8|0;a:do if((k[f>>2]|0)>0){g=a+4596|0;h=ia(y,w)|0;i=h+1|0;l=a+4600|0;m=(y|0)>0;n=a+160|0;o=a+168|0;p=a+164|0;q=a+156|0;s=a+88|0;t=a+4592|0;u=0;b:while(1){d=k[C>>2]|0;c=d+6|0;k[g>>2]=c;d=d+(i*6|0)|0;k[l>>2]=d;if(!(u&1))b=d;else{k[g>>2]=d;k[l>>2]=c;b=c;c=d}if(m){e=k[z>>2]|0;d=0;do{k[t>>2]=k[e+(d<<2)>>2];b=k[v>>2]|0;e=c+(b*6|0)|0;c=c+((b+-1|0)*6|0)|0;j[e>>1]=j[c>>1]|0;j[e+2>>1]=j[c+2>>1]|0;j[e+4>>1]=j[c+4>>1]|0;e=(k[l>>2]|0)+-6|0;c=k[g>>2]|0;j[e>>1]=j[c>>1]|0;j[e+2>>1]=j[c+2>>1]|0;j[e+4>>1]=j[c+4>>1]|0;x=0;ra(57,a|0,0);e=x;x=0;if(e&1){g=31;break b}e=k[z>>2]|0;k[e+(d<<2)>>2]=k[t>>2];c=(k[g>>2]|0)+(w*6|0)|0;k[g>>2]=c;b=(k[l>>2]|0)+(w*6|0)|0;k[l>>2]=b;d=d+1|0}while((d|0)<(y|0))}e=k[n>>2]|0;if(((e|0)<=(u|0)?(u|0)<((k[o>>2]|0)+e|0):0)?(e=k[s>>2]|0,x=0,Ja(k[(k[e>>2]|0)+8>>2]|0,e|0,b+(((k[q>>2]|0)-h|0)*6|0)|0,k[p>>2]|0,w|0),e=x,x=0,e&1):0){g=32;break}u=u+1|0;if((u|0)>=(k[f>>2]|0)){g=44;break a}}if((g|0)==31){d=Wa()|0;break}else if((g|0)==32){d=Wa()|0;break}}else g=44;while(0);do if((g|0)==44){x=0;qa(159,a|0);a=x;x=0;if(a&1){d=Wa()|0;break}b=k[z>>2]|0;c=b;if(b){d=k[B>>2]|0;if((d|0)!=(b|0))k[B>>2]=d+(~((d+-4-c|0)>>>2)<<2);Sg(b)}b=k[C>>2]|0;if(!b){r=A;return}c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~(((c+-6-b|0)>>>0)/6|0)*6|0);Sg(b);r=A;return}while(0);b=k[z>>2]|0;c=b;if(b){e=k[B>>2]|0;if((e|0)!=(b|0))k[B>>2]=e+(~((e+-4-c|0)>>>2)<<2);Sg(b)}}b=k[C>>2]|0;if(!b)fb(d|0);c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~(((c+-6-b|0)>>>0)/6|0)*6|0);Sg(b);fb(d|0)}function _e(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,l=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0;N=r;r=r+32|0;D=N+24|0;M=N+18|0;L=N+12|0;E=N+6|0;F=N;G=a+172|0;b=k[G>>2]|0;if((b|0)<=0){r=N;return}H=a+4600|0;I=a+4596|0;J=a+4604|0;K=a+4592|0;C=0;while(1){d=C+-1|0;e=k[H>>2]|0;O=k[I>>2]|0;c=C+1|0;f=m[O+(C*6|0)>>1]|0;B=k[J>>2]|0;g=m[O+(d*6|0)>>1]|0;h=f-g|0;l=m[e+(d*6|0)>>1]|0;n=g-l|0;o=((((i[B+((m[O+(c*6|0)>>1]|0)-f)>>0]|0)*9|0)+(i[B+h>>0]|0)|0)*9|0)+(i[B+n>>0]|0)|0;p=m[O+(C*6|0)+2>>1]|0;q=m[O+(d*6|0)+2>>1]|0;s=p-q|0;t=m[e+(d*6|0)+2>>1]|0;u=q-t|0;v=((((i[B+((m[O+(c*6|0)+2>>1]|0)-p)>>0]|0)*9|0)+(i[B+s>>0]|0)|0)*9|0)+(i[B+u>>0]|0)|0;w=m[O+(C*6|0)+4>>1]|0;x=m[O+(d*6|0)+4>>1]|0;y=w-x|0;z=m[e+(d*6|0)+4>>1]|0;A=x-z|0;B=((((i[B+((m[O+(c*6|0)+4>>1]|0)-w)>>0]|0)*9|0)+(i[B+y>>0]|0)|0)*9|0)+(i[B+A>>0]|0)|0;if(!(v|o|B)){c=e+(d*6|0)|0;j[L>>1]=j[c>>1]|0;j[L+2>>1]=j[c+2>>1]|0;j[L+4>>1]=j[c+4>>1]|0;j[D>>1]=j[c>>1]|0;j[D+2>>1]=j[c+2>>1]|0;j[D+4>>1]=j[c+4>>1]|0;b=$e(a,D,e+(C*6|0)|0,b-C|0)|0;c=b+C|0;if((c|0)!=(k[G>>2]|0)){O=(k[I>>2]|0)+(c*6|0)|0;j[F>>1]=j[O>>1]|0;j[F+2>>1]=j[O+2>>1]|0;j[F+4>>1]=j[O+4>>1]|0;O=(k[H>>2]|0)+(c*6|0)|0;j[M>>1]=j[L>>1]|0;j[M+2>>1]=j[L+2>>1]|0;j[M+4>>1]=j[L+4>>1]|0;j[D>>1]=j[F>>1]|0;j[D+2>>1]=j[F+2>>1]|0;j[D+4>>1]=j[F+4>>1]|0;af(E,a,M,D);j[O>>1]=j[E>>1]|0;j[O+2>>1]=j[E+2>>1]|0;j[O+4>>1]=j[E+4>>1]|0;O=k[K>>2]|0;k[K>>2]=(O|0)<1?0:O+-1|0;b=b+1|0}c=b+C|0}else{d=m[e+(C*6|0)>>1]|0;b=f-l>>31;if((b^n|0)>=0)if((b^h|0)<0)b=l;else b=l-g+f|0;else b=f;f=bf(a,o,d,b,0)|0;d=m[(k[H>>2]|0)+(C*6|0)+2>>1]|0;b=p-t>>31;if((b^u|0)>=0)if((b^s|0)<0)b=t;else b=t-q+p|0;else b=p;d=bf(a,v,d,b,0)|0;e=m[(k[H>>2]|0)+(C*6|0)+4>>1]|0;b=w-z>>31;if((b^A|0)>=0)if((b^y|0)<0)b=z;else b=z-x+w|0;else b=w;B=bf(a,B,e,b,0)|0;O=k[H>>2]|0;j[O+(C*6|0)>>1]=f;j[O+(C*6|0)+2>>1]=d;j[O+(C*6|0)+4>>1]=B}b=k[G>>2]|0;if((c|0)>=(b|0))break;else C=c}r=N;return}function $e(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0;h=a+112|0;l=a+108|0;m=a+4592|0;e=k[h>>2]|0;f=0;while(1){if((e|0)<1){Xd(a);e=k[h>>2]|0}g=k[l>>2]|0;e=e+-1|0;k[h>>2]=e;k[l>>2]=g<<1;if((g|0)>=0){n=8;break}g=k[m>>2]|0;o=1<<k[36076+(g<<2)>>2];p=d-f|0;p=(o|0)<(p|0)?o:p;f=p+f|0;if((p|0)==(o|0))k[m>>2]=(g|0)>30?31:g+1|0;if((f|0)==(d|0)){e=d;break}}if((n|0)==8)if((f|0)!=(d|0)){e=k[m>>2]|0;if((e+-4|0)>>>0<28)e=Qe(a,k[36076+(e<<2)>>2]|0)|0;else e=0;e=e+f|0;if((e|0)>(d|0)){e=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,e|0,5,35472);p=x;x=0;if(p&1){p=Wa()|0;Ua(e|0);fb(p|0)}else ub(e|0,648,74)}}else e=d;if((e|0)<=0)return e|0;f=0;do{p=c+(f*6|0)|0;j[p>>1]=j[b>>1]|0;j[p+2>>1]=j[b+2>>1]|0;j[p+4>>1]=j[b+4>>1]|0;f=f+1|0}while((f|0)!=(e|0));return e|0}function af(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,l=0,n=0,o=0;i=b+4568|0;o=cf(b,i)|0;g=cf(b,i)|0;i=cf(b,i)|0;f=b+128|0;e=m[d>>1]|0;l=k[b+136>>2]|0;n=l<<1|1;e=(ia(ia(n,o)|0,e-(m[c>>1]|0)>>31|1)|0)+e|0;o=0-l|0;if((e|0)>=(o|0)){f=k[f>>2]|0;if((f+l|0)<(e|0))e=e-(ia(k[b+132>>2]|0,n)|0)|0}else{e=(ia(k[b+132>>2]|0,n)|0)+e|0;f=k[f>>2]|0}if((e&f|0)!=(e|0))e=f&~(e>>31);h=e&65535;e=m[d+2>>1]|0;e=(ia(ia(n,g)|0,e-(m[c+2>>1]|0)>>31|1)|0)+e|0;if((e|0)>=(o|0)){if((f+l|0)<(e|0))e=e-(ia(k[b+132>>2]|0,n)|0)|0}else e=(ia(k[b+132>>2]|0,n)|0)+e|0;if((e&f|0)!=(e|0))e=f&~(e>>31);g=e&65535;e=m[d+4>>1]|0;e=(ia(ia(n,i)|0,e-(m[c+4>>1]|0)>>31|1)|0)+e|0;if((e|0)>=(o|0)){if((f+l|0)<(e|0))e=e-(ia(k[b+132>>2]|0,n)|0)|0}else e=(ia(k[b+132>>2]|0,n)|0)+e|0;if((e&f|0)==(e|0)){b=e;b=b&65535;j[a>>1]=h;o=a+2|0;j[o>>1]=g;a=a+4|0;j[a>>1]=b;return}b=f&~(e>>31);b=b&65535;j[a>>1]=h;o=a+2|0;j[o>>1]=g;a=a+4|0;j[a>>1]=b;return}function bf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=b>>31;l=(r^b)-r|0;p=a+188+(l*12|0)+10|0;c=j[p>>1]|0;o=a+188+(l*12|0)|0;e=k[o>>2]|0;if((c|0)<(e|0))if((c<<1|0)<(e|0))if((c<<2|0)<(e|0))if((c<<3|0)<(e|0))if((c<<4|0)<(e|0)){b=5;while(1)if((c<<b|0)<(e|0))b=b+1|0;else break}else b=4;else b=3;else b=2;else b=1;else b=0;n=a+188+(l*12|0)+8|0;c=(j[n>>1]^r)-r+d|0;q=a+128|0;e=k[q>>2]|0;if((c&e|0)==(c|0))m=c;else m=e&~(c>>31);c=a+112|0;if((k[c>>2]|0)<8)Xd(a);e=a+108|0;d=k[e>>2]|0;f=d>>>24;g=k[2656+(b<<11)+(f<<3)+4>>2]|0;if(!g){h=k[a+148>>2]|0;e=k[a+140>>2]|0;c=Pe(a)|0;if((c|0)<(h+-1-e|0)){if(b)c=(Qe(a,b)|0)+(c<<b)|0}else c=(Qe(a,e)|0)+1|0;c=c<<31>>31^c>>1;if((((c|0)>-1?c:0-c|0)|0)>65535){c=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,c|0,5,35472);a=x;x=0;if(a&1){a=Wa()|0;Ua(c|0);fb(a|0)}else ub(c|0,648,74)}}else{k[c>>2]=(k[c>>2]|0)-g;k[e>>2]=d<<g;c=k[2656+(b<<11)+(f<<3)>>2]|0}h=a+136|0;d=k[h>>2]|0;if(!b){if(!d)e=(k[a+188+(l*12|0)+4>>2]<<1)+-1+(j[p>>1]|0)>>31;else e=0;g=e^c}else g=c;b=k[a+152>>2]|0;e=(k[o>>2]|0)+((g|0)>-1?g:0-g|0)|0;f=a+188+(l*12|0)+4|0;c=(k[f>>2]|0)+(ia(d<<1|1,g)|0)|0;d=j[p>>1]|0;if((d|0)==(b|0)){e=e>>1;c=c>>1;d=b>>1}k[o>>2]=e;b=d+1|0;j[p>>1]=b;e=b+c|0;if((e|0)>=1){if((c|0)>0){c=c-b|0;p=j[n>>1]|0;j[n>>1]=(p<<16>>16<127&1)+(p&65535);c=(c|0)>0?0:c}}else{c=j[n>>1]|0;j[n>>1]=(c&65535)-(c<<16>>16>-128&1);c=(e|0)>(~d|0)?e:0-d|0}k[f>>2]=c;b=k[h>>2]|0;d=b<<1|1;e=(ia(d,(g^r)-r|0)|0)+m|0;if((e|0)>=(0-b|0)){c=k[q>>2]|0;if((c+b|0)<(e|0))e=e-(ia(k[a+132>>2]|0,d)|0)|0}else{e=(ia(k[a+132>>2]|0,d)|0)+e|0;c=k[q>>2]|0}if((e&c|0)==(e|0)){a=e;a=a&65535;return a|0}a=c&~(e>>31);a=a&65535;return a|0}function cf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,m=0;m=b+9|0;c=l[m>>0]|0;f=b+4|0;e=(ia(c>>>1,k[f>>2]|0)|0)+(k[b>>2]|0)|0;if((c|0)<(e|0)){d=0;do{c=c<<1;d=d+1|0}while((c|0)<(e|0))}else d=0;g=k[a+148>>2]|0;h=k[36076+(k[a+4592>>2]<<2)>>2]|0;c=k[a+140>>2]|0;e=Pe(a)|0;do if((e|0)<(g+-2-h-c|0))if(!d){d=k[f>>2]|0;a=d+e|0;c=a&1;a=(c+a|0)/2|0;j=8;break}else{h=(Qe(a,d)|0)+(e<<d)|0;d=k[f>>2]|0;e=h+d|0;g=e&1;c=g;f=1;e=(g+e|0)/2|0;break}else{e=(Qe(a,c)|0)+1|0;g=k[f>>2]|0;a=e+g|0;c=a&1;a=(c+a|0)/2|0;if(!d){d=g;j=8}else{h=e;f=1;e=a;d=g}}while(0);if((j|0)==8){h=e;f=l[b+10>>0]<<1>>>0>=(l[m>>0]|0)>>>0;e=a}e=(c|0)!=0^f?e:0-e|0;if((e|0)<0){j=b+10|0;i[j>>0]=(l[j>>0]|0)+1}c=(h+1-d>>1)+(k[b>>2]|0)|0;k[b>>2]=c;d=i[m>>0]|0;if(d<<24>>24!=(i[b+8>>0]|0)){b=d;b=b&255;b=b+1|0;b=b&255;i[m>>0]=b;return e|0}k[b>>2]=c>>1;j=(d&255)>>>1;i[m>>0]=j;b=b+10|0;i[b>>0]=(l[b>>0]|0)>>>1;b=j;b=b&255;b=b+1|0;b=b&255;i[m>>0]=b;return e|0}function df(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;o=r;r=r+32|0;d=o;n=a+136|0;a:do if(!(k[n>>2]|0)){c=k[a+128>>2]|0;b=a+144|0;if((((c|0)==((1<<k[b>>2])+-1|0)?(Ag(d,c,0),(k[d+4>>2]|0)==(k[a+176>>2]|0)):0)?(k[d+8>>2]|0)==(k[a+180>>2]|0):0)?(k[d+12>>2]|0)==(k[a+184>>2]|0):0)switch(k[b>>2]|0){case 8:{n=k[8856]|0;k[a+4604>>2]=n+(((k[8857]|0)-n|0)>>>1);r=o;return}case 10:{n=k[8859]|0;k[a+4604>>2]=n+(((k[8860]|0)-n|0)>>>1);r=o;return}case 12:{n=k[8862]|0;k[a+4604>>2]=n+(((k[8863]|0)-n|0)>>>1);r=o;return}case 16:{n=k[8865]|0;k[a+4604>>2]=n+(((k[8866]|0)-n|0)>>>1);r=o;return}default:break a}}else b=a+144|0;while(0);m=1<<k[b>>2];c=a+4608|0;d=m<<1;e=a+4612|0;f=k[e>>2]|0;b=k[c>>2]|0;g=f-b|0;if(d>>>0<=g>>>0){if(d>>>0<g>>>0?(h=b+d|0,(f|0)!=(h|0)):0)k[e>>2]=h}else{Yd(c,d-g|0);b=k[c>>2]|0}l=a+4604|0;k[l>>2]=b+m;b=0-m|0;if((m|0)<=(b|0)){r=o;return}h=a+184|0;j=a+180|0;g=a+176|0;f=b;do{b=k[h>>2]|0;if((f|0)>(0-b|0)){c=k[j>>2]|0;if((f|0)>(0-c|0)){d=k[g>>2]|0;if((f|0)>(0-d|0)){e=k[n>>2]|0;if((f|0)>=(0-e|0))if((e|0)<(f|0))if((d|0)<=(f|0))if((c|0)>(f|0))b=2;else b=(b|0)>(f|0)?3:4;else b=1;else b=0;else b=-1}else b=-2}else b=-3}else b=-4;i[(k[l>>2]|0)+f>>0]=b;f=f+1|0}while((f|0)!=(m|0));r=o;return}function ef(a){a=a|0;var b=0,c=0;k[a>>2]=35624;b=k[a+4608>>2]|0;if(b){c=a+4612|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}a=a+88|0;b=k[a>>2]|0;k[a>>2]=0;if(!b)return;Lb[k[(k[b>>2]|0)+4>>2]&255](b);return}function ff(a){a=a|0;var b=0,c=0;k[a>>2]=35624;b=k[a+4608>>2]|0;if(b){c=a+4612|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}c=a+88|0;b=k[c>>2]|0;k[c>>2]=0;if(!b){Sg(a);return}Lb[k[(k[b>>2]|0)+4>>2]&255](b);Sg(a);return}function gf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,y=0,z=0;u=r;r=r+352|0;v=u+328|0;y=u+192|0;c=u+343|0;d=u+342|0;e=u+341|0;f=u+340|0;o=u+176|0;h=u+168|0;j=u+160|0;l=u+152|0;t=u;q=u+136|0;if((k[a+28>>2]|0)!=0?(k[a+20>>2]|0)!=1:0){p=a+4|0;s=a+32|0;g=k[s>>2]|0;if(!g){a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[c>>0]|0;Ja(43,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}a=k[a+12>>2]|0;if((a|0)==8)switch(g|0){case 1:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[d>>0]|0;Ja(44,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 2:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[e>>0]|0;Ja(45,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 3:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[f>>0]|0;Ja(46,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}default:{g=y+56|0;e=y+4|0;k[y>>2]=35760;k[g>>2]=35780;x=0;ra(52,y+56|0,e|0);u=x;x=0;if(u&1){z=Wa()|0;Vk(g);fb(z|0)}k[y+128>>2]=0;k[y+132>>2]=-1;k[y>>2]=35800;k[y+56>>2]=35820;x=0;qa(158,e|0);u=x;x=0;do if(u&1)a=Wa()|0;else{k[e>>2]=35836;f=y+36|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=0;k[f+12>>2]=0;k[y+52>>2]=16;k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;x=0;ra(53,e|0,v|0);u=x;x=0;if(u&1){a=Wa()|0;wk(v);wk(f);al(e);break}wk(v);x=0;a=va(28,y|0,48036,21)|0;v=x;x=0;do if((!(v&1)?(x=0,m=Aa(27,a|0,k[s>>2]|0)|0,v=x,x=0,!(v&1)):0)?(x=0,va(28,m|0,49453,18)|0,v=x,x=0,!(v&1)):0){d=Va(16)|0;x=0;ra(54,o|0,e|0);v=x;x=0;if(!(v&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,d|0,9,35472,o|0);v=x;x=0;if(v&1)c=1;else{x=0;Fa(5,d|0,648,74);x=0;c=0}a=Wa()|0;wk(o);if(!c)break}else a=Wa()|0;Ua(d|0)}else z=34;while(0);if((z|0)==34)a=Wa()|0;k[y>>2]=35800;k[g>>2]=35820;k[e>>2]=35836;wk(f);al(e);Vk(g);z=a;fb(z|0)}while(0);z=a;Vk(g);fb(z|0)}}if((a|0)<=8){a=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,a|0,8,35472);z=x;x=0;if(!(z&1))ub(a|0,648,74);z=Wa()|0;Ua(a|0);fb(z|0)}c=16-a|0;switch(g|0){case 1:{a=Rg(60)|0;k[h>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[h>>2];k[v+4>>2]=k[h+4>>2];Ja(40,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 2:{a=Rg(60)|0;k[j>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[j>>2];k[v+4>>2]=k[j+4>>2];Ja(41,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 3:{a=Rg(60)|0;k[l>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[l>>2];k[v+4>>2]=k[l+4>>2];Ja(42,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}default:{g=t+56|0;e=t+4|0;k[t>>2]=35760;k[g>>2]=35780;x=0;ra(52,t+56|0,e|0);y=x;x=0;if(y&1){z=Wa()|0;Vk(g);fb(z|0)}k[t+128>>2]=0;k[t+132>>2]=-1;k[t>>2]=35800;k[t+56>>2]=35820;x=0;qa(158,e|0);y=x;x=0;do if(y&1)a=Wa()|0;else{k[e>>2]=35836;f=t+36|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=0;k[f+12>>2]=0;k[t+52>>2]=16;k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;x=0;ra(53,e|0,v|0);y=x;x=0;if(y&1){a=Wa()|0;wk(v);wk(f);al(e);break}wk(v);x=0;a=va(28,t|0,48036,21)|0;y=x;x=0;do if((!(y&1)?(x=0,n=Aa(27,a|0,k[s>>2]|0)|0,y=x,x=0,!(y&1)):0)?(x=0,va(28,n|0,49453,18)|0,y=x,x=0,!(y&1)):0){d=Va(16)|0;x=0;ra(54,q|0,e|0);y=x;x=0;if(!(y&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,d|0,9,35472,q|0);y=x;x=0;if(y&1)c=1;else{x=0;Fa(5,d|0,648,74);x=0;c=0}a=Wa()|0;wk(q);if(!c)break}else a=Wa()|0;Ua(d|0)}else z=64;while(0);if((z|0)==64)a=Wa()|0;k[t>>2]=35800;k[g>>2]=35820;k[e>>2]=35836;wk(f);al(e);Vk(g);z=a;fb(z|0)}while(0);z=a;Vk(g);fb(z|0)}}}c=k[b+4>>2]|0;d=Rg(16)|0;a=k[a+16>>2]|0;if(!c){z=k[b>>2]|0;k[d>>2]=35732;k[d+4>>2]=z;k[d+8>>2]=3;k[d+12>>2]=a;z=d;r=u;return z|0}else{k[d>>2]=35708;k[d+4>>2]=c;k[d+8>>2]=3;k[d+12>>2]=a;z=d;r=u;return z|0}return 0}function hf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,l=0;g=r;r=r+32|0;l=g;Ag(l,k[a+128>>2]|0,k[a+136>>2]|0);h=k[b+4>>2]|0;f=k[b+8>>2]|0;f=(f|0)==0?k[l+8>>2]|0:f;e=k[b+12>>2]|0;e=(e|0)==0?k[l+12>>2]|0:e;c=k[b+16>>2]|0;d=k[l+16>>2]|0;k[a+176>>2]=(h|0)==0?k[l+4>>2]|0:h;k[a+180>>2]=f;k[a+184>>2]=e;qf(a);e=a+132|0;b=(k[e>>2]|0)+32|0;b=(b|0)<128?2:(b|0)/64|0;f=0;do{k[a+188+(f*12|0)>>2]=b;k[a+188+(f*12|0)+4>>2]=0;j[a+188+(f*12|0)+8>>1]=0;j[a+188+(f*12|0)+10>>1]=1;f=f+1|0}while((f|0)!=365);h=(k[e>>2]|0)+32|0;h=(h|0)<128?2:(h|0)/64|0;l=((c|0)==0?d:c)&255;k[a+4568>>2]=h;k[a+4572>>2]=0;i[a+4576>>0]=l;i[a+4577>>0]=1;i[a+4578>>0]=0;k[a+4580>>2]=h;k[a+4584>>2]=1;i[a+4588>>0]=l;i[a+4589>>0]=1;i[a+4590>>0]=0;k[a+4592>>2]=0;r=g;return}function jf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=a+88|0;f=k[b>>2]|0;k[b>>2]=0;b=k[g>>2]|0;k[g>>2]=f;if(b)Lb[k[(k[b>>2]|0)+4>>2]&255](b);g=d+4|0;f=k[g>>2]|0;i[a+4620>>0]=e&1;b=a+156|0;k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];Vd(a,d);kf(a);b=k[a+116>>2]|0;a=k[a+112>>2]|0;while(1){e=b+-1|0;c=(i[e>>0]|0)==-1?7:8;if((a|0)<(c|0))break;else{b=e;a=a-c|0}}b=b-f|0;e=k[g>>2]|0;if(!e)return;k[g>>2]=e+b;d=d+8|0;k[d>>2]=(k[d>>2]|0)-b;return}function kf(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0;A=r;r=r+32|0;C=A+12|0;z=A;v=a+172|0;w=(k[v>>2]|0)+4|0;if((k[a+28>>2]|0)==1)y=k[a+20>>2]|0;else y=1;b=ia(y<<1,w)|0;k[C>>2]=0;D=C+4|0;k[D>>2]=0;k[C+8>>2]=0;a:do if(b){if(!(b>>>0>1431655765?(x=0,qa(155,C|0),B=x,x=0,B&1):0))f=6;if((f|0)==6?(x=0,c=ta(66,b*3|0)|0,B=x,x=0,!(B&1)):0){k[D>>2]=c;k[C>>2]=c;k[C+8>>2]=c+(b*3|0);while(1){i[c>>0]=0;i[c+1>>0]=0;i[c+2>>0]=0;c=(k[D>>2]|0)+3|0;k[D>>2]=c;b=b+-1|0;if(!b)break a}}d=Wa()|0;b=k[C>>2]|0;if(!b)fb(d|0);c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~(((c+-3-b|0)>>>0)/3|0)*3|0);Sg(b);fb(d|0)}while(0);k[z>>2]=0;B=z+4|0;k[B>>2]=0;k[z+8>>2]=0;do if(!y)f=19;else{if(!(y>>>0>1073741823?(x=0,qa(155,z|0),u=x,x=0,u&1):0))f=17;if((f|0)==17?(d=y<<2,x=0,e=ta(66,d|0)|0,u=x,x=0,!(u&1)):0){k[z>>2]=e;f=e+(y<<2)|0;k[z+8>>2]=f;Yt(e|0,0,d|0)|0;k[B>>2]=f;f=19;break}d=Wa()|0;b=k[z>>2]|0;c=b;if(b){e=k[B>>2]|0;if((e|0)!=(b|0))k[B>>2]=e+(~((e+-4-c|0)>>>2)<<2);Sg(b)}}while(0);if((f|0)==19){f=a+8|0;b:do if((k[f>>2]|0)>0){g=a+4596|0;h=ia(y,w)|0;j=h+1|0;l=a+4600|0;m=(y|0)>0;n=a+160|0;o=a+168|0;p=a+164|0;q=a+156|0;s=a+88|0;t=a+4592|0;u=0;c:while(1){d=k[C>>2]|0;c=d+3|0;k[g>>2]=c;d=d+(j*3|0)|0;k[l>>2]=d;if(!(u&1))b=d;else{k[g>>2]=d;k[l>>2]=c;b=c;c=d}if(m){e=k[z>>2]|0;d=0;do{k[t>>2]=k[e+(d<<2)>>2];b=k[v>>2]|0;e=c+(b*3|0)|0;c=c+((b+-1|0)*3|0)|0;i[e>>0]=i[c>>0]|0;i[e+1>>0]=i[c+1>>0]|0;i[e+2>>0]=i[c+2>>0]|0;c=k[g>>2]|0;e=(k[l>>2]|0)+-3|0;i[e>>0]=i[c>>0]|0;i[e+1>>0]=i[c+1>>0]|0;i[e+2>>0]=i[c+2>>0]|0;x=0;ra(58,a|0,0);e=x;x=0;if(e&1){f=30;break c}e=k[z>>2]|0;k[e+(d<<2)>>2]=k[t>>2];c=(k[g>>2]|0)+(w*3|0)|0;k[g>>2]=c;b=(k[l>>2]|0)+(w*3|0)|0;k[l>>2]=b;d=d+1|0}while((d|0)<(y|0))}e=k[n>>2]|0;if(((e|0)<=(u|0)?(u|0)<((k[o>>2]|0)+e|0):0)?(e=k[s>>2]|0,x=0,Ja(k[(k[e>>2]|0)+8>>2]|0,e|0,b+(((k[q>>2]|0)-h|0)*3|0)|0,k[p>>2]|0,w|0),e=x,x=0,e&1):0){f=31;break}u=u+1|0;if((u|0)>=(k[f>>2]|0)){f=43;break b}}if((f|0)==30){d=Wa()|0;break}else if((f|0)==31){d=Wa()|0;break}}else f=43;while(0);do if((f|0)==43){x=0;qa(159,a|0);a=x;x=0;if(a&1){d=Wa()|0;break}b=k[z>>2]|0;c=b;if(b){d=k[B>>2]|0;if((d|0)!=(b|0))k[B>>2]=d+(~((d+-4-c|0)>>>2)<<2);Sg(b)}b=k[C>>2]|0;if(!b){r=A;return}c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~(((c+-3-b|0)>>>0)/3|0)*3|0);Sg(b);r=A;return}while(0);b=k[z>>2]|0;c=b;if(b){e=k[B>>2]|0;if((e|0)!=(b|0))k[B>>2]=e+(~((e+-4-c|0)>>>2)<<2);Sg(b)}}b=k[C>>2]|0;if(!b)fb(d|0);c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~(((c+-3-b|0)>>>0)/3|0)*3|0);Sg(b);fb(d|0)}function lf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;M=r;r=r+16|0;C=M+12|0;L=M+9|0;K=M+6|0;D=M+3|0;E=M;F=a+172|0;b=k[F>>2]|0;if((b|0)<=0){r=M;return}G=a+4600|0;H=a+4596|0;I=a+4604|0;J=a+4592|0;B=0;while(1){y=B+-1|0;d=k[G>>2]|0;e=d+(y*3|0)|0;N=k[H>>2]|0;c=B+1|0;f=l[N+(B*3|0)>>0]|0;A=k[I>>2]|0;g=l[N+(y*3|0)>>0]|0;h=f-g|0;j=l[e>>0]|0;m=g-j|0;n=((((i[A+((l[N+(c*3|0)>>0]|0)-f)>>0]|0)*9|0)+(i[A+h>>0]|0)|0)*9|0)+(i[A+m>>0]|0)|0;o=l[N+(B*3|0)+1>>0]|0;p=l[N+(y*3|0)+1>>0]|0;q=o-p|0;s=l[d+(y*3|0)+1>>0]|0;t=p-s|0;u=((((i[A+((l[N+(c*3|0)+1>>0]|0)-o)>>0]|0)*9|0)+(i[A+q>>0]|0)|0)*9|0)+(i[A+t>>0]|0)|0;v=l[N+(B*3|0)+2>>0]|0;w=l[N+(y*3|0)+2>>0]|0;x=v-w|0;y=l[d+(y*3|0)+2>>0]|0;z=w-y|0;A=((((i[A+((l[N+(c*3|0)+2>>0]|0)-v)>>0]|0)*9|0)+(i[A+x>>0]|0)|0)*9|0)+(i[A+z>>0]|0)|0;if(!(u|n|A)){i[K>>0]=i[e>>0]|0;i[K+1>>0]=i[e+1>>0]|0;i[K+2>>0]=i[e+2>>0]|0;i[C>>0]=i[e>>0]|0;i[C+1>>0]=i[e+1>>0]|0;i[C+2>>0]=i[e+2>>0]|0;b=mf(a,C,d+(B*3|0)|0,b-B|0)|0;c=b+B|0;if((c|0)!=(k[F>>2]|0)){N=(k[H>>2]|0)+(c*3|0)|0;i[E>>0]=i[N>>0]|0;i[E+1>>0]=i[N+1>>0]|0;i[E+2>>0]=i[N+2>>0]|0;N=k[G>>2]|0;i[L>>0]=i[K>>0]|0;i[L+1>>0]=i[K+1>>0]|0;i[L+2>>0]=i[K+2>>0]|0;i[C>>0]=i[E>>0]|0;i[C+1>>0]=i[E+1>>0]|0;i[C+2>>0]=i[E+2>>0]|0;nf(D,a,L,C);N=N+(c*3|0)|0;i[N>>0]=i[D>>0]|0;i[N+1>>0]=i[D+1>>0]|0;i[N+2>>0]=i[D+2>>0]|0;N=k[J>>2]|0;k[J>>2]=(N|0)<1?0:N+-1|0;b=b+1|0}c=b+B|0}else{d=l[d+(B*3|0)>>0]|0;b=f-j>>31;if((b^m|0)>=0)if((b^h|0)<0)b=j;else b=j-g+f|0;else b=f;f=of(a,n,d,b,0)|0;d=l[(k[G>>2]|0)+(B*3|0)+1>>0]|0;b=o-s>>31;if((b^t|0)>=0)if((b^q|0)<0)b=s;else b=s-p+o|0;else b=o;d=of(a,u,d,b,0)|0;e=l[(k[G>>2]|0)+(B*3|0)+2>>0]|0;b=v-y>>31;if((b^z|0)>=0)if((b^x|0)<0)b=y;else b=y-w+v|0;else b=v;A=of(a,A,e,b,0)|0;N=(k[G>>2]|0)+(B*3|0)|0;i[N>>0]=f;i[N+1>>0]=d;i[N+2>>0]=A}b=k[F>>2]|0;if((c|0)>=(b|0))break;else B=c}r=M;return}function mf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;h=a+112|0;j=a+108|0;l=a+4592|0;e=k[h>>2]|0;f=0;while(1){if((e|0)<1){Xd(a);e=k[h>>2]|0}g=k[j>>2]|0;e=e+-1|0;k[h>>2]=e;k[j>>2]=g<<1;if((g|0)>=0){m=8;break}g=k[l>>2]|0;n=1<<k[36076+(g<<2)>>2];o=d-f|0;o=(n|0)<(o|0)?n:o;f=o+f|0;if((o|0)==(n|0))k[l>>2]=(g|0)>30?31:g+1|0;if((f|0)==(d|0)){e=d;break}}if((m|0)==8)if((f|0)!=(d|0)){e=k[l>>2]|0;if((e+-4|0)>>>0<28)e=Qe(a,k[36076+(e<<2)>>2]|0)|0;else e=0;e=e+f|0;if((e|0)>(d|0)){e=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,e|0,5,35472);o=x;x=0;if(o&1){o=Wa()|0;Ua(e|0);fb(o|0)}else ub(e|0,648,74)}}else e=d;if((e|0)<=0)return e|0;f=0;do{o=c+(f*3|0)|0;i[o>>0]=i[b>>0]|0;i[o+1>>0]=i[b+1>>0]|0;i[o+2>>0]=i[b+2>>0]|0;f=f+1|0}while((f|0)!=(e|0));return e|0}function nf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,m=0,n=0,o=0;j=b+4568|0;o=pf(b,j)|0;g=pf(b,j)|0;j=pf(b,j)|0;f=b+128|0;e=l[d>>0]|0;m=k[b+136>>2]|0;n=m<<1|1;e=(ia(ia(n,o)|0,e-(l[c>>0]|0)>>31|1)|0)+e|0;o=0-m|0;if((e|0)>=(o|0)){f=k[f>>2]|0;if((f+m|0)<(e|0))e=e-(ia(k[b+132>>2]|0,n)|0)|0}else{e=(ia(k[b+132>>2]|0,n)|0)+e|0;f=k[f>>2]|0}if((e&f|0)!=(e|0))e=f&~(e>>31);h=e&255;e=l[d+1>>0]|0;e=(ia(ia(n,g)|0,e-(l[c+1>>0]|0)>>31|1)|0)+e|0;if((e|0)>=(o|0)){if((f+m|0)<(e|0))e=e-(ia(k[b+132>>2]|0,n)|0)|0}else e=(ia(k[b+132>>2]|0,n)|0)+e|0;if((e&f|0)!=(e|0))e=f&~(e>>31);g=e&255;e=l[d+2>>0]|0;e=(ia(ia(n,j)|0,e-(l[c+2>>0]|0)>>31|1)|0)+e|0;if((e|0)>=(o|0)){if((f+m|0)<(e|0))e=e-(ia(k[b+132>>2]|0,n)|0)|0}else e=(ia(k[b+132>>2]|0,n)|0)+e|0;if((e&f|0)==(e|0)){b=e;b=b&255;i[a>>0]=h;o=a+1|0;i[o>>0]=g;a=a+2|0;i[a>>0]=b;return}b=f&~(e>>31);b=b&255;i[a>>0]=h;o=a+1|0;i[o>>0]=g;a=a+2|0;i[a>>0]=b;return}function of(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=b>>31;l=(r^b)-r|0;p=a+188+(l*12|0)+10|0;c=j[p>>1]|0;o=a+188+(l*12|0)|0;e=k[o>>2]|0;if((c|0)<(e|0))if((c<<1|0)<(e|0))if((c<<2|0)<(e|0))if((c<<3|0)<(e|0))if((c<<4|0)<(e|0)){b=5;while(1)if((c<<b|0)<(e|0))b=b+1|0;else break}else b=4;else b=3;else b=2;else b=1;else b=0;n=a+188+(l*12|0)+8|0;c=(j[n>>1]^r)-r+d|0;q=a+128|0;e=k[q>>2]|0;if((c&e|0)==(c|0))m=c;else m=e&~(c>>31);c=a+112|0;if((k[c>>2]|0)<8)Xd(a);e=a+108|0;d=k[e>>2]|0;f=d>>>24;g=k[2656+(b<<11)+(f<<3)+4>>2]|0;if(!g){h=k[a+148>>2]|0;e=k[a+140>>2]|0;c=Pe(a)|0;if((c|0)<(h+-1-e|0)){if(b)c=(Qe(a,b)|0)+(c<<b)|0}else c=(Qe(a,e)|0)+1|0;c=c<<31>>31^c>>1;if((((c|0)>-1?c:0-c|0)|0)>65535){c=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,c|0,5,35472);a=x;x=0;if(a&1){a=Wa()|0;Ua(c|0);fb(a|0)}else ub(c|0,648,74)}}else{k[c>>2]=(k[c>>2]|0)-g;k[e>>2]=d<<g;c=k[2656+(b<<11)+(f<<3)>>2]|0}h=a+136|0;d=k[h>>2]|0;if(!b){if(!d)e=(k[a+188+(l*12|0)+4>>2]<<1)+-1+(j[p>>1]|0)>>31;else e=0;g=e^c}else g=c;b=k[a+152>>2]|0;e=(k[o>>2]|0)+((g|0)>-1?g:0-g|0)|0;f=a+188+(l*12|0)+4|0;c=(k[f>>2]|0)+(ia(d<<1|1,g)|0)|0;d=j[p>>1]|0;if((d|0)==(b|0)){e=e>>1;c=c>>1;d=b>>1}k[o>>2]=e;b=d+1|0;j[p>>1]=b;e=b+c|0;if((e|0)>=1){if((c|0)>0){c=c-b|0;p=j[n>>1]|0;j[n>>1]=(p<<16>>16<127&1)+(p&65535);c=(c|0)>0?0:c}}else{c=j[n>>1]|0;j[n>>1]=(c&65535)-(c<<16>>16>-128&1);c=(e|0)>(~d|0)?e:0-d|0}k[f>>2]=c;b=k[h>>2]|0;d=b<<1|1;e=(ia(d,(g^r)-r|0)|0)+m|0;if((e|0)>=(0-b|0)){c=k[q>>2]|0;if((c+b|0)<(e|0))e=e-(ia(k[a+132>>2]|0,d)|0)|0}else{e=(ia(k[a+132>>2]|0,d)|0)+e|0;c=k[q>>2]|0}if((e&c|0)==(e|0)){a=e;a=a&255;return a|0}a=c&~(e>>31);a=a&255;return a|0}function pf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,m=0;m=b+9|0;c=l[m>>0]|0;f=b+4|0;e=(ia(c>>>1,k[f>>2]|0)|0)+(k[b>>2]|0)|0;if((c|0)<(e|0)){d=0;do{c=c<<1;d=d+1|0}while((c|0)<(e|0))}else d=0;g=k[a+148>>2]|0;h=k[36076+(k[a+4592>>2]<<2)>>2]|0;c=k[a+140>>2]|0;e=Pe(a)|0;do if((e|0)<(g+-2-h-c|0))if(!d){d=k[f>>2]|0;a=d+e|0;c=a&1;a=(c+a|0)/2|0;j=8;break}else{h=(Qe(a,d)|0)+(e<<d)|0;d=k[f>>2]|0;e=h+d|0;g=e&1;c=g;f=1;e=(g+e|0)/2|0;break}else{e=(Qe(a,c)|0)+1|0;g=k[f>>2]|0;a=e+g|0;c=a&1;a=(c+a|0)/2|0;if(!d){d=g;j=8}else{h=e;f=1;e=a;d=g}}while(0);if((j|0)==8){h=e;f=l[b+10>>0]<<1>>>0>=(l[m>>0]|0)>>>0;e=a}e=(c|0)!=0^f?e:0-e|0;if((e|0)<0){j=b+10|0;i[j>>0]=(l[j>>0]|0)+1}c=(h+1-d>>1)+(k[b>>2]|0)|0;k[b>>2]=c;d=i[m>>0]|0;if(d<<24>>24!=(i[b+8>>0]|0)){b=d;b=b&255;b=b+1|0;b=b&255;i[m>>0]=b;return e|0}k[b>>2]=c>>1;j=(d&255)>>>1;i[m>>0]=j;b=b+10|0;i[b>>0]=(l[b>>0]|0)>>>1;b=j;b=b&255;b=b+1|0;b=b&255;i[m>>0]=b;return e|0}function qf(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;o=r;r=r+32|0;d=o;n=a+136|0;a:do if(!(k[n>>2]|0)){c=k[a+128>>2]|0;b=a+144|0;if((((c|0)==((1<<k[b>>2])+-1|0)?(Ag(d,c,0),(k[d+4>>2]|0)==(k[a+176>>2]|0)):0)?(k[d+8>>2]|0)==(k[a+180>>2]|0):0)?(k[d+12>>2]|0)==(k[a+184>>2]|0):0)switch(k[b>>2]|0){case 8:{n=k[8856]|0;k[a+4604>>2]=n+(((k[8857]|0)-n|0)>>>1);r=o;return}case 10:{n=k[8859]|0;k[a+4604>>2]=n+(((k[8860]|0)-n|0)>>>1);r=o;return}case 12:{n=k[8862]|0;k[a+4604>>2]=n+(((k[8863]|0)-n|0)>>>1);r=o;return}case 16:{n=k[8865]|0;k[a+4604>>2]=n+(((k[8866]|0)-n|0)>>>1);r=o;return}default:break a}}else b=a+144|0;while(0);m=1<<k[b>>2];c=a+4608|0;d=m<<1;e=a+4612|0;f=k[e>>2]|0;b=k[c>>2]|0;g=f-b|0;if(d>>>0<=g>>>0){if(d>>>0<g>>>0?(h=b+d|0,(f|0)!=(h|0)):0)k[e>>2]=h}else{Yd(c,d-g|0);b=k[c>>2]|0}l=a+4604|0;k[l>>2]=b+m;b=0-m|0;if((m|0)<=(b|0)){r=o;return}h=a+184|0;j=a+180|0;g=a+176|0;f=b;do{b=k[h>>2]|0;if((f|0)>(0-b|0)){c=k[j>>2]|0;if((f|0)>(0-c|0)){d=k[g>>2]|0;if((f|0)>(0-d|0)){e=k[n>>2]|0;if((f|0)>=(0-e|0))if((e|0)<(f|0))if((d|0)<=(f|0))if((c|0)>(f|0))b=2;else b=(b|0)>(f|0)?3:4;else b=1;else b=0;else b=-1}else b=-2}else b=-3}else b=-4;i[(k[l>>2]|0)+f>>0]=b;f=f+1|0}while((f|0)!=(m|0));r=o;return}function rf(a){a=a|0;var b=0,c=0;k[a>>2]=35596;b=k[a+4584>>2]|0;if(b){c=a+4588|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}a=a+88|0;b=k[a>>2]|0;k[a>>2]=0;if(!b)return;Lb[k[(k[b>>2]|0)+4>>2]&255](b);return}function sf(a){a=a|0;var b=0,c=0;k[a>>2]=35596;b=k[a+4584>>2]|0;if(b){c=a+4588|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}c=a+88|0;b=k[c>>2]|0;k[c>>2]=0;if(!b){Sg(a);return}Lb[k[(k[b>>2]|0)+4>>2]&255](b);Sg(a);return}function tf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,y=0,z=0;u=r;r=r+352|0;v=u+328|0;y=u+192|0;c=u+343|0;d=u+342|0;e=u+341|0;f=u+340|0;o=u+176|0;h=u+168|0;j=u+160|0;l=u+152|0;t=u;q=u+136|0;if((k[a+28>>2]|0)!=0?(k[a+20>>2]|0)!=1:0){p=a+4|0;s=a+32|0;g=k[s>>2]|0;if(!g){a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[c>>0]|0;Ja(36,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}a=k[a+12>>2]|0;if((a|0)==16)switch(g|0){case 1:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[d>>0]|0;Ja(37,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 2:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[e>>0]|0;Ja(38,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 3:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[f>>0]|0;Ja(39,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}default:{g=y+56|0;e=y+4|0;k[y>>2]=35760;k[g>>2]=35780;x=0;ra(52,y+56|0,e|0);u=x;x=0;if(u&1){z=Wa()|0;Vk(g);fb(z|0)}k[y+128>>2]=0;k[y+132>>2]=-1;k[y>>2]=35800;k[y+56>>2]=35820;x=0;qa(158,e|0);u=x;x=0;do if(u&1)a=Wa()|0;else{k[e>>2]=35836;f=y+36|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=0;k[f+12>>2]=0;k[y+52>>2]=16;k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;x=0;ra(53,e|0,v|0);u=x;x=0;if(u&1){a=Wa()|0;wk(v);wk(f);al(e);break}wk(v);x=0;a=va(28,y|0,48036,21)|0;v=x;x=0;do if((!(v&1)?(x=0,m=Aa(27,a|0,k[s>>2]|0)|0,v=x,x=0,!(v&1)):0)?(x=0,va(28,m|0,49453,18)|0,v=x,x=0,!(v&1)):0){d=Va(16)|0;x=0;ra(54,o|0,e|0);v=x;x=0;if(!(v&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,d|0,9,35472,o|0);v=x;x=0;if(v&1)c=1;else{x=0;Fa(5,d|0,648,74);x=0;c=0}a=Wa()|0;wk(o);if(!c)break}else a=Wa()|0;Ua(d|0)}else z=34;while(0);if((z|0)==34)a=Wa()|0;k[y>>2]=35800;k[g>>2]=35820;k[e>>2]=35836;wk(f);al(e);Vk(g);z=a;fb(z|0)}while(0);z=a;Vk(g);fb(z|0)}}if((a|0)<=8){a=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,a|0,8,35472);z=x;x=0;if(!(z&1))ub(a|0,648,74);z=Wa()|0;Ua(a|0);fb(z|0)}c=16-a|0;switch(g|0){case 1:{a=Rg(60)|0;k[h>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[h>>2];k[v+4>>2]=k[h+4>>2];Ja(40,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 2:{a=Rg(60)|0;k[j>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[j>>2];k[v+4>>2]=k[j+4>>2];Ja(41,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 3:{a=Rg(60)|0;k[l>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[l>>2];k[v+4>>2]=k[l+4>>2];Ja(42,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}default:{g=t+56|0;e=t+4|0;k[t>>2]=35760;k[g>>2]=35780;x=0;ra(52,t+56|0,e|0);y=x;x=0;if(y&1){z=Wa()|0;Vk(g);fb(z|0)}k[t+128>>2]=0;k[t+132>>2]=-1;k[t>>2]=35800;k[t+56>>2]=35820;x=0;qa(158,e|0);y=x;x=0;do if(y&1)a=Wa()|0;else{k[e>>2]=35836;f=t+36|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=0;k[f+12>>2]=0;k[t+52>>2]=16;k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;x=0;ra(53,e|0,v|0);y=x;x=0;if(y&1){a=Wa()|0;wk(v);wk(f);al(e);break}wk(v);x=0;a=va(28,t|0,48036,21)|0;y=x;x=0;do if((!(y&1)?(x=0,n=Aa(27,a|0,k[s>>2]|0)|0,y=x,x=0,!(y&1)):0)?(x=0,va(28,n|0,49453,18)|0,y=x,x=0,!(y&1)):0){d=Va(16)|0;x=0;ra(54,q|0,e|0);y=x;x=0;if(!(y&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,d|0,9,35472,q|0);y=x;x=0;if(y&1)c=1;else{x=0;Fa(5,d|0,648,74);x=0;c=0}a=Wa()|0;wk(q);if(!c)break}else a=Wa()|0;Ua(d|0)}else z=64;while(0);if((z|0)==64)a=Wa()|0;k[t>>2]=35800;k[g>>2]=35820;k[e>>2]=35836;wk(f);al(e);Vk(g);z=a;fb(z|0)}while(0);z=a;Vk(g);fb(z|0)}}}c=k[b+4>>2]|0;d=Rg(16)|0;a=k[a+16>>2]|0;if(!c){z=k[b>>2]|0;k[d>>2]=35732;k[d+4>>2]=z;k[d+8>>2]=2;k[d+12>>2]=a;z=d;r=u;return z|0}else{k[d>>2]=35708;k[d+4>>2]=c;k[d+8>>2]=2;k[d+12>>2]=a;z=d;r=u;return z|0}return 0}function uf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;e=r;r=r+32|0;h=e;Ag(h,65535,0);g=k[b+4>>2]|0;f=k[b+8>>2]|0;f=(f|0)==0?k[h+8>>2]|0:f;d=k[b+12>>2]|0;d=(d|0)==0?k[h+12>>2]|0:d;b=k[b+16>>2]|0;c=k[h+16>>2]|0;k[a+152>>2]=(g|0)==0?k[h+4>>2]|0:g;k[a+156>>2]=f;k[a+160>>2]=d;Cf(a);d=0;do{k[a+164+(d*12|0)>>2]=1024;k[a+164+(d*12|0)+4>>2]=0;j[a+164+(d*12|0)+8>>1]=0;j[a+164+(d*12|0)+10>>1]=1;d=d+1|0}while((d|0)!=365);h=((b|0)==0?c:b)&255;k[a+4544>>2]=1024;k[a+4548>>2]=0;i[a+4552>>0]=h;i[a+4553>>0]=1;i[a+4554>>0]=0;k[a+4556>>2]=1024;k[a+4560>>2]=1;i[a+4564>>0]=h;i[a+4565>>0]=1;i[a+4566>>0]=0;k[a+4568>>2]=0;r=e;return}function vf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=a+88|0;f=k[b>>2]|0;k[b>>2]=0;b=k[g>>2]|0;k[g>>2]=f;if(b)Lb[k[(k[b>>2]|0)+4>>2]&255](b);g=d+4|0;f=k[g>>2]|0;i[a+4596>>0]=e&1;b=a+132|0;k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];Vd(a,d);wf(a);b=k[a+116>>2]|0;a=k[a+112>>2]|0;while(1){e=b+-1|0;c=(i[e>>0]|0)==-1?7:8;if((a|0)<(c|0))break;else{b=e;a=a-c|0}}b=b-f|0;e=k[g>>2]|0;if(!e)return;k[g>>2]=e+b;d=d+8|0;k[d>>2]=(k[d>>2]|0)-b;return}function wf(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0;A=r;r=r+32|0;C=A+12|0;z=A;v=a+148|0;w=(k[v>>2]|0)+4|0;if((k[a+28>>2]|0)==1)y=k[a+20>>2]|0;else y=1;b=ia(y<<1,w)|0;k[C>>2]=0;D=C+4|0;k[D>>2]=0;k[C+8>>2]=0;do if(b){if(!((b|0)<0?(x=0,qa(155,C|0),B=x,x=0,B&1):0))g=6;if((g|0)==6?(c=b<<1,x=0,d=ta(66,c|0)|0,B=x,x=0,!(B&1)):0){k[C>>2]=d;B=d+(b<<1)|0;k[C+8>>2]=B;Yt(d|0,0,c|0)|0;k[D>>2]=B;break}d=Wa()|0;b=k[C>>2]|0;if(!b)fb(d|0);c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~((c+-2-b|0)>>>1)<<1);Sg(b);fb(d|0)}while(0);k[z>>2]=0;B=z+4|0;k[B>>2]=0;k[z+8>>2]=0;do if(!y)g=18;else{if(!(y>>>0>1073741823?(x=0,qa(155,z|0),u=x,x=0,u&1):0))g=16;if((g|0)==16?(e=y<<2,x=0,f=ta(66,e|0)|0,u=x,x=0,!(u&1)):0){k[z>>2]=f;g=f+(y<<2)|0;k[z+8>>2]=g;Yt(f|0,0,e|0)|0;k[B>>2]=g;g=18;break}d=Wa()|0;b=k[z>>2]|0;c=b;if(b){e=k[B>>2]|0;if((e|0)!=(b|0))k[B>>2]=e+(~((e+-4-c|0)>>>2)<<2);Sg(b)}}while(0);if((g|0)==18){f=a+8|0;a:do if((k[f>>2]|0)>0){g=a+4572|0;h=ia(y,w)|0;i=h+1|0;l=a+4576|0;m=(y|0)>0;n=a+136|0;o=a+144|0;p=a+140|0;q=a+132|0;s=a+88|0;t=a+4568|0;u=0;b:while(1){d=k[C>>2]|0;c=d+2|0;k[g>>2]=c;d=d+(i<<1)|0;k[l>>2]=d;if(!(u&1))b=d;else{k[g>>2]=d;k[l>>2]=c;b=c;c=d}if(m){e=k[z>>2]|0;d=0;do{k[t>>2]=k[e+(d<<2)>>2];e=k[v>>2]|0;j[c+(e<<1)>>1]=j[c+(e+-1<<1)>>1]|0;j[b+-2>>1]=j[c>>1]|0;x=0;ra(59,a|0,0);e=x;x=0;if(e&1){g=29;break b}e=k[z>>2]|0;k[e+(d<<2)>>2]=k[t>>2];c=(k[g>>2]|0)+(w<<1)|0;k[g>>2]=c;b=(k[l>>2]|0)+(w<<1)|0;k[l>>2]=b;d=d+1|0}while((d|0)<(y|0))}e=k[n>>2]|0;if(((e|0)<=(u|0)?(u|0)<((k[o>>2]|0)+e|0):0)?(e=k[s>>2]|0,x=0,Ja(k[(k[e>>2]|0)+8>>2]|0,e|0,b+((k[q>>2]|0)-h<<1)|0,k[p>>2]|0,w|0),e=x,x=0,e&1):0){g=30;break}u=u+1|0;if((u|0)>=(k[f>>2]|0)){g=42;break a}}if((g|0)==29){d=Wa()|0;break}else if((g|0)==30){d=Wa()|0;break}}else g=42;while(0);do if((g|0)==42){x=0;qa(159,a|0);a=x;x=0;if(a&1){d=Wa()|0;break}b=k[z>>2]|0;c=b;if(b){d=k[B>>2]|0;if((d|0)!=(b|0))k[B>>2]=d+(~((d+-4-c|0)>>>2)<<2);Sg(b)}b=k[C>>2]|0;if(!b){r=A;return}c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~((c+-2-b|0)>>>1)<<1);Sg(b);r=A;return}while(0);b=k[z>>2]|0;c=b;if(b){e=k[B>>2]|0;if((e|0)!=(b|0))k[B>>2]=e+(~((e+-4-c|0)>>>2)<<2);Sg(b)}}b=k[C>>2]|0;if(!b)fb(d|0);c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~((c+-2-b|0)>>>1)<<1);Sg(b);fb(d|0)}function xf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,l=0,n=0,o=0,p=0,q=0,r=0,s=0;p=a+4572|0;b=k[p>>2]|0;s=a+148|0;if((k[s>>2]|0)<=0)return;q=a+4576|0;r=a+4580|0;e=b;f=m[b+-2>>1]|0;b=m[b>>1]|0;o=0;while(1){n=k[q>>2]|0;l=m[n+(o+-1<<1)>>1]|0;d=o+1|0;c=m[e+(d<<1)>>1]|0;h=k[r>>2]|0;g=b-f|0;e=f-l|0;h=((((i[h+(c-b)>>0]|0)*9|0)+(i[h+g>>0]|0)|0)*9|0)+(i[h+e>>0]|0)|0;if(!h){d=(zf(a,o,0)|0)+o|0;c=k[p>>2]|0;b=m[c+(d+-1<<1)>>1]|0;c=m[c+(d<<1)>>1]|0}else{f=b-l>>31;if((f^e|0)<0)e=b;else e=l+((f^g|0)<0?0:g)|0;n=yf(a,h,m[n+(o<<1)>>1]|0,e,0)|0;j[(k[q>>2]|0)+(o<<1)>>1]=n}if((d|0)>=(k[s>>2]|0))break;e=k[p>>2]|0;f=b;b=c;o=d}return}function yf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0;q=b>>31;m=(q^b)-q|0;p=a+164+(m*12|0)+10|0;c=j[p>>1]|0;o=a+164+(m*12|0)|0;e=k[o>>2]|0;if((c|0)<(e|0))if((c<<1|0)<(e|0))if((c<<2|0)<(e|0))if((c<<3|0)<(e|0))if((c<<4|0)<(e|0)){f=5;while(1)if((c<<f|0)<(e|0))f=f+1|0;else break}else f=4;else f=3;else f=2;else f=1;else f=0;n=a+164+(m*12|0)+8|0;c=(j[n>>1]^q)-q+d|0;if((c&65535|0)!=(c|0))c=c>>31&65535^65535;e=a+112|0;if((k[e>>2]|0)<8)Xd(a);d=a+108|0;g=k[d>>2]|0;h=g>>>24;l=k[2656+(f<<11)+(h<<3)+4>>2]|0;if(!l){e=Pe(a)|0;if((e|0)<47){if(f)e=(Qe(a,f)|0)+(e<<f)|0}else e=(Qe(a,16)|0)+1|0;e=e<<31>>31^e>>1;if((((e|0)>-1?e:0-e|0)|0)>65535){c=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,c|0,5,35472);b=x;x=0;if(b&1){b=Wa()|0;Ua(c|0);fb(b|0)}else ub(c|0,648,74)}}else{k[e>>2]=(k[e>>2]|0)-l;k[d>>2]=g<<l;e=k[2656+(f<<11)+(h<<3)>>2]|0}l=a+164+(m*12|0)+4|0;d=k[l>>2]|0;if(!f){a=j[p>>1]|0;f=a;e=(d<<1)+-1+(a<<16>>16)>>31^e}else f=j[p>>1]|0;g=f<<16>>16==64;a=g&1;h=d+e>>a;g=g?32:f<<16>>16;k[o>>2]=((e|0)>-1?e:0-e|0)+(k[o>>2]|0)>>a;d=g+1|0;j[p>>1]=d;f=d+h|0;if((f|0)<1){p=j[n>>1]|0;j[n>>1]=(p&65535)-(p<<16>>16>-128&1);p=(f|0)>(~g|0)?f:0-g|0;k[l>>2]=p;q=e^q;b=b>>>31;b=c+b|0;b=b+q|0;b=b&65535;return b|0}if((h|0)<=0){p=h;k[l>>2]=p;q=e^q;b=b>>>31;b=c+b|0;b=b+q|0;b=b&65535;return b|0}p=h-d|0;o=j[n>>1]|0;j[n>>1]=(o<<16>>16<127&1)+(o&65535);p=(p|0)>0?0:p;k[l>>2]=p;q=e^q;b=b>>>31;b=c+b|0;b=b+q|0;b=b&65535;return b|0}function zf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=a+4576|0;e=k[f>>2]|0;c=j[e+(b+-1<<1)>>1]|0;g=a+148|0;e=Af(a,c,e+(b<<1)|0,(k[g>>2]|0)-b|0)|0;d=e+b|0;if((d|0)==(k[g>>2]|0)){g=e;return g|0}c=c&65535;b=m[(k[a+4572>>2]|0)+(d<<1)>>1]|0;g=c-b|0;if((((g|0)>-1?g:0-g|0)|0)<1)c=(Bf(a,a+4556|0)|0)+c|0;else c=(ia(Bf(a,a+4544|0)|0,b-c>>31|1)|0)+b|0;j[(k[f>>2]|0)+(d<<1)>>1]=c;g=a+4568|0;a=k[g>>2]|0;k[g>>2]=(a|0)<1?0:a+-1|0;g=e+1|0;return g|0}function Af(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0;h=a+112|0;l=a+108|0;m=a+4568|0;e=k[h>>2]|0;f=0;while(1){if((e|0)<1){Xd(a);e=k[h>>2]|0}g=k[l>>2]|0;e=e+-1|0;k[h>>2]=e;k[l>>2]=g<<1;if((g|0)>=0){n=8;break}g=k[m>>2]|0;o=1<<k[36076+(g<<2)>>2];p=d-f|0;p=(o|0)<(p|0)?o:p;f=p+f|0;if((p|0)==(o|0))k[m>>2]=(g|0)>30?31:g+1|0;if((f|0)==(d|0)){e=d;break}}if((n|0)==8)if((f|0)!=(d|0)){e=k[m>>2]|0;if((e+-4|0)>>>0<28)e=Qe(a,k[36076+(e<<2)>>2]|0)|0;else e=0;e=e+f|0;if((e|0)>(d|0)){e=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,e|0,5,35472);p=x;x=0;if(p&1){p=Wa()|0;Ua(e|0);fb(p|0)}else ub(e|0,648,74)}}else e=d;if((e|0)>0)f=0;else return e|0;do{j[c+(f<<1)>>1]=b;f=f+1|0}while((f|0)!=(e|0));return e|0}function Bf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0;h=b+9|0;c=l[h>>0]|0;f=b+4|0;e=(ia(c>>>1,k[f>>2]|0)|0)+(k[b>>2]|0)|0;if((c|0)<(e|0)){d=0;do{c=c<<1;d=d+1|0}while((c|0)<(e|0))}else d=0;e=k[36076+(k[a+4568>>2]<<2)>>2]|0;c=Pe(a)|0;do if((c|0)<(46-e|0))if(!d){a=k[f>>2]|0;e=a+c|0;d=e&1;e=(d+e|0)/2|0;g=8;break}else{c=(Qe(a,d)|0)+(c<<d)|0;a=k[f>>2]|0;e=c+a|0;j=e&1;d=j;f=1;e=(j+e|0)/2|0;break}else{c=(Qe(a,16)|0)+1|0;a=k[f>>2]|0;e=c+a|0;f=e&1;e=(f+e|0)/2|0;if(!d){d=f;g=8}else{d=f;f=1}}while(0);if((g|0)==8)f=l[b+10>>0]<<1>>>0>=(l[h>>0]|0)>>>0;e=(d|0)!=0^f?e:0-e|0;if((e|0)<0){j=b+10|0;i[j>>0]=(l[j>>0]|0)+1}c=(c+1-a>>1)+(k[b>>2]|0)|0;k[b>>2]=c;d=i[h>>0]|0;if(d<<24>>24!=(i[b+8>>0]|0)){j=d;j=j&255;j=j+1|0;j=j&255;i[h>>0]=j;return e|0}k[b>>2]=c>>1;j=(d&255)>>>1;i[h>>0]=j;b=b+10|0;i[b>>0]=(l[b>>0]|0)>>>1;j=j&255;j=j+1|0;j=j&255;i[h>>0]=j;return e|0}function Cf(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0;l=r;r=r+32|0;h=l;Ag(h,65535,0);j=a+152|0;if(((k[h+4>>2]|0)==(k[j>>2]|0)?(k[h+8>>2]|0)==(k[a+156>>2]|0):0)?(k[h+12>>2]|0)==(k[a+160>>2]|0):0){j=k[8865]|0;k[a+4580>>2]=j+(((k[8866]|0)-j|0)>>>1);r=l;return}c=a+4584|0;d=a+4588|0;e=k[d>>2]|0;b=k[c>>2]|0;f=e-b|0;if(f>>>0>=131072){if(f>>>0>131072?(g=b+131072|0,(e|0)!=(g|0)):0)k[d>>2]=g}else{Yd(c,131072-f|0);b=k[c>>2]|0}h=a+4580|0;k[h>>2]=b+65536;g=a+160|0;e=a+156|0;f=-65536;while(1){b=k[g>>2]|0;if((f|0)>(0-b|0)){c=k[e>>2]|0;if((f|0)>(0-c|0)){d=k[j>>2]|0;if((f|0)>(0-d|0))if((f|0)>=0){if((f|0)<1){i[(k[h>>2]|0)+f>>0]=0;f=1;continue}if((d|0)<=(f|0))if((c|0)>(f|0))b=2;else b=(b|0)>(f|0)?3:4;else b=1}else b=-1;else b=-2}else b=-3}else b=-4;i[(k[h>>2]|0)+f>>0]=b;f=f+1|0;if((f|0)==65536)break}r=l;return}function Df(a){a=a|0;var b=0,c=0;k[a>>2]=35568;b=k[a+4584>>2]|0;if(b){c=a+4588|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}a=a+88|0;b=k[a>>2]|0;k[a>>2]=0;if(!b)return;Lb[k[(k[b>>2]|0)+4>>2]&255](b);return}function Ef(a){a=a|0;var b=0,c=0;k[a>>2]=35568;b=k[a+4584>>2]|0;if(b){c=a+4588|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}c=a+88|0;b=k[c>>2]|0;k[c>>2]=0;if(!b){Sg(a);return}Lb[k[(k[b>>2]|0)+4>>2]&255](b);Sg(a);return}function Ff(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,y=0,z=0;u=r;r=r+352|0;v=u+328|0;y=u+192|0;c=u+343|0;d=u+342|0;e=u+341|0;f=u+340|0;o=u+176|0;h=u+168|0;j=u+160|0;l=u+152|0;t=u;q=u+136|0;if((k[a+28>>2]|0)!=0?(k[a+20>>2]|0)!=1:0){p=a+4|0;s=a+32|0;g=k[s>>2]|0;if(!g){a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[c>>0]|0;Ja(36,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}a=k[a+12>>2]|0;if((a|0)==16)switch(g|0){case 1:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[d>>0]|0;Ja(37,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 2:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[e>>0]|0;Ja(38,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 3:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[f>>0]|0;Ja(39,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}default:{g=y+56|0;e=y+4|0;k[y>>2]=35760;k[g>>2]=35780;x=0;ra(52,y+56|0,e|0);u=x;x=0;if(u&1){z=Wa()|0;Vk(g);fb(z|0)}k[y+128>>2]=0;k[y+132>>2]=-1;k[y>>2]=35800;k[y+56>>2]=35820;x=0;qa(158,e|0);u=x;x=0;do if(u&1)a=Wa()|0;else{k[e>>2]=35836;f=y+36|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=0;k[f+12>>2]=0;k[y+52>>2]=16;k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;x=0;ra(53,e|0,v|0);u=x;x=0;if(u&1){a=Wa()|0;wk(v);wk(f);al(e);break}wk(v);x=0;a=va(28,y|0,48036,21)|0;v=x;x=0;do if((!(v&1)?(x=0,m=Aa(27,a|0,k[s>>2]|0)|0,v=x,x=0,!(v&1)):0)?(x=0,va(28,m|0,49453,18)|0,v=x,x=0,!(v&1)):0){d=Va(16)|0;x=0;ra(54,o|0,e|0);v=x;x=0;if(!(v&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,d|0,9,35472,o|0);v=x;x=0;if(v&1)c=1;else{x=0;Fa(5,d|0,648,74);x=0;c=0}a=Wa()|0;wk(o);if(!c)break}else a=Wa()|0;Ua(d|0)}else z=34;while(0);if((z|0)==34)a=Wa()|0;k[y>>2]=35800;k[g>>2]=35820;k[e>>2]=35836;wk(f);al(e);Vk(g);z=a;fb(z|0)}while(0);z=a;Vk(g);fb(z|0)}}if((a|0)<=8){a=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,a|0,8,35472);z=x;x=0;if(!(z&1))ub(a|0,648,74);z=Wa()|0;Ua(a|0);fb(z|0)}c=16-a|0;switch(g|0){case 1:{a=Rg(60)|0;k[h>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[h>>2];k[v+4>>2]=k[h+4>>2];Ja(40,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 2:{a=Rg(60)|0;k[j>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[j>>2];k[v+4>>2]=k[j+4>>2];Ja(41,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 3:{a=Rg(60)|0;k[l>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[l>>2];k[v+4>>2]=k[l+4>>2];Ja(42,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}default:{g=t+56|0;e=t+4|0;k[t>>2]=35760;k[g>>2]=35780;x=0;ra(52,t+56|0,e|0);y=x;x=0;if(y&1){z=Wa()|0;Vk(g);fb(z|0)}k[t+128>>2]=0;k[t+132>>2]=-1;k[t>>2]=35800;k[t+56>>2]=35820;x=0;qa(158,e|0);y=x;x=0;do if(y&1)a=Wa()|0;else{k[e>>2]=35836;f=t+36|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=0;k[f+12>>2]=0;k[t+52>>2]=16;k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;x=0;ra(53,e|0,v|0);y=x;x=0;if(y&1){a=Wa()|0;wk(v);wk(f);al(e);break}wk(v);x=0;a=va(28,t|0,48036,21)|0;y=x;x=0;do if((!(y&1)?(x=0,n=Aa(27,a|0,k[s>>2]|0)|0,y=x,x=0,!(y&1)):0)?(x=0,va(28,n|0,49453,18)|0,y=x,x=0,!(y&1)):0){d=Va(16)|0;x=0;ra(54,q|0,e|0);y=x;x=0;if(!(y&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,d|0,9,35472,q|0);y=x;x=0;if(y&1)c=1;else{x=0;Fa(5,d|0,648,74);x=0;c=0}a=Wa()|0;wk(q);if(!c)break}else a=Wa()|0;Ua(d|0)}else z=64;while(0);if((z|0)==64)a=Wa()|0;k[t>>2]=35800;k[g>>2]=35820;k[e>>2]=35836;wk(f);al(e);Vk(g);z=a;fb(z|0)}while(0);z=a;Vk(g);fb(z|0)}}}c=k[b+4>>2]|0;d=Rg(16)|0;a=k[a+16>>2]|0;if(!c){z=k[b>>2]|0;k[d>>2]=35732;k[d+4>>2]=z;k[d+8>>2]=2;k[d+12>>2]=a;z=d;r=u;return z|0}else{k[d>>2]=35708;k[d+4>>2]=c;k[d+8>>2]=2;k[d+12>>2]=a;z=d;r=u;return z|0}return 0}function Gf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;e=r;r=r+32|0;h=e;Ag(h,4095,0);g=k[b+4>>2]|0;f=k[b+8>>2]|0;f=(f|0)==0?k[h+8>>2]|0:f;d=k[b+12>>2]|0;d=(d|0)==0?k[h+12>>2]|0:d;b=k[b+16>>2]|0;c=k[h+16>>2]|0;k[a+152>>2]=(g|0)==0?k[h+4>>2]|0:g;k[a+156>>2]=f;k[a+160>>2]=d;Of(a);d=0;do{k[a+164+(d*12|0)>>2]=64;k[a+164+(d*12|0)+4>>2]=0;j[a+164+(d*12|0)+8>>1]=0;j[a+164+(d*12|0)+10>>1]=1;d=d+1|0}while((d|0)!=365);h=((b|0)==0?c:b)&255;k[a+4544>>2]=64;k[a+4548>>2]=0;i[a+4552>>0]=h;i[a+4553>>0]=1;i[a+4554>>0]=0;k[a+4556>>2]=64;k[a+4560>>2]=1;i[a+4564>>0]=h;i[a+4565>>0]=1;i[a+4566>>0]=0;k[a+4568>>2]=0;r=e;return}function Hf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=a+88|0;f=k[b>>2]|0;k[b>>2]=0;b=k[g>>2]|0;k[g>>2]=f;if(b)Lb[k[(k[b>>2]|0)+4>>2]&255](b);g=d+4|0;f=k[g>>2]|0;i[a+4596>>0]=e&1;b=a+132|0;k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];Vd(a,d);If(a);b=k[a+116>>2]|0;a=k[a+112>>2]|0;while(1){e=b+-1|0;c=(i[e>>0]|0)==-1?7:8;if((a|0)<(c|0))break;else{b=e;a=a-c|0}}b=b-f|0;e=k[g>>2]|0;if(!e)return;k[g>>2]=e+b;d=d+8|0;k[d>>2]=(k[d>>2]|0)-b;return}function If(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0;A=r;r=r+32|0;C=A+12|0;z=A;v=a+148|0;w=(k[v>>2]|0)+4|0;if((k[a+28>>2]|0)==1)y=k[a+20>>2]|0;else y=1;b=ia(y<<1,w)|0;k[C>>2]=0;D=C+4|0;k[D>>2]=0;k[C+8>>2]=0;do if(b){if(!((b|0)<0?(x=0,qa(155,C|0),B=x,x=0,B&1):0))g=6;if((g|0)==6?(c=b<<1,x=0,d=ta(66,c|0)|0,B=x,x=0,!(B&1)):0){k[C>>2]=d;B=d+(b<<1)|0;k[C+8>>2]=B;Yt(d|0,0,c|0)|0;k[D>>2]=B;break}d=Wa()|0;b=k[C>>2]|0;if(!b)fb(d|0);c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~((c+-2-b|0)>>>1)<<1);Sg(b);fb(d|0)}while(0);k[z>>2]=0;B=z+4|0;k[B>>2]=0;k[z+8>>2]=0;do if(!y)g=18;else{if(!(y>>>0>1073741823?(x=0,qa(155,z|0),u=x,x=0,u&1):0))g=16;if((g|0)==16?(e=y<<2,x=0,f=ta(66,e|0)|0,u=x,x=0,!(u&1)):0){k[z>>2]=f;g=f+(y<<2)|0;k[z+8>>2]=g;Yt(f|0,0,e|0)|0;k[B>>2]=g;g=18;break}d=Wa()|0;b=k[z>>2]|0;c=b;if(b){e=k[B>>2]|0;if((e|0)!=(b|0))k[B>>2]=e+(~((e+-4-c|0)>>>2)<<2);Sg(b)}}while(0);if((g|0)==18){f=a+8|0;a:do if((k[f>>2]|0)>0){g=a+4572|0;h=ia(y,w)|0;i=h+1|0;l=a+4576|0;m=(y|0)>0;n=a+136|0;o=a+144|0;p=a+140|0;q=a+132|0;s=a+88|0;t=a+4568|0;u=0;b:while(1){d=k[C>>2]|0;c=d+2|0;k[g>>2]=c;d=d+(i<<1)|0;k[l>>2]=d;if(!(u&1))b=d;else{k[g>>2]=d;k[l>>2]=c;b=c;c=d}if(m){e=k[z>>2]|0;d=0;do{k[t>>2]=k[e+(d<<2)>>2];e=k[v>>2]|0;j[c+(e<<1)>>1]=j[c+(e+-1<<1)>>1]|0;j[b+-2>>1]=j[c>>1]|0;x=0;ra(60,a|0,0);e=x;x=0;if(e&1){g=29;break b}e=k[z>>2]|0;k[e+(d<<2)>>2]=k[t>>2];c=(k[g>>2]|0)+(w<<1)|0;k[g>>2]=c;b=(k[l>>2]|0)+(w<<1)|0;k[l>>2]=b;d=d+1|0}while((d|0)<(y|0))}e=k[n>>2]|0;if(((e|0)<=(u|0)?(u|0)<((k[o>>2]|0)+e|0):0)?(e=k[s>>2]|0,x=0,Ja(k[(k[e>>2]|0)+8>>2]|0,e|0,b+((k[q>>2]|0)-h<<1)|0,k[p>>2]|0,w|0),e=x,x=0,e&1):0){g=30;break}u=u+1|0;if((u|0)>=(k[f>>2]|0)){g=42;break a}}if((g|0)==29){d=Wa()|0;break}else if((g|0)==30){d=Wa()|0;break}}else g=42;while(0);do if((g|0)==42){x=0;qa(159,a|0);a=x;x=0;if(a&1){d=Wa()|0;break}b=k[z>>2]|0;c=b;if(b){d=k[B>>2]|0;if((d|0)!=(b|0))k[B>>2]=d+(~((d+-4-c|0)>>>2)<<2);Sg(b)}b=k[C>>2]|0;if(!b){r=A;return}c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~((c+-2-b|0)>>>1)<<1);Sg(b);r=A;return}while(0);b=k[z>>2]|0;c=b;if(b){e=k[B>>2]|0;if((e|0)!=(b|0))k[B>>2]=e+(~((e+-4-c|0)>>>2)<<2);Sg(b)}}b=k[C>>2]|0;if(!b)fb(d|0);c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~((c+-2-b|0)>>>1)<<1);Sg(b);fb(d|0)}function Jf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,l=0,n=0,o=0,p=0,q=0,r=0,s=0;p=a+4572|0;b=k[p>>2]|0;s=a+148|0;if((k[s>>2]|0)<=0)return;q=a+4576|0;r=a+4580|0;e=b;f=m[b+-2>>1]|0;b=m[b>>1]|0;o=0;while(1){n=k[q>>2]|0;l=m[n+(o+-1<<1)>>1]|0;d=o+1|0;c=m[e+(d<<1)>>1]|0;h=k[r>>2]|0;g=b-f|0;e=f-l|0;h=((((i[h+(c-b)>>0]|0)*9|0)+(i[h+g>>0]|0)|0)*9|0)+(i[h+e>>0]|0)|0;if(!h){d=(Lf(a,o,0)|0)+o|0;c=k[p>>2]|0;b=m[c+(d+-1<<1)>>1]|0;c=m[c+(d<<1)>>1]|0}else{f=b-l>>31;if((f^e|0)<0)e=b;else e=l+((f^g|0)<0?0:g)|0;n=Kf(a,h,m[n+(o<<1)>>1]|0,e,0)|0;j[(k[q>>2]|0)+(o<<1)>>1]=n}if((d|0)>=(k[s>>2]|0))break;e=k[p>>2]|0;f=b;b=c;o=d}return}function Kf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0;q=b>>31;m=(q^b)-q|0;p=a+164+(m*12|0)+10|0;c=j[p>>1]|0;o=a+164+(m*12|0)|0;e=k[o>>2]|0;if((c|0)<(e|0))if((c<<1|0)<(e|0))if((c<<2|0)<(e|0))if((c<<3|0)<(e|0))if((c<<4|0)<(e|0)){f=5;while(1)if((c<<f|0)<(e|0))f=f+1|0;else break}else f=4;else f=3;else f=2;else f=1;else f=0;n=a+164+(m*12|0)+8|0;c=(j[n>>1]^q)-q+d|0;if((c&4095|0)!=(c|0))c=c>>31&4095^4095;e=a+112|0;if((k[e>>2]|0)<8)Xd(a);d=a+108|0;g=k[d>>2]|0;h=g>>>24;l=k[2656+(f<<11)+(h<<3)+4>>2]|0;if(!l){e=Pe(a)|0;if((e|0)<35){if(f)e=(Qe(a,f)|0)+(e<<f)|0}else e=(Qe(a,12)|0)+1|0;e=e<<31>>31^e>>1;if((((e|0)>-1?e:0-e|0)|0)>65535){c=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,c|0,5,35472);b=x;x=0;if(b&1){b=Wa()|0;Ua(c|0);fb(b|0)}else ub(c|0,648,74)}}else{k[e>>2]=(k[e>>2]|0)-l;k[d>>2]=g<<l;e=k[2656+(f<<11)+(h<<3)>>2]|0}l=a+164+(m*12|0)+4|0;d=k[l>>2]|0;if(!f){a=j[p>>1]|0;f=a;e=(d<<1)+-1+(a<<16>>16)>>31^e}else f=j[p>>1]|0;g=f<<16>>16==64;a=g&1;h=d+e>>a;g=g?32:f<<16>>16;k[o>>2]=((e|0)>-1?e:0-e|0)+(k[o>>2]|0)>>a;d=g+1|0;j[p>>1]=d;f=d+h|0;if((f|0)<1){p=j[n>>1]|0;j[n>>1]=(p&65535)-(p<<16>>16>-128&1);p=(f|0)>(~g|0)?f:0-g|0;k[l>>2]=p;q=e^q;b=b>>>31;b=c+b|0;b=b+q|0;b=b&4095;b=b&65535;return b|0}if((h|0)<=0){p=h;k[l>>2]=p;q=e^q;b=b>>>31;b=c+b|0;b=b+q|0;b=b&4095;b=b&65535;return b|0}p=h-d|0;o=j[n>>1]|0;j[n>>1]=(o<<16>>16<127&1)+(o&65535);p=(p|0)>0?0:p;k[l>>2]=p;q=e^q;b=b>>>31;b=c+b|0;b=b+q|0;b=b&4095;b=b&65535;return b|0}function Lf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=a+4576|0;e=k[f>>2]|0;c=j[e+(b+-1<<1)>>1]|0;g=a+148|0;e=Mf(a,c,e+(b<<1)|0,(k[g>>2]|0)-b|0)|0;d=e+b|0;if((d|0)==(k[g>>2]|0)){g=e;return g|0}c=c&65535;b=m[(k[a+4572>>2]|0)+(d<<1)>>1]|0;g=c-b|0;if((((g|0)>-1?g:0-g|0)|0)<1)c=(Nf(a,a+4556|0)|0)+c|0;else c=(ia(Nf(a,a+4544|0)|0,b-c>>31|1)|0)+b|0;j[(k[f>>2]|0)+(d<<1)>>1]=c&4095;g=a+4568|0;a=k[g>>2]|0;k[g>>2]=(a|0)<1?0:a+-1|0;g=e+1|0;return g|0}function Mf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0;h=a+112|0;l=a+108|0;m=a+4568|0;e=k[h>>2]|0;f=0;while(1){if((e|0)<1){Xd(a);e=k[h>>2]|0}g=k[l>>2]|0;e=e+-1|0;k[h>>2]=e;k[l>>2]=g<<1;if((g|0)>=0){n=8;break}g=k[m>>2]|0;o=1<<k[36076+(g<<2)>>2];p=d-f|0;p=(o|0)<(p|0)?o:p;f=p+f|0;if((p|0)==(o|0))k[m>>2]=(g|0)>30?31:g+1|0;if((f|0)==(d|0)){e=d;break}}if((n|0)==8)if((f|0)!=(d|0)){e=k[m>>2]|0;if((e+-4|0)>>>0<28)e=Qe(a,k[36076+(e<<2)>>2]|0)|0;else e=0;e=e+f|0;if((e|0)>(d|0)){e=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,e|0,5,35472);p=x;x=0;if(p&1){p=Wa()|0;Ua(e|0);fb(p|0)}else ub(e|0,648,74)}}else e=d;if((e|0)>0)f=0;else return e|0;do{j[c+(f<<1)>>1]=b;f=f+1|0}while((f|0)!=(e|0));return e|0}function Nf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0;h=b+9|0;c=l[h>>0]|0;f=b+4|0;e=(ia(c>>>1,k[f>>2]|0)|0)+(k[b>>2]|0)|0;if((c|0)<(e|0)){d=0;do{c=c<<1;d=d+1|0}while((c|0)<(e|0))}else d=0;e=k[36076+(k[a+4568>>2]<<2)>>2]|0;c=Pe(a)|0;do if((c|0)<(34-e|0))if(!d){a=k[f>>2]|0;e=a+c|0;d=e&1;e=(d+e|0)/2|0;g=8;break}else{c=(Qe(a,d)|0)+(c<<d)|0;a=k[f>>2]|0;e=c+a|0;j=e&1;d=j;f=1;e=(j+e|0)/2|0;break}else{c=(Qe(a,12)|0)+1|0;a=k[f>>2]|0;e=c+a|0;f=e&1;e=(f+e|0)/2|0;if(!d){d=f;g=8}else{d=f;f=1}}while(0);if((g|0)==8)f=l[b+10>>0]<<1>>>0>=(l[h>>0]|0)>>>0;e=(d|0)!=0^f?e:0-e|0;if((e|0)<0){j=b+10|0;i[j>>0]=(l[j>>0]|0)+1}c=(c+1-a>>1)+(k[b>>2]|0)|0;k[b>>2]=c;d=i[h>>0]|0;if(d<<24>>24!=(i[b+8>>0]|0)){j=d;j=j&255;j=j+1|0;j=j&255;i[h>>0]=j;return e|0}k[b>>2]=c>>1;j=(d&255)>>>1;i[h>>0]=j;b=b+10|0;i[b>>0]=(l[b>>0]|0)>>>1;j=j&255;j=j+1|0;j=j&255;i[h>>0]=j;return e|0}function Of(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0;l=r;r=r+32|0;h=l;Ag(h,4095,0);j=a+152|0;if(((k[h+4>>2]|0)==(k[j>>2]|0)?(k[h+8>>2]|0)==(k[a+156>>2]|0):0)?(k[h+12>>2]|0)==(k[a+160>>2]|0):0){j=k[8862]|0;k[a+4580>>2]=j+(((k[8863]|0)-j|0)>>>1);r=l;return}c=a+4584|0;d=a+4588|0;e=k[d>>2]|0;b=k[c>>2]|0;f=e-b|0;if(f>>>0>=8192){if(f>>>0>8192?(g=b+8192|0,(e|0)!=(g|0)):0)k[d>>2]=g}else{Yd(c,8192-f|0);b=k[c>>2]|0}h=a+4580|0;k[h>>2]=b+4096;g=a+160|0;e=a+156|0;f=-4096;while(1){b=k[g>>2]|0;if((f|0)>(0-b|0)){c=k[e>>2]|0;if((f|0)>(0-c|0)){d=k[j>>2]|0;if((f|0)>(0-d|0))if((f|0)>=0){if((f|0)<1){i[(k[h>>2]|0)+f>>0]=0;f=1;continue}if((d|0)<=(f|0))if((c|0)>(f|0))b=2;else b=(b|0)>(f|0)?3:4;else b=1}else b=-1;else b=-2}else b=-3}else b=-4;i[(k[h>>2]|0)+f>>0]=b;f=f+1|0;if((f|0)==4096)break}r=l;return}function Pf(a){a=a|0;var b=0,c=0;k[a>>2]=35540;b=k[a+4584>>2]|0;if(b){c=a+4588|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}a=a+88|0;b=k[a>>2]|0;k[a>>2]=0;if(!b)return;Lb[k[(k[b>>2]|0)+4>>2]&255](b);return}function Qf(a){a=a|0;var b=0,c=0;k[a>>2]=35540;b=k[a+4584>>2]|0;if(b){c=a+4588|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}c=a+88|0;b=k[c>>2]|0;k[c>>2]=0;if(!b){Sg(a);return}Lb[k[(k[b>>2]|0)+4>>2]&255](b);Sg(a);return}function Rf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,y=0,z=0;u=r;r=r+352|0;v=u+328|0;y=u+192|0;c=u+343|0;d=u+342|0;e=u+341|0;f=u+340|0;o=u+176|0;h=u+168|0;j=u+160|0;l=u+152|0;t=u;q=u+136|0;if((k[a+28>>2]|0)!=0?(k[a+20>>2]|0)!=1:0){p=a+4|0;s=a+32|0;g=k[s>>2]|0;if(!g){a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[c>>0]|0;Ja(43,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}a=k[a+12>>2]|0;if((a|0)==8)switch(g|0){case 1:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[d>>0]|0;Ja(44,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 2:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[e>>0]|0;Ja(45,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 3:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[f>>0]|0;Ja(46,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}default:{g=y+56|0;e=y+4|0;k[y>>2]=35760;k[g>>2]=35780;x=0;ra(52,y+56|0,e|0);u=x;x=0;if(u&1){z=Wa()|0;Vk(g);fb(z|0)}k[y+128>>2]=0;k[y+132>>2]=-1;k[y>>2]=35800;k[y+56>>2]=35820;x=0;qa(158,e|0);u=x;x=0;do if(u&1)a=Wa()|0;else{k[e>>2]=35836;f=y+36|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=0;k[f+12>>2]=0;k[y+52>>2]=16;k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;x=0;ra(53,e|0,v|0);u=x;x=0;if(u&1){a=Wa()|0;wk(v);wk(f);al(e);break}wk(v);x=0;a=va(28,y|0,48036,21)|0;v=x;x=0;do if((!(v&1)?(x=0,m=Aa(27,a|0,k[s>>2]|0)|0,v=x,x=0,!(v&1)):0)?(x=0,va(28,m|0,49453,18)|0,v=x,x=0,!(v&1)):0){d=Va(16)|0;x=0;ra(54,o|0,e|0);v=x;x=0;if(!(v&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,d|0,9,35472,o|0);v=x;x=0;if(v&1)c=1;else{x=0;Fa(5,d|0,648,74);x=0;c=0}a=Wa()|0;wk(o);if(!c)break}else a=Wa()|0;Ua(d|0)}else z=34;while(0);if((z|0)==34)a=Wa()|0;k[y>>2]=35800;k[g>>2]=35820;k[e>>2]=35836;wk(f);al(e);Vk(g);z=a;fb(z|0)}while(0);z=a;Vk(g);fb(z|0)}}if((a|0)<=8){a=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,a|0,8,35472);z=x;x=0;if(!(z&1))ub(a|0,648,74);z=Wa()|0;Ua(a|0);fb(z|0)}c=16-a|0;switch(g|0){case 1:{a=Rg(60)|0;k[h>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[h>>2];k[v+4>>2]=k[h+4>>2];Ja(40,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 2:{a=Rg(60)|0;k[j>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[j>>2];k[v+4>>2]=k[j+4>>2];Ja(41,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 3:{a=Rg(60)|0;k[l>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[l>>2];k[v+4>>2]=k[l+4>>2];Ja(42,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}default:{g=t+56|0;e=t+4|0;k[t>>2]=35760;k[g>>2]=35780;x=0;ra(52,t+56|0,e|0);y=x;x=0;if(y&1){z=Wa()|0;Vk(g);fb(z|0)}k[t+128>>2]=0;k[t+132>>2]=-1;k[t>>2]=35800;k[t+56>>2]=35820;x=0;qa(158,e|0);y=x;x=0;do if(y&1)a=Wa()|0;else{k[e>>2]=35836;f=t+36|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=0;k[f+12>>2]=0;k[t+52>>2]=16;k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;x=0;ra(53,e|0,v|0);y=x;x=0;if(y&1){a=Wa()|0;wk(v);wk(f);al(e);break}wk(v);x=0;a=va(28,t|0,48036,21)|0;y=x;x=0;do if((!(y&1)?(x=0,n=Aa(27,a|0,k[s>>2]|0)|0,y=x,x=0,!(y&1)):0)?(x=0,va(28,n|0,49453,18)|0,y=x,x=0,!(y&1)):0){d=Va(16)|0;x=0;ra(54,q|0,e|0);y=x;x=0;if(!(y&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,d|0,9,35472,q|0);y=x;x=0;if(y&1)c=1;else{x=0;Fa(5,d|0,648,74);x=0;c=0}a=Wa()|0;wk(q);if(!c)break}else a=Wa()|0;Ua(d|0)}else z=64;while(0);if((z|0)==64)a=Wa()|0;k[t>>2]=35800;k[g>>2]=35820;k[e>>2]=35836;wk(f);al(e);Vk(g);z=a;fb(z|0)}while(0);z=a;Vk(g);fb(z|0)}}}c=k[b+4>>2]|0;d=Rg(16)|0;a=k[a+16>>2]|0;if(!c){z=k[b>>2]|0;k[d>>2]=35732;k[d+4>>2]=z;k[d+8>>2]=1;k[d+12>>2]=a;z=d;r=u;return z|0}else{k[d>>2]=35708;k[d+4>>2]=c;k[d+8>>2]=1;k[d+12>>2]=a;z=d;r=u;return z|0}return 0}function Sf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;e=r;r=r+32|0;h=e;Ag(h,255,0);g=k[b+4>>2]|0;f=k[b+8>>2]|0;f=(f|0)==0?k[h+8>>2]|0:f;d=k[b+12>>2]|0;d=(d|0)==0?k[h+12>>2]|0:d;b=k[b+16>>2]|0;c=k[h+16>>2]|0;k[a+152>>2]=(g|0)==0?k[h+4>>2]|0:g;k[a+156>>2]=f;k[a+160>>2]=d;_f(a);d=0;do{k[a+164+(d*12|0)>>2]=4;k[a+164+(d*12|0)+4>>2]=0;j[a+164+(d*12|0)+8>>1]=0;j[a+164+(d*12|0)+10>>1]=1;d=d+1|0}while((d|0)!=365);h=((b|0)==0?c:b)&255;k[a+4544>>2]=4;k[a+4548>>2]=0;i[a+4552>>0]=h;i[a+4553>>0]=1;i[a+4554>>0]=0;k[a+4556>>2]=4;k[a+4560>>2]=1;i[a+4564>>0]=h;i[a+4565>>0]=1;i[a+4566>>0]=0;k[a+4568>>2]=0;r=e;return}function Tf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=a+88|0;f=k[b>>2]|0;k[b>>2]=0;b=k[g>>2]|0;k[g>>2]=f;if(b)Lb[k[(k[b>>2]|0)+4>>2]&255](b);g=d+4|0;f=k[g>>2]|0;i[a+4596>>0]=e&1;b=a+132|0;k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];Vd(a,d);Uf(a);b=k[a+116>>2]|0;a=k[a+112>>2]|0;while(1){e=b+-1|0;c=(i[e>>0]|0)==-1?7:8;if((a|0)<(c|0))break;else{b=e;a=a-c|0}}b=b-f|0;e=k[g>>2]|0;if(!e)return;k[g>>2]=e+b;d=d+8|0;k[d>>2]=(k[d>>2]|0)-b;return}function Uf(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0;A=r;r=r+32|0;C=A+12|0;z=A;v=a+148|0;w=(k[v>>2]|0)+4|0;if((k[a+28>>2]|0)==1)y=k[a+20>>2]|0;else y=1;b=ia(y<<1,w)|0;k[C>>2]=0;D=C+4|0;k[D>>2]=0;k[C+8>>2]=0;a:do if(b){if(!((b|0)<0?(x=0,qa(155,C|0),B=x,x=0,B&1):0))f=6;if((f|0)==6?(x=0,c=ta(66,b|0)|0,B=x,x=0,!(B&1)):0){k[D>>2]=c;k[C>>2]=c;k[C+8>>2]=c+b;while(1){i[c>>0]=0;c=(k[D>>2]|0)+1|0;k[D>>2]=c;b=b+-1|0;if(!b)break a}}c=Wa()|0;b=k[C>>2]|0;if(!b)fb(c|0);if((k[D>>2]|0)!=(b|0))k[D>>2]=b;Sg(b);fb(c|0)}while(0);k[z>>2]=0;B=z+4|0;k[B>>2]=0;k[z+8>>2]=0;do if(!y)f=19;else{if(!(y>>>0>1073741823?(x=0,qa(155,z|0),u=x,x=0,u&1):0))f=17;if((f|0)==17?(d=y<<2,x=0,e=ta(66,d|0)|0,u=x,x=0,!(u&1)):0){k[z>>2]=e;f=e+(y<<2)|0;k[z+8>>2]=f;Yt(e|0,0,d|0)|0;k[B>>2]=f;f=19;break}c=Wa()|0;b=k[z>>2]|0;d=b;if(b){e=k[B>>2]|0;if((e|0)!=(b|0))k[B>>2]=e+(~((e+-4-d|0)>>>2)<<2);Sg(b)}}while(0);if((f|0)==19){f=a+8|0;b:do if((k[f>>2]|0)>0){g=a+4572|0;h=ia(y,w)|0;j=h+1|0;l=a+4576|0;m=(y|0)>0;n=a+136|0;o=a+144|0;p=a+140|0;q=a+132|0;s=a+88|0;t=a+4568|0;u=0;c:while(1){d=k[C>>2]|0;c=d+1|0;k[g>>2]=c;d=d+j|0;k[l>>2]=d;if(!(u&1))b=d;else{k[g>>2]=d;k[l>>2]=c;b=c;c=d}if(m){e=k[z>>2]|0;d=0;do{k[t>>2]=k[e+(d<<2)>>2];e=k[v>>2]|0;i[c+e>>0]=i[c+(e+-1)>>0]|0;i[(k[l>>2]|0)+-1>>0]=i[k[g>>2]>>0]|0;x=0;ra(61,a|0,0);e=x;x=0;if(e&1){f=30;break c}e=k[z>>2]|0;k[e+(d<<2)>>2]=k[t>>2];c=(k[g>>2]|0)+w|0;k[g>>2]=c;b=(k[l>>2]|0)+w|0;k[l>>2]=b;d=d+1|0}while((d|0)<(y|0))}e=k[n>>2]|0;if(((e|0)<=(u|0)?(u|0)<((k[o>>2]|0)+e|0):0)?(e=k[s>>2]|0,x=0,Ja(k[(k[e>>2]|0)+8>>2]|0,e|0,b+((k[q>>2]|0)-h)|0,k[p>>2]|0,w|0),e=x,x=0,e&1):0){f=31;break}u=u+1|0;if((u|0)>=(k[f>>2]|0)){f=43;break b}}if((f|0)==30){c=Wa()|0;break}else if((f|0)==31){c=Wa()|0;break}}else f=43;while(0);do if((f|0)==43){x=0;qa(159,a|0);a=x;x=0;if(a&1){c=Wa()|0;break}b=k[z>>2]|0;c=b;if(b){d=k[B>>2]|0;if((d|0)!=(b|0))k[B>>2]=d+(~((d+-4-c|0)>>>2)<<2);Sg(b)}b=k[C>>2]|0;if(!b){r=A;return}if((k[D>>2]|0)!=(b|0))k[D>>2]=b;Sg(b);r=A;return}while(0);b=k[z>>2]|0;d=b;if(b){e=k[B>>2]|0;if((e|0)!=(b|0))k[B>>2]=e+(~((e+-4-d|0)>>>2)<<2);Sg(b)}}b=k[C>>2]|0;if(!b)fb(c|0);if((k[D>>2]|0)!=(b|0))k[D>>2]=b;Sg(b);fb(c|0)}function Vf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,r=0;o=a+4572|0;b=k[o>>2]|0;r=a+148|0;if((k[r>>2]|0)<=0)return;p=a+4576|0;q=a+4580|0;e=b;f=l[b+-1>>0]|0;b=l[b>>0]|0;n=0;while(1){m=k[p>>2]|0;j=l[m+(n+-1)>>0]|0;d=n+1|0;c=l[e+d>>0]|0;h=k[q>>2]|0;g=b-f|0;e=f-j|0;h=((((i[h+(c-b)>>0]|0)*9|0)+(i[h+g>>0]|0)|0)*9|0)+(i[h+e>>0]|0)|0;if(!h){d=(Xf(a,n,0)|0)+n|0;c=k[o>>2]|0;b=l[c+(d+-1)>>0]|0;c=l[c+d>>0]|0}else{f=b-j>>31;if((f^e|0)<0)e=b;else e=j+((f^g|0)<0?0:g)|0;m=Wf(a,h,l[m+n>>0]|0,e,0)|0;i[(k[p>>2]|0)+n>>0]=m}if((d|0)>=(k[r>>2]|0))break;e=k[o>>2]|0;f=b;b=c;n=d}return}function Wf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0;q=b>>31;m=(q^b)-q|0;p=a+164+(m*12|0)+10|0;c=j[p>>1]|0;o=a+164+(m*12|0)|0;e=k[o>>2]|0;if((c|0)<(e|0))if((c<<1|0)<(e|0))if((c<<2|0)<(e|0))if((c<<3|0)<(e|0))if((c<<4|0)<(e|0)){f=5;while(1)if((c<<f|0)<(e|0))f=f+1|0;else break}else f=4;else f=3;else f=2;else f=1;else f=0;n=a+164+(m*12|0)+8|0;c=(j[n>>1]^q)-q+d|0;if((c&255|0)!=(c|0))c=c>>31&255^255;e=a+112|0;if((k[e>>2]|0)<8)Xd(a);d=a+108|0;g=k[d>>2]|0;h=g>>>24;l=k[2656+(f<<11)+(h<<3)+4>>2]|0;if(!l){e=Pe(a)|0;if((e|0)<23){if(f)e=(Qe(a,f)|0)+(e<<f)|0}else e=(Qe(a,8)|0)+1|0;e=e<<31>>31^e>>1;if((((e|0)>-1?e:0-e|0)|0)>65535){c=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,c|0,5,35472);b=x;x=0;if(b&1){b=Wa()|0;Ua(c|0);fb(b|0)}else ub(c|0,648,74)}}else{k[e>>2]=(k[e>>2]|0)-l;k[d>>2]=g<<l;e=k[2656+(f<<11)+(h<<3)>>2]|0}l=a+164+(m*12|0)+4|0;d=k[l>>2]|0;if(!f){a=j[p>>1]|0;f=a;e=(d<<1)+-1+(a<<16>>16)>>31^e}else f=j[p>>1]|0;g=f<<16>>16==64;a=g&1;h=d+e>>a;g=g?32:f<<16>>16;k[o>>2]=((e|0)>-1?e:0-e|0)+(k[o>>2]|0)>>a;d=g+1|0;j[p>>1]=d;f=d+h|0;if((f|0)<1){p=j[n>>1]|0;j[n>>1]=(p&65535)-(p<<16>>16>-128&1);p=(f|0)>(~g|0)?f:0-g|0;k[l>>2]=p;q=e^q;b=b>>>31;b=c+b|0;b=b+q|0;b=b&255;return b|0}if((h|0)<=0){p=h;k[l>>2]=p;q=e^q;b=b>>>31;b=c+b|0;b=b+q|0;b=b&255;return b|0}p=h-d|0;o=j[n>>1]|0;j[n>>1]=(o<<16>>16<127&1)+(o&65535);p=(p|0)>0?0:p;k[l>>2]=p;q=e^q;b=b>>>31;b=c+b|0;b=b+q|0;b=b&255;return b|0}function Xf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=a+4576|0;e=k[f>>2]|0;c=i[e+(b+-1)>>0]|0;g=a+148|0;e=Yf(a,c,e+b|0,(k[g>>2]|0)-b|0)|0;d=e+b|0;if((d|0)==(k[g>>2]|0)){g=e;return g|0}c=c&255;b=l[(k[a+4572>>2]|0)+d>>0]|0;g=c-b|0;if((((g|0)>-1?g:0-g|0)|0)<1)c=(Zf(a,a+4556|0)|0)+c|0;else c=(ia(Zf(a,a+4544|0)|0,b-c>>31|1)|0)+b|0;i[(k[f>>2]|0)+d>>0]=c;g=a+4568|0;a=k[g>>2]|0;k[g>>2]=(a|0)<1?0:a+-1|0;g=e+1|0;return g|0}function Yf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;h=a+112|0;j=a+108|0;l=a+4568|0;e=k[h>>2]|0;f=0;while(1){if((e|0)<1){Xd(a);e=k[h>>2]|0}g=k[j>>2]|0;e=e+-1|0;k[h>>2]=e;k[j>>2]=g<<1;if((g|0)>=0){m=8;break}g=k[l>>2]|0;n=1<<k[36076+(g<<2)>>2];o=d-f|0;o=(n|0)<(o|0)?n:o;f=o+f|0;if((o|0)==(n|0))k[l>>2]=(g|0)>30?31:g+1|0;if((f|0)==(d|0)){e=d;break}}if((m|0)==8)if((f|0)!=(d|0)){e=k[l>>2]|0;if((e+-4|0)>>>0<28)e=Qe(a,k[36076+(e<<2)>>2]|0)|0;else e=0;e=e+f|0;if((e|0)>(d|0)){e=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,e|0,5,35472);o=x;x=0;if(o&1){o=Wa()|0;Ua(e|0);fb(o|0)}else ub(e|0,648,74)}}else e=d;if((e|0)<=0)return e|0;Yt(c|0,b|0,e|0)|0;return e|0}function Zf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0;h=b+9|0;c=l[h>>0]|0;f=b+4|0;e=(ia(c>>>1,k[f>>2]|0)|0)+(k[b>>2]|0)|0;if((c|0)<(e|0)){d=0;do{c=c<<1;d=d+1|0}while((c|0)<(e|0))}else d=0;e=k[36076+(k[a+4568>>2]<<2)>>2]|0;c=Pe(a)|0;do if((c|0)<(22-e|0))if(!d){a=k[f>>2]|0;e=a+c|0;d=e&1;e=(d+e|0)/2|0;g=8;break}else{c=(Qe(a,d)|0)+(c<<d)|0;a=k[f>>2]|0;e=c+a|0;j=e&1;d=j;f=1;e=(j+e|0)/2|0;break}else{c=(Qe(a,8)|0)+1|0;a=k[f>>2]|0;e=c+a|0;f=e&1;e=(f+e|0)/2|0;if(!d){d=f;g=8}else{d=f;f=1}}while(0);if((g|0)==8)f=l[b+10>>0]<<1>>>0>=(l[h>>0]|0)>>>0;e=(d|0)!=0^f?e:0-e|0;if((e|0)<0){j=b+10|0;i[j>>0]=(l[j>>0]|0)+1}c=(c+1-a>>1)+(k[b>>2]|0)|0;k[b>>2]=c;d=i[h>>0]|0;if(d<<24>>24!=(i[b+8>>0]|0)){j=d;j=j&255;j=j+1|0;j=j&255;i[h>>0]=j;return e|0}k[b>>2]=c>>1;j=(d&255)>>>1;i[h>>0]=j;b=b+10|0;i[b>>0]=(l[b>>0]|0)>>>1;j=j&255;j=j+1|0;j=j&255;i[h>>0]=j;return e|0}function _f(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0;l=r;r=r+32|0;h=l;Ag(h,255,0);j=a+152|0;if(((k[h+4>>2]|0)==(k[j>>2]|0)?(k[h+8>>2]|0)==(k[a+156>>2]|0):0)?(k[h+12>>2]|0)==(k[a+160>>2]|0):0){j=k[8856]|0;k[a+4580>>2]=j+(((k[8857]|0)-j|0)>>>1);r=l;return}c=a+4584|0;d=a+4588|0;e=k[d>>2]|0;b=k[c>>2]|0;f=e-b|0;if(f>>>0>=512){if(f>>>0>512?(g=b+512|0,(e|0)!=(g|0)):0)k[d>>2]=g}else{Yd(c,512-f|0);b=k[c>>2]|0}h=a+4580|0;k[h>>2]=b+256;g=a+160|0;e=a+156|0;f=-256;while(1){b=k[g>>2]|0;if((f|0)>(0-b|0)){c=k[e>>2]|0;if((f|0)>(0-c|0)){d=k[j>>2]|0;if((f|0)>(0-d|0))if((f|0)>=0){if((f|0)<1){i[(k[h>>2]|0)+f>>0]=0;f=1;continue}if((d|0)<=(f|0))if((c|0)>(f|0))b=2;else b=(b|0)>(f|0)?3:4;else b=1}else b=-1;else b=-2}else b=-3}else b=-4;i[(k[h>>2]|0)+f>>0]=b;f=f+1|0;if((f|0)==256)break}r=l;return}function $f(a){a=a|0;var b=0,c=0;k[a>>2]=35512;b=k[a+4584>>2]|0;if(b){c=a+4588|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}a=a+88|0;b=k[a>>2]|0;k[a>>2]=0;if(!b)return;Lb[k[(k[b>>2]|0)+4>>2]&255](b);return}function ag(a){a=a|0;var b=0,c=0;k[a>>2]=35512;b=k[a+4584>>2]|0;if(b){c=a+4588|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}c=a+88|0;b=k[c>>2]|0;k[c>>2]=0;if(!b){Sg(a);return}Lb[k[(k[b>>2]|0)+4>>2]&255](b);Sg(a);return}function bg(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,y=0,z=0;u=r;r=r+352|0;v=u+328|0;y=u+192|0;c=u+343|0;d=u+342|0;e=u+341|0;f=u+340|0;o=u+176|0;h=u+168|0;j=u+160|0;l=u+152|0;t=u;q=u+136|0;if((k[a+28>>2]|0)!=0?(k[a+20>>2]|0)!=1:0){p=a+4|0;s=a+32|0;g=k[s>>2]|0;if(!g){a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[c>>0]|0;Ja(43,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}a=k[a+12>>2]|0;if((a|0)==8)switch(g|0){case 1:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[d>>0]|0;Ja(44,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 2:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[e>>0]|0;Ja(45,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 3:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[f>>0]|0;Ja(46,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}default:{g=y+56|0;e=y+4|0;k[y>>2]=35760;k[g>>2]=35780;x=0;ra(52,y+56|0,e|0);u=x;x=0;if(u&1){z=Wa()|0;Vk(g);fb(z|0)}k[y+128>>2]=0;k[y+132>>2]=-1;k[y>>2]=35800;k[y+56>>2]=35820;x=0;qa(158,e|0);u=x;x=0;do if(u&1)a=Wa()|0;else{k[e>>2]=35836;f=y+36|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=0;k[f+12>>2]=0;k[y+52>>2]=16;k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;x=0;ra(53,e|0,v|0);u=x;x=0;if(u&1){a=Wa()|0;wk(v);wk(f);al(e);break}wk(v);x=0;a=va(28,y|0,48036,21)|0;v=x;x=0;do if((!(v&1)?(x=0,m=Aa(27,a|0,k[s>>2]|0)|0,v=x,x=0,!(v&1)):0)?(x=0,va(28,m|0,49453,18)|0,v=x,x=0,!(v&1)):0){d=Va(16)|0;x=0;ra(54,o|0,e|0);v=x;x=0;if(!(v&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,d|0,9,35472,o|0);v=x;x=0;if(v&1)c=1;else{x=0;Fa(5,d|0,648,74);x=0;c=0}a=Wa()|0;wk(o);if(!c)break}else a=Wa()|0;Ua(d|0)}else z=34;while(0);if((z|0)==34)a=Wa()|0;k[y>>2]=35800;k[g>>2]=35820;k[e>>2]=35836;wk(f);al(e);Vk(g);z=a;fb(z|0)}while(0);z=a;Vk(g);fb(z|0)}}if((a|0)<=8){a=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,a|0,8,35472);z=x;x=0;if(!(z&1))ub(a|0,648,74);z=Wa()|0;Ua(a|0);fb(z|0)}c=16-a|0;switch(g|0){case 1:{a=Rg(60)|0;k[h>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[h>>2];k[v+4>>2]=k[h+4>>2];Ja(40,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 2:{a=Rg(60)|0;k[j>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[j>>2];k[v+4>>2]=k[j+4>>2];Ja(41,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 3:{a=Rg(60)|0;k[l>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[l>>2];k[v+4>>2]=k[l+4>>2];Ja(42,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}default:{g=t+56|0;e=t+4|0;k[t>>2]=35760;k[g>>2]=35780;x=0;ra(52,t+56|0,e|0);y=x;x=0;if(y&1){z=Wa()|0;Vk(g);fb(z|0)}k[t+128>>2]=0;k[t+132>>2]=-1;k[t>>2]=35800;k[t+56>>2]=35820;x=0;qa(158,e|0);y=x;x=0;do if(y&1)a=Wa()|0;else{k[e>>2]=35836;f=t+36|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=0;k[f+12>>2]=0;k[t+52>>2]=16;k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;x=0;ra(53,e|0,v|0);y=x;x=0;if(y&1){a=Wa()|0;wk(v);wk(f);al(e);break}wk(v);x=0;a=va(28,t|0,48036,21)|0;y=x;x=0;do if((!(y&1)?(x=0,n=Aa(27,a|0,k[s>>2]|0)|0,y=x,x=0,!(y&1)):0)?(x=0,va(28,n|0,49453,18)|0,y=x,x=0,!(y&1)):0){d=Va(16)|0;x=0;ra(54,q|0,e|0);y=x;x=0;if(!(y&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,d|0,9,35472,q|0);y=x;x=0;if(y&1)c=1;else{x=0;Fa(5,d|0,648,74);x=0;c=0}a=Wa()|0;wk(q);if(!c)break}else a=Wa()|0;Ua(d|0)}else z=64;while(0);if((z|0)==64)a=Wa()|0;k[t>>2]=35800;k[g>>2]=35820;k[e>>2]=35836;wk(f);al(e);Vk(g);z=a;fb(z|0)}while(0);z=a;Vk(g);fb(z|0)}}}c=k[b+4>>2]|0;d=Rg(16)|0;a=k[a+16>>2]|0;if(!c){z=k[b>>2]|0;k[d>>2]=35732;k[d+4>>2]=z;k[d+8>>2]=3;k[d+12>>2]=a;z=d;r=u;return z|0}else{k[d>>2]=35708;k[d+4>>2]=c;k[d+8>>2]=3;k[d+12>>2]=a;z=d;r=u;return z|0}return 0}function cg(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;e=r;r=r+32|0;h=e;Ag(h,255,0);g=k[b+4>>2]|0;f=k[b+8>>2]|0;f=(f|0)==0?k[h+8>>2]|0:f;d=k[b+12>>2]|0;d=(d|0)==0?k[h+12>>2]|0:d;b=k[b+16>>2]|0;c=k[h+16>>2]|0;k[a+152>>2]=(g|0)==0?k[h+4>>2]|0:g;k[a+156>>2]=f;k[a+160>>2]=d;kg(a);d=0;do{k[a+164+(d*12|0)>>2]=4;k[a+164+(d*12|0)+4>>2]=0;j[a+164+(d*12|0)+8>>1]=0;j[a+164+(d*12|0)+10>>1]=1;d=d+1|0}while((d|0)!=365);h=((b|0)==0?c:b)&255;k[a+4544>>2]=4;k[a+4548>>2]=0;i[a+4552>>0]=h;i[a+4553>>0]=1;i[a+4554>>0]=0;k[a+4556>>2]=4;k[a+4560>>2]=1;i[a+4564>>0]=h;i[a+4565>>0]=1;i[a+4566>>0]=0;k[a+4568>>2]=0;r=e;return}function dg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=a+88|0;f=k[b>>2]|0;k[b>>2]=0;b=k[g>>2]|0;k[g>>2]=f;if(b)Lb[k[(k[b>>2]|0)+4>>2]&255](b);g=d+4|0;f=k[g>>2]|0;i[a+4596>>0]=e&1;b=a+132|0;k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];Vd(a,d);eg(a);b=k[a+116>>2]|0;a=k[a+112>>2]|0;while(1){e=b+-1|0;c=(i[e>>0]|0)==-1?7:8;if((a|0)<(c|0))break;else{b=e;a=a-c|0}}b=b-f|0;e=k[g>>2]|0;if(!e)return;k[g>>2]=e+b;d=d+8|0;k[d>>2]=(k[d>>2]|0)-b;return}function eg(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0;A=r;r=r+32|0;C=A+12|0;z=A;v=a+148|0;w=(k[v>>2]|0)+4|0;if((k[a+28>>2]|0)==1)y=k[a+20>>2]|0;else y=1;b=ia(y<<1,w)|0;k[C>>2]=0;D=C+4|0;k[D>>2]=0;k[C+8>>2]=0;a:do if(b){if(!(b>>>0>1431655765?(x=0,qa(155,C|0),B=x,x=0,B&1):0))f=6;if((f|0)==6?(x=0,c=ta(66,b*3|0)|0,B=x,x=0,!(B&1)):0){k[D>>2]=c;k[C>>2]=c;k[C+8>>2]=c+(b*3|0);while(1){i[c>>0]=0;i[c+1>>0]=0;i[c+2>>0]=0;c=(k[D>>2]|0)+3|0;k[D>>2]=c;b=b+-1|0;if(!b)break a}}d=Wa()|0;b=k[C>>2]|0;if(!b)fb(d|0);c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~(((c+-3-b|0)>>>0)/3|0)*3|0);Sg(b);fb(d|0)}while(0);k[z>>2]=0;B=z+4|0;k[B>>2]=0;k[z+8>>2]=0;do if(!y)f=19;else{if(!(y>>>0>1073741823?(x=0,qa(155,z|0),u=x,x=0,u&1):0))f=17;if((f|0)==17?(d=y<<2,x=0,e=ta(66,d|0)|0,u=x,x=0,!(u&1)):0){k[z>>2]=e;f=e+(y<<2)|0;k[z+8>>2]=f;Yt(e|0,0,d|0)|0;k[B>>2]=f;f=19;break}d=Wa()|0;b=k[z>>2]|0;c=b;if(b){e=k[B>>2]|0;if((e|0)!=(b|0))k[B>>2]=e+(~((e+-4-c|0)>>>2)<<2);Sg(b)}}while(0);if((f|0)==19){f=a+8|0;b:do if((k[f>>2]|0)>0){g=a+4572|0;h=ia(y,w)|0;j=h+1|0;l=a+4576|0;m=(y|0)>0;n=a+136|0;o=a+144|0;p=a+140|0;q=a+132|0;s=a+88|0;t=a+4568|0;u=0;c:while(1){d=k[C>>2]|0;c=d+3|0;k[g>>2]=c;d=d+(j*3|0)|0;k[l>>2]=d;if(!(u&1))b=d;else{k[g>>2]=d;k[l>>2]=c;b=c;c=d}if(m){e=k[z>>2]|0;d=0;do{k[t>>2]=k[e+(d<<2)>>2];b=k[v>>2]|0;e=c+(b*3|0)|0;c=c+((b+-1|0)*3|0)|0;i[e>>0]=i[c>>0]|0;i[e+1>>0]=i[c+1>>0]|0;i[e+2>>0]=i[c+2>>0]|0;c=k[g>>2]|0;e=(k[l>>2]|0)+-3|0;i[e>>0]=i[c>>0]|0;i[e+1>>0]=i[c+1>>0]|0;i[e+2>>0]=i[c+2>>0]|0;x=0;ra(62,a|0,0);e=x;x=0;if(e&1){f=30;break c}e=k[z>>2]|0;k[e+(d<<2)>>2]=k[t>>2];c=(k[g>>2]|0)+(w*3|0)|0;k[g>>2]=c;b=(k[l>>2]|0)+(w*3|0)|0;k[l>>2]=b;d=d+1|0}while((d|0)<(y|0))}e=k[n>>2]|0;if(((e|0)<=(u|0)?(u|0)<((k[o>>2]|0)+e|0):0)?(e=k[s>>2]|0,x=0,Ja(k[(k[e>>2]|0)+8>>2]|0,e|0,b+(((k[q>>2]|0)-h|0)*3|0)|0,k[p>>2]|0,w|0),e=x,x=0,e&1):0){f=31;break}u=u+1|0;if((u|0)>=(k[f>>2]|0)){f=43;break b}}if((f|0)==30){d=Wa()|0;break}else if((f|0)==31){d=Wa()|0;break}}else f=43;while(0);do if((f|0)==43){x=0;qa(159,a|0);a=x;x=0;if(a&1){d=Wa()|0;break}b=k[z>>2]|0;c=b;if(b){d=k[B>>2]|0;if((d|0)!=(b|0))k[B>>2]=d+(~((d+-4-c|0)>>>2)<<2);Sg(b)}b=k[C>>2]|0;if(!b){r=A;return}c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~(((c+-3-b|0)>>>0)/3|0)*3|0);Sg(b);r=A;return}while(0);b=k[z>>2]|0;c=b;if(b){e=k[B>>2]|0;if((e|0)!=(b|0))k[B>>2]=e+(~((e+-4-c|0)>>>2)<<2);Sg(b)}}b=k[C>>2]|0;if(!b)fb(d|0);c=k[D>>2]|0;if((c|0)!=(b|0))k[D>>2]=c+(~(((c+-3-b|0)>>>0)/3|0)*3|0);Sg(b);fb(d|0)}function fg(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;A=a+148|0;if((k[A>>2]|0)<=0)return;B=a+4576|0;C=a+4572|0;D=a+4580|0;z=0;while(1){w=z+-1|0;f=k[B>>2]|0;g=k[C>>2]|0;b=z+1|0;e=l[g+(z*3|0)>>0]|0;y=k[D>>2]|0;h=l[g+(w*3|0)>>0]|0;j=e-h|0;m=l[f+(w*3|0)>>0]|0;n=h-m|0;o=((((i[y+((l[g+(b*3|0)>>0]|0)-e)>>0]|0)*9|0)+(i[y+j>>0]|0)|0)*9|0)+(i[y+n>>0]|0)|0;d=l[g+(z*3|0)+1>>0]|0;p=l[g+(w*3|0)+1>>0]|0;q=d-p|0;r=l[f+(w*3|0)+1>>0]|0;s=p-r|0;t=((((i[y+((l[g+(b*3|0)+1>>0]|0)-d)>>0]|0)*9|0)+(i[y+q>>0]|0)|0)*9|0)+(i[y+s>>0]|0)|0;c=l[g+(z*3|0)+2>>0]|0;u=l[g+(w*3|0)+2>>0]|0;v=c-u|0;w=l[f+(w*3|0)+2>>0]|0;x=u-w|0;y=((((i[y+((l[g+(b*3|0)+2>>0]|0)-c)>>0]|0)*9|0)+(i[y+v>>0]|0)|0)*9|0)+(i[y+x>>0]|0)|0;if(!(t|o|y))b=(gg(a,z,0)|0)+z|0;else{g=l[f+(z*3|0)>>0]|0;f=e-m>>31;if((f^n|0)>=0)if((f^j|0)<0)e=m;else e=m-h+e|0;g=hg(a,o,g,e,0)|0;f=l[(k[B>>2]|0)+(z*3|0)+1>>0]|0;e=d-r>>31;if((e^s|0)>=0)if((e^q|0)<0)d=r;else d=r-p+d|0;e=hg(a,t,f,d,0)|0;f=l[(k[B>>2]|0)+(z*3|0)+2>>0]|0;d=c-w>>31;if((d^x|0)>=0)if((d^v|0)<0)c=w;else c=w-u+c|0;y=hg(a,y,f,c,0)|0;z=(k[B>>2]|0)+(z*3|0)|0;i[z>>0]=g;i[z+1>>0]=e;i[z+2>>0]=y}if((b|0)<(k[A>>2]|0))z=b;else break}return}function gg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;j=r;r=r+16|0;m=j+3|0;n=j;f=a+4576|0;c=k[f>>2]|0;d=c+((b+-1|0)*3|0)|0;g=i[d>>0]|0;h=i[d+1>>0]|0;d=i[d+2>>0]|0;i[n>>0]=g;i[n+1>>0]=h;i[n+2>>0]=d;l=a+148|0;e=(k[l>>2]|0)-b|0;i[m>>0]=i[n>>0]|0;i[m+1>>0]=i[n+1>>0]|0;i[m+2>>0]=i[n+2>>0]|0;e=ig(a,m,c+(b*3|0)|0,e)|0;c=e+b|0;if((c|0)==(k[l>>2]|0)){n=e;r=j;return n|0}m=(k[a+4572>>2]|0)+(c*3|0)|0;b=i[m>>0]|0;l=i[m+1>>0]|0;m=i[m+2>>0]|0;n=k[f>>2]|0;f=a+4544|0;p=jg(a,f)|0;o=jg(a,f)|0;b=b&255;b=(ia(b-(g&255)>>31|1,p)|0)+b&255;l=l&255;l=(ia(l-(h&255)>>31|1,o)|0)+l&255;m=m&255;m=(ia(m-(d&255)>>31|1,jg(a,f)|0)|0)+m&255;n=n+(c*3|0)|0;i[n>>0]=b;i[n+1>>0]=l;i[n+2>>0]=m;n=a+4568|0;m=k[n>>2]|0;k[n>>2]=(m|0)<1?0:m+-1|0;n=e+1|0;r=j;return n|0}function hg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0;q=b>>31;m=(q^b)-q|0;p=a+164+(m*12|0)+10|0;c=j[p>>1]|0;o=a+164+(m*12|0)|0;e=k[o>>2]|0;if((c|0)<(e|0))if((c<<1|0)<(e|0))if((c<<2|0)<(e|0))if((c<<3|0)<(e|0))if((c<<4|0)<(e|0)){f=5;while(1)if((c<<f|0)<(e|0))f=f+1|0;else break}else f=4;else f=3;else f=2;else f=1;else f=0;n=a+164+(m*12|0)+8|0;c=(j[n>>1]^q)-q+d|0;if((c&255|0)!=(c|0))c=c>>31&255^255;e=a+112|0;if((k[e>>2]|0)<8)Xd(a);d=a+108|0;g=k[d>>2]|0;h=g>>>24;l=k[2656+(f<<11)+(h<<3)+4>>2]|0;if(!l){e=Pe(a)|0;if((e|0)<23){if(f)e=(Qe(a,f)|0)+(e<<f)|0}else e=(Qe(a,8)|0)+1|0;e=e<<31>>31^e>>1;if((((e|0)>-1?e:0-e|0)|0)>65535){c=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,c|0,5,35472);b=x;x=0;if(b&1){b=Wa()|0;Ua(c|0);fb(b|0)}else ub(c|0,648,74)}}else{k[e>>2]=(k[e>>2]|0)-l;k[d>>2]=g<<l;e=k[2656+(f<<11)+(h<<3)>>2]|0}l=a+164+(m*12|0)+4|0;d=k[l>>2]|0;if(!f){a=j[p>>1]|0;f=a;e=(d<<1)+-1+(a<<16>>16)>>31^e}else f=j[p>>1]|0;g=f<<16>>16==64;a=g&1;h=d+e>>a;g=g?32:f<<16>>16;k[o>>2]=((e|0)>-1?e:0-e|0)+(k[o>>2]|0)>>a;d=g+1|0;j[p>>1]=d;f=d+h|0;if((f|0)<1){p=j[n>>1]|0;j[n>>1]=(p&65535)-(p<<16>>16>-128&1);p=(f|0)>(~g|0)?f:0-g|0;k[l>>2]=p;q=e^q;b=b>>>31;b=c+b|0;b=b+q|0;b=b&255;return b|0}if((h|0)<=0){p=h;k[l>>2]=p;q=e^q;b=b>>>31;b=c+b|0;b=b+q|0;b=b&255;return b|0}p=h-d|0;o=j[n>>1]|0;j[n>>1]=(o<<16>>16<127&1)+(o&65535);p=(p|0)>0?0:p;k[l>>2]=p;q=e^q;b=b>>>31;b=c+b|0;b=b+q|0;b=b&255;return b|0}function ig(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;h=a+112|0;j=a+108|0;l=a+4568|0;e=k[h>>2]|0;f=0;while(1){if((e|0)<1){Xd(a);e=k[h>>2]|0}g=k[j>>2]|0;e=e+-1|0;k[h>>2]=e;k[j>>2]=g<<1;if((g|0)>=0){m=8;break}g=k[l>>2]|0;n=1<<k[36076+(g<<2)>>2];o=d-f|0;o=(n|0)<(o|0)?n:o;f=o+f|0;if((o|0)==(n|0))k[l>>2]=(g|0)>30?31:g+1|0;if((f|0)==(d|0)){e=d;break}}if((m|0)==8)if((f|0)!=(d|0)){e=k[l>>2]|0;if((e+-4|0)>>>0<28)e=Qe(a,k[36076+(e<<2)>>2]|0)|0;else e=0;e=e+f|0;if((e|0)>(d|0)){e=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,e|0,5,35472);o=x;x=0;if(o&1){o=Wa()|0;Ua(e|0);fb(o|0)}else ub(e|0,648,74)}}else e=d;if((e|0)<=0)return e|0;f=0;do{o=c+(f*3|0)|0;i[o>>0]=i[b>>0]|0;i[o+1>>0]=i[b+1>>0]|0;i[o+2>>0]=i[b+2>>0]|0;f=f+1|0}while((f|0)!=(e|0));return e|0}function jg(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0;h=b+9|0;c=l[h>>0]|0;f=b+4|0;e=(ia(c>>>1,k[f>>2]|0)|0)+(k[b>>2]|0)|0;if((c|0)<(e|0)){d=0;do{c=c<<1;d=d+1|0}while((c|0)<(e|0))}else d=0;e=k[36076+(k[a+4568>>2]<<2)>>2]|0;c=Pe(a)|0;do if((c|0)<(22-e|0))if(!d){a=k[f>>2]|0;e=a+c|0;d=e&1;e=(d+e|0)/2|0;g=8;break}else{c=(Qe(a,d)|0)+(c<<d)|0;a=k[f>>2]|0;e=c+a|0;j=e&1;d=j;f=1;e=(j+e|0)/2|0;break}else{c=(Qe(a,8)|0)+1|0;a=k[f>>2]|0;e=c+a|0;f=e&1;e=(f+e|0)/2|0;if(!d){d=f;g=8}else{d=f;f=1}}while(0);if((g|0)==8)f=l[b+10>>0]<<1>>>0>=(l[h>>0]|0)>>>0;e=(d|0)!=0^f?e:0-e|0;if((e|0)<0){j=b+10|0;i[j>>0]=(l[j>>0]|0)+1}c=(c+1-a>>1)+(k[b>>2]|0)|0;k[b>>2]=c;d=i[h>>0]|0;if(d<<24>>24!=(i[b+8>>0]|0)){j=d;j=j&255;j=j+1|0;j=j&255;i[h>>0]=j;return e|0}k[b>>2]=c>>1;j=(d&255)>>>1;i[h>>0]=j;b=b+10|0;i[b>>0]=(l[b>>0]|0)>>>1;j=j&255;j=j+1|0;j=j&255;i[h>>0]=j;return e|0}function kg(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0;l=r;r=r+32|0;h=l;Ag(h,255,0);j=a+152|0;if(((k[h+4>>2]|0)==(k[j>>2]|0)?(k[h+8>>2]|0)==(k[a+156>>2]|0):0)?(k[h+12>>2]|0)==(k[a+160>>2]|0):0){j=k[8856]|0;k[a+4580>>2]=j+(((k[8857]|0)-j|0)>>>1);r=l;return}c=a+4584|0;d=a+4588|0;e=k[d>>2]|0;b=k[c>>2]|0;f=e-b|0;if(f>>>0>=512){if(f>>>0>512?(g=b+512|0,(e|0)!=(g|0)):0)k[d>>2]=g}else{Yd(c,512-f|0);b=k[c>>2]|0}h=a+4580|0;k[h>>2]=b+256;g=a+160|0;e=a+156|0;f=-256;while(1){b=k[g>>2]|0;if((f|0)>(0-b|0)){c=k[e>>2]|0;if((f|0)>(0-c|0)){d=k[j>>2]|0;if((f|0)>(0-d|0))if((f|0)>=0){if((f|0)<1){i[(k[h>>2]|0)+f>>0]=0;f=1;continue}if((d|0)<=(f|0))if((c|0)>(f|0))b=2;else b=(b|0)>(f|0)?3:4;else b=1}else b=-1;else b=-2}else b=-3}else b=-4;i[(k[h>>2]|0)+f>>0]=b;f=f+1|0;if((f|0)==256)break}r=l;return}function lg(a){a=a|0;var b=0,c=0;k[a>>2]=35484;b=k[a+4608>>2]|0;if(b){c=a+4612|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}a=a+88|0;b=k[a>>2]|0;k[a>>2]=0;if(!b)return;Lb[k[(k[b>>2]|0)+4>>2]&255](b);return}function mg(a){a=a|0;var b=0,c=0;k[a>>2]=35484;b=k[a+4608>>2]|0;if(b){c=a+4612|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}k[a>>2]=36308;b=k[a+92>>2]|0;if(b){c=a+96|0;if((k[c>>2]|0)!=(b|0))k[c>>2]=b;Sg(b)}c=a+88|0;b=k[c>>2]|0;k[c>>2]=0;if(!b){Sg(a);return}Lb[k[(k[b>>2]|0)+4>>2]&255](b);Sg(a);return}function ng(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,y=0,z=0;u=r;r=r+352|0;v=u+328|0;y=u+192|0;c=u+343|0;d=u+342|0;e=u+341|0;f=u+340|0;o=u+176|0;h=u+168|0;j=u+160|0;l=u+152|0;t=u;q=u+136|0;if((k[a+28>>2]|0)!=0?(k[a+20>>2]|0)!=1:0){p=a+4|0;s=a+32|0;g=k[s>>2]|0;if(!g){a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[c>>0]|0;Ja(43,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}a=k[a+12>>2]|0;if((a|0)==8)switch(g|0){case 1:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[d>>0]|0;Ja(44,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 2:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[e>>0]|0;Ja(45,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 3:{a=Rg(48)|0;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];i[v>>0]=i[f>>0]|0;Ja(46,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}default:{g=y+56|0;e=y+4|0;k[y>>2]=35760;k[g>>2]=35780;x=0;ra(52,y+56|0,e|0);u=x;x=0;if(u&1){z=Wa()|0;Vk(g);fb(z|0)}k[y+128>>2]=0;k[y+132>>2]=-1;k[y>>2]=35800;k[y+56>>2]=35820;x=0;qa(158,e|0);u=x;x=0;do if(u&1)a=Wa()|0;else{k[e>>2]=35836;f=y+36|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=0;k[f+12>>2]=0;k[y+52>>2]=16;k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;x=0;ra(53,e|0,v|0);u=x;x=0;if(u&1){a=Wa()|0;wk(v);wk(f);al(e);break}wk(v);x=0;a=va(28,y|0,48036,21)|0;v=x;x=0;do if((!(v&1)?(x=0,m=Aa(27,a|0,k[s>>2]|0)|0,v=x,x=0,!(v&1)):0)?(x=0,va(28,m|0,49453,18)|0,v=x,x=0,!(v&1)):0){d=Va(16)|0;x=0;ra(54,o|0,e|0);v=x;x=0;if(!(v&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,d|0,9,35472,o|0);v=x;x=0;if(v&1)c=1;else{x=0;Fa(5,d|0,648,74);x=0;c=0}a=Wa()|0;wk(o);if(!c)break}else a=Wa()|0;Ua(d|0)}else z=34;while(0);if((z|0)==34)a=Wa()|0;k[y>>2]=35800;k[g>>2]=35820;k[e>>2]=35836;wk(f);al(e);Vk(g);z=a;fb(z|0)}while(0);z=a;Vk(g);fb(z|0)}}if((a|0)<=8){a=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,a|0,8,35472);z=x;x=0;if(!(z&1))ub(a|0,648,74);z=Wa()|0;Ua(a|0);fb(z|0)}c=16-a|0;switch(g|0){case 1:{a=Rg(60)|0;k[h>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[h>>2];k[v+4>>2]=k[h+4>>2];Ja(40,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 2:{a=Rg(60)|0;k[j>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[j>>2];k[v+4>>2]=k[j+4>>2];Ja(41,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}case 3:{a=Rg(60)|0;k[l>>2]=c;x=0;k[y>>2]=k[b>>2];k[y+4>>2]=k[b+4>>2];k[y+8>>2]=k[b+8>>2];k[v>>2]=k[l>>2];k[v+4>>2]=k[l+4>>2];Ja(42,a|0,y|0,p|0,v|0);z=x;x=0;if(!(z&1)){z=a;r=u;return z|0}z=Wa()|0;Sg(a);fb(z|0)}default:{g=t+56|0;e=t+4|0;k[t>>2]=35760;k[g>>2]=35780;x=0;ra(52,t+56|0,e|0);y=x;x=0;if(y&1){z=Wa()|0;Vk(g);fb(z|0)}k[t+128>>2]=0;k[t+132>>2]=-1;k[t>>2]=35800;k[t+56>>2]=35820;x=0;qa(158,e|0);y=x;x=0;do if(y&1)a=Wa()|0;else{k[e>>2]=35836;f=t+36|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=0;k[f+12>>2]=0;k[t+52>>2]=16;k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;x=0;ra(53,e|0,v|0);y=x;x=0;if(y&1){a=Wa()|0;wk(v);wk(f);al(e);break}wk(v);x=0;a=va(28,t|0,48036,21)|0;y=x;x=0;do if((!(y&1)?(x=0,n=Aa(27,a|0,k[s>>2]|0)|0,y=x,x=0,!(y&1)):0)?(x=0,va(28,n|0,49453,18)|0,y=x,x=0,!(y&1)):0){d=Va(16)|0;x=0;ra(54,q|0,e|0);y=x;x=0;if(!(y&1)){if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Ja(35,d|0,9,35472,q|0);y=x;x=0;if(y&1)c=1;else{x=0;Fa(5,d|0,648,74);x=0;c=0}a=Wa()|0;wk(q);if(!c)break}else a=Wa()|0;Ua(d|0)}else z=64;while(0);if((z|0)==64)a=Wa()|0;k[t>>2]=35800;k[g>>2]=35820;k[e>>2]=35836;wk(f);al(e);Vk(g);z=a;fb(z|0)}while(0);z=a;Vk(g);fb(z|0)}}}c=k[b+4>>2]|0;d=Rg(16)|0;a=k[a+16>>2]|0;if(!c){z=k[b>>2]|0;k[d>>2]=35732;k[d+4>>2]=z;k[d+8>>2]=1;k[d+12>>2]=a;z=d;r=u;return z|0}else{k[d>>2]=35708;k[d+4>>2]=c;k[d+8>>2]=1;k[d+12>>2]=a;z=d;r=u;return z|0}return 0}function og(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,l=0;g=r;r=r+32|0;l=g;Ag(l,k[a+128>>2]|0,k[a+136>>2]|0);h=k[b+4>>2]|0;f=k[b+8>>2]|0;f=(f|0)==0?k[l+8>>2]|0:f;e=k[b+12>>2]|0;e=(e|0)==0?k[l+12>>2]|0:e;c=k[b+16>>2]|0;d=k[l+16>>2]|0;k[a+176>>2]=(h|0)==0?k[l+4>>2]|0:h;k[a+180>>2]=f;k[a+184>>2]=e;wg(a);e=a+132|0;b=(k[e>>2]|0)+32|0;b=(b|0)<128?2:(b|0)/64|0;f=0;do{k[a+188+(f*12|0)>>2]=b;k[a+188+(f*12|0)+4>>2]=0;j[a+188+(f*12|0)+8>>1]=0;j[a+188+(f*12|0)+10>>1]=1;f=f+1|0}while((f|0)!=365);h=(k[e>>2]|0)+32|0;h=(h|0)<128?2:(h|0)/64|0;l=((c|0)==0?d:c)&255;k[a+4568>>2]=h;k[a+4572>>2]=0;i[a+4576>>0]=l;i[a+4577>>0]=1;i[a+4578>>0]=0;k[a+4580>>2]=h;k[a+4584>>2]=1;i[a+4588>>0]=l;i[a+4589>>0]=1;i[a+4590>>0]=0;k[a+4592>>2]=0;r=g;return}function pg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=a+88|0;f=k[b>>2]|0;k[b>>2]=0;b=k[g>>2]|0;k[g>>2]=f;if(b)Lb[k[(k[b>>2]|0)+4>>2]&255](b);g=d+4|0;f=k[g>>2]|0;i[a+4620>>0]=e&1;b=a+156|0;k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];Vd(a,d);qg(a);b=k[a+116>>2]|0;a=k[a+112>>2]|0;while(1){e=b+-1|0;c=(i[e>>0]|0)==-1?7:8;if((a|0)<(c|0))break;else{b=e;a=a-c|0}}b=b-f|0;e=k[g>>2]|0;if(!e)return;k[g>>2]=e+b;d=d+8|0;k[d>>2]=(k[d>>2]|0)-b;return}function qg(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0;A=r;r=r+32|0;C=A+12|0;z=A;h=a+172|0;y=(k[h>>2]|0)+4|0;if((k[a+28>>2]|0)==1)j=k[a+20>>2]|0;else j=1;b=ia(j<<1,y)|0;k[C>>2]=0;D=C+4|0;k[D>>2]=0;k[C+8>>2]=0;a:do if(b){if(!((b|0)<0?(x=0,qa(155,C|0),B=x,x=0,B&1):0))w=6;if((w|0)==6?(x=0,c=ta(66,b|0)|0,B=x,x=0,!(B&1)):0){k[D>>2]=c;k[C>>2]=c;k[C+8>>2]=c+b;while(1){i[c>>0]=0;c=(k[D>>2]|0)+1|0;k[D>>2]=c;b=b+-1|0;if(!b)break a}}c=Wa()|0;b=k[C>>2]|0;if(!b)fb(c|0);if((k[D>>2]|0)!=(b|0))k[D>>2]=b;Sg(b);fb(c|0)}while(0);k[z>>2]=0;B=z+4|0;k[B>>2]=0;k[z+8>>2]=0;do if(!j)w=19;else{if(!(j>>>0>1073741823?(x=0,qa(155,z|0),v=x,x=0,v&1):0))w=17;if((w|0)==17?(d=j<<2,x=0,e=ta(66,d|0)|0,v=x,x=0,!(v&1)):0){k[z>>2]=e;w=e+(j<<2)|0;k[z+8>>2]=w;Yt(e|0,0,d|0)|0;k[B>>2]=w;w=19;break}c=Wa()|0;b=k[z>>2]|0;d=b;if(b){e=k[B>>2]|0;if((e|0)!=(b|0))k[B>>2]=e+(~((e+-4-d|0)>>>2)<<2);Sg(b)}}while(0);if((w|0)==19){l=a+8|0;b=k[l>>2]|0;b:do if((b|0)>0){m=a+4596|0;n=ia(j,y)|0;o=n+1|0;p=a+4600|0;q=a+160|0;s=a+168|0;t=a+164|0;u=a+156|0;v=a+88|0;g=a+4592|0;if((j|0)>0)f=0;else{f=0;while(1){e=k[C>>2]|0;c=e+1|0;k[m>>2]=c;d=e+o|0;k[p>>2]=d;if(!(f&1))c=o;else{k[m>>2]=d;k[p>>2]=c;c=1}j=k[q>>2]|0;if((j|0)<=(f|0)?(f|0)<((k[s>>2]|0)+j|0):0){j=k[v>>2]|0;x=0;Ja(k[(k[j>>2]|0)+8>>2]|0,j|0,e+(c+((k[u>>2]|0)-n))|0,k[t>>2]|0,y|0);j=x;x=0;if(j&1)break;b=k[l>>2]|0}f=f+1|0;if((f|0)>=(b|0)){w=50;break b}}c=Wa()|0;break}c:while(1){c=k[C>>2]|0;b=c+1|0;k[m>>2]=b;c=c+o|0;k[p>>2]=c;if(f&1){k[m>>2]=c;k[p>>2]=b;b=c}e=k[z>>2]|0;c=b;d=0;do{k[g>>2]=k[e+(d<<2)>>2];w=k[h>>2]|0;i[c+w>>0]=i[c+(w+-1)>>0]|0;i[(k[p>>2]|0)+-1>>0]=i[k[m>>2]>>0]|0;x=0;ra(63,a|0,0);w=x;x=0;if(w&1){w=38;break c}e=k[z>>2]|0;k[e+(d<<2)>>2]=k[g>>2];c=(k[m>>2]|0)+y|0;k[m>>2]=c;b=k[p>>2]|0;k[p>>2]=b+y;d=d+1|0}while((d|0)<(j|0));w=k[q>>2]|0;if(((w|0)<=(f|0)?(f|0)<((k[s>>2]|0)+w|0):0)?(w=k[v>>2]|0,x=0,Ja(k[(k[w>>2]|0)+8>>2]|0,w|0,b+(y+((k[u>>2]|0)-n))|0,k[t>>2]|0,y|0),w=x,x=0,w&1):0){w=30;break}f=f+1|0;if((f|0)>=(k[l>>2]|0)){w=50;break b}}if((w|0)==30){c=Wa()|0;break}else if((w|0)==38){c=Wa()|0;break}}else w=50;while(0);do if((w|0)==50){x=0;qa(159,a|0);a=x;x=0;if(a&1){c=Wa()|0;break}b=k[z>>2]|0;c=b;if(b){d=k[B>>2]|0;if((d|0)!=(b|0))k[B>>2]=d+(~((d+-4-c|0)>>>2)<<2);Sg(b)}b=k[C>>2]|0;if(!b){r=A;return}if((k[D>>2]|0)!=(b|0))k[D>>2]=b;Sg(b);r=A;return}while(0);b=k[z>>2]|0;d=b;if(b){e=k[B>>2]|0;if((e|0)!=(b|0))k[B>>2]=e+(~((e+-4-d|0)>>>2)<<2);Sg(b)}}b=k[C>>2]|0;if(!b)fb(c|0);if((k[D>>2]|0)!=(b|0))k[D>>2]=b;Sg(b);fb(c|0)}function rg(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;p=a+4596|0;c=k[p>>2]|0;t=a+172|0;b=k[t>>2]|0;if((b|0)<=0)return;q=a+4600|0;r=a+4604|0;s=a+4592|0;h=c;f=l[c+-1>>0]|0;c=l[c>>0]|0;o=0;while(1){m=k[q>>2]|0;g=i[m+(o+-1)>>0]|0;n=g&255;e=o+1|0;d=l[h+e>>0]|0;j=k[r>>2]|0;h=c-f|0;f=f-n|0;j=((((i[j+(d-c)>>0]|0)*9|0)+(i[j+h>>0]|0)|0)*9|0)+(i[j+f>>0]|0)|0;m=m+o|0;if(!j){b=tg(a,g,m,b-o|0)|0;c=b+o|0;if((c|0)!=(k[t>>2]|0)){n=ug(a,n,l[(k[p>>2]|0)+c>>0]|0)|0;i[(k[q>>2]|0)+c>>0]=n;n=k[s>>2]|0;k[s>>2]=(n|0)<1?0:n+-1|0;b=b+1|0}e=b+o|0;d=k[p>>2]|0;c=l[d+(e+-1)>>0]|0;d=l[d+e>>0]|0}else{b=c-n>>31;if((b^f|0)<0)b=c;else b=n+((b^h|0)<0?0:h)|0;n=sg(a,j,l[m>>0]|0,b,0)|0;i[(k[q>>2]|0)+o>>0]=n}b=k[t>>2]|0;if((b|0)<=(e|0))break;h=k[p>>2]|0;f=c;c=d;o=e}return}function sg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=b>>31;l=(r^b)-r|0;p=a+188+(l*12|0)+10|0;c=j[p>>1]|0;o=a+188+(l*12|0)|0;e=k[o>>2]|0;if((c|0)<(e|0))if((c<<1|0)<(e|0))if((c<<2|0)<(e|0))if((c<<3|0)<(e|0))if((c<<4|0)<(e|0)){b=5;while(1)if((c<<b|0)<(e|0))b=b+1|0;else break}else b=4;else b=3;else b=2;else b=1;else b=0;n=a+188+(l*12|0)+8|0;c=(j[n>>1]^r)-r+d|0;q=a+128|0;e=k[q>>2]|0;if((c&e|0)==(c|0))m=c;else m=e&~(c>>31);c=a+112|0;if((k[c>>2]|0)<8)Xd(a);e=a+108|0;d=k[e>>2]|0;f=d>>>24;g=k[2656+(b<<11)+(f<<3)+4>>2]|0;if(!g){h=k[a+148>>2]|0;e=k[a+140>>2]|0;c=Pe(a)|0;if((c|0)<(h+-1-e|0)){if(b)c=(Qe(a,b)|0)+(c<<b)|0}else c=(Qe(a,e)|0)+1|0;c=c<<31>>31^c>>1;if((((c|0)>-1?c:0-c|0)|0)>65535){c=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,c|0,5,35472);a=x;x=0;if(a&1){a=Wa()|0;Ua(c|0);fb(a|0)}else ub(c|0,648,74)}}else{k[c>>2]=(k[c>>2]|0)-g;k[e>>2]=d<<g;c=k[2656+(b<<11)+(f<<3)>>2]|0}h=a+136|0;d=k[h>>2]|0;if(!b){if(!d)e=(k[a+188+(l*12|0)+4>>2]<<1)+-1+(j[p>>1]|0)>>31;else e=0;g=e^c}else g=c;b=k[a+152>>2]|0;e=(k[o>>2]|0)+((g|0)>-1?g:0-g|0)|0;f=a+188+(l*12|0)+4|0;c=(k[f>>2]|0)+(ia(d<<1|1,g)|0)|0;d=j[p>>1]|0;if((d|0)==(b|0)){e=e>>1;c=c>>1;d=b>>1}k[o>>2]=e;b=d+1|0;j[p>>1]=b;e=b+c|0;if((e|0)>=1){if((c|0)>0){c=c-b|0;p=j[n>>1]|0;j[n>>1]=(p<<16>>16<127&1)+(p&65535);c=(c|0)>0?0:c}}else{c=j[n>>1]|0;j[n>>1]=(c&65535)-(c<<16>>16>-128&1);c=(e|0)>(~d|0)?e:0-d|0}k[f>>2]=c;b=k[h>>2]|0;d=b<<1|1;e=(ia(d,(g^r)-r|0)|0)+m|0;if((e|0)>=(0-b|0)){c=k[q>>2]|0;if((c+b|0)<(e|0))e=e-(ia(k[a+132>>2]|0,d)|0)|0}else{e=(ia(k[a+132>>2]|0,d)|0)+e|0;c=k[q>>2]|0}if((e&c|0)==(e|0)){a=e;a=a&255;return a|0}a=c&~(e>>31);a=a&255;return a|0}function tg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;h=a+112|0;j=a+108|0;l=a+4592|0;e=k[h>>2]|0;f=0;while(1){if((e|0)<1){Xd(a);e=k[h>>2]|0}g=k[j>>2]|0;e=e+-1|0;k[h>>2]=e;k[j>>2]=g<<1;if((g|0)>=0){m=8;break}g=k[l>>2]|0;n=1<<k[36076+(g<<2)>>2];o=d-f|0;o=(n|0)<(o|0)?n:o;f=o+f|0;if((o|0)==(n|0))k[l>>2]=(g|0)>30?31:g+1|0;if((f|0)==(d|0)){e=d;break}}if((m|0)==8)if((f|0)!=(d|0)){e=k[l>>2]|0;if((e+-4|0)>>>0<28)e=Qe(a,k[36076+(e<<2)>>2]|0)|0;else e=0;e=e+f|0;if((e|0)>(d|0)){e=Va(16)|0;if((i[8]|0)==0?(Qa(8)|0)!=0:0){tb(54,35472,w|0)|0;Ya(8)}x=0;Fa(4,e|0,5,35472);o=x;x=0;if(o&1){o=Wa()|0;Ua(e|0);fb(o|0)}else ub(e|0,648,74)}}else e=d;if((e|0)<=0)return e|0;Yt(c|0,b|0,e|0)|0;return e|0}function ug(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=b-c|0;g=a+128|0;d=a+136|0;if((((f|0)>-1?f:0-f|0)|0)>(k[d>>2]|0)){b=ia(vg(a,a+4568|0)|0,c-b>>31|1)|0;e=k[d>>2]|0;f=e<<1|1;b=(ia(b,f)|0)+c|0;if((b|0)>=(0-e|0)){d=k[g>>2]|0;if((d+e|0)<(b|0))b=b-(ia(k[a+132>>2]|0,f)|0)|0}else{b=(ia(k[a+132>>2]|0,f)|0)+b|0;d=k[g>>2]|0}if((b&d|0)==(b|0)){a=b;a=a&255;return a|0}a=d&~(b>>31);a=a&255;return a|0}else{c=vg(a,a+4580|0)|0;f=k[d>>2]|0;e=f<<1|1;b=(ia(e,c)|0)+b|0;if((b|0)>=(0-f|0)){d=k[g>>2]|0;if((d+f|0)<(b|0))b=b-(ia(k[a+132>>2]|0,e)|0)|0}else{b=(ia(k[a+132>>2]|0,e)|0)+b|0;d=k[g>>2]|0}if((b&d|0)==(b|0)){a=b;a=a&255;return a|0}a=d&~(b>>31);a=a&255;return a|0}return 0}function vg(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,m=0;m=b+9|0;c=l[m>>0]|0;f=b+4|0;e=(ia(c>>>1,k[f>>2]|0)|0)+(k[b>>2]|0)|0;if((c|0)<(e|0)){d=0;do{c=c<<1;d=d+1|0}while((c|0)<(e|0))}else d=0;g=k[a+148>>2]|0;h=k[36076+(k[a+4592>>2]<<2)>>2]|0;c=k[a+140>>2]|0;e=Pe(a)|0;do if((e|0)<(g+-2-h-c|0))if(!d){d=k[f>>2]|0;a=d+e|0;c=a&1;a=(c+a|0)/2|0;j=8;break}else{h=(Qe(a,d)|0)+(e<<d)|0;d=k[f>>2]|0;e=h+d|0;g=e&1;c=g;f=1;e=(g+e|0)/2|0;break}else{e=(Qe(a,c)|0)+1|0;g=k[f>>2]|0;a=e+g|0;c=a&1;a=(c+a|0)/2|0;if(!d){d=g;j=8}else{h=e;f=1;e=a;d=g}}while(0);if((j|0)==8){h=e;f=l[b+10>>0]<<1>>>0>=(l[m>>0]|0)>>>0;e=a}e=(c|0)!=0^f?e:0-e|0;if((e|0)<0){j=b+10|0;i[j>>0]=(l[j>>0]|0)+1}c=(h+1-d>>1)+(k[b>>2]|0)|0;k[b>>2]=c;d=i[m>>0]|0;if(d<<24>>24!=(i[b+8>>0]|0)){b=d;b=b&255;b=b+1|0;b=b&255;i[m>>0]=b;return e|0}k[b>>2]=c>>1;j=(d&255)>>>1;i[m>>0]=j;b=b+10|0;i[b>>0]=(l[b>>0]|0)>>>1;b=j;b=b&255;b=b+1|0;b=b&255;i[m>>0]=b;return e|0}function wg(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;o=r;r=r+32|0;d=o;n=a+136|0;a:do if(!(k[n>>2]|0)){c=k[a+128>>2]|0;b=a+144|0;if((((c|0)==((1<<k[b>>2])+-1|0)?(Ag(d,c,0),(k[d+4>>2]|0)==(k[a+176>>2]|0)):0)?(k[d+8>>2]|0)==(k[a+180>>2]|0):0)?(k[d+12>>2]|0)==(k[a+184>>2]|0):0)switch(k[b>>2]|0){case 8:{n=k[8856]|0;k[a+4604>>2]=n+(((k[8857]|0)-n|0)>>>1);r=o;return}case 10:{n=k[8859]|0;k[a+4604>>2]=n+(((k[8860]|0)-n|0)>>>1);r=o;return}case 12:{n=k[8862]|0;k[a+4604>>2]=n+(((k[8863]|0)-n|0)>>>1);r=o;return}case 16:{n=k[8865]|0;k[a+4604>>2]=n+(((k[8866]|0)-n|0)>>>1);r=o;return}default:break a}}else b=a+144|0;while(0);m=1<<k[b>>2];c=a+4608|0;d=m<<1;e=a+4612|0;f=k[e>>2]|0;b=k[c>>2]|0;g=f-b|0;if(d>>>0<=g>>>0){if(d>>>0<g>>>0?(h=b+d|0,(f|0)!=(h|0)):0)k[e>>2]=h}else{Yd(c,d-g|0);b=k[c>>2]|0}l=a+4604|0;k[l>>2]=b+m;b=0-m|0;if((m|0)<=(b|0)){r=o;return}h=a+184|0;j=a+180|0;g=a+176|0;f=b;do{b=k[h>>2]|0;if((f|0)>(0-b|0)){c=k[j>>2]|0;if((f|0)>(0-c|0)){d=k[g>>2]|0;if((f|0)>(0-d|0)){e=k[n>>2]|0;if((f|0)>=(0-e|0))if((e|0)<(f|0))if((d|0)<=(f|0))if((c|0)>(f|0))b=2;else b=(b|0)>(f|0)?3:4;else b=1;else b=0;else b=-1}else b=-2}else b=-3}else b=-4;i[(k[l>>2]|0)+f>>0]=b;f=f+1|0}while((f|0)!=(m|0));r=o;return}function xg(a){a=a|0;Sg(a);return}function yg(a){a=a|0;return 49338}function zg(a,b,c){a=a|0;b=b|0;c=c|0;uk(a,49325,12);return}function Ag(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;k[a+12>>2]=0;e=(b|0)<4095?(b+128|0)/256|0:16;f=(c*3|0)+2+e|0;d=c+1|0;f=(f|0)<(d|0)|(f|0)>(b|0)?d:f;k[a+4>>2]=f;d=(e<<2|3)+(c*5|0)|0;d=(d|0)>(b|0)|(d|0)<(f|0)?f:d;k[a+8>>2]=d;c=(c*7|0)+4+(e*17|0)|0;k[a+12>>2]=(c|0)>(b|0)|(c|0)<(d|0)?d:c;k[a>>2]=b;k[a+16>>2]=64;return}function Bg(a,b){a=a|0;b=b|0;k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];i[a+12>>0]=0;b=a+16|0;a=b+100|0;do{k[b>>2]=0;b=b+4|0}while((b|0)<(a|0));return}function Cg(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0;u=r;r=r+32|0;t=u+4|0;o=u+16|0;v=u;Dg(a);p=a+16|0;e=k[a+24>>2]|0;a:do if((e+-2|0)>>>0<=14){q=a+40|0;c=k[q>>2]|0;if(c>>>0>2)c=5;else{s=a+32|0;f=k[s>>2]|0;switch(f|0){case 0:{c=1;break a}case 4:{if((c|0)==2){c=2;break a}break}case 3:break;default:if(c){c=2;break a}}n=a+100|0;c=a+108|0;d=k[c>>2]|0;if((d|0)<1){d=k[p>>2]|0;k[c>>2]=d;c=k[a+20>>2]|0;k[a+112>>2]=c}else c=k[a+112>>2]|0;j=hu(c|0,((c|0)<0)<<31>>31|0,d|0,((d|0)<0)<<31>>31|0)|0;h=(e+7|0)/8|0;h=hu(j|0,M|0,h|0,((h|0)<0)<<31>>31|0)|0;j=b+4|0;c=k[j>>2]|0;g=b+8|0;if((c|0)!=0?(l=k[g>>2]|0,m=hu(f|0,((f|0)<0)<<31>>31|0,h|0,M|0)|0,e=M,0<(e|0)|0==(e|0)&l>>>0<m>>>0):0){c=Va(16)|0;x=0;d=Da(1)|0;v=x;x=0;if(!(v&1)?(x=0,Fa(4,c|0,3,d|0),v=x,x=0,!(v&1)):0)ub(c|0,648,74);v=Wa()|0;Ua(c|0);fb(v|0)}l=a+52|0;m=a+12|0;if((f|0)>0)f=0;else{r=u;return}while(1){Eg(a,(f|0)==0);d=tc(o,p,l)|0;e=k[(k[d>>2]|0)+8>>2]|0;x=0;k[t>>2]=k[b>>2];k[t+4>>2]=k[b+4>>2];k[t+8>>2]=k[b+8>>2];e=Aa(e|0,d|0,t|0)|0;w=x;x=0;if(w&1){e=32;break}w=k[(k[d>>2]|0)+16>>2]|0;k[v>>2]=e;x=0;oa(w|0,d|0,v|0,n|0,a|0,(i[m>>0]|0)!=0|0);w=x;x=0;if(w&1){e=30;break}e=k[v>>2]|0;k[v>>2]=0;if(e)Lb[k[(k[e>>2]|0)+4>>2]&255](e);if(!c)c=0;else{c=c+h|0;k[j>>2]=c;k[g>>2]=(k[g>>2]|0)-h}e=(k[q>>2]|0)==0;f=(e&1)+f|0;if(d)Lb[k[(k[d>>2]|0)+4>>2]&255](d);if(!e){e=34;break}if((f|0)>=(k[s>>2]|0)){e=34;break}}if((e|0)==30){c=Wa()|0;e=k[v>>2]|0;k[v>>2]=0;if(e)Lb[k[(k[e>>2]|0)+4>>2]&255](e)}else if((e|0)==32){c=Wa()|0;if(!d){w=c;fb(w|0)}}else if((e|0)==34){r=u;return}Lb[k[(k[d>>2]|0)+4>>2]&255](d);w=c;fb(w|0)}}else c=2;while(0);d=Va(16)|0;x=0;e=Da(1)|0;w=x;x=0;if(!(w&1)?(x=0,Fa(4,d|0,c|0,e|0),w=x,x=0,!(w&1)):0)ub(d|0,648,74);w=Wa()|0;Ua(d|0);fb(w|0)}function Dg(a){a=a|0;var b=0,c=0,d=0,e=0;if((Hg(a)|0)<<24>>24!=-40){b=Va(16)|0;x=0;c=Da(1)|0;e=x;x=0;if(!(e&1)?(x=0,Fa(4,b|0,5,c|0),e=x,x=0,!(e&1)):0)ub(b|0,648,74);e=Wa()|0;Ua(b|0);fb(e|0)}b=Hg(a)|0;if(b<<24>>24==-38)return;while(1){d=((Gg(a)|0)&255)<<8;d=d|(Gg(a)|0)&255;b=Ig(a,b)|0;c=-2-b+d|0;if((c|0)<0)break;if((c|0)>0){b=d+-2-b|0;c=0;do{Gg(a)|0;c=c+1|0}while((c|0)!=(b|0))}b=Hg(a)|0;if(b<<24>>24==-38){e=8;break}}if((e|0)==8)return;b=Va(16)|0;x=0;c=Da(1)|0;e=x;x=0;if(!(e&1)?(x=0,Fa(4,b|0,5,c|0),e=x,x=0,!(e&1)):0)ub(b|0,648,74);e=Wa()|0;Ua(b|0);fb(e|0)}function Eg(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;if(!b){if((Gg(a)|0)<<24>>24!=-1){b=Va(16)|0;x=0;c=Da(1)|0;a=x;x=0;if(!(a&1)?(x=0,Fa(4,b|0,12,c|0),a=x,x=0,!(a&1)):0)ub(b|0,648,74);a=Wa()|0;Ua(b|0);fb(a|0)}if((Gg(a)|0)<<24>>24!=-38){b=Va(16)|0;x=0;c=Da(1)|0;a=x;x=0;if(!(a&1)?(x=0,Fa(4,b|0,5,c|0),a=x,x=0,!(a&1)):0)ub(b|0,648,74);a=Wa()|0;Ua(b|0);fb(a|0)}}Gg(a)|0;Gg(a)|0;c=Gg(a)|0;d=c&255;do if(c<<24>>24==1){Gg(a)|0;c=0;e=20}else{if((d|0)==(k[a+32>>2]|0)){b=Gg(a)|0;if(!(c<<24>>24))break;else{c=0;e=20;break}}b=Va(16)|0;x=0;c=Da(1)|0;a=x;x=0;if(!(a&1)?(x=0,Fa(4,b|0,2,c|0),a=x,x=0,!(a&1)):0)ub(b|0,648,74);a=Wa()|0;Ua(b|0);fb(a|0)}while(0);if((e|0)==20)while(1){Gg(a)|0;c=c+1|0;b=Gg(a)|0;if((c|0)==(d|0))break;else e=20}k[a+36>>2]=b&255;e=Gg(a)|0;c=a+40|0;k[c>>2]=e&255;if((e&255)>=3){b=Va(16)|0;x=0;c=Da(1)|0;a=x;x=0;if(!(a&1)?(x=0,Fa(4,b|0,5,c|0),a=x,x=0,!(a&1)):0)ub(b|0,648,74);a=Wa()|0;Ua(b|0);fb(a|0)}if((Gg(a)|0)<<24>>24){b=Va(16)|0;x=0;c=Da(1)|0;a=x;x=0;if(!(a&1)?(x=0,Fa(4,b|0,5,c|0),a=x,x=0,!(a&1)):0)ub(b|0,648,74);a=Wa()|0;Ua(b|0);fb(a|0)}d=a+28|0;if(k[d>>2]|0)return;b=k[a+108>>2]|0;if(!b)b=k[a+16>>2]|0;if(!(k[c>>2]|0))c=1;else c=k[a+32>>2]|0;e=ia(c,b)|0;a=ia(e,((k[a+24>>2]|0)+7|0)/8|0)|0;k[d>>2]=a;return}function Fg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;if((c|0)<=0)return;n=b+4|0;o=b+8|0;q=0;do{p=Gg(a)|0;d=k[n>>2]|0;e=k[o>>2]|0;if(d>>>0>=e>>>0){f=k[b>>2]|0;g=f;h=d-g+1|0;if((h|0)<0){Pg(b);g=k[b>>2]|0;e=k[o>>2]|0;f=g}m=f;d=e-m|0;if(d>>>0<1073741823){d=d<<1;d=d>>>0<h>>>0?h:d;h=k[n>>2]|0;e=h-m|0;if(!d){l=0;j=0;d=h}else r=10}else{e=k[n>>2]|0;d=2147483647;h=e;e=e-m|0;r=10}if((r|0)==10){r=0;l=d;j=Rg(d)|0;d=h}i[j+e>>0]=p;m=d-m|0;p=j+(e-m)|0;$t(p|0,f|0,m|0)|0;k[b>>2]=p;k[n>>2]=j+(e+1);k[o>>2]=j+l;if(g)Sg(g)}else{i[d>>0]=p;k[n>>2]=(k[n>>2]|0)+1}q=q+1|0}while((q|0)!=(c|0));return}function Gg(a){a=a|0;var b=0,c=0,d=0,e=0;c=k[a>>2]|0;if(c){a=c+12|0;b=k[a>>2]|0;if((b|0)==(k[c+16>>2]|0))a=Ob[k[(k[c>>2]|0)+40>>2]&127](c)|0;else{k[a>>2]=b+1;a=l[b>>0]|0}e=a&255;return e|0}d=a+8|0;e=k[d>>2]|0;if(e){a=a+4|0;b=k[a>>2]|0;c=i[b>>0]|0;if(!b){e=c;return e|0}k[a>>2]=b+1;k[d>>2]=e+-1;e=c;return e|0}a=Va(16)|0;x=0;b=Da(1)|0;e=x;x=0;if(e&1){e=Wa()|0;Ua(a|0);fb(e|0)}x=0;Fa(4,a|0,4,b|0);e=x;x=0;if(e&1){e=Wa()|0;Ua(a|0);fb(e|0)}else ub(a|0,648,74);return 0}function Hg(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0;c=r;r=r+176|0;b=c+152|0;i=c+16|0;g=c;h=Gg(a)|0;d=h&255;if(h<<24>>24==-1){do b=Gg(a)|0;while(b<<24>>24==-1);r=c;return b|0}h=i+56|0;f=i+4|0;k[i>>2]=35760;k[h>>2]=35780;x=0;ra(52,i+56|0,f|0);e=x;x=0;if(e&1){i=Wa()|0;Vk(h);fb(i|0)}k[i+128>>2]=0;k[i+132>>2]=-1;k[i>>2]=35800;k[i+56>>2]=35820;x=0;qa(158,f|0);e=x;x=0;do if(e&1)b=Wa()|0;else{k[f>>2]=35836;e=i+36|0;k[e>>2]=0;k[e+4>>2]=0;k[e+8>>2]=0;k[e+12>>2]=0;k[i+52>>2]=16;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;x=0;ra(53,f|0,b|0);c=x;x=0;if(c&1){i=Wa()|0;wk(b);wk(e);al(f);b=i;break}wk(b);k[i+((k[(k[i>>2]|0)+-12>>2]|0)+76)>>2]=48;x=0;b=va(28,i|0,49363,62)|0;c=x;x=0;if(!(c&1)?(c=b+((k[(k[b>>2]|0)+-12>>2]|0)+4)|0,k[c>>2]=k[c>>2]&-75|8,c=b+((k[(k[b>>2]|0)+-12>>2]|0)+4)|0,k[c>>2]=k[c>>2]|16384,k[b+((k[(k[b>>2]|0)+-12>>2]|0)+12)>>2]=2,x=0,Aa(28,b|0,d|0)|0,d=x,x=0,!(d&1)):0){c=Va(16)|0;x=0;ra(54,g|0,f|0);d=x;x=0;if(!(d&1)){x=0;b=Da(1)|0;d=x;x=0;if(!(d&1)?(x=0,Ja(35,c|0,12,b|0,g|0),d=x,x=0,!(d&1)):0){x=0;Fa(5,c|0,648,74);x=0;a=0}else a=1;b=Wa()|0;wk(g);if(!a){g=b;k[i>>2]=35800;k[h>>2]=35820;k[f>>2]=35836;wk(e);al(f);Vk(h);fb(g|0)}}else b=Wa()|0;Ua(c|0);g=b;k[i>>2]=35800;k[h>>2]=35820;k[f>>2]=35836;wk(e);al(f);Vk(h);fb(g|0)}g=Wa()|0;k[i>>2]=35800;k[h>>2]=35820;k[f>>2]=35836;wk(e);al(f);Vk(h);fb(g|0)}while(0);i=b;Vk(h);fb(i|0);return 0}function Ig(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0;c=r;r=r+320|0;h=c+300|0;l=c+152|0;i=c+288|0;m=c+16|0;j=c;switch(b<<24>>24){case -9:{n=(Gg(a)|0)&255;k[a+24>>2]=n;n=((Gg(a)|0)&255)<<8|(Gg(a)|0)&255;m=((Gg(a)|0)&255)<<8|(Gg(a)|0)&255;k[a+16>>2]=m;k[a+20>>2]=n;n=(Gg(a)|0)&255;k[a+32>>2]=n;n=6;r=c;return n|0}case -8:{n=Jg(a)|0;r=c;return n|0}case -24:{n=Kg(a)|0;r=c;return n|0}case -53:case -54:case -55:case -57:case -58:case -59:case -61:case -62:case -63:case -64:{g=l+56|0;e=l+4|0;k[l>>2]=35760;k[g>>2]=35780;x=0;ra(52,l+56|0,e|0);m=x;x=0;if(m&1){n=Wa()|0;Vk(g);fb(n|0)}k[l+128>>2]=0;k[l+132>>2]=-1;k[l>>2]=35800;k[l+56>>2]=35820;x=0;qa(158,e|0);m=x;x=0;do if(m&1)a=Wa()|0;else{k[e>>2]=35836;f=l+36|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=0;k[f+12>>2]=0;k[l+52>>2]=16;k[h>>2]=0;k[h+4>>2]=0;k[h+8>>2]=0;x=0;ra(53,e|0,h|0);m=x;x=0;if(m&1){a=Wa()|0;wk(h);wk(f);al(e);break}wk(h);x=0;a=va(28,l|0,49426,26)|0;m=x;x=0;do if((!(m&1)?(x=0,d=Aa(28,a|0,b&255|0)|0,m=x,x=0,!(m&1)):0)?(x=0,va(28,d|0,49453,18)|0,m=x,x=0,!(m&1)):0){d=Va(16)|0;x=0;ra(54,i|0,e|0);m=x;x=0;if(!(m&1)){x=0;a=Da(1)|0;m=x;x=0;if(!(m&1)?(x=0,Ja(35,d|0,10,a|0,i|0),m=x,x=0,!(m&1)):0){x=0;Fa(5,d|0,648,74);x=0;c=0}else c=1;a=Wa()|0;wk(i);if(!c)break}else a=Wa()|0;Ua(d|0)}else n=20;while(0);if((n|0)==20)a=Wa()|0;k[l>>2]=35800;k[g>>2]=35820;k[e>>2]=35836;wk(f);al(e);Vk(g);n=a;fb(n|0)}while(0);n=a;Vk(g);fb(n|0)}case -25:case -32:case -2:{n=0;r=c;return n|0}default:{i=m+56|0;f=m+4|0;k[m>>2]=35760;k[i>>2]=35780;x=0;ra(52,m+56|0,f|0);l=x;x=0;if(l&1){n=Wa()|0;Vk(i);fb(n|0)}k[m+128>>2]=0;k[m+132>>2]=-1;k[m>>2]=35800;k[m+56>>2]=35820;x=0;qa(158,f|0);l=x;x=0;do if(l&1)a=Wa()|0;else{k[f>>2]=35836;g=m+36|0;k[g>>2]=0;k[g+4>>2]=0;k[g+8>>2]=0;k[g+12>>2]=0;k[m+52>>2]=16;k[h>>2]=0;k[h+4>>2]=0;k[h+8>>2]=0;x=0;ra(53,f|0,h|0);l=x;x=0;if(l&1){a=Wa()|0;wk(h);wk(g);al(f);break}wk(h);x=0;a=va(28,m|0,49472,20)|0;l=x;x=0;do if((!(l&1)?(x=0,e=Aa(28,a|0,b&255|0)|0,l=x,x=0,!(l&1)):0)?(x=0,va(28,e|0,49493,13)|0,l=x,x=0,!(l&1)):0){d=Va(16)|0;x=0;ra(54,j|0,f|0);l=x;x=0;if(!(l&1)){x=0;a=Da(1)|0;l=x;x=0;if(!(l&1)?(x=0,Ja(35,d|0,11,a|0,j|0),l=x,x=0,!(l&1)):0){x=0;Fa(5,d|0,648,74);x=0;c=0}else c=1;a=Wa()|0;wk(j);if(!c)break}else a=Wa()|0;Ua(d|0)}else n=40;while(0);if((n|0)==40)a=Wa()|0;k[m>>2]=35800;k[i>>2]=35820;k[f>>2]=35836;wk(g);al(f);Vk(i);n=a;fb(n|0)}while(0);n=a;Vk(i);fb(n|0)}}return 0}function Jg(a){a=a|0;var b=0;if((Gg(a)|0)<<24>>24!=1){a=1;return a|0}b=((Gg(a)|0)&255)<<8;b=b|(Gg(a)|0)&255;k[a+52>>2]=b;b=((Gg(a)|0)&255)<<8;b=b|(Gg(a)|0)&255;k[a+56>>2]=b;b=((Gg(a)|0)&255)<<8;b=b|(Gg(a)|0)&255;k[a+60>>2]=b;b=((Gg(a)|0)&255)<<8;b=b|(Gg(a)|0)&255;k[a+64>>2]=b;b=((Gg(a)|0)&255)<<8;b=b|(Gg(a)|0)&255;k[a+68>>2]=b;a=11;return a|0}
function ak(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0;s=r;r=r+32|0;q=s+16|0;p=s+8|0;m=s+4|0;n=s;e=a+52|0;a:do if(i[e>>0]|0){d=a+48|0;c=k[d>>2]|0;if(b){k[d>>2]=-1;i[e>>0]=0}}else{c=k[a+44>>2]|0;c=(c|0)>1?c:1;o=a+32|0;if((c|0)>0){e=0;do{d=Ni(k[o>>2]|0)|0;if((d|0)==-1){c=-1;break a}i[q+e>>0]=d;e=e+1|0}while((e|0)<(c|0))}b:do if(!(i[a+53>>0]|0)){g=a+40|0;h=a+36|0;j=p+1|0;c:while(1){t=k[g>>2]|0;e=t;d=k[e>>2]|0;e=k[e+4>>2]|0;u=k[h>>2]|0;f=q+c|0;switch(ac[k[(k[u>>2]|0)+16>>2]&15](u,t,q,f,m,p,j,n)|0){case 2:{c=-1;break a}case 3:break c;case 1:break;default:break b}u=k[g>>2]|0;k[u>>2]=d;k[u+4>>2]=e;if((c|0)==8){c=-1;break a}d=Ni(k[o>>2]|0)|0;if((d|0)==-1){c=-1;break a}i[f>>0]=d;c=c+1|0}i[p>>0]=i[q>>0]|0}else i[p>>0]=i[q>>0]|0;while(0);if(b){c=i[p>>0]|0;k[a+48>>2]=c&255}else{while(1){if((c|0)<=0)break;c=c+-1|0;if((Qi(l[q+c>>0]|0,k[o>>2]|0)|0)==-1){c=-1;break a}}c=i[p>>0]|0}c=c&255}while(0);r=s;return c|0}function bk(a){a=a|0;return}function ck(a){a=a|0;a=a+4|0;k[a>>2]=(k[a>>2]|0)+1;return}function dk(a){a=a|0;var b=0,c=0;c=a+4|0;b=k[c>>2]|0;k[c>>2]=b+-1;if(!b){Lb[k[(k[a>>2]|0)+8>>2]&255](a);a=1}else a=0;return a|0}function ek(a,b){a=a|0;b=b|0;k[a>>2]=36400;x=0;ra(65,a+4|0,((i[b>>0]&1)==0?b+1|0:k[b+8>>2]|0)|0);a=x;x=0;if(a&1){a=Wa()|0;fb(a|0)}else return}function fk(a,b){a=a|0;b=b|0;k[a>>2]=36400;x=0;ra(65,a+4|0,b|0);a=x;x=0;if(a&1){a=Wa()|0;fb(a|0)}else return}function gk(a,b){a=a|0;b=b|0;var c=0,d=0;d=bj(b)|0;c=Rg(d+13|0)|0;k[c>>2]=d;k[c+4>>2]=d;k[c+8>>2]=0;c=c+12|0;$t(c|0,b|0,d+1|0)|0;k[a>>2]=c;return}function hk(a,b,c){a=a|0;b=b|0;c=c|0;k[a>>2]=c;k[a+4>>2]=b;return}function ik(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=r;r=r+16|0;d=e;_b[k[(k[a>>2]|0)+12>>2]&15](d,a,b);if((k[d+4>>2]|0)==(k[c+4>>2]|0))d=(k[d>>2]|0)==(k[c>>2]|0);else d=0;r=e;return d|0}function jk(a,b,c){a=a|0;b=b|0;c=c|0;return ((k[b>>2]|0)==(c|0)?(k[b+4>>2]|0)==(a|0):0)|0}function kk(a,b,c){a=a|0;b=b|0;c=c|0;b=Th(c)|0;uk(a,b,bj(b)|0);return}function lk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;g=r;r=r+16|0;f=g;d=k[b>>2]|0;do if(d){e=i[c>>0]|0;if(!(e&1))e=(e&255)>>>1;else e=k[c+4>>2]|0;if(e){Dk(c,55446)|0;d=k[b>>2]|0}b=k[b+4>>2]|0;_b[k[(k[b>>2]|0)+24>>2]&15](f,b,d);b=i[f>>0]|0;e=(b&1)==0;x=0;va(30,c|0,(e?f+1|0:k[f+8>>2]|0)|0,(e?(b&255)>>>1:k[f+4>>2]|0)|0)|0;b=x;x=0;if(b&1){g=Wa()|0;wk(f);fb(g|0)}else{wk(f);break}}while(0);k[a>>2]=k[c>>2];k[a+4>>2]=k[c+4>>2];k[a+8>>2]=k[c+8>>2];k[c>>2]=0;k[c+4>>2]=0;k[c+8>>2]=0;r=g;return}function mk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;e=r;r=r+32|0;d=e+12|0;f=e;uk(f,c,bj(c)|0);x=0;Fa(8,d|0,b|0,f|0);c=x;x=0;do if(!(c&1)){x=0;ra(66,a|0,d|0);c=x;x=0;if(c&1){e=Wa()|0;wk(d);d=e;break}else{wk(d);wk(f);k[a>>2]=42196;c=k[b+4>>2]|0;f=a+8|0;k[f>>2]=k[b>>2];k[f+4>>2]=c;r=e;return}}else d=Wa()|0;while(0);wk(f);fb(d|0)}function nk(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;f=r;r=r+48|0;e=f+24|0;h=f+16|0;g=f;k[h>>2]=b;k[h+4>>2]=c;tk(g,d);x=0;Fa(8,e|0,h|0,g|0);d=x;x=0;do if(!(d&1)){x=0;ra(66,a|0,e|0);h=x;x=0;if(h&1){h=Wa()|0;wk(e);e=h;break}else{wk(e);wk(g);k[a>>2]=42196;k[a+8>>2]=b;k[a+12>>2]=c;r=f;return}}else e=Wa()|0;while(0);wk(g);fb(e|0)}function ok(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;e=r;r=r+48|0;d=e+24|0;g=e+16|0;f=e;k[g>>2]=b;k[g+4>>2]=c;uk(f,57354,0);x=0;Fa(8,d|0,g|0,f|0);g=x;x=0;do if(!(g&1)){x=0;ra(66,a|0,d|0);g=x;x=0;if(g&1){g=Wa()|0;wk(d);d=g;break}else{wk(d);wk(f);k[a>>2]=42196;k[a+8>>2]=b;k[a+12>>2]=c;r=e;return}}else d=Wa()|0;while(0);wk(f);fb(d|0)}function pk(a){a=a|0;ah(a);return}function qk(a){a=a|0;ah(a);Sg(a);return}function rk(a){a=a|0;return}function sk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;Ab(42208)|0;if((k[a>>2]|0)==1)do Ma(42236,42208)|0;while((k[a>>2]|0)==1);do if(!(k[a>>2]|0)){k[a>>2]=1;x=0;ta(71,42208)|0;d=x;x=0;if((((!(d&1)?(x=0,qa(c|0,b|0),d=x,x=0,!(d&1)):0)?(x=0,ta(72,42208)|0,d=x,x=0,!(d&1)):0)?(k[a>>2]=-1,x=0,ta(71,42208)|0,d=x,x=0,!(d&1)):0)?(x=0,ta(73,42236)|0,d=x,x=0,!(d&1)):0)break;d=Wa(0)|0;cb(d|0)|0;x=0;ta(72,42208)|0;d=x;x=0;if((!(d&1)?(k[a>>2]=0,x=0,ta(71,42208)|0,d=x,x=0,!(d&1)):0)?(x=0,ta(73,42236)|0,d=x,x=0,!(d&1)):0){x=0;Ga(5);x=0}b=Wa()|0;x=0;Ga(3);d=x;x=0;if(d&1){d=Wa(0)|0;mc(d)}else fb(b|0)}else lb(42208)|0;while(0);return}function tk(a,b){a=a|0;b=b|0;if(!(i[b>>0]&1)){k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2]}else uk(a,k[b+8>>2]|0,k[b+4>>2]|0);return}function uk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;if(c>>>0>4294967279)Og(a);if(c>>>0<11){i[a>>0]=c<<1;a=a+1|0}else{e=c+16&-16;d=Rg(e)|0;k[a+8>>2]=d;k[a>>2]=e|1;k[a+4>>2]=c;a=d}$t(a|0,b|0,c|0)|0;i[a+c>>0]=0;return}function vk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;if(b>>>0>4294967279)Og(a);if(b>>>0<11){i[a>>0]=b<<1;a=a+1|0}else{e=b+16&-16;d=Rg(e)|0;k[a+8>>2]=d;k[a>>2]=e|1;k[a+4>>2]=b;a=d}Yt(a|0,c|0,b|0)|0;i[a+b>>0]=0;return}function wk(a){a=a|0;if(i[a>>0]&1)Sg(k[a+8>>2]|0);return}function xk(a,b){a=a|0;b=b|0;var c=0,d=0;if((a|0)!=(b|0)){c=i[b>>0]|0;d=(c&1)==0;zk(a,d?b+1|0:k[b+8>>2]|0,d?(c&255)>>>1:k[b+4>>2]|0)|0}return a|0}function yk(a,b){a=a|0;b=b|0;return zk(a,b,bj(b)|0)|0}function zk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;d=i[a>>0]|0;if(!(d&1))f=10;else{d=k[a>>2]|0;f=(d&-2)+-1|0;d=d&255}e=(d&1)==0;do if(f>>>0>=c>>>0){if(e)d=a+1|0;else d=k[a+8>>2]|0;bu(d|0,b|0,c|0)|0;i[d+c>>0]=0;if(!(i[a>>0]&1)){i[a>>0]=c<<1;break}else{k[a+4>>2]=c;break}}else{if(e)d=(d&255)>>>1;else d=k[a+4>>2]|0;Gk(a,f,c-f|0,d,0,d,c,b)}while(0);return a|0}function Ak(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=i[a>>0]|0;e=(d&1)==0;if(e)d=(d&255)>>>1;else d=k[a+4>>2]|0;do if(d>>>0>=b>>>0)if(e){i[a+1+b>>0]=0;i[a>>0]=b<<1;break}else{i[(k[a+8>>2]|0)+b>>0]=0;k[a+4>>2]=b;break}else Bk(a,b-d|0,c)|0;while(0);return}function Bk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;if(b){d=i[a>>0]|0;if(!(d&1))e=10;else{d=k[a>>2]|0;e=(d&-2)+-1|0;d=d&255}if(!(d&1))f=(d&255)>>>1;else f=k[a+4>>2]|0;if((e-f|0)>>>0<b>>>0){Hk(a,e,b-e+f|0,f,f,0,0);d=i[a>>0]|0}if(!(d&1))e=a+1|0;else e=k[a+8>>2]|0;Yt(e+f|0,c|0,b|0)|0;d=f+b|0;if(!(i[a>>0]&1))i[a>>0]=d<<1;else k[a+4>>2]=d;i[e+d>>0]=0}return a|0}function Ck(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;if(b>>>0>4294967279)Og(a);c=i[a>>0]|0;if(!(c&1))d=10;else{c=k[a>>2]|0;d=(c&-2)+-1|0;c=c&255}if(!(c&1))h=(c&255)>>>1;else h=k[a+4>>2]|0;b=h>>>0>b>>>0?h:b;if(b>>>0<11)g=10;else g=(b+16&-16)+-1|0;a:do if((g|0)!=(d|0)){do if((g|0)!=10){b=g+1|0;if(g>>>0<=d>>>0){x=0;b=ta(66,b|0)|0;f=x;x=0;if(f&1){a=Wa(0)|0;cb(a|0)|0;eb();break a}}else b=Rg(b)|0;if(!(c&1)){d=1;e=a+1|0;f=0;break}else{d=1;e=k[a+8>>2]|0;f=1;break}}else{b=a+1|0;d=0;e=k[a+8>>2]|0;f=1}while(0);if(!(c&1))c=(c&255)>>>1;else c=k[a+4>>2]|0;$t(b|0,e|0,c+1|0)|0;if(f)Sg(e);if(d){k[a>>2]=g+1|1;k[a+4>>2]=h;k[a+8>>2]=b;break}else{i[a>>0]=h<<1;break}}while(0);return}function Dk(a,b){a=a|0;b=b|0;return Fk(a,b,bj(b)|0)|0}function Ek(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=i[a>>0]|0;d=(c&1)!=0;if(d){e=(k[a>>2]&-2)+-1|0;f=k[a+4>>2]|0}else{e=10;f=(c&255)>>>1}if((f|0)==(e|0)){Hk(a,e,1,e,e,0,0);if(!(i[a>>0]&1))e=7;else e=8}else if(d)e=8;else e=7;if((e|0)==7){i[a>>0]=(f<<1)+2;c=a+1|0;d=f+1|0}else if((e|0)==8){c=k[a+8>>2]|0;d=f+1|0;k[a+4>>2]=d}i[c+f>>0]=b;i[c+d>>0]=0;return}function Fk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;d=i[a>>0]|0;if(!(d&1))e=10;else{d=k[a>>2]|0;e=(d&-2)+-1|0;d=d&255}if(!(d&1))f=(d&255)>>>1;else f=k[a+4>>2]|0;if((e-f|0)>>>0>=c>>>0){if(c){if(!(d&1))e=a+1|0;else e=k[a+8>>2]|0;$t(e+f|0,b|0,c|0)|0;d=f+c|0;if(!(i[a>>0]&1))i[a>>0]=d<<1;else k[a+4>>2]=d;i[e+d>>0]=0}}else Gk(a,e,c-e+f|0,f,f,0,c,b);return a|0}function Gk(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,l=0,m=0;if((-18-b|0)>>>0<c>>>0)Og(a);if(!(i[a>>0]&1))m=a+1|0;else m=k[a+8>>2]|0;if(b>>>0<2147483623){j=c+b|0;l=b<<1;j=j>>>0<l>>>0?l:j;j=j>>>0<11?11:j+16&-16}else j=-17;l=Rg(j)|0;if(e)$t(l|0,m|0,e|0)|0;if(g)$t(l+e|0,h|0,g|0)|0;c=d-f|0;if((c|0)!=(e|0))$t(l+(g+e)|0,m+(f+e)|0,c-e|0)|0;if((b|0)!=10)Sg(m);k[a+8>>2]=l;k[a>>2]=j|1;b=c+g|0;k[a+4>>2]=b;i[l+b>>0]=0;return}function Hk(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,l=0;if((-17-b|0)>>>0<c>>>0)Og(a);if(!(i[a>>0]&1))l=a+1|0;else l=k[a+8>>2]|0;if(b>>>0<2147483623){h=c+b|0;j=b<<1;h=h>>>0<j>>>0?j:h;h=h>>>0<11?11:h+16&-16}else h=-17;j=Rg(h)|0;if(e)$t(j|0,l|0,e|0)|0;c=d-f|0;if((c|0)!=(e|0))$t(j+(g+e)|0,l+(f+e)|0,c-e|0)|0;if((b|0)!=10)Sg(l);k[a+8>>2]=j;k[a>>2]=h|1;return}function Ik(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;if(c>>>0>1073741807)Og(a);if(c>>>0<2){i[a>>0]=c<<1;a=a+4|0}else{e=c+4&-4;d=Rg(e<<2)|0;k[a+8>>2]=d;k[a>>2]=e|1;k[a+4>>2]=c;a=d}ej(a,b,c)|0;k[a+(c<<2)>>2]=0;return}function Jk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;if(b>>>0>1073741807)Og(a);if(b>>>0<2){i[a>>0]=b<<1;a=a+4|0}else{e=b+4&-4;d=Rg(e<<2)|0;k[a+8>>2]=d;k[a>>2]=e|1;k[a+4>>2]=b;a=d}gj(a,c,b)|0;k[a+(b<<2)>>2]=0;return}function Kk(a){a=a|0;if(i[a>>0]&1)Sg(k[a+8>>2]|0);return}function Lk(a,b){a=a|0;b=b|0;return Mk(a,b,dj(b)|0)|0}function Mk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;d=i[a>>0]|0;if(!(d&1))f=1;else{d=k[a>>2]|0;f=(d&-2)+-1|0;d=d&255}e=(d&1)==0;do if(f>>>0>=c>>>0){if(e)d=a+4|0;else d=k[a+8>>2]|0;fj(d,b,c)|0;k[d+(c<<2)>>2]=0;if(!(i[a>>0]&1)){i[a>>0]=c<<1;break}else{k[a+4>>2]=c;break}}else{if(e)d=(d&255)>>>1;else d=k[a+4>>2]|0;Pk(a,f,c-f|0,d,0,d,c,b)}while(0);return a|0}function Nk(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;if(b>>>0>1073741807)Og(a);c=i[a>>0]|0;if(!(c&1))d=1;else{c=k[a>>2]|0;d=(c&-2)+-1|0;c=c&255}if(!(c&1))h=(c&255)>>>1;else h=k[a+4>>2]|0;b=h>>>0>b>>>0?h:b;if(b>>>0<2)g=1;else g=(b+4&-4)+-1|0;a:do if((g|0)!=(d|0)){do if((g|0)!=1){b=(g<<2)+4|0;if(g>>>0<=d>>>0){x=0;b=ta(66,b|0)|0;f=x;x=0;if(f&1){a=Wa(0)|0;cb(a|0)|0;eb();break a}}else b=Rg(b)|0;if(!(c&1)){d=1;e=a+4|0;f=0;break}else{d=1;e=k[a+8>>2]|0;f=1;break}}else{b=a+4|0;d=0;e=k[a+8>>2]|0;f=1}while(0);if(!(c&1))c=(c&255)>>>1;else c=k[a+4>>2]|0;ej(b,e,c+1|0)|0;if(f)Sg(e);if(d){k[a>>2]=g+1|1;k[a+4>>2]=h;k[a+8>>2]=b;break}else{i[a>>0]=h<<1;break}}while(0);return}function Ok(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=i[a>>0]|0;d=(c&1)!=0;if(d){e=(k[a>>2]&-2)+-1|0;f=k[a+4>>2]|0}else{e=1;f=(c&255)>>>1}if((f|0)==(e|0)){Qk(a,e,1,e,e,0,0);if(!(i[a>>0]&1))e=7;else e=8}else if(d)e=8;else e=7;if((e|0)==7){i[a>>0]=(f<<1)+2;c=a+4|0;d=f+1|0}else if((e|0)==8){c=k[a+8>>2]|0;d=f+1|0;k[a+4>>2]=d}k[c+(f<<2)>>2]=b;k[c+(d<<2)>>2]=0;return}function Pk(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,l=0,m=0;if((1073741806-b|0)>>>0<c>>>0)Og(a);if(!(i[a>>0]&1))m=a+4|0;else m=k[a+8>>2]|0;if(b>>>0<536870887){j=c+b|0;l=b<<1;j=j>>>0<l>>>0?l:j;j=j>>>0<2?2:j+4&-4}else j=1073741807;l=Rg(j<<2)|0;if(e)ej(l,m,e)|0;if(g)ej(l+(e<<2)|0,h,g)|0;c=d-f|0;if((c|0)!=(e|0))ej(l+(g+e<<2)|0,m+(f+e<<2)|0,c-e|0)|0;if((b|0)!=1)Sg(m);k[a+8>>2]=l;k[a>>2]=j|1;b=c+g|0;k[a+4>>2]=b;k[l+(b<<2)>>2]=0;return}function Qk(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,l=0;if((1073741807-b|0)>>>0<c>>>0)Og(a);if(!(i[a>>0]&1))l=a+4|0;else l=k[a+8>>2]|0;if(b>>>0<536870887){h=c+b|0;j=b<<1;h=h>>>0<j>>>0?j:h;h=h>>>0<2?2:h+4&-4}else h=1073741807;j=Rg(h<<2)|0;if(e)ej(j,l,e)|0;c=d-f|0;if((c|0)!=(e|0))ej(j+(g+e<<2)|0,l+(f+e<<2)|0,c-e|0)|0;if((b|0)!=1)Sg(l);k[a+8>>2]=j;k[a>>2]=h|1;return}function Rk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;e=b;d=c-e|0;if(d>>>0>4294967279)Og(a);if(d>>>0<11){i[a>>0]=d<<1;f=a+1|0}else{g=d+16&-16;f=Rg(g)|0;k[a+8>>2]=f;k[a>>2]=g|1;k[a+4>>2]=d}a=c-e|0;if((b|0)!=(c|0)){d=f;while(1){i[d>>0]=i[b>>0]|0;b=b+1|0;if((b|0)==(c|0))break;else d=d+1|0}}i[f+a>>0]=0;return}function Sk(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=b;d=c-f|0;e=d>>2;if(e>>>0>1073741807)Og(a);if(e>>>0<2){i[a>>0]=d>>>1;a=a+4|0}else{g=e+4&-4;d=Rg(g<<2)|0;k[a+8>>2]=d;k[a>>2]=g|1;k[a+4>>2]=e;a=d}e=(c-f|0)>>>2;if((b|0)!=(c|0)){d=a;while(1){k[d>>2]=k[b>>2];b=b+4|0;if((b|0)==(c|0))break;else d=d+4|0}}k[a+(e<<2)>>2]=0;return}function Tk(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=r;r=r+16|0;d=c;e=(k[a+24>>2]|0)==0;k[a+16>>2]=e&1|b;if(!((e&1|b)&k[a+20>>2])){r=c;return}b=Va(16)|0;em()|0;k[d>>2]=1;k[d+4>>2]=42644;x=0;Fa(9,b|0,55893,d|0);e=x;x=0;if(e&1){e=Wa()|0;Ua(b|0);fb(e|0)}else ub(b|0,688,90)}function Uk(a){a=a|0;var b=0;k[a>>2]=42600;x=0;ra(67,a|0,0);b=x;x=0;if(b&1){b=Wa(0)|0;mc(b)}else{uq(a+28|0);uj(k[a+32>>2]|0);uj(k[a+36>>2]|0);uj(k[a+48>>2]|0);uj(k[a+60>>2]|0);return}}function Vk(a){a=a|0;Uk(a);return}function Wk(a){a=a|0;Uk(a);Sg(a);return}function Xk(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=k[a+40>>2]|0;d=a+32|0;e=a+36|0;if(c)do{c=c+-1|0;_b[k[(k[d>>2]|0)+(c<<2)>>2]&15](b,a,k[(k[e>>2]|0)+(c<<2)>>2]|0)}while((c|0)!=0);return}function Yk(a){a=a|0;var b=0,c=0;c=r;r=r+16|0;b=c;tq(b,a+28|0);r=c;return k[b>>2]|0}function Zk(a,b){a=a|0;b=b|0;var c=0;k[a+24>>2]=b;k[a+16>>2]=(b|0)==0&1;k[a+20>>2]=0;k[a+4>>2]=4098;k[a+12>>2]=0;k[a+8>>2]=6;c=a+28|0;b=a+32|0;a=b+40|0;do{k[b>>2]=0;b=b+4|0}while((b|0)<(a|0));sq(c);return}function _k(a){a=a|0;Uk(a);return}function $k(a){a=a|0;Uk(a);Sg(a);return}function al(a){a=a|0;k[a>>2]=42292;uq(a+4|0);return}function bl(a){a=a|0;k[a>>2]=42292;uq(a+4|0);Sg(a);return}function cl(a){a=a|0;k[a>>2]=42292;sq(a+4|0);a=a+8|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;k[a+12>>2]=0;k[a+16>>2]=0;k[a+20>>2]=0;return}function dl(a,b){a=a|0;b=b|0;return}function el(a,b,c){a=a|0;b=b|0;c=c|0;return a|0}function fl(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;b=a;k[b>>2]=0;k[b+4>>2]=0;b=a+8|0;k[b>>2]=-1;k[b+4>>2]=-1;return}function gl(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;b=a;k[b>>2]=0;k[b+4>>2]=0;b=a+8|0;k[b>>2]=-1;k[b+4>>2]=-1;return}function hl(a){a=a|0;return 0}function il(a){a=a|0;return 0}function jl(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=a+12|0;g=a+16|0;a:do if((c|0)>0){e=b;b=0;while(1){d=k[f>>2]|0;if(d>>>0<(k[g>>2]|0)>>>0){k[f>>2]=d+1;d=i[d>>0]|0}else{d=Ob[k[(k[a>>2]|0)+40>>2]&127](a)|0;if((d|0)==-1)break a;d=d&255}i[e>>0]=d;b=b+1|0;if((b|0)<(c|0))e=e+1|0;else break}}else b=0;while(0);return b|0}function kl(a){a=a|0;return -1}function ll(a){a=a|0;var b=0;if((Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0)==-1)a=-1;else{b=a+12|0;a=k[b>>2]|0;k[b>>2]=a+1;a=l[a>>0]|0}return a|0}function ml(a,b){a=a|0;b=b|0;return -1}function nl(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;f=a+24|0;g=a+28|0;a:do if((c|0)>0){e=b;b=0;while(1){d=k[f>>2]|0;if(d>>>0>=(k[g>>2]|0)>>>0){if((Vb[k[(k[a>>2]|0)+52>>2]&63](a,l[e>>0]|0)|0)==-1)break a}else{h=i[e>>0]|0;k[f>>2]=d+1;i[d>>0]=h}b=b+1|0;if((b|0)<(c|0))e=e+1|0;else break}}else b=0;while(0);return b|0}function ol(a,b){a=a|0;b=b|0;return -1}function pl(a){a=a|0;k[a>>2]=42356;uq(a+4|0);return}function ql(a){a=a|0;k[a>>2]=42356;uq(a+4|0);Sg(a);return}function rl(a){a=a|0;k[a>>2]=42356;sq(a+4|0);a=a+8|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;k[a+12>>2]=0;k[a+16>>2]=0;k[a+20>>2]=0;return}function sl(a,b){a=a|0;b=b|0;return}function tl(a,b,c){a=a|0;b=b|0;c=c|0;return a|0}function ul(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;b=a;k[b>>2]=0;k[b+4>>2]=0;b=a+8|0;k[b>>2]=-1;k[b+4>>2]=-1;return}function vl(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;b=a;k[b>>2]=0;k[b+4>>2]=0;b=a+8|0;k[b>>2]=-1;k[b+4>>2]=-1;return}function wl(a){a=a|0;return 0}function xl(a){a=a|0;return 0}function yl(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=a+12|0;g=a+16|0;a:do if((c|0)>0){e=b;b=0;while(1){d=k[f>>2]|0;if(d>>>0>=(k[g>>2]|0)>>>0){d=Ob[k[(k[a>>2]|0)+40>>2]&127](a)|0;if((d|0)==-1)break a}else{k[f>>2]=d+4;d=k[d>>2]|0}k[e>>2]=d;b=b+1|0;if((b|0)<(c|0))e=e+4|0;else break}}else b=0;while(0);return b|0}function zl(a){a=a|0;return -1}function Al(a){a=a|0;var b=0;if((Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0)==-1)a=-1;else{b=a+12|0;a=k[b>>2]|0;k[b>>2]=a+4;a=k[a>>2]|0}return a|0}function Bl(a,b){a=a|0;b=b|0;return -1}function Cl(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;f=a+24|0;g=a+28|0;a:do if((c|0)>0){e=b;b=0;while(1){d=k[f>>2]|0;if(d>>>0>=(k[g>>2]|0)>>>0){if((Vb[k[(k[a>>2]|0)+52>>2]&63](a,k[e>>2]|0)|0)==-1)break a}else{h=k[e>>2]|0;k[f>>2]=d+4;k[d>>2]=h}b=b+1|0;if((b|0)<(c|0))e=e+4|0;else break}}else b=0;while(0);return b|0}function Dl(a,b){a=a|0;b=b|0;return -1}function El(a){a=a|0;Uk(a+8|0);return}function Fl(a){a=a|0;Uk(a+((k[(k[a>>2]|0)+-12>>2]|0)+8)|0);return}function Gl(a){a=a|0;Uk(a+8|0);Sg(a);return}function Hl(a){a=a|0;Gl(a+(k[(k[a>>2]|0)+-12>>2]|0)|0);return}function Il(a){a=a|0;var b=0,c=0,d=0,e=0;d=r;r=r+16|0;c=d;a:do if(k[a+((k[(k[a>>2]|0)+-12>>2]|0)+24)>>2]|0){x=0;ra(50,c|0,a|0);b=x;x=0;b:do if(b&1)b=Wa(0)|0;else{do if(i[c>>0]|0){b=k[a+((k[(k[a>>2]|0)+-12>>2]|0)+24)>>2]|0;x=0;b=ta(k[(k[b>>2]|0)+24>>2]|0,b|0)|0;e=x;x=0;if(!(e&1)){if((b|0)!=-1)break;e=k[(k[a>>2]|0)+-12>>2]|0;x=0;ra(51,a+e|0,k[a+(e+16)>>2]|1|0);e=x;x=0;if(!(e&1))break}b=Wa(0)|0;Vl(c);break b}while(0);Vl(c);break a}while(0);cb(b|0)|0;x=0;qa(157,a+(k[(k[a>>2]|0)+-12>>2]|0)|0);e=x;x=0;if(!(e&1)){eb();break}b=Wa()|0;x=0;Ga(3);e=x;x=0;if(e&1){e=Wa(0)|0;mc(e)}else fb(b|0)}while(0);r=d;return a|0}function Jl(a){a=a|0;var b=0;b=a+16|0;k[b>>2]=k[b>>2]|1;if(!(k[a+20>>2]&1))return;else vb()}function Kl(a){a=a|0;Uk(a+8|0);return}function Ll(a){a=a|0;Uk(a+((k[(k[a>>2]|0)+-12>>2]|0)+8)|0);return}function Ml(a){a=a|0;Uk(a+8|0);Sg(a);return}function Nl(a){a=a|0;Ml(a+(k[(k[a>>2]|0)+-12>>2]|0)|0);return}function Ol(a){a=a|0;var b=0,c=0,d=0,e=0;d=r;r=r+16|0;c=d;a:do if(k[a+((k[(k[a>>2]|0)+-12>>2]|0)+24)>>2]|0){x=0;ra(68,c|0,a|0);b=x;x=0;b:do if(b&1)b=Wa(0)|0;else{do if(i[c>>0]|0){b=k[a+((k[(k[a>>2]|0)+-12>>2]|0)+24)>>2]|0;x=0;b=ta(k[(k[b>>2]|0)+24>>2]|0,b|0)|0;e=x;x=0;if(!(e&1)){if((b|0)!=-1)break;e=k[(k[a>>2]|0)+-12>>2]|0;x=0;ra(51,a+e|0,k[a+(e+16)>>2]|1|0);e=x;x=0;if(!(e&1))break}b=Wa(0)|0;bm(c);break b}while(0);bm(c);break a}while(0);cb(b|0)|0;x=0;qa(157,a+(k[(k[a>>2]|0)+-12>>2]|0)|0);e=x;x=0;if(!(e&1)){eb();break}b=Wa()|0;x=0;Ga(3);e=x;x=0;if(e&1){e=Wa(0)|0;mc(e)}else fb(b|0)}while(0);r=d;return a|0}function Pl(a,b){a=a|0;b=b|0;return}function Ql(a){a=a|0;Uk(a+4|0);return}function Rl(a){a=a|0;Uk(a+((k[(k[a>>2]|0)+-12>>2]|0)+4)|0);return}function Sl(a){a=a|0;Uk(a+4|0);Sg(a);return}function Tl(a){a=a|0;Sl(a+(k[(k[a>>2]|0)+-12>>2]|0)|0);return}function Ul(a,b){a=a|0;b=b|0;var c=0;i[a>>0]=0;k[a+4>>2]=b;c=k[(k[b>>2]|0)+-12>>2]|0;if(!(k[b+(c+16)>>2]|0)){c=k[b+(c+72)>>2]|0;if(c)Il(c)|0;i[a>>0]=1}return}function Vl(a){a=a|0;var b=0,c=0;a=a+4|0;c=k[a>>2]|0;b=k[(k[c>>2]|0)+-12>>2]|0;do if((((k[c+(b+24)>>2]|0)!=0?(k[c+(b+16)>>2]|0)==0:0)?(k[c+(b+4)>>2]&8192|0)!=0:0)?!(gb()|0):0){b=k[a>>2]|0;b=k[b+((k[(k[b>>2]|0)+-12>>2]|0)+24)>>2]|0;x=0;b=ta(k[(k[b>>2]|0)+24>>2]|0,b|0)|0;c=x;x=0;if(!(c&1)){if((b|0)!=-1)break;b=k[a>>2]|0;c=k[(k[b>>2]|0)+-12>>2]|0;x=0;ra(51,b+c|0,k[b+(c+16)>>2]|1|0);c=x;x=0;if(!(c&1))break}c=Wa(0)|0;cb(c|0)|0;x=0;Ga(3);c=x;x=0;if(c&1){c=Wa(0)|0;mc(c)}}while(0);return}function Wl(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;o=r;r=r+32|0;h=o+20|0;j=o+16|0;m=o+8|0;c=o;x=0;ra(50,m|0,a|0);l=x;x=0;a:do if(l&1){c=Wa(0)|0;d=a;e=a;n=19}else{do if(i[m>>0]|0){l=Yk(a+(k[(k[a>>2]|0)+-12>>2]|0)|0)|0;k[c>>2]=l;x=0;l=Aa(26,c|0,42924)|0;g=x;x=0;if(g&1){n=Wa(0)|0;uq(c);c=n}else{uq(c);e=k[(k[a>>2]|0)+-12>>2]|0;g=k[a+(e+24)>>2]|0;d=a+e|0;e=a+(e+76)|0;c=k[e>>2]|0;do if((c|0)==-1){c=Yk(d)|0;k[h>>2]=c;x=0;c=Aa(26,h|0,43752)|0;p=x;x=0;if(!(p&1)?(x=0,f=Aa(k[(k[c>>2]|0)+28>>2]|0,c|0,32)|0,p=x,x=0,!(p&1)):0){uq(h);c=f<<24>>24;k[e>>2]=c;n=10;break}c=Wa(0)|0;uq(h)}else n=10;while(0);if((n|0)==10){p=k[(k[l>>2]|0)+16>>2]|0;k[j>>2]=g;x=0;k[h>>2]=k[j>>2];c=Ba(p|0,l|0,h|0,d|0,c&255|0,b|0)|0;p=x;x=0;if(!(p&1)){if(c)break;p=k[(k[a>>2]|0)+-12>>2]|0;x=0;ra(51,a+p|0,k[a+(p+16)>>2]|5|0);p=x;x=0;if(!(p&1))break}c=Wa(0)|0}}Vl(m);d=a;e=a;n=19;break a}while(0);Vl(m)}while(0);do if((n|0)==19){cb(c|0)|0;x=0;qa(157,d+(k[(k[e>>2]|0)+-12>>2]|0)|0);p=x;x=0;if(!(p&1)){eb();break}c=Wa()|0;x=0;Ga(3);p=x;x=0;if(p&1){p=Wa(0)|0;mc(p)}else fb(c|0)}while(0);r=o;return a|0}function Xl(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;o=r;r=r+32|0;h=o+20|0;j=o+16|0;m=o+8|0;c=o;x=0;ra(50,m|0,a|0);l=x;x=0;a:do if(l&1){c=Wa(0)|0;d=a;e=a;n=19}else{do if(i[m>>0]|0){l=Yk(a+(k[(k[a>>2]|0)+-12>>2]|0)|0)|0;k[c>>2]=l;x=0;l=Aa(26,c|0,42924)|0;g=x;x=0;if(g&1){n=Wa(0)|0;uq(c);c=n}else{uq(c);e=k[(k[a>>2]|0)+-12>>2]|0;g=k[a+(e+24)>>2]|0;d=a+e|0;e=a+(e+76)|0;c=k[e>>2]|0;do if((c|0)==-1){c=Yk(d)|0;k[h>>2]=c;x=0;c=Aa(26,h|0,43752)|0;p=x;x=0;if(!(p&1)?(x=0,f=Aa(k[(k[c>>2]|0)+28>>2]|0,c|0,32)|0,p=x,x=0,!(p&1)):0){uq(h);c=f<<24>>24;k[e>>2]=c;n=10;break}c=Wa(0)|0;uq(h)}else n=10;while(0);if((n|0)==10){p=k[(k[l>>2]|0)+24>>2]|0;k[j>>2]=g;x=0;k[h>>2]=k[j>>2];c=Ba(p|0,l|0,h|0,d|0,c&255|0,b|0)|0;p=x;x=0;if(!(p&1)){if(c)break;p=k[(k[a>>2]|0)+-12>>2]|0;x=0;ra(51,a+p|0,k[a+(p+16)>>2]|5|0);p=x;x=0;if(!(p&1))break}c=Wa(0)|0}}Vl(m);d=a;e=a;n=19;break a}while(0);Vl(m)}while(0);do if((n|0)==19){cb(c|0)|0;x=0;qa(157,d+(k[(k[e>>2]|0)+-12>>2]|0)|0);p=x;x=0;if(!(p&1)){eb();break}c=Wa()|0;x=0;Ga(3);p=x;x=0;if(p&1){p=Wa(0)|0;mc(p)}else fb(c|0)}while(0);r=o;return a|0}function Yl(a){a=a|0;Uk(a+4|0);return}function Zl(a){a=a|0;Uk(a+((k[(k[a>>2]|0)+-12>>2]|0)+4)|0);return}function _l(a){a=a|0;Uk(a+4|0);Sg(a);return}function $l(a){a=a|0;_l(a+(k[(k[a>>2]|0)+-12>>2]|0)|0);return}function am(a,b){a=a|0;b=b|0;var c=0;i[a>>0]=0;k[a+4>>2]=b;c=k[(k[b>>2]|0)+-12>>2]|0;if(!(k[b+(c+16)>>2]|0)){c=k[b+(c+72)>>2]|0;if(c)Ol(c)|0;i[a>>0]=1}return}function bm(a){a=a|0;var b=0,c=0;a=a+4|0;c=k[a>>2]|0;b=k[(k[c>>2]|0)+-12>>2]|0;do if((((k[c+(b+24)>>2]|0)!=0?(k[c+(b+16)>>2]|0)==0:0)?(k[c+(b+4)>>2]&8192|0)!=0:0)?!(gb()|0):0){b=k[a>>2]|0;b=k[b+((k[(k[b>>2]|0)+-12>>2]|0)+24)>>2]|0;x=0;b=ta(k[(k[b>>2]|0)+24>>2]|0,b|0)|0;c=x;x=0;if(!(c&1)){if((b|0)!=-1)break;b=k[a>>2]|0;c=k[(k[b>>2]|0)+-12>>2]|0;x=0;ra(51,b+c|0,k[b+(c+16)>>2]|1|0);c=x;x=0;if(!(c&1))break}c=Wa(0)|0;cb(c|0)|0;x=0;Ga(3);c=x;x=0;if(c&1){c=Wa(0)|0;mc(c)}}while(0);return}function cm(a){a=a|0;return 55909}function dm(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)!=1&(c|0)<257)kk(a,b,c);else uk(a,55918,35);return}function em(){if((i[872]|0)==0?(Qa(872)|0)!=0:0){k[10661]=42616;tb(54,42644,w|0)|0;Ya(872)}return 42644}function fm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;d=r;r=r+16|0;e=d+8|0;f=d;h=c;g=k[h+4>>2]|0;c=f;k[c>>2]=k[h>>2];k[c+4>>2]=g;k[e>>2]=k[f>>2];k[e+4>>2]=k[f+4>>2];mk(a,e,b);k[a>>2]=42580;r=d;return}function gm(a){a=a|0;pk(a);return}function hm(a){a=a|0;pk(a);Sg(a);return}function im(a){a=a|0;Uk(a);Sg(a);return}function jm(a){a=a|0;Sg(a);return}function km(a){a=a|0;return}function lm(a){a=a|0;return}function mm(a){a=a|0;Sg(a);return}function nm(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;a:do if((d|0)==(e|0))g=6;else while(1){if((b|0)==(c|0)){b=-1;break a}a=i[b>>0]|0;f=i[d>>0]|0;if(a<<24>>24<f<<24>>24){b=-1;break a}if(f<<24>>24<a<<24>>24){b=1;break a}b=b+1|0;d=d+1|0;if((d|0)==(e|0)){g=6;break}}while(0);if((g|0)==6)b=(b|0)!=(c|0)&1;return b|0}function om(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Rk(a,c,d);return}function pm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if((b|0)==(c|0))a=0;else{a=0;do{a=(i[b>>0]|0)+(a<<4)|0;d=a&-268435456;a=(d>>>24|d)^a;b=b+1|0}while((b|0)!=(c|0))}return a|0}function qm(a){a=a|0;return}function rm(a){a=a|0;Sg(a);return}function sm(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;a:do if((d|0)==(e|0))g=6;else while(1){if((b|0)==(c|0)){b=-1;break a}a=k[b>>2]|0;f=k[d>>2]|0;if((a|0)<(f|0)){b=-1;break a}if((f|0)<(a|0)){b=1;break a}b=b+4|0;d=d+4|0;if((d|0)==(e|0)){g=6;break}}while(0);if((g|0)==6)b=(b|0)!=(c|0)&1;return b|0}function tm(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Sk(a,c,d);return}function um(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if((b|0)==(c|0))a=0;else{a=0;do{a=(k[b>>2]|0)+(a<<4)|0;d=a&-268435456;a=(d>>>24|d)^a;b=b+4|0}while((b|0)!=(c|0))}return a|0}function vm(a){a=a|0;return}function wm(a){a=a|0;Sg(a);return}function xm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0;q=r;r=r+64|0;o=q+56|0;g=q+52|0;m=q+48|0;h=q+44|0;j=q+40|0;l=q+36|0;n=q+32|0;s=q+8|0;p=q;a:do if(!(k[d+4>>2]&1)){k[m>>2]=-1;s=k[(k[a>>2]|0)+16>>2]|0;k[h>>2]=k[b>>2];k[j>>2]=k[c>>2];k[g>>2]=k[h>>2];k[o>>2]=k[j>>2];g=Nb[s&63](a,g,o,d,e,m)|0;k[b>>2]=g;switch(k[m>>2]|0){case 0:{i[f>>0]=0;break a}case 1:{i[f>>0]=1;break a}default:{i[f>>0]=1;k[e>>2]=4;break a}}}else{g=Yk(d)|0;k[l>>2]=g;x=0;a=Aa(26,l|0,43752)|0;m=x;x=0;do if(!(m&1)){dk(g)|0;g=Yk(d)|0;k[n>>2]=g;x=0;j=Aa(26,n|0,43892)|0;n=x;x=0;if(n&1){s=Wa()|0;dk(g)|0;g=s;break}dk(g)|0;x=0;ra(k[(k[j>>2]|0)+24>>2]|0,s|0,j|0);n=x;x=0;if(!(n&1)){h=s+12|0;x=0;ra(k[(k[j>>2]|0)+28>>2]|0,h|0,j|0);n=x;x=0;if(!(n&1)){k[p>>2]=k[c>>2];x=0;k[o>>2]=k[p>>2];g=na(7,b|0,o|0,s|0,s+24|0,a|0,e|0,1)|0;e=x;x=0;if(e&1){g=Wa()|0;wk(s+12|0);wk(s);break}else{i[f>>0]=(g|0)==(s|0)&1;g=k[b>>2]|0;wk(s+12|0);wk(s);break a}}}else h=s;g=Wa()|0;j=M;if((s|0)!=(h|0))do{h=h+-12|0;wk(h)}while((h|0)!=(s|0))}else{s=Wa()|0;dk(g)|0;g=s}while(0);fb(g|0)}while(0);r=q;return g|0}function ym(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=ms(a,i,h,d,e,f)|0;r=g;return a|0}function zm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=ns(a,i,h,d,e,f)|0;r=g;return a|0}function Am(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=os(a,i,h,d,e,f)|0;r=g;return a|0}function Bm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=ps(a,i,h,d,e,f)|0;r=g;return a|0}function Cm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=qs(a,i,h,d,e,f)|0;r=g;return a|0}function Dm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=rs(a,i,h,d,e,f)|0;r=g;return a|0}function Em(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=ss(a,i,h,d,e,f)|0;r=g;return a|0}function Fm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=ts(a,i,h,d,e,f)|0;r=g;return a|0}function Gm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=us(a,i,h,d,e,f)|0;r=g;return a|0}function Hm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;C=r;r=r+240|0;w=C;q=C+208|0;E=C+32|0;a=C+28|0;D=C+16|0;v=C+12|0;t=C+48|0;u=C+8|0;s=C+4|0;k[E>>2]=0;k[E+4>>2]=0;k[E+8>>2]=0;x=0;d=ta(67,d|0)|0;p=x;x=0;do if(p&1)a=Wa()|0;else{k[a>>2]=d;x=0;a=Aa(26,a|0,43752)|0;p=x;x=0;if(!(p&1)?(x=0,Ea(k[(k[a>>2]|0)+32>>2]|0,a|0,55954,55980,q|0)|0,p=x,x=0,!(p&1)):0){dk(d)|0;k[D>>2]=0;k[D+4>>2]=0;k[D+8>>2]=0;if(!(i[D>>0]&1))a=10;else a=(k[D>>2]&-2)+-1|0;x=0;Fa(6,D|0,a|0,0);p=x;x=0;a:do if(!(p&1)){o=D+8|0;p=D+1|0;d=(i[D>>0]&1)==0?p:k[o>>2]|0;k[v>>2]=d;k[u>>2]=t;k[s>>2]=0;n=D+4|0;a=k[b>>2]|0;b:while(1){if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;g=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;m=x;x=0;if(m&1){F=29;break}if((g|0)==-1){k[b>>2]=0;a=0}}}else a=0;h=(a|0)==0;g=k[c>>2]|0;do if(g){if((k[g+12>>2]|0)!=(k[g+16>>2]|0))if(h)break;else break b;x=0;j=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;m=x;x=0;if(m&1){F=29;break b}if((j|0)!=-1)if(h)break;else break b;else{k[c>>2]=0;F=19;break}}else F=19;while(0);if((F|0)==19){F=0;if(h){g=0;break}else g=0}h=i[D>>0]|0;h=(h&1)==0?(h&255)>>>1:k[n>>2]|0;if((k[v>>2]|0)==(d+h|0)){x=0;Fa(6,D|0,h<<1|0,0);m=x;x=0;if(m&1){F=29;break}if(!(i[D>>0]&1))d=10;else d=(k[D>>2]&-2)+-1|0;x=0;Fa(6,D|0,d|0,0);m=x;x=0;if(m&1){F=29;break}d=(i[D>>0]&1)==0?p:k[o>>2]|0;k[v>>2]=d+h}j=a+12|0;h=k[j>>2]|0;m=a+16|0;if((h|0)==(k[m>>2]|0)){x=0;h=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;G=x;x=0;if(G&1){F=29;break}}else h=l[h>>0]|0;if(Im(h&255,16,d,v,s,0,E,t,u,q)|0)break;g=k[j>>2]|0;if((g|0)==(k[m>>2]|0)){x=0;ta(k[(k[a>>2]|0)+40>>2]|0,a|0)|0;G=x;x=0;if(G&1){F=29;break}else continue}else{k[j>>2]=g+1;continue}}if((F|0)==29){a=Wa()|0;break}x=0;Fa(6,D|0,(k[v>>2]|0)-d|0,0);G=x;x=0;if((!(G&1)?(y=i[D>>0]|0,z=k[o>>2]|0,x=0,A=Da(3)|0,G=x,x=0,!(G&1)):0)?(x=0,k[w>>2]=f,B=Ea(6,((y&1)==0?p:z)|0,A|0,57338,w|0)|0,G=x,x=0,!(G&1)):0){if((B|0)!=1)k[e>>2]=4;if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;d=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;G=x;x=0;if(G&1){F=30;break}if((d|0)==-1){k[b>>2]=0;a=0}}}else a=0;d=(a|0)==0;do if(g){if((k[g+12>>2]|0)==(k[g+16>>2]|0)){x=0;a=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;G=x;x=0;if(G&1){F=30;break a}if((a|0)==-1){k[c>>2]=0;F=55;break}}if(!d)F=56}else F=55;while(0);if((F|0)==55?d:0)F=56;if((F|0)==56)k[e>>2]=k[e>>2]|2;G=k[b>>2]|0;wk(D);wk(E);r=C;return G|0}else F=30}else F=30;while(0);if((F|0)==30)a=Wa()|0;wk(D);break}a=Wa()|0;dk(d)|0}while(0);wk(E);fb(a|0);return 0}function Im(a,b,c,d,e,f,g,h,j,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;l=l|0;var m=0,n=0,o=0,p=0;o=k[d>>2]|0;p=(o|0)==(c|0);do if(p){m=(i[l+24>>0]|0)==a<<24>>24;if(!m?(i[l+25>>0]|0)!=a<<24>>24:0){n=5;break}k[d>>2]=c+1;i[c>>0]=m?43:45;k[e>>2]=0;m=0}else n=5;while(0);a:do if((n|0)==5){n=i[g>>0]|0;if(a<<24>>24==f<<24>>24?(((n&1)==0?(n&255)>>>1:k[g+4>>2]|0)|0)!=0:0){m=k[j>>2]|0;if((m-h|0)>=160){m=0;break}b=k[e>>2]|0;k[j>>2]=m+4;k[m>>2]=b;k[e>>2]=0;m=0;break}g=l+26|0;m=l;while(1){if((i[m>>0]|0)==a<<24>>24)break;m=m+1|0;if((m|0)==(g|0)){m=g;break}}m=m-l|0;if((m|0)>23)m=-1;else{switch(b|0){case 10:case 8:{if((m|0)>=(b|0)){m=-1;break a}break}case 16:{if((m|0)>=22){if(p){m=-1;break a}if((o-c|0)>=3){m=-1;break a}if((i[o+-1>>0]|0)!=48){m=-1;break a}k[e>>2]=0;m=i[55954+m>>0]|0;k[d>>2]=o+1;i[o>>0]=m;m=0;break a}break}default:{}}m=i[55954+m>>0]|0;k[d>>2]=o+1;i[o>>0]=m;k[e>>2]=(k[e>>2]|0)+1;m=0}}while(0);return m|0}function Jm(){var a=0,b=0;do if((i[1792]|0)==0?(Qa(1792)|0)!=0:0){x=0;a=va(31,2147483647,57341,0)|0;b=x;x=0;if(b&1){b=Wa()|0;Bb(1792);fb(b|0)}else{k[11079]=a;Ya(1792);break}}while(0);return k[11079]|0}function Km(a){a=a|0;return}function Lm(a){a=a|0;Sg(a);return}function Mm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0;q=r;r=r+64|0;o=q+56|0;g=q+52|0;m=q+48|0;h=q+44|0;j=q+40|0;l=q+36|0;n=q+32|0;s=q+8|0;p=q;a:do if(!(k[d+4>>2]&1)){k[m>>2]=-1;s=k[(k[a>>2]|0)+16>>2]|0;k[h>>2]=k[b>>2];k[j>>2]=k[c>>2];k[g>>2]=k[h>>2];k[o>>2]=k[j>>2];g=Nb[s&63](a,g,o,d,e,m)|0;k[b>>2]=g;switch(k[m>>2]|0){case 0:{i[f>>0]=0;break a}case 1:{i[f>>0]=1;break a}default:{i[f>>0]=1;k[e>>2]=4;break a}}}else{g=Yk(d)|0;k[l>>2]=g;x=0;a=Aa(26,l|0,43744)|0;m=x;x=0;do if(!(m&1)){dk(g)|0;g=Yk(d)|0;k[n>>2]=g;x=0;j=Aa(26,n|0,43900)|0;n=x;x=0;if(n&1){s=Wa()|0;dk(g)|0;g=s;break}dk(g)|0;x=0;ra(k[(k[j>>2]|0)+24>>2]|0,s|0,j|0);n=x;x=0;if(!(n&1)){h=s+12|0;x=0;ra(k[(k[j>>2]|0)+28>>2]|0,h|0,j|0);n=x;x=0;if(!(n&1)){k[p>>2]=k[c>>2];x=0;k[o>>2]=k[p>>2];g=na(8,b|0,o|0,s|0,s+24|0,a|0,e|0,1)|0;e=x;x=0;if(e&1){g=Wa()|0;Kk(s+12|0);Kk(s);break}else{i[f>>0]=(g|0)==(s|0)&1;g=k[b>>2]|0;Kk(s+12|0);Kk(s);break a}}}else h=s;g=Wa()|0;j=M;if((s|0)!=(h|0))do{h=h+-12|0;Kk(h)}while((h|0)!=(s|0))}else{s=Wa()|0;dk(g)|0;g=s}while(0);fb(g|0)}while(0);r=q;return g|0}function Nm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=xs(a,i,h,d,e,f)|0;r=g;return a|0}function Om(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=ys(a,i,h,d,e,f)|0;r=g;return a|0}function Pm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=zs(a,i,h,d,e,f)|0;r=g;return a|0}function Qm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=As(a,i,h,d,e,f)|0;r=g;return a|0}function Rm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=Bs(a,i,h,d,e,f)|0;r=g;return a|0}function Sm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=Cs(a,i,h,d,e,f)|0;r=g;return a|0}function Tm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=Ds(a,i,h,d,e,f)|0;r=g;return a|0}function Um(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=Es(a,i,h,d,e,f)|0;r=g;return a|0}function Vm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=Fs(a,i,h,d,e,f)|0;r=g;return a|0}function Wm(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;B=r;r=r+320|0;v=B;p=B+208|0;D=B+32|0;a=B+28|0;C=B+16|0;u=B+12|0;s=B+48|0;t=B+8|0;q=B+4|0;k[D>>2]=0;k[D+4>>2]=0;k[D+8>>2]=0;x=0;d=ta(67,d|0)|0;o=x;x=0;do if(o&1)a=Wa()|0;else{k[a>>2]=d;x=0;a=Aa(26,a|0,43744)|0;o=x;x=0;if(!(o&1)?(x=0,Ea(k[(k[a>>2]|0)+48>>2]|0,a|0,55954,55980,p|0)|0,o=x,x=0,!(o&1)):0){dk(d)|0;k[C>>2]=0;k[C+4>>2]=0;k[C+8>>2]=0;if(!(i[C>>0]&1))a=10;else a=(k[C>>2]&-2)+-1|0;x=0;Fa(6,C|0,a|0,0);o=x;x=0;a:do if(!(o&1)){n=C+8|0;o=C+1|0;a=(i[C>>0]&1)==0?o:k[n>>2]|0;k[u>>2]=a;k[t>>2]=s;k[q>>2]=0;m=C+4|0;g=k[b>>2]|0;b:while(1){if(g){d=k[g+12>>2]|0;if((d|0)==(k[g+16>>2]|0)){x=0;d=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;l=x;x=0;if(l&1){E=30;break}}else d=k[d>>2]|0;if((d|0)==-1){k[b>>2]=0;d=0;h=1}else{d=g;h=0}}else{d=0;h=1}j=k[c>>2]|0;do if(j){g=k[j+12>>2]|0;if((g|0)==(k[j+16>>2]|0)){x=0;g=ta(k[(k[j>>2]|0)+36>>2]|0,j|0)|0;l=x;x=0;if(l&1){E=30;break b}}else g=k[g>>2]|0;if((g|0)!=-1)if(h){g=j;break}else{g=j;break b}else{k[c>>2]=0;E=20;break}}else E=20;while(0);if((E|0)==20){E=0;if(h){g=0;break}else g=0}h=i[C>>0]|0;h=(h&1)==0?(h&255)>>>1:k[m>>2]|0;if((k[u>>2]|0)==(a+h|0)){x=0;Fa(6,C|0,h<<1|0,0);l=x;x=0;if(l&1){E=30;break}if(!(i[C>>0]&1))a=10;else a=(k[C>>2]&-2)+-1|0;x=0;Fa(6,C|0,a|0,0);l=x;x=0;if(l&1){E=30;break}a=(i[C>>0]&1)==0?o:k[n>>2]|0;k[u>>2]=a+h}j=d+12|0;h=k[j>>2]|0;l=d+16|0;if((h|0)==(k[l>>2]|0)){x=0;h=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;F=x;x=0;if(F&1){E=30;break}}else h=k[h>>2]|0;if(Xm(h,16,a,u,q,0,D,s,t,p)|0)break;g=k[j>>2]|0;if((g|0)==(k[l>>2]|0)){x=0;ta(k[(k[d>>2]|0)+40>>2]|0,d|0)|0;F=x;x=0;if(F&1){E=30;break}else{g=d;continue}}else{k[j>>2]=g+4;g=d;continue}}if((E|0)==30){a=Wa()|0;break}x=0;Fa(6,C|0,(k[u>>2]|0)-a|0,0);F=x;x=0;if((!(F&1)?(w=i[C>>0]|0,y=k[n>>2]|0,x=0,z=Da(3)|0,F=x,x=0,!(F&1)):0)?(x=0,k[v>>2]=f,A=Ea(6,((w&1)==0?o:y)|0,z|0,57338,v|0)|0,F=x,x=0,!(F&1)):0){if((A|0)!=1)k[e>>2]=4;if(d){a=k[d+12>>2]|0;if((a|0)==(k[d+16>>2]|0)){x=0;a=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;F=x;x=0;if(F&1){E=31;break}}else a=k[a>>2]|0;if((a|0)==-1){k[b>>2]=0;d=1}else d=0}else d=1;do if(g){a=k[g+12>>2]|0;if((a|0)==(k[g+16>>2]|0)){x=0;a=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;F=x;x=0;if(F&1){E=31;break a}}else a=k[a>>2]|0;if((a|0)!=-1)if(d)break;else{E=59;break}else{k[c>>2]=0;E=57;break}}else E=57;while(0);if((E|0)==57?d:0)E=59;if((E|0)==59)k[e>>2]=k[e>>2]|2;F=k[b>>2]|0;wk(C);wk(D);r=B;return F|0}else E=31}else E=31;while(0);if((E|0)==31)a=Wa()|0;wk(C);break}a=Wa()|0;dk(d)|0}while(0);wk(D);fb(a|0);return 0}function Xm(a,b,c,d,e,f,g,h,j,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;l=l|0;var m=0,n=0,o=0,p=0;o=k[d>>2]|0;p=(o|0)==(c|0);do if(p){m=(k[l+96>>2]|0)==(a|0);if(!m?(k[l+100>>2]|0)!=(a|0):0){n=5;break}k[d>>2]=c+1;i[c>>0]=m?43:45;k[e>>2]=0;m=0}else n=5;while(0);a:do if((n|0)==5){n=i[g>>0]|0;if((a|0)==(f|0)?(((n&1)==0?(n&255)>>>1:k[g+4>>2]|0)|0)!=0:0){m=k[j>>2]|0;if((m-h|0)>=160){m=0;break}b=k[e>>2]|0;k[j>>2]=m+4;k[m>>2]=b;k[e>>2]=0;m=0;break}g=l+104|0;m=l;while(1){if((k[m>>2]|0)==(a|0))break;m=m+4|0;if((m|0)==(g|0)){m=g;break}}m=m-l|0;g=m>>2;if((m|0)>92)m=-1;else{switch(b|0){case 10:case 8:{if((g|0)>=(b|0)){m=-1;break a}break}case 16:{if((m|0)>=88){if(p){m=-1;break a}if((o-c|0)>=3){m=-1;break a}if((i[o+-1>>0]|0)!=48){m=-1;break a}k[e>>2]=0;m=i[55954+g>>0]|0;k[d>>2]=o+1;i[o>>0]=m;m=0;break a}break}default:{}}m=i[55954+g>>0]|0;k[d>>2]=o+1;i[o>>0]=m;k[e>>2]=(k[e>>2]|0)+1;m=0}}while(0);return m|0}function Ym(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0;j=r;r=r+16|0;h=j;b=Yk(b)|0;k[h>>2]=b;x=0;e=Aa(26,h|0,43752)|0;l=x;x=0;if((((!(l&1)?(x=0,Ea(k[(k[e>>2]|0)+32>>2]|0,e|0,55954,55980,c|0)|0,l=x,x=0,!(l&1)):0)?(x=0,g=Aa(26,h|0,43892)|0,l=x,x=0,!(l&1)):0)?(x=0,f=ta(k[(k[g>>2]|0)+16>>2]|0,g|0)|0,l=x,x=0,!(l&1)):0)?(i[d>>0]=f,x=0,ra(k[(k[g>>2]|0)+20>>2]|0,a|0,g|0),l=x,x=0,!(l&1)):0){dk(b)|0;r=j;return}l=Wa()|0;dk(b)|0;fb(l|0)}function Zm(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0;m=r;r=r+16|0;l=m;b=Yk(b)|0;k[l>>2]=b;x=0;f=Aa(26,l|0,43752)|0;n=x;x=0;if(((((!(n&1)?(x=0,Ea(k[(k[f>>2]|0)+32>>2]|0,f|0,55954,55986,c|0)|0,n=x,x=0,!(n&1)):0)?(x=0,j=Aa(26,l|0,43892)|0,n=x,x=0,!(n&1)):0)?(x=0,g=ta(k[(k[j>>2]|0)+12>>2]|0,j|0)|0,n=x,x=0,!(n&1)):0)?(i[d>>0]=g,x=0,h=ta(k[(k[j>>2]|0)+16>>2]|0,j|0)|0,n=x,x=0,!(n&1)):0)?(i[e>>0]=h,x=0,ra(k[(k[j>>2]|0)+20>>2]|0,a|0,j|0),n=x,x=0,!(n&1)):0){dk(b)|0;r=m;return}n=Wa()|0;dk(b)|0;fb(n|0)}function _m(a,b,c,d,e,f,g,h,j,m,n,o){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;m=m|0;n=n|0;o=o|0;var p=0,q=0;a:do if(a<<24>>24==f<<24>>24)if(i[b>>0]|0){i[b>>0]=0;c=k[e>>2]|0;k[e>>2]=c+1;i[c>>0]=46;c=i[h>>0]|0;if((((c&1)==0?(c&255)>>>1:k[h+4>>2]|0)|0)!=0?(p=k[m>>2]|0,(p-j|0)<160):0){j=k[n>>2]|0;k[m>>2]=p+4;k[p>>2]=j;p=0}else p=0}else p=-1;else{if(a<<24>>24==g<<24>>24?(g=i[h>>0]|0,(((g&1)==0?(g&255)>>>1:k[h+4>>2]|0)|0)!=0):0){if(!(i[b>>0]|0)){p=-1;break}p=k[m>>2]|0;if((p-j|0)>=160){p=0;break}j=k[n>>2]|0;k[m>>2]=p+4;k[p>>2]=j;k[n>>2]=0;p=0;break}f=o+32|0;p=o;while(1){if((i[p>>0]|0)==a<<24>>24)break;p=p+1|0;if((p|0)==(f|0)){p=f;break}}f=p-o|0;if((f|0)>31)p=-1;else{g=i[55954+f>>0]|0;switch(f|0){case 24:case 25:{p=k[e>>2]|0;if((p|0)!=(d|0)?(l[p+-1>>0]&95|0)!=(l[c>>0]&127|0):0){p=-1;break a}k[e>>2]=p+1;i[p>>0]=g;p=0;break a}case 23:case 22:{i[c>>0]=80;p=k[e>>2]|0;k[e>>2]=p+1;i[p>>0]=g;p=0;break a}default:{p=g&95;if((((p|0)==(i[c>>0]|0)?(i[c>>0]=p|128,(i[b>>0]|0)!=0):0)?(i[b>>0]=0,c=i[h>>0]|0,(((c&1)==0?(c&255)>>>1:k[h+4>>2]|0)|0)!=0):0)?(q=k[m>>2]|0,(q-j|0)<160):0){j=k[n>>2]|0;k[m>>2]=q+4;k[q>>2]=j}m=k[e>>2]|0;k[e>>2]=m+1;i[m>>0]=g;if((f|0)>21){p=0;break a}k[n>>2]=(k[n>>2]|0)+1;p=0;break a}}}}while(0);return p|0}function $m(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;i=r;r=r+16|0;h=i;b=Yk(b)|0;k[h>>2]=b;x=0;e=Aa(26,h|0,43744)|0;j=x;x=0;if((((!(j&1)?(x=0,Ea(k[(k[e>>2]|0)+48>>2]|0,e|0,55954,55980,c|0)|0,j=x,x=0,!(j&1)):0)?(x=0,g=Aa(26,h|0,43900)|0,j=x,x=0,!(j&1)):0)?(x=0,f=ta(k[(k[g>>2]|0)+16>>2]|0,g|0)|0,j=x,x=0,!(j&1)):0)?(k[d>>2]=f,x=0,ra(k[(k[g>>2]|0)+20>>2]|0,a|0,g|0),j=x,x=0,!(j&1)):0){dk(b)|0;r=i;return}j=Wa()|0;dk(b)|0;fb(j|0)}function an(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0;l=r;r=r+16|0;j=l;b=Yk(b)|0;k[j>>2]=b;x=0;f=Aa(26,j|0,43744)|0;m=x;x=0;if(((((!(m&1)?(x=0,Ea(k[(k[f>>2]|0)+48>>2]|0,f|0,55954,55986,c|0)|0,m=x,x=0,!(m&1)):0)?(x=0,i=Aa(26,j|0,43900)|0,m=x,x=0,!(m&1)):0)?(x=0,g=ta(k[(k[i>>2]|0)+12>>2]|0,i|0)|0,m=x,x=0,!(m&1)):0)?(k[d>>2]=g,x=0,h=ta(k[(k[i>>2]|0)+16>>2]|0,i|0)|0,m=x,x=0,!(m&1)):0)?(k[e>>2]=h,x=0,ra(k[(k[i>>2]|0)+20>>2]|0,a|0,i|0),m=x,x=0,!(m&1)):0){dk(b)|0;r=l;return}m=Wa()|0;dk(b)|0;fb(m|0)}function bn(a,b,c,d,e,f,g,h,j,m,n,o){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;m=m|0;n=n|0;o=o|0;var p=0,q=0;a:do if((a|0)==(f|0))if(i[b>>0]|0){i[b>>0]=0;c=k[e>>2]|0;k[e>>2]=c+1;i[c>>0]=46;c=i[h>>0]|0;if((((c&1)==0?(c&255)>>>1:k[h+4>>2]|0)|0)!=0?(p=k[m>>2]|0,(p-j|0)<160):0){j=k[n>>2]|0;k[m>>2]=p+4;k[p>>2]=j;p=0}else p=0}else p=-1;else{if((a|0)==(g|0)?(g=i[h>>0]|0,(((g&1)==0?(g&255)>>>1:k[h+4>>2]|0)|0)!=0):0){if(!(i[b>>0]|0)){p=-1;break}p=k[m>>2]|0;if((p-j|0)>=160){p=0;break}j=k[n>>2]|0;k[m>>2]=p+4;k[p>>2]=j;k[n>>2]=0;p=0;break}f=o+128|0;p=o;while(1){if((k[p>>2]|0)==(a|0))break;p=p+4|0;if((p|0)==(f|0)){p=f;break}}f=p-o|0;p=f>>2;if((f|0)<=124){g=i[55954+p>>0]|0;switch(p|0){case 24:case 25:{p=k[e>>2]|0;if((p|0)!=(d|0)?(l[p+-1>>0]&95|0)!=(l[c>>0]&127|0):0){p=-1;break a}k[e>>2]=p+1;i[p>>0]=g;p=0;break a}case 23:case 22:{i[c>>0]=80;break}default:{p=g&95;if((((p|0)==(i[c>>0]|0)?(i[c>>0]=p|128,(i[b>>0]|0)!=0):0)?(i[b>>0]=0,c=i[h>>0]|0,(((c&1)==0?(c&255)>>>1:k[h+4>>2]|0)|0)!=0):0)?(q=k[m>>2]|0,(q-j|0)<160):0){j=k[n>>2]|0;k[m>>2]=q+4;k[q>>2]=j}}}m=k[e>>2]|0;k[e>>2]=m+1;i[m>>0]=g;if((f|0)>84)p=0;else{k[n>>2]=(k[n>>2]|0)+1;p=0}}else p=-1}while(0);return p|0}function cn(a){a=a|0;return}function dn(a){a=a|0;Sg(a);return}function en(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0;m=r;r=r+32|0;f=m+20|0;g=m+16|0;h=m+12|0;l=m;a:do if(!(k[c+4>>2]&1)){l=k[(k[a>>2]|0)+24>>2]|0;k[g>>2]=k[b>>2];k[f>>2]=k[g>>2];f=Wb[l&31](a,f,c,d,e&1)|0}else{f=Yk(c)|0;k[h>>2]=f;x=0;g=Aa(26,h|0,43892)|0;j=x;x=0;b:do if(j&1){m=Wa()|0;dk(f)|0;f=m}else{dk(f)|0;f=k[g>>2]|0;if(e)Mb[k[f+24>>2]&127](l,g);else Mb[k[f+28>>2]&127](l,g);a=i[l>>0]|0;j=(a&1)==0;f=l+1|0;e=l+8|0;h=j?f:l+1|0;f=j?f:k[l+8>>2]|0;j=l+4|0;c=(a&1)==0;c:do if((f|0)!=((c?h:k[e>>2]|0)+(c?(a&255)>>>1:k[j>>2]|0)|0)){d:while(1){g=i[f>>0]|0;d=k[b>>2]|0;do if(d){c=d+24|0;a=k[c>>2]|0;if((a|0)!=(k[d+28>>2]|0)){k[c>>2]=a+1;i[a>>0]=g;break}x=0;g=Aa(k[(k[d>>2]|0)+52>>2]|0,d|0,g&255|0)|0;a=x;x=0;if(a&1)break d;if((g|0)==-1)k[b>>2]=0}while(0);f=f+1|0;a=i[l>>0]|0;c=(a&1)==0;if((f|0)==((c?h:k[e>>2]|0)+(c?(a&255)>>>1:k[j>>2]|0)|0))break c}f=Wa()|0;wk(l);break b}while(0);f=k[b>>2]|0;wk(l);break a}while(0);fb(f|0)}while(0);r=m;return f|0}function fn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;m=r;r=r+64|0;f=m;o=m+56|0;p=m+44|0;h=m+20|0;l=m+16|0;j=m+12|0;n=m+8|0;g=m+4|0;i[o>>0]=i[57343]|0;i[o+1>>0]=i[57344]|0;i[o+2>>0]=i[57345]|0;i[o+3>>0]=i[57346]|0;i[o+4>>0]=i[57347]|0;i[o+5>>0]=i[57348]|0;gn(o+1|0,57349,1,k[c+4>>2]|0);a=Jm()|0;k[f>>2]=e;e=p+(Gs(p,12,a,o,f)|0)|0;o=hn(p,e,c)|0;a=Yk(c)|0;k[n>>2]=a;x=0;ya(1,p|0,o|0,e|0,h|0,l|0,j|0,n|0);e=x;x=0;if(e&1){p=Wa()|0;dk(a)|0;fb(p|0)}else{dk(a)|0;k[g>>2]=k[b>>2];o=k[l>>2]|0;p=k[j>>2]|0;k[f>>2]=k[g>>2];p=bd(f,h,o,p,c,d)|0;r=m;return p|0}return 0}function gn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;if(d&2048){i[a>>0]=43;a=a+1|0}if(d&512){i[a>>0]=35;a=a+1|0}e=i[b>>0]|0;if(e<<24>>24){f=b;while(1){f=f+1|0;b=a+1|0;i[a>>0]=e;e=i[f>>0]|0;if(!(e<<24>>24)){a=b;break}else a=b}}a:do switch(d&74|0){case 64:{i[a>>0]=111;break}case 8:if(!(d&16384)){i[a>>0]=120;break a}else{i[a>>0]=88;break a}default:if(c){i[a>>0]=100;break a}else{i[a>>0]=117;break a}}while(0);return}function hn(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;a:do switch(k[c+4>>2]&176|0){case 16:{c=i[a>>0]|0;switch(c<<24>>24){case 43:case 45:{a=a+1|0;break a}default:{}}if((b-a|0)>1&c<<24>>24==48){switch(i[a+1>>0]|0){case 88:case 120:break;default:{d=7;break a}}a=a+2|0}else d=7;break}case 32:{a=b;break}default:d=7}while(0);return a|0}function jn(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0;u=r;r=r+16|0;v=u;s=wq(g,43752)|0;l=wq(g,43892)|0;Mb[k[(k[l>>2]|0)+20>>2]&127](v,l);p=i[v>>0]|0;q=v+4|0;a:do if(!(((p&1)==0?(p&255)>>>1:k[q>>2]|0)|0)){x=0;Ea(k[(k[s>>2]|0)+32>>2]|0,s|0,a|0,c|0,d|0)|0;t=x;x=0;if(t&1)t=5;else{g=d+(c-a)|0;k[f>>2]=g;t=29}}else{k[f>>2]=d;g=i[a>>0]|0;switch(g<<24>>24){case 43:case 45:{x=0;g=Aa(k[(k[s>>2]|0)+28>>2]|0,s|0,g|0)|0;p=x;x=0;if(p&1){t=5;break a}j=k[f>>2]|0;k[f>>2]=j+1;i[j>>0]=g;j=a+1|0;break}default:j=a}b:do if((c-j|0)>1?(i[j>>0]|0)==48:0){g=j+1|0;switch(i[g>>0]|0){case 88:case 120:break;default:break b}x=0;h=Aa(k[(k[s>>2]|0)+28>>2]|0,s|0,48)|0;p=x;x=0;if(p&1){t=5;break a}p=k[f>>2]|0;k[f>>2]=p+1;i[p>>0]=h;x=0;g=Aa(k[(k[s>>2]|0)+28>>2]|0,s|0,i[g>>0]|0)|0;p=x;x=0;if(p&1){t=5;break a}p=k[f>>2]|0;k[f>>2]=p+1;i[p>>0]=g;j=j+2|0}while(0);if((j|0)!=(c|0)?(m=c+-1|0,j>>>0<m>>>0):0){h=j;g=m;do{p=i[h>>0]|0;i[h>>0]=i[g>>0]|0;i[g>>0]=p;h=h+1|0;g=g+-1|0}while(h>>>0<g>>>0)}x=0;m=ta(k[(k[l>>2]|0)+16>>2]|0,l|0)|0;p=x;x=0;if(!(p&1)){n=v+8|0;o=v+1|0;c:do if(j>>>0<c>>>0){g=0;h=0;p=j;while(1){l=i[((i[v>>0]&1)==0?o:k[n>>2]|0)+h>>0]|0;if(l<<24>>24!=0&(g|0)==(l<<24>>24|0)){g=k[f>>2]|0;k[f>>2]=g+1;i[g>>0]=m;g=i[v>>0]|0;l=0;h=(h>>>0<(((g&1)==0?(g&255)>>>1:k[q>>2]|0)+-1|0)>>>0&1)+h|0}else l=g;x=0;g=Aa(k[(k[s>>2]|0)+28>>2]|0,s|0,i[p>>0]|0)|0;w=x;x=0;if(w&1)break;w=k[f>>2]|0;k[f>>2]=w+1;i[w>>0]=g;p=p+1|0;if(p>>>0>=c>>>0)break c;else g=l+1|0}g=Wa()|0;break a}while(0);h=a;g=d+(j-h)|0;a=k[f>>2]|0;if((g|0)==(a|0)){a=h;t=29}else{a=a+-1|0;if(g>>>0<a>>>0)do{w=i[g>>0]|0;i[g>>0]=i[a>>0]|0;i[a>>0]=w;g=g+1|0;a=a+-1|0}while(g>>>0<a>>>0);a=h;g=k[f>>2]|0;t=29}}else t=5}while(0);if((t|0)==5)g=Wa()|0;else if((t|0)==29){k[e>>2]=(b|0)==(c|0)?g:d+(b-a)|0;wk(v);r=u;return}wk(v);fb(g|0)}function kn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;m=r;r=r+96|0;g=m+8|0;a=m;o=m+74|0;i=m+32|0;l=m+28|0;j=m+24|0;n=m+20|0;h=m+16|0;p=a;k[p>>2]=37;k[p+4>>2]=0;gn(a+1|0,57351,1,k[c+4>>2]|0);p=Jm()|0;q=g;k[q>>2]=e;k[q+4>>2]=f;f=o+(Gs(o,22,p,a,g)|0)|0;e=hn(o,f,c)|0;a=Yk(c)|0;k[n>>2]=a;x=0;ya(1,o|0,e|0,f|0,i|0,l|0,j|0,n|0);f=x;x=0;if(f&1){q=Wa()|0;dk(a)|0;fb(q|0)}else{dk(a)|0;k[h>>2]=k[b>>2];p=k[l>>2]|0;q=k[j>>2]|0;k[g>>2]=k[h>>2];q=bd(g,i,p,q,c,d)|0;r=m;return q|0}return 0}function ln(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;m=r;r=r+64|0;f=m;o=m+56|0;p=m+44|0;h=m+20|0;l=m+16|0;j=m+12|0;n=m+8|0;g=m+4|0;i[o>>0]=i[57343]|0;i[o+1>>0]=i[57344]|0;i[o+2>>0]=i[57345]|0;i[o+3>>0]=i[57346]|0;i[o+4>>0]=i[57347]|0;i[o+5>>0]=i[57348]|0;gn(o+1|0,57349,0,k[c+4>>2]|0);a=Jm()|0;k[f>>2]=e;e=p+(Gs(p,12,a,o,f)|0)|0;o=hn(p,e,c)|0;a=Yk(c)|0;k[n>>2]=a;x=0;ya(1,p|0,o|0,e|0,h|0,l|0,j|0,n|0);e=x;x=0;if(e&1){p=Wa()|0;dk(a)|0;fb(p|0)}else{dk(a)|0;k[g>>2]=k[b>>2];o=k[l>>2]|0;p=k[j>>2]|0;k[f>>2]=k[g>>2];p=bd(f,h,o,p,c,d)|0;r=m;return p|0}return 0}function mn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;m=r;r=r+112|0;g=m+8|0;a=m;o=m+75|0;i=m+32|0;l=m+28|0;j=m+24|0;n=m+20|0;h=m+16|0;p=a;k[p>>2]=37;k[p+4>>2]=0;gn(a+1|0,57351,0,k[c+4>>2]|0);p=Jm()|0;q=g;k[q>>2]=e;k[q+4>>2]=f;f=o+(Gs(o,23,p,a,g)|0)|0;e=hn(o,f,c)|0;a=Yk(c)|0;k[n>>2]=a;x=0;ya(1,o|0,e|0,f|0,i|0,l|0,j|0,n|0);f=x;x=0;if(f&1){q=Wa()|0;dk(a)|0;fb(q|0)}else{dk(a)|0;k[h>>2]=k[b>>2];p=k[l>>2]|0;q=k[j>>2]|0;k[g>>2]=k[h>>2];q=bd(g,i,p,q,c,d)|0;r=m;return q|0}return 0}function nn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0;z=r;r=r+176|0;t=z+84|0;n=z+48|0;m=z+32|0;i=z+24|0;f=z+8|0;l=z;q=z+88|0;s=z+80|0;h=z+118|0;y=z+76|0;w=z+72|0;u=z+68|0;v=z+64|0;j=l;k[j>>2]=37;k[j+4>>2]=0;j=on(l+1|0,57354,k[c+4>>2]|0)|0;k[s>>2]=q;a=Jm()|0;if(j){k[f>>2]=k[c+8>>2];p[f+8>>3]=e;f=Gs(q,30,a,l,f)|0}else{p[i>>3]=e;f=Gs(q,30,a,l,i)|0}a:do if((f|0)>29){x=0;a=Da(3)|0;f=x;x=0;f=f&1;if(j){if(!f?(x=0,k[m>>2]=k[c+8>>2],p[m+8>>3]=e,g=Ea(7,s|0,a|0,l|0,m|0)|0,o=x,x=0,!(o&1)):0)A=12}else if(!f?(x=0,k[n>>2]=k[c+8>>2],p[n+8>>3]=e,o=Ea(7,s|0,a|0,l|0,n|0)|0,n=x,x=0,!(n&1)):0){g=o;A=12}do if((A|0)==12){a=k[s>>2]|0;if(!a){x=0;Ga(6);o=x;x=0;if(o&1)break;f=k[s>>2]|0}else f=a;a=f;l=f;A=16;break a}while(0);a=Wa()|0}else{a=k[s>>2]|0;l=0;g=f;A=16}while(0);if((A|0)==16){i=a+g|0;j=hn(a,i,c)|0;do if((a|0)==(q|0)){a=q;f=0;A=22}else{g=tj(g<<1)|0;if(!g){x=0;Ga(6);A=x;x=0;if(A&1){f=0;A=20;break}a=k[s>>2]|0}f=g;h=g;A=22}while(0);do if((A|0)==22){x=0;g=ta(67,c|0)|0;s=x;x=0;if(!(s&1)){k[u>>2]=g;x=0;ya(2,a|0,j|0,i|0,h|0,y|0,w|0,u|0);u=x;x=0;if(u&1){a=Wa()|0;dk(g)|0;break}dk(g)|0;k[v>>2]=k[b>>2];A=k[y>>2]|0;a=k[w>>2]|0;x=0;k[t>>2]=k[v>>2];a=sa(39,t|0,h|0,A|0,a|0,c|0,d|0)|0;A=x;x=0;if(!(A&1)){k[b>>2]=a;if(f)uj(f);if(l)uj(l);r=z;return a|0}else A=20}else A=20}while(0);if((A|0)==20)a=Wa()|0;if(f)uj(f);if(l)uj(l)}fb(a|0);return 0}function on(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;if(c&2048){i[a>>0]=43;a=a+1|0}if(c&1024){i[a>>0]=35;a=a+1|0}g=c&260;e=c>>>14;h=(g|0)==260;if(h)f=0;else{i[a>>0]=46;i[a+1>>0]=42;a=a+2|0;f=1}c=i[b>>0]|0;if(c<<24>>24){d=a;while(1){b=b+1|0;a=d+1|0;i[d>>0]=c;c=i[b>>0]|0;if(!(c<<24>>24))break;else d=a}}a:do switch(g|0){case 4:if(!(e&1)){i[a>>0]=102;break a}else{i[a>>0]=70;break a}case 256:if(!(e&1)){i[a>>0]=101;break a}else{i[a>>0]=69;break a}default:{c=(e&1|0)!=0;if(h)if(c){i[a>>0]=65;break a}else{i[a>>0]=97;break a}else if(c){i[a>>0]=71;break a}else{i[a>>0]=103;break a}}}while(0);return f|0}function pn(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0;z=r;r=r+16|0;A=z;y=wq(g,43752)|0;v=wq(g,43892)|0;Mb[k[(k[v>>2]|0)+20>>2]&127](A,v);k[f>>2]=d;g=i[a>>0]|0;switch(g<<24>>24){case 43:case 45:{x=0;g=Aa(k[(k[y>>2]|0)+28>>2]|0,y|0,g|0)|0;w=x;x=0;if(w&1)u=8;else{m=k[f>>2]|0;k[f>>2]=m+1;i[m>>0]=g;m=a+1|0;u=10}break}default:{m=a;u=10}}a:do if((u|0)==10){w=c;b:do if((w-m|0)>1?(i[m>>0]|0)==48:0){j=m+1|0;switch(i[j>>0]|0){case 88:case 120:break;default:{u=11;break b}}x=0;g=Aa(k[(k[y>>2]|0)+28>>2]|0,y|0,48)|0;t=x;x=0;if(t&1){u=8;break a}t=k[f>>2]|0;k[f>>2]=t+1;i[t>>0]=g;m=m+2|0;x=0;g=Aa(k[(k[y>>2]|0)+28>>2]|0,y|0,i[j>>0]|0)|0;t=x;x=0;if(t&1){u=8;break a}t=k[f>>2]|0;k[f>>2]=t+1;i[t>>0]=g;if(m>>>0<c>>>0){g=m;while(1){j=i[g>>0]|0;x=0;l=Da(3)|0;t=x;x=0;if(t&1)break;x=0;j=Aa(29,j<<24>>24|0,l|0)|0;t=x;x=0;if(t&1)break;if(!j){t=m;break b}g=g+1|0;if(g>>>0>=c>>>0){t=m;break b}}g=Wa()|0;break a}else{t=m;g=m}}else u=11;while(0);c:do if((u|0)==11)if(m>>>0<c>>>0){g=m;while(1){j=i[g>>0]|0;x=0;l=Da(3)|0;t=x;x=0;if(t&1)break;x=0;j=Aa(30,j<<24>>24|0,l|0)|0;t=x;x=0;if(t&1)break;if(!j){t=m;break c}g=g+1|0;if(g>>>0>=c>>>0){t=m;break c}}g=Wa()|0;break a}else{t=m;g=m}while(0);q=i[A>>0]|0;s=A+4|0;if(((q&1)==0?(q&255)>>>1:k[s>>2]|0)|0){if((t|0)!=(g|0)?(n=g+-1|0,t>>>0<n>>>0):0){l=t;j=n;do{q=i[l>>0]|0;i[l>>0]=i[j>>0]|0;i[j>>0]=q;l=l+1|0;j=j+-1|0}while(l>>>0<j>>>0)}x=0;n=ta(k[(k[v>>2]|0)+16>>2]|0,v|0)|0;q=x;x=0;if(q&1){u=8;break}o=A+8|0;p=A+1|0;d:do if(t>>>0<g>>>0){j=0;l=0;q=t;while(1){m=i[((i[A>>0]&1)==0?p:k[o>>2]|0)+l>>0]|0;if(m<<24>>24>0&(j|0)==(m<<24>>24|0)){j=k[f>>2]|0;k[f>>2]=j+1;i[j>>0]=n;j=i[A>>0]|0;m=0;l=(l>>>0<(((j&1)==0?(j&255)>>>1:k[s>>2]|0)+-1|0)>>>0&1)+l|0}else m=j;x=0;j=Aa(k[(k[y>>2]|0)+28>>2]|0,y|0,i[q>>0]|0)|0;B=x;x=0;if(B&1)break;B=k[f>>2]|0;k[f>>2]=B+1;i[B>>0]=j;q=q+1|0;if(q>>>0>=g>>>0)break d;else j=m+1|0}g=Wa()|0;break a}while(0);j=d+(t-a)|0;l=k[f>>2]|0;if((j|0)!=(l|0)?(h=l+-1|0,j>>>0<h>>>0):0){do{B=i[j>>0]|0;i[j>>0]=i[h>>0]|0;i[h>>0]=B;j=j+1|0;h=h+-1|0}while(j>>>0<h>>>0);j=y}else j=y}else{x=0;Ea(k[(k[y>>2]|0)+32>>2]|0,y|0,t|0,g|0,k[f>>2]|0)|0;B=x;x=0;if(B&1){u=8;break}k[f>>2]=(k[f>>2]|0)+(g-t);j=y}e:do if(g>>>0<c>>>0){while(1){h=i[g>>0]|0;if(h<<24>>24==46)break;x=0;h=Aa(k[(k[j>>2]|0)+28>>2]|0,y|0,h|0)|0;B=x;x=0;if(B&1){u=4;break}B=k[f>>2]|0;k[f>>2]=B+1;i[B>>0]=h;g=g+1|0;if(g>>>0>=c>>>0)break e}if((u|0)==4){g=Wa()|0;break a}x=0;h=ta(k[(k[v>>2]|0)+12>>2]|0,v|0)|0;B=x;x=0;if(B&1){u=8;break a}B=k[f>>2]|0;k[f>>2]=B+1;i[B>>0]=h;g=g+1|0}while(0);x=0;Ea(k[(k[y>>2]|0)+32>>2]|0,y|0,g|0,c|0,k[f>>2]|0)|0;B=x;x=0;if(B&1)u=8;else{B=(k[f>>2]|0)+(w-g)|0;k[f>>2]=B;k[e>>2]=(b|0)==(c|0)?B:d+(b-a)|0;wk(A);r=z;return}}while(0);if((u|0)==8)g=Wa()|0;wk(A);fb(g|0)}function qn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0;z=r;r=r+176|0;t=z+76|0;n=z+48|0;m=z+32|0;i=z+24|0;f=z+8|0;l=z;q=z+80|0;s=z+72|0;h=z+110|0;y=z+68|0;w=z+64|0;u=z+60|0;v=z+56|0;j=l;k[j>>2]=37;k[j+4>>2]=0;j=on(l+1|0,57355,k[c+4>>2]|0)|0;k[s>>2]=q;a=Jm()|0;if(j){k[f>>2]=k[c+8>>2];p[f+8>>3]=e;f=Gs(q,30,a,l,f)|0}else{p[i>>3]=e;f=Gs(q,30,a,l,i)|0}a:do if((f|0)>29){x=0;a=Da(3)|0;f=x;x=0;f=f&1;if(j){if(!f?(x=0,k[m>>2]=k[c+8>>2],p[m+8>>3]=e,g=Ea(7,s|0,a|0,l|0,m|0)|0,o=x,x=0,!(o&1)):0)A=12}else if(!f?(x=0,p[n>>3]=e,o=Ea(7,s|0,a|0,l|0,n|0)|0,n=x,x=0,!(n&1)):0){g=o;A=12}do if((A|0)==12){a=k[s>>2]|0;if(!a){x=0;Ga(6);o=x;x=0;if(o&1)break;f=k[s>>2]|0}else f=a;a=f;l=f;A=16;break a}while(0);a=Wa()|0}else{a=k[s>>2]|0;l=0;g=f;A=16}while(0);if((A|0)==16){i=a+g|0;j=hn(a,i,c)|0;do if((a|0)==(q|0)){a=q;f=0;A=22}else{g=tj(g<<1)|0;if(!g){x=0;Ga(6);A=x;x=0;if(A&1){f=0;A=20;break}a=k[s>>2]|0}f=g;h=g;A=22}while(0);do if((A|0)==22){x=0;g=ta(67,c|0)|0;s=x;x=0;if(!(s&1)){k[u>>2]=g;x=0;ya(2,a|0,j|0,i|0,h|0,y|0,w|0,u|0);u=x;x=0;if(u&1){a=Wa()|0;dk(g)|0;break}dk(g)|0;k[v>>2]=k[b>>2];A=k[y>>2]|0;a=k[w>>2]|0;x=0;k[t>>2]=k[v>>2];a=sa(39,t|0,h|0,A|0,a|0,c|0,d|0)|0;A=x;x=0;if(!(A&1)){k[b>>2]=a;if(f)uj(f);if(l)uj(l);r=z;return a|0}else A=20}else A=20}while(0);if((A|0)==20)a=Wa()|0;if(f)uj(f);if(l)uj(l)}fb(a|0);return 0}function rn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;o=r;r=r+80|0;j=o;a=o+70|0;m=o+12|0;n=o+32|0;h=o+8|0;l=o+4|0;i[a>>0]=i[57357]|0;i[a+1>>0]=i[57358]|0;i[a+2>>0]=i[57359]|0;i[a+3>>0]=i[57360]|0;i[a+4>>0]=i[57361]|0;i[a+5>>0]=i[57362]|0;f=Jm()|0;k[j>>2]=e;a=Gs(m,20,f,a,j)|0;e=m+a|0;f=hn(m,e,c)|0;g=Yk(c)|0;k[h>>2]=g;x=0;h=Aa(26,h|0,43752)|0;p=x;x=0;if(p&1){p=Wa()|0;dk(g)|0;fb(p|0)}else{dk(g)|0;Zb[k[(k[h>>2]|0)+32>>2]&31](h,m,e,n)|0;p=n+a|0;k[l>>2]=k[b>>2];k[j>>2]=k[l>>2];p=bd(j,n,(f|0)==(e|0)?p:n+(f-m)|0,p,c,d)|0;r=o;return p|0}return 0}function sn(a){a=a|0;return}function tn(a){a=a|0;Sg(a);return}function un(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0;l=r;r=r+32|0;f=l+20|0;g=l+16|0;h=l+12|0;j=l;a:do if(!(k[c+4>>2]&1)){j=k[(k[a>>2]|0)+24>>2]|0;k[g>>2]=k[b>>2];k[f>>2]=k[g>>2];f=Wb[j&31](a,f,c,d,e&1)|0}else{f=Yk(c)|0;k[h>>2]=f;x=0;g=Aa(26,h|0,43900)|0;h=x;x=0;b:do if(h&1){l=Wa()|0;dk(f)|0;f=l}else{dk(f)|0;f=k[g>>2]|0;if(e)Mb[k[f+24>>2]&127](j,g);else Mb[k[f+28>>2]&127](j,g);a=i[j>>0]|0;c=(a&1)==0;f=j+4|0;e=j+8|0;h=c?f:j+4|0;f=c?f:k[j+8>>2]|0;c=(a&1)==0;c:do if((f|0)!=((c?h:k[e>>2]|0)+((c?(a&255)>>>1:k[h>>2]|0)<<2)|0)){while(1){g=k[f>>2]|0;d=k[b>>2]|0;if(d){c=d+24|0;a=k[c>>2]|0;if((a|0)==(k[d+28>>2]|0)){x=0;g=Aa(k[(k[d>>2]|0)+52>>2]|0,d|0,g|0)|0;a=x;x=0;if(a&1)break}else{k[c>>2]=a+4;k[a>>2]=g}if((g|0)==-1)k[b>>2]=0}f=f+4|0;a=i[j>>0]|0;c=(a&1)==0;if((f|0)==((c?h:k[e>>2]|0)+((c?(a&255)>>>1:k[h>>2]|0)<<2)|0))break c}f=Wa()|0;Kk(j);break b}while(0);f=k[b>>2]|0;Kk(j);break a}while(0);fb(f|0)}while(0);r=l;return f|0}function vn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;m=r;r=r+128|0;f=m;o=m+116|0;p=m+104|0;h=m+20|0;l=m+16|0;j=m+12|0;n=m+8|0;g=m+4|0;i[o>>0]=i[57343]|0;i[o+1>>0]=i[57344]|0;i[o+2>>0]=i[57345]|0;i[o+3>>0]=i[57346]|0;i[o+4>>0]=i[57347]|0;i[o+5>>0]=i[57348]|0;gn(o+1|0,57349,1,k[c+4>>2]|0);a=Jm()|0;k[f>>2]=e;e=p+(Gs(p,12,a,o,f)|0)|0;o=hn(p,e,c)|0;a=Yk(c)|0;k[n>>2]=a;x=0;ya(3,p|0,o|0,e|0,h|0,l|0,j|0,n|0);e=x;x=0;if(e&1){p=Wa()|0;dk(a)|0;fb(p|0)}else{dk(a)|0;k[g>>2]=k[b>>2];o=k[l>>2]|0;p=k[j>>2]|0;k[f>>2]=k[g>>2];p=Is(f,h,o,p,c,d)|0;r=m;return p|0}return 0}function wn(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0;u=r;r=r+16|0;v=u;s=wq(g,43744)|0;l=wq(g,43900)|0;Mb[k[(k[l>>2]|0)+20>>2]&127](v,l);p=i[v>>0]|0;q=v+4|0;a:do if(!(((p&1)==0?(p&255)>>>1:k[q>>2]|0)|0)){x=0;Ea(k[(k[s>>2]|0)+48>>2]|0,s|0,a|0,c|0,d|0)|0;t=x;x=0;if(t&1)t=5;else{g=d+(c-a<<2)|0;k[f>>2]=g;t=28}}else{k[f>>2]=d;g=i[a>>0]|0;switch(g<<24>>24){case 43:case 45:{x=0;g=Aa(k[(k[s>>2]|0)+44>>2]|0,s|0,g|0)|0;p=x;x=0;if(p&1){t=5;break a}j=k[f>>2]|0;k[f>>2]=j+4;k[j>>2]=g;j=a+1|0;break}default:j=a}b:do if((c-j|0)>1?(i[j>>0]|0)==48:0){g=j+1|0;switch(i[g>>0]|0){case 88:case 120:break;default:{p=j;break b}}x=0;h=Aa(k[(k[s>>2]|0)+44>>2]|0,s|0,48)|0;p=x;x=0;if(p&1){t=5;break a}p=k[f>>2]|0;k[f>>2]=p+4;k[p>>2]=h;x=0;g=Aa(k[(k[s>>2]|0)+44>>2]|0,s|0,i[g>>0]|0)|0;p=x;x=0;if(p&1){t=5;break a}p=k[f>>2]|0;k[f>>2]=p+4;k[p>>2]=g;p=j+2|0}else p=j;while(0);if((p|0)!=(c|0)?(m=c+-1|0,p>>>0<m>>>0):0){h=p;g=m;do{o=i[h>>0]|0;i[h>>0]=i[g>>0]|0;i[g>>0]=o;h=h+1|0;g=g+-1|0}while(h>>>0<g>>>0)}x=0;l=ta(k[(k[l>>2]|0)+16>>2]|0,l|0)|0;o=x;x=0;if(!(o&1)){m=v+8|0;n=v+1|0;c:do if(p>>>0<c>>>0){g=0;h=0;o=p;while(1){j=i[((i[v>>0]&1)==0?n:k[m>>2]|0)+h>>0]|0;if(j<<24>>24!=0&(g|0)==(j<<24>>24|0)){g=k[f>>2]|0;k[f>>2]=g+4;k[g>>2]=l;g=i[v>>0]|0;j=0;h=(h>>>0<(((g&1)==0?(g&255)>>>1:k[q>>2]|0)+-1|0)>>>0&1)+h|0}else j=g;x=0;g=Aa(k[(k[s>>2]|0)+44>>2]|0,s|0,i[o>>0]|0)|0;w=x;x=0;if(w&1)break;w=k[f>>2]|0;k[f>>2]=w+4;k[w>>2]=g;o=o+1|0;if(o>>>0>=c>>>0)break c;else g=j+1|0}g=Wa()|0;break a}while(0);j=a;g=d+(p-j<<2)|0;h=k[f>>2]|0;if((g|0)!=(h|0)){a=h+-4|0;if(g>>>0<a>>>0){do{w=k[g>>2]|0;k[g>>2]=k[a>>2];k[a>>2]=w;g=g+4|0;a=a+-4|0}while(g>>>0<a>>>0);a=j;g=h;t=28}else{a=j;g=h;t=28}}else{a=j;t=28}}else t=5}while(0);if((t|0)==5)g=Wa()|0;else if((t|0)==28){k[e>>2]=(b|0)==(c|0)?g:d+(b-a<<2)|0;wk(v);r=u;return}wk(v);fb(g|0)}function xn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;m=r;r=r+224|0;g=m+8|0;a=m;o=m+196|0;i=m+32|0;l=m+28|0;j=m+24|0;n=m+20|0;h=m+16|0;p=a;k[p>>2]=37;k[p+4>>2]=0;gn(a+1|0,57351,1,k[c+4>>2]|0);p=Jm()|0;q=g;k[q>>2]=e;k[q+4>>2]=f;f=o+(Gs(o,22,p,a,g)|0)|0;e=hn(o,f,c)|0;a=Yk(c)|0;k[n>>2]=a;x=0;ya(3,o|0,e|0,f|0,i|0,l|0,j|0,n|0);f=x;x=0;if(f&1){q=Wa()|0;dk(a)|0;fb(q|0)}else{dk(a)|0;k[h>>2]=k[b>>2];p=k[l>>2]|0;q=k[j>>2]|0;k[g>>2]=k[h>>2];q=Is(g,i,p,q,c,d)|0;r=m;return q|0}return 0}function yn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;m=r;r=r+128|0;f=m;o=m+116|0;p=m+104|0;h=m+20|0;l=m+16|0;j=m+12|0;n=m+8|0;g=m+4|0;i[o>>0]=i[57343]|0;i[o+1>>0]=i[57344]|0;i[o+2>>0]=i[57345]|0;i[o+3>>0]=i[57346]|0;i[o+4>>0]=i[57347]|0;i[o+5>>0]=i[57348]|0;gn(o+1|0,57349,0,k[c+4>>2]|0);a=Jm()|0;k[f>>2]=e;e=p+(Gs(p,12,a,o,f)|0)|0;o=hn(p,e,c)|0;a=Yk(c)|0;k[n>>2]=a;x=0;ya(3,p|0,o|0,e|0,h|0,l|0,j|0,n|0);e=x;x=0;if(e&1){p=Wa()|0;dk(a)|0;fb(p|0)}else{dk(a)|0;k[g>>2]=k[b>>2];o=k[l>>2]|0;p=k[j>>2]|0;k[f>>2]=k[g>>2];p=Is(f,h,o,p,c,d)|0;r=m;return p|0}return 0}function zn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;m=r;r=r+240|0;g=m+8|0;a=m;o=m+204|0;i=m+32|0;l=m+28|0;j=m+24|0;n=m+20|0;h=m+16|0;p=a;k[p>>2]=37;k[p+4>>2]=0;gn(a+1|0,57351,0,k[c+4>>2]|0);p=Jm()|0;q=g;k[q>>2]=e;k[q+4>>2]=f;f=o+(Gs(o,23,p,a,g)|0)|0;e=hn(o,f,c)|0;a=Yk(c)|0;k[n>>2]=a;x=0;ya(3,o|0,e|0,f|0,i|0,l|0,j|0,n|0);f=x;x=0;if(f&1){q=Wa()|0;dk(a)|0;fb(q|0)}else{dk(a)|0;k[h>>2]=k[b>>2];p=k[l>>2]|0;q=k[j>>2]|0;k[g>>2]=k[h>>2];q=Is(g,i,p,q,c,d)|0;r=m;return q|0}return 0}function An(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0;z=r;r=r+352|0;t=z+312|0;n=z+48|0;m=z+32|0;i=z+24|0;f=z+8|0;l=z;q=z+316|0;s=z+80|0;h=z+84|0;y=z+76|0;w=z+72|0;u=z+68|0;v=z+64|0;j=l;k[j>>2]=37;k[j+4>>2]=0;j=on(l+1|0,57354,k[c+4>>2]|0)|0;k[s>>2]=q;a=Jm()|0;if(j){k[f>>2]=k[c+8>>2];p[f+8>>3]=e;f=Gs(q,30,a,l,f)|0}else{p[i>>3]=e;f=Gs(q,30,a,l,i)|0}a:do if((f|0)>29){x=0;a=Da(3)|0;f=x;x=0;f=f&1;if(j){if(!f?(x=0,k[m>>2]=k[c+8>>2],p[m+8>>3]=e,g=Ea(7,s|0,a|0,l|0,m|0)|0,o=x,x=0,!(o&1)):0)A=12}else if(!f?(x=0,k[n>>2]=k[c+8>>2],p[n+8>>3]=e,o=Ea(7,s|0,a|0,l|0,n|0)|0,n=x,x=0,!(n&1)):0){g=o;A=12}do if((A|0)==12){a=k[s>>2]|0;if(!a){x=0;Ga(6);o=x;x=0;if(o&1)break;f=k[s>>2]|0}else f=a;a=f;l=f;A=16;break a}while(0);a=Wa()|0}else{a=k[s>>2]|0;l=0;g=f;A=16}while(0);if((A|0)==16){i=a+g|0;j=hn(a,i,c)|0;do if((a|0)==(q|0)){a=q;f=0;A=22}else{g=tj(g<<3)|0;if(!g){x=0;Ga(6);A=x;x=0;if(A&1){f=0;A=20;break}a=k[s>>2]|0}f=g;h=g;A=22}while(0);do if((A|0)==22){x=0;g=ta(67,c|0)|0;s=x;x=0;if(!(s&1)){k[u>>2]=g;x=0;ya(4,a|0,j|0,i|0,h|0,y|0,w|0,u|0);u=x;x=0;if(u&1){a=Wa()|0;dk(g)|0;break}dk(g)|0;k[v>>2]=k[b>>2];A=k[y>>2]|0;a=k[w>>2]|0;x=0;k[t>>2]=k[v>>2];a=sa(40,t|0,h|0,A|0,a|0,c|0,d|0)|0;A=x;x=0;if(!(A&1)){k[b>>2]=a;if(f)uj(f);if(l)uj(l);r=z;return a|0}else A=20}else A=20}while(0);if((A|0)==20)a=Wa()|0;if(f)uj(f);if(l)uj(l)}fb(a|0);return 0}function Bn(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0;y=r;r=r+16|0;z=y;w=wq(g,43744)|0;u=wq(g,43900)|0;Mb[k[(k[u>>2]|0)+20>>2]&127](z,u);k[f>>2]=d;g=i[a>>0]|0;switch(g<<24>>24){case 43:case 45:{x=0;g=Aa(k[(k[w>>2]|0)+44>>2]|0,w|0,g|0)|0;v=x;x=0;if(v&1)t=8;else{l=k[f>>2]|0;k[f>>2]=l+4;k[l>>2]=g;l=a+1|0;t=10}break}default:{l=a;t=10}}a:do if((t|0)==10){v=c;b:do if((v-l|0)>1?(i[l>>0]|0)==48:0){h=l+1|0;switch(i[h>>0]|0){case 88:case 120:break;default:{t=11;break b}}x=0;g=Aa(k[(k[w>>2]|0)+44>>2]|0,w|0,48)|0;s=x;x=0;if(s&1){t=8;break a}s=k[f>>2]|0;k[f>>2]=s+4;k[s>>2]=g;l=l+2|0;x=0;g=Aa(k[(k[w>>2]|0)+44>>2]|0,w|0,i[h>>0]|0)|0;s=x;x=0;if(s&1){t=8;break a}s=k[f>>2]|0;k[f>>2]=s+4;k[s>>2]=g;if(l>>>0<c>>>0){g=l;while(1){h=i[g>>0]|0;x=0;j=Da(3)|0;s=x;x=0;if(s&1)break;x=0;h=Aa(29,h<<24>>24|0,j|0)|0;s=x;x=0;if(s&1)break;if(!h){s=l;break b}g=g+1|0;if(g>>>0>=c>>>0){s=l;break b}}g=Wa()|0;break a}else{s=l;g=l}}else t=11;while(0);c:do if((t|0)==11)if(l>>>0<c>>>0){g=l;while(1){h=i[g>>0]|0;x=0;j=Da(3)|0;s=x;x=0;if(s&1)break;x=0;h=Aa(30,h<<24>>24|0,j|0)|0;s=x;x=0;if(s&1)break;if(!h){s=l;break c}g=g+1|0;if(g>>>0>=c>>>0){s=l;break c}}g=Wa()|0;break a}else{s=l;g=l}while(0);p=i[z>>0]|0;q=z+4|0;if(((p&1)==0?(p&255)>>>1:k[q>>2]|0)|0){if((s|0)!=(g|0)?(m=g+-1|0,s>>>0<m>>>0):0){j=s;h=m;do{p=i[j>>0]|0;i[j>>0]=i[h>>0]|0;i[h>>0]=p;j=j+1|0;h=h+-1|0}while(j>>>0<h>>>0)}x=0;m=ta(k[(k[u>>2]|0)+16>>2]|0,u|0)|0;p=x;x=0;if(p&1){t=8;break}n=z+8|0;o=z+1|0;d:do if(s>>>0<g>>>0){h=0;j=0;p=s;while(1){l=i[((i[z>>0]&1)==0?o:k[n>>2]|0)+j>>0]|0;if(l<<24>>24>0&(h|0)==(l<<24>>24|0)){h=k[f>>2]|0;k[f>>2]=h+4;k[h>>2]=m;h=i[z>>0]|0;l=0;j=(j>>>0<(((h&1)==0?(h&255)>>>1:k[q>>2]|0)+-1|0)>>>0&1)+j|0}else l=h;x=0;h=Aa(k[(k[w>>2]|0)+44>>2]|0,w|0,i[p>>0]|0)|0;A=x;x=0;if(A&1)break;A=k[f>>2]|0;k[f>>2]=A+4;k[A>>2]=h;p=p+1|0;if(p>>>0>=g>>>0)break d;else h=l+1|0}g=Wa()|0;break a}while(0);h=d+(s-a<<2)|0;l=k[f>>2]|0;if((h|0)!=(l|0)){j=l+-4|0;if(h>>>0<j>>>0){do{A=k[h>>2]|0;k[h>>2]=k[j>>2];k[j>>2]=A;h=h+4|0;j=j+-4|0}while(h>>>0<j>>>0);m=w;h=l}else{m=w;h=l}}else m=w}else{x=0;Ea(k[(k[w>>2]|0)+48>>2]|0,w|0,s|0,g|0,k[f>>2]|0)|0;A=x;x=0;if(A&1){t=8;break}h=(k[f>>2]|0)+(g-s<<2)|0;k[f>>2]=h;m=w}e:do if(g>>>0<c>>>0){while(1){h=i[g>>0]|0;if(h<<24>>24==46){j=g;break}x=0;j=Aa(k[(k[m>>2]|0)+44>>2]|0,w|0,h|0)|0;A=x;x=0;if(A&1){t=4;break}A=k[f>>2]|0;h=A+4|0;k[f>>2]=h;k[A>>2]=j;g=g+1|0;if(g>>>0>=c>>>0)break e}if((t|0)==4){g=Wa()|0;break a}x=0;g=ta(k[(k[u>>2]|0)+12>>2]|0,u|0)|0;A=x;x=0;if(A&1){t=8;break a}A=k[f>>2]|0;h=A+4|0;k[f>>2]=h;k[A>>2]=g;g=j+1|0}while(0);x=0;Ea(k[(k[w>>2]|0)+48>>2]|0,w|0,g|0,c|0,h|0)|0;A=x;x=0;if(A&1)t=8;else{A=(k[f>>2]|0)+(v-g<<2)|0;k[f>>2]=A;k[e>>2]=(b|0)==(c|0)?A:d+(b-a<<2)|0;wk(z);r=y;return}}while(0);if((t|0)==8)g=Wa()|0;wk(z);fb(g|0)}function Cn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0;z=r;r=r+352|0;t=z+304|0;n=z+48|0;m=z+32|0;i=z+24|0;f=z+8|0;l=z;q=z+308|0;s=z+72|0;h=z+76|0;y=z+68|0;w=z+64|0;u=z+60|0;v=z+56|0;j=l;k[j>>2]=37;k[j+4>>2]=0;j=on(l+1|0,57355,k[c+4>>2]|0)|0;k[s>>2]=q;a=Jm()|0;if(j){k[f>>2]=k[c+8>>2];p[f+8>>3]=e;f=Gs(q,30,a,l,f)|0}else{p[i>>3]=e;f=Gs(q,30,a,l,i)|0}a:do if((f|0)>29){x=0;a=Da(3)|0;f=x;x=0;f=f&1;if(j){if(!f?(x=0,k[m>>2]=k[c+8>>2],p[m+8>>3]=e,g=Ea(7,s|0,a|0,l|0,m|0)|0,o=x,x=0,!(o&1)):0)A=12}else if(!f?(x=0,p[n>>3]=e,o=Ea(7,s|0,a|0,l|0,n|0)|0,n=x,x=0,!(n&1)):0){g=o;A=12}do if((A|0)==12){a=k[s>>2]|0;if(!a){x=0;Ga(6);o=x;x=0;if(o&1)break;f=k[s>>2]|0}else f=a;a=f;l=f;A=16;break a}while(0);a=Wa()|0}else{a=k[s>>2]|0;l=0;g=f;A=16}while(0);if((A|0)==16){i=a+g|0;j=hn(a,i,c)|0;do if((a|0)==(q|0)){a=q;f=0;A=22}else{g=tj(g<<3)|0;if(!g){x=0;Ga(6);A=x;x=0;if(A&1){f=0;A=20;break}a=k[s>>2]|0}f=g;h=g;A=22}while(0);do if((A|0)==22){x=0;g=ta(67,c|0)|0;s=x;x=0;if(!(s&1)){k[u>>2]=g;x=0;ya(4,a|0,j|0,i|0,h|0,y|0,w|0,u|0);u=x;x=0;if(u&1){a=Wa()|0;dk(g)|0;break}dk(g)|0;k[v>>2]=k[b>>2];A=k[y>>2]|0;a=k[w>>2]|0;x=0;k[t>>2]=k[v>>2];a=sa(40,t|0,h|0,A|0,a|0,c|0,d|0)|0;A=x;x=0;if(!(A&1)){k[b>>2]=a;if(f)uj(f);if(l)uj(l);r=z;return a|0}else A=20}else A=20}while(0);if((A|0)==20)a=Wa()|0;if(f)uj(f);if(l)uj(l)}fb(a|0);return 0}function Dn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;o=r;r=r+192|0;j=o;a=o+180|0;m=o+160|0;n=o+12|0;h=o+8|0;l=o+4|0;i[a>>0]=i[57357]|0;i[a+1>>0]=i[57358]|0;i[a+2>>0]=i[57359]|0;i[a+3>>0]=i[57360]|0;i[a+4>>0]=i[57361]|0;i[a+5>>0]=i[57362]|0;f=Jm()|0;k[j>>2]=e;a=Gs(m,20,f,a,j)|0;e=m+a|0;f=hn(m,e,c)|0;g=Yk(c)|0;k[h>>2]=g;x=0;h=Aa(26,h|0,43744)|0;p=x;x=0;if(p&1){p=Wa()|0;dk(g)|0;fb(p|0)}else{dk(g)|0;Zb[k[(k[h>>2]|0)+48>>2]&31](h,m,e,n)|0;p=n+(a<<2)|0;k[l>>2]=k[b>>2];k[j>>2]=k[l>>2];p=Is(j,n,(f|0)==(e|0)?p:n+(f-m<<2)|0,p,c,d)|0;r=o;return p|0}return 0}function En(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0;C=r;r=r+32|0;v=C+16|0;u=C+12|0;z=C+8|0;w=C+4|0;y=C;m=Yk(d)|0;k[z>>2]=m;x=0;z=Aa(26,z|0,43752)|0;t=x;x=0;if(t&1){C=Wa()|0;dk(m)|0;fb(C|0)}dk(m)|0;k[e>>2]=0;t=z+8|0;m=k[b>>2]|0;a:do if((g|0)!=(h|0)){b:while(1){n=m;if(m){if((k[m+12>>2]|0)==(k[m+16>>2]|0)?(Ob[k[(k[m>>2]|0)+36>>2]&127](m)|0)==-1:0){k[b>>2]=0;m=0;n=0}}else m=0;q=(m|0)==0;p=k[c>>2]|0;o=p;do if(p){if((k[p+12>>2]|0)==(k[p+16>>2]|0)?(Ob[k[(k[p>>2]|0)+36>>2]&127](p)|0)==-1:0){k[c>>2]=0;o=0;B=12;break}if(!q){B=13;break b}}else B=12;while(0);if((B|0)==12){B=0;if(q){B=13;break}else p=0}c:do if((Qb[k[(k[z>>2]|0)+36>>2]&63](z,i[g>>0]|0,0)|0)<<24>>24==37){p=g+1|0;if((p|0)==(h|0)){B=17;break b}s=Qb[k[(k[z>>2]|0)+36>>2]&63](z,i[p>>0]|0,0)|0;switch(s<<24>>24){case 48:case 69:{q=g+2|0;if((q|0)==(h|0)){B=20;break b}g=p;p=Qb[k[(k[z>>2]|0)+36>>2]&63](z,i[q>>0]|0,0)|0;m=s;break}default:{p=s;m=0}}s=k[(k[a>>2]|0)+36>>2]|0;k[w>>2]=n;k[y>>2]=o;k[u>>2]=k[w>>2];k[v>>2]=k[y>>2];s=ac[s&15](a,u,v,d,e,f,p,m)|0;k[b>>2]=s;g=g+2|0}else{n=i[g>>0]|0;if(n<<24>>24>-1?(A=k[t>>2]|0,(j[A+(n<<24>>24<<1)>>1]&8192)!=0):0){do{g=g+1|0;if((g|0)==(h|0)){g=h;break}n=i[g>>0]|0;if(n<<24>>24<=-1)break}while((j[A+(n<<24>>24<<1)>>1]&8192)!=0);n=p;while(1){if(m){if((k[m+12>>2]|0)==(k[m+16>>2]|0)?(Ob[k[(k[m>>2]|0)+36>>2]&127](m)|0)==-1:0){k[b>>2]=0;m=0}}else m=0;o=(m|0)==0;do if(p){if((k[p+12>>2]|0)!=(k[p+16>>2]|0))if(o){s=n;break}else break c;if((Ob[k[(k[p>>2]|0)+36>>2]&127](p)|0)!=-1)if(o^(n|0)==0){s=n;p=n;break}else break c;else{k[c>>2]=0;n=0;B=39;break}}else B=39;while(0);if((B|0)==39){B=0;if(o)break c;else{s=n;p=0}}o=m+12|0;n=k[o>>2]|0;q=m+16|0;if((n|0)==(k[q>>2]|0))n=Ob[k[(k[m>>2]|0)+36>>2]&127](m)|0;else n=l[n>>0]|0;if((n&255)<<24>>24<=-1)break c;if(!(j[(k[t>>2]|0)+(n<<24>>24<<1)>>1]&8192))break c;n=k[o>>2]|0;if((n|0)==(k[q>>2]|0)){Ob[k[(k[m>>2]|0)+40>>2]&127](m)|0;n=s;continue}else{k[o>>2]=n+1;n=s;continue}}}o=m+12|0;n=k[o>>2]|0;p=m+16|0;if((n|0)==(k[p>>2]|0))n=Ob[k[(k[m>>2]|0)+36>>2]&127](m)|0;else n=l[n>>0]|0;s=Vb[k[(k[z>>2]|0)+12>>2]&63](z,n&255)|0;if(s<<24>>24!=(Vb[k[(k[z>>2]|0)+12>>2]&63](z,i[g>>0]|0)|0)<<24>>24){B=57;break b}n=k[o>>2]|0;if((n|0)==(k[p>>2]|0))Ob[k[(k[m>>2]|0)+40>>2]&127](m)|0;else k[o>>2]=n+1;g=g+1|0}while(0);m=k[b>>2]|0;if(!((g|0)!=(h|0)&(k[e>>2]|0)==0))break a}if((B|0)==13){k[e>>2]=4;break}else if((B|0)==17){k[e>>2]=4;break}else if((B|0)==20){k[e>>2]=4;break}else if((B|0)==57){k[e>>2]=4;m=k[b>>2]|0;break}}while(0);if(m){if((k[m+12>>2]|0)==(k[m+16>>2]|0)?(Ob[k[(k[m>>2]|0)+36>>2]&127](m)|0)==-1:0){k[b>>2]=0;m=0}}else m=0;g=(m|0)==0;n=k[c>>2]|0;do if(n){if((k[n+12>>2]|0)==(k[n+16>>2]|0)?(Ob[k[(k[n>>2]|0)+36>>2]&127](n)|0)==-1:0){k[c>>2]=0;B=67;break}if(!g)B=68}else B=67;while(0);if((B|0)==67?g:0)B=68;if((B|0)==68)k[e>>2]=k[e>>2]|2;r=C;return m|0}function Fn(a){a=a|0;return}function Gn(a){a=a|0;Sg(a);return}function Hn(a){a=a|0;return 2}function In(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=En(a,i,h,d,e,f,57363,57371)|0;r=g;return a|0}function Jn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0;g=r;r=r+16|0;h=g+12|0;j=g+8|0;m=g+4|0;l=g;n=a+8|0;n=Ob[k[(k[n>>2]|0)+20>>2]&127](n)|0;k[m>>2]=k[b>>2];k[l>>2]=k[c>>2];c=i[n>>0]|0;o=(c&1)==0;b=o?n+1|0:k[n+8>>2]|0;c=b+(o?(c&255)>>>1:k[n+4>>2]|0)|0;k[j>>2]=k[m>>2];k[h>>2]=k[l>>2];a=En(a,j,h,d,e,f,b,c)|0;r=g;return a|0}function Kn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;j=r;r=r+16|0;h=j+8|0;g=j+4|0;i=j;d=Yk(d)|0;k[g>>2]=d;x=0;g=Aa(26,g|0,43752)|0;l=x;x=0;if(l&1){l=Wa()|0;dk(d)|0;fb(l|0)}else{dk(d)|0;k[i>>2]=k[c>>2];k[h>>2]=k[i>>2];Ln(a,f+24|0,b,h,e,g);r=j;return k[b>>2]|0}return 0}function Ln(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;g=r;r=r+16|0;h=g+4|0;i=g;a=a+8|0;a=Ob[k[k[a>>2]>>2]&127](a)|0;k[i>>2]=k[d>>2];k[h>>2]=k[i>>2];c=(ls(c,h,a,a+168|0,f,e,0)|0)-a|0;if((c|0)<168)k[b>>2]=((c|0)/12|0|0)%7|0;r=g;return}function Mn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;j=r;r=r+16|0;h=j+8|0;g=j+4|0;i=j;d=Yk(d)|0;k[g>>2]=d;x=0;g=Aa(26,g|0,43752)|0;l=x;x=0;if(l&1){l=Wa()|0;dk(d)|0;fb(l|0)}else{dk(d)|0;k[i>>2]=k[c>>2];k[h>>2]=k[i>>2];Nn(a,f+16|0,b,h,e,g);r=j;return k[b>>2]|0}return 0}function Nn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;g=r;r=r+16|0;h=g+4|0;i=g;a=a+8|0;a=Ob[k[(k[a>>2]|0)+4>>2]&127](a)|0;k[i>>2]=k[d>>2];k[h>>2]=k[i>>2];c=(ls(c,h,a,a+288|0,f,e,0)|0)-a|0;if((c|0)<288)k[b>>2]=((c|0)/12|0|0)%12|0;r=g;return}function On(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;j=r;r=r+16|0;h=j+8|0;g=j+4|0;i=j;d=Yk(d)|0;k[g>>2]=d;x=0;g=Aa(26,g|0,43752)|0;l=x;x=0;if(l&1){l=Wa()|0;dk(d)|0;fb(l|0)}else{dk(d)|0;k[i>>2]=k[c>>2];k[h>>2]=k[i>>2];Pn(a,f+20|0,b,h,e,g);r=j;return k[b>>2]|0}return 0}function Pn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Js(c,a,e,f,4)|0;if(!(k[e>>2]&4)){if((a|0)<69)a=a+2e3|0;else a=(a+-69|0)>>>0<31?a+1900|0:a;k[b>>2]=a+-1900}r=g;return}function Qn(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;U=r;r=r+144|0;j=U+132|0;h=U+116|0;N=U+128|0;w=U+124|0;I=U+120|0;O=U+112|0;P=U+108|0;Q=U+104|0;R=U+100|0;S=U+96|0;T=U+92|0;l=U+88|0;m=U+84|0;n=U+80|0;o=U+76|0;p=U+72|0;q=U+68|0;s=U+64|0;t=U+60|0;u=U+56|0;v=U+52|0;y=U+48|0;z=U+44|0;A=U+40|0;B=U+36|0;C=U+32|0;D=U+28|0;E=U+24|0;F=U+20|0;G=U+16|0;H=U+12|0;J=U+8|0;K=U+4|0;L=U;k[e>>2]=0;M=Yk(d)|0;k[N>>2]=M;x=0;N=Aa(26,N|0,43752)|0;W=x;x=0;if(W&1){W=Wa()|0;dk(M)|0;fb(W|0)}dk(M)|0;do switch(g<<24>>24|0){case 65:case 97:{k[w>>2]=k[c>>2];k[j>>2]=k[w>>2];Ln(a,f+24|0,b,j,e,N);V=28;break}case 104:case 66:case 98:{k[I>>2]=k[c>>2];k[j>>2]=k[I>>2];Nn(a,f+16|0,b,j,e,N);V=28;break}case 99:{V=a+8|0;V=Ob[k[(k[V>>2]|0)+12>>2]&127](V)|0;k[O>>2]=k[b>>2];k[P>>2]=k[c>>2];g=i[V>>0]|0;c=(g&1)==0;W=c?V+1|0:k[V+8>>2]|0;V=W+(c?(g&255)>>>1:k[V+4>>2]|0)|0;k[h>>2]=k[O>>2];k[j>>2]=k[P>>2];V=En(a,h,j,d,e,f,W,V)|0;k[b>>2]=V;V=28;break}case 101:case 100:{k[Q>>2]=k[c>>2];k[j>>2]=k[Q>>2];Rn(a,f+12|0,b,j,e,N);V=28;break}case 68:{k[R>>2]=k[b>>2];k[S>>2]=k[c>>2];k[h>>2]=k[R>>2];k[j>>2]=k[S>>2];V=En(a,h,j,d,e,f,57371,57379)|0;k[b>>2]=V;V=28;break}case 70:{k[T>>2]=k[b>>2];k[l>>2]=k[c>>2];k[h>>2]=k[T>>2];k[j>>2]=k[l>>2];V=En(a,h,j,d,e,f,57379,57387)|0;k[b>>2]=V;V=28;break}case 72:{k[m>>2]=k[c>>2];k[j>>2]=k[m>>2];Sn(a,f+8|0,b,j,e,N);V=28;break}case 73:{k[n>>2]=k[c>>2];k[j>>2]=k[n>>2];Tn(a,f+8|0,b,j,e,N);V=28;break}case 106:{k[o>>2]=k[c>>2];k[j>>2]=k[o>>2];Un(a,f+28|0,b,j,e,N);V=28;break}case 109:{k[p>>2]=k[c>>2];k[j>>2]=k[p>>2];Vn(a,f+16|0,b,j,e,N);V=28;break}case 77:{k[q>>2]=k[c>>2];k[j>>2]=k[q>>2];Wn(a,f+4|0,b,j,e,N);V=28;break}case 116:case 110:{k[s>>2]=k[c>>2];k[j>>2]=k[s>>2];Xn(a,b,j,e,N);V=28;break}case 112:{k[t>>2]=k[c>>2];k[j>>2]=k[t>>2];Yn(a,f+8|0,b,j,e,N);V=28;break}case 114:{k[u>>2]=k[b>>2];k[v>>2]=k[c>>2];k[h>>2]=k[u>>2];k[j>>2]=k[v>>2];V=En(a,h,j,d,e,f,57387,57398)|0;k[b>>2]=V;V=28;break}case 82:{k[y>>2]=k[b>>2];k[z>>2]=k[c>>2];k[h>>2]=k[y>>2];k[j>>2]=k[z>>2];V=En(a,h,j,d,e,f,57398,57403)|0;k[b>>2]=V;V=28;break}case 83:{k[A>>2]=k[c>>2];k[j>>2]=k[A>>2];Zn(a,f,b,j,e,N);V=28;break}case 84:{k[B>>2]=k[b>>2];k[C>>2]=k[c>>2];k[h>>2]=k[B>>2];k[j>>2]=k[C>>2];V=En(a,h,j,d,e,f,57403,57411)|0;k[b>>2]=V;V=28;break}case 119:{k[D>>2]=k[c>>2];k[j>>2]=k[D>>2];_n(a,f+24|0,b,j,e,N);V=28;break}case 120:{W=k[(k[a>>2]|0)+20>>2]|0;k[E>>2]=k[b>>2];k[F>>2]=k[c>>2];k[h>>2]=k[E>>2];k[j>>2]=k[F>>2];h=Nb[W&63](a,h,j,d,e,f)|0;break}case 88:{V=a+8|0;V=Ob[k[(k[V>>2]|0)+24>>2]&127](V)|0;k[G>>2]=k[b>>2];k[H>>2]=k[c>>2];g=i[V>>0]|0;c=(g&1)==0;W=c?V+1|0:k[V+8>>2]|0;V=W+(c?(g&255)>>>1:k[V+4>>2]|0)|0;k[h>>2]=k[G>>2];k[j>>2]=k[H>>2];V=En(a,h,j,d,e,f,W,V)|0;k[b>>2]=V;V=28;break}case 121:{k[J>>2]=k[c>>2];k[j>>2]=k[J>>2];Pn(a,f+20|0,b,j,e,N);V=28;break}case 89:{k[K>>2]=k[c>>2];k[j>>2]=k[K>>2];$n(a,f+20|0,b,j,e,N);V=28;break}case 37:{k[L>>2]=k[c>>2];k[j>>2]=k[L>>2];ao(a,b,j,e,N);V=28;break}default:{k[e>>2]=k[e>>2]|4;V=28}}while(0);if((V|0)==28)h=k[b>>2]|0;r=U;return h|0}function Rn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Js(c,a,e,f,2)|0;c=k[e>>2]|0;if((a+-1|0)>>>0<31&(c&4|0)==0)k[b>>2]=a;else k[e>>2]=c|4;r=g;return}function Sn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Js(c,a,e,f,2)|0;c=k[e>>2]|0;if((a|0)<24&(c&4|0)==0)k[b>>2]=a;else k[e>>2]=c|4;r=g;return}function Tn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Js(c,a,e,f,2)|0;c=k[e>>2]|0;if((a+-1|0)>>>0<12&(c&4|0)==0)k[b>>2]=a;else k[e>>2]=c|4;r=g;return}function Un(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Js(c,a,e,f,3)|0;c=k[e>>2]|0;if((a|0)<366&(c&4|0)==0)k[b>>2]=a;else k[e>>2]=c|4;r=g;return}function Vn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Js(c,a,e,f,2)|0;c=k[e>>2]|0;if((a|0)<13&(c&4|0)==0)k[b>>2]=a+-1;else k[e>>2]=c|4;r=g;return}function Wn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Js(c,a,e,f,2)|0;c=k[e>>2]|0;if((a|0)<60&(c&4|0)==0)k[b>>2]=a;else k[e>>2]=c|4;r=g;return}function Xn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;g=e+8|0;a:while(1){e=k[b>>2]|0;do if(e){if((k[e+12>>2]|0)==(k[e+16>>2]|0))if((Ob[k[(k[e>>2]|0)+36>>2]&127](e)|0)==-1){k[b>>2]=0;e=0;break}else{e=k[b>>2]|0;break}}else e=0;while(0);e=(e|0)==0;a=k[c>>2]|0;do if(a){if((k[a+12>>2]|0)!=(k[a+16>>2]|0))if(e)break;else break a;if((Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0)!=-1)if(e)break;else break a;else{k[c>>2]=0;h=12;break}}else h=12;while(0);if((h|0)==12){h=0;if(e){a=0;break}else a=0}e=k[b>>2]|0;f=k[e+12>>2]|0;if((f|0)==(k[e+16>>2]|0))e=Ob[k[(k[e>>2]|0)+36>>2]&127](e)|0;else e=l[f>>0]|0;if((e&255)<<24>>24<=-1)break;if(!(j[(k[g>>2]|0)+(e<<24>>24<<1)>>1]&8192))break;e=k[b>>2]|0;a=e+12|0;f=k[a>>2]|0;if((f|0)==(k[e+16>>2]|0)){Ob[k[(k[e>>2]|0)+40>>2]&127](e)|0;continue}else{k[a>>2]=f+1;continue}}e=k[b>>2]|0;do if(e){if((k[e+12>>2]|0)==(k[e+16>>2]|0))if((Ob[k[(k[e>>2]|0)+36>>2]&127](e)|0)==-1){k[b>>2]=0;e=0;break}else{e=k[b>>2]|0;break}}else e=0;while(0);e=(e|0)==0;do if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)?(Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0)==-1:0){k[c>>2]=0;h=32;break}if(!e)h=33}else h=32;while(0);if((h|0)==32?e:0)h=33;if((h|0)==33)k[d>>2]=k[d>>2]|2;return}function Yn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0;m=r;r=r+16|0;h=m+4|0;j=m;l=a+8|0;l=Ob[k[(k[l>>2]|0)+8>>2]&127](l)|0;a=i[l>>0]|0;if(!(a&1))g=(a&255)>>>1;else g=k[l+4>>2]|0;a=i[l+12>>0]|0;if(!(a&1))a=(a&255)>>>1;else a=k[l+16>>2]|0;do if((g|0)!=(0-a|0)){k[j>>2]=k[d>>2];k[h>>2]=k[j>>2];a=ls(c,h,l,l+24|0,f,e,0)|0;g=k[b>>2]|0;if((a|0)==(l|0)&(g|0)==12){k[b>>2]=0;break}if((g|0)<12&(a-l|0)==12)k[b>>2]=g+12}else k[e>>2]=k[e>>2]|4;while(0);r=m;return}function Zn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Js(c,a,e,f,2)|0;c=k[e>>2]|0;if((a|0)<61&(c&4|0)==0)k[b>>2]=a;else k[e>>2]=c|4;r=g;return}function _n(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Js(c,a,e,f,1)|0;c=k[e>>2]|0;if((a|0)<7&(c&4|0)==0)k[b>>2]=a;else k[e>>2]=c|4;r=g;return}function $n(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Js(c,a,e,f,4)|0;if(!(k[e>>2]&4))k[b>>2]=a+-1900;r=g;return}function ao(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;a=k[b>>2]|0;do if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0))if((Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0)==-1){k[b>>2]=0;a=0;break}else{a=k[b>>2]|0;break}}else a=0;while(0);f=(a|0)==0;a=k[c>>2]|0;do if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)?(Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0)==-1:0){k[c>>2]=0;h=11;break}if(f){g=a;h=13}else h=12}else h=11;while(0);if((h|0)==11)if(f)h=12;else{g=0;h=13}a:do if((h|0)==12)k[d>>2]=k[d>>2]|6;else if((h|0)==13){a=k[b>>2]|0;f=k[a+12>>2]|0;if((f|0)==(k[a+16>>2]|0))a=Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0;else a=l[f>>0]|0;if((Qb[k[(k[e>>2]|0)+36>>2]&63](e,a&255,0)|0)<<24>>24!=37){k[d>>2]=k[d>>2]|4;break}a=k[b>>2]|0;f=a+12|0;e=k[f>>2]|0;if((e|0)==(k[a+16>>2]|0)){Ob[k[(k[a>>2]|0)+40>>2]&127](a)|0;a=k[b>>2]|0;if(!a)a=0;else h=21}else{k[f>>2]=e+1;h=21}do if((h|0)==21)if((k[a+12>>2]|0)==(k[a+16>>2]|0))if((Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0)==-1){k[b>>2]=0;a=0;break}else{a=k[b>>2]|0;break}while(0);a=(a|0)==0;do if(g){if((k[g+12>>2]|0)==(k[g+16>>2]|0)?(Ob[k[(k[g>>2]|0)+36>>2]&127](g)|0)==-1:0){k[c>>2]=0;h=30;break}if(a)break a}else h=30;while(0);if((h|0)==30?!a:0)break;k[d>>2]=k[d>>2]|2}while(0);return}function bo(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0;w=r;r=r+32|0;q=w+16|0;p=w+12|0;u=w+8|0;s=w+4|0;t=w;i=Yk(d)|0;k[u>>2]=i;x=0;u=Aa(26,u|0,43744)|0;o=x;x=0;if(o&1){w=Wa()|0;dk(i)|0;fb(w|0)}dk(i)|0;k[e>>2]=0;i=k[b>>2]|0;a:do if((g|0)!=(h|0)){b:while(1){l=i;if(i){j=k[i+12>>2]|0;if((j|0)==(k[i+16>>2]|0))j=Ob[k[(k[i>>2]|0)+36>>2]&127](i)|0;else j=k[j>>2]|0;if((j|0)==-1){k[b>>2]=0;i=0;n=1;o=0}else{n=0;o=l}}else{i=0;n=1;o=l}m=k[c>>2]|0;j=m;do if(m){l=k[m+12>>2]|0;if((l|0)==(k[m+16>>2]|0))l=Ob[k[(k[m>>2]|0)+36>>2]&127](m)|0;else l=k[l>>2]|0;if((l|0)!=-1)if(n)break;else{v=17;break b}else{k[c>>2]=0;j=0;v=15;break}}else v=15;while(0);if((v|0)==15){v=0;if(n){v=17;break}else m=0}c:do if((Qb[k[(k[u>>2]|0)+52>>2]&63](u,k[g>>2]|0,0)|0)<<24>>24==37){l=g+4|0;if((l|0)==(h|0)){v=21;break b}n=Qb[k[(k[u>>2]|0)+52>>2]&63](u,k[l>>2]|0,0)|0;switch(n<<24>>24){case 48:case 69:{m=g+8|0;if((m|0)==(h|0)){v=24;break b}g=l;l=Qb[k[(k[u>>2]|0)+52>>2]&63](u,k[m>>2]|0,0)|0;i=n;break}default:{l=n;i=0}}n=k[(k[a>>2]|0)+36>>2]|0;k[s>>2]=o;k[t>>2]=j;k[p>>2]=k[s>>2];k[q>>2]=k[t>>2];o=ac[n&15](a,p,q,d,e,f,l,i)|0;k[b>>2]=o;g=g+8|0}else{if(!(Qb[k[(k[u>>2]|0)+12>>2]&63](u,8192,k[g>>2]|0)|0)){l=i+12|0;j=k[l>>2]|0;m=i+16|0;if((j|0)==(k[m>>2]|0))j=Ob[k[(k[i>>2]|0)+36>>2]&127](i)|0;else j=k[j>>2]|0;o=Vb[k[(k[u>>2]|0)+28>>2]&63](u,j)|0;if((o|0)!=(Vb[k[(k[u>>2]|0)+28>>2]&63](u,k[g>>2]|0)|0)){v=61;break b}j=k[l>>2]|0;if((j|0)==(k[m>>2]|0))Ob[k[(k[i>>2]|0)+40>>2]&127](i)|0;else k[l>>2]=j+4;g=g+4|0;break}do{g=g+4|0;if((g|0)==(h|0)){g=h;break}}while(Qb[k[(k[u>>2]|0)+12>>2]&63](u,8192,k[g>>2]|0)|0);j=m;n=m;while(1){if(i){l=k[i+12>>2]|0;if((l|0)==(k[i+16>>2]|0))l=Ob[k[(k[i>>2]|0)+36>>2]&127](i)|0;else l=k[l>>2]|0;if((l|0)==-1){k[b>>2]=0;m=1;i=0}else m=0}else{m=1;i=0}do if(n){l=k[n+12>>2]|0;if((l|0)==(k[n+16>>2]|0))l=Ob[k[(k[n>>2]|0)+36>>2]&127](n)|0;else l=k[l>>2]|0;if((l|0)!=-1)if(m^(j|0)==0){o=j;n=j;break}else break c;else{k[c>>2]=0;j=0;v=44;break}}else v=44;while(0);if((v|0)==44){v=0;if(m)break c;else{o=j;n=0}}l=i+12|0;j=k[l>>2]|0;m=i+16|0;if((j|0)==(k[m>>2]|0))j=Ob[k[(k[i>>2]|0)+36>>2]&127](i)|0;else j=k[j>>2]|0;if(!(Qb[k[(k[u>>2]|0)+12>>2]&63](u,8192,j)|0))break c;j=k[l>>2]|0;if((j|0)==(k[m>>2]|0)){Ob[k[(k[i>>2]|0)+40>>2]&127](i)|0;j=o;continue}else{k[l>>2]=j+4;j=o;continue}}}while(0);i=k[b>>2]|0;if(!((g|0)!=(h|0)&(k[e>>2]|0)==0))break a}if((v|0)==17){k[e>>2]=4;break}else if((v|0)==21){k[e>>2]=4;break}else if((v|0)==24){k[e>>2]=4;break}else if((v|0)==61){k[e>>2]=4;i=k[b>>2]|0;break}}while(0);if(i){g=k[i+12>>2]|0;if((g|0)==(k[i+16>>2]|0))g=Ob[k[(k[i>>2]|0)+36>>2]&127](i)|0;else g=k[g>>2]|0;if((g|0)==-1){k[b>>2]=0;i=0;l=1}else l=0}else{i=0;l=1}g=k[c>>2]|0;do if(g){j=k[g+12>>2]|0;if((j|0)==(k[g+16>>2]|0))g=Ob[k[(k[g>>2]|0)+36>>2]&127](g)|0;else g=k[j>>2]|0;if((g|0)!=-1)if(l)break;else{v=76;break}else{k[c>>2]=0;v=74;break}}else v=74;while(0);if((v|0)==74?l:0)v=76;if((v|0)==76)k[e>>2]=k[e>>2]|2;r=w;return i|0}function co(a){a=a|0;return}function eo(a){a=a|0;Sg(a);return}function fo(a){a=a|0;return 2}function go(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+16|0;h=g+12|0;i=g+8|0;l=g+4|0;j=g;k[l>>2]=k[b>>2];k[j>>2]=k[c>>2];k[i>>2]=k[l>>2];k[h>>2]=k[j>>2];a=bo(a,i,h,d,e,f,44320,44352)|0;r=g;return a|0}function ho(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;g=r;r=r+16|0;h=g+12|0;j=g+8|0;m=g+4|0;l=g;p=a+8|0;p=Ob[k[(k[p>>2]|0)+20>>2]&127](p)|0;k[m>>2]=k[b>>2];k[l>>2]=k[c>>2];n=i[p>>0]|0;o=(n&1)==0;c=p+4|0;b=o?c:k[p+8>>2]|0;c=b+((o?(n&255)>>>1:k[c>>2]|0)<<2)|0;k[j>>2]=k[m>>2];k[h>>2]=k[l>>2];a=bo(a,j,h,d,e,f,b,c)|0;r=g;return a|0}function io(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;j=r;r=r+16|0;h=j+8|0;g=j+4|0;i=j;d=Yk(d)|0;k[g>>2]=d;x=0;g=Aa(26,g|0,43744)|0;l=x;x=0;if(l&1){l=Wa()|0;dk(d)|0;fb(l|0)}else{dk(d)|0;k[i>>2]=k[c>>2];k[h>>2]=k[i>>2];jo(a,f+24|0,b,h,e,g);r=j;return k[b>>2]|0}return 0}function jo(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;g=r;r=r+16|0;h=g+4|0;i=g;a=a+8|0;a=Ob[k[k[a>>2]>>2]&127](a)|0;k[i>>2]=k[d>>2];k[h>>2]=k[i>>2];c=(ws(c,h,a,a+168|0,f,e,0)|0)-a|0;if((c|0)<168)k[b>>2]=((c|0)/12|0|0)%7|0;r=g;return}function ko(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;j=r;r=r+16|0;h=j+8|0;g=j+4|0;i=j;d=Yk(d)|0;k[g>>2]=d;x=0;g=Aa(26,g|0,43744)|0;l=x;x=0;if(l&1){l=Wa()|0;dk(d)|0;fb(l|0)}else{dk(d)|0;k[i>>2]=k[c>>2];k[h>>2]=k[i>>2];lo(a,f+16|0,b,h,e,g);r=j;return k[b>>2]|0}return 0}function lo(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;g=r;r=r+16|0;h=g+4|0;i=g;a=a+8|0;a=Ob[k[(k[a>>2]|0)+4>>2]&127](a)|0;k[i>>2]=k[d>>2];k[h>>2]=k[i>>2];c=(ws(c,h,a,a+288|0,f,e,0)|0)-a|0;if((c|0)<288)k[b>>2]=((c|0)/12|0|0)%12|0;r=g;return}function mo(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;j=r;r=r+16|0;h=j+8|0;g=j+4|0;i=j;d=Yk(d)|0;k[g>>2]=d;x=0;g=Aa(26,g|0,43744)|0;l=x;x=0;if(l&1){l=Wa()|0;dk(d)|0;fb(l|0)}else{dk(d)|0;k[i>>2]=k[c>>2];k[h>>2]=k[i>>2];no(a,f+20|0,b,h,e,g);r=j;return k[b>>2]|0}return 0}function no(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Ks(c,a,e,f,4)|0;if(!(k[e>>2]&4)){if((a|0)<69)a=a+2e3|0;else a=(a+-69|0)>>>0<31?a+1900|0:a;k[b>>2]=a+-1900}r=g;return}function oo(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;U=r;r=r+144|0;j=U+132|0;h=U+116|0;N=U+128|0;w=U+124|0;I=U+120|0;O=U+112|0;P=U+108|0;Q=U+104|0;R=U+100|0;S=U+96|0;T=U+92|0;l=U+88|0;m=U+84|0;n=U+80|0;o=U+76|0;p=U+72|0;q=U+68|0;s=U+64|0;t=U+60|0;u=U+56|0;v=U+52|0;y=U+48|0;z=U+44|0;A=U+40|0;B=U+36|0;C=U+32|0;D=U+28|0;E=U+24|0;F=U+20|0;G=U+16|0;H=U+12|0;J=U+8|0;K=U+4|0;L=U;k[e>>2]=0;M=Yk(d)|0;k[N>>2]=M;x=0;N=Aa(26,N|0,43744)|0;W=x;x=0;if(W&1){W=Wa()|0;dk(M)|0;fb(W|0)}dk(M)|0;do switch(g<<24>>24|0){case 65:case 97:{k[w>>2]=k[c>>2];k[j>>2]=k[w>>2];jo(a,f+24|0,b,j,e,N);V=28;break}case 104:case 66:case 98:{k[I>>2]=k[c>>2];k[j>>2]=k[I>>2];lo(a,f+16|0,b,j,e,N);V=28;break}case 99:{W=a+8|0;W=Ob[k[(k[W>>2]|0)+12>>2]&127](W)|0;k[O>>2]=k[b>>2];k[P>>2]=k[c>>2];g=i[W>>0]|0;c=(g&1)==0;V=W+4|0;W=c?V:k[W+8>>2]|0;V=W+((c?(g&255)>>>1:k[V>>2]|0)<<2)|0;k[h>>2]=k[O>>2];k[j>>2]=k[P>>2];V=bo(a,h,j,d,e,f,W,V)|0;k[b>>2]=V;V=28;break}case 101:case 100:{k[Q>>2]=k[c>>2];k[j>>2]=k[Q>>2];po(a,f+12|0,b,j,e,N);V=28;break}case 68:{k[R>>2]=k[b>>2];k[S>>2]=k[c>>2];k[h>>2]=k[R>>2];k[j>>2]=k[S>>2];V=bo(a,h,j,d,e,f,44352,44384)|0;k[b>>2]=V;V=28;break}case 70:{k[T>>2]=k[b>>2];k[l>>2]=k[c>>2];k[h>>2]=k[T>>2];k[j>>2]=k[l>>2];V=bo(a,h,j,d,e,f,44384,44416)|0;k[b>>2]=V;V=28;break}case 72:{k[m>>2]=k[c>>2];k[j>>2]=k[m>>2];qo(a,f+8|0,b,j,e,N);V=28;break}case 73:{k[n>>2]=k[c>>2];k[j>>2]=k[n>>2];ro(a,f+8|0,b,j,e,N);V=28;break}case 106:{k[o>>2]=k[c>>2];k[j>>2]=k[o>>2];so(a,f+28|0,b,j,e,N);V=28;break}case 109:{k[p>>2]=k[c>>2];k[j>>2]=k[p>>2];to(a,f+16|0,b,j,e,N);V=28;break}case 77:{k[q>>2]=k[c>>2];k[j>>2]=k[q>>2];uo(a,f+4|0,b,j,e,N);V=28;break}case 116:case 110:{k[s>>2]=k[c>>2];k[j>>2]=k[s>>2];vo(a,b,j,e,N);V=28;break}case 112:{k[t>>2]=k[c>>2];k[j>>2]=k[t>>2];wo(a,f+8|0,b,j,e,N);V=28;break}case 114:{k[u>>2]=k[b>>2];k[v>>2]=k[c>>2];k[h>>2]=k[u>>2];k[j>>2]=k[v>>2];V=bo(a,h,j,d,e,f,44416,44460)|0;k[b>>2]=V;V=28;break}case 82:{k[y>>2]=k[b>>2];k[z>>2]=k[c>>2];k[h>>2]=k[y>>2];k[j>>2]=k[z>>2];V=bo(a,h,j,d,e,f,44460,44480)|0;k[b>>2]=V;V=28;break}case 83:{k[A>>2]=k[c>>2];k[j>>2]=k[A>>2];xo(a,f,b,j,e,N);V=28;break}case 84:{k[B>>2]=k[b>>2];k[C>>2]=k[c>>2];k[h>>2]=k[B>>2];k[j>>2]=k[C>>2];V=bo(a,h,j,d,e,f,44480,44512)|0;k[b>>2]=V;V=28;break}case 119:{k[D>>2]=k[c>>2];k[j>>2]=k[D>>2];yo(a,f+24|0,b,j,e,N);V=28;break}case 120:{W=k[(k[a>>2]|0)+20>>2]|0;k[E>>2]=k[b>>2];k[F>>2]=k[c>>2];k[h>>2]=k[E>>2];k[j>>2]=k[F>>2];h=Nb[W&63](a,h,j,d,e,f)|0;break}case 88:{W=a+8|0;W=Ob[k[(k[W>>2]|0)+24>>2]&127](W)|0;k[G>>2]=k[b>>2];k[H>>2]=k[c>>2];g=i[W>>0]|0;c=(g&1)==0;V=W+4|0;W=c?V:k[W+8>>2]|0;V=W+((c?(g&255)>>>1:k[V>>2]|0)<<2)|0;k[h>>2]=k[G>>2];k[j>>2]=k[H>>2];V=bo(a,h,j,d,e,f,W,V)|0;k[b>>2]=V;V=28;break}case 121:{k[J>>2]=k[c>>2];k[j>>2]=k[J>>2];no(a,f+20|0,b,j,e,N);V=28;break}case 89:{k[K>>2]=k[c>>2];k[j>>2]=k[K>>2];zo(a,f+20|0,b,j,e,N);V=28;break}case 37:{k[L>>2]=k[c>>2];k[j>>2]=k[L>>2];Ao(a,b,j,e,N);V=28;break}default:{k[e>>2]=k[e>>2]|4;V=28}}while(0);if((V|0)==28)h=k[b>>2]|0;r=U;return h|0}function po(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Ks(c,a,e,f,2)|0;c=k[e>>2]|0;if((a+-1|0)>>>0<31&(c&4|0)==0)k[b>>2]=a;else k[e>>2]=c|4;r=g;return}function qo(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Ks(c,a,e,f,2)|0;c=k[e>>2]|0;if((a|0)<24&(c&4|0)==0)k[b>>2]=a;else k[e>>2]=c|4;r=g;return}function ro(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Ks(c,a,e,f,2)|0;c=k[e>>2]|0;if((a+-1|0)>>>0<12&(c&4|0)==0)k[b>>2]=a;else k[e>>2]=c|4;r=g;return}function so(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Ks(c,a,e,f,3)|0;c=k[e>>2]|0;if((a|0)<366&(c&4|0)==0)k[b>>2]=a;else k[e>>2]=c|4;r=g;return}function to(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Ks(c,a,e,f,2)|0;c=k[e>>2]|0;if((a|0)<13&(c&4|0)==0)k[b>>2]=a+-1;else k[e>>2]=c|4;r=g;return}function uo(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Ks(c,a,e,f,2)|0;c=k[e>>2]|0;if((a|0)<60&(c&4|0)==0)k[b>>2]=a;else k[e>>2]=c|4;r=g;return}function vo(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;a:while(1){a=k[b>>2]|0;do if(a){f=k[a+12>>2]|0;if((f|0)==(k[a+16>>2]|0))a=Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0;else a=k[f>>2]|0;if((a|0)==-1){k[b>>2]=0;g=1;break}else{g=(k[b>>2]|0)==0;break}}else g=1;while(0);f=k[c>>2]|0;do if(f){a=k[f+12>>2]|0;if((a|0)==(k[f+16>>2]|0))a=Ob[k[(k[f>>2]|0)+36>>2]&127](f)|0;else a=k[a>>2]|0;if((a|0)!=-1)if(g){g=f;break}else{g=f;break a}else{k[c>>2]=0;h=15;break}}else h=15;while(0);if((h|0)==15){h=0;if(g){g=0;break}else g=0}a=k[b>>2]|0;f=k[a+12>>2]|0;if((f|0)==(k[a+16>>2]|0))a=Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0;else a=k[f>>2]|0;if(!(Qb[k[(k[e>>2]|0)+12>>2]&63](e,8192,a)|0))break;a=k[b>>2]|0;f=a+12|0;g=k[f>>2]|0;if((g|0)==(k[a+16>>2]|0)){Ob[k[(k[a>>2]|0)+40>>2]&127](a)|0;continue}else{k[f>>2]=g+4;continue}}a=k[b>>2]|0;do if(a){f=k[a+12>>2]|0;if((f|0)==(k[a+16>>2]|0))a=Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0;else a=k[f>>2]|0;if((a|0)==-1){k[b>>2]=0;f=1;break}else{f=(k[b>>2]|0)==0;break}}else f=1;while(0);do if(g){a=k[g+12>>2]|0;if((a|0)==(k[g+16>>2]|0))a=Ob[k[(k[g>>2]|0)+36>>2]&127](g)|0;else a=k[a>>2]|0;if((a|0)!=-1)if(f)break;else{h=39;break}else{k[c>>2]=0;h=37;break}}else h=37;while(0);if((h|0)==37?f:0)h=39;if((h|0)==39)k[d>>2]=k[d>>2]|2;return}function wo(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0;m=r;r=r+16|0;h=m+4|0;j=m;l=a+8|0;l=Ob[k[(k[l>>2]|0)+8>>2]&127](l)|0;a=i[l>>0]|0;if(!(a&1))g=(a&255)>>>1;else g=k[l+4>>2]|0;a=i[l+12>>0]|0;if(!(a&1))a=(a&255)>>>1;else a=k[l+16>>2]|0;do if((g|0)!=(0-a|0)){k[j>>2]=k[d>>2];k[h>>2]=k[j>>2];a=ws(c,h,l,l+24|0,f,e,0)|0;g=k[b>>2]|0;if((a|0)==(l|0)&(g|0)==12){k[b>>2]=0;break}if((g|0)<12&(a-l|0)==12)k[b>>2]=g+12}else k[e>>2]=k[e>>2]|4;while(0);r=m;return}function xo(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Ks(c,a,e,f,2)|0;c=k[e>>2]|0;if((a|0)<61&(c&4|0)==0)k[b>>2]=a;else k[e>>2]=c|4;r=g;return}function yo(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Ks(c,a,e,f,1)|0;c=k[e>>2]|0;if((a|0)<7&(c&4|0)==0)k[b>>2]=a;else k[e>>2]=c|4;r=g;return}function zo(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=r;r=r+16|0;a=g+4|0;h=g;k[h>>2]=k[d>>2];k[a>>2]=k[h>>2];a=Ks(c,a,e,f,4)|0;if(!(k[e>>2]&4))k[b>>2]=a+-1900;r=g;return}function Ao(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;a=k[b>>2]|0;do if(a){f=k[a+12>>2]|0;if((f|0)==(k[a+16>>2]|0))a=Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0;else a=k[f>>2]|0;if((a|0)==-1){k[b>>2]=0;g=1;break}else{g=(k[b>>2]|0)==0;break}}else g=1;while(0);f=k[c>>2]|0;do if(f){a=k[f+12>>2]|0;if((a|0)==(k[f+16>>2]|0))a=Ob[k[(k[f>>2]|0)+36>>2]&127](f)|0;else a=k[a>>2]|0;if((a|0)!=-1)if(g){h=f;i=17;break}else{i=16;break}else{k[c>>2]=0;i=14;break}}else i=14;while(0);if((i|0)==14)if(g)i=16;else{h=0;i=17}a:do if((i|0)==16)k[d>>2]=k[d>>2]|6;else if((i|0)==17){a=k[b>>2]|0;f=k[a+12>>2]|0;if((f|0)==(k[a+16>>2]|0))a=Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0;else a=k[f>>2]|0;if((Qb[k[(k[e>>2]|0)+52>>2]&63](e,a,0)|0)<<24>>24!=37){k[d>>2]=k[d>>2]|4;break}a=k[b>>2]|0;f=a+12|0;g=k[f>>2]|0;if((g|0)==(k[a+16>>2]|0)){Ob[k[(k[a>>2]|0)+40>>2]&127](a)|0;a=k[b>>2]|0;if(!a)f=1;else i=25}else{k[f>>2]=g+4;i=25}do if((i|0)==25){f=k[a+12>>2]|0;if((f|0)==(k[a+16>>2]|0))a=Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0;else a=k[f>>2]|0;if((a|0)==-1){k[b>>2]=0;f=1;break}else{f=(k[b>>2]|0)==0;break}}while(0);do if(h){a=k[h+12>>2]|0;if((a|0)==(k[h+16>>2]|0))a=Ob[k[(k[h>>2]|0)+36>>2]&127](h)|0;else a=k[a>>2]|0;if((a|0)!=-1)if(f)break a;else break;else{k[c>>2]=0;i=37;break}}else i=37;while(0);if((i|0)==37?!f:0)break;k[d>>2]=k[d>>2]|2}while(0);return}function Bo(a){a=a|0;Co(a+8|0);return}function Co(a){a=a|0;var b=0,c=0,d=0;b=k[a>>2]|0;x=0;c=Da(3)|0;d=x;x=0;do if(!(d&1)){if((b|0)!=(c|0)?(x=0,qa(164,k[a>>2]|0),d=x,x=0,d&1):0)break;return}while(0);d=Wa(0)|0;mc(d)}function Do(a){a=a|0;Co(a+8|0);Sg(a);return}function Eo(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0;j=r;r=r+112|0;h=j+4|0;c=j;k[c>>2]=h+100;Fo(a+8|0,h,c,e,f,g);e=k[c>>2]|0;c=k[b>>2]|0;if((h|0)!=(e|0))do{g=i[h>>0]|0;do if(c){d=c+24|0;f=k[d>>2]|0;if((f|0)==(k[c+28>>2]|0)){b=(Vb[k[(k[c>>2]|0)+52>>2]&63](c,g&255)|0)==-1;c=b?0:c;break}else{k[d>>2]=f+1;i[f>>0]=g;break}}else c=0;while(0);h=h+1|0}while((h|0)!=(e|0));r=j;return c|0}function Fo(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0;l=r;r=r+16|0;j=l;i[j>>0]=37;g=j+1|0;i[g>>0]=e;h=j+2|0;i[h>>0]=f;i[j+3>>0]=0;if(f<<24>>24){i[g>>0]=f;i[h>>0]=e}a=b+(_a(b|0,(k[c>>2]|0)-b|0,j|0,d|0,k[a>>2]|0)|0)|0;k[c>>2]=a;r=l;return}function Go(a){a=a|0;Co(a+8|0);return}function Ho(a){a=a|0;Co(a+8|0);Sg(a);return}function Io(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=r;r=r+416|0;d=h+8|0;c=h;k[c>>2]=d+400;Jo(a+8|0,d,c,e,f,g);a=k[c>>2]|0;c=k[b>>2]|0;if((d|0)!=(a|0)){e=d;do{d=k[e>>2]|0;if(!c)c=0;else{f=c+24|0;g=k[f>>2]|0;if((g|0)==(k[c+28>>2]|0))d=Vb[k[(k[c>>2]|0)+52>>2]&63](c,d)|0;else{k[f>>2]=g+4;k[g>>2]=d}c=(d|0)==-1?0:c}e=e+4|0}while((e|0)!=(a|0))}r=h;return c|0}function Jo(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0;g=r;r=r+128|0;j=g+16|0;l=g+12|0;h=g;i=g+8|0;k[l>>2]=j+100;Fo(a,j,l,d,e,f);e=h;k[e>>2]=0;k[e+4>>2]=0;k[i>>2]=j;e=(k[c>>2]|0)-b>>2;f=ei(k[a>>2]|0)|0;x=0;e=Ea(8,b|0,i|0,e|0,h|0)|0;a=x;x=0;if(a&1){e=Wa()|0;if((f|0)!=0?(x=0,ta(74,f|0)|0,l=x,x=0,l&1):0){l=Wa(0)|0;mc(l)}fb(e|0)}if((f|0)!=0?(x=0,ta(74,f|0)|0,l=x,x=0,l&1):0){l=Wa(0)|0;mc(l)}if((e|0)==-1)Fp(57411);else{k[c>>2]=b+(e<<2);r=g;return}}function Ko(a){a=a|0;return}function Lo(a){a=a|0;Sg(a);return}function Mo(a){a=a|0;return 127}function No(a){a=a|0;return 127}function Oo(a,b){a=a|0;b=b|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;return}function Po(a,b){a=a|0;b=b|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;return}function Qo(a,b){a=a|0;b=b|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;return}function Ro(a,b){a=a|0;b=b|0;vk(a,1,45);return}function So(a){a=a|0;return 0}function To(a,b){a=a|0;b=b|0;i[a>>0]=2;i[a+1>>0]=3;i[a+2>>0]=0;i[a+3>>0]=4;return}function Uo(a,b){a=a|0;b=b|0;i[a>>0]=2;i[a+1>>0]=3;i[a+2>>0]=0;i[a+3>>0]=4;return}function Vo(a){a=a|0;return}function Wo(a){a=a|0;Sg(a);return}function Xo(a){a=a|0;return 127}function Yo(a){a=a|0;return 127}function Zo(a,b){a=a|0;b=b|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;return}function _o(a,b){a=a|0;b=b|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;return}function $o(a,b){a=a|0;b=b|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;return}function ap(a,b){a=a|0;b=b|0;vk(a,1,45);return}function bp(a){a=a|0;return 0}function cp(a,b){a=a|0;b=b|0;i[a>>0]=2;i[a+1>>0]=3;i[a+2>>0]=0;i[a+3>>0]=4;return}function dp(a,b){a=a|0;b=b|0;i[a>>0]=2;i[a+1>>0]=3;i[a+2>>0]=0;i[a+3>>0]=4;return}function ep(a){a=a|0;return}function fp(a){a=a|0;Sg(a);return}function gp(a){a=a|0;return 2147483647}function hp(a){a=a|0;return 2147483647}function ip(a,b){a=a|0;b=b|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;return}function jp(a,b){a=a|0;b=b|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;return}function kp(a,b){a=a|0;b=b|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;return}function lp(a,b){a=a|0;b=b|0;Jk(a,1,45);return}function mp(a){a=a|0;return 0}function np(a,b){a=a|0;b=b|0;i[a>>0]=2;i[a+1>>0]=3;i[a+2>>0]=0;i[a+3>>0]=4;return}function op(a,b){a=a|0;b=b|0;i[a>>0]=2;i[a+1>>0]=3;i[a+2>>0]=0;i[a+3>>0]=4;return}function pp(a){a=a|0;return}function qp(a){a=a|0;Sg(a);return}function rp(a){a=a|0;return 2147483647}function sp(a){a=a|0;return 2147483647}function tp(a,b){a=a|0;b=b|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;return}function up(a,b){a=a|0;b=b|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;return}function vp(a,b){a=a|0;b=b|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;return}function wp(a,b){a=a|0;b=b|0;Jk(a,1,45);return}function xp(a){a=a|0;return 0}function yp(a,b){a=a|0;b=b|0;i[a>>0]=2;i[a+1>>0]=3;i[a+2>>0]=0;i[a+3>>0]=4;return}function zp(a,b){a=a|0;b=b|0;i[a>>0]=2;i[a+1>>0]=3;i[a+2>>0]=0;i[a+3>>0]=4;return}function Ap(a){a=a|0;return}function Bp(a){a=a|0;Sg(a);return}function Cp(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;B=r;r=r+240|0;z=B+24|0;A=B;a=B+136|0;D=B+16|0;y=B+12|0;C=B+8|0;n=B+134|0;j=B+4|0;w=B+124|0;k[D>>2]=a;E=D+4|0;k[E>>2]=165;l=a+100|0;x=0;h=ta(67,e|0)|0;v=x;x=0;if(!(v&1)){k[C>>2]=h;x=0;a=Aa(26,C|0,43752)|0;v=x;x=0;a:do if(!(v&1)?(i[n>>0]=0,k[j>>2]=k[c>>2],m=k[e+4>>2]|0,x=0,k[z>>2]=k[j>>2],m=ua(1,b|0,z|0,d|0,C|0,m|0,f|0,n|0,a|0,D|0,y|0,l|0)|0,v=x,x=0,!(v&1)):0){b:do if(m){x=0;Ea(k[(k[a>>2]|0)+32>>2]|0,a|0,57432,57442,w|0)|0;v=x;x=0;if(v&1){G=10;break a}j=k[y>>2]|0;l=k[D>>2]|0;a=j-l|0;if((a|0)>98){a=tj(a+2|0)|0;h=a;if(!a){x=0;Ga(6);v=x;x=0;if(!(v&1)){a=0;G=13}}else G=13}else{h=0;a=z;G=13}do if((G|0)==13){if(i[n>>0]|0){i[a>>0]=45;a=a+1|0}u=w+10|0;v=w;if(l>>>0<j>>>0){m=w+1|0;d=m+1|0;e=d+1|0;n=e+1|0;o=n+1|0;p=o+1|0;q=p+1|0;s=q+1|0;t=s+1|0;do{j=i[l>>0]|0;do if((i[w>>0]|0)!=j<<24>>24)if((i[m>>0]|0)!=j<<24>>24)if((i[d>>0]|0)!=j<<24>>24)if((i[e>>0]|0)!=j<<24>>24)if((i[n>>0]|0)==j<<24>>24)j=n;else{if((i[o>>0]|0)==j<<24>>24){j=o;break}if((i[p>>0]|0)==j<<24>>24){j=p;break}if((i[q>>0]|0)==j<<24>>24){j=q;break}if((i[s>>0]|0)==j<<24>>24){j=s;break}j=(i[t>>0]|0)==j<<24>>24?t:u}else j=e;else j=d;else j=m;else j=w;while(0);i[a>>0]=i[57432+(j-v)>>0]|0;l=l+1|0;a=a+1|0}while(l>>>0<(k[y>>2]|0)>>>0)}i[a>>0]=0;k[A>>2]=g;if((Pi(z,57443,A)|0)!=1?(x=0,qa(166,57447),g=x,x=0,g&1):0)break;if(h)uj(h);break b}while(0);a=Wa()|0;if(!h){j=a;h=D;break a}uj(h);j=a;h=D;break a}while(0);a=k[b>>2]|0;do if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;a=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;g=x;x=0;if(g&1){G=10;break a}if((a|0)==-1){k[b>>2]=0;a=0;break}else{a=k[b>>2]|0;break}}}else a=0;while(0);h=(a|0)==0;a=k[c>>2]|0;do if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;a=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;g=x;x=0;if(g&1){G=10;break a}if((a|0)==-1){k[c>>2]=0;G=37;break}}if(!h)G=38}else G=37;while(0);if((G|0)==37?h:0)G=38;if((G|0)==38)k[f>>2]=k[f>>2]|2;h=k[b>>2]|0;dk(k[C>>2]|0)|0;a=k[D>>2]|0;k[D>>2]=0;if((a|0)!=0?(x=0,qa(k[E>>2]|0,a|0),G=x,x=0,G&1):0){G=Wa(0)|0;mc(G)}r=B;return h|0}else G=10;while(0);if((G|0)==10){j=Wa()|0;h=D}dk(k[C>>2]|0)|0;a=k[h>>2]|0;k[h>>2]=0;if(!a)F=j;else{h=k[E>>2]|0;G=45}}else{j=Wa()|0;k[D>>2]=0;h=165;G=45}if((G|0)==45){x=0;qa(h|0,a|0);G=x;x=0;if(G&1){G=Wa(0)|0;mc(G)}else F=j}fb(F|0);return 0}function Dp(a){a=a|0;return}function Ep(a,b,c,d,e,f,g,h,m,n,o){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0;ba=r;r=r+512|0;P=ba+88|0;t=ba+96|0;da=ba+80|0;T=ba+72|0;S=ba+68|0;U=ba+500|0;Q=ba+497|0;V=ba+496|0;Y=ba+56|0;aa=ba+44|0;_=ba+32|0;Z=ba+20|0;$=ba+8|0;R=ba+4|0;X=ba;k[P>>2]=o;k[da>>2]=t;ca=da+4|0;k[ca>>2]=165;k[T>>2]=t;k[S>>2]=t+400;k[Y>>2]=0;k[Y+4>>2]=0;k[Y+8>>2]=0;k[aa>>2]=0;k[aa+4>>2]=0;k[aa+8>>2]=0;k[_>>2]=0;k[_+4>>2]=0;k[_+8>>2]=0;k[Z>>2]=0;k[Z+4>>2]=0;k[Z+8>>2]=0;k[$>>2]=0;k[$+4>>2]=0;k[$+8>>2]=0;x=0;za(1,c|0,d|0,U|0,Q|0,V|0,Y|0,aa|0,_|0,Z|0,R|0);O=x;x=0;a:do if(O&1)h=Wa()|0;else{k[n>>2]=k[m>>2];I=h+8|0;J=_+4|0;K=Z+4|0;L=Z+8|0;M=Z+1|0;N=_+8|0;O=_+1|0;z=(e&512|0)!=0;A=aa+8|0;B=aa+1|0;C=aa+4|0;D=$+4|0;E=$+8|0;F=$+1|0;G=U+3|0;H=Y+4|0;y=0;s=0;b:while(1){o=k[a>>2]|0;do if(o){if((k[o+12>>2]|0)==(k[o+16>>2]|0)){x=0;o=ta(k[(k[o>>2]|0)+36>>2]|0,o|0)|0;w=x;x=0;if(w&1){W=24;break b}if((o|0)==-1){k[a>>2]=0;o=0;break}else{o=k[a>>2]|0;break}}}else o=0;while(0);o=(o|0)==0;h=k[b>>2]|0;do if(h){if((k[h+12>>2]|0)!=(k[h+16>>2]|0))if(o){w=h;break}else{W=235;break b}x=0;c=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;w=x;x=0;if(w&1){W=24;break b}if((c|0)!=-1)if(o){w=h;break}else{W=235;break b}else{k[b>>2]=0;W=15;break}}else W=15;while(0);if((W|0)==15){W=0;if(o){W=235;break}else w=0}c:do switch(i[U+y>>0]|0){case 1:{if((y|0)!=3){o=k[a>>2]|0;h=k[o+12>>2]|0;if((h|0)==(k[o+16>>2]|0)){x=0;o=ta(k[(k[o>>2]|0)+36>>2]|0,o|0)|0;W=x;x=0;if(W&1){W=24;break b}}else o=l[h>>0]|0;if((o&255)<<24>>24<=-1){W=40;break b}if(!(j[(k[I>>2]|0)+(o<<24>>24<<1)>>1]&8192)){W=40;break b}o=k[a>>2]|0;h=o+12|0;c=k[h>>2]|0;if((c|0)==(k[o+16>>2]|0)){x=0;o=ta(k[(k[o>>2]|0)+40>>2]|0,o|0)|0;W=x;x=0;if(W&1){W=24;break b}}else{k[h>>2]=c+1;o=l[c>>0]|0}x=0;ra(55,$|0,o&255|0);W=x;x=0;if(W&1){W=24;break b}else{o=w;d=w;W=42}}break}case 0:{if((y|0)!=3){o=w;d=w;W=42}break}case 3:{h=i[_>>0]|0;o=(h&1)==0?(h&255)>>>1:k[J>>2]|0;c=i[Z>>0]|0;d=(c&1)==0?(c&255)>>>1:k[K>>2]|0;if((o|0)!=(0-d|0)){if(!o){o=k[a>>2]|0;h=k[o+12>>2]|0;if((h|0)==(k[o+16>>2]|0)){x=0;o=ta(k[(k[o>>2]|0)+36>>2]|0,o|0)|0;w=x;x=0;if(w&1){W=24;break b}h=i[Z>>0]|0}else{o=l[h>>0]|0;h=c}if((o&255)<<24>>24!=(i[((h&1)==0?M:k[L>>2]|0)>>0]|0))break c;o=k[a>>2]|0;h=o+12|0;c=k[h>>2]|0;if((c|0)==(k[o+16>>2]|0)){x=0;ta(k[(k[o>>2]|0)+40>>2]|0,o|0)|0;w=x;x=0;if(w&1){W=24;break b}}else k[h>>2]=c+1;i[g>>0]=1;w=i[Z>>0]|0;s=((w&1)==0?(w&255)>>>1:k[K>>2]|0)>>>0>1?Z:s;break c}e=k[a>>2]|0;p=k[e+12>>2]|0;c=k[e+16>>2]|0;o=(p|0)==(c|0);if(!d){if(o){x=0;o=ta(k[(k[e>>2]|0)+36>>2]|0,e|0)|0;w=x;x=0;if(w&1){W=24;break b}h=i[_>>0]|0}else o=l[p>>0]|0;if((o&255)<<24>>24!=(i[((h&1)==0?O:k[N>>2]|0)>>0]|0)){i[g>>0]=1;break c}o=k[a>>2]|0;h=o+12|0;c=k[h>>2]|0;if((c|0)==(k[o+16>>2]|0)){x=0;ta(k[(k[o>>2]|0)+40>>2]|0,o|0)|0;w=x;x=0;if(w&1){W=24;break b}}else k[h>>2]=c+1;w=i[_>>0]|0;s=((w&1)==0?(w&255)>>>1:k[J>>2]|0)>>>0>1?_:s;break c}if(o){x=0;o=ta(k[(k[e>>2]|0)+36>>2]|0,e|0)|0;w=x;x=0;if(w&1){W=24;break b}c=k[a>>2]|0;h=i[_>>0]|0;e=c;p=k[c+12>>2]|0;c=k[c+16>>2]|0}else o=l[p>>0]|0;d=e+12|0;c=(p|0)==(c|0);if((o&255)<<24>>24==(i[((h&1)==0?O:k[N>>2]|0)>>0]|0)){if(c){x=0;ta(k[(k[e>>2]|0)+40>>2]|0,e|0)|0;w=x;x=0;if(w&1){W=24;break b}}else k[d>>2]=p+1;w=i[_>>0]|0;s=((w&1)==0?(w&255)>>>1:k[J>>2]|0)>>>0>1?_:s;break c}if(c){x=0;o=ta(k[(k[e>>2]|0)+36>>2]|0,e|0)|0;w=x;x=0;if(w&1){W=24;break b}}else o=l[p>>0]|0;if((o&255)<<24>>24!=(i[((i[Z>>0]&1)==0?M:k[L>>2]|0)>>0]|0)){W=104;break b}o=k[a>>2]|0;h=o+12|0;c=k[h>>2]|0;if((c|0)==(k[o+16>>2]|0)){x=0;ta(k[(k[o>>2]|0)+40>>2]|0,o|0)|0;w=x;x=0;if(w&1){W=24;break b}}else k[h>>2]=c+1;i[g>>0]=1;w=i[Z>>0]|0;s=((w&1)==0?(w&255)>>>1:k[K>>2]|0)>>>0>1?Z:s}break}case 2:{if(!(y>>>0<2|(s|0)!=0)?!(z|(y|0)==2&(i[G>>0]|0)!=0):0){s=0;break c}u=i[aa>>0]|0;o=(u&1)==0;v=k[A>>2]|0;c=o?B:v;q=c;d:do if((y|0)!=0?(l[U+(y+-1)>>0]|0)<2:0){p=o?(u&255)>>>1:k[C>>2]|0;d=c+p|0;e=k[I>>2]|0;e:do if(!p)h=q;else{p=c;h=q;do{o=i[p>>0]|0;if(o<<24>>24<=-1)break e;if(!(j[e+(o<<24>>24<<1)>>1]&8192))break e;p=p+1|0;h=p}while((p|0)!=(d|0))}while(0);d=h-q|0;e=i[$>>0]|0;o=(e&1)==0;e=o?(e&255)>>>1:k[D>>2]|0;if(e>>>0>=d>>>0){o=o?F:k[E>>2]|0;p=o+e|0;if((h|0)!=(q|0)){o=o+(e-d)|0;while(1){if((i[o>>0]|0)!=(i[c>>0]|0)){h=q;break d}o=o+1|0;if((o|0)==(p|0))break;else c=c+1|0}}}else h=q}else h=q;while(0);o=(u&1)==0;o=(o?B:v)+(o?(u&255)>>>1:k[C>>2]|0)|0;f:do if((h|0)!=(o|0)){e=w;d=w;o=h;while(1){h=k[a>>2]|0;do if(h){if((k[h+12>>2]|0)==(k[h+16>>2]|0)){x=0;h=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;w=x;x=0;if(w&1){W=21;break b}if((h|0)==-1){k[a>>2]=0;h=0;break}else{h=k[a>>2]|0;break}}}else h=0;while(0);c=(h|0)==0;do if(d){if((k[d+12>>2]|0)!=(k[d+16>>2]|0))if(c){h=e;p=d;break}else break f;x=0;h=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;w=x;x=0;if(w&1){W=21;break b}if((h|0)!=-1)if(c^(e|0)==0){h=e;p=e;break}else break f;else{k[b>>2]=0;h=0;W=131;break}}else{h=e;W=131}while(0);if((W|0)==131){W=0;if(c)break f;else p=0}c=k[a>>2]|0;d=k[c+12>>2]|0;if((d|0)==(k[c+16>>2]|0)){x=0;c=ta(k[(k[c>>2]|0)+36>>2]|0,c|0)|0;w=x;x=0;if(w&1){W=21;break b}}else c=l[d>>0]|0;if((c&255)<<24>>24!=(i[o>>0]|0))break f;c=k[a>>2]|0;d=c+12|0;e=k[d>>2]|0;if((e|0)==(k[c+16>>2]|0)){x=0;ta(k[(k[c>>2]|0)+40>>2]|0,c|0)|0;w=x;x=0;if(w&1){W=21;break b}}else k[d>>2]=e+1;o=o+1|0;c=i[aa>>0]|0;w=(c&1)==0;c=(w?B:k[A>>2]|0)+(w?(c&255)>>>1:k[C>>2]|0)|0;if((o|0)==(c|0)){o=c;break}else{e=h;d=p}}}while(0);if(z?(w=i[aa>>0]|0,v=(w&1)==0,(o|0)!=((v?B:k[A>>2]|0)+(v?(w&255)>>>1:k[C>>2]|0)|0)):0){W=143;break b}break}case 4:{q=i[V>>0]|0;h=w;e=w;o=0;g:while(1){c=k[a>>2]|0;do if(c){if((k[c+12>>2]|0)==(k[c+16>>2]|0)){x=0;c=ta(k[(k[c>>2]|0)+36>>2]|0,c|0)|0;w=x;x=0;if(w&1){W=23;break b}if((c|0)==-1){k[a>>2]=0;c=0;break}else{c=k[a>>2]|0;break}}}else c=0;while(0);d=(c|0)==0;do if(e){if((k[e+12>>2]|0)!=(k[e+16>>2]|0))if(d){p=h;break}else{d=h;break g}x=0;c=ta(k[(k[e>>2]|0)+36>>2]|0,e|0)|0;w=x;x=0;if(w&1){W=23;break b}if((c|0)!=-1)if(d^(h|0)==0){p=h;e=h;break}else{d=h;break g}else{k[b>>2]=0;h=0;W=156;break}}else W=156;while(0);if((W|0)==156){W=0;if(d){d=h;break}else{p=h;e=0}}h=k[a>>2]|0;c=k[h+12>>2]|0;if((c|0)==(k[h+16>>2]|0)){x=0;h=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;w=x;x=0;if(w&1){W=23;break b}}else h=l[c>>0]|0;c=h&255;if(c<<24>>24>-1?(j[(k[I>>2]|0)+(h<<24>>24<<1)>>1]&2048)!=0:0){h=k[n>>2]|0;if((h|0)==(k[P>>2]|0)){x=0;Fa(10,m|0,n|0,P|0);w=x;x=0;if(w&1){W=23;break b}h=k[n>>2]|0}k[n>>2]=h+1;i[h>>0]=c;o=o+1|0}else{w=i[Y>>0]|0;if(!(c<<24>>24==q<<24>>24&((o|0)!=0?(((w&1)==0?(w&255)>>>1:k[H>>2]|0)|0)!=0:0))){d=p;break}if((t|0)==(k[S>>2]|0)){x=0;Fa(11,da|0,T|0,S|0);w=x;x=0;if(w&1){W=23;break b}t=k[T>>2]|0}w=t+4|0;k[T>>2]=w;k[t>>2]=o;t=w;o=0}h=k[a>>2]|0;c=h+12|0;d=k[c>>2]|0;if((d|0)==(k[h+16>>2]|0)){x=0;ta(k[(k[h>>2]|0)+40>>2]|0,h|0)|0;w=x;x=0;if(w&1){W=23;break b}else{h=p;continue}}else{k[c>>2]=d+1;h=p;continue}}if((o|0)!=0?(k[da>>2]|0)!=(t|0):0){if((t|0)==(k[S>>2]|0)){x=0;Fa(11,da|0,T|0,S|0);w=x;x=0;if(w&1){W=24;break b}t=k[T>>2]|0}w=t+4|0;k[T>>2]=w;k[t>>2]=o;t=w}p=k[R>>2]|0;if((p|0)>0){o=k[a>>2]|0;do if(o){if((k[o+12>>2]|0)==(k[o+16>>2]|0)){x=0;o=ta(k[(k[o>>2]|0)+36>>2]|0,o|0)|0;w=x;x=0;if(w&1){W=24;break b}if((o|0)==-1){k[a>>2]=0;o=0;break}else{o=k[a>>2]|0;break}}}else o=0;while(0);o=(o|0)==0;do if(d){if((k[d+12>>2]|0)==(k[d+16>>2]|0)){x=0;h=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;w=x;x=0;if(w&1){W=24;break b}if((h|0)==-1){k[b>>2]=0;W=193;break}}if(!o){W=198;break b}}else W=193;while(0);if((W|0)==193){W=0;if(o){W=198;break b}else d=0}o=k[a>>2]|0;h=k[o+12>>2]|0;if((h|0)==(k[o+16>>2]|0)){x=0;o=ta(k[(k[o>>2]|0)+36>>2]|0,o|0)|0;w=x;x=0;if(w&1){W=24;break b}}else o=l[h>>0]|0;if((o&255)<<24>>24!=(i[Q>>0]|0)){W=198;break b}o=k[a>>2]|0;h=o+12|0;c=k[h>>2]|0;if((c|0)==(k[o+16>>2]|0)){x=0;ta(k[(k[o>>2]|0)+40>>2]|0,o|0)|0;w=x;x=0;if(w&1){W=24;break b}}else k[h>>2]=c+1;if((p|0)>0){e=d;c=d;q=p;while(1){o=k[a>>2]|0;do if(o){if((k[o+12>>2]|0)==(k[o+16>>2]|0)){x=0;o=ta(k[(k[o>>2]|0)+36>>2]|0,o|0)|0;w=x;x=0;if(w&1){W=22;break b}if((o|0)==-1){k[a>>2]=0;o=0;break}else{o=k[a>>2]|0;break}}}else o=0;while(0);h=(o|0)==0;do if(c){if((k[c+12>>2]|0)!=(k[c+16>>2]|0))if(h){o=e;p=c;break}else{W=222;break b}x=0;o=ta(k[(k[c>>2]|0)+36>>2]|0,c|0)|0;w=x;x=0;if(w&1){W=22;break b}if((o|0)!=-1)if(h^(e|0)==0){o=e;p=e;break}else{W=222;break b}else{k[b>>2]=0;o=0;W=215;break}}else{o=e;W=215}while(0);if((W|0)==215){W=0;if(h){W=222;break b}else p=0}h=k[a>>2]|0;c=k[h+12>>2]|0;if((c|0)==(k[h+16>>2]|0)){x=0;h=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;w=x;x=0;if(w&1){W=22;break b}}else h=l[c>>0]|0;if((h&255)<<24>>24<=-1){W=222;break b}if(!(j[(k[I>>2]|0)+(h<<24>>24<<1)>>1]&2048)){W=222;break b}if((k[n>>2]|0)==(k[P>>2]|0)?(x=0,Fa(10,m|0,n|0,P|0),w=x,x=0,w&1):0){W=22;break b}h=k[a>>2]|0;c=k[h+12>>2]|0;if((c|0)==(k[h+16>>2]|0)){x=0;h=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;w=x;x=0;if(w&1){W=22;break b}}else h=l[c>>0]|0;c=k[n>>2]|0;k[n>>2]=c+1;i[c>>0]=h;h=q;q=q+-1|0;k[R>>2]=q;c=k[a>>2]|0;d=c+12|0;e=k[d>>2]|0;if((e|0)==(k[c+16>>2]|0)){x=0;ta(k[(k[c>>2]|0)+40>>2]|0,c|0)|0;w=x;x=0;if(w&1){W=22;break b}}else k[d>>2]=e+1;if((h|0)<=1)break;else{e=o;c=p}}}}if((k[n>>2]|0)==(k[m>>2]|0)){W=233;break b}break}default:{}}while(0);h:do if((W|0)==42)while(1){W=0;h=k[a>>2]|0;do if(h){if((k[h+12>>2]|0)==(k[h+16>>2]|0)){x=0;h=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;w=x;x=0;if(w&1){W=20;break b}if((h|0)==-1){k[a>>2]=0;h=0;break}else{h=k[a>>2]|0;break}}}else h=0;while(0);c=(h|0)==0;do if(d){if((k[d+12>>2]|0)!=(k[d+16>>2]|0))if(c){e=o;break}else break h;x=0;h=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;w=x;x=0;if(w&1){W=20;break b}if((h|0)!=-1)if(c^(o|0)==0){e=o;d=o;break}else break h;else{k[b>>2]=0;o=0;W=54;break}}else W=54;while(0);if((W|0)==54){W=0;if(c)break h;else{e=o;d=0}}o=k[a>>2]|0;h=k[o+12>>2]|0;if((h|0)==(k[o+16>>2]|0)){x=0;o=ta(k[(k[o>>2]|0)+36>>2]|0,o|0)|0;w=x;x=0;if(w&1){W=20;break b}}else o=l[h>>0]|0;if((o&255)<<24>>24<=-1)break h;if(!(j[(k[I>>2]|0)+(o<<24>>24<<1)>>1]&8192))break h;o=k[a>>2]|0;h=o+12|0;c=k[h>>2]|0;if((c|0)==(k[o+16>>2]|0)){x=0;o=ta(k[(k[o>>2]|0)+40>>2]|0,o|0)|0;W=x;x=0;if(W&1){W=20;break b}}else{k[h>>2]=c+1;o=l[c>>0]|0}x=0;ra(55,$|0,o&255|0);W=x;x=0;if(W&1){W=20;break b}else{o=e;W=42}}while(0);y=y+1|0;if(y>>>0>=4){W=235;break}}i:switch(W|0){case 20:{h=Wa()|0;break a}case 21:{h=Wa()|0;break a}case 22:{h=Wa()|0;break a}case 23:{h=Wa()|0;break a}case 24:{h=Wa()|0;break a}case 40:{k[f>>2]=k[f>>2]|4;h=0;break}case 104:{k[f>>2]=k[f>>2]|4;h=0;break}case 143:{k[f>>2]=k[f>>2]|4;h=0;break}case 198:{k[f>>2]=k[f>>2]|4;h=0;break}case 222:{k[f>>2]=k[f>>2]|4;h=0;break}case 233:{k[f>>2]=k[f>>2]|4;h=0;break}case 235:{j:do if(s){e=s+1|0;p=s+8|0;q=s+4|0;c=1;k:while(1){o=i[s>>0]|0;if(!(o&1))o=(o&255)>>>1;else o=k[q>>2]|0;if(c>>>0>=o>>>0)break j;o=k[a>>2]|0;do if(o){if((k[o+12>>2]|0)==(k[o+16>>2]|0)){x=0;o=ta(k[(k[o>>2]|0)+36>>2]|0,o|0)|0;n=x;x=0;if(n&1){W=19;break k}if((o|0)==-1){k[a>>2]=0;o=0;break}else{o=k[a>>2]|0;break}}}else o=0;while(0);h=(o|0)==0;o=k[b>>2]|0;do if(o){if((k[o+12>>2]|0)==(k[o+16>>2]|0)){x=0;o=ta(k[(k[o>>2]|0)+36>>2]|0,o|0)|0;n=x;x=0;if(n&1){W=19;break k}if((o|0)==-1){k[b>>2]=0;W=253;break}}if(!h){W=260;break k}}else W=253;while(0);if((W|0)==253?(W=0,h):0){W=260;break}o=k[a>>2]|0;h=k[o+12>>2]|0;if((h|0)==(k[o+16>>2]|0)){x=0;o=ta(k[(k[o>>2]|0)+36>>2]|0,o|0)|0;n=x;x=0;if(n&1){W=19;break}}else o=l[h>>0]|0;if(!(i[s>>0]&1))h=e;else h=k[p>>2]|0;if((o&255)<<24>>24!=(i[h+c>>0]|0)){W=260;break}o=c+1|0;h=k[a>>2]|0;c=h+12|0;d=k[c>>2]|0;if((d|0)==(k[h+16>>2]|0)){x=0;ta(k[(k[h>>2]|0)+40>>2]|0,h|0)|0;n=x;x=0;if(n&1){W=19;break}else{c=o;continue}}else{k[c>>2]=d+1;c=o;continue}}if((W|0)==19){h=Wa()|0;break a}else if((W|0)==260){k[f>>2]=k[f>>2]|4;h=0;break i}}while(0);o=k[da>>2]|0;if((o|0)!=(t|0)?(k[X>>2]=0,Ip(Y,o,t,X),(k[X>>2]|0)!=0):0){k[f>>2]=k[f>>2]|4;h=0}else h=1;break}}wk($);wk(Z);wk(_);wk(aa);wk(Y);o=k[da>>2]|0;k[da>>2]=0;if((o|0)!=0?(x=0,qa(k[ca>>2]|0,o|0),da=x,x=0,da&1):0){da=Wa(0)|0;mc(da)}r=ba;return h|0}while(0);wk($);wk(Z);wk(_);wk(aa);wk(Y);o=k[da>>2]|0;k[da>>2]=0;if((o|0)!=0?(x=0,qa(k[ca>>2]|0,o|0),da=x,x=0,da&1):0){da=Wa(0)|0;mc(da)}fb(h|0);return 0}function Fp(a){a=a|0;var b=0;b=Va(8)|0;x=0;ra(69,b|0,a|0);a=x;x=0;if(a&1){a=Wa()|0;Ua(b|0);fb(a|0)}else ub(b|0,440,58)}
function Gp(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0;v=r;r=r+144|0;h=v+24|0;a=v+32|0;w=v+16|0;q=v+8|0;n=v+4|0;o=v+28|0;j=v;k[w>>2]=a;A=w+4|0;k[A>>2]=165;l=a+100|0;x=0;u=ta(67,e|0)|0;m=x;x=0;if(!(m&1)){k[n>>2]=u;x=0;m=Aa(26,n|0,43752)|0;a=x;x=0;a:do if(!(a&1)?(i[o>>0]=0,s=k[c>>2]|0,k[j>>2]=s,p=k[e+4>>2]|0,t=s,x=0,k[h>>2]=k[j>>2],p=ua(1,b|0,h|0,d|0,n|0,p|0,f|0,o|0,m|0,w|0,q|0,l|0)|0,e=x,x=0,!(e&1)):0){if(p){if(!(i[g>>0]&1)){i[g+1>>0]=0;i[g>>0]=0}else{i[k[g+8>>2]>>0]=0;k[g+4>>2]=0}if(i[o>>0]|0){x=0;a=Aa(k[(k[m>>2]|0)+28>>2]|0,m|0,45)|0;e=x;x=0;if(e&1)break;x=0;ra(55,g|0,a|0);e=x;x=0;if(e&1)break}x=0;j=Aa(k[(k[m>>2]|0)+28>>2]|0,m|0,48)|0;e=x;x=0;if(e&1)break;a=k[w>>2]|0;l=k[q>>2]|0;h=l+-1|0;b:do if(a>>>0<h>>>0)do{if((i[a>>0]|0)!=j<<24>>24)break b;a=a+1|0}while(a>>>0<h>>>0);while(0);x=0;va(32,g|0,a|0,l|0)|0;g=x;x=0;if(g&1)break}a=k[b>>2]|0;do if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;a=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;g=x;x=0;if(g&1)break a;if((a|0)==-1){k[b>>2]=0;a=0;break}else{a=k[b>>2]|0;break}}}else a=0;while(0);h=(a|0)==0;do if(s){if((k[t+12>>2]|0)==(k[t+16>>2]|0)){x=0;a=ta(k[(k[s>>2]|0)+36>>2]|0,t|0)|0;t=x;x=0;if(t&1)break a;if((a|0)==-1){k[c>>2]=0;z=29;break}}if(!h)z=30}else z=29;while(0);if((z|0)==29?h:0)z=30;if((z|0)==30)k[f>>2]=k[f>>2]|2;h=k[b>>2]|0;dk(u)|0;a=k[w>>2]|0;k[w>>2]=0;if((a|0)!=0?(x=0,qa(k[A>>2]|0,a|0),A=x,x=0,A&1):0){A=Wa(0)|0;mc(A)}r=v;return h|0}while(0);h=Wa()|0;dk(u)|0;a=k[w>>2]|0;k[w>>2]=0;if(!a)y=h;else z=36}else{h=Wa()|0;k[w>>2]=0;z=36}if((z|0)==36){x=0;qa(k[A>>2]|0,a|0);A=x;x=0;if(A&1){A=Wa(0)|0;mc(A)}else y=h}fb(y|0);return 0}function Hp(a,b,c,d,e,f,g,h,j,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0;z=r;r=r+112|0;m=z+100|0;n=z+88|0;o=z+76|0;p=z+64|0;q=z+52|0;s=z+48|0;t=z+36|0;u=z+24|0;v=z+12|0;w=z;do if(a){a=wq(b,43360)|0;Mb[k[(k[a>>2]|0)+44>>2]&127](m,a);w=k[m>>2]|0;i[c>>0]=w;i[c+1>>0]=w>>8;i[c+2>>0]=w>>16;i[c+3>>0]=w>>24;Mb[k[(k[a>>2]|0)+32>>2]&127](n,a);if(!(i[j>>0]&1)){i[j+1>>0]=0;i[j>>0]=0}else{i[k[j+8>>2]>>0]=0;k[j+4>>2]=0}x=0;ra(70,j|0,0);c=x;x=0;if(c&1){c=Wa(0)|0;mc(c)};k[j>>2]=k[n>>2];k[j+4>>2]=k[n+4>>2];k[j+8>>2]=k[n+8>>2];k[n>>2]=0;k[n+4>>2]=0;k[n+8>>2]=0;wk(n);Mb[k[(k[a>>2]|0)+28>>2]&127](o,a);if(!(i[h>>0]&1)){i[h+1>>0]=0;i[h>>0]=0}else{i[k[h+8>>2]>>0]=0;k[h+4>>2]=0}x=0;ra(70,h|0,0);c=x;x=0;if(c&1){c=Wa(0)|0;mc(c)};k[h>>2]=k[o>>2];k[h+4>>2]=k[o+4>>2];k[h+8>>2]=k[o+8>>2];k[o>>2]=0;k[o+4>>2]=0;k[o+8>>2]=0;wk(o);h=Ob[k[(k[a>>2]|0)+12>>2]&127](a)|0;i[d>>0]=h;h=Ob[k[(k[a>>2]|0)+16>>2]&127](a)|0;i[e>>0]=h;Mb[k[(k[a>>2]|0)+20>>2]&127](p,a);if(!(i[f>>0]&1)){i[f+1>>0]=0;i[f>>0]=0}else{i[k[f+8>>2]>>0]=0;k[f+4>>2]=0}x=0;ra(70,f|0,0);e=x;x=0;if(e&1){e=Wa(0)|0;mc(e)};k[f>>2]=k[p>>2];k[f+4>>2]=k[p+4>>2];k[f+8>>2]=k[p+8>>2];k[p>>2]=0;k[p+4>>2]=0;k[p+8>>2]=0;wk(p);Mb[k[(k[a>>2]|0)+24>>2]&127](q,a);if(!(i[g>>0]&1)){i[g+1>>0]=0;i[g>>0]=0}else{i[k[g+8>>2]>>0]=0;k[g+4>>2]=0}x=0;ra(70,g|0,0);e=x;x=0;if(e&1){e=Wa(0)|0;mc(e)}else{k[g>>2]=k[q>>2];k[g+4>>2]=k[q+4>>2];k[g+8>>2]=k[q+8>>2];k[q>>2]=0;k[q+4>>2]=0;k[q+8>>2]=0;wk(q);y=Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0;break}}else{a=wq(b,43296)|0;Mb[k[(k[a>>2]|0)+44>>2]&127](s,a);s=k[s>>2]|0;i[c>>0]=s;i[c+1>>0]=s>>8;i[c+2>>0]=s>>16;i[c+3>>0]=s>>24;Mb[k[(k[a>>2]|0)+32>>2]&127](t,a);if(!(i[j>>0]&1)){i[j+1>>0]=0;i[j>>0]=0}else{i[k[j+8>>2]>>0]=0;k[j+4>>2]=0}x=0;ra(70,j|0,0);c=x;x=0;if(c&1){c=Wa(0)|0;mc(c)};k[j>>2]=k[t>>2];k[j+4>>2]=k[t+4>>2];k[j+8>>2]=k[t+8>>2];k[t>>2]=0;k[t+4>>2]=0;k[t+8>>2]=0;wk(t);Mb[k[(k[a>>2]|0)+28>>2]&127](u,a);if(!(i[h>>0]&1)){i[h+1>>0]=0;i[h>>0]=0}else{i[k[h+8>>2]>>0]=0;k[h+4>>2]=0}x=0;ra(70,h|0,0);c=x;x=0;if(c&1){c=Wa(0)|0;mc(c)};k[h>>2]=k[u>>2];k[h+4>>2]=k[u+4>>2];k[h+8>>2]=k[u+8>>2];k[u>>2]=0;k[u+4>>2]=0;k[u+8>>2]=0;wk(u);h=Ob[k[(k[a>>2]|0)+12>>2]&127](a)|0;i[d>>0]=h;h=Ob[k[(k[a>>2]|0)+16>>2]&127](a)|0;i[e>>0]=h;Mb[k[(k[a>>2]|0)+20>>2]&127](v,a);if(!(i[f>>0]&1)){i[f+1>>0]=0;i[f>>0]=0}else{i[k[f+8>>2]>>0]=0;k[f+4>>2]=0}x=0;ra(70,f|0,0);e=x;x=0;if(e&1){e=Wa(0)|0;mc(e)};k[f>>2]=k[v>>2];k[f+4>>2]=k[v+4>>2];k[f+8>>2]=k[v+8>>2];k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;wk(v);Mb[k[(k[a>>2]|0)+24>>2]&127](w,a);if(!(i[g>>0]&1)){i[g+1>>0]=0;i[g>>0]=0}else{i[k[g+8>>2]>>0]=0;k[g+4>>2]=0}x=0;ra(70,g|0,0);e=x;x=0;if(e&1){e=Wa(0)|0;mc(e)}else{k[g>>2]=k[w>>2];k[g+4>>2]=k[w+4>>2];k[g+8>>2]=k[w+8>>2];k[w>>2]=0;k[w+4>>2]=0;k[w+8>>2]=0;wk(w);y=Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0;break}}while(0);k[l>>2]=y;r=z;return}function Ip(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;e=i[a>>0]|0;g=a+4|0;f=k[g>>2]|0;a:do if(((e&1)==0?(e&255)>>>1:f)|0){if((b|0)!=(c|0)){e=c+-4|0;if(e>>>0>b>>>0){f=b;do{h=k[f>>2]|0;k[f>>2]=k[e>>2];k[e>>2]=h;f=f+4|0;e=e+-4|0}while(f>>>0<e>>>0)}e=i[a>>0]|0;f=k[g>>2]|0}h=(e&1)==0;g=h?a+1|0:k[a+8>>2]|0;c=c+-4|0;a=g+(h?(e&255)>>>1:f)|0;f=i[g>>0]|0;e=f<<24>>24<1|f<<24>>24==127;b:do if(c>>>0>b>>>0){while(1){if(!e?(f<<24>>24|0)!=(k[b>>2]|0):0)break;g=(a-g|0)>1?g+1|0:g;b=b+4|0;f=i[g>>0]|0;e=f<<24>>24<1|f<<24>>24==127;if(b>>>0>=c>>>0)break b}k[d>>2]=4;break a}while(0);if(!e?((k[c>>2]|0)+-1|0)>>>0>=f<<24>>24>>>0:0)k[d>>2]=4}while(0);return}function Jp(a){a=a|0;return}function Kp(a){a=a|0;Sg(a);return}function Lp(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;B=r;r=r+576|0;w=B+424|0;A=B;a=B+24|0;D=B+16|0;y=B+12|0;C=B+8|0;n=B+464|0;j=B+4|0;z=B+468|0;k[D>>2]=a;F=D+4|0;k[F>>2]=165;l=a+400|0;x=0;h=ta(67,e|0)|0;v=x;x=0;if(!(v&1)){k[C>>2]=h;x=0;a=Aa(26,C|0,43744)|0;v=x;x=0;a:do if(!(v&1)?(i[n>>0]=0,k[j>>2]=k[c>>2],m=k[e+4>>2]|0,x=0,k[w>>2]=k[j>>2],m=ua(2,b|0,w|0,d|0,C|0,m|0,f|0,n|0,a|0,D|0,y|0,l|0)|0,v=x,x=0,!(v&1)):0){b:do if(m){x=0;Ea(k[(k[a>>2]|0)+48>>2]|0,a|0,57463,57473,w|0)|0;v=x;x=0;if(v&1){G=10;break a}j=k[y>>2]|0;l=k[D>>2]|0;a=j-l|0;if((a|0)>392){a=tj((a>>2)+2|0)|0;h=a;if(!a){x=0;Ga(6);v=x;x=0;if(!(v&1)){a=0;G=13}}else G=13}else{h=0;a=z;G=13}do if((G|0)==13){if(i[n>>0]|0){i[a>>0]=45;a=a+1|0}u=w+40|0;v=w;if(l>>>0<j>>>0){m=w+4|0;d=m+4|0;e=d+4|0;n=e+4|0;o=n+4|0;p=o+4|0;q=p+4|0;s=q+4|0;t=s+4|0;do{j=k[l>>2]|0;do if((k[w>>2]|0)!=(j|0))if((k[m>>2]|0)!=(j|0))if((k[d>>2]|0)!=(j|0))if((k[e>>2]|0)!=(j|0))if((k[n>>2]|0)==(j|0))j=n;else{if((k[o>>2]|0)==(j|0)){j=o;break}if((k[p>>2]|0)==(j|0)){j=p;break}if((k[q>>2]|0)==(j|0)){j=q;break}if((k[s>>2]|0)==(j|0)){j=s;break}j=(k[t>>2]|0)==(j|0)?t:u}else j=e;else j=d;else j=m;else j=w;while(0);i[a>>0]=i[57463+(j-v>>2)>>0]|0;l=l+4|0;a=a+1|0}while(l>>>0<(k[y>>2]|0)>>>0)}i[a>>0]=0;k[A>>2]=g;if((Pi(z,57443,A)|0)!=1?(x=0,qa(166,57447),g=x,x=0,g&1):0)break;if(h)uj(h);break b}while(0);a=Wa()|0;if(!h){j=a;h=D;break a}uj(h);j=a;h=D;break a}while(0);a=k[b>>2]|0;do if(a){h=k[a+12>>2]|0;if((h|0)==(k[a+16>>2]|0)){x=0;a=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;g=x;x=0;if(g&1){G=10;break a}}else a=k[h>>2]|0;if((a|0)==-1){k[b>>2]=0;j=1;break}else{j=(k[b>>2]|0)==0;break}}else j=1;while(0);a=k[c>>2]|0;do if(a){h=k[a+12>>2]|0;if((h|0)==(k[a+16>>2]|0)){x=0;a=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;g=x;x=0;if(g&1){G=10;break a}}else a=k[h>>2]|0;if((a|0)!=-1)if(j)break;else{G=40;break}else{k[c>>2]=0;G=38;break}}else G=38;while(0);if((G|0)==38?j:0)G=40;if((G|0)==40)k[f>>2]=k[f>>2]|2;h=k[b>>2]|0;dk(k[C>>2]|0)|0;a=k[D>>2]|0;k[D>>2]=0;if((a|0)!=0?(x=0,qa(k[F>>2]|0,a|0),G=x,x=0,G&1):0){G=Wa(0)|0;mc(G)}r=B;return h|0}else G=10;while(0);if((G|0)==10){j=Wa()|0;h=D}dk(k[C>>2]|0)|0;a=k[h>>2]|0;k[h>>2]=0;if(!a)E=j;else{h=k[F>>2]|0;G=47}}else{j=Wa()|0;k[D>>2]=0;h=165;G=47}if((G|0)==47){x=0;qa(h|0,a|0);G=x;x=0;if(G&1){G=Wa(0)|0;mc(G)}else E=j}fb(E|0);return 0}function Mp(a,b,c,d,e,f,g,h,j,m,n){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;m=m|0;n=n|0;var o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0;Y=r;r=r+512|0;K=Y+96|0;o=Y+104|0;_=Y+88|0;O=Y+80|0;N=Y+76|0;P=Y+504|0;L=Y+72|0;Q=Y+68|0;T=Y+56|0;X=Y+44|0;V=Y+32|0;U=Y+20|0;W=Y+8|0;M=Y+4|0;S=Y;k[K>>2]=n;k[_>>2]=o;Z=_+4|0;k[Z>>2]=165;k[O>>2]=o;k[N>>2]=o+400;k[T>>2]=0;k[T+4>>2]=0;k[T+8>>2]=0;k[X>>2]=0;k[X+4>>2]=0;k[X+8>>2]=0;k[V>>2]=0;k[V+4>>2]=0;k[V+8>>2]=0;k[U>>2]=0;k[U+4>>2]=0;k[U+8>>2]=0;k[W>>2]=0;k[W+4>>2]=0;k[W+8>>2]=0;x=0;za(2,c|0,d|0,P|0,L|0,Q|0,T|0,X|0,V|0,U|0,M|0);J=x;x=0;a:do if(J&1)c=Wa()|0;else{k[m>>2]=k[j>>2];G=V+4|0;H=U+4|0;I=U+8|0;J=V+8|0;z=(e&512|0)!=0;A=X+8|0;B=X+4|0;C=W+4|0;D=W+8|0;E=P+3|0;F=T+4|0;y=0;q=0;b:while(1){n=k[a>>2]|0;do if(n){c=k[n+12>>2]|0;if((c|0)==(k[n+16>>2]|0)){x=0;n=ta(k[(k[n>>2]|0)+36>>2]|0,n|0)|0;w=x;x=0;if(w&1){R=26;break b}}else n=k[c>>2]|0;if((n|0)==-1){k[a>>2]=0;d=1;break}else{d=(k[a>>2]|0)==0;break}}else d=1;while(0);c=k[b>>2]|0;do if(c){n=k[c+12>>2]|0;if((n|0)==(k[c+16>>2]|0)){x=0;n=ta(k[(k[c>>2]|0)+36>>2]|0,c|0)|0;w=x;x=0;if(w&1){R=26;break b}}else n=k[n>>2]|0;if((n|0)!=-1)if(d){w=c;break}else{s=o;R=244;break b}else{k[b>>2]=0;R=16;break}}else R=16;while(0);if((R|0)==16){R=0;if(d){s=o;R=244;break}else w=0}c:do switch(i[P+y>>0]|0){case 1:{if((y|0)!=3){n=k[a>>2]|0;c=k[n+12>>2]|0;if((c|0)==(k[n+16>>2]|0)){x=0;n=ta(k[(k[n>>2]|0)+36>>2]|0,n|0)|0;R=x;x=0;if(R&1){R=26;break b}}else n=k[c>>2]|0;x=0;n=va(k[(k[h>>2]|0)+12>>2]|0,h|0,8192,n|0)|0;R=x;x=0;if(R&1){R=26;break b}if(!n){R=42;break b}n=k[a>>2]|0;c=n+12|0;d=k[c>>2]|0;if((d|0)==(k[n+16>>2]|0)){x=0;n=ta(k[(k[n>>2]|0)+40>>2]|0,n|0)|0;R=x;x=0;if(R&1){R=26;break b}}else{k[c>>2]=d+4;n=k[d>>2]|0}x=0;ra(71,W|0,n|0);R=x;x=0;if(R&1){R=26;break b}else{n=w;e=w;R=44}}else n=o;break}case 0:{if((y|0)==3)n=o;else{n=w;e=w;R=44}break}case 3:{c=i[V>>0]|0;n=(c&1)==0?(c&255)>>>1:k[G>>2]|0;d=i[U>>0]|0;e=(d&1)==0?(d&255)>>>1:k[H>>2]|0;if((n|0)==(0-e|0))n=o;else{if(!n){n=k[a>>2]|0;c=k[n+12>>2]|0;if((c|0)==(k[n+16>>2]|0)){x=0;n=ta(k[(k[n>>2]|0)+36>>2]|0,n|0)|0;w=x;x=0;if(w&1){R=26;break b}c=i[U>>0]|0}else{n=k[c>>2]|0;c=d}if((n|0)!=(k[((c&1)==0?H:k[I>>2]|0)>>2]|0)){n=o;break c}n=k[a>>2]|0;c=n+12|0;d=k[c>>2]|0;if((d|0)==(k[n+16>>2]|0)){x=0;ta(k[(k[n>>2]|0)+40>>2]|0,n|0)|0;w=x;x=0;if(w&1){R=26;break b}}else k[c>>2]=d+4;i[g>>0]=1;w=i[U>>0]|0;n=o;q=((w&1)==0?(w&255)>>>1:k[H>>2]|0)>>>0>1?U:q;break c}p=k[a>>2]|0;s=k[p+12>>2]|0;d=k[p+16>>2]|0;n=(s|0)==(d|0);if(!e){if(n){x=0;n=ta(k[(k[p>>2]|0)+36>>2]|0,p|0)|0;w=x;x=0;if(w&1){R=26;break b}c=i[V>>0]|0}else n=k[s>>2]|0;if((n|0)!=(k[((c&1)==0?G:k[J>>2]|0)>>2]|0)){i[g>>0]=1;n=o;break c}n=k[a>>2]|0;c=n+12|0;d=k[c>>2]|0;if((d|0)==(k[n+16>>2]|0)){x=0;ta(k[(k[n>>2]|0)+40>>2]|0,n|0)|0;w=x;x=0;if(w&1){R=26;break b}}else k[c>>2]=d+4;w=i[V>>0]|0;n=o;q=((w&1)==0?(w&255)>>>1:k[G>>2]|0)>>>0>1?V:q;break c}if(n){x=0;n=ta(k[(k[p>>2]|0)+36>>2]|0,p|0)|0;w=x;x=0;if(w&1){R=26;break b}d=k[a>>2]|0;c=i[V>>0]|0;p=d;s=k[d+12>>2]|0;d=k[d+16>>2]|0}else n=k[s>>2]|0;e=p+12|0;d=(s|0)==(d|0);if((n|0)==(k[((c&1)==0?G:k[J>>2]|0)>>2]|0)){if(d){x=0;ta(k[(k[p>>2]|0)+40>>2]|0,p|0)|0;w=x;x=0;if(w&1){R=26;break b}}else k[e>>2]=s+4;w=i[V>>0]|0;n=o;q=((w&1)==0?(w&255)>>>1:k[G>>2]|0)>>>0>1?V:q;break c}if(d){x=0;n=ta(k[(k[p>>2]|0)+36>>2]|0,p|0)|0;w=x;x=0;if(w&1){R=26;break b}}else n=k[s>>2]|0;if((n|0)!=(k[((i[U>>0]&1)==0?H:k[I>>2]|0)>>2]|0)){R=107;break b}n=k[a>>2]|0;c=n+12|0;d=k[c>>2]|0;if((d|0)==(k[n+16>>2]|0)){x=0;ta(k[(k[n>>2]|0)+40>>2]|0,n|0)|0;w=x;x=0;if(w&1){R=26;break b}}else k[c>>2]=d+4;i[g>>0]=1;w=i[U>>0]|0;n=o;q=((w&1)==0?(w&255)>>>1:k[H>>2]|0)>>>0>1?U:q}break}case 2:{if(!(y>>>0<2|(q|0)!=0)?!(z|(y|0)==2&(i[E>>0]|0)!=0):0){n=o;q=0;break c}e=i[X>>0]|0;d=k[A>>2]|0;c=(e&1)==0?B:d;n=c;d:do if((y|0)!=0?(l[P+(y+-1)>>0]|0)<2:0){v=(e&1)==0;e:do if((c|0)!=((v?B:d)+((v?(e&255)>>>1:k[B>>2]|0)<<2)|0)){e=c;while(1){x=0;c=va(k[(k[h>>2]|0)+12>>2]|0,h|0,8192,k[e>>2]|0)|0;v=x;x=0;if(v&1){R=23;break b}if(!c)break;e=e+4|0;n=e;c=i[X>>0]|0;d=k[A>>2]|0;v=(c&1)==0;if((e|0)==((v?B:d)+((v?(c&255)>>>1:k[B>>2]|0)<<2)|0)){e=c;break e}}e=i[X>>0]|0;d=k[A>>2]|0}while(0);s=(e&1)==0?B:d;c=s;t=n-c>>2;u=i[W>>0]|0;p=(u&1)==0;u=p?(u&255)>>>1:k[C>>2]|0;if(u>>>0>=t>>>0){p=p?C:k[D>>2]|0;v=p+(u<<2)|0;if(!t)c=n;else{p=p+(u-t<<2)|0;while(1){if((k[p>>2]|0)!=(k[s>>2]|0))break d;p=p+4|0;if((p|0)==(v|0)){c=n;break}else s=s+4|0}}}}else c=n;while(0);n=(e&1)==0;n=(n?B:d)+((n?(e&255)>>>1:k[B>>2]|0)<<2)|0;f:do if((c|0)!=(n|0)){p=w;e=w;n=c;while(1){c=k[a>>2]|0;do if(c){d=k[c+12>>2]|0;if((d|0)==(k[c+16>>2]|0)){x=0;c=ta(k[(k[c>>2]|0)+36>>2]|0,c|0)|0;w=x;x=0;if(w&1){R=22;break b}}else c=k[d>>2]|0;if((c|0)==-1){k[a>>2]=0;d=1;break}else{d=(k[a>>2]|0)==0;break}}else d=1;while(0);do if(e){c=k[e+12>>2]|0;if((c|0)==(k[e+16>>2]|0)){x=0;c=ta(k[(k[e>>2]|0)+36>>2]|0,e|0)|0;w=x;x=0;if(w&1){R=22;break b}}else c=k[c>>2]|0;if((c|0)!=-1)if(d^(p|0)==0){c=p;s=p;break}else break f;else{k[b>>2]=0;c=0;R=136;break}}else{c=p;R=136}while(0);if((R|0)==136){R=0;if(d)break f;else s=0}d=k[a>>2]|0;e=k[d+12>>2]|0;if((e|0)==(k[d+16>>2]|0)){x=0;d=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;w=x;x=0;if(w&1){R=22;break b}}else d=k[e>>2]|0;if((d|0)!=(k[n>>2]|0))break f;d=k[a>>2]|0;e=d+12|0;p=k[e>>2]|0;if((p|0)==(k[d+16>>2]|0)){x=0;ta(k[(k[d>>2]|0)+40>>2]|0,d|0)|0;w=x;x=0;if(w&1){R=22;break b}}else k[e>>2]=p+4;n=n+4|0;d=i[X>>0]|0;w=(d&1)==0;d=(w?B:k[A>>2]|0)+((w?(d&255)>>>1:k[B>>2]|0)<<2)|0;if((n|0)==(d|0)){n=d;break}else{p=c;e=s}}}while(0);if(z?(w=i[X>>0]|0,v=(w&1)==0,(n|0)!=((v?B:k[A>>2]|0)+((v?(w&255)>>>1:k[B>>2]|0)<<2)|0)):0){R=148;break b}else n=o;break}case 4:{u=k[Q>>2]|0;t=w;p=w;n=o;c=0;g:while(1){d=k[a>>2]|0;do if(d){e=k[d+12>>2]|0;if((e|0)==(k[d+16>>2]|0)){x=0;d=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;w=x;x=0;if(w&1){R=25;break b}}else d=k[e>>2]|0;if((d|0)==-1){k[a>>2]=0;e=1;break}else{e=(k[a>>2]|0)==0;break}}else e=1;while(0);do if(p){d=k[p+12>>2]|0;if((d|0)==(k[p+16>>2]|0)){x=0;d=ta(k[(k[p>>2]|0)+36>>2]|0,p|0)|0;w=x;x=0;if(w&1){R=25;break b}}else d=k[d>>2]|0;if((d|0)!=-1)if(e^(t|0)==0){d=t;s=t;break}else{o=t;break g}else{k[b>>2]=0;d=0;R=162;break}}else{d=t;R=162}while(0);if((R|0)==162){R=0;if(e){o=d;break}else s=0}e=k[a>>2]|0;o=k[e+12>>2]|0;if((o|0)==(k[e+16>>2]|0)){x=0;e=ta(k[(k[e>>2]|0)+36>>2]|0,e|0)|0;w=x;x=0;if(w&1){R=25;break b}}else e=k[o>>2]|0;x=0;o=va(k[(k[h>>2]|0)+12>>2]|0,h|0,2048,e|0)|0;w=x;x=0;if(w&1){R=25;break b}if(o){o=k[m>>2]|0;if((o|0)==(k[K>>2]|0)){x=0;Fa(12,j|0,m|0,K|0);w=x;x=0;if(w&1){R=25;break b}o=k[m>>2]|0}k[m>>2]=o+4;k[o>>2]=e;c=c+1|0}else{w=i[T>>0]|0;if(!((e|0)==(u|0)&((c|0)!=0?(((w&1)==0?(w&255)>>>1:k[F>>2]|0)|0)!=0:0))){o=d;break}if((n|0)==(k[N>>2]|0)){x=0;Fa(11,_|0,O|0,N|0);w=x;x=0;if(w&1){R=25;break b}n=k[O>>2]|0}w=n+4|0;k[O>>2]=w;k[n>>2]=c;n=w;c=0}e=k[a>>2]|0;o=e+12|0;p=k[o>>2]|0;if((p|0)==(k[e+16>>2]|0)){x=0;ta(k[(k[e>>2]|0)+40>>2]|0,e|0)|0;w=x;x=0;if(w&1){R=25;break b}else{t=d;p=s;continue}}else{k[o>>2]=p+4;t=d;p=s;continue}}if((c|0)!=0?(k[_>>2]|0)!=(n|0):0){if((n|0)==(k[N>>2]|0)){x=0;Fa(11,_|0,O|0,N|0);w=x;x=0;if(w&1){R=26;break b}n=k[O>>2]|0}w=n+4|0;k[O>>2]=w;k[n>>2]=c;n=w}s=k[M>>2]|0;if((s|0)>0){c=k[a>>2]|0;do if(c){d=k[c+12>>2]|0;if((d|0)==(k[c+16>>2]|0)){x=0;c=ta(k[(k[c>>2]|0)+36>>2]|0,c|0)|0;w=x;x=0;if(w&1){R=26;break b}}else c=k[d>>2]|0;if((c|0)==-1){k[a>>2]=0;d=1;break}else{d=(k[a>>2]|0)==0;break}}else d=1;while(0);do if(o){c=k[o+12>>2]|0;if((c|0)==(k[o+16>>2]|0)){x=0;c=ta(k[(k[o>>2]|0)+36>>2]|0,o|0)|0;w=x;x=0;if(w&1){R=26;break b}}else c=k[c>>2]|0;if((c|0)!=-1)if(d)break;else{R=206;break b}else{k[b>>2]=0;R=200;break}}else R=200;while(0);if((R|0)==200){R=0;if(d){R=206;break b}else o=0}c=k[a>>2]|0;d=k[c+12>>2]|0;if((d|0)==(k[c+16>>2]|0)){x=0;c=ta(k[(k[c>>2]|0)+36>>2]|0,c|0)|0;w=x;x=0;if(w&1){R=26;break b}}else c=k[d>>2]|0;if((c|0)!=(k[L>>2]|0)){R=206;break b}c=k[a>>2]|0;d=c+12|0;e=k[d>>2]|0;if((e|0)==(k[c+16>>2]|0)){x=0;ta(k[(k[c>>2]|0)+40>>2]|0,c|0)|0;w=x;x=0;if(w&1){R=26;break b}}else k[d>>2]=e+4;if((s|0)>0){p=o;e=o;t=s;while(1){c=k[a>>2]|0;do if(c){d=k[c+12>>2]|0;if((d|0)==(k[c+16>>2]|0)){x=0;c=ta(k[(k[c>>2]|0)+36>>2]|0,c|0)|0;w=x;x=0;if(w&1){R=24;break b}}else c=k[d>>2]|0;if((c|0)==-1){k[a>>2]=0;d=1;break}else{d=(k[a>>2]|0)==0;break}}else d=1;while(0);do if(e){c=k[e+12>>2]|0;if((c|0)==(k[e+16>>2]|0)){x=0;c=ta(k[(k[e>>2]|0)+36>>2]|0,e|0)|0;w=x;x=0;if(w&1){R=24;break b}}else c=k[c>>2]|0;if((c|0)!=-1)if(d^(p|0)==0){c=p;s=p;break}else{R=231;break b}else{k[b>>2]=0;c=0;R=224;break}}else{c=p;R=224}while(0);if((R|0)==224){R=0;if(d){R=231;break b}else s=0}d=k[a>>2]|0;e=k[d+12>>2]|0;if((e|0)==(k[d+16>>2]|0)){x=0;d=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;w=x;x=0;if(w&1){R=24;break b}}else d=k[e>>2]|0;x=0;d=va(k[(k[h>>2]|0)+12>>2]|0,h|0,2048,d|0)|0;w=x;x=0;if(w&1){R=24;break b}if(!d){R=231;break b}if((k[m>>2]|0)==(k[K>>2]|0)?(x=0,Fa(12,j|0,m|0,K|0),w=x,x=0,w&1):0){R=24;break b}d=k[a>>2]|0;e=k[d+12>>2]|0;if((e|0)==(k[d+16>>2]|0)){x=0;d=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;w=x;x=0;if(w&1){R=24;break b}}else d=k[e>>2]|0;e=k[m>>2]|0;k[m>>2]=e+4;k[e>>2]=d;d=t;t=t+-1|0;k[M>>2]=t;e=k[a>>2]|0;o=e+12|0;p=k[o>>2]|0;if((p|0)==(k[e+16>>2]|0)){x=0;ta(k[(k[e>>2]|0)+40>>2]|0,e|0)|0;w=x;x=0;if(w&1){R=24;break b}}else k[o>>2]=p+4;if((d|0)<=1)break;else{p=c;e=s}}}}if((k[m>>2]|0)==(k[j>>2]|0)){R=242;break b}break}default:n=o}while(0);h:do if((R|0)==44)while(1){R=0;c=k[a>>2]|0;do if(c){d=k[c+12>>2]|0;if((d|0)==(k[c+16>>2]|0)){x=0;c=ta(k[(k[c>>2]|0)+36>>2]|0,c|0)|0;w=x;x=0;if(w&1){R=21;break b}}else c=k[d>>2]|0;if((c|0)==-1){k[a>>2]=0;d=1;break}else{d=(k[a>>2]|0)==0;break}}else d=1;while(0);do if(e){c=k[e+12>>2]|0;if((c|0)==(k[e+16>>2]|0)){x=0;c=ta(k[(k[e>>2]|0)+36>>2]|0,e|0)|0;w=x;x=0;if(w&1){R=21;break b}}else c=k[c>>2]|0;if((c|0)!=-1)if(d^(n|0)==0){p=n;e=n;break}else{n=o;break h}else{k[b>>2]=0;n=0;R=57;break}}else R=57;while(0);if((R|0)==57){R=0;if(d){n=o;break h}else{p=n;e=0}}n=k[a>>2]|0;c=k[n+12>>2]|0;if((c|0)==(k[n+16>>2]|0)){x=0;n=ta(k[(k[n>>2]|0)+36>>2]|0,n|0)|0;w=x;x=0;if(w&1){R=21;break b}}else n=k[c>>2]|0;x=0;n=va(k[(k[h>>2]|0)+12>>2]|0,h|0,8192,n|0)|0;w=x;x=0;if(w&1){R=21;break b}if(!n){n=o;break h}n=k[a>>2]|0;c=n+12|0;d=k[c>>2]|0;if((d|0)==(k[n+16>>2]|0)){x=0;n=ta(k[(k[n>>2]|0)+40>>2]|0,n|0)|0;R=x;x=0;if(R&1){R=21;break b}}else{k[c>>2]=d+4;n=k[d>>2]|0}x=0;ra(71,W|0,n|0);R=x;x=0;if(R&1){R=21;break b}else{n=p;R=44}}while(0);y=y+1|0;if(y>>>0>=4){s=n;R=244;break}else o=n}i:switch(R|0){case 21:{c=Wa()|0;break a}case 22:{c=Wa()|0;break a}case 23:{c=Wa()|0;break a}case 24:{c=Wa()|0;break a}case 25:{c=Wa()|0;break a}case 26:{c=Wa()|0;break a}case 42:{k[f>>2]=k[f>>2]|4;c=0;break}case 107:{k[f>>2]=k[f>>2]|4;c=0;break}case 148:{k[f>>2]=k[f>>2]|4;c=0;break}case 206:{k[f>>2]=k[f>>2]|4;c=0;break}case 231:{k[f>>2]=k[f>>2]|4;c=0;break}case 242:{k[f>>2]=k[f>>2]|4;c=0;break}case 244:{j:do if(q){o=q+4|0;p=q+8|0;e=1;k:while(1){n=i[q>>0]|0;if(!(n&1))n=(n&255)>>>1;else n=k[o>>2]|0;if(e>>>0>=n>>>0)break j;n=k[a>>2]|0;do if(n){c=k[n+12>>2]|0;if((c|0)==(k[n+16>>2]|0)){x=0;n=ta(k[(k[n>>2]|0)+36>>2]|0,n|0)|0;m=x;x=0;if(m&1){R=20;break k}}else n=k[c>>2]|0;if((n|0)==-1){k[a>>2]=0;d=1;break}else{d=(k[a>>2]|0)==0;break}}else d=1;while(0);n=k[b>>2]|0;do if(n){c=k[n+12>>2]|0;if((c|0)==(k[n+16>>2]|0)){x=0;n=ta(k[(k[n>>2]|0)+36>>2]|0,n|0)|0;m=x;x=0;if(m&1){R=20;break k}}else n=k[c>>2]|0;if((n|0)!=-1)if(d)break;else{R=271;break k}else{k[b>>2]=0;R=263;break}}else R=263;while(0);if((R|0)==263?(R=0,d):0){R=271;break}n=k[a>>2]|0;c=k[n+12>>2]|0;if((c|0)==(k[n+16>>2]|0)){x=0;n=ta(k[(k[n>>2]|0)+36>>2]|0,n|0)|0;m=x;x=0;if(m&1){R=20;break}}else n=k[c>>2]|0;if(!(i[q>>0]&1))c=o;else c=k[p>>2]|0;if((n|0)!=(k[c+(e<<2)>>2]|0)){R=271;break}n=e+1|0;c=k[a>>2]|0;d=c+12|0;e=k[d>>2]|0;if((e|0)==(k[c+16>>2]|0)){x=0;ta(k[(k[c>>2]|0)+40>>2]|0,c|0)|0;m=x;x=0;if(m&1){R=20;break}else{e=n;continue}}else{k[d>>2]=e+4;e=n;continue}}if((R|0)==20){c=Wa()|0;break a}else if((R|0)==271){k[f>>2]=k[f>>2]|4;c=0;break i}}while(0);n=k[_>>2]|0;if((n|0)!=(s|0)?(k[S>>2]=0,Ip(T,n,s,S),(k[S>>2]|0)!=0):0){k[f>>2]=k[f>>2]|4;c=0}else c=1;break}}Kk(W);Kk(U);Kk(V);Kk(X);wk(T);n=k[_>>2]|0;k[_>>2]=0;if((n|0)!=0?(x=0,qa(k[Z>>2]|0,n|0),_=x,x=0,_&1):0){_=Wa(0)|0;mc(_)}r=Y;return c|0}while(0);Kk(W);Kk(U);Kk(V);Kk(X);wk(T);n=k[_>>2]|0;k[_>>2]=0;if((n|0)!=0?(x=0,qa(k[Z>>2]|0,n|0),_=x,x=0,_&1):0){_=Wa(0)|0;mc(_)}fb(c|0);return 0}function Np(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0;v=r;r=r+432|0;h=v+424|0;a=v+24|0;y=v+16|0;q=v+8|0;n=v+4|0;o=v+428|0;j=v;k[y>>2]=a;A=y+4|0;k[A>>2]=165;l=a+400|0;x=0;u=ta(67,e|0)|0;m=x;x=0;if(!(m&1)){k[n>>2]=u;x=0;m=Aa(26,n|0,43744)|0;a=x;x=0;a:do if(!(a&1)?(i[o>>0]=0,s=k[c>>2]|0,k[j>>2]=s,p=k[e+4>>2]|0,t=s,x=0,k[h>>2]=k[j>>2],p=ua(2,b|0,h|0,d|0,n|0,p|0,f|0,o|0,m|0,y|0,q|0,l|0)|0,e=x,x=0,!(e&1)):0){if(p){if(!(i[g>>0]&1))i[g>>0]=0;else k[k[g+8>>2]>>2]=0;k[g+4>>2]=0;if(i[o>>0]|0){x=0;a=Aa(k[(k[m>>2]|0)+44>>2]|0,m|0,45)|0;e=x;x=0;if(e&1)break;x=0;ra(71,g|0,a|0);e=x;x=0;if(e&1)break}x=0;j=Aa(k[(k[m>>2]|0)+44>>2]|0,m|0,48)|0;e=x;x=0;if(e&1)break;a=k[y>>2]|0;l=k[q>>2]|0;h=l+-4|0;b:do if(a>>>0<h>>>0)do{if((k[a>>2]|0)!=(j|0))break b;a=a+4|0}while(a>>>0<h>>>0);while(0);x=0;va(33,g|0,a|0,l|0)|0;g=x;x=0;if(g&1)break}a=k[b>>2]|0;do if(a){h=k[a+12>>2]|0;if((h|0)==(k[a+16>>2]|0)){x=0;a=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;g=x;x=0;if(g&1)break a}else a=k[h>>2]|0;if((a|0)==-1){k[b>>2]=0;h=1;break}else{h=(k[b>>2]|0)==0;break}}else h=1;while(0);do if(s){a=k[t+12>>2]|0;if((a|0)==(k[t+16>>2]|0)){x=0;a=ta(k[(k[s>>2]|0)+36>>2]|0,t|0)|0;t=x;x=0;if(t&1)break a}else a=k[a>>2]|0;if((a|0)!=-1)if(h)break;else{z=32;break}else{k[c>>2]=0;z=30;break}}else z=30;while(0);if((z|0)==30?h:0)z=32;if((z|0)==32)k[f>>2]=k[f>>2]|2;h=k[b>>2]|0;dk(u)|0;a=k[y>>2]|0;k[y>>2]=0;if((a|0)!=0?(x=0,qa(k[A>>2]|0,a|0),A=x,x=0,A&1):0){A=Wa(0)|0;mc(A)}r=v;return h|0}while(0);h=Wa()|0;dk(u)|0;a=k[y>>2]|0;k[y>>2]=0;if(!a)w=h;else z=38}else{h=Wa()|0;k[y>>2]=0;z=38}if((z|0)==38){x=0;qa(k[A>>2]|0,a|0);A=x;x=0;if(A&1){A=Wa(0)|0;mc(A)}else w=h}fb(w|0);return 0}function Op(a,b,c,d,e,f,g,h,j,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0;z=r;r=r+112|0;m=z+100|0;n=z+88|0;o=z+76|0;p=z+64|0;q=z+52|0;s=z+48|0;t=z+36|0;u=z+24|0;v=z+12|0;w=z;do if(a){a=wq(b,43488)|0;Mb[k[(k[a>>2]|0)+44>>2]&127](m,a);w=k[m>>2]|0;i[c>>0]=w;i[c+1>>0]=w>>8;i[c+2>>0]=w>>16;i[c+3>>0]=w>>24;Mb[k[(k[a>>2]|0)+32>>2]&127](n,a);if(!(i[j>>0]&1))i[j>>0]=0;else k[k[j+8>>2]>>2]=0;k[j+4>>2]=0;x=0;ra(72,j|0,0);c=x;x=0;if(c&1){c=Wa(0)|0;mc(c)};k[j>>2]=k[n>>2];k[j+4>>2]=k[n+4>>2];k[j+8>>2]=k[n+8>>2];k[n>>2]=0;k[n+4>>2]=0;k[n+8>>2]=0;Kk(n);Mb[k[(k[a>>2]|0)+28>>2]&127](o,a);if(!(i[h>>0]&1))i[h>>0]=0;else k[k[h+8>>2]>>2]=0;k[h+4>>2]=0;x=0;ra(72,h|0,0);c=x;x=0;if(c&1){c=Wa(0)|0;mc(c)};k[h>>2]=k[o>>2];k[h+4>>2]=k[o+4>>2];k[h+8>>2]=k[o+8>>2];k[o>>2]=0;k[o+4>>2]=0;k[o+8>>2]=0;Kk(o);h=Ob[k[(k[a>>2]|0)+12>>2]&127](a)|0;k[d>>2]=h;h=Ob[k[(k[a>>2]|0)+16>>2]&127](a)|0;k[e>>2]=h;Mb[k[(k[a>>2]|0)+20>>2]&127](p,a);if(!(i[f>>0]&1)){i[f+1>>0]=0;i[f>>0]=0}else{i[k[f+8>>2]>>0]=0;k[f+4>>2]=0}x=0;ra(70,f|0,0);e=x;x=0;if(e&1){e=Wa(0)|0;mc(e)};k[f>>2]=k[p>>2];k[f+4>>2]=k[p+4>>2];k[f+8>>2]=k[p+8>>2];k[p>>2]=0;k[p+4>>2]=0;k[p+8>>2]=0;wk(p);Mb[k[(k[a>>2]|0)+24>>2]&127](q,a);if(!(i[g>>0]&1))i[g>>0]=0;else k[k[g+8>>2]>>2]=0;k[g+4>>2]=0;x=0;ra(72,g|0,0);e=x;x=0;if(e&1){e=Wa(0)|0;mc(e)}else{k[g>>2]=k[q>>2];k[g+4>>2]=k[q+4>>2];k[g+8>>2]=k[q+8>>2];k[q>>2]=0;k[q+4>>2]=0;k[q+8>>2]=0;Kk(q);y=Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0;break}}else{a=wq(b,43424)|0;Mb[k[(k[a>>2]|0)+44>>2]&127](s,a);s=k[s>>2]|0;i[c>>0]=s;i[c+1>>0]=s>>8;i[c+2>>0]=s>>16;i[c+3>>0]=s>>24;Mb[k[(k[a>>2]|0)+32>>2]&127](t,a);if(!(i[j>>0]&1))i[j>>0]=0;else k[k[j+8>>2]>>2]=0;k[j+4>>2]=0;x=0;ra(72,j|0,0);c=x;x=0;if(c&1){c=Wa(0)|0;mc(c)};k[j>>2]=k[t>>2];k[j+4>>2]=k[t+4>>2];k[j+8>>2]=k[t+8>>2];k[t>>2]=0;k[t+4>>2]=0;k[t+8>>2]=0;Kk(t);Mb[k[(k[a>>2]|0)+28>>2]&127](u,a);if(!(i[h>>0]&1))i[h>>0]=0;else k[k[h+8>>2]>>2]=0;k[h+4>>2]=0;x=0;ra(72,h|0,0);c=x;x=0;if(c&1){c=Wa(0)|0;mc(c)};k[h>>2]=k[u>>2];k[h+4>>2]=k[u+4>>2];k[h+8>>2]=k[u+8>>2];k[u>>2]=0;k[u+4>>2]=0;k[u+8>>2]=0;Kk(u);h=Ob[k[(k[a>>2]|0)+12>>2]&127](a)|0;k[d>>2]=h;h=Ob[k[(k[a>>2]|0)+16>>2]&127](a)|0;k[e>>2]=h;Mb[k[(k[a>>2]|0)+20>>2]&127](v,a);if(!(i[f>>0]&1)){i[f+1>>0]=0;i[f>>0]=0}else{i[k[f+8>>2]>>0]=0;k[f+4>>2]=0}x=0;ra(70,f|0,0);e=x;x=0;if(e&1){e=Wa(0)|0;mc(e)};k[f>>2]=k[v>>2];k[f+4>>2]=k[v+4>>2];k[f+8>>2]=k[v+8>>2];k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;wk(v);Mb[k[(k[a>>2]|0)+24>>2]&127](w,a);if(!(i[g>>0]&1))i[g>>0]=0;else k[k[g+8>>2]>>2]=0;k[g+4>>2]=0;x=0;ra(72,g|0,0);e=x;x=0;if(e&1){e=Wa(0)|0;mc(e)}else{k[g>>2]=k[w>>2];k[g+4>>2]=k[w+4>>2];k[g+8>>2]=k[w+8>>2];k[w>>2]=0;k[w+4>>2]=0;k[w+8>>2]=0;Kk(w);y=Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0;break}}while(0);k[l>>2]=y;r=z;return}function Pp(a){a=a|0;return}function Qp(a){a=a|0;Sg(a);return}function Rp(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;D=r;r=r+384|0;u=D+8|0;g=D;j=D+284|0;l=D+72|0;h=D+184|0;F=D+68|0;A=D+80|0;w=D+77|0;B=D+76|0;G=D+56|0;I=D+44|0;H=D+32|0;m=D+28|0;t=D+84|0;z=D+24|0;y=D+20|0;v=D+16|0;k[l>>2]=j;p[u>>3]=f;j=Oi(j,100,57474,u)|0;do if(j>>>0>99){x=0;a=Da(3)|0;C=x;x=0;if(!(C&1)?(x=0,p[g>>3]=f,q=Ea(7,l|0,a|0,57474,g|0)|0,C=x,x=0,!(C&1)):0){a=k[l>>2]|0;if(!a){x=0;Ga(6);C=x;x=0;if(C&1){a=0;g=0;C=7;break}a=k[l>>2]|0}h=tj(q)|0;g=h;if(!h){x=0;Ga(6);C=x;x=0;if(C&1)C=7;else{s=0;C=10}}else{s=h;C=10}}else{a=0;g=0;C=7}}else{g=0;a=0;s=h;q=j;C=10}while(0);if((C|0)==10){x=0;h=ta(67,d|0)|0;o=x;x=0;if(o&1)C=7;else{k[F>>2]=h;x=0;o=Aa(26,F|0,43752)|0;n=x;x=0;if(!(n&1)?(n=k[l>>2]|0,x=0,Ea(k[(k[o>>2]|0)+32>>2]|0,o|0,n|0,n+q|0,s|0)|0,n=x,x=0,!(n&1)):0){if(!q)n=0;else n=(i[k[l>>2]>>0]|0)==45;k[G>>2]=0;k[G+4>>2]=0;k[G+8>>2]=0;k[I>>2]=0;k[I+4>>2]=0;k[I+8>>2]=0;k[H>>2]=0;k[H+4>>2]=0;k[H+8>>2]=0;x=0;za(3,c|0,n|0,F|0,A|0,w|0,B|0,G|0,I|0,H|0,m|0);c=x;x=0;if(!(c&1)){m=k[m>>2]|0;if((q|0)>(m|0)){c=i[H>>0]|0;j=i[I>>0]|0;j=(q-m<<1|1)+m+((c&1)==0?(c&255)>>>1:k[H+4>>2]|0)+((j&1)==0?(j&255)>>>1:k[I+4>>2]|0)|0}else{c=i[H>>0]|0;j=i[I>>0]|0;j=m+2+((c&1)==0?(c&255)>>>1:k[H+4>>2]|0)+((j&1)==0?(j&255)>>>1:k[I+4>>2]|0)|0}if(j>>>0>100){j=tj(j)|0;l=j;if(!j){x=0;Ga(6);t=x;x=0;if(!(t&1)){j=0;C=26}}else C=26}else{l=0;j=t;C=26}if((C|0)==26){x=0;wa(1,j|0,z|0,y|0,k[d+4>>2]|0,s|0,s+q|0,o|0,n|0,A|0,i[w>>0]|0,i[B>>0]|0,G|0,I|0,H|0,m|0);B=x;x=0;if(!(B&1)?(k[v>>2]=k[b>>2],b=k[z>>2]|0,E=k[y>>2]|0,x=0,k[u>>2]=k[v>>2],E=sa(39,u|0,j|0,b|0,E|0,d|0,e|0)|0,b=x,x=0,!(b&1)):0){if(l){uj(l);h=k[F>>2]|0}wk(H);wk(I);wk(G);dk(h)|0;if(g)uj(g);if(a)uj(a);r=D;return E|0}}j=Wa()|0;if(l){uj(l);h=k[F>>2]|0}}else j=Wa()|0;wk(H);wk(I);wk(G)}else j=Wa()|0;dk(h)|0}}if((C|0)==7)j=Wa()|0;if(g)uj(g);if(a)uj(a);fb(j|0);return 0}function Sp(a,b,c,d,e,f,g,h,j,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0;D=r;r=r+112|0;o=D+108|0;p=D+96|0;t=D+92|0;u=D+80|0;v=D+68|0;w=D+56|0;y=D+52|0;z=D+40|0;A=D+36|0;B=D+24|0;q=D+12|0;s=D;do if(a){a=wq(c,43360)|0;c=k[a>>2]|0;do if(b){Mb[k[c+44>>2]&127](o,a);b=k[o>>2]|0;i[d>>0]=b;i[d+1>>0]=b>>8;i[d+2>>0]=b>>16;i[d+3>>0]=b>>24;Mb[k[(k[a>>2]|0)+32>>2]&127](p,a);if(!(i[j>>0]&1)){i[j+1>>0]=0;i[j>>0]=0}else{i[k[j+8>>2]>>0]=0;k[j+4>>2]=0}x=0;ra(70,j|0,0);d=x;x=0;if(d&1){j=Wa(0)|0;mc(j)}else{k[j>>2]=k[p>>2];k[j+4>>2]=k[p+4>>2];k[j+8>>2]=k[p+8>>2];k[p>>2]=0;k[p+4>>2]=0;k[p+8>>2]=0;wk(p);n=a;break}}else{Mb[k[c+40>>2]&127](t,a);b=k[t>>2]|0;i[d>>0]=b;i[d+1>>0]=b>>8;i[d+2>>0]=b>>16;i[d+3>>0]=b>>24;Mb[k[(k[a>>2]|0)+28>>2]&127](u,a);if(!(i[j>>0]&1)){i[j+1>>0]=0;i[j>>0]=0}else{i[k[j+8>>2]>>0]=0;k[j+4>>2]=0}x=0;ra(70,j|0,0);d=x;x=0;if(d&1){j=Wa(0)|0;mc(j)}else{k[j>>2]=k[u>>2];k[j+4>>2]=k[u+4>>2];k[j+8>>2]=k[u+8>>2];k[u>>2]=0;k[u+4>>2]=0;k[u+8>>2]=0;wk(u);n=a;break}}while(0);j=Ob[k[(k[a>>2]|0)+12>>2]&127](a)|0;i[e>>0]=j;j=Ob[k[(k[a>>2]|0)+16>>2]&127](a)|0;i[f>>0]=j;Mb[k[(k[n>>2]|0)+20>>2]&127](v,a);if(!(i[g>>0]&1)){i[g+1>>0]=0;i[g>>0]=0}else{i[k[g+8>>2]>>0]=0;k[g+4>>2]=0}x=0;ra(70,g|0,0);f=x;x=0;if(f&1){f=Wa(0)|0;mc(f)};k[g>>2]=k[v>>2];k[g+4>>2]=k[v+4>>2];k[g+8>>2]=k[v+8>>2];k[v>>2]=0;k[v+4>>2]=0;k[v+8>>2]=0;wk(v);Mb[k[(k[n>>2]|0)+24>>2]&127](w,a);if(!(i[h>>0]&1)){i[h+1>>0]=0;i[h>>0]=0}else{i[k[h+8>>2]>>0]=0;k[h+4>>2]=0}x=0;ra(70,h|0,0);f=x;x=0;if(f&1){f=Wa(0)|0;mc(f)}else{k[h>>2]=k[w>>2];k[h+4>>2]=k[w+4>>2];k[h+8>>2]=k[w+8>>2];k[w>>2]=0;k[w+4>>2]=0;k[w+8>>2]=0;wk(w);C=Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0;break}}else{a=wq(c,43296)|0;c=k[a>>2]|0;do if(b){Mb[k[c+44>>2]&127](y,a);b=k[y>>2]|0;i[d>>0]=b;i[d+1>>0]=b>>8;i[d+2>>0]=b>>16;i[d+3>>0]=b>>24;Mb[k[(k[a>>2]|0)+32>>2]&127](z,a);if(!(i[j>>0]&1)){i[j+1>>0]=0;i[j>>0]=0}else{i[k[j+8>>2]>>0]=0;k[j+4>>2]=0}x=0;ra(70,j|0,0);d=x;x=0;if(d&1){j=Wa(0)|0;mc(j)}else{k[j>>2]=k[z>>2];k[j+4>>2]=k[z+4>>2];k[j+8>>2]=k[z+8>>2];k[z>>2]=0;k[z+4>>2]=0;k[z+8>>2]=0;wk(z);m=a;break}}else{Mb[k[c+40>>2]&127](A,a);b=k[A>>2]|0;i[d>>0]=b;i[d+1>>0]=b>>8;i[d+2>>0]=b>>16;i[d+3>>0]=b>>24;Mb[k[(k[a>>2]|0)+28>>2]&127](B,a);if(!(i[j>>0]&1)){i[j+1>>0]=0;i[j>>0]=0}else{i[k[j+8>>2]>>0]=0;k[j+4>>2]=0}x=0;ra(70,j|0,0);d=x;x=0;if(d&1){j=Wa(0)|0;mc(j)}else{k[j>>2]=k[B>>2];k[j+4>>2]=k[B+4>>2];k[j+8>>2]=k[B+8>>2];k[B>>2]=0;k[B+4>>2]=0;k[B+8>>2]=0;wk(B);m=a;break}}while(0);j=Ob[k[(k[a>>2]|0)+12>>2]&127](a)|0;i[e>>0]=j;j=Ob[k[(k[a>>2]|0)+16>>2]&127](a)|0;i[f>>0]=j;Mb[k[(k[m>>2]|0)+20>>2]&127](q,a);if(!(i[g>>0]&1)){i[g+1>>0]=0;i[g>>0]=0}else{i[k[g+8>>2]>>0]=0;k[g+4>>2]=0}x=0;ra(70,g|0,0);f=x;x=0;if(f&1){f=Wa(0)|0;mc(f)};k[g>>2]=k[q>>2];k[g+4>>2]=k[q+4>>2];k[g+8>>2]=k[q+8>>2];k[q>>2]=0;k[q+4>>2]=0;k[q+8>>2]=0;wk(q);Mb[k[(k[m>>2]|0)+24>>2]&127](s,a);if(!(i[h>>0]&1)){i[h+1>>0]=0;i[h>>0]=0}else{i[k[h+8>>2]>>0]=0;k[h+4>>2]=0}x=0;ra(70,h|0,0);f=x;x=0;if(f&1){f=Wa(0)|0;mc(f)}else{k[h>>2]=k[s>>2];k[h+4>>2]=k[s+4>>2];k[h+8>>2]=k[s+8>>2];k[s>>2]=0;k[s+4>>2]=0;k[s+8>>2]=0;wk(s);C=Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0;break}}while(0);k[l>>2]=C;r=D;return}function Tp(a,b,c,d,e,f,g,h,l,m,n,o,p,q,r){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;l=l|0;m=m|0;n=n|0;o=o|0;p=p|0;q=q|0;r=r|0;var s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0;k[c>>2]=a;N=q+4|0;O=q+8|0;P=q+1|0;H=p+4|0;I=(d&512|0)==0;J=p+8|0;K=p+1|0;L=g+8|0;M=(r|0)>0;A=o+4|0;B=o+8|0;C=o+1|0;D=r+1|0;F=-2-r-((r|0)<0?~r:-1)|0;G=(r|0)>0;z=0;do{switch(i[l+z>>0]|0){case 0:{k[b>>2]=k[c>>2];break}case 1:{k[b>>2]=k[c>>2];x=Vb[k[(k[g>>2]|0)+28>>2]&63](g,32)|0;y=k[c>>2]|0;k[c>>2]=y+1;i[y>>0]=x;break}case 3:{y=i[q>>0]|0;s=(y&1)==0;if((s?(y&255)>>>1:k[N>>2]|0)|0){x=i[(s?P:k[O>>2]|0)>>0]|0;y=k[c>>2]|0;k[c>>2]=y+1;i[y>>0]=x}break}case 2:{u=i[p>>0]|0;s=(u&1)==0;u=s?(u&255)>>>1:k[H>>2]|0;if(!(I|(u|0)==0)){t=s?K:k[J>>2]|0;v=t+u|0;s=k[c>>2]|0;if(u)do{i[s>>0]=i[t>>0]|0;t=t+1|0;s=s+1|0}while((t|0)!=(v|0));k[c>>2]=s}break}case 4:{s=k[c>>2]|0;e=h?e+1|0:e;w=e;v=k[L>>2]|0;a:do if(e>>>0<f>>>0){t=e;do{u=i[t>>0]|0;if(u<<24>>24<=-1)break a;if(!(j[v+(u<<24>>24<<1)>>1]&2048))break a;t=t+1|0}while(t>>>0<f>>>0)}else t=e;while(0);u=t;if(M){x=-2-u-~(u>>>0>w>>>0?w:u)|0;x=F>>>0>x>>>0?F:x;if(t>>>0>e>>>0&G){u=t;w=r;while(1){u=u+-1|0;y=i[u>>0]|0;v=k[c>>2]|0;k[c>>2]=v+1;i[v>>0]=y;v=(w|0)>1;if(!(u>>>0>e>>>0&v))break;else w=w+-1|0}}else v=G;y=D+x|0;u=t+(x+1)|0;if(v)w=Vb[k[(k[g>>2]|0)+28>>2]&63](g,48)|0;else w=0;t=k[c>>2]|0;k[c>>2]=t+1;if((y|0)>0){v=y;while(1){i[t>>0]=w;t=k[c>>2]|0;k[c>>2]=t+1;if((v|0)>1)v=v+-1|0;else break}}i[t>>0]=m}else u=t;if((u|0)!=(e|0)){y=i[o>>0]|0;t=(y&1)==0;if(!((t?(y&255)>>>1:k[A>>2]|0)|0))t=-1;else t=i[(t?C:k[B>>2]|0)>>0]|0;if((u|0)!=(e|0)){v=0;w=0;while(1){if((w|0)==(t|0)){y=k[c>>2]|0;k[c>>2]=y+1;i[y>>0]=n;v=v+1|0;y=i[o>>0]|0;t=(y&1)==0;if(v>>>0<(t?(y&255)>>>1:k[A>>2]|0)>>>0){t=i[(t?C:k[B>>2]|0)+v>>0]|0;t=t<<24>>24==127?-1:t<<24>>24;w=0}else{t=w;w=0}}u=u+-1|0;x=i[u>>0]|0;y=k[c>>2]|0;k[c>>2]=y+1;i[y>>0]=x;if((u|0)==(e|0))break;else w=w+1|0}}}else{x=Vb[k[(k[g>>2]|0)+28>>2]&63](g,48)|0;y=k[c>>2]|0;k[c>>2]=y+1;i[y>>0]=x}t=k[c>>2]|0;if((s|0)!=(t|0)?(E=t+-1|0,s>>>0<E>>>0):0){t=E;do{y=i[s>>0]|0;i[s>>0]=i[t>>0]|0;i[t>>0]=y;s=s+1|0;t=t+-1|0}while(s>>>0<t>>>0)}break}default:{}}z=z+1|0}while((z|0)!=4);t=i[q>>0]|0;e=(t&1)==0;t=e?(t&255)>>>1:k[N>>2]|0;if(t>>>0>1){s=e?P:k[O>>2]|0;u=s+t|0;e=k[c>>2]|0;if((t|0)!=1){s=s+1|0;do{i[e>>0]=i[s>>0]|0;e=e+1|0;s=s+1|0}while((s|0)!=(u|0))}k[c>>2]=e}switch(d&176|0){case 32:{k[b>>2]=k[c>>2];break}case 16:break;default:k[b>>2]=a}return}function Up(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;z=r;r=r+176|0;p=z+56|0;B=z+52|0;w=z+64|0;t=z+61|0;y=z+60|0;C=z+40|0;E=z+28|0;D=z+16|0;l=z+12|0;o=z+68|0;v=z+8|0;u=z+4|0;q=z;a=Yk(d)|0;k[B>>2]=a;x=0;s=Aa(26,B|0,43752)|0;n=x;x=0;do if(n&1)F=13;else{m=i[f>>0]|0;g=(m&1)==0;n=f+4|0;if(!((g?(m&255)>>>1:k[n>>2]|0)|0))m=0;else{g=i[(g?f+1|0:k[f+8>>2]|0)>>0]|0;x=0;h=Aa(k[(k[s>>2]|0)+28>>2]|0,s|0,45)|0;m=x;x=0;if(m&1){F=13;break}m=g<<24>>24==h<<24>>24}k[C>>2]=0;k[C+4>>2]=0;k[C+8>>2]=0;k[E>>2]=0;k[E+4>>2]=0;k[E+8>>2]=0;k[D>>2]=0;k[D+4>>2]=0;k[D+8>>2]=0;x=0;za(3,c|0,m|0,B|0,w|0,t|0,y|0,C|0,E|0,D|0,l|0);j=x;x=0;if(!(j&1)){j=i[f>>0]|0;c=k[n>>2]|0;g=(j&1)==0?(j&255)>>>1:c;l=k[l>>2]|0;if((g|0)>(l|0)){G=i[D>>0]|0;h=i[E>>0]|0;g=(g-l<<1|1)+l+((G&1)==0?(G&255)>>>1:k[D+4>>2]|0)+((h&1)==0?(h&255)>>>1:k[E+4>>2]|0)|0}else{G=i[D>>0]|0;g=i[E>>0]|0;g=l+2+((G&1)==0?(G&255)>>>1:k[D+4>>2]|0)+((g&1)==0?(g&255)>>>1:k[E+4>>2]|0)|0}if(g>>>0>100){g=tj(g)|0;h=g;if(!g){x=0;Ga(6);G=x;x=0;if(!(G&1)){j=i[f>>0]|0;c=k[n>>2]|0;g=0;F=17}}else F=17}else{h=0;g=o;F=17}if((F|0)==17){G=(j&1)==0;f=G?f+1|0:k[f+8>>2]|0;x=0;wa(1,g|0,v|0,u|0,k[d+4>>2]|0,f|0,f+(G?(j&255)>>>1:c)|0,s|0,m|0,w|0,i[t>>0]|0,i[y>>0]|0,C|0,E|0,D|0,l|0);G=x;x=0;if(!(G&1)?(k[q>>2]=k[b>>2],G=k[v>>2]|0,A=k[u>>2]|0,x=0,k[p>>2]=k[q>>2],A=sa(39,p|0,g|0,G|0,A|0,d|0,e|0)|0,G=x,x=0,!(G&1)):0){if(h){uj(h);a=k[B>>2]|0}wk(D);wk(E);wk(C);dk(a)|0;r=z;return A|0}}g=Wa()|0;if(h){uj(h);a=k[B>>2]|0}}else g=Wa()|0;wk(D);wk(E);wk(C)}while(0);if((F|0)==13)g=Wa()|0;dk(a)|0;fb(g|0);return 0}function Vp(a){a=a|0;return}function Wp(a){a=a|0;Sg(a);return}function Xp(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;D=r;r=r+992|0;u=D+8|0;g=D;j=D+888|0;l=D+880|0;h=D+480|0;F=D+76|0;A=D+884|0;w=D+72|0;B=D+68|0;G=D+56|0;I=D+44|0;H=D+32|0;m=D+28|0;t=D+80|0;z=D+24|0;y=D+20|0;v=D+16|0;k[l>>2]=j;p[u>>3]=f;j=Oi(j,100,57474,u)|0;do if(j>>>0>99){x=0;a=Da(3)|0;C=x;x=0;if(!(C&1)?(x=0,p[g>>3]=f,q=Ea(7,l|0,a|0,57474,g|0)|0,C=x,x=0,!(C&1)):0){a=k[l>>2]|0;if(!a){x=0;Ga(6);C=x;x=0;if(C&1){a=0;g=0;C=7;break}a=k[l>>2]|0}h=tj(q<<2)|0;g=h;if(!h){x=0;Ga(6);C=x;x=0;if(C&1)C=7;else{s=0;C=10}}else{s=h;C=10}}else{a=0;g=0;C=7}}else{g=0;a=0;s=h;q=j;C=10}while(0);if((C|0)==10){x=0;h=ta(67,d|0)|0;o=x;x=0;if(o&1)C=7;else{k[F>>2]=h;x=0;o=Aa(26,F|0,43744)|0;n=x;x=0;if(!(n&1)?(n=k[l>>2]|0,x=0,Ea(k[(k[o>>2]|0)+48>>2]|0,o|0,n|0,n+q|0,s|0)|0,n=x,x=0,!(n&1)):0){if(!q)n=0;else n=(i[k[l>>2]>>0]|0)==45;k[G>>2]=0;k[G+4>>2]=0;k[G+8>>2]=0;k[I>>2]=0;k[I+4>>2]=0;k[I+8>>2]=0;k[H>>2]=0;k[H+4>>2]=0;k[H+8>>2]=0;x=0;za(4,c|0,n|0,F|0,A|0,w|0,B|0,G|0,I|0,H|0,m|0);c=x;x=0;if(!(c&1)){m=k[m>>2]|0;if((q|0)>(m|0)){c=i[H>>0]|0;j=i[I>>0]|0;j=(q-m<<1|1)+m+((c&1)==0?(c&255)>>>1:k[H+4>>2]|0)+((j&1)==0?(j&255)>>>1:k[I+4>>2]|0)|0}else{c=i[H>>0]|0;j=i[I>>0]|0;j=m+2+((c&1)==0?(c&255)>>>1:k[H+4>>2]|0)+((j&1)==0?(j&255)>>>1:k[I+4>>2]|0)|0}if(j>>>0>100){j=tj(j<<2)|0;l=j;if(!j){x=0;Ga(6);t=x;x=0;if(!(t&1)){j=0;C=26}}else C=26}else{l=0;j=t;C=26}if((C|0)==26){x=0;wa(2,j|0,z|0,y|0,k[d+4>>2]|0,s|0,s+(q<<2)|0,o|0,n|0,A|0,k[w>>2]|0,k[B>>2]|0,G|0,I|0,H|0,m|0);B=x;x=0;if(!(B&1)?(k[v>>2]=k[b>>2],b=k[z>>2]|0,E=k[y>>2]|0,x=0,k[u>>2]=k[v>>2],E=sa(40,u|0,j|0,b|0,E|0,d|0,e|0)|0,b=x,x=0,!(b&1)):0){if(l){uj(l);h=k[F>>2]|0}Kk(H);Kk(I);wk(G);dk(h)|0;if(g)uj(g);if(a)uj(a);r=D;return E|0}}j=Wa()|0;if(l){uj(l);h=k[F>>2]|0}}else j=Wa()|0;Kk(H);Kk(I);wk(G)}else j=Wa()|0;dk(h)|0}}if((C|0)==7)j=Wa()|0;if(g)uj(g);if(a)uj(a);fb(j|0);return 0}function Yp(a,b,c,d,e,f,g,h,j,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0;B=r;r=r+112|0;m=B+108|0;n=B+96|0;q=B+92|0;s=B+80|0;t=B+68|0;u=B+56|0;v=B+52|0;w=B+40|0;y=B+36|0;z=B+24|0;o=B+12|0;p=B;do if(a){a=wq(c,43488)|0;c=k[a>>2]|0;do if(b){Mb[k[c+44>>2]&127](m,a);b=k[m>>2]|0;i[d>>0]=b;i[d+1>>0]=b>>8;i[d+2>>0]=b>>16;i[d+3>>0]=b>>24;Mb[k[(k[a>>2]|0)+32>>2]&127](n,a);if(!(i[j>>0]&1))i[j>>0]=0;else k[k[j+8>>2]>>2]=0;k[j+4>>2]=0;x=0;ra(72,j|0,0);d=x;x=0;if(d&1){j=Wa(0)|0;mc(j)}else{k[j>>2]=k[n>>2];k[j+4>>2]=k[n+4>>2];k[j+8>>2]=k[n+8>>2];k[n>>2]=0;k[n+4>>2]=0;k[n+8>>2]=0;Kk(n);break}}else{Mb[k[c+40>>2]&127](q,a);b=k[q>>2]|0;i[d>>0]=b;i[d+1>>0]=b>>8;i[d+2>>0]=b>>16;i[d+3>>0]=b>>24;Mb[k[(k[a>>2]|0)+28>>2]&127](s,a);if(!(i[j>>0]&1))i[j>>0]=0;else k[k[j+8>>2]>>2]=0;k[j+4>>2]=0;x=0;ra(72,j|0,0);d=x;x=0;if(d&1){j=Wa(0)|0;mc(j)}else{k[j>>2]=k[s>>2];k[j+4>>2]=k[s+4>>2];k[j+8>>2]=k[s+8>>2];k[s>>2]=0;k[s+4>>2]=0;k[s+8>>2]=0;Kk(s);break}}while(0);j=Ob[k[(k[a>>2]|0)+12>>2]&127](a)|0;k[e>>2]=j;j=Ob[k[(k[a>>2]|0)+16>>2]&127](a)|0;k[f>>2]=j;Mb[k[(k[a>>2]|0)+20>>2]&127](t,a);if(!(i[g>>0]&1)){i[g+1>>0]=0;i[g>>0]=0}else{i[k[g+8>>2]>>0]=0;k[g+4>>2]=0}x=0;ra(70,g|0,0);f=x;x=0;if(f&1){f=Wa(0)|0;mc(f)};k[g>>2]=k[t>>2];k[g+4>>2]=k[t+4>>2];k[g+8>>2]=k[t+8>>2];k[t>>2]=0;k[t+4>>2]=0;k[t+8>>2]=0;wk(t);Mb[k[(k[a>>2]|0)+24>>2]&127](u,a);if(!(i[h>>0]&1))i[h>>0]=0;else k[k[h+8>>2]>>2]=0;k[h+4>>2]=0;x=0;ra(72,h|0,0);f=x;x=0;if(f&1){f=Wa(0)|0;mc(f)}else{k[h>>2]=k[u>>2];k[h+4>>2]=k[u+4>>2];k[h+8>>2]=k[u+8>>2];k[u>>2]=0;k[u+4>>2]=0;k[u+8>>2]=0;Kk(u);A=Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0;break}}else{a=wq(c,43424)|0;c=k[a>>2]|0;do if(b){Mb[k[c+44>>2]&127](v,a);b=k[v>>2]|0;i[d>>0]=b;i[d+1>>0]=b>>8;i[d+2>>0]=b>>16;i[d+3>>0]=b>>24;Mb[k[(k[a>>2]|0)+32>>2]&127](w,a);if(!(i[j>>0]&1))i[j>>0]=0;else k[k[j+8>>2]>>2]=0;k[j+4>>2]=0;x=0;ra(72,j|0,0);d=x;x=0;if(d&1){j=Wa(0)|0;mc(j)}else{k[j>>2]=k[w>>2];k[j+4>>2]=k[w+4>>2];k[j+8>>2]=k[w+8>>2];k[w>>2]=0;k[w+4>>2]=0;k[w+8>>2]=0;Kk(w);break}}else{Mb[k[c+40>>2]&127](y,a);b=k[y>>2]|0;i[d>>0]=b;i[d+1>>0]=b>>8;i[d+2>>0]=b>>16;i[d+3>>0]=b>>24;Mb[k[(k[a>>2]|0)+28>>2]&127](z,a);if(!(i[j>>0]&1))i[j>>0]=0;else k[k[j+8>>2]>>2]=0;k[j+4>>2]=0;x=0;ra(72,j|0,0);d=x;x=0;if(d&1){j=Wa(0)|0;mc(j)}else{k[j>>2]=k[z>>2];k[j+4>>2]=k[z+4>>2];k[j+8>>2]=k[z+8>>2];k[z>>2]=0;k[z+4>>2]=0;k[z+8>>2]=0;Kk(z);break}}while(0);j=Ob[k[(k[a>>2]|0)+12>>2]&127](a)|0;k[e>>2]=j;j=Ob[k[(k[a>>2]|0)+16>>2]&127](a)|0;k[f>>2]=j;Mb[k[(k[a>>2]|0)+20>>2]&127](o,a);if(!(i[g>>0]&1)){i[g+1>>0]=0;i[g>>0]=0}else{i[k[g+8>>2]>>0]=0;k[g+4>>2]=0}x=0;ra(70,g|0,0);f=x;x=0;if(f&1){f=Wa(0)|0;mc(f)};k[g>>2]=k[o>>2];k[g+4>>2]=k[o+4>>2];k[g+8>>2]=k[o+8>>2];k[o>>2]=0;k[o+4>>2]=0;k[o+8>>2]=0;wk(o);Mb[k[(k[a>>2]|0)+24>>2]&127](p,a);if(!(i[h>>0]&1))i[h>>0]=0;else k[k[h+8>>2]>>2]=0;k[h+4>>2]=0;x=0;ra(72,h|0,0);f=x;x=0;if(f&1){f=Wa(0)|0;mc(f)}else{k[h>>2]=k[p>>2];k[h+4>>2]=k[p+4>>2];k[h+8>>2]=k[p+8>>2];k[p>>2]=0;k[p+4>>2]=0;k[p+8>>2]=0;Kk(p);A=Ob[k[(k[a>>2]|0)+36>>2]&127](a)|0;break}}while(0);k[l>>2]=A;r=B;return}function Zp(a,b,c,d,e,f,g,h,j,l,m,n,o,p,q){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;l=l|0;m=m|0;n=n|0;o=o|0;p=p|0;q=q|0;var r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;k[c>>2]=a;J=p+4|0;K=p+8|0;C=o+4|0;D=(d&512|0)==0;E=o+8|0;F=(q|0)>0;G=n+4|0;H=n+8|0;I=n+1|0;A=(q|0)>0;z=0;do{switch(i[j+z>>0]|0){case 0:{k[b>>2]=k[c>>2];break}case 1:{k[b>>2]=k[c>>2];x=Vb[k[(k[g>>2]|0)+44>>2]&63](g,32)|0;y=k[c>>2]|0;k[c>>2]=y+4;k[y>>2]=x;break}case 3:{y=i[p>>0]|0;r=(y&1)==0;if((r?(y&255)>>>1:k[J>>2]|0)|0){x=k[(r?J:k[K>>2]|0)>>2]|0;y=k[c>>2]|0;k[c>>2]=y+4;k[y>>2]=x}break}case 2:{v=i[o>>0]|0;r=(v&1)==0;v=r?(v&255)>>>1:k[C>>2]|0;if(!(D|(v|0)==0)){r=r?C:k[E>>2]|0;t=r+(v<<2)|0;u=k[c>>2]|0;if(v){s=u;while(1){k[s>>2]=k[r>>2];r=r+4|0;if((r|0)==(t|0))break;else s=s+4|0}}k[c>>2]=u+(v<<2)}break}case 4:{r=k[c>>2]|0;e=h?e+4|0:e;a:do if(e>>>0<f>>>0){s=e;do{if(!(Qb[k[(k[g>>2]|0)+12>>2]&63](g,2048,k[s>>2]|0)|0))break a;s=s+4|0}while(s>>>0<f>>>0)}else s=e;while(0);if(F){if(s>>>0>e>>>0&A){v=k[c>>2]|0;u=q;while(1){s=s+-4|0;t=v+4|0;k[v>>2]=k[s>>2];w=u+-1|0;u=(u|0)>1;if(s>>>0>e>>>0&u){v=t;u=w}else{v=w;break}}k[c>>2]=t;t=v}else{u=A;t=q}if(u)w=Vb[k[(k[g>>2]|0)+44>>2]&63](g,48)|0;else w=0;x=k[c>>2]|0;u=t+((t|0)<0?~t:-1)|0;if((t|0)>0){v=x;while(1){k[v>>2]=w;if((t|0)>1){v=v+4|0;t=t+-1|0}else break}}k[c>>2]=x+(u+2<<2);k[x+(u+1<<2)>>2]=l}if((s|0)==(e|0)){x=Vb[k[(k[g>>2]|0)+44>>2]&63](g,48)|0;y=k[c>>2]|0;s=y+4|0;k[c>>2]=s;k[y>>2]=x}else{x=i[n>>0]|0;t=(x&1)==0;y=k[G>>2]|0;if(!((t?(x&255)>>>1:y)|0))t=-1;else t=i[(t?I:k[H>>2]|0)>>0]|0;if((s|0)!=(e|0)){w=0;x=0;while(1){u=k[c>>2]|0;if((x|0)==(t|0)){v=u+4|0;k[c>>2]=v;k[u>>2]=m;w=w+1|0;u=i[n>>0]|0;t=(u&1)==0;if(w>>>0<(t?(u&255)>>>1:y)>>>0){t=i[(t?I:k[H>>2]|0)+w>>0]|0;u=v;t=t<<24>>24==127?-1:t<<24>>24;v=0}else{u=v;t=x;v=0}}else v=x;s=s+-4|0;x=k[s>>2]|0;k[c>>2]=u+4;k[u>>2]=x;if((s|0)==(e|0))break;else x=v+1|0}}s=k[c>>2]|0}if((r|0)!=(s|0)?(B=s+-4|0,r>>>0<B>>>0):0){s=B;do{y=k[r>>2]|0;k[r>>2]=k[s>>2];k[s>>2]=y;r=r+4|0;s=s+-4|0}while(r>>>0<s>>>0)}break}default:{}}z=z+1|0}while((z|0)!=4);r=i[p>>0]|0;e=(r&1)==0;r=e?(r&255)>>>1:k[J>>2]|0;if(r>>>0>1){s=e?J:k[K>>2]|0;e=s+4|0;s=s+(r<<2)|0;t=k[c>>2]|0;u=s-e|0;if((r|0)!=1){r=t;while(1){k[r>>2]=k[e>>2];e=e+4|0;if((e|0)==(s|0))break;else r=r+4|0}}k[c>>2]=t+(u>>>2<<2)}switch(d&176|0){case 32:{k[b>>2]=k[c>>2];break}case 16:break;default:k[b>>2]=a}return}function _p(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;z=r;r=r+480|0;o=z+468|0;B=z+464|0;w=z+472|0;t=z+56|0;y=z+52|0;C=z+40|0;E=z+28|0;D=z+16|0;l=z+12|0;n=z+64|0;v=z+8|0;u=z+4|0;p=z;a=Yk(d)|0;k[B>>2]=a;x=0;q=Aa(26,B|0,43744)|0;s=x;x=0;do if(s&1)F=13;else{m=i[f>>0]|0;g=(m&1)==0;s=f+4|0;if(!((g?(m&255)>>>1:k[s>>2]|0)|0))m=0;else{g=k[(g?s:k[f+8>>2]|0)>>2]|0;x=0;h=Aa(k[(k[q>>2]|0)+44>>2]|0,q|0,45)|0;m=x;x=0;if(m&1){F=13;break}m=(g|0)==(h|0)}k[C>>2]=0;k[C+4>>2]=0;k[C+8>>2]=0;k[E>>2]=0;k[E+4>>2]=0;k[E+8>>2]=0;k[D>>2]=0;k[D+4>>2]=0;k[D+8>>2]=0;x=0;za(4,c|0,m|0,B|0,w|0,t|0,y|0,C|0,E|0,D|0,l|0);j=x;x=0;if(!(j&1)){j=i[f>>0]|0;c=k[s>>2]|0;g=(j&1)==0?(j&255)>>>1:c;l=k[l>>2]|0;if((g|0)>(l|0)){G=i[D>>0]|0;h=i[E>>0]|0;g=(g-l<<1|1)+l+((G&1)==0?(G&255)>>>1:k[D+4>>2]|0)+((h&1)==0?(h&255)>>>1:k[E+4>>2]|0)|0}else{G=i[D>>0]|0;g=i[E>>0]|0;g=l+2+((G&1)==0?(G&255)>>>1:k[D+4>>2]|0)+((g&1)==0?(g&255)>>>1:k[E+4>>2]|0)|0}if(g>>>0>100){g=tj(g<<2)|0;h=g;if(!g){x=0;Ga(6);G=x;x=0;if(!(G&1)){j=i[f>>0]|0;c=k[s>>2]|0;g=0;F=17}}else F=17}else{h=0;g=n;F=17}if((F|0)==17){G=(j&1)==0;f=G?s:k[f+8>>2]|0;x=0;wa(2,g|0,v|0,u|0,k[d+4>>2]|0,f|0,f+((G?(j&255)>>>1:c)<<2)|0,q|0,m|0,w|0,k[t>>2]|0,k[y>>2]|0,C|0,E|0,D|0,l|0);G=x;x=0;if(!(G&1)?(k[p>>2]=k[b>>2],G=k[v>>2]|0,A=k[u>>2]|0,x=0,k[o>>2]=k[p>>2],A=sa(40,o|0,g|0,G|0,A|0,d|0,e|0)|0,G=x,x=0,!(G&1)):0){if(h){uj(h);a=k[B>>2]|0}Kk(D);Kk(E);wk(C);dk(a)|0;r=z;return A|0}}g=Wa()|0;if(h){uj(h);a=k[B>>2]|0}}else g=Wa()|0;Kk(D);Kk(E);wk(C)}while(0);if((F|0)==13)g=Wa()|0;dk(a)|0;fb(g|0);return 0}function $p(a){a=a|0;return}function aq(a){a=a|0;Sg(a);return}function bq(a,b,c){a=a|0;b=b|0;c=c|0;a=$h((i[b>>0]&1)==0?b+1|0:k[b+8>>2]|0,1)|0;return a>>>((a|0)!=(-1|0)&1)|0}function cq(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0;h=r;r=r+16|0;j=h;k[j>>2]=0;k[j+4>>2]=0;k[j+8>>2]=0;g=i[f>>0]|0;l=(g&1)==0;b=l?f+1|0:k[f+8>>2]|0;g=l?(g&255)>>>1:k[f+4>>2]|0;f=b+g|0;a:do if((g|0)>0){while(1){x=0;ra(55,j|0,i[b>>0]|0);l=x;x=0;if(l&1)break;b=b+1|0;if(b>>>0>=f>>>0){g=4;break a}}b=Wa()|0;g=7}else g=4;while(0);b:do if((g|0)==4){x=0;b=Ea(9,((c|0)==-1?-1:c<<1)|0,d|0,e|0,((i[j>>0]&1)==0?j+1|0:k[j+8>>2]|0)|0)|0;l=x;x=0;if(l&1){b=Wa()|0;g=7;break}k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;l=bj(b)|0;f=b+l|0;c:do if((l|0)>0){while(1){x=0;ra(55,a|0,i[b>>0]|0);l=x;x=0;if(l&1)break;b=b+1|0;if(b>>>0>=f>>>0)break c}b=Wa()|0;wk(a);break b}while(0);wk(j);r=h;return}while(0);wk(j);fb(b|0)}function dq(a,b){a=a|0;b=b|0;return}function eq(a){a=a|0;return}function fq(a){a=a|0;Sg(a);return}function gq(a,b,c){a=a|0;b=b|0;c=c|0;a=$h((i[b>>0]&1)==0?b+1|0:k[b+8>>2]|0,1)|0;return a>>>((a|0)!=(-1|0)&1)|0}function hq(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0;v=r;r=r+224|0;n=v+184|0;m=v+192|0;l=v+180|0;o=v+176|0;t=v+168|0;s=v+40|0;q=v+32|0;u=v+28|0;w=v+16|0;j=v+8|0;p=v;k[w>>2]=0;k[w+4>>2]=0;k[w+8>>2]=0;k[j+4>>2]=0;k[j>>2]=44228;h=i[f>>0]|0;y=(h&1)==0;g=f+4|0;b=y?g:k[f+8>>2]|0;f=y?(h&255)>>>1:k[g>>2]|0;g=b+(f<<2)|0;h=m+32|0;a:do if((f|0)>0){b:while(1){k[o>>2]=b;x=0;f=Ha(k[(k[j>>2]|0)+12>>2]|0,j|0,n|0,b|0,g|0,o|0,m|0,h|0,l|0)|0;y=x;x=0;if(y&1){f=12;break}if((f|0)==2?1:(k[o>>2]|0)==(b|0)){f=5;break}if(m>>>0<(k[l>>2]|0)>>>0){b=m;do{x=0;ra(55,w|0,i[b>>0]|0);y=x;x=0;if(y&1){f=11;break b}b=b+1|0}while(b>>>0<(k[l>>2]|0)>>>0)}b=k[o>>2]|0;if(!((f|0)!=2&b>>>0<g>>>0)){f=9;break a}}if((f|0)==5){x=0;qa(166,57411);x=0;b=Wa()|0}else if((f|0)==11)b=Wa()|0;else if((f|0)==12)b=Wa()|0}else f=9;while(0);c:do if((f|0)==9){x=0;b=Ea(9,((c|0)==-1?-1:c<<1)|0,d|0,e|0,((i[w>>0]&1)==0?w+1|0:k[w+8>>2]|0)|0)|0;y=x;x=0;if(y&1){b=Wa()|0;break}k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;k[p+4>>2]=0;k[p>>2]=44276;y=bj(b)|0;g=b+y|0;h=g;j=s+128|0;d:do if((y|0)>0){e:while(1){k[u>>2]=b;x=0;f=Ha(k[(k[p>>2]|0)+16>>2]|0,p|0,t|0,b|0,((h-b|0)>32?b+32|0:g)|0,u|0,s|0,j|0,q|0)|0;y=x;x=0;if(y&1){f=24;break}if((f|0)==2?1:(k[u>>2]|0)==(b|0)){f=18;break}if(s>>>0<(k[q>>2]|0)>>>0){b=s;do{x=0;ra(71,a|0,k[b>>2]|0);y=x;x=0;if(y&1){f=23;break e}b=b+4|0}while(b>>>0<(k[q>>2]|0)>>>0)}b=k[u>>2]|0;if(!((f|0)!=2&b>>>0<g>>>0))break d}if((f|0)==18){x=0;qa(166,57411);x=0;b=Wa()|0}else if((f|0)==23)b=Wa()|0;else if((f|0)==24)b=Wa()|0;Kk(a);break c}while(0);wk(w);r=v;return}while(0);wk(w);fb(b|0)}function iq(a,b){a=a|0;b=b|0;return}function jq(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;k[a+4>>2]=b+-1;k[a>>2]=43728;f=a+8|0;x=0;ra(73,f|0,28);e=x;x=0;if(e&1)b=Wa()|0;else{e=a+144|0;x=0;Fa(13,e|0,57341,1);d=x;x=0;if(d&1)b=Wa()|0;else{c=k[f>>2]|0;d=a+12|0;b=k[d>>2]|0;if((b|0)!=(c|0)){do b=b+-4|0;while((b|0)!=(c|0));k[d>>2]=b}k[451]=0;k[450]=42656;x=0;ra(74,a|0,1800);d=x;x=0;do if(((((((((((((!(d&1)?(k[453]=0,k[452]=42696,x=0,ra(75,a|0,1808),d=x,x=0,!(d&1)):0)?(k[455]=0,k[454]=43768,k[456]=0,i[1828]=0,d=Cq()|0,k[456]=d,x=0,ra(76,a|0,1816),d=x,x=0,!(d&1)):0)?(k[459]=0,k[458]=44016,x=0,ra(77,a|0,1832),d=x,x=0,!(d&1)):0)?(k[461]=0,k[460]=44084,x=0,ra(78,a|0,1840),d=x,x=0,!(d&1)):0)?(x=0,ra(79,1848,1),d=x,x=0,!(d&1)):0)?(x=0,ra(80,a|0,1848),d=x,x=0,!(d&1)):0)?(k[467]=0,k[466]=44132,x=0,ra(81,a|0,1864),d=x,x=0,!(d&1)):0)?(k[469]=0,k[468]=44180,x=0,ra(82,a|0,1872),d=x,x=0,!(d&1)):0)?(Hr(1880,1),x=0,ra(83,a|0,1880),d=x,x=0,!(d&1)):0)?(Ir(1904,1),x=0,ra(84,a|0,1904),d=x,x=0,!(d&1)):0)?(k[485]=0,k[484]=42736,x=0,ra(85,a|0,1936),d=x,x=0,!(d&1)):0)?(k[487]=0,k[486]=42808,x=0,ra(86,a|0,1944),d=x,x=0,!(d&1)):0)?(k[489]=0,k[488]=42880,x=0,ra(87,a|0,1952),d=x,x=0,!(d&1)):0){k[491]=0;k[490]=42940;x=0;ra(88,a|0,1960);d=x;x=0;if(d&1){g=42;break}k[493]=0;k[492]=43248;x=0;ra(89,a|0,1968);d=x;x=0;if(d&1){g=42;break}k[495]=0;k[494]=43312;x=0;ra(90,a|0,1976);d=x;x=0;if(d&1){g=42;break}k[497]=0;k[496]=43376;x=0;ra(91,a|0,1984);d=x;x=0;if(d&1){g=42;break}k[499]=0;k[498]=43440;x=0;ra(92,a|0,1992);d=x;x=0;if(d&1){g=42;break}k[501]=0;k[500]=43504;x=0;ra(93,a|0,2e3);d=x;x=0;if(d&1){g=42;break}k[503]=0;k[502]=43540;x=0;ra(94,a|0,2008);d=x;x=0;if(d&1){g=42;break}k[505]=0;k[504]=43576;x=0;ra(95,a|0,2016);d=x;x=0;if(d&1){g=42;break}k[507]=0;k[506]=43612;x=0;ra(96,a|0,2024);d=x;x=0;if(d&1){g=42;break}k[509]=0;k[508]=43e3;k[510]=43048;x=0;ra(97,a|0,2032);d=x;x=0;if(d&1){g=42;break}k[513]=0;k[512]=43092;k[514]=43140;x=0;ra(98,a|0,2048);d=x;x=0;if(d&1){g=42;break}k[517]=0;k[516]=43996;x=0;b=Da(3)|0;d=x;x=0;if(d&1){b=Wa()|0;break}k[518]=b;k[516]=43184;x=0;ra(99,a|0,2064);d=x;x=0;if(d&1){g=42;break}k[521]=0;k[520]=43996;x=0;b=Da(3)|0;d=x;x=0;if(d&1){b=Wa()|0;break}k[522]=b;k[520]=43216;x=0;ra(100,a|0,2080);g=x;x=0;if(g&1){g=42;break}k[525]=0;k[524]=43648;x=0;ra(101,a|0,2096);g=x;x=0;if(g&1){g=42;break}k[527]=0;k[526]=43688;x=0;ra(102,a|0,2104);g=x;x=0;if(g&1){g=42;break}return}else g=42;while(0);if((g|0)==42)b=Wa()|0;wk(e)}rt(f)}fb(b|0)}function kq(){var a=0;do if((i[2112]|0)==0?(Qa(2112)|0)!=0:0){x=0;Da(4)|0;a=x;x=0;if(a&1){a=Wa()|0;Bb(2112);fb(a|0)}else{k[11129]=44512;Ya(2112);break}}while(0);return k[11129]|0}function lq(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;ck(b);e=a+8|0;d=k[e>>2]|0;do if((k[a+12>>2]|0)-d>>2>>>0<=c>>>0){x=0;ra(103,e|0,c+1|0);a=x;x=0;if(!(a&1)){d=k[e>>2]|0;break}d=Wa()|0;if(b)dk(b)|0;fb(d|0)}while(0);a=k[d+(c<<2)>>2]|0;if(a){dk(a)|0;d=k[e>>2]|0}k[d+(c<<2)>>2]=b;return}function mq(a){a=a|0;var b=0,c=0,d=0,e=0;k[a>>2]=43728;d=a+8|0;e=a+12|0;b=k[d>>2]|0;if((k[e>>2]|0)!=(b|0)){c=0;do{b=k[b+(c<<2)>>2]|0;if(b)dk(b)|0;c=c+1|0;b=k[d>>2]|0}while(c>>>0<(k[e>>2]|0)-b>>2>>>0)}wk(a+144|0);rt(d);return}function nq(a){a=a|0;mq(a);Sg(a);return}function oq(a,b){a=a|0;b=b|0;if(tt(a,b)|0)return k[(k[a+8>>2]|0)+(b<<2)>>2]|0;else{a=Va(4)|0;eh(a);ub(a|0,464,60)}return 0}function pq(){jq(2120,1);k[11128]=2120;return 44512}function qq(){var a=0;a=kq()|0;a=k[a>>2]|0;k[11130]=a;ck(a);return 44520}function rq(){var a=0;do if((i[2280]|0)==0?(Qa(2280)|0)!=0:0){x=0;Da(5)|0;a=x;x=0;if(a&1){a=Wa()|0;Bb(2280);fb(a|0)}else{k[11131]=44520;Ya(2280);break}}while(0);return k[11131]|0}function sq(a){a=a|0;var b=0,c=0;x=0;b=Da(6)|0;c=x;x=0;if(c&1){c=Wa(0)|0;mc(c)}else{c=k[b>>2]|0;k[a>>2]=c;ck(c);return}}function tq(a,b){a=a|0;b=b|0;b=k[b>>2]|0;k[a>>2]=b;ck(b);return}function uq(a){a=a|0;dk(k[a>>2]|0)|0;return}function vq(a){a=a|0;var b=0,c=0;c=r;r=r+16|0;b=c;if((k[a>>2]|0)!=-1){k[b>>2]=a;k[b+4>>2]=167;k[b+8>>2]=0;sk(a,b,168)}r=c;return (k[a+4>>2]|0)+-1|0}function wq(a,b){a=a|0;b=b|0;a=k[a>>2]|0;return oq(a,vq(b)|0)|0}function xq(a){a=a|0;Sg(a);return}function yq(a){a=a|0;if(a)Lb[k[(k[a>>2]|0)+4>>2]&255](a);return}function zq(a){a=a|0;var b=0;b=k[10935]|0;k[10935]=b+1;k[a+4>>2]=b+1;return}function Aq(a){a=a|0;Sg(a);return}function Bq(a,b,c){a=a|0;b=b|0;c=c|0;if(c>>>0<128){c=(Cq()|0)+(c<<1)|0;c=(j[c>>1]&b)<<16>>16!=0}else c=0;return c|0}function Cq(){var a=0,b=0;x=0;a=Da(7)|0;b=x;x=0;if(b&1){b=Wa(0)|0;mc(b)}else return k[a>>2]|0;return 0}function Dq(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;f=(c-b|0)>>>2;if((b|0)!=(c|0)){e=b;while(1){a=k[e>>2]|0;if(a>>>0<128){a=(Cq()|0)+(a<<1)|0;a=m[a>>1]|0}else a=0;j[d>>1]=a;e=e+4|0;if((e|0)==(c|0))break;else d=d+2|0}}return b+(f<<2)|0}function Eq(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a:do if((c|0)==(d|0))c=d;else while(1){a=k[c>>2]|0;if(a>>>0<128?(a=(Cq()|0)+(a<<1)|0,(j[a>>1]&b)<<16>>16!=0):0)break a;c=c+4|0;if((c|0)==(d|0)){c=d;break}}while(0);return c|0}function Fq(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a:do if((c|0)==(d|0))c=d;else while(1){a=k[c>>2]|0;if(a>>>0>=128)break a;a=(Cq()|0)+(a<<1)|0;if(!((j[a>>1]&b)<<16>>16))break a;c=c+4|0;if((c|0)==(d|0)){c=d;break}}while(0);return c|0}function Gq(a,b){a=a|0;b=b|0;if(b>>>0<128){b=(Hq()|0)+(b<<2)|0;b=k[b>>2]|0}return b|0}function Hq(){var a=0,b=0;x=0;a=Da(8)|0;b=x;x=0;if(b&1){b=Wa(0)|0;mc(b)}else return k[a>>2]|0;return 0}function Iq(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=(c-b|0)>>>2;if((b|0)!=(c|0)){d=b;do{a=k[d>>2]|0;if(a>>>0<128){a=(Hq()|0)+(a<<2)|0;a=k[a>>2]|0}k[d>>2]=a;d=d+4|0}while((d|0)!=(c|0))}return b+(e<<2)|0}function Jq(a,b){a=a|0;b=b|0;if(b>>>0<128){b=(Kq()|0)+(b<<2)|0;b=k[b>>2]|0}return b|0}function Kq(){var a=0,b=0;x=0;a=Da(9)|0;b=x;x=0;if(b&1){b=Wa(0)|0;mc(b)}else return k[a>>2]|0;return 0}function Lq(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=(c-b|0)>>>2;if((b|0)!=(c|0)){d=b;do{a=k[d>>2]|0;if(a>>>0<128){a=(Kq()|0)+(a<<2)|0;a=k[a>>2]|0}k[d>>2]=a;d=d+4|0}while((d|0)!=(c|0))}return b+(e<<2)|0}function Mq(a,b){a=a|0;b=b|0;return b<<24>>24|0}function Nq(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if((b|0)!=(c|0))while(1){k[d>>2]=i[b>>0];b=b+1|0;if((b|0)==(c|0))break;else d=d+4|0}return c|0}function Oq(a,b,c){a=a|0;b=b|0;c=c|0;return (b>>>0<128?b&255:c)|0}function Pq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=(c-b|0)>>>2;if((b|0)!=(c|0)){f=b;a=e;while(1){e=k[f>>2]|0;i[a>>0]=e>>>0<128?e&255:d;f=f+4|0;if((f|0)==(c|0))break;else a=a+1|0}}return b+(g<<2)|0}function Qq(a){a=a|0;var b=0;k[a>>2]=43768;b=k[a+8>>2]|0;if((b|0)!=0?(i[a+12>>0]|0)!=0:0)Tg(b);return}function Rq(a){a=a|0;Qq(a);Sg(a);return}function Sq(a,b){a=a|0;b=b|0;if(b<<24>>24>-1){b=(Hq()|0)+((b&255)<<2)|0;b=k[b>>2]&255}return b|0}function Tq(a,b,c){a=a|0;b=b|0;c=c|0;if((b|0)!=(c|0)){a=b;do{b=i[a>>0]|0;if(b<<24>>24>-1){b=(Hq()|0)+(b<<24>>24<<2)|0;b=k[b>>2]&255}i[a>>0]=b;a=a+1|0}while((a|0)!=(c|0))}return c|0}function Uq(a,b){a=a|0;b=b|0;if(b<<24>>24>-1){b=(Kq()|0)+(b<<24>>24<<2)|0;b=k[b>>2]&255}return b|0}function Vq(a,b,c){a=a|0;b=b|0;c=c|0;if((b|0)!=(c|0)){a=b;do{b=i[a>>0]|0;if(b<<24>>24>-1){b=(Kq()|0)+(b<<24>>24<<2)|0;b=k[b>>2]&255}i[a>>0]=b;a=a+1|0}while((a|0)!=(c|0))}return c|0}function Wq(a,b){a=a|0;b=b|0;return b|0}function Xq(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if((b|0)!=(c|0))while(1){i[d>>0]=i[b>>0]|0;b=b+1|0;if((b|0)==(c|0))break;else d=d+1|0}return c|0}function Yq(a,b,c){a=a|0;b=b|0;c=c|0;return (b<<24>>24>-1?b:c)|0}function Zq(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;if((b|0)!=(c|0))while(1){a=i[b>>0]|0;i[e>>0]=a<<24>>24>-1?a:d;b=b+1|0;if((b|0)==(c|0))break;else e=e+1|0}return c|0}function _q(a){a=a|0;Sg(a);return}function $q(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;k[e>>2]=c;k[h>>2]=f;return 3}function ar(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;k[e>>2]=c;k[h>>2]=f;return 3}function br(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;k[e>>2]=c;return 3}function cr(a){a=a|0;return 1}function dr(a){a=a|0;return 1}function er(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;a=d-c|0;return (a>>>0<e>>>0?a:e)|0}function fr(a){a=a|0;return 1}function gr(a,b){a=a|0;b=b|0;var c=0;k[a+4>>2]=b+-1;k[a>>2]=43836;x=0;b=Da(3)|0;c=x;x=0;if(c&1){c=Wa()|0;fb(c|0)}else{k[a+8>>2]=b;return}}function hr(a){a=a|0;ks(a);Sg(a);return}function ir(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0;t=r;r=r+16|0;q=t;o=t+8|0;a:do if((c|0)==(d|0))j=d;else{j=c;while(1){if(!(k[j>>2]|0))break a;j=j+4|0;if((j|0)==(d|0)){j=d;break}}}while(0);k[h>>2]=f;k[e>>2]=c;m=g;p=a+8|0;b:do if(!((f|0)==(g|0)|(c|0)==(d|0))){a=f;l=j;c:while(1){v=b;f=k[v+4>>2]|0;j=q;k[j>>2]=k[v>>2];k[j+4>>2]=f;j=ei(k[p>>2]|0)|0;x=0;f=Ba(21,a|0,e|0,l-c>>2|0,m-a|0,b|0)|0;v=x;x=0;if(v&1){u=9;break}if((j|0)!=0?(x=0,ta(74,j|0)|0,v=x,x=0,v&1):0){u=8;break}switch(f|0){case 0:{n=1;break b}case -1:{j=a;u=14;break c}default:{}}j=(k[h>>2]|0)+f|0;k[h>>2]=j;if((j|0)==(g|0)){u=27;break}if((l|0)==(d|0)){c=k[e>>2]|0;a=j;j=d}else{j=ei(k[p>>2]|0)|0;x=0;c=va(34,o|0,0,b|0)|0;v=x;x=0;if(v&1){u=35;break}if((j|0)!=0?(x=0,ta(74,j|0)|0,v=x,x=0,v&1):0){u=34;break}if((c|0)==-1){n=2;break b}if(c>>>0>(m-(k[h>>2]|0)|0)>>>0){n=1;break b}if(c){j=o;while(1){l=i[j>>0]|0;v=k[h>>2]|0;k[h>>2]=v+1;i[v>>0]=l;c=c+-1|0;if(!c)break;else j=j+1|0}}c=(k[e>>2]|0)+4|0;k[e>>2]=c;d:do if((c|0)==(d|0))j=d;else{j=c;while(1){if(!(k[j>>2]|0))break d;j=j+4|0;if((j|0)==(d|0)){j=d;break}}}while(0);a=k[h>>2]|0}if((a|0)==(g|0)|(c|0)==(d|0)){u=47;break b}else l=j}if((u|0)==8){v=Wa(0)|0;mc(v)}else if((u|0)==9){c=Wa()|0;if((j|0)!=0?(x=0,ta(74,j|0)|0,v=x,x=0,v&1):0){v=Wa(0)|0;mc(v)}fb(c|0)}else if((u|0)==14){k[h>>2]=j;e:do if((c|0)!=(k[e>>2]|0)){while(1){v=k[c>>2]|0;a=ei(k[p>>2]|0)|0;x=0;j=va(34,j|0,v|0,q|0)|0;v=x;x=0;if(v&1){s=a;break}if((a|0)!=0?(x=0,ta(74,a|0)|0,v=x,x=0,v&1):0){u=18;break}if((j|0)==-1)break e;j=(k[h>>2]|0)+j|0;k[h>>2]=j;c=c+4|0;if((c|0)==(k[e>>2]|0))break e}if((u|0)==18){v=Wa(0)|0;mc(v)}c=Wa()|0;if((s|0)!=0?(x=0,ta(74,s|0)|0,v=x,x=0,v&1):0){v=Wa(0)|0;mc(v)}fb(c|0)}while(0);k[e>>2]=c;n=2;break}else if((u|0)==27){c=k[e>>2]|0;u=47;break}else if((u|0)==34){v=Wa(0)|0;mc(v)}else if((u|0)==35){c=Wa()|0;if((j|0)!=0?(x=0,ta(74,j|0)|0,v=x,x=0,v&1):0){v=Wa(0)|0;mc(v)}fb(c|0)}}else u=47;while(0);if((u|0)==47)n=(c|0)!=(d|0)&1;r=t;return n|0}function jr(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0;t=r;r=r+16|0;s=t;a:do if((c|0)==(d|0))j=d;else{j=c;while(1){if(!(i[j>>0]|0))break a;j=j+1|0;if((j|0)==(d|0)){j=d;break}}}while(0);k[h>>2]=f;k[e>>2]=c;n=g;p=a+8|0;b:do if(!((f|0)==(g|0)|(c|0)==(d|0))){a=f;m=j;c:while(1){l=b;j=k[l+4>>2]|0;f=s;k[f>>2]=k[l>>2];k[f+4>>2]=j;f=m;j=ei(k[p>>2]|0)|0;x=0;l=Ba(22,a|0,e|0,f-c|0,n-a>>2|0,b|0)|0;v=x;x=0;if(v&1){u=9;break}if((j|0)!=0?(x=0,ta(74,j|0)|0,v=x,x=0,v&1):0){u=8;break}switch(l|0){case 0:{o=2;break b}case -1:{j=a;u=14;break c}default:{}}a=(k[h>>2]|0)+(l<<2)|0;k[h>>2]=a;if((a|0)==(g|0)){u=31;break}c=k[e>>2]|0;if((m|0)==(d|0))j=d;else{j=ei(k[p>>2]|0)|0;x=0;c=Ea(10,a|0,c|0,1,b|0)|0;v=x;x=0;if(v&1){u=38;break}if((j|0)!=0?(x=0,ta(74,j|0)|0,v=x,x=0,v&1):0){u=37;break}if(c){o=2;break b}k[h>>2]=(k[h>>2]|0)+4;c=(k[e>>2]|0)+1|0;k[e>>2]=c;d:do if((c|0)==(d|0))j=d;else{j=c;while(1){if(!(i[j>>0]|0))break d;j=j+1|0;if((j|0)==(d|0)){j=d;break}}}while(0);a=k[h>>2]|0}if((a|0)==(g|0)|(c|0)==(d|0)){u=47;break b}else m=j}if((u|0)==8){v=Wa(0)|0;mc(v)}else if((u|0)==9){c=Wa()|0;if((j|0)!=0?(x=0,ta(74,j|0)|0,v=x,x=0,v&1):0){v=Wa(0)|0;mc(v)}fb(c|0)}else if((u|0)==14){k[h>>2]=j;e:do if((c|0)!=(k[e>>2]|0)){a=j;f:while(1){j=ei(k[p>>2]|0)|0;x=0;a=Ea(10,a|0,c|0,f-c|0,s|0)|0;v=x;x=0;if(v&1){u=19;break}if((j|0)!=0?(x=0,ta(74,j|0)|0,v=x,x=0,v&1):0){u=18;break}switch(a|0){case -1:{u=25;break f}case -2:{u=26;break f}case 0:{c=c+1|0;break}default:c=c+a|0}a=(k[h>>2]|0)+4|0;k[h>>2]=a;if((c|0)==(k[e>>2]|0)){q=c;break e}}if((u|0)==18){v=Wa(0)|0;mc(v)}else if((u|0)==19){c=Wa()|0;if((j|0)!=0?(x=0,ta(74,j|0)|0,v=x,x=0,v&1):0){v=Wa(0)|0;mc(v)}fb(c|0)}else if((u|0)==25){k[e>>2]=c;o=2;break b}else if((u|0)==26){k[e>>2]=c;o=1;break b}}else q=c;while(0);k[e>>2]=q;o=(q|0)!=(d|0)&1;break}else if((u|0)==31){c=k[e>>2]|0;u=47;break}else if((u|0)==37){v=Wa(0)|0;mc(v)}else if((u|0)==38){c=Wa()|0;if((j|0)!=0?(x=0,ta(74,j|0)|0,v=x,x=0,v&1):0){v=Wa(0)|0;mc(v)}fb(c|0)}}else u=47;while(0);if((u|0)==47)o=(c|0)!=(d|0)&1;r=t;return o|0}function kr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=r;r=r+16|0;f=g;k[e>>2]=c;c=ei(k[a+8>>2]|0)|0;x=0;a=va(34,f|0,0,b|0)|0;b=x;x=0;if(b&1){f=Wa()|0;if((c|0)!=0?(x=0,ta(74,c|0)|0,g=x,x=0,g&1):0){g=Wa(0)|0;mc(g)}fb(f|0)}if((c|0)!=0?(x=0,ta(74,c|0)|0,b=x,x=0,b&1):0){b=Wa(0)|0;mc(b)}switch(a|0){case 0:case -1:{f=2;break}default:{a=a+-1|0;if(a>>>0<=(d-(k[e>>2]|0)|0)>>>0)if(!a)f=0;else while(1){b=i[f>>0]|0;d=k[e>>2]|0;k[e>>2]=d+1;i[d>>0]=b;a=a+-1|0;if(!a){f=0;break}else f=f+1|0}else f=1}}r=g;return f|0}function lr(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;b=a+8|0;x=0;c=ta(74,k[b>>2]|0)|0;d=x;x=0;do if(d&1)e=16;else{x=0;d=va(35,0,0,4)|0;a=x;x=0;if(a&1){a=Wa(0)|0;if(!c)break;x=0;ta(74,c|0)|0;g=x;x=0;if(!(g&1))break;g=Wa(0)|0;mc(g)}if((c|0)!=0?(x=0,ta(74,c|0)|0,g=x,x=0,g&1):0){g=Wa(0)|0;mc(g)}if(!d){a=k[b>>2]|0;if(a){x=0;a=ta(74,a|0)|0;g=x;x=0;if(g&1){e=16;break}if((a|0)!=0?(x=0,ta(74,a|0)|0,g=x,x=0,g&1):0){g=Wa(0)|0;mc(g)}else f=0}else f=1}else f=-1;return f|0}while(0);if((e|0)==16)a=Wa(0)|0;mc(a);return 0}function mr(a){a=a|0;return 0}function nr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0;j=d;i=a+8|0;a:do if((c|0)==(d|0)|(e|0)==0)a=0;else{a=0;h=0;while(1){g=ei(k[i>>2]|0)|0;x=0;f=va(36,c|0,j-c|0,b|0)|0;n=x;x=0;if(n&1){m=g;break}if((g|0)!=0?(x=0,ta(74,g|0)|0,n=x,x=0,n&1):0){l=5;break}switch(f|0){case -2:case -1:break a;case 0:{c=c+1|0;f=1;break}default:c=c+f|0}a=f+a|0;h=h+1|0;if((c|0)==(d|0)|h>>>0>=e>>>0)break a}if((l|0)==5){n=Wa(0)|0;mc(n)}a=Wa()|0;if((m|0)!=0?(x=0,ta(74,m|0)|0,n=x,x=0,n&1):0){n=Wa(0)|0;mc(n)}fb(a|0)}while(0);return a|0}function or(a){a=a|0;var b=0,c=0;a=k[a+8>>2]|0;if(a){x=0;a=ta(74,a|0)|0;c=x;x=0;if(c&1){c=Wa(0)|0;mc(c)}if((a|0)!=0?(x=0,ta(74,a|0)|0,c=x,x=0,c&1):0){c=Wa(0)|0;mc(c)}else b=4}else b=1;return b|0}function pr(a){a=a|0;Sg(a);return}function qr(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0;a=r;r=r+16|0;i=a+4|0;b=a;k[i>>2]=c;k[b>>2]=f;g=vt(c,d,i,f,g,b,1114111,0)|0;k[e>>2]=k[i>>2];k[h>>2]=k[b>>2];r=a;return g|0}function rr(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0;a=r;r=r+16|0;i=a+4|0;b=a;k[i>>2]=c;k[b>>2]=f;g=wt(c,d,i,f,g,b,1114111,0)|0;k[e>>2]=k[i>>2];k[h>>2]=k[b>>2];r=a;return g|0}function sr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;k[e>>2]=c;return 3}function tr(a){a=a|0;return 0}function ur(a){a=a|0;return 0}function vr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return xt(c,d,e,1114111,0)|0}function wr(a){a=a|0;return 4}function xr(a){a=a|0;Sg(a);return}function yr(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0;a=r;r=r+16|0;i=a+4|0;b=a;k[i>>2]=c;k[b>>2]=f;g=yt(c,d,i,f,g,b,1114111,0)|0;k[e>>2]=k[i>>2];k[h>>2]=k[b>>2];r=a;return g|0}function zr(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0;a=r;r=r+16|0;i=a+4|0;b=a;k[i>>2]=c;k[b>>2]=f;g=zt(c,d,i,f,g,b,1114111,0)|0;k[e>>2]=k[i>>2];k[h>>2]=k[b>>2];r=a;return g|0}function Ar(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;k[e>>2]=c;return 3}function Br(a){a=a|0;return 0}function Cr(a){a=a|0;return 0}function Dr(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return At(c,d,e,1114111,0)|0}function Er(a){a=a|0;return 4}function Fr(a){a=a|0;Sg(a);return}function Gr(a){a=a|0;Sg(a);return}function Hr(a,b){a=a|0;b=b|0;k[a+4>>2]=b+-1;k[a>>2]=43916;i[a+8>>0]=46;i[a+9>>0]=44;a=a+12|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;return}function Ir(a,b){a=a|0;b=b|0;k[a+4>>2]=b+-1;k[a>>2]=43956;k[a+8>>2]=46;k[a+12>>2]=44;a=a+16|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;return}function Jr(a){a=a|0;k[a>>2]=43916;wk(a+12|0);return}function Kr(a){a=a|0;Jr(a);Sg(a);return}function Lr(a){a=a|0;k[a>>2]=43956;wk(a+16|0);return}function Mr(a){a=a|0;Lr(a);Sg(a);return}function Nr(a){a=a|0;return i[a+8>>0]|0}function Or(a){a=a|0;return k[a+8>>2]|0}function Pr(a){a=a|0;return i[a+9>>0]|0}function Qr(a){a=a|0;return k[a+12>>2]|0}function Rr(a,b){a=a|0;b=b|0;tk(a,b+12|0);return}function Sr(a,b){a=a|0;b=b|0;tk(a,b+16|0);return}function Tr(a,b){a=a|0;b=b|0;uk(a,57480,4);return}function Ur(a,b){a=a|0;b=b|0;Ik(a,44528,dj(44528)|0);return}function Vr(a,b){a=a|0;b=b|0;uk(a,57485,5);return}function Wr(a,b){a=a|0;b=b|0;Ik(a,44548,dj(44548)|0);return}function Xr(a){a=a|0;switch(k[a+4>>2]&74|0){case 64:{a=8;break}case 8:{a=16;break}case 0:{a=0;break}default:a=10}return a|0}function Yr(a){a=a|0;do if((i[2288]|0)==0?(Qa(2288)|0)!=0:0){if((i[2296]|0)==0?(Qa(2296)|0)!=0:0){a=44572;do{k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;a=a+12|0}while((a|0)!=44740);tb(169,0,w|0)|0;Ya(2296)}x=0;Aa(31,44572,57491)|0;a=x;x=0;if(((((((((((((!(a&1)?(x=0,Aa(31,44584,57498)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,44596,57505)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,44608,57513)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,44620,57523)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,44632,57532)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,44644,57539)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,44656,57548)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,44668,57552)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,44680,57556)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,44692,57560)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,44704,57564)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,44716,57568)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,44728,57572)|0,a=x,x=0,!(a&1)):0){k[11185]=44572;Ya(2288);break}a=Wa()|0;Bb(2288);fb(a|0)}while(0);return k[11185]|0}function Zr(a){a=a|0;do if((i[2304]|0)==0?(Qa(2304)|0)!=0:0){if((i[2312]|0)==0?(Qa(2312)|0)!=0:0){a=44744;do{k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;a=a+12|0}while((a|0)!=44912);tb(170,0,w|0)|0;Ya(2312)}x=0;Aa(32,44744,44912)|0;a=x;x=0;if(((((((((((((!(a&1)?(x=0,Aa(32,44756,44940)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,44768,44968)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,44780,45e3)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,44792,45040)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,44804,45076)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,44816,45104)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,44828,45140)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,44840,45156)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,44852,45172)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,44864,45188)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,44876,45204)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,44888,45220)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,44900,45236)|0,a=x,x=0,!(a&1)):0){k[11313]=44744;Ya(2304);break}a=Wa()|0;Bb(2304);fb(a|0)}while(0);return k[11313]|0}function _r(a){a=a|0;a:do if((i[2320]|0)==0?(Qa(2320)|0)!=0:0){if((i[2328]|0)==0?(Qa(2328)|0)!=0:0){a=45256;do{k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;a=a+12|0}while((a|0)!=45544);tb(171,0,w|0)|0;Ya(2328)}x=0;Aa(31,45256,57576)|0;a=x;x=0;do if((((((((((((((!(a&1)?(x=0,Aa(31,45268,57584)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,45280,57593)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,45292,57599)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,45304,57605)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,45316,57609)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,45328,57614)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,45340,57619)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,45352,57626)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,45364,57636)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,45376,57644)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,45388,57653)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,45400,57662)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,45412,57666)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(31,45424,57670)|0,a=x,x=0,!(a&1)):0){x=0;Aa(31,45436,57674)|0;a=x;x=0;if(a&1)break;x=0;Aa(31,45448,57605)|0;a=x;x=0;if(a&1)break;x=0;Aa(31,45460,57678)|0;a=x;x=0;if(a&1)break;x=0;Aa(31,45472,57682)|0;a=x;x=0;if(a&1)break;x=0;Aa(31,45484,57686)|0;a=x;x=0;if(a&1)break;x=0;Aa(31,45496,57690)|0;a=x;x=0;if(a&1)break;x=0;Aa(31,45508,57694)|0;a=x;x=0;if(a&1)break;x=0;Aa(31,45520,57698)|0;a=x;x=0;if(a&1)break;x=0;Aa(31,45532,57702)|0;a=x;x=0;if(a&1)break;k[11386]=45256;Ya(2320);break a}while(0);a=Wa()|0;Bb(2320);fb(a|0)}while(0);return k[11386]|0}function $r(a){a=a|0;a:do if((i[2336]|0)==0?(Qa(2336)|0)!=0:0){if((i[2344]|0)==0?(Qa(2344)|0)!=0:0){a=45548;do{k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;a=a+12|0}while((a|0)!=45836);tb(172,0,w|0)|0;Ya(2344)}x=0;Aa(32,45548,45836)|0;a=x;x=0;do if((((((((((((((!(a&1)?(x=0,Aa(32,45560,45868)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,45572,45904)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,45584,45928)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,45596,45952)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,45608,45968)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,45620,45988)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,45632,46008)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,45644,46036)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,45656,46076)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,45668,46108)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,45680,46144)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,45692,46180)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,45704,46196)|0,a=x,x=0,!(a&1)):0)?(x=0,Aa(32,45716,46212)|0,a=x,x=0,!(a&1)):0){x=0;Aa(32,45728,46228)|0;a=x;x=0;if(a&1)break;x=0;Aa(32,45740,45952)|0;a=x;x=0;if(a&1)break;x=0;Aa(32,45752,46244)|0;a=x;x=0;if(a&1)break;x=0;Aa(32,45764,46260)|0;a=x;x=0;if(a&1)break;x=0;Aa(32,45776,46276)|0;a=x;x=0;if(a&1)break;x=0;Aa(32,45788,46292)|0;a=x;x=0;if(a&1)break;x=0;Aa(32,45800,46308)|0;a=x;x=0;if(a&1)break;x=0;Aa(32,45812,46324)|0;a=x;x=0;if(a&1)break;x=0;Aa(32,45824,46340)|0;a=x;x=0;if(a&1)break;k[11589]=45548;Ya(2336);break a}while(0);a=Wa()|0;Bb(2336);fb(a|0)}while(0);return k[11589]|0}function as(a){a=a|0;do if((i[2352]|0)==0?(Qa(2352)|0)!=0:0){if((i[2360]|0)==0?(Qa(2360)|0)!=0:0){a=46360;do{k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;a=a+12|0}while((a|0)!=46648);tb(173,0,w|0)|0;Ya(2360)}x=0;Aa(31,46360,57706)|0;a=x;x=0;if(!(a&1)?(x=0,Aa(31,46372,57709)|0,a=x,x=0,!(a&1)):0){k[11662]=46360;Ya(2352);break}a=Wa()|0;Bb(2352);fb(a|0)}while(0);return k[11662]|0}function bs(a){a=a|0;do if((i[2368]|0)==0?(Qa(2368)|0)!=0:0){if((i[2376]|0)==0?(Qa(2376)|0)!=0:0){a=46652;do{k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;a=a+12|0}while((a|0)!=46940);tb(174,0,w|0)|0;Ya(2376)}x=0;Aa(32,46652,46940)|0;a=x;x=0;if(!(a&1)?(x=0,Aa(32,46664,46952)|0,a=x,x=0,!(a&1)):0){k[11741]=46652;Ya(2368);break}a=Wa()|0;Bb(2368);fb(a|0)}while(0);return k[11741]|0}function cs(a){a=a|0;do if((i[2384]|0)==0?(Qa(2384)|0)!=0:0){x=0;Fa(13,46968,57712,8);a=x;x=0;if(a&1){a=Wa()|0;Bb(2384);fb(a|0)}else{tb(175,46968,w|0)|0;Ya(2384);break}}while(0);return 46968}function ds(a){a=a|0;var b=0;do if((i[2392]|0)==0?(Qa(2392)|0)!=0:0){x=0;a=ta(75,46980)|0;b=x;x=0;if(!(b&1)?(x=0,Fa(14,47016,46980,a|0),b=x,x=0,!(b&1)):0){tb(176,47016,w|0)|0;Ya(2392);break}b=Wa()|0;Bb(2392);fb(b|0)}while(0);return 47016}function es(a){a=a|0;do if((i[2400]|0)==0?(Qa(2400)|0)!=0:0){x=0;Fa(13,47028,57721,8);a=x;x=0;if(a&1){a=Wa()|0;Bb(2400);fb(a|0)}else{tb(175,47028,w|0)|0;Ya(2400);break}}while(0);return 47028}function fs(a){a=a|0;var b=0;do if((i[2408]|0)==0?(Qa(2408)|0)!=0:0){x=0;a=ta(75,47040)|0;b=x;x=0;if(!(b&1)?(x=0,Fa(14,47076,47040,a|0),b=x,x=0,!(b&1)):0){tb(176,47076,w|0)|0;Ya(2408);break}b=Wa()|0;Bb(2408);fb(b|0)}while(0);return 47076}function gs(a){a=a|0;do if((i[2416]|0)==0?(Qa(2416)|0)!=0:0){x=0;Fa(13,47088,57730,20);a=x;x=0;if(a&1){a=Wa()|0;Bb(2416);fb(a|0)}else{tb(175,47088,w|0)|0;Ya(2416);break}}while(0);return 47088}function hs(a){a=a|0;var b=0;do if((i[2424]|0)==0?(Qa(2424)|0)!=0:0){x=0;a=ta(75,47100)|0;b=x;x=0;if(!(b&1)?(x=0,Fa(14,47184,47100,a|0),b=x,x=0,!(b&1)):0){tb(176,47184,w|0)|0;Ya(2424);break}b=Wa()|0;Bb(2424);fb(b|0)}while(0);return 47184}function is(a){a=a|0;do if((i[2432]|0)==0?(Qa(2432)|0)!=0:0){x=0;Fa(13,47196,57751,11);a=x;x=0;if(a&1){a=Wa()|0;Bb(2432);fb(a|0)}else{tb(175,47196,w|0)|0;Ya(2432);break}}while(0);return 47196}function js(a){a=a|0;var b=0;do if((i[2440]|0)==0?(Qa(2440)|0)!=0:0){x=0;a=ta(75,47208)|0;b=x;x=0;if(!(b&1)?(x=0,Fa(14,47256,47208,a|0),b=x,x=0,!(b&1)):0){tb(176,47256,w|0)|0;Ya(2440);break}b=Wa()|0;Bb(2440);fb(b|0)}while(0);return 47256}function ks(a){a=a|0;var b=0,c=0,d=0;k[a>>2]=43836;a=a+8|0;b=k[a>>2]|0;x=0;c=Da(3)|0;d=x;x=0;do if(!(d&1)){if((b|0)!=(c|0)?(x=0,qa(164,k[a>>2]|0),d=x,x=0,d&1):0)break;return}while(0);d=Wa(0)|0;mc(d)}function ls(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0;z=r;r=r+112|0;j=z;n=(d-c|0)/12|0;do if(n>>>0>100){j=tj(n)|0;if((j|0)==0?(x=0,Ga(6),y=x,x=0,y&1):0){h=0;q=6;break}h=j;q=11}else{h=0;q=11}while(0);a:do if((q|0)==11){if((c|0)==(d|0))m=0;else{q=c;o=0;p=j;while(1){m=i[q>>0]|0;if(!(m&1))m=(m&255)>>>1;else m=k[q+4>>2]|0;if(!m){i[p>>0]=2;m=o+1|0;n=n+-1|0}else{i[p>>0]=1;m=o}q=q+12|0;if((q|0)==(d|0))break;else{o=m;p=p+1|0}}}w=(c|0)==(d|0);y=(c|0)==(d|0);v=0;s=m;b:while(1){m=k[a>>2]|0;do if(m){if((k[m+12>>2]|0)==(k[m+16>>2]|0)){x=0;m=ta(k[(k[m>>2]|0)+36>>2]|0,m|0)|0;u=x;x=0;if(u&1){q=5;break b}if((m|0)==-1){k[a>>2]=0;m=0;break}else{m=k[a>>2]|0;break}}}else m=0;while(0);q=(m|0)==0;o=k[b>>2]|0;if(o){if((k[o+12>>2]|0)==(k[o+16>>2]|0)){x=0;m=ta(k[(k[o>>2]|0)+36>>2]|0,o|0)|0;u=x;x=0;if(u&1){q=5;break}if((m|0)==-1){k[b>>2]=0;o=0}}}else o=0;p=(o|0)==0;m=k[a>>2]|0;if(!((n|0)!=0&(q^p))){q=64;break}o=k[m+12>>2]|0;if((o|0)==(k[m+16>>2]|0)){x=0;m=ta(k[(k[m>>2]|0)+36>>2]|0,m|0)|0;u=x;x=0;if(u&1){q=5;break}}else m=l[o>>0]|0;m=m&255;if(!g){x=0;m=Aa(k[(k[e>>2]|0)+12>>2]|0,e|0,m|0)|0;u=x;x=0;if(u&1){q=5;break}}u=v+1|0;if(w){m=0;q=s}else{p=0;t=c;q=s;s=j;while(1){do if((i[s>>0]|0)==1){if(!(i[t>>0]&1))o=t+1|0;else o=k[t+8>>2]|0;o=i[o+v>>0]|0;if(!g){x=0;o=Aa(k[(k[e>>2]|0)+12>>2]|0,e|0,o|0)|0;A=x;x=0;if(A&1){q=4;break b}}if(m<<24>>24!=o<<24>>24){i[s>>0]=0;o=p;n=n+-1|0;break}o=i[t>>0]|0;if(!(o&1))o=(o&255)>>>1;else o=k[t+4>>2]|0;if((o|0)==(u|0)){i[s>>0]=2;o=1;q=q+1|0;n=n+-1|0}else o=1}else o=p;while(0);t=t+12|0;if((t|0)==(d|0)){m=o;break}else{p=o;s=s+1|0}}}if(!m){v=u;s=q;continue}m=k[a>>2]|0;o=m+12|0;p=k[o>>2]|0;if((p|0)==(k[m+16>>2]|0)){x=0;ta(k[(k[m>>2]|0)+40>>2]|0,m|0)|0;A=x;x=0;if(A&1){q=5;break}}else k[o>>2]=p+1;if((q+n|0)>>>0<2|y){v=u;s=q;continue}else{m=c;p=q;q=j}while(1){if((i[q>>0]|0)==2){o=i[m>>0]|0;if(!(o&1))o=(o&255)>>>1;else o=k[m+4>>2]|0;if((o|0)!=(u|0)){i[q>>0]=0;p=p+-1|0}}m=m+12|0;if((m|0)==(d|0)){v=u;s=p;continue b}else q=q+1|0}}if((q|0)==4){c=Wa()|0;break}else if((q|0)==5){c=Wa()|0;break}else if((q|0)==64){do if(m){if((k[m+12>>2]|0)==(k[m+16>>2]|0)){x=0;m=ta(k[(k[m>>2]|0)+36>>2]|0,m|0)|0;A=x;x=0;if(A&1){q=6;break a}if((m|0)==-1){k[a>>2]=0;m=0;break}else{m=k[a>>2]|0;break}}}else m=0;while(0);n=(m|0)==0;do if(!p){if((k[o+12>>2]|0)==(k[o+16>>2]|0)){x=0;m=ta(k[(k[o>>2]|0)+36>>2]|0,o|0)|0;A=x;x=0;if(A&1){q=6;break a}if((m|0)==-1){k[b>>2]=0;q=76;break}}if(!n)q=77}else q=76;while(0);if((q|0)==76?n:0)q=77;if((q|0)==77)k[f>>2]=k[f>>2]|2;c:do if((c|0)==(d|0))q=81;else while(1){if((i[j>>0]|0)==2)break c;c=c+12|0;if((c|0)==(d|0)){q=81;break}else j=j+1|0}while(0);if((q|0)==81){k[f>>2]=k[f>>2]|4;c=d}if(h)uj(h);r=z;return c|0}}while(0);if((q|0)==6)c=Wa()|0;if(h)uj(h);fb(c|0);return 0}function ms(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;A=r;r=r+240|0;s=A+202|0;g=A+200|0;C=A+24|0;B=A+12|0;u=A+8|0;y=A+40|0;z=A+4|0;v=A;t=Xr(d)|0;Ym(C,d,s,g);k[B>>2]=0;k[B+4>>2]=0;k[B+8>>2]=0;if(!(i[B>>0]&1))a=10;else a=(k[B>>2]&-2)+-1|0;x=0;Fa(6,B|0,a|0,0);q=x;x=0;a:do if(!(q&1)){o=B+8|0;p=B+1|0;d=(i[B>>0]&1)==0?p:k[o>>2]|0;k[u>>2]=d;k[z>>2]=y;k[v>>2]=0;q=B+4|0;n=i[g>>0]|0;a=k[b>>2]|0;b:while(1){if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;g=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;m=x;x=0;if(m&1){D=24;break}if((g|0)==-1){k[b>>2]=0;a=0}}}else a=0;h=(a|0)==0;g=k[c>>2]|0;do if(g){if((k[g+12>>2]|0)!=(k[g+16>>2]|0))if(h)break;else break b;x=0;j=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;m=x;x=0;if(m&1){D=24;break b}if((j|0)!=-1)if(h)break;else break b;else{k[c>>2]=0;D=16;break}}else D=16;while(0);if((D|0)==16){D=0;if(h){g=0;break}else g=0}h=i[B>>0]|0;h=(h&1)==0?(h&255)>>>1:k[q>>2]|0;if((k[u>>2]|0)==(d+h|0)){x=0;Fa(6,B|0,h<<1|0,0);m=x;x=0;if(m&1){D=24;break}if(!(i[B>>0]&1))d=10;else d=(k[B>>2]&-2)+-1|0;x=0;Fa(6,B|0,d|0,0);m=x;x=0;if(m&1){D=24;break}d=(i[B>>0]&1)==0?p:k[o>>2]|0;k[u>>2]=d+h}j=a+12|0;h=k[j>>2]|0;m=a+16|0;if((h|0)==(k[m>>2]|0)){x=0;h=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;E=x;x=0;if(E&1){D=24;break}}else h=l[h>>0]|0;if(Im(h&255,t,d,u,v,n,C,y,z,s)|0)break;g=k[j>>2]|0;if((g|0)==(k[m>>2]|0)){x=0;ta(k[(k[a>>2]|0)+40>>2]|0,a|0)|0;E=x;x=0;if(E&1){D=24;break}else continue}else{k[j>>2]=g+1;continue}}if((D|0)==24){a=Wa()|0;break}E=i[C>>0]|0;if((((E&1)==0?(E&255)>>>1:k[C+4>>2]|0)|0)!=0?(w=k[z>>2]|0,(w-y|0)<160):0){E=k[v>>2]|0;k[z>>2]=w+4;k[w>>2]=E}x=0;d=Ea(11,d|0,k[u>>2]|0,e|0,t|0)|0;E=x;x=0;if(!(E&1)){k[f>>2]=d;Ip(C,y,k[z>>2]|0,e);if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;d=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;E=x;x=0;if(E&1){D=25;break}if((d|0)==-1){k[b>>2]=0;a=0}}}else a=0;d=(a|0)==0;do if(g){if((k[g+12>>2]|0)==(k[g+16>>2]|0)){x=0;a=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;E=x;x=0;if(E&1){D=25;break a}if((a|0)==-1){k[c>>2]=0;D=49;break}}if(!d)D=50}else D=49;while(0);if((D|0)==49?d:0)D=50;if((D|0)==50)k[e>>2]=k[e>>2]|2;E=k[b>>2]|0;wk(B);wk(C);r=A;return E|0}else D=25}else D=25;while(0);if((D|0)==25)a=Wa()|0;wk(B);wk(C);fb(a|0);return 0}function ns(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;A=r;r=r+240|0;s=A+202|0;g=A+200|0;C=A+24|0;B=A+12|0;u=A+8|0;y=A+40|0;z=A+4|0;v=A;t=Xr(d)|0;Ym(C,d,s,g);k[B>>2]=0;k[B+4>>2]=0;k[B+8>>2]=0;if(!(i[B>>0]&1))a=10;else a=(k[B>>2]&-2)+-1|0;x=0;Fa(6,B|0,a|0,0);q=x;x=0;a:do if(!(q&1)){o=B+8|0;p=B+1|0;d=(i[B>>0]&1)==0?p:k[o>>2]|0;k[u>>2]=d;k[z>>2]=y;k[v>>2]=0;q=B+4|0;n=i[g>>0]|0;a=k[b>>2]|0;b:while(1){if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;g=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;m=x;x=0;if(m&1){D=24;break}if((g|0)==-1){k[b>>2]=0;a=0}}}else a=0;g=(a|0)==0;h=k[c>>2]|0;do if(h){if((k[h+12>>2]|0)!=(k[h+16>>2]|0))if(g)break;else break b;x=0;j=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;m=x;x=0;if(m&1){D=24;break b}if((j|0)!=-1)if(g)break;else break b;else{k[c>>2]=0;D=16;break}}else D=16;while(0);if((D|0)==16){D=0;if(g){h=0;break}else h=0}g=i[B>>0]|0;g=(g&1)==0?(g&255)>>>1:k[q>>2]|0;if((k[u>>2]|0)==(d+g|0)){x=0;Fa(6,B|0,g<<1|0,0);m=x;x=0;if(m&1){D=24;break}if(!(i[B>>0]&1))d=10;else d=(k[B>>2]&-2)+-1|0;x=0;Fa(6,B|0,d|0,0);m=x;x=0;if(m&1){D=24;break}d=(i[B>>0]&1)==0?p:k[o>>2]|0;k[u>>2]=d+g}j=a+12|0;g=k[j>>2]|0;m=a+16|0;if((g|0)==(k[m>>2]|0)){x=0;g=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;E=x;x=0;if(E&1){D=24;break}}else g=l[g>>0]|0;if(Im(g&255,t,d,u,v,n,C,y,z,s)|0)break;g=k[j>>2]|0;if((g|0)==(k[m>>2]|0)){x=0;ta(k[(k[a>>2]|0)+40>>2]|0,a|0)|0;E=x;x=0;if(E&1){D=24;break}else continue}else{k[j>>2]=g+1;continue}}if((D|0)==24){a=Wa()|0;break}E=i[C>>0]|0;if((((E&1)==0?(E&255)>>>1:k[C+4>>2]|0)|0)!=0?(w=k[z>>2]|0,(w-y|0)<160):0){E=k[v>>2]|0;k[z>>2]=w+4;k[w>>2]=E}x=0;d=Ea(12,d|0,k[u>>2]|0,e|0,t|0)|0;g=M;E=x;x=0;if(!(E&1)){E=f;k[E>>2]=d;k[E+4>>2]=g;Ip(C,y,k[z>>2]|0,e);if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;d=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;E=x;x=0;if(E&1){D=25;break}if((d|0)==-1){k[b>>2]=0;a=0}}}else a=0;d=(a|0)==0;do if(h){if((k[h+12>>2]|0)==(k[h+16>>2]|0)){x=0;a=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;E=x;x=0;if(E&1){D=25;break a}if((a|0)==-1){k[c>>2]=0;D=49;break}}if(!d)D=50}else D=49;while(0);if((D|0)==49?d:0)D=50;if((D|0)==50)k[e>>2]=k[e>>2]|2;E=k[b>>2]|0;wk(B);wk(C);r=A;return E|0}else D=25}else D=25;while(0);if((D|0)==25)a=Wa()|0;wk(B);wk(C);fb(a|0);return 0}function os(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;B=r;r=r+240|0;t=B+202|0;g=B+200|0;D=B+24|0;C=B+12|0;v=B+8|0;z=B+40|0;A=B+4|0;w=B;u=Xr(d)|0;Ym(D,d,t,g);k[C>>2]=0;k[C+4>>2]=0;k[C+8>>2]=0;if(!(i[C>>0]&1))a=10;else a=(k[C>>2]&-2)+-1|0;x=0;Fa(6,C|0,a|0,0);s=x;x=0;a:do if(!(s&1)){p=C+8|0;q=C+1|0;d=(i[C>>0]&1)==0?q:k[p>>2]|0;k[v>>2]=d;k[A>>2]=z;k[w>>2]=0;s=C+4|0;o=i[g>>0]|0;a=k[b>>2]|0;b:while(1){if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;g=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;n=x;x=0;if(n&1){E=24;break}if((g|0)==-1){k[b>>2]=0;a=0}}}else a=0;h=(a|0)==0;g=k[c>>2]|0;do if(g){if((k[g+12>>2]|0)!=(k[g+16>>2]|0))if(h)break;else break b;x=0;m=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;n=x;x=0;if(n&1){E=24;break b}if((m|0)!=-1)if(h)break;else break b;else{k[c>>2]=0;E=16;break}}else E=16;while(0);if((E|0)==16){E=0;if(h){g=0;break}else g=0}h=i[C>>0]|0;h=(h&1)==0?(h&255)>>>1:k[s>>2]|0;if((k[v>>2]|0)==(d+h|0)){x=0;Fa(6,C|0,h<<1|0,0);n=x;x=0;if(n&1){E=24;break}if(!(i[C>>0]&1))d=10;else d=(k[C>>2]&-2)+-1|0;x=0;Fa(6,C|0,d|0,0);n=x;x=0;if(n&1){E=24;break}d=(i[C>>0]&1)==0?q:k[p>>2]|0;k[v>>2]=d+h}m=a+12|0;h=k[m>>2]|0;n=a+16|0;if((h|0)==(k[n>>2]|0)){x=0;h=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;F=x;x=0;if(F&1){E=24;break}}else h=l[h>>0]|0;if(Im(h&255,u,d,v,w,o,D,z,A,t)|0)break;g=k[m>>2]|0;if((g|0)==(k[n>>2]|0)){x=0;ta(k[(k[a>>2]|0)+40>>2]|0,a|0)|0;F=x;x=0;if(F&1){E=24;break}else continue}else{k[m>>2]=g+1;continue}}if((E|0)==24){a=Wa()|0;break}F=i[D>>0]|0;if((((F&1)==0?(F&255)>>>1:k[D+4>>2]|0)|0)!=0?(y=k[A>>2]|0,(y-z|0)<160):0){F=k[w>>2]|0;k[A>>2]=y+4;k[y>>2]=F}x=0;d=Ea(13,d|0,k[v>>2]|0,e|0,u|0)|0;F=x;x=0;if(!(F&1)){j[f>>1]=d;Ip(D,z,k[A>>2]|0,e);if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;d=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;F=x;x=0;if(F&1){E=25;break}if((d|0)==-1){k[b>>2]=0;a=0}}}else a=0;d=(a|0)==0;do if(g){if((k[g+12>>2]|0)==(k[g+16>>2]|0)){x=0;a=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;F=x;x=0;if(F&1){E=25;break a}if((a|0)==-1){k[c>>2]=0;E=49;break}}if(!d)E=50}else E=49;while(0);if((E|0)==49?d:0)E=50;if((E|0)==50)k[e>>2]=k[e>>2]|2;F=k[b>>2]|0;wk(C);wk(D);r=B;return F|0}else E=25}else E=25;while(0);if((E|0)==25)a=Wa()|0;wk(C);wk(D);fb(a|0);return 0}function ps(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;A=r;r=r+240|0;s=A+202|0;g=A+200|0;C=A+24|0;B=A+12|0;u=A+8|0;y=A+40|0;z=A+4|0;v=A;t=Xr(d)|0;Ym(C,d,s,g);k[B>>2]=0;k[B+4>>2]=0;k[B+8>>2]=0;if(!(i[B>>0]&1))a=10;else a=(k[B>>2]&-2)+-1|0;x=0;Fa(6,B|0,a|0,0);q=x;x=0;a:do if(!(q&1)){o=B+8|0;p=B+1|0;d=(i[B>>0]&1)==0?p:k[o>>2]|0;k[u>>2]=d;k[z>>2]=y;k[v>>2]=0;q=B+4|0;n=i[g>>0]|0;a=k[b>>2]|0;b:while(1){if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;g=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;m=x;x=0;if(m&1){D=24;break}if((g|0)==-1){k[b>>2]=0;a=0}}}else a=0;h=(a|0)==0;g=k[c>>2]|0;do if(g){if((k[g+12>>2]|0)!=(k[g+16>>2]|0))if(h)break;else break b;x=0;j=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;m=x;x=0;if(m&1){D=24;break b}if((j|0)!=-1)if(h)break;else break b;else{k[c>>2]=0;D=16;break}}else D=16;while(0);if((D|0)==16){D=0;if(h){g=0;break}else g=0}h=i[B>>0]|0;h=(h&1)==0?(h&255)>>>1:k[q>>2]|0;if((k[u>>2]|0)==(d+h|0)){x=0;Fa(6,B|0,h<<1|0,0);m=x;x=0;if(m&1){D=24;break}if(!(i[B>>0]&1))d=10;else d=(k[B>>2]&-2)+-1|0;x=0;Fa(6,B|0,d|0,0);m=x;x=0;if(m&1){D=24;break}d=(i[B>>0]&1)==0?p:k[o>>2]|0;k[u>>2]=d+h}j=a+12|0;h=k[j>>2]|0;m=a+16|0;if((h|0)==(k[m>>2]|0)){x=0;h=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;E=x;x=0;if(E&1){D=24;break}}else h=l[h>>0]|0;if(Im(h&255,t,d,u,v,n,C,y,z,s)|0)break;g=k[j>>2]|0;if((g|0)==(k[m>>2]|0)){x=0;ta(k[(k[a>>2]|0)+40>>2]|0,a|0)|0;E=x;x=0;if(E&1){D=24;break}else continue}else{k[j>>2]=g+1;continue}}if((D|0)==24){a=Wa()|0;break}E=i[C>>0]|0;if((((E&1)==0?(E&255)>>>1:k[C+4>>2]|0)|0)!=0?(w=k[z>>2]|0,(w-y|0)<160):0){E=k[v>>2]|0;k[z>>2]=w+4;k[w>>2]=E}x=0;d=Ea(14,d|0,k[u>>2]|0,e|0,t|0)|0;E=x;x=0;if(!(E&1)){k[f>>2]=d;Ip(C,y,k[z>>2]|0,e);if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;d=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;E=x;x=0;if(E&1){D=25;break}if((d|0)==-1){k[b>>2]=0;a=0}}}else a=0;d=(a|0)==0;do if(g){if((k[g+12>>2]|0)==(k[g+16>>2]|0)){x=0;a=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;E=x;x=0;if(E&1){D=25;break a}if((a|0)==-1){k[c>>2]=0;D=49;break}}if(!d)D=50}else D=49;while(0);if((D|0)==49?d:0)D=50;if((D|0)==50)k[e>>2]=k[e>>2]|2;E=k[b>>2]|0;wk(B);wk(C);r=A;return E|0}else D=25}else D=25;while(0);if((D|0)==25)a=Wa()|0;wk(B);wk(C);fb(a|0);return 0}function qs(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;A=r;r=r+240|0;s=A+202|0;g=A+200|0;C=A+24|0;B=A+12|0;u=A+8|0;y=A+40|0;z=A+4|0;v=A;t=Xr(d)|0;Ym(C,d,s,g);k[B>>2]=0;k[B+4>>2]=0;k[B+8>>2]=0;if(!(i[B>>0]&1))a=10;else a=(k[B>>2]&-2)+-1|0;x=0;Fa(6,B|0,a|0,0);q=x;x=0;a:do if(!(q&1)){o=B+8|0;p=B+1|0;d=(i[B>>0]&1)==0?p:k[o>>2]|0;k[u>>2]=d;k[z>>2]=y;k[v>>2]=0;q=B+4|0;n=i[g>>0]|0;a=k[b>>2]|0;b:while(1){if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;g=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;m=x;x=0;if(m&1){D=24;break}if((g|0)==-1){k[b>>2]=0;a=0}}}else a=0;h=(a|0)==0;g=k[c>>2]|0;do if(g){if((k[g+12>>2]|0)!=(k[g+16>>2]|0))if(h)break;else break b;x=0;j=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;m=x;x=0;if(m&1){D=24;break b}if((j|0)!=-1)if(h)break;else break b;else{k[c>>2]=0;D=16;break}}else D=16;while(0);if((D|0)==16){D=0;if(h){g=0;break}else g=0}h=i[B>>0]|0;h=(h&1)==0?(h&255)>>>1:k[q>>2]|0;if((k[u>>2]|0)==(d+h|0)){x=0;Fa(6,B|0,h<<1|0,0);m=x;x=0;if(m&1){D=24;break}if(!(i[B>>0]&1))d=10;else d=(k[B>>2]&-2)+-1|0;x=0;Fa(6,B|0,d|0,0);m=x;x=0;if(m&1){D=24;break}d=(i[B>>0]&1)==0?p:k[o>>2]|0;k[u>>2]=d+h}j=a+12|0;h=k[j>>2]|0;m=a+16|0;if((h|0)==(k[m>>2]|0)){x=0;h=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;E=x;x=0;if(E&1){D=24;break}}else h=l[h>>0]|0;if(Im(h&255,t,d,u,v,n,C,y,z,s)|0)break;g=k[j>>2]|0;if((g|0)==(k[m>>2]|0)){x=0;ta(k[(k[a>>2]|0)+40>>2]|0,a|0)|0;E=x;x=0;if(E&1){D=24;break}else continue}else{k[j>>2]=g+1;continue}}if((D|0)==24){a=Wa()|0;break}E=i[C>>0]|0;if((((E&1)==0?(E&255)>>>1:k[C+4>>2]|0)|0)!=0?(w=k[z>>2]|0,(w-y|0)<160):0){E=k[v>>2]|0;k[z>>2]=w+4;k[w>>2]=E}x=0;d=Ea(15,d|0,k[u>>2]|0,e|0,t|0)|0;E=x;x=0;if(!(E&1)){k[f>>2]=d;Ip(C,y,k[z>>2]|0,e);if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;d=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;E=x;x=0;if(E&1){D=25;break}if((d|0)==-1){k[b>>2]=0;a=0}}}else a=0;d=(a|0)==0;do if(g){if((k[g+12>>2]|0)==(k[g+16>>2]|0)){x=0;a=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;E=x;x=0;if(E&1){D=25;break a}if((a|0)==-1){k[c>>2]=0;D=49;break}}if(!d)D=50}else D=49;while(0);if((D|0)==49?d:0)D=50;if((D|0)==50)k[e>>2]=k[e>>2]|2;E=k[b>>2]|0;wk(B);wk(C);r=A;return E|0}else D=25}else D=25;while(0);if((D|0)==25)a=Wa()|0;wk(B);wk(C);fb(a|0);return 0}function rs(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;A=r;r=r+240|0;s=A+202|0;g=A+200|0;C=A+24|0;B=A+12|0;u=A+8|0;y=A+40|0;z=A+4|0;v=A;t=Xr(d)|0;Ym(C,d,s,g);k[B>>2]=0;k[B+4>>2]=0;k[B+8>>2]=0;if(!(i[B>>0]&1))a=10;else a=(k[B>>2]&-2)+-1|0;x=0;Fa(6,B|0,a|0,0);q=x;x=0;a:do if(!(q&1)){o=B+8|0;p=B+1|0;d=(i[B>>0]&1)==0?p:k[o>>2]|0;k[u>>2]=d;k[z>>2]=y;k[v>>2]=0;q=B+4|0;n=i[g>>0]|0;a=k[b>>2]|0;b:while(1){if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;g=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;m=x;x=0;if(m&1){D=24;break}if((g|0)==-1){k[b>>2]=0;a=0}}}else a=0;g=(a|0)==0;h=k[c>>2]|0;do if(h){if((k[h+12>>2]|0)!=(k[h+16>>2]|0))if(g)break;else break b;x=0;j=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;m=x;x=0;if(m&1){D=24;break b}if((j|0)!=-1)if(g)break;else break b;else{k[c>>2]=0;D=16;break}}else D=16;while(0);if((D|0)==16){D=0;if(g){h=0;break}else h=0}g=i[B>>0]|0;g=(g&1)==0?(g&255)>>>1:k[q>>2]|0;if((k[u>>2]|0)==(d+g|0)){x=0;Fa(6,B|0,g<<1|0,0);m=x;x=0;if(m&1){D=24;break}if(!(i[B>>0]&1))d=10;else d=(k[B>>2]&-2)+-1|0;x=0;Fa(6,B|0,d|0,0);m=x;x=0;if(m&1){D=24;break}d=(i[B>>0]&1)==0?p:k[o>>2]|0;k[u>>2]=d+g}j=a+12|0;g=k[j>>2]|0;m=a+16|0;if((g|0)==(k[m>>2]|0)){x=0;g=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;E=x;x=0;if(E&1){D=24;break}}else g=l[g>>0]|0;if(Im(g&255,t,d,u,v,n,C,y,z,s)|0)break;g=k[j>>2]|0;if((g|0)==(k[m>>2]|0)){x=0;ta(k[(k[a>>2]|0)+40>>2]|0,a|0)|0;E=x;x=0;if(E&1){D=24;break}else continue}else{k[j>>2]=g+1;continue}}if((D|0)==24){a=Wa()|0;break}E=i[C>>0]|0;if((((E&1)==0?(E&255)>>>1:k[C+4>>2]|0)|0)!=0?(w=k[z>>2]|0,(w-y|0)<160):0){E=k[v>>2]|0;k[z>>2]=w+4;k[w>>2]=E}x=0;d=Ea(16,d|0,k[u>>2]|0,e|0,t|0)|0;g=M;E=x;x=0;if(!(E&1)){E=f;k[E>>2]=d;k[E+4>>2]=g;Ip(C,y,k[z>>2]|0,e);if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;d=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;E=x;x=0;if(E&1){D=25;break}if((d|0)==-1){k[b>>2]=0;a=0}}}else a=0;d=(a|0)==0;do if(h){if((k[h+12>>2]|0)==(k[h+16>>2]|0)){x=0;a=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;E=x;x=0;if(E&1){D=25;break a}if((a|0)==-1){k[c>>2]=0;D=49;break}}if(!d)D=50}else D=49;while(0);if((D|0)==49?d:0)D=50;if((D|0)==50)k[e>>2]=k[e>>2]|2;E=k[b>>2]|0;wk(B);wk(C);r=A;return E|0}else D=25}else D=25;while(0);if((D|0)==25)a=Wa()|0;wk(B);wk(C);fb(a|0);return 0}function ss(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0.0,h=0,j=0,m=0,n=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;E=r;r=r+240|0;v=E+208|0;h=E+203|0;j=E+202|0;G=E+24|0;F=E+12|0;y=E+8|0;C=E+40|0;D=E+4|0;z=E;A=E+201|0;w=E+200|0;Zm(G,d,v,h,j);k[F>>2]=0;k[F+4>>2]=0;k[F+8>>2]=0;if(!(i[F>>0]&1))a=10;else a=(k[F>>2]&-2)+-1|0;x=0;Fa(6,F|0,a|0,0);u=x;x=0;a:do if(!(u&1)){s=F+8|0;t=F+1|0;d=(i[F>>0]&1)==0?t:k[s>>2]|0;k[y>>2]=d;k[D>>2]=C;k[z>>2]=0;i[A>>0]=1;i[w>>0]=69;u=F+4|0;q=i[h>>0]|0;p=i[j>>0]|0;a=k[b>>2]|0;b:while(1){if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;h=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;n=x;x=0;if(n&1){H=24;break}if((h|0)==-1){k[b>>2]=0;a=0}}}else a=0;j=(a|0)==0;h=k[c>>2]|0;do if(h){if((k[h+12>>2]|0)!=(k[h+16>>2]|0))if(j)break;else break b;x=0;m=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;n=x;x=0;if(n&1){H=24;break b}if((m|0)!=-1)if(j)break;else break b;else{k[c>>2]=0;H=16;break}}else H=16;while(0);if((H|0)==16){H=0;if(j){h=0;break}else h=0}j=i[F>>0]|0;j=(j&1)==0?(j&255)>>>1:k[u>>2]|0;if((k[y>>2]|0)==(d+j|0)){x=0;Fa(6,F|0,j<<1|0,0);n=x;x=0;if(n&1){H=24;break}if(!(i[F>>0]&1))d=10;else d=(k[F>>2]&-2)+-1|0;x=0;Fa(6,F|0,d|0,0);n=x;x=0;if(n&1){H=24;break}d=(i[F>>0]&1)==0?t:k[s>>2]|0;k[y>>2]=d+j}m=a+12|0;j=k[m>>2]|0;n=a+16|0;if((j|0)==(k[n>>2]|0)){x=0;j=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;I=x;x=0;if(I&1){H=24;break}}else j=l[j>>0]|0;if(_m(j&255,A,w,d,y,q,p,G,C,D,z,v)|0)break;h=k[m>>2]|0;if((h|0)==(k[n>>2]|0)){x=0;ta(k[(k[a>>2]|0)+40>>2]|0,a|0)|0;I=x;x=0;if(I&1){H=24;break}else continue}else{k[m>>2]=h+1;continue}}if((H|0)==24){a=Wa()|0;break}I=i[G>>0]|0;if(!((i[A>>0]|0)==0?1:(((I&1)==0?(I&255)>>>1:k[G+4>>2]|0)|0)==0)?(B=k[D>>2]|0,(B-C|0)<160):0){I=k[z>>2]|0;k[D>>2]=B+4;k[B>>2]=I}x=0;g=+Ca(1,d|0,k[y>>2]|0,e|0);I=x;x=0;if(!(I&1)){o[f>>2]=g;Ip(G,C,k[D>>2]|0,e);if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;d=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;I=x;x=0;if(I&1){H=25;break}if((d|0)==-1){k[b>>2]=0;a=0}}}else a=0;d=(a|0)==0;do if(h){if((k[h+12>>2]|0)==(k[h+16>>2]|0)){x=0;a=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;I=x;x=0;if(I&1){H=25;break a}if((a|0)==-1){k[c>>2]=0;H=49;break}}if(!d)H=50}else H=49;while(0);if((H|0)==49?d:0)H=50;if((H|0)==50)k[e>>2]=k[e>>2]|2;I=k[b>>2]|0;wk(F);wk(G);r=E;return I|0}else H=25}else H=25;while(0);if((H|0)==25)a=Wa()|0;wk(F);wk(G);fb(a|0);return 0}function ts(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0.0,h=0,j=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;E=r;r=r+240|0;v=E+208|0;h=E+203|0;j=E+202|0;G=E+24|0;F=E+12|0;y=E+8|0;C=E+40|0;D=E+4|0;z=E;A=E+201|0;w=E+200|0;Zm(G,d,v,h,j);k[F>>2]=0;k[F+4>>2]=0;k[F+8>>2]=0;if(!(i[F>>0]&1))a=10;else a=(k[F>>2]&-2)+-1|0;x=0;Fa(6,F|0,a|0,0);u=x;x=0;a:do if(!(u&1)){s=F+8|0;t=F+1|0;d=(i[F>>0]&1)==0?t:k[s>>2]|0;k[y>>2]=d;k[D>>2]=C;k[z>>2]=0;i[A>>0]=1;i[w>>0]=69;u=F+4|0;q=i[h>>0]|0;o=i[j>>0]|0;a=k[b>>2]|0;b:while(1){if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;h=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;n=x;x=0;if(n&1){H=24;break}if((h|0)==-1){k[b>>2]=0;a=0}}}else a=0;j=(a|0)==0;h=k[c>>2]|0;do if(h){if((k[h+12>>2]|0)!=(k[h+16>>2]|0))if(j)break;else break b;x=0;m=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;n=x;x=0;if(n&1){H=24;break b}if((m|0)!=-1)if(j)break;else break b;else{k[c>>2]=0;H=16;break}}else H=16;while(0);if((H|0)==16){H=0;if(j){h=0;break}else h=0}j=i[F>>0]|0;j=(j&1)==0?(j&255)>>>1:k[u>>2]|0;if((k[y>>2]|0)==(d+j|0)){x=0;Fa(6,F|0,j<<1|0,0);n=x;x=0;if(n&1){H=24;break}if(!(i[F>>0]&1))d=10;else d=(k[F>>2]&-2)+-1|0;x=0;Fa(6,F|0,d|0,0);n=x;x=0;if(n&1){H=24;break}d=(i[F>>0]&1)==0?t:k[s>>2]|0;k[y>>2]=d+j}m=a+12|0;j=k[m>>2]|0;n=a+16|0;if((j|0)==(k[n>>2]|0)){x=0;j=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;I=x;x=0;if(I&1){H=24;break}}else j=l[j>>0]|0;if(_m(j&255,A,w,d,y,q,o,G,C,D,z,v)|0)break;h=k[m>>2]|0;if((h|0)==(k[n>>2]|0)){x=0;ta(k[(k[a>>2]|0)+40>>2]|0,a|0)|0;I=x;x=0;if(I&1){H=24;break}else continue}else{k[m>>2]=h+1;continue}}if((H|0)==24){a=Wa()|0;break}I=i[G>>0]|0;if(!((i[A>>0]|0)==0?1:(((I&1)==0?(I&255)>>>1:k[G+4>>2]|0)|0)==0)?(B=k[D>>2]|0,(B-C|0)<160):0){I=k[z>>2]|0;k[D>>2]=B+4;k[B>>2]=I}x=0;g=+Ca(2,d|0,k[y>>2]|0,e|0);I=x;x=0;if(!(I&1)){p[f>>3]=g;Ip(G,C,k[D>>2]|0,e);if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;d=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;I=x;x=0;if(I&1){H=25;break}if((d|0)==-1){k[b>>2]=0;a=0}}}else a=0;d=(a|0)==0;do if(h){if((k[h+12>>2]|0)==(k[h+16>>2]|0)){x=0;a=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;I=x;x=0;if(I&1){H=25;break a}if((a|0)==-1){k[c>>2]=0;H=49;break}}if(!d)H=50}else H=49;while(0);if((H|0)==49?d:0)H=50;if((H|0)==50)k[e>>2]=k[e>>2]|2;I=k[b>>2]|0;wk(F);wk(G);r=E;return I|0}else H=25}else H=25;while(0);if((H|0)==25)a=Wa()|0;wk(F);wk(G);fb(a|0);return 0}function us(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0.0,h=0,j=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;E=r;r=r+240|0;v=E+208|0;h=E+203|0;j=E+202|0;G=E+24|0;F=E+12|0;y=E+8|0;C=E+40|0;D=E+4|0;z=E;A=E+201|0;w=E+200|0;Zm(G,d,v,h,j);k[F>>2]=0;k[F+4>>2]=0;k[F+8>>2]=0;if(!(i[F>>0]&1))a=10;else a=(k[F>>2]&-2)+-1|0;x=0;Fa(6,F|0,a|0,0);u=x;x=0;a:do if(!(u&1)){s=F+8|0;t=F+1|0;d=(i[F>>0]&1)==0?t:k[s>>2]|0;k[y>>2]=d;k[D>>2]=C;k[z>>2]=0;i[A>>0]=1;i[w>>0]=69;u=F+4|0;q=i[h>>0]|0;o=i[j>>0]|0;a=k[b>>2]|0;b:while(1){if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;h=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;n=x;x=0;if(n&1){H=24;break}if((h|0)==-1){k[b>>2]=0;a=0}}}else a=0;j=(a|0)==0;h=k[c>>2]|0;do if(h){if((k[h+12>>2]|0)!=(k[h+16>>2]|0))if(j)break;else break b;x=0;m=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;n=x;x=0;if(n&1){H=24;break b}if((m|0)!=-1)if(j)break;else break b;else{k[c>>2]=0;H=16;break}}else H=16;while(0);if((H|0)==16){H=0;if(j){h=0;break}else h=0}j=i[F>>0]|0;j=(j&1)==0?(j&255)>>>1:k[u>>2]|0;if((k[y>>2]|0)==(d+j|0)){x=0;Fa(6,F|0,j<<1|0,0);n=x;x=0;if(n&1){H=24;break}if(!(i[F>>0]&1))d=10;else d=(k[F>>2]&-2)+-1|0;x=0;Fa(6,F|0,d|0,0);n=x;x=0;if(n&1){H=24;break}d=(i[F>>0]&1)==0?t:k[s>>2]|0;k[y>>2]=d+j}m=a+12|0;j=k[m>>2]|0;n=a+16|0;if((j|0)==(k[n>>2]|0)){x=0;j=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;I=x;x=0;if(I&1){H=24;break}}else j=l[j>>0]|0;if(_m(j&255,A,w,d,y,q,o,G,C,D,z,v)|0)break;h=k[m>>2]|0;if((h|0)==(k[n>>2]|0)){x=0;ta(k[(k[a>>2]|0)+40>>2]|0,a|0)|0;I=x;x=0;if(I&1){H=24;break}else continue}else{k[m>>2]=h+1;continue}}if((H|0)==24){a=Wa()|0;break}I=i[G>>0]|0;if(!((i[A>>0]|0)==0?1:(((I&1)==0?(I&255)>>>1:k[G+4>>2]|0)|0)==0)?(B=k[D>>2]|0,(B-C|0)<160):0){I=k[z>>2]|0;k[D>>2]=B+4;k[B>>2]=I}x=0;g=+Ca(3,d|0,k[y>>2]|0,e|0);I=x;x=0;if(!(I&1)){p[f>>3]=g;Ip(G,C,k[D>>2]|0,e);if(a){if((k[a+12>>2]|0)==(k[a+16>>2]|0)){x=0;d=ta(k[(k[a>>2]|0)+36>>2]|0,a|0)|0;I=x;x=0;if(I&1){H=25;break}if((d|0)==-1){k[b>>2]=0;a=0}}}else a=0;d=(a|0)==0;do if(h){if((k[h+12>>2]|0)==(k[h+16>>2]|0)){x=0;a=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;I=x;x=0;if(I&1){H=25;break a}if((a|0)==-1){k[c>>2]=0;H=49;break}}if(!d)H=50}else H=49;while(0);if((H|0)==49?d:0)H=50;if((H|0)==50)k[e>>2]=k[e>>2]|2;I=k[b>>2]|0;wk(F);wk(G);r=E;return I|0}else H=25}else H=25;while(0);if((H|0)==25)a=Wa()|0;wk(F);wk(G);fb(a|0);return 0}function vs(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=r;r=r+16|0;f=e;k[f>>2]=d;d=ei(b)|0;b=Vi(a,c,f)|0;if((d|0)!=0?(x=0,ta(74,d|0)|0,f=x,x=0,f&1):0){f=Wa(0)|0;mc(f)}r=e;return b|0}function ws(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0;y=r;r=r+112|0;j=y;m=(d-c|0)/12|0;do if(m>>>0>100){j=tj(m)|0;if((j|0)==0?(x=0,Ga(6),w=x,x=0,w&1):0){h=0;o=6;break}h=j;o=11}else{h=0;o=11}while(0);a:do if((o|0)==11){if((c|0)==(d|0))l=0;else{p=c;n=0;o=j;while(1){l=i[p>>0]|0;if(!(l&1))l=(l&255)>>>1;else l=k[p+4>>2]|0;if(!l){i[o>>0]=2;l=n+1|0;m=m+-1|0}else{i[o>>0]=1;l=n}p=p+12|0;if((p|0)==(d|0))break;else{n=l;o=o+1|0}}}v=(c|0)==(d|0);w=(c|0)==(d|0);u=0;q=m;b:while(1){m=k[a>>2]|0;do if(m){n=k[m+12>>2]|0;if((n|0)==(k[m+16>>2]|0)){x=0;m=ta(k[(k[m>>2]|0)+36>>2]|0,m|0)|0;t=x;x=0;if(t&1){o=5;break b}}else m=k[n>>2]|0;if((m|0)==-1){k[a>>2]=0;p=1;break}else{p=(k[a>>2]|0)==0;break}}else p=1;while(0);n=k[b>>2]|0;if(n){m=k[n+12>>2]|0;if((m|0)==(k[n+16>>2]|0)){x=0;m=ta(k[(k[n>>2]|0)+36>>2]|0,n|0)|0;t=x;x=0;if(t&1){o=5;break}}else m=k[m>>2]|0;if((m|0)==-1){k[b>>2]=0;n=0;o=1}else o=0}else{n=0;o=1}m=k[a>>2]|0;if(!((q|0)!=0&(p^o))){o=66;break}n=k[m+12>>2]|0;if((n|0)==(k[m+16>>2]|0)){x=0;m=ta(k[(k[m>>2]|0)+36>>2]|0,m|0)|0;t=x;x=0;if(t&1){o=5;break}}else m=k[n>>2]|0;if(!g){x=0;m=Aa(k[(k[e>>2]|0)+28>>2]|0,e|0,m|0)|0;t=x;x=0;if(t&1){o=5;break}}t=u+1|0;if(v){m=0;p=q}else{p=0;s=c;o=q;q=j;while(1){do if((i[q>>0]|0)==1){if(!(i[s>>0]&1))n=s+4|0;else n=k[s+8>>2]|0;n=k[n+(u<<2)>>2]|0;if(!g){x=0;n=Aa(k[(k[e>>2]|0)+28>>2]|0,e|0,n|0)|0;z=x;x=0;if(z&1){o=4;break b}}if((m|0)!=(n|0)){i[q>>0]=0;n=p;o=o+-1|0;break}n=i[s>>0]|0;if(!(n&1))n=(n&255)>>>1;else n=k[s+4>>2]|0;if((n|0)==(t|0)){i[q>>0]=2;n=1;l=l+1|0;o=o+-1|0}else n=1}else n=p;while(0);s=s+12|0;if((s|0)==(d|0)){m=n;p=o;break}else{p=n;q=q+1|0}}}if(!m){u=t;q=p;continue}m=k[a>>2]|0;n=m+12|0;o=k[n>>2]|0;if((o|0)==(k[m+16>>2]|0)){x=0;ta(k[(k[m>>2]|0)+40>>2]|0,m|0)|0;z=x;x=0;if(z&1){o=5;break}}else k[n>>2]=o+4;if((l+p|0)>>>0<2|w){u=t;q=p;continue}else{m=c;o=j}while(1){if((i[o>>0]|0)==2){n=i[m>>0]|0;if(!(n&1))n=(n&255)>>>1;else n=k[m+4>>2]|0;if((n|0)!=(t|0)){i[o>>0]=0;l=l+-1|0}}m=m+12|0;if((m|0)==(d|0)){u=t;q=p;continue b}else o=o+1|0}}if((o|0)==4){c=Wa()|0;break}else if((o|0)==5){c=Wa()|0;break}else if((o|0)==66){do if(m){l=k[m+12>>2]|0;if((l|0)==(k[m+16>>2]|0)){x=0;l=ta(k[(k[m>>2]|0)+36>>2]|0,m|0)|0;z=x;x=0;if(z&1){o=6;break a}}else l=k[l>>2]|0;if((l|0)==-1){k[a>>2]=0;m=1;break}else{m=(k[a>>2]|0)==0;break}}else m=1;while(0);do if(n){l=k[n+12>>2]|0;if((l|0)==(k[n+16>>2]|0)){x=0;l=ta(k[(k[n>>2]|0)+36>>2]|0,n|0)|0;z=x;x=0;if(z&1){o=6;break a}}else l=k[l>>2]|0;if((l|0)!=-1)if(m)break;else{o=81;break}else{k[b>>2]=0;o=79;break}}else o=79;while(0);if((o|0)==79?m:0)o=81;if((o|0)==81)k[f>>2]=k[f>>2]|2;c:do if((c|0)==(d|0))o=85;else while(1){if((i[j>>0]|0)==2)break c;c=c+12|0;if((c|0)==(d|0)){o=85;break}else j=j+1|0}while(0);if((o|0)==85){k[f>>2]=k[f>>2]|4;c=d}if(h)uj(h);r=y;return c|0}}while(0);if((o|0)==6)c=Wa()|0;if(h)uj(h);fb(c|0);return 0}function xs(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0;z=r;r=r+320|0;q=z+208|0;g=z+200|0;B=z+24|0;A=z+12|0;t=z+8|0;w=z+40|0;y=z+4|0;u=z;s=Xr(d)|0;$m(B,d,q,g);k[A>>2]=0;k[A+4>>2]=0;k[A+8>>2]=0;if(!(i[A>>0]&1))a=10;else a=(k[A>>2]&-2)+-1|0;x=0;Fa(6,A|0,a|0,0);p=x;x=0;a:do if(!(p&1)){n=A+8|0;o=A+1|0;a=(i[A>>0]&1)==0?o:k[n>>2]|0;k[t>>2]=a;k[y>>2]=w;k[u>>2]=0;p=A+4|0;m=k[g>>2]|0;g=k[b>>2]|0;b:while(1){if(g){d=k[g+12>>2]|0;if((d|0)==(k[g+16>>2]|0)){x=0;d=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;l=x;x=0;if(l&1){C=25;break}}else d=k[d>>2]|0;if((d|0)==-1){k[b>>2]=0;d=0;h=1}else{d=g;h=0}}else{d=0;h=1}j=k[c>>2]|0;do if(j){g=k[j+12>>2]|0;if((g|0)==(k[j+16>>2]|0)){x=0;g=ta(k[(k[j>>2]|0)+36>>2]|0,j|0)|0;l=x;x=0;if(l&1){C=25;break b}}else g=k[g>>2]|0;if((g|0)!=-1)if(h)break;else{g=j;break b}else{k[c>>2]=0;C=17;break}}else C=17;while(0);if((C|0)==17){C=0;if(h){g=0;break}else j=0}g=i[A>>0]|0;g=(g&1)==0?(g&255)>>>1:k[p>>2]|0;if((k[t>>2]|0)==(a+g|0)){x=0;Fa(6,A|0,g<<1|0,0);l=x;x=0;if(l&1){C=25;break}if(!(i[A>>0]&1))a=10;else a=(k[A>>2]&-2)+-1|0;x=0;Fa(6,A|0,a|0,0);l=x;x=0;if(l&1){C=25;break}a=(i[A>>0]&1)==0?o:k[n>>2]|0;k[t>>2]=a+g}h=d+12|0;g=k[h>>2]|0;l=d+16|0;if((g|0)==(k[l>>2]|0)){x=0;g=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;D=x;x=0;if(D&1){C=25;break}}else g=k[g>>2]|0;if(Xm(g,s,a,t,u,m,B,w,y,q)|0){g=j;break}g=k[h>>2]|0;if((g|0)==(k[l>>2]|0)){x=0;ta(k[(k[d>>2]|0)+40>>2]|0,d|0)|0;D=x;x=0;if(D&1){C=25;break}else{g=d;continue}}else{k[h>>2]=g+4;g=d;continue}}if((C|0)==25){a=Wa()|0;break}D=i[B>>0]|0;if((((D&1)==0?(D&255)>>>1:k[B+4>>2]|0)|0)!=0?(v=k[y>>2]|0,(v-w|0)<160):0){D=k[u>>2]|0;k[y>>2]=v+4;k[v>>2]=D}x=0;a=Ea(11,a|0,k[t>>2]|0,e|0,s|0)|0;D=x;x=0;if(!(D&1)){k[f>>2]=a;Ip(B,w,k[y>>2]|0,e);if(d){a=k[d+12>>2]|0;if((a|0)==(k[d+16>>2]|0)){x=0;a=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;D=x;x=0;if(D&1){C=26;break}}else a=k[a>>2]|0;if((a|0)==-1){k[b>>2]=0;d=1}else d=0}else d=1;do if(g){a=k[g+12>>2]|0;if((a|0)==(k[g+16>>2]|0)){x=0;a=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;D=x;x=0;if(D&1){C=26;break a}}else a=k[a>>2]|0;if((a|0)!=-1)if(d)break;else{C=53;break}else{k[c>>2]=0;C=51;break}}else C=51;while(0);if((C|0)==51?d:0)C=53;if((C|0)==53)k[e>>2]=k[e>>2]|2;D=k[b>>2]|0;wk(A);wk(B);r=z;return D|0}else C=26}else C=26;while(0);if((C|0)==26)a=Wa()|0;wk(A);wk(B);fb(a|0);return 0}function ys(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0;z=r;r=r+320|0;q=z+208|0;g=z+200|0;B=z+24|0;A=z+12|0;t=z+8|0;w=z+40|0;y=z+4|0;u=z;s=Xr(d)|0;$m(B,d,q,g);k[A>>2]=0;k[A+4>>2]=0;k[A+8>>2]=0;if(!(i[A>>0]&1))a=10;else a=(k[A>>2]&-2)+-1|0;x=0;Fa(6,A|0,a|0,0);p=x;x=0;a:do if(!(p&1)){n=A+8|0;o=A+1|0;a=(i[A>>0]&1)==0?o:k[n>>2]|0;k[t>>2]=a;k[y>>2]=w;k[u>>2]=0;p=A+4|0;m=k[g>>2]|0;g=k[b>>2]|0;b:while(1){if(g){d=k[g+12>>2]|0;if((d|0)==(k[g+16>>2]|0)){x=0;d=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;l=x;x=0;if(l&1){C=25;break}}else d=k[d>>2]|0;if((d|0)==-1){k[b>>2]=0;g=0;j=1}else j=0}else{g=0;j=1}h=k[c>>2]|0;do if(h){d=k[h+12>>2]|0;if((d|0)==(k[h+16>>2]|0)){x=0;d=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;l=x;x=0;if(l&1){C=25;break b}}else d=k[d>>2]|0;if((d|0)!=-1)if(j)break;else break b;else{k[c>>2]=0;C=17;break}}else C=17;while(0);if((C|0)==17){C=0;if(j){h=0;break}else h=0}d=i[A>>0]|0;d=(d&1)==0?(d&255)>>>1:k[p>>2]|0;if((k[t>>2]|0)==(a+d|0)){x=0;Fa(6,A|0,d<<1|0,0);l=x;x=0;if(l&1){C=25;break}if(!(i[A>>0]&1))a=10;else a=(k[A>>2]&-2)+-1|0;x=0;Fa(6,A|0,a|0,0);l=x;x=0;if(l&1){C=25;break}a=(i[A>>0]&1)==0?o:k[n>>2]|0;k[t>>2]=a+d}j=g+12|0;d=k[j>>2]|0;l=g+16|0;if((d|0)==(k[l>>2]|0)){x=0;d=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;D=x;x=0;if(D&1){C=25;break}}else d=k[d>>2]|0;if(Xm(d,s,a,t,u,m,B,w,y,q)|0)break;d=k[j>>2]|0;if((d|0)==(k[l>>2]|0)){x=0;ta(k[(k[g>>2]|0)+40>>2]|0,g|0)|0;D=x;x=0;if(D&1){C=25;break}else continue}else{k[j>>2]=d+4;continue}}if((C|0)==25){a=Wa()|0;break}D=i[B>>0]|0;if((((D&1)==0?(D&255)>>>1:k[B+4>>2]|0)|0)!=0?(v=k[y>>2]|0,(v-w|0)<160):0){D=k[u>>2]|0;k[y>>2]=v+4;k[v>>2]=D}x=0;a=Ea(12,a|0,k[t>>2]|0,e|0,s|0)|0;d=M;D=x;x=0;if(!(D&1)){D=f;k[D>>2]=a;k[D+4>>2]=d;Ip(B,w,k[y>>2]|0,e);if(g){a=k[g+12>>2]|0;if((a|0)==(k[g+16>>2]|0)){x=0;a=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;D=x;x=0;if(D&1){C=26;break}}else a=k[a>>2]|0;if((a|0)==-1){k[b>>2]=0;d=1}else d=0}else d=1;do if(h){a=k[h+12>>2]|0;if((a|0)==(k[h+16>>2]|0)){x=0;a=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;D=x;x=0;if(D&1){C=26;break a}}else a=k[a>>2]|0;if((a|0)!=-1)if(d)break;else{C=53;break}else{k[c>>2]=0;C=51;break}}else C=51;while(0);if((C|0)==51?d:0)C=53;if((C|0)==53)k[e>>2]=k[e>>2]|2;D=k[b>>2]|0;wk(A);wk(B);r=z;return D|0}else C=26}else C=26;while(0);if((C|0)==26)a=Wa()|0;wk(A);wk(B);fb(a|0);return 0}function zs(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;A=r;r=r+320|0;s=A+208|0;g=A+200|0;C=A+24|0;B=A+12|0;u=A+8|0;y=A+40|0;z=A+4|0;v=A;t=Xr(d)|0;$m(C,d,s,g);k[B>>2]=0;k[B+4>>2]=0;k[B+8>>2]=0;if(!(i[B>>0]&1))a=10;else a=(k[B>>2]&-2)+-1|0;x=0;Fa(6,B|0,a|0,0);q=x;x=0;a:do if(!(q&1)){o=B+8|0;p=B+1|0;a=(i[B>>0]&1)==0?p:k[o>>2]|0;k[u>>2]=a;k[z>>2]=y;k[v>>2]=0;q=B+4|0;n=k[g>>2]|0;g=k[b>>2]|0;b:while(1){if(g){d=k[g+12>>2]|0;if((d|0)==(k[g+16>>2]|0)){x=0;d=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;m=x;x=0;if(m&1){D=25;break}}else d=k[d>>2]|0;if((d|0)==-1){k[b>>2]=0;d=0;h=1}else{d=g;h=0}}else{d=0;h=1}l=k[c>>2]|0;do if(l){g=k[l+12>>2]|0;if((g|0)==(k[l+16>>2]|0)){x=0;g=ta(k[(k[l>>2]|0)+36>>2]|0,l|0)|0;m=x;x=0;if(m&1){D=25;break b}}else g=k[g>>2]|0;if((g|0)!=-1)if(h)break;else{g=l;break b}else{k[c>>2]=0;D=17;break}}else D=17;while(0);if((D|0)==17){D=0;if(h){g=0;break}else l=0}g=i[B>>0]|0;g=(g&1)==0?(g&255)>>>1:k[q>>2]|0;if((k[u>>2]|0)==(a+g|0)){x=0;Fa(6,B|0,g<<1|0,0);m=x;x=0;if(m&1){D=25;break}if(!(i[B>>0]&1))a=10;else a=(k[B>>2]&-2)+-1|0;x=0;Fa(6,B|0,a|0,0);m=x;x=0;if(m&1){D=25;break}a=(i[B>>0]&1)==0?p:k[o>>2]|0;k[u>>2]=a+g}h=d+12|0;g=k[h>>2]|0;m=d+16|0;if((g|0)==(k[m>>2]|0)){x=0;g=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;E=x;x=0;if(E&1){D=25;break}}else g=k[g>>2]|0;if(Xm(g,t,a,u,v,n,C,y,z,s)|0){g=l;break}g=k[h>>2]|0;if((g|0)==(k[m>>2]|0)){x=0;ta(k[(k[d>>2]|0)+40>>2]|0,d|0)|0;E=x;x=0;if(E&1){D=25;break}else{g=d;continue}}else{k[h>>2]=g+4;g=d;continue}}if((D|0)==25){a=Wa()|0;break}E=i[C>>0]|0;if((((E&1)==0?(E&255)>>>1:k[C+4>>2]|0)|0)!=0?(w=k[z>>2]|0,(w-y|0)<160):0){E=k[v>>2]|0;k[z>>2]=w+4;k[w>>2]=E}x=0;a=Ea(13,a|0,k[u>>2]|0,e|0,t|0)|0;E=x;x=0;if(!(E&1)){j[f>>1]=a;Ip(C,y,k[z>>2]|0,e);if(d){a=k[d+12>>2]|0;if((a|0)==(k[d+16>>2]|0)){x=0;a=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;E=x;x=0;if(E&1){D=26;break}}else a=k[a>>2]|0;if((a|0)==-1){k[b>>2]=0;d=1}else d=0}else d=1;do if(g){a=k[g+12>>2]|0;if((a|0)==(k[g+16>>2]|0)){x=0;a=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;E=x;x=0;if(E&1){D=26;break a}}else a=k[a>>2]|0;if((a|0)!=-1)if(d)break;else{D=53;break}else{k[c>>2]=0;D=51;break}}else D=51;while(0);if((D|0)==51?d:0)D=53;if((D|0)==53)k[e>>2]=k[e>>2]|2;E=k[b>>2]|0;wk(B);wk(C);r=A;return E|0}else D=26}else D=26;while(0);if((D|0)==26)a=Wa()|0;wk(B);wk(C);fb(a|0);return 0}
function Kg(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;c=r;r=r+16|0;e=c;k[e>>2]=0;f=e+4|0;k[f>>2]=0;k[e+8>>2]=0;x=0;Fa(7,a|0,e|0,4);b=x;x=0;a:do if(b&1)d=3;else{b=k[e>>2]|0;b:do if(!(cj(b,49507,4)|0)){x=0;b=ta(68,a|0)|0;g=x;x=0;if(g&1){d=3;break a}b=b&255;switch(b|0){case 3:case 2:case 1:case 0:{k[a+44>>2]=b;a=5;b=k[e>>2]|0;break b}case 5:case 4:{b=Va(16)|0;x=0;a=Da(1)|0;g=x;x=0;if(!(g&1)?(x=0,Fa(4,b|0,7,a|0),g=x,x=0,!(g&1)):0){x=0;Fa(5,b|0,648,74);x=0;d=3;break a}a=Wa()|0;Ua(b|0);break a}default:{b=Va(16)|0;x=0;a=Da(1)|0;g=x;x=0;if(!(g&1)?(x=0,Fa(4,b|0,5,a|0),g=x,x=0,!(g&1)):0){x=0;Fa(5,b|0,648,74);x=0;d=3;break a}a=Wa()|0;Ua(b|0);break a}}}else a=4;while(0);if(!b){r=c;return a|0}if((k[f>>2]|0)!=(b|0))k[f>>2]=b;Sg(b);r=c;return a|0}while(0);if((d|0)==3)a=Wa()|0;b=k[e>>2]|0;if(!b)fb(a|0);if((k[f>>2]|0)!=(b|0))k[f>>2]=b;Sg(b);fb(a|0);return 0}function Lg(a){a=a|0;var b=0,c=0,d=0;d=k[(k[a>>2]|0)+-12>>2]|0;k[a+d>>2]=35800;b=a+(d+56)|0;k[b>>2]=35820;c=a+(d+4)|0;k[c>>2]=35836;wk(a+(d+36)|0);al(c);Vk(b);return}function Mg(a,b,c,d,e,f,g,h,j,l,m){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,s=0,t=0,u=0;p=r;r=r+96|0;o=p;n=pc(a,b,o,0)|0;if(n){e=n;r=p;return e|0}i[o+32>>0]=0;s=k[o+8>>2]|0;u=k[o>>2]|0;t=k[o+4>>2]|0;n=ia(t,u)|0;q=k[o+16>>2]|0;n=ia(ia(n,(s|0)<9?1:2)|0,q)|0;k[d>>2]=n;n=tj(n)|0;k[c>>2]=n;k[e>>2]=u;k[f>>2]=t;k[g>>2]=s;k[h>>2]=k[o+12>>2];k[j>>2]=q;k[l>>2]=k[o+20>>2];k[m>>2]=k[o+24>>2];e=qc(n,k[d>>2]|0,a,b,0,0)|0;r=p;return e|0}function Ng(a,b){a=a|0;b=b|0;var c=0;c=r;r=r+16|0;k[c>>2]=b;b=k[9203]|0;Si(b,a,c)|0;Ki(10,b)|0;Pa()}function Og(a){a=a|0;Ta(49793,49822,1164,49898)}function Pg(a){a=a|0;Ta(49919,49942,303,49898)}function Qg(){var a=0,b=0;a=r;r=r+16|0;if(!(mb(36556,4)|0)){b=ib(k[9138]|0)|0;r=a;return b|0}else Ng(50018,a);return 0}function Rg(a){a=a|0;var b=0;b=(a|0)==0?1:a;a=tj(b)|0;a:do if(!a){while(1){a=_g()|0;if(!a)break;$b[a&7]();a=tj(b)|0;if(a)break a}b=Va(4)|0;k[b>>2]=36376;ub(b|0,416,56)}while(0);return a|0}function Sg(a){a=a|0;uj(a);return}function Tg(a){a=a|0;Sg(a);return}function Ug(a){a=a|0;k[a>>2]=36376;return}function Vg(a){a=a|0;return}function Wg(a){a=a|0;Sg(a);return}function Xg(a){a=a|0;return 50067}function Yg(a){a=a|0;var b=0;b=r;r=r+16|0;x=0;Ga(a|0);a=x;x=0;if(!(a&1)){x=0;ra(64,50082,b|0);x=0}a=Wa(0)|0;cb(a|0)|0;x=0;ra(64,50122,b+8|0);x=0;a=Wa(0)|0;x=0;Ga(3);b=x;x=0;if(b&1){b=Wa(0)|0;mc(b)}else mc(a)}function Zg(){var a=0,b=0,c=0;x=0;a=Da(2)|0;c=x;x=0;if(c&1){c=Wa(0)|0;mc(c)}if(((a|0)!=0?(b=k[a>>2]|0,(b|0)!=0):0)?(c=b+48|0,(k[c>>2]&-256|0)==1126902528?(k[c+4>>2]|0)==1129074247:0):0)Yg(k[b+12>>2]|0);c=k[9091]|0;k[9091]=c+0;Yg(c)}function _g(){var a=0;a=k[9097]|0;k[9097]=a+0;return a|0}function $g(a){a=a|0;return}function ah(a){a=a|0;k[a>>2]=36400;Jh(a+4|0);return}function bh(a){a=a|0;ah(a);Sg(a);return}function ch(a){a=a|0;return k[a+4>>2]|0}function dh(a){a=a|0;return}function eh(a){a=a|0;k[a>>2]=36420;return}function fh(a){a=a|0;return}function gh(a){a=a|0;Sg(a);return}function hh(a){a=a|0;return 50172}function ih(a){a=a|0;return}function jh(a){a=a|0;return}function kh(a){a=a|0;return}function lh(a){a=a|0;Sg(a);return}function mh(a){a=a|0;Sg(a);return}function nh(a){a=a|0;Sg(a);return}function oh(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;g=r;r=r+64|0;f=g;if((a|0)!=(b|0))if((b|0)!=0?(e=uh(b,480,496,0)|0,(e|0)!=0):0){b=f;d=b+56|0;do{k[b>>2]=0;b=b+4|0}while((b|0)<(d|0));k[f>>2]=e;k[f+8>>2]=a;k[f+12>>2]=-1;k[f+48>>2]=1;cc[k[(k[e>>2]|0)+28>>2]&63](e,f,k[c>>2]|0,1);if((k[f+24>>2]|0)==1){k[c>>2]=k[f+16>>2];b=1}else b=0}else b=0;else b=1;r=g;return b|0}function ph(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;a=b+16|0;e=k[a>>2]|0;do if(e){if((e|0)!=(c|0)){d=b+36|0;k[d>>2]=(k[d>>2]|0)+1;k[b+24>>2]=2;i[b+54>>0]=1;break}a=b+24|0;if((k[a>>2]|0)==2)k[a>>2]=d}else{k[a>>2]=c;k[b+24>>2]=d;k[b+36>>2]=1}while(0);return}function qh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if((a|0)==(k[b+8>>2]|0))ph(0,b,c,d);return}function rh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if((a|0)==(k[b+8>>2]|0))ph(0,b,c,d);else{a=k[a+8>>2]|0;cc[k[(k[a>>2]|0)+28>>2]&63](a,b,c,d)}return}function sh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;f=k[a+4>>2]|0;e=f>>8;if(f&1)e=k[(k[c>>2]|0)+e>>2]|0;a=k[a>>2]|0;cc[k[(k[a>>2]|0)+28>>2]&63](a,b,c+e|0,(f&2|0)!=0?d:2);return}function th(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;a:do if((a|0)!=(k[b+8>>2]|0)){f=k[a+12>>2]|0;e=a+16+(f<<3)|0;sh(a+16|0,b,c,d);if((f|0)>1){f=b+54|0;a=a+24|0;do{sh(a,b,c,d);if(i[f>>0]|0)break a;a=a+8|0}while(a>>>0<e>>>0)}}else ph(0,b,c,d);while(0);return}function uh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0;q=r;r=r+64|0;p=q;o=k[a>>2]|0;n=a+(k[o+-8>>2]|0)|0;o=k[o+-4>>2]|0;k[p>>2]=c;k[p+4>>2]=a;k[p+8>>2]=b;k[p+12>>2]=d;d=p+16|0;a=p+20|0;b=p+24|0;e=p+28|0;f=p+32|0;g=p+40|0;h=(o|0)==(c|0);l=d;m=l+36|0;do{k[l>>2]=0;l=l+4|0}while((l|0)<(m|0));j[d+36>>1]=0;i[d+38>>0]=0;a:do if(h){k[p+48>>2]=1;Sb[k[(k[c>>2]|0)+20>>2]&15](c,p,n,n,1,0);d=(k[b>>2]|0)==1?n:0}else{Jb[k[(k[o>>2]|0)+24>>2]&15](o,p,n,1,0);switch(k[p+36>>2]|0){case 0:{d=(k[g>>2]|0)==1&(k[e>>2]|0)==1&(k[f>>2]|0)==1?k[a>>2]|0:0;break a}case 1:break;default:{d=0;break a}}if((k[b>>2]|0)!=1?!((k[g>>2]|0)==0&(k[e>>2]|0)==1&(k[f>>2]|0)==1):0){d=0;break}d=k[d>>2]|0}while(0);r=q;return d|0}function vh(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;i[b+53>>0]=1;do if((k[b+4>>2]|0)==(d|0)){i[b+52>>0]=1;d=b+16|0;a=k[d>>2]|0;if(!a){k[d>>2]=c;k[b+24>>2]=e;k[b+36>>2]=1;if(!((e|0)==1?(k[b+48>>2]|0)==1:0))break;i[b+54>>0]=1;break}if((a|0)!=(c|0)){e=b+36|0;k[e>>2]=(k[e>>2]|0)+1;i[b+54>>0]=1;break}a=b+24|0;d=k[a>>2]|0;if((d|0)==2){k[a>>2]=e;d=e}if((d|0)==1?(k[b+48>>2]|0)==1:0)i[b+54>>0]=1}while(0);return}function wh(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;a:do if((a|0)==(k[b+8>>2]|0)){if((k[b+4>>2]|0)==(c|0)?(f=b+28|0,(k[f>>2]|0)!=1):0)k[f>>2]=d}else{if((a|0)!=(k[b>>2]|0)){q=k[a+12>>2]|0;h=a+16+(q<<3)|0;yh(a+16|0,b,c,d,e);f=a+24|0;if((q|0)<=1)break;g=k[a+8>>2]|0;if((g&2|0)==0?(j=b+36|0,(k[j>>2]|0)!=1):0){if(!(g&1)){g=b+54|0;while(1){if(i[g>>0]|0)break a;if((k[j>>2]|0)==1)break a;yh(f,b,c,d,e);f=f+8|0;if(f>>>0>=h>>>0)break a}}g=b+24|0;a=b+54|0;while(1){if(i[a>>0]|0)break a;if((k[j>>2]|0)==1?(k[g>>2]|0)==1:0)break a;yh(f,b,c,d,e);f=f+8|0;if(f>>>0>=h>>>0)break a}}g=b+54|0;while(1){if(i[g>>0]|0)break a;yh(f,b,c,d,e);f=f+8|0;if(f>>>0>=h>>>0)break a}}if((k[b+16>>2]|0)!=(c|0)?(p=b+20|0,(k[p>>2]|0)!=(c|0)):0){k[b+32>>2]=d;m=b+44|0;if((k[m>>2]|0)==4)break;g=k[a+12>>2]|0;h=a+16+(g<<3)|0;j=b+52|0;d=b+53|0;n=b+54|0;l=a+8|0;o=b+24|0;b:do if((g|0)>0){g=0;f=0;a=a+16|0;while(1){i[j>>0]=0;i[d>>0]=0;xh(a,b,c,c,1,e);if(i[n>>0]|0){q=20;break b}do if(i[d>>0]|0){if(!(i[j>>0]|0))if(!(k[l>>2]&1)){f=1;q=20;break b}else{f=1;break}if((k[o>>2]|0)==1)break b;if(!(k[l>>2]&2))break b;else{g=1;f=1}}while(0);a=a+8|0;if(a>>>0>=h>>>0){q=20;break}}}else{g=0;f=0;q=20}while(0);do if((q|0)==20){if((!g?(k[p>>2]=c,c=b+40|0,k[c>>2]=(k[c>>2]|0)+1,(k[b+36>>2]|0)==1):0)?(k[o>>2]|0)==2:0){i[n>>0]=1;if(f)break}else q=24;if((q|0)==24?f:0)break;k[m>>2]=4;break a}while(0);k[m>>2]=3;break}if((d|0)==1)k[b+32>>2]=1}while(0);return}function xh(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=k[a+4>>2]|0;g=h>>8;if(h&1)g=k[(k[d>>2]|0)+g>>2]|0;a=k[a>>2]|0;Sb[k[(k[a>>2]|0)+20>>2]&15](a,b,c,d+g|0,(h&2|0)!=0?e:2,f);return}function yh(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=k[a+4>>2]|0;f=g>>8;if(g&1)f=k[(k[c>>2]|0)+f>>2]|0;a=k[a>>2]|0;Jb[k[(k[a>>2]|0)+24>>2]&15](a,b,c+f|0,(g&2|0)!=0?d:2,e);return}function zh(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;a:do if((a|0)==(k[b+8>>2]|0)){if((k[b+4>>2]|0)==(c|0)?(f=b+28|0,(k[f>>2]|0)!=1):0)k[f>>2]=d}else{if((a|0)!=(k[b>>2]|0)){h=k[a+8>>2]|0;Jb[k[(k[h>>2]|0)+24>>2]&15](h,b,c,d,e);break}if((k[b+16>>2]|0)!=(c|0)?(g=b+20|0,(k[g>>2]|0)!=(c|0)):0){k[b+32>>2]=d;d=b+44|0;if((k[d>>2]|0)==4)break;f=b+52|0;i[f>>0]=0;j=b+53|0;i[j>>0]=0;a=k[a+8>>2]|0;Sb[k[(k[a>>2]|0)+20>>2]&15](a,b,c,c,1,e);if(i[j>>0]|0){if(!(i[f>>0]|0)){f=1;h=13}}else{f=0;h=13}do if((h|0)==13){k[g>>2]=c;j=b+40|0;k[j>>2]=(k[j>>2]|0)+1;if((k[b+36>>2]|0)==1?(k[b+24>>2]|0)==2:0){i[b+54>>0]=1;if(f)break}else h=16;if((h|0)==16?f:0)break;k[d>>2]=4;break a}while(0);k[d>>2]=3;break}if((d|0)==1)k[b+32>>2]=1}while(0);return}function Ah(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;do if((a|0)==(k[b+8>>2]|0)){if((k[b+4>>2]|0)==(c|0)?(g=b+28|0,(k[g>>2]|0)!=1):0)k[g>>2]=d}else if((a|0)==(k[b>>2]|0)){if((k[b+16>>2]|0)!=(c|0)?(f=b+20|0,(k[f>>2]|0)!=(c|0)):0){k[b+32>>2]=d;k[f>>2]=c;e=b+40|0;k[e>>2]=(k[e>>2]|0)+1;if((k[b+36>>2]|0)==1?(k[b+24>>2]|0)==2:0)i[b+54>>0]=1;k[b+44>>2]=4;break}if((d|0)==1)k[b+32>>2]=1}while(0);return}function Bh(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0;if((a|0)==(k[b+8>>2]|0))vh(0,b,c,d,e);else{m=b+52|0;n=i[m>>0]|0;o=b+53|0;p=i[o>>0]|0;l=k[a+12>>2]|0;g=a+16+(l<<3)|0;i[m>>0]=0;i[o>>0]=0;xh(a+16|0,b,c,d,e,f);a:do if((l|0)>1){h=b+24|0;j=a+8|0;l=b+54|0;a=a+24|0;do{if(i[l>>0]|0)break a;if(!(i[m>>0]|0)){if((i[o>>0]|0)!=0?(k[j>>2]&1|0)==0:0)break a}else{if((k[h>>2]|0)==1)break a;if(!(k[j>>2]&2))break a}i[m>>0]=0;i[o>>0]=0;xh(a,b,c,d,e,f);a=a+8|0}while(a>>>0<g>>>0)}while(0);i[m>>0]=n;i[o>>0]=p}return}function Ch(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if((a|0)==(k[b+8>>2]|0))vh(0,b,c,d,e);else{a=k[a+8>>2]|0;Sb[k[(k[a>>2]|0)+20>>2]&15](a,b,c,d,e,f)}return}function Dh(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if((a|0)==(k[b+8>>2]|0))vh(0,b,c,d,e);return}function Eh(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=r;r=r+16|0;d=e;k[d>>2]=k[c>>2];a=Qb[k[(k[a>>2]|0)+16>>2]&63](a,b,d)|0;if(a)k[c>>2]=k[d>>2];r=e;return a&1|0}function Fh(a){a=a|0;if(!a)a=0;else a=(uh(a,480,528,0)|0)!=0;return a&1|0}function Gh(){var a=0;a=Va(4)|0;Ug(a);ub(a|0,416,56)}function Hh(){var a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0;e=r;r=r+48|0;g=e+32|0;c=e+24|0;h=e+16|0;f=e;e=e+36|0;a=Qg()|0;if((a|0)!=0?(d=k[a>>2]|0,(d|0)!=0):0){a=d+48|0;b=k[a>>2]|0;a=k[a+4>>2]|0;if(!((b&-256|0)==1126902528&(a|0)==1129074247)){k[c>>2]=k[9140];Ng(50375,c)}if((b|0)==1126902529&(a|0)==1129074247)a=k[d+44>>2]|0;else a=d+80|0;k[e>>2]=a;d=k[d>>2]|0;a=k[d+4>>2]|0;if(Qb[k[(k[432>>2]|0)+16>>2]&63](432,d,e)|0){h=k[e>>2]|0;e=k[9140]|0;h=Ob[k[(k[h>>2]|0)+8>>2]&127](h)|0;k[f>>2]=e;k[f+4>>2]=a;k[f+8>>2]=h;Ng(50289,f)}else{k[h>>2]=k[9140];k[h+4>>2]=a;Ng(50334,h)}}Ng(50413,g)}function Ih(){var a=0;a=r;r=r+16|0;if(!(Oa(36552,160)|0)){r=a;return}else Ng(50186,a)}function Jh(a){a=a|0;var b=0,c=0;c=(k[a>>2]|0)+-4|0;b=k[c>>2]|0;k[c>>2]=b+-1;if((b+-1|0)<0)Sg((k[a>>2]|0)+-12|0);return}function Kh(a){a=a|0;var b=0;b=r;r=r+16|0;uj(a);if(!(sb(k[9138]|0,0)|0)){r=b;return}else Ng(50236,b)}function Lh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=Xi(a,b,c)|0;return a|0}function Mh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=Yi(a,b,c)|0;return a|0}function Nh(){return 36828}function Oh(){return 36832}function Ph(){return 36836}function Qh(a){a=a|0;return ((a|0)==32|(a+-9|0)>>>0<5)&1|0}function Rh(a){a=a|0;if((a+-48|0)>>>0<10)a=1;else a=((a|32)+-97|0)>>>0<6;return a&1|0}function Sh(){var a=0;if(!(k[9141]|0))a=36840;else{a=(kb()|0)+60|0;a=k[a>>2]|0}return a|0}function Th(a){a=a|0;var b=0,c=0;b=0;while(1){if((l[50434+b>>0]|0)==(a|0)){c=2;break}b=b+1|0;if((b|0)==87){b=87;a=50522;c=5;break}}if((c|0)==2)if(!b)a=50522;else{a=50522;c=5}if((c|0)==5)while(1){c=a;while(1){a=c+1|0;if(!(i[c>>0]|0))break;else c=a}b=b+-1|0;if(!b)break;else c=5}return a|0}function Uh(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0,f=0.0,g=0,h=0,j=0.0,m=0,n=0,o=0,p=0.0,q=0.0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0.0;K=r;r=r+512|0;G=K;switch(b|0){case 0:{J=24;I=-149;y=4;break}case 1:{J=53;I=-1074;y=4;break}case 2:{J=53;I=-1074;y=4;break}default:d=0.0}a:do if((y|0)==4){D=a+4|0;A=a+100|0;do{b=k[D>>2]|0;if(b>>>0<(k[A>>2]|0)>>>0){k[D>>2]=b+1;b=l[b>>0]|0}else b=Xh(a)|0}while((Qh(b)|0)!=0);b:do switch(b|0){case 43:case 45:{e=1-(((b|0)==45&1)<<1)|0;b=k[D>>2]|0;if(b>>>0<(k[A>>2]|0)>>>0){k[D>>2]=b+1;b=l[b>>0]|0;H=e;break b}else{b=Xh(a)|0;H=e;break b}}default:H=1}while(0);e=b;b=0;do{if((e|32|0)!=(i[52326+b>>0]|0))break;do if(b>>>0<7){e=k[D>>2]|0;if(e>>>0<(k[A>>2]|0)>>>0){k[D>>2]=e+1;e=l[e>>0]|0;break}else{e=Xh(a)|0;break}}while(0);b=b+1|0}while(b>>>0<8);c:do switch(b|0){case 8:break;case 3:{y=23;break}default:{g=(c|0)!=0;if(g&b>>>0>3)if((b|0)==8)break c;else{y=23;break c}d:do if(!b){b=0;do{if((e|32|0)!=(i[55203+b>>0]|0))break d;do if(b>>>0<2){e=k[D>>2]|0;if(e>>>0<(k[A>>2]|0)>>>0){k[D>>2]=e+1;e=l[e>>0]|0;break}else{e=Xh(a)|0;break}}while(0);b=b+1|0}while(b>>>0<3)}while(0);switch(b|0){case 3:{b=k[D>>2]|0;if(b>>>0<(k[A>>2]|0)>>>0){k[D>>2]=b+1;b=l[b>>0]|0}else b=Xh(a)|0;if((b|0)==40)b=1;else{if(!(k[A>>2]|0)){d=B;break a}k[D>>2]=(k[D>>2]|0)+-1;d=B;break a}while(1){e=k[D>>2]|0;if(e>>>0<(k[A>>2]|0)>>>0){k[D>>2]=e+1;e=l[e>>0]|0}else e=Xh(a)|0;if(!((e+-48|0)>>>0<10|(e+-65|0)>>>0<26)?!((e|0)==95|(e+-97|0)>>>0<26):0)break;b=b+1|0}if((e|0)==41){d=B;break a}e=(k[A>>2]|0)==0;if(!e)k[D>>2]=(k[D>>2]|0)+-1;if(!g){J=Sh()|0;k[J>>2]=22;Wh(a,0);d=0.0;break a}if(!b){d=B;break a}while(1){b=b+-1|0;if(!e)k[D>>2]=(k[D>>2]|0)+-1;if(!b){d=B;break a}}}case 0:{do if((e|0)==48){b=k[D>>2]|0;if(b>>>0<(k[A>>2]|0)>>>0){k[D>>2]=b+1;b=l[b>>0]|0}else b=Xh(a)|0;if((b|32|0)!=120){if(!(k[A>>2]|0)){b=48;break}k[D>>2]=(k[D>>2]|0)+-1;b=48;break}b=k[D>>2]|0;if(b>>>0<(k[A>>2]|0)>>>0){k[D>>2]=b+1;b=l[b>>0]|0;g=0}else{b=Xh(a)|0;g=0}e:while(1){switch(b|0){case 46:{y=74;break e}case 48:break;default:{w=0;h=0;v=0;e=0;m=g;n=0;u=0;j=1.0;g=0;d=0.0;break e}}b=k[D>>2]|0;if(b>>>0<(k[A>>2]|0)>>>0){k[D>>2]=b+1;b=l[b>>0]|0;g=1;continue}else{b=Xh(a)|0;g=1;continue}}if((y|0)==74){b=k[D>>2]|0;if(b>>>0<(k[A>>2]|0)>>>0){k[D>>2]=b+1;b=l[b>>0]|0}else b=Xh(a)|0;if((b|0)==48){g=0;e=0;do{b=k[D>>2]|0;if(b>>>0<(k[A>>2]|0)>>>0){k[D>>2]=b+1;b=l[b>>0]|0}else b=Xh(a)|0;g=Zt(g|0,e|0,-1,-1)|0;e=M}while((b|0)==48);w=0;h=0;v=g;m=1;n=1;u=0;j=1.0;g=0;d=0.0}else{w=0;h=0;v=0;e=0;m=g;n=1;u=0;j=1.0;g=0;d=0.0}}while(1){s=b+-48|0;o=b|32;if(s>>>0>=10){t=(b|0)==46;if(!(t|(o+-97|0)>>>0<6)){o=v;s=w;break}if(t)if(!n){t=h;e=w;s=w;n=1;o=u;f=j}else{o=v;s=w;b=46;break}else y=86}else y=86;if((y|0)==86){y=0;b=(b|0)>57?o+-87|0:s;do if(!((w|0)<0|(w|0)==0&h>>>0<8)){if((w|0)<0|(w|0)==0&h>>>0<14){q=j*.0625;o=u;f=q;d=d+q*+(b|0);break}if((u|0)!=0|(b|0)==0){o=u;f=j}else{o=1;f=j;d=d+j*.5}}else{o=u;f=j;g=b+(g<<4)|0}while(0);h=Zt(h|0,w|0,1,0)|0;t=v;s=M;m=1}b=k[D>>2]|0;if(b>>>0<(k[A>>2]|0)>>>0){k[D>>2]=b+1;w=s;v=t;b=l[b>>0]|0;u=o;j=f;continue}else{w=s;v=t;b=Xh(a)|0;u=o;j=f;continue}}if(!m){b=(k[A>>2]|0)==0;if(!b)k[D>>2]=(k[D>>2]|0)+-1;if(c){if(!b?(x=k[D>>2]|0,k[D>>2]=x+-1,(n|0)!=0):0)k[D>>2]=x+-2}else Wh(a,0);d=+(H|0)*0.0;break a}m=(n|0)==0;n=m?h:o;m=m?s:e;if((s|0)<0|(s|0)==0&h>>>0<8){e=s;do{g=g<<4;h=Zt(h|0,e|0,1,0)|0;e=M}while((e|0)<0|(e|0)==0&h>>>0<8)}if((b|32|0)==112){e=hj(a,c)|0;b=M;if((e|0)==0&(b|0)==-2147483648){if(!c){Wh(a,0);d=0.0;break a}if(!(k[A>>2]|0)){e=0;b=0}else{k[D>>2]=(k[D>>2]|0)+-1;e=0;b=0}}}else if(!(k[A>>2]|0)){e=0;b=0}else{k[D>>2]=(k[D>>2]|0)+-1;e=0;b=0}G=au(n|0,m|0,2)|0;G=Zt(G|0,M|0,-32,-1)|0;b=Zt(G|0,M|0,e|0,b|0)|0;e=M;if(!g){d=+(H|0)*0.0;break a}if((e|0)>0|(e|0)==0&b>>>0>(0-I|0)>>>0){J=Sh()|0;k[J>>2]=34;d=+(H|0)*1797693134862315708145274.0e284*1797693134862315708145274.0e284;break a}G=I+-106|0;F=((G|0)<0)<<31>>31;if((e|0)<(F|0)|(e|0)==(F|0)&b>>>0<G>>>0){J=Sh()|0;k[J>>2]=34;d=+(H|0)*2.2250738585072014e-308*2.2250738585072014e-308;break a}if((g|0)>-1){do{F=!(d>=.5);G=F&1|g<<1;g=G^1;d=d+(F?d:d+-1.0);b=Zt(b|0,e|0,-1,-1)|0;e=M}while((G|0)>-1);h=b;j=d}else{h=b;j=d}b=Xt(32,0,I|0,((I|0)<0)<<31>>31|0)|0;b=Zt(h|0,e|0,b|0,M|0)|0;I=M;if(0>(I|0)|0==(I|0)&J>>>0>b>>>0)if((b|0)<0){b=0;y=127}else y=125;else{b=J;y=125}if((y|0)==125)if((b|0)<53)y=127;else{e=b;f=+(H|0);d=0.0}if((y|0)==127){d=+(H|0);e=b;f=d;d=+gi(+li(1.0,84-b|0),d)}J=(g&1|0)==0&(j!=0.0&(e|0)<32);d=f*(J?0.0:j)+(d+f*+(((J&1)+g|0)>>>0))-d;if(!(d!=0.0)){J=Sh()|0;k[J>>2]=34}d=+mi(d,h);break a}else b=e;while(0);E=I+J|0;F=0-E|0;g=0;f:while(1){switch(b|0){case 46:{y=138;break f}case 48:break;default:{e=0;o=0;n=0;break f}}b=k[D>>2]|0;if(b>>>0<(k[A>>2]|0)>>>0){k[D>>2]=b+1;b=l[b>>0]|0;g=1;continue}else{b=Xh(a)|0;g=1;continue}}if((y|0)==138){b=k[D>>2]|0;if(b>>>0<(k[A>>2]|0)>>>0){k[D>>2]=b+1;b=l[b>>0]|0}else b=Xh(a)|0;if((b|0)==48){e=0;b=0;while(1){e=Zt(e|0,b|0,-1,-1)|0;g=M;b=k[D>>2]|0;if(b>>>0<(k[A>>2]|0)>>>0){k[D>>2]=b+1;b=l[b>>0]|0}else b=Xh(a)|0;if((b|0)==48)b=g;else{o=g;g=1;n=1;break}}}else{e=0;o=0;n=1}}k[G>>2]=0;m=b+-48|0;h=(b|0)==46;g:do if(h|m>>>0<10){z=G+496|0;w=0;t=0;u=h;y=o;s=g;x=n;g=0;h=0;n=0;h:while(1){do if(u)if(!x){e=w;o=t;x=1}else{o=y;b=w;m=t;break h}else{u=Zt(w|0,t|0,1,0)|0;t=M;v=(b|0)!=48;if((h|0)>=125){if(!v){o=y;w=u;break}k[z>>2]=k[z>>2]|1;o=y;w=u;break}o=G+(h<<2)|0;if(g)m=b+-48+((k[o>>2]|0)*10|0)|0;k[o>>2]=m;g=g+1|0;m=(g|0)==9;o=y;w=u;s=1;g=m?0:g;h=(m&1)+h|0;n=v?u:n}while(0);b=k[D>>2]|0;if(b>>>0<(k[A>>2]|0)>>>0){k[D>>2]=b+1;b=l[b>>0]|0}else b=Xh(a)|0;m=b+-48|0;u=(b|0)==46;if(!(u|m>>>0<10)){m=x;y=161;break g}else y=o}s=(s|0)!=0;y=169}else{w=0;t=0;s=g;m=n;g=0;h=0;n=0;y=161}while(0);do if((y|0)==161){z=(m|0)==0;e=z?w:e;o=z?t:o;s=(s|0)!=0;if(!((b|32|0)==101&s))if((b|0)>-1){b=w;m=t;y=169;break}else{b=w;m=t;y=171;break}m=hj(a,c)|0;b=M;if((m|0)==0&(b|0)==-2147483648){if(!c){Wh(a,0);d=0.0;break}if(!(k[A>>2]|0)){m=0;b=0}else{k[D>>2]=(k[D>>2]|0)+-1;m=0;b=0}}e=Zt(m|0,b|0,e|0,o|0)|0;s=w;o=M;m=t;y=173}while(0);if((y|0)==169)if(k[A>>2]|0){k[D>>2]=(k[D>>2]|0)+-1;if(s){s=b;y=173}else y=172}else y=171;if((y|0)==171)if(s){s=b;y=173}else y=172;do if((y|0)==172){J=Sh()|0;k[J>>2]=22;Wh(a,0);d=0.0}else if((y|0)==173){b=k[G>>2]|0;if(!b){d=+(H|0)*0.0;break}if(((m|0)<0|(m|0)==0&s>>>0<10)&((e|0)==(s|0)&(o|0)==(m|0))?J>>>0>30|(b>>>J|0)==0:0){d=+(H|0)*+(b>>>0);break}a=(I|0)/-2|0;D=((a|0)<0)<<31>>31;if((o|0)>(D|0)|(o|0)==(D|0)&e>>>0>a>>>0){J=Sh()|0;k[J>>2]=34;d=+(H|0)*1797693134862315708145274.0e284*1797693134862315708145274.0e284;break}a=I+-106|0;D=((a|0)<0)<<31>>31;if((o|0)<(D|0)|(o|0)==(D|0)&e>>>0<a>>>0){J=Sh()|0;k[J>>2]=34;d=+(H|0)*2.2250738585072014e-308*2.2250738585072014e-308;break}if(g){if((g|0)<9){m=G+(h<<2)|0;b=k[m>>2]|0;do{b=b*10|0;g=g+1|0}while((g|0)!=9);k[m>>2]=b}h=h+1|0}if((n|0)<9?(n|0)<=(e|0)&(e|0)<18:0){if((e|0)==9){d=+(H|0)*+((k[G>>2]|0)>>>0);break}if((e|0)<9){d=+(H|0)*+((k[G>>2]|0)>>>0)/+(k[36844+(8-e<<2)>>2]|0);break}a=J+27+(ia(e,-3)|0)|0;b=k[G>>2]|0;if((a|0)>30|(b>>>a|0)==0){d=+(H|0)*+(b>>>0)*+(k[36844+(e+-10<<2)>>2]|0);break}}b=(e|0)%9|0;if(!b){g=0;b=0}else{s=(e|0)>-1?b:b+9|0;m=k[36844+(8-s<<2)>>2]|0;if(h){n=1e9/(m|0)|0;g=0;b=0;o=0;do{A=G+(o<<2)|0;D=k[A>>2]|0;a=((D>>>0)/(m>>>0)|0)+b|0;k[A>>2]=a;b=ia((D>>>0)%(m>>>0)|0,n)|0;a=(o|0)==(g|0)&(a|0)==0;o=o+1|0;e=a?e+-9|0:e;g=a?o&127:g}while((o|0)!=(h|0));if(b){k[G+(h<<2)>>2]=b;h=h+1|0}}else{g=0;h=0}b=0;e=9-s+e|0}i:while(1){t=(e|0)<18;u=(e|0)==18;v=G+(g<<2)|0;do{if(!t){if(!u)break i;if((k[v>>2]|0)>>>0>=9007199){e=18;break i}}m=0;n=h+127|0;while(1){s=n&127;o=G+(s<<2)|0;n=au(k[o>>2]|0,0,29)|0;n=Zt(n|0,M|0,m|0,0)|0;m=M;if(m>>>0>0|(m|0)==0&n>>>0>1e9){a=iu(n|0,m|0,1e9,0)|0;n=ju(n|0,m|0,1e9,0)|0;m=a}else m=0;k[o>>2]=n;a=(s|0)==(g|0);h=(s|0)!=(h+127&127|0)|a?h:(n|0)==0?s:h;if(a)break;else n=s+-1|0}b=b+-29|0}while((m|0)==0);g=g+127&127;if((g|0)==(h|0)){a=h+127&127;h=G+((h+126&127)<<2)|0;k[h>>2]=k[h>>2]|k[G+(a<<2)>>2];h=a}k[G+(g<<2)>>2]=m;e=e+9|0}j:while(1){w=h+1&127;v=G+((h+127&127)<<2)|0;while(1){t=(e|0)==18;u=(e|0)>27?9:1;s=t^1;while(1){n=g&127;o=(n|0)==(h|0);do if(!o){m=k[G+(n<<2)>>2]|0;if(m>>>0<9007199){y=219;break}if(m>>>0>9007199)break;m=g+1&127;if((m|0)==(h|0)){y=219;break}m=k[G+(m<<2)>>2]|0;if(m>>>0<254740991){y=219;break}if(!(m>>>0>254740991|s)){e=n;break j}}else y=219;while(0);if((y|0)==219?(y=0,t):0){y=220;break j}b=b+u|0;if((g|0)==(h|0))g=h;else break}s=(1<<u)+-1|0;t=1e9>>>u;n=g;m=0;o=g;while(1){D=G+(o<<2)|0;a=k[D>>2]|0;g=(a>>>u)+m|0;k[D>>2]=g;m=ia(a&s,t)|0;g=(o|0)==(n|0)&(g|0)==0;o=o+1&127;e=g?e+-9|0:e;g=g?o:n;if((o|0)==(h|0))break;else n=g}if(!m)continue;if((w|0)!=(g|0))break;k[v>>2]=k[v>>2]|1}k[G+(h<<2)>>2]=m;h=w}if((y|0)==220)if(o){k[G+(w+-1<<2)>>2]=0;e=h;h=w}else e=n;d=+((k[G+(e<<2)>>2]|0)>>>0);e=g+1&127;if((e|0)==(h|0)){h=g+2&127;k[G+(h+-1<<2)>>2]=0}q=+(H|0);f=q*(d*1.0e9+ +((k[G+(e<<2)>>2]|0)>>>0));t=b+53|0;o=t-I|0;s=(o|0)<(J|0);e=s&1;n=s?((o|0)<0?0:o):J;if((n|0)<53){L=+gi(+li(1.0,105-n|0),f);j=+ii(f,+li(1.0,53-n|0));p=L;d=j;j=L+(f-j)}else{p=0.0;d=0.0;j=f}m=g+2&127;do if((m|0)==(h|0))f=d;else{m=k[G+(m<<2)>>2]|0;do if(m>>>0>=5e8){if(m>>>0>5e8){d=q*.75+d;break}if((g+3&127|0)==(h|0)){d=q*.5+d;break}else{d=q*.75+d;break}}else{if((m|0)==0?(g+3&127|0)==(h|0):0)break;d=q*.25+d}while(0);if((53-n|0)<=1){f=d;break}if(+ii(d,1.0)!=0.0){f=d;break}f=d+1.0}while(0);d=j+f-p;do if((t&2147483647|0)>(-2-E|0)){if(+X(+d)>=9007199254740992.0){e=s&(n|0)==(o|0)?0:e;b=b+1|0;d=d*.5}if((b+50|0)<=(F|0)?!(f!=0.0&(e|0)!=0):0)break;J=Sh()|0;k[J>>2]=34}while(0);d=+mi(d,b)}while(0);break a}default:{if(k[A>>2]|0)k[D>>2]=(k[D>>2]|0)+-1;J=Sh()|0;k[J>>2]=22;Wh(a,0);d=0.0;break a}}}}while(0);if((y|0)==23){e=(k[A>>2]|0)==0;if(!e)k[D>>2]=(k[D>>2]|0)+-1;if((c|0)!=0&b>>>0>3)do{if(!e)k[D>>2]=(k[D>>2]|0)+-1;b=b+-1|0}while(b>>>0>3)}d=+(H|0)*C}while(0);r=K;return +d}function Vh(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,r=0;a:do if(b>>>0>36){e=Sh()|0;k[e>>2]=22;e=0;d=0}else{r=a+4|0;q=a+100|0;do{f=k[r>>2]|0;if(f>>>0<(k[q>>2]|0)>>>0){k[r>>2]=f+1;f=l[f>>0]|0}else f=Xh(a)|0}while((Qh(f)|0)!=0);b:do switch(f|0){case 43:case 45:{g=((f|0)==45)<<31>>31;f=k[r>>2]|0;if(f>>>0<(k[q>>2]|0)>>>0){k[r>>2]=f+1;f=l[f>>0]|0;p=g;break b}else{f=Xh(a)|0;p=g;break b}}default:p=0}while(0);g=(b|0)==0;do if((b&-17|0)==0&(f|0)==48){f=k[r>>2]|0;if(f>>>0<(k[q>>2]|0)>>>0){k[r>>2]=f+1;f=l[f>>0]|0}else f=Xh(a)|0;if((f|32|0)!=120)if(g){b=8;n=46;break}else{n=32;break}b=k[r>>2]|0;if(b>>>0<(k[q>>2]|0)>>>0){k[r>>2]=b+1;f=l[b>>0]|0}else f=Xh(a)|0;if((l[52335+(f+1)>>0]|0)>15){d=(k[q>>2]|0)==0;if(!d)k[r>>2]=(k[r>>2]|0)+-1;if(!c){Wh(a,0);e=0;d=0;break a}if(d){e=0;d=0;break a}k[r>>2]=(k[r>>2]|0)+-1;e=0;d=0;break a}else{b=16;n=46}}else{b=g?10:b;if((l[52335+(f+1)>>0]|0)>>>0<b>>>0)n=32;else{if(k[q>>2]|0)k[r>>2]=(k[r>>2]|0)+-1;Wh(a,0);e=Sh()|0;k[e>>2]=22;e=0;d=0;break a}}while(0);if((n|0)==32)if((b|0)==10){b=f+-48|0;if(b>>>0<10){f=0;while(1){g=(f*10|0)+b|0;b=k[r>>2]|0;if(b>>>0<(k[q>>2]|0)>>>0){k[r>>2]=b+1;f=l[b>>0]|0}else f=Xh(a)|0;b=f+-48|0;if(!(b>>>0<10&g>>>0<429496729)){b=g;break}else f=g}g=0}else{b=0;g=0}c=f+-48|0;if(c>>>0<10){while(1){h=hu(b|0,g|0,10,0)|0;j=M;m=((c|0)<0)<<31>>31;o=~m;if(j>>>0>o>>>0|(j|0)==(o|0)&h>>>0>~c>>>0){h=b;break}b=Zt(h|0,j|0,c|0,m|0)|0;g=M;f=k[r>>2]|0;if(f>>>0<(k[q>>2]|0)>>>0){k[r>>2]=f+1;f=l[f>>0]|0}else f=Xh(a)|0;c=f+-48|0;if(!(c>>>0<10&(g>>>0<429496729|(g|0)==429496729&b>>>0<2576980378))){h=b;break}}if(c>>>0>9){f=h;b=p}else{b=10;n=72}}else{f=b;b=p}}else n=46;c:do if((n|0)==46){if(!(b+-1&b)){n=i[52592+((b*23|0)>>>5&7)>>0]|0;g=i[52335+(f+1)>>0]|0;c=g&255;if(c>>>0<b>>>0){f=0;while(1){h=c|f<<n;f=k[r>>2]|0;if(f>>>0<(k[q>>2]|0)>>>0){k[r>>2]=f+1;f=l[f>>0]|0}else f=Xh(a)|0;g=i[52335+(f+1)>>0]|0;c=g&255;if(!(h>>>0<134217728&c>>>0<b>>>0))break;else f=h}c=0}else{c=0;h=0}j=_t(-1,-1,n|0)|0;m=M;if((g&255)>>>0>=b>>>0|(c>>>0>m>>>0|(c|0)==(m|0)&h>>>0>j>>>0)){g=c;n=72;break}else f=c;while(1){h=au(h|0,f|0,n|0)|0;c=M;h=g&255|h;f=k[r>>2]|0;if(f>>>0<(k[q>>2]|0)>>>0){k[r>>2]=f+1;f=l[f>>0]|0}else f=Xh(a)|0;g=i[52335+(f+1)>>0]|0;if((g&255)>>>0>=b>>>0|(c>>>0>m>>>0|(c|0)==(m|0)&h>>>0>j>>>0)){g=c;n=72;break c}else f=c}}g=i[52335+(f+1)>>0]|0;c=g&255;if(c>>>0<b>>>0){f=0;while(1){h=c+(ia(f,b)|0)|0;f=k[r>>2]|0;if(f>>>0<(k[q>>2]|0)>>>0){k[r>>2]=f+1;f=l[f>>0]|0}else f=Xh(a)|0;g=i[52335+(f+1)>>0]|0;c=g&255;if(!(h>>>0<119304647&c>>>0<b>>>0))break;else f=h}c=0}else{h=0;c=0}if((g&255)>>>0<b>>>0){n=iu(-1,-1,b|0,0)|0;o=M;m=c;while(1){if(m>>>0>o>>>0|(m|0)==(o|0)&h>>>0>n>>>0){g=m;n=72;break c}c=hu(h|0,m|0,b|0,0)|0;j=M;g=g&255;if(j>>>0>4294967295|(j|0)==-1&c>>>0>~g>>>0){g=m;n=72;break c}h=Zt(g|0,0,c|0,j|0)|0;c=M;f=k[r>>2]|0;if(f>>>0<(k[q>>2]|0)>>>0){k[r>>2]=f+1;f=l[f>>0]|0}else f=Xh(a)|0;g=i[52335+(f+1)>>0]|0;if((g&255)>>>0>=b>>>0){g=c;n=72;break}else m=c}}else{g=c;n=72}}while(0);if((n|0)==72)if((l[52335+(f+1)>>0]|0)>>>0<b>>>0){do{f=k[r>>2]|0;if(f>>>0<(k[q>>2]|0)>>>0){k[r>>2]=f+1;f=l[f>>0]|0}else f=Xh(a)|0}while((l[52335+(f+1)>>0]|0)>>>0<b>>>0);g=Sh()|0;k[g>>2]=34;g=e;f=d;b=(d&1|0)==0&0==0?p:0}else{f=h;b=p}if(k[q>>2]|0)k[r>>2]=(k[r>>2]|0)+-1;if(!(g>>>0<e>>>0|(g|0)==(e|0)&f>>>0<d>>>0)){if(!((d&1|0)!=0|0!=0|(b|0)!=0)){r=Sh()|0;k[r>>2]=34;d=Zt(d|0,e|0,-1,-1)|0;e=M;break}if(g>>>0>e>>>0|(g|0)==(e|0)&f>>>0>d>>>0){r=Sh()|0;k[r>>2]=34;break}}d=((b|0)<0)<<31>>31;d=Xt(f^b|0,g^d|0,b|0,d|0)|0;e=M}while(0);M=e;return d|0}function Wh(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;k[a+104>>2]=b;c=k[a+4>>2]|0;d=k[a+8>>2]|0;e=d-c|0;k[a+108>>2]=e;if((b|0)!=0&(e|0)>(b|0))k[a+100>>2]=c+b;else k[a+100>>2]=d;return}function Xh(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;c=a+104|0;f=k[c>>2]|0;if((f|0)!=0?(k[a+108>>2]|0)>=(f|0):0)g=4;else{b=Ii(a)|0;if((b|0)>=0){e=k[c>>2]|0;c=a+8|0;if(e){d=k[c>>2]|0;f=k[a+4>>2]|0;c=d;e=e-(k[a+108>>2]|0)+-1|0;if((c-f|0)>(e|0))k[a+100>>2]=f+e;else g=9}else{d=k[c>>2]|0;c=d;g=9}if((g|0)==9)k[a+100>>2]=c;c=k[a+4>>2]|0;if(d){a=a+108|0;k[a>>2]=d+1-c+(k[a>>2]|0)}c=c+-1|0;if((l[c>>0]|0|0)!=(b|0))i[c>>0]=b}else g=4}if((g|0)==4){k[a+100>>2]=0;b=-1}return b|0}function Yh(a){a=a|0;var b=0;if(a>>>0>4294963200){b=Sh()|0;k[b>>2]=0-a;a=-1}return a|0}function Zh(a){a=a|0;return 0}function _h(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return d|0}function $h(a,b){a=a|0;b=b|0;return -1|0}function ai(a){a=a|0;uj(a);return}function bi(a,b){a=a|0;b=b|0;return (a+-48|0)>>>0<10|0}function ci(a,b){a=a|0;b=b|0;return Rh(a)|0}function di(a,b,c){a=a|0;b=b|0;c=c|0;if(((i[b>>0]|0)!=0?($i(b,57341)|0)!=0:0)?($i(b,52601)|0)!=0:0)c=0;else if(!c)c=vj(1,4)|0;return c|0}function ei(a){a=a|0;var b=0,c=0;b=(kb()|0)+176|0;c=k[b>>2]|0;if(a)k[b>>2]=a;return c|0}function fi(a,b){a=+a;b=+b;var c=0,d=0;p[t>>3]=a;d=k[t>>2]|0;c=k[t+4>>2]|0;p[t>>3]=b;c=k[t+4>>2]&-2147483648|c&2147483647;k[t>>2]=d;k[t+4>>2]=c;return +(+p[t>>3])}function gi(a,b){a=+a;b=+b;return +(+fi(a,b))}function hi(a,b){a=+a;b=+b;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;p[t>>3]=a;c=k[t>>2]|0;j=k[t+4>>2]|0;p[t>>3]=b;l=k[t>>2]|0;m=k[t+4>>2]|0;d=_t(c|0,j|0,52)|0;d=d&2047;h=_t(l|0,m|0,52)|0;h=h&2047;n=j&-2147483648;g=au(l|0,m|0,1)|0;i=M;a:do if(!((g|0)==0&(i|0)==0)?(f=m&2147483647,!(f>>>0>2146435072|(f|0)==2146435072&l>>>0>0|(d|0)==2047)):0){e=au(c|0,j|0,1)|0;f=M;if(!(f>>>0>i>>>0|(f|0)==(i|0)&e>>>0>g>>>0))return +((e|0)==(g|0)&(f|0)==(i|0)?a*0.0:a);if(!d){d=au(c|0,j|0,12)|0;e=M;if((e|0)>-1|(e|0)==-1&d>>>0>4294967295){f=d;d=0;do{d=d+-1|0;f=au(f|0,e|0,1)|0;e=M}while((e|0)>-1|(e|0)==-1&f>>>0>4294967295)}else d=0;c=au(c|0,j|0,1-d|0)|0;e=M}else e=j&1048575|1048576;if(!h){f=au(l|0,m|0,12)|0;g=M;if((g|0)>-1|(g|0)==-1&f>>>0>4294967295){h=0;do{h=h+-1|0;f=au(f|0,g|0,1)|0;g=M}while((g|0)>-1|(g|0)==-1&f>>>0>4294967295)}else h=0;l=au(l|0,m|0,1-h|0)|0;j=M}else j=m&1048575|1048576;i=Xt(c|0,e|0,l|0,j|0)|0;g=M;f=(g|0)>-1|(g|0)==-1&i>>>0>4294967295;b:do if((d|0)>(h|0)){while(1){if(f)if((c|0)==(l|0)&(e|0)==(j|0))break;else{c=i;e=g}c=au(c|0,e|0,1)|0;e=M;d=d+-1|0;i=Xt(c|0,e|0,l|0,j|0)|0;g=M;f=(g|0)>-1|(g|0)==-1&i>>>0>4294967295;if((d|0)<=(h|0))break b}b=a*0.0;break a}while(0);if(f)if((c|0)==(l|0)&(e|0)==(j|0)){b=a*0.0;break}else{e=g;c=i}if(e>>>0<1048576|(e|0)==1048576&c>>>0<0)do{c=au(c|0,e|0,1)|0;e=M;d=d+-1|0}while(e>>>0<1048576|(e|0)==1048576&c>>>0<0);if((d|0)>0){m=Zt(c|0,e|0,0,-1048576)|0;c=M;d=au(d|0,0,52)|0;c=c|M;d=m|d}else{d=_t(c|0,e|0,1-d|0)|0;c=M}k[t>>2]=d;k[t+4>>2]=c|n;b=+p[t>>3]}else o=3;while(0);if((o|0)==3){b=a*b;b=b/b}return +b}function ii(a,b){a=+a;b=+b;return +(+hi(a,b))}function ji(a,b){a=+a;b=b|0;var c=0,d=0,e=0;p[t>>3]=a;c=k[t>>2]|0;d=k[t+4>>2]|0;e=_t(c|0,d|0,52)|0;e=e&2047;switch(e|0){case 0:{if(a!=0.0){a=+ji(a*18446744073709551616.0,b);c=(k[b>>2]|0)+-64|0}else c=0;k[b>>2]=c;break}case 2047:break;default:{k[b>>2]=e+-1022;k[t>>2]=c;k[t+4>>2]=d&-2146435073|1071644672;a=+p[t>>3]}}return +a}function ki(a,b){a=+a;b=b|0;return +(+ji(a,b))}function li(a,b){a=+a;b=b|0;var c=0;if((b|0)>1023){a=a*8988465674311579538646525.0e283;c=b+-1023|0;if((c|0)>1023){c=b+-2046|0;c=(c|0)>1023?1023:c;a=a*8988465674311579538646525.0e283}}else if((b|0)<-1022){a=a*2.2250738585072014e-308;c=b+1022|0;if((c|0)<-1022){c=b+2044|0;c=(c|0)<-1022?-1022:c;a=a*2.2250738585072014e-308}}else c=b;c=au(c+1023|0,0,52)|0;b=M;k[t>>2]=c;k[t+4>>2]=b;return +(a*+p[t>>3])}function mi(a,b){a=+a;b=b|0;return +(+li(a,b))}function ni(a,b,c){a=a|0;b=b|0;c=c|0;return oi(0,a,b,(c|0)!=0?c:36876)|0}function oi(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0;j=r;r=r+16|0;e=j;g=(d|0)==0?36880:d;d=k[g>>2]|0;a:do if(!b)if(!d)d=0;else h=15;else{f=(a|0)==0?e:a;if(!c)d=-2;else{if(!d){d=i[b>>0]|0;e=d&255;if(d<<24>>24>-1){k[f>>2]=e;d=d<<24>>24!=0&1;break}d=e+-194|0;if(d>>>0>50){h=15;break}d=k[36608+(d<<2)>>2]|0;e=c+-1|0;if(e){b=b+1|0;h=9}}else{e=c;h=9}b:do if((h|0)==9){a=i[b>>0]|0;l=(a&255)>>>3;if((l+-16|l+(d>>26))>>>0>7){h=15;break a}while(1){b=b+1|0;d=(a&255)+-128|d<<6;e=e+-1|0;if((d|0)>=0)break;if(!e)break b;a=i[b>>0]|0;if((a&-64)<<24>>24!=-128){h=15;break a}}k[g>>2]=0;k[f>>2]=d;d=c-e|0;break a}while(0);k[g>>2]=d;d=-2}}while(0);if((h|0)==15){k[g>>2]=0;d=Sh()|0;k[d>>2]=84;d=-1}r=j;return d|0}function pi(a){a=a|0;if(!a)a=1;else a=(k[a>>2]|0)==0;return a&1|0}function qi(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;n=r;r=r+1040|0;j=n+8|0;m=n;i=k[b>>2]|0;k[m>>2]=i;l=(a|0)!=0;d=l?d:256;a=l?a:j;f=i;a:do if((d|0)!=0&(i|0)!=0){h=d;i=f;d=0;while(1){f=c>>>2;g=f>>>0>=h>>>0;if(!(c>>>0>131|g)){f=i;break a}f=g?h:f;c=c-f|0;f=ri(a,m,f,e)|0;if((f|0)==-1){d=c;break}o=(a|0)==(j|0);i=o?0:f;g=h-i|0;a=o?a:a+(f<<2)|0;d=f+d|0;f=k[m>>2]|0;if((h|0)!=(i|0)&(f|0)!=0){h=g;i=f}else{h=g;break a}}c=d;h=0;f=k[m>>2]|0;d=-1}else{h=d;d=0}while(0);b:do if((f|0)!=0?(h|0)!=0&(c|0)!=0:0){g=f;f=a;while(1){a=oi(f,g,c,e)|0;if((a+2|0)>>>0<3)break;g=(k[m>>2]|0)+a|0;k[m>>2]=g;h=h+-1|0;d=d+1|0;if(!((h|0)!=0&(c|0)!=(a|0)))break b;else{c=c-a|0;f=f+4|0}}switch(a|0){case -1:{d=-1;break b}case 0:{k[m>>2]=0;break b}default:{k[e>>2]=0;break b}}}while(0);if(l)k[b>>2]=k[m>>2];r=n;return d|0}function ri(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,m=0;e=k[b>>2]|0;if((d|0)!=0?(f=k[d>>2]|0,(f|0)!=0):0)if(!a){d=c;g=e;m=16}else{k[d>>2]=0;j=a;d=c;h=f;m=37}else if(!a){d=c;m=7}else{f=a;d=c;m=6}a:while(1)if((m|0)==6){if(!d){m=26;break}else a=f;while(1){f=i[e>>0]|0;do if(((f&255)+-1|0)>>>0<127?d>>>0>4&(e&3|0)==0:0){g=e;while(1){e=k[g>>2]|0;if((e+-16843009|e)&-2139062144){f=e;e=g;m=32;break}k[a>>2]=e&255;k[a+4>>2]=l[g+1>>0];k[a+8>>2]=l[g+2>>0];e=g+4|0;f=a+16|0;k[a+12>>2]=l[g+3>>0];d=d+-4|0;if(d>>>0>4){a=f;g=e}else{m=31;break}}if((m|0)==31){a=f;f=i[e>>0]|0;break}else if((m|0)==32){f=f&255;break}}while(0);f=f&255;if((f+-1|0)>>>0>=127)break;e=e+1|0;k[a>>2]=f;d=d+-1|0;if(!d){m=26;break a}else a=a+4|0}f=f+-194|0;if(f>>>0>50){m=48;break}j=a;h=k[36608+(f<<2)>>2]|0;e=e+1|0;m=37;continue}else if((m|0)==7){f=i[e>>0]|0;if(((f&255)+-1|0)>>>0<127?(e&3|0)==0:0){f=k[e>>2]|0;if(!((f+-16843009|f)&-2139062144))do{e=e+4|0;d=d+-4|0;f=k[e>>2]|0}while(((f+-16843009|f)&-2139062144|0)==0);f=f&255}f=f&255;if((f+-1|0)>>>0<127){d=d+-1|0;e=e+1|0;m=7;continue}f=f+-194|0;if(f>>>0>50){m=48;break}f=k[36608+(f<<2)>>2]|0;g=e+1|0;m=16;continue}else if((m|0)==16){m=(l[g>>0]|0)>>>3;if((m+-16|m+(f>>26))>>>0>7){m=17;break}e=g+1|0;if(f&33554432){if((i[e>>0]&-64)<<24>>24!=-128){m=20;break}e=g+2|0;if(f&524288){if((i[e>>0]&-64)<<24>>24!=-128){m=23;break}e=g+3|0}}d=d+-1|0;m=7;continue}else if((m|0)==37){f=l[e>>0]|0;m=f>>>3;if((m+-16|m+(h>>26))>>>0>7){m=38;break}g=e+1|0;a=f+-128|h<<6;if((a|0)<0){f=l[g>>0]|0;if((f&192|0)!=128){m=41;break}g=e+2|0;a=f+-128|a<<6;if((a|0)<0){f=l[g>>0]|0;if((f&192|0)!=128){m=44;break}a=f+-128|a<<6;e=e+3|0}else e=g}else e=g;k[j>>2]=a;f=j+4|0;d=d+-1|0;m=6;continue}if((m|0)==17){e=g+-1|0;m=47}else if((m|0)==20){e=g+-1|0;m=47}else if((m|0)==23){e=g+-1|0;m=47}else if((m|0)==26)k[b>>2]=e;else if((m|0)==38){a=j;f=h;e=e+-1|0;m=47}else if((m|0)==41){d=j;c=e+-1|0;m=52}else if((m|0)==44){d=j;c=e+-1|0;m=52}if((m|0)==47)if(!f)m=48;else{d=a;c=e;m=52}if((m|0)==48)if(!(i[e>>0]|0)){if(a){k[a>>2]=0;k[b>>2]=0}c=c-d|0}else{d=a;c=e;m=52}if((m|0)==52){m=Sh()|0;k[m>>2]=84;if(!d)c=-1;else{k[b>>2]=c;c=-1}}return c|0}function si(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;g=r;r=r+16|0;d=g;a:do if(!b)d=0;else{do if(c){f=(a|0)==0?d:a;d=i[b>>0]|0;a=d&255;if(d<<24>>24>-1){k[f>>2]=a;d=d<<24>>24!=0&1;break a}d=a+-194|0;if(d>>>0<=50){a=b+1|0;e=k[36608+(d<<2)>>2]|0;if(c>>>0<4?(e&-2147483648>>>((c*6|0)+-6|0)|0)!=0:0)break;d=l[a>>0]|0;c=d>>>3;if((c+-16|c+(e>>26))>>>0<=7){d=d+-128|e<<6;if((d|0)>=0){k[f>>2]=d;d=2;break a}a=l[b+2>>0]|0;if((a&192|0)==128){a=a+-128|d<<6;if((a|0)>=0){k[f>>2]=a;d=3;break a}d=l[b+3>>0]|0;if((d&192|0)==128){k[f>>2]=d+-128|a<<6;d=4;break a}}}}}while(0);d=Sh()|0;k[d>>2]=84;d=-1}while(0);r=g;return d|0}function ti(a,b,c){a=a|0;b=b|0;c=c|0;do if(a){if(b>>>0<128){i[a>>0]=b;a=1;break}if(b>>>0<2048){i[a>>0]=b>>>6|192;i[a+1>>0]=b&63|128;a=2;break}if(b>>>0<55296|(b&-8192|0)==57344){i[a>>0]=b>>>12|224;i[a+1>>0]=b>>>6&63|128;i[a+2>>0]=b&63|128;a=3;break}if((b+-65536|0)>>>0<1048576){i[a>>0]=b>>>18|240;i[a+1>>0]=b>>>12&63|128;i[a+2>>0]=b>>>6&63|128;i[a+3>>0]=b&63|128;a=4;break}else{a=Sh()|0;k[a>>2]=84;a=-1;break}}else a=1;while(0);return a|0}function ui(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0;l=r;r=r+272|0;h=l+8|0;j=l;g=k[b>>2]|0;k[j>>2]=g;i=(a|0)!=0;e=i?d:256;d=i?a:h;a=g;a:do if((e|0)!=0&(g|0)!=0){g=e;f=a;e=0;while(1){a=c>>>0>=g>>>0;if(!(a|c>>>0>32)){a=f;break a}a=a?g:c;c=c-a|0;a=vi(d,j,a,0)|0;if((a|0)==-1){e=c;break}n=(d|0)==(h|0);m=n?0:a;f=g-m|0;d=n?d:d+a|0;e=a+e|0;a=k[j>>2]|0;if((g|0)!=(m|0)&(a|0)!=0){g=f;f=a}else{g=f;break a}}c=e;g=0;a=k[j>>2]|0;e=-1}else{g=e;e=0}while(0);b:do if((a|0)!=0?(g|0)!=0&(c|0)!=0:0){f=a;a=d;while(1){d=ti(a,k[f>>2]|0,0)|0;if((d+1|0)>>>0<2)break;f=(k[j>>2]|0)+4|0;k[j>>2]=f;c=c+-1|0;e=e+1|0;if(!((g|0)!=(d|0)&(c|0)!=0))break b;else{g=g-d|0;a=a+d|0}}if(!d)k[j>>2]=0;else e=-1}while(0);if(i)k[b>>2]=k[j>>2];r=l;return e|0}function vi(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;h=r;r=r+16|0;g=h;a:do if(!a){a=k[b>>2]|0;d=k[a>>2]|0;if(!d)c=0;else{c=0;do{if(d>>>0>127){d=ti(g,d,0)|0;if((d|0)==-1){c=-1;break a}}else d=1;c=d+c|0;a=a+4|0;d=k[a>>2]|0}while((d|0)!=0)}}else{b:do if(c>>>0>3){d=c;e=k[b>>2]|0;while(1){f=k[e>>2]|0;if((f+-1|0)>>>0>126){if(!f)break;f=ti(a,f,0)|0;if((f|0)==-1){c=-1;break a}a=a+f|0;d=d-f|0}else{i[a>>0]=f;a=a+1|0;d=d+-1|0;e=k[b>>2]|0}e=e+4|0;k[b>>2]=e;if(d>>>0<=3)break b}i[a>>0]=0;k[b>>2]=0;c=c-d|0;break a}else d=c;while(0);if(d){e=k[b>>2]|0;while(1){f=k[e>>2]|0;if((f+-1|0)>>>0>126){if(!f){e=19;break}f=ti(g,f,0)|0;if((f|0)==-1){c=-1;break a}if(d>>>0<f>>>0){e=22;break}ti(a,k[e>>2]|0,0)|0;a=a+f|0;d=d-f|0}else{i[a>>0]=f;a=a+1|0;d=d+-1|0;e=k[b>>2]|0}e=e+4|0;k[b>>2]=e;if(!d)break a}if((e|0)==19){i[a>>0]=0;k[b>>2]=0;c=c-d|0;break}else if((e|0)==22){c=c-d|0;break}}}while(0);r=h;return c|0}function wi(a,b){a=a|0;b=b|0;if(!a)a=0;else a=ti(a,b,0)|0;return a|0}function xi(a){a=a|0;return 0}function yi(a){a=a|0;return}function zi(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0;j=r;r=r+16|0;h=j;g=b&255;i[h>>0]=g;d=a+16|0;e=k[d>>2]|0;if(!e)if(!(Hi(a)|0)){e=k[d>>2]|0;f=4}else c=-1;else f=4;do if((f|0)==4){d=a+20|0;f=k[d>>2]|0;if(f>>>0<e>>>0?(c=b&255,(c|0)!=(i[a+75>>0]|0)):0){k[d>>2]=f+1;i[f>>0]=g;break}if((Qb[k[a+36>>2]&63](a,h,1)|0)==1)c=l[h>>0]|0;else c=-1}while(0);r=j;return c|0}function Ai(a){a=a|0;var b=0,c=0;b=r;r=r+16|0;c=b;k[c>>2]=k[a+60>>2];a=Yh(wb(6,c|0)|0)|0;r=b;return a|0}function Bi(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0;l=r;r=r+48|0;f=l+16|0;e=l;d=l+32|0;k[d>>2]=b;g=d+4|0;j=a+48|0;m=k[j>>2]|0;k[g>>2]=c-((m|0)!=0&1);h=a+44|0;k[d+8>>2]=k[h>>2];k[d+12>>2]=m;if(!(k[9141]|0)){k[f>>2]=k[a+60>>2];k[f+4>>2]=d;k[f+8>>2]=2;d=Yh(Eb(145,f|0)|0)|0}else{xb(161,a|0);k[e>>2]=k[a+60>>2];k[e+4>>2]=d;k[e+8>>2]=2;d=Yh(Eb(145,e|0)|0)|0;pb(0)}if((d|0)>=1){g=k[g>>2]|0;if(d>>>0>g>>>0){f=k[h>>2]|0;e=a+4|0;k[e>>2]=f;k[a+8>>2]=f+(d-g);if(!(k[j>>2]|0))d=c;else{k[e>>2]=f+1;i[b+(c+-1)>>0]=i[f>>0]|0;d=c}}}else{k[a>>2]=k[a>>2]|d&48^16;k[a+8>>2]=0;k[a+4>>2]=0}r=l;return d|0}function Ci(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;e=r;r=r+32|0;f=e;d=e+20|0;k[f>>2]=k[a+60>>2];k[f+4>>2]=0;k[f+8>>2]=b;k[f+12>>2]=d;k[f+16>>2]=c;if((Yh(Db(140,f|0)|0)|0)<0){k[d>>2]=-1;a=-1}else a=k[d>>2]|0;r=e;return a|0}function Di(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;p=r;r=r+48|0;m=p+16|0;l=p;d=p+32|0;n=a+28|0;e=k[n>>2]|0;k[d>>2]=e;o=a+20|0;e=(k[o>>2]|0)-e|0;k[d+4>>2]=e;k[d+8>>2]=b;k[d+12>>2]=c;i=a+60|0;j=a+44|0;b=2;e=e+c|0;while(1){if(!(k[9141]|0)){k[m>>2]=k[i>>2];k[m+4>>2]=d;k[m+8>>2]=b;g=Yh(Fb(146,m|0)|0)|0}else{xb(162,a|0);k[l>>2]=k[i>>2];k[l+4>>2]=d;k[l+8>>2]=b;g=Yh(Fb(146,l|0)|0)|0;pb(0)}if((e|0)==(g|0)){e=6;break}if((g|0)<0){e=8;break}e=e-g|0;f=k[d+4>>2]|0;if(g>>>0<=f>>>0)if((b|0)==2){k[n>>2]=(k[n>>2]|0)+g;h=f;b=2}else h=f;else{h=k[j>>2]|0;k[n>>2]=h;k[o>>2]=h;h=k[d+12>>2]|0;g=g-f|0;d=d+8|0;b=b+-1|0}k[d>>2]=(k[d>>2]|0)+g;k[d+4>>2]=h-g}if((e|0)==6){m=k[j>>2]|0;k[a+16>>2]=m+(k[a+48>>2]|0);a=m;k[n>>2]=a;k[o>>2]=a}else if((e|0)==8){k[a+16>>2]=0;k[n>>2]=0;k[o>>2]=0;k[a>>2]=k[a>>2]|32;if((b|0)==2)c=0;else c=c-(k[d+4>>2]|0)|0}r=p;return c|0}function Ei(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=r;r=r+80|0;d=e;k[a+36>>2]=8;if((k[a>>2]&64|0)==0?(k[d>>2]=k[a+60>>2],k[d+4>>2]=21505,k[d+8>>2]=e+12,(nb(54,d|0)|0)!=0):0)i[a+75>>0]=-1;d=Di(a,b,c)|0;r=e;return d|0}function Fi(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=a+84|0;f=k[d>>2]|0;g=c+256|0;e=Zi(f,0,g)|0;e=(e|0)==0?g:e-f|0;c=e>>>0<c>>>0?e:c;$t(b|0,f|0,c|0)|0;k[a+4>>2]=f+c;b=f+e|0;k[a+8>>2]=b;k[d>>2]=b;return c|0}function Gi(a){a=a|0;var b=0,c=0;b=a+74|0;c=i[b>>0]|0;i[b>>0]=c+255|c;b=a+20|0;c=a+44|0;if((k[b>>2]|0)>>>0>(k[c>>2]|0)>>>0)Qb[k[a+36>>2]&63](a,0,0)|0;k[a+16>>2]=0;k[a+28>>2]=0;k[b>>2]=0;b=k[a>>2]|0;if(b&20)if(!(b&4))b=-1;else{k[a>>2]=b|32;b=-1}else{b=k[c>>2]|0;k[a+8>>2]=b;k[a+4>>2]=b;b=0}return b|0}function Hi(a){a=a|0;var b=0,c=0;b=a+74|0;c=i[b>>0]|0;i[b>>0]=c+255|c;b=k[a>>2]|0;if(!(b&8)){k[a+8>>2]=0;k[a+4>>2]=0;b=k[a+44>>2]|0;k[a+28>>2]=b;k[a+20>>2]=b;k[a+16>>2]=b+(k[a+48>>2]|0);b=0}else{k[a>>2]=b|32;b=-1}return b|0}function Ii(a){a=a|0;var b=0,c=0;c=r;r=r+16|0;b=c;if((k[a+8>>2]|0)==0?(Gi(a)|0)!=0:0)b=-1;else if((Qb[k[a+32>>2]&63](a,b,1)|0)==1)b=l[b>>0]|0;else b=-1;r=c;return b|0}function Ji(a){a=a|0;var b=0,c=0;do if(a){if((k[a+76>>2]|0)<=-1){b=kj(a)|0;break}c=(xi(a)|0)==0;b=kj(a)|0;if(!c)yi(a)}else{if(!(k[9206]|0))b=0;else b=Ji(k[9206]|0)|0;Na(36592);a=k[9147]|0;if(a)do{if((k[a+76>>2]|0)>-1)c=xi(a)|0;else c=0;if((k[a+20>>2]|0)>>>0>(k[a+28>>2]|0)>>>0)b=kj(a)|0|b;if(c)yi(a);a=k[a+56>>2]|0}while((a|0)!=0);ob(36592)}while(0);return b|0}function Ki(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;if((k[b+76>>2]|0)>=0?(xi(b)|0)!=0:0){if((i[b+75>>0]|0)!=(a|0)?(d=b+20|0,e=k[d>>2]|0,e>>>0<(k[b+16>>2]|0)>>>0):0){k[d>>2]=e+1;i[e>>0]=a;c=a&255}else c=zi(b,a)|0;yi(b)}else g=3;do if((g|0)==3){if((i[b+75>>0]|0)!=(a|0)?(f=b+20|0,c=k[f>>2]|0,c>>>0<(k[b+16>>2]|0)>>>0):0){k[f>>2]=c+1;i[c>>0]=a;c=a&255;break}c=zi(b,a)|0}while(0);return c|0}function Li(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=c+16|0;e=k[d>>2]|0;if(!e)if(!(Hi(c)|0)){e=k[d>>2]|0;f=4}else d=0;else f=4;a:do if((f|0)==4){g=c+20|0;f=k[g>>2]|0;if((e-f|0)>>>0<b>>>0){d=Qb[k[c+36>>2]&63](c,a,b)|0;break}b:do if((i[c+75>>0]|0)>-1){d=b;while(1){if(!d){e=f;d=0;break b}e=d+-1|0;if((i[a+e>>0]|0)==10)break;else d=e}if((Qb[k[c+36>>2]&63](c,a,d)|0)>>>0<d>>>0)break a;b=b-d|0;a=a+d|0;e=k[g>>2]|0}else{e=f;d=0}while(0);$t(e|0,a|0,b|0)|0;k[g>>2]=(k[g>>2]|0)+b;d=d+b|0}while(0);return d|0}function Mi(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=ia(c,b)|0;if((k[d+76>>2]|0)>-1){f=(xi(d)|0)==0;a=Li(a,e,d)|0;if(!f)yi(d)}else a=Li(a,e,d)|0;if((a|0)!=(e|0))c=(a>>>0)/(b>>>0)|0;return c|0}function Ni(a){a=a|0;var b=0,c=0,d=0;if((k[a+76>>2]|0)>=0?(xi(a)|0)!=0:0){b=a+4|0;c=k[b>>2]|0;if(c>>>0<(k[a+8>>2]|0)>>>0){k[b>>2]=c+1;b=l[c>>0]|0}else b=Ii(a)|0}else d=3;do if((d|0)==3){b=a+4|0;c=k[b>>2]|0;if(c>>>0<(k[a+8>>2]|0)>>>0){k[b>>2]=c+1;b=l[c>>0]|0;break}else{b=Ii(a)|0;break}}while(0);return b|0}function Oi(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=r;r=r+16|0;f=e;k[f>>2]=d;d=Ui(a,b,c,f)|0;r=e;return d|0}function Pi(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=r;r=r+16|0;e=d;k[e>>2]=c;c=Vi(a,b,e)|0;r=d;return c|0}function Qi(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;do if((a|0)!=-1){if((k[b+76>>2]|0)>-1)e=xi(b)|0;else e=0;if(!((k[b+8>>2]|0)==0?(Gi(b)|0)!=0:0))f=6;if((f|0)==6?(c=b+4|0,d=k[c>>2]|0,d>>>0>((k[b+44>>2]|0)+-8|0)>>>0):0){f=d+-1|0;k[c>>2]=f;i[f>>0]=a;k[b>>2]=k[b>>2]&-17;if(!e)break;yi(b);break}if(e){yi(b);a=-1}else a=-1}else a=-1;while(0);return a|0}function Ri(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;h=r;r=r+16|0;d=h;e=tj(240)|0;do if(e){k[d>>2]=k[c>>2];d=Ui(e,240,b,d)|0;if(d>>>0<240){b=wj(e,d+1|0)|0;k[a>>2]=(b|0)!=0?b:e;break}uj(e);if((d|0)>=0?(g=d+1|0,f=tj(g)|0,k[a>>2]=f,(f|0)!=0):0)d=Ui(f,g,b,c)|0;else d=-1}else d=-1;while(0);r=h;return d|0}function Si(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0;s=r;r=r+224|0;n=s+80|0;q=s+96|0;p=s;o=s+136|0;d=q;e=d+40|0;do{k[d>>2]=0;d=d+4|0}while((d|0)<(e|0));k[n>>2]=k[c>>2];if((lj(0,b,n,p,q)|0)<0)c=-1;else{if((k[a+76>>2]|0)>-1)l=xi(a)|0;else l=0;c=k[a>>2]|0;m=c&32;if((i[a+74>>0]|0)<1)k[a>>2]=c&-33;c=a+48|0;if(!(k[c>>2]|0)){e=a+44|0;f=k[e>>2]|0;k[e>>2]=o;g=a+28|0;k[g>>2]=o;h=a+20|0;k[h>>2]=o;k[c>>2]=80;j=a+16|0;k[j>>2]=o+80;d=lj(a,b,n,p,q)|0;if(f){Qb[k[a+36>>2]&63](a,0,0)|0;d=(k[h>>2]|0)==0?-1:d;k[e>>2]=f;k[c>>2]=0;k[j>>2]=0;k[g>>2]=0;k[h>>2]=0}}else d=lj(a,b,n,p,q)|0;c=k[a>>2]|0;k[a>>2]=c|m;if(l)yi(a);c=(c&32|0)==0?d:-1}r=s;return c|0}function Ti(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,m=0.0,n=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,N=0,O=0,P=0,Q=0;P=r;r=r+304|0;G=P+16|0;I=P+8|0;H=P+33|0;J=P;y=P+32|0;if((k[a+76>>2]|0)>-1)O=xi(a)|0;else O=0;d=i[b>>0]|0;a:do if(d<<24>>24){K=a+4|0;L=a+100|0;F=a+108|0;z=a+8|0;A=H+10|0;B=H+33|0;C=I+4|0;D=H+46|0;E=H+94|0;f=d;d=0;g=b;s=0;e=0;b=0;b:while(1){c:do if(!(Qh(f&255)|0)){f=(i[g>>0]|0)==37;d:do if(f){n=g+1|0;h=i[n>>0]|0;e:do switch(h<<24>>24){case 37:break d;case 42:{x=0;h=g+2|0;break}default:{h=(h&255)+-48|0;if(h>>>0<10?(i[g+2>>0]|0)==36:0){k[G>>2]=k[c>>2];while(1){x=(k[G>>2]|0)+(4-1)&~(4-1);f=k[x>>2]|0;k[G>>2]=x+4;if(h>>>0>1)h=h+-1|0;else break}x=f;h=g+3|0;break e}h=(k[c>>2]|0)+(4-1)&~(4-1);x=k[h>>2]|0;k[c>>2]=h+4;h=n}}while(0);f=i[h>>0]|0;g=f&255;if((g+-48|0)>>>0<10){f=0;while(1){n=(f*10|0)+-48+g|0;h=h+1|0;f=i[h>>0]|0;g=f&255;if((g+-48|0)>>>0>=10)break;else f=n}}else n=0;if(f<<24>>24==109){h=h+1|0;q=i[h>>0]|0;f=(x|0)!=0&1;e=0;b=0}else{q=f;f=0}g=h+1|0;switch(q&255|0){case 104:{w=(i[g>>0]|0)==104;g=w?h+2|0:g;h=w?-2:-1;break}case 108:{w=(i[g>>0]|0)==108;g=w?h+2|0:g;h=w?3:1;break}case 106:{h=3;break}case 116:case 122:{h=1;break}case 76:{h=2;break}case 110:case 112:case 67:case 83:case 91:case 99:case 115:case 88:case 71:case 70:case 69:case 65:case 103:case 102:case 101:case 97:case 120:case 117:case 111:case 105:case 100:{g=h;h=0;break}default:{N=152;break b}}q=l[g>>0]|0;t=(q&47|0)==3;q=t?q|32:q;t=t?1:h;switch(q|0){case 99:{w=s;v=(n|0)<1?1:n;break}case 91:{w=s;v=n;break}case 110:{if(!x){h=s;break c}switch(t|0){case -2:{i[x>>0]=s;h=s;break c}case -1:{j[x>>1]=s;h=s;break c}case 0:{k[x>>2]=s;h=s;break c}case 1:{k[x>>2]=s;h=s;break c}case 3:{h=x;k[h>>2]=s;k[h+4>>2]=((s|0)<0)<<31>>31;h=s;break c}default:{h=s;break c}}}default:{Wh(a,0);do{h=k[K>>2]|0;if(h>>>0<(k[L>>2]|0)>>>0){k[K>>2]=h+1;h=l[h>>0]|0}else h=Xh(a)|0}while((Qh(h)|0)!=0);h=k[K>>2]|0;if(k[L>>2]|0){h=h+-1|0;k[K>>2]=h}w=(k[F>>2]|0)+s+h-(k[z>>2]|0)|0;v=n}}Wh(a,v);h=k[K>>2]|0;n=k[L>>2]|0;if(h>>>0<n>>>0)k[K>>2]=h+1;else{if((Xh(a)|0)<0){N=152;break b}n=k[L>>2]|0}if(n)k[K>>2]=(k[K>>2]|0)+-1;f:do switch(q|0){case 91:case 99:case 115:{u=(q|0)==99;g:do if((q&239|0)==99){Yt(H|0,-1,257)|0;i[H>>0]=0;if((q|0)==115){i[B>>0]=0;i[A>>0]=0;i[A+1>>0]=0;i[A+2>>0]=0;i[A+3>>0]=0;i[A+4>>0]=0}}else{Q=g+1|0;s=(i[Q>>0]|0)==94;h=s&1;q=s?Q:g;g=s?g+2|0:Q;Yt(H|0,s&1|0,257)|0;i[H>>0]=0;switch(i[g>>0]|0){case 45:{s=(h^1)&255;i[D>>0]=s;g=q+2|0;break}case 93:{s=(h^1)&255;i[E>>0]=s;g=q+2|0;break}default:s=(h^1)&255}while(1){h=i[g>>0]|0;h:do switch(h<<24>>24){case 0:{N=152;break b}case 93:break g;case 45:{q=g+1|0;h=i[q>>0]|0;switch(h<<24>>24){case 93:case 0:{h=45;break h}default:{}}g=i[g+-1>>0]|0;if((g&255)<(h&255)){g=g&255;do{g=g+1|0;i[H+g>>0]=s;h=i[q>>0]|0}while((g|0)<(h&255|0));g=q}else g=q;break}default:{}}while(0);i[H+((h&255)+1)>>0]=s;g=g+1|0}}while(0);q=u?v+1|0:31;s=(t|0)==1;t=(f|0)!=0;i:do if(s){if(t){b=tj(q<<2)|0;if(!b){e=0;N=152;break b}}else b=x;k[I>>2]=0;k[C>>2]=0;e=0;j:while(1){n=(b|0)==0;do{k:while(1){h=k[K>>2]|0;if(h>>>0<(k[L>>2]|0)>>>0){k[K>>2]=h+1;h=l[h>>0]|0}else h=Xh(a)|0;if(!(i[H+(h+1)>>0]|0))break j;i[y>>0]=h;switch(oi(J,y,1,I)|0){case -1:{e=0;N=152;break b}case -2:break;default:break k}}if(!n){k[b+(e<<2)>>2]=k[J>>2];e=e+1|0}}while(!(t&(e|0)==(q|0)));e=q<<1|1;h=wj(b,e<<2)|0;if(!h){e=0;N=152;break b}Q=q;q=e;b=h;e=Q}if(!(pi(I)|0)){e=0;N=152;break b}else{n=e;e=0}}else{if(t){e=tj(q)|0;if(!e){e=0;b=0;N=152;break b}else h=0;while(1){do{b=k[K>>2]|0;if(b>>>0<(k[L>>2]|0)>>>0){k[K>>2]=b+1;b=l[b>>0]|0}else b=Xh(a)|0;if(!(i[H+(b+1)>>0]|0)){n=h;b=0;break i}i[e+h>>0]=b;h=h+1|0}while((h|0)!=(q|0));b=q<<1|1;h=wj(e,b)|0;if(!h){b=0;N=152;break b}else{Q=q;q=b;e=h;h=Q}}}if(!x){e=n;while(1){b=k[K>>2]|0;if(b>>>0<e>>>0){k[K>>2]=b+1;b=l[b>>0]|0}else b=Xh(a)|0;if(!(i[H+(b+1)>>0]|0)){n=0;e=0;b=0;break i}e=k[L>>2]|0}}else{e=0;while(1){b=k[K>>2]|0;if(b>>>0<n>>>0){k[K>>2]=b+1;b=l[b>>0]|0}else b=Xh(a)|0;if(!(i[H+(b+1)>>0]|0)){n=e;e=x;b=0;break i}i[x+e>>0]=b;n=k[L>>2]|0;e=e+1|0}}}while(0);h=k[K>>2]|0;if(k[L>>2]|0){h=h+-1|0;k[K>>2]=h}h=h-(k[z>>2]|0)+(k[F>>2]|0)|0;if(!h)break b;if(!((h|0)==(v|0)|u^1))break b;do if(t)if(s){k[x>>2]=b;break}else{k[x>>2]=e;break}while(0);if(!u){if(b)k[b+(n<<2)>>2]=0;if(!e){e=0;break f}i[e+n>>0]=0}break}case 120:case 88:case 112:{h=16;N=134;break}case 111:{h=8;N=134;break}case 117:case 100:{h=10;N=134;break}case 105:{h=0;N=134;break}case 71:case 103:case 70:case 102:case 69:case 101:case 65:case 97:{m=+Uh(a,t,0);if((k[F>>2]|0)==((k[z>>2]|0)-(k[K>>2]|0)|0))break b;if(x)switch(t|0){case 0:{o[x>>2]=m;break f}case 1:{p[x>>3]=m;break f}case 2:{p[x>>3]=m;break f}default:break f}break}default:{}}while(0);l:do if((N|0)==134){N=0;h=Vh(a,h,0,-1,-1)|0;if((k[F>>2]|0)==((k[z>>2]|0)-(k[K>>2]|0)|0))break b;if((x|0)!=0&(q|0)==112){k[x>>2]=h;break}if(x)switch(t|0){case -2:{i[x>>0]=h;break l}case -1:{j[x>>1]=h;break l}case 0:{k[x>>2]=h;break l}case 1:{k[x>>2]=h;break l}case 3:{Q=x;k[Q>>2]=h;k[Q+4>>2]=M;break l}default:break l}}while(0);d=((x|0)!=0&1)+d|0;h=(k[F>>2]|0)+w+(k[K>>2]|0)-(k[z>>2]|0)|0;break c}while(0);g=g+(f&1)|0;Wh(a,0);f=k[K>>2]|0;if(f>>>0<(k[L>>2]|0)>>>0){k[K>>2]=f+1;f=l[f>>0]|0}else f=Xh(a)|0;if((f|0)!=(l[g>>0]|0)){N=21;break b}h=s+1|0}else{while(1){f=g+1|0;if(!(Qh(l[f>>0]|0)|0))break;else g=f}Wh(a,0);do{f=k[K>>2]|0;if(f>>>0<(k[L>>2]|0)>>>0){k[K>>2]=f+1;f=l[f>>0]|0}else f=Xh(a)|0}while((Qh(f)|0)!=0);f=k[K>>2]|0;if(k[L>>2]|0){f=f+-1|0;k[K>>2]=f}h=(k[F>>2]|0)+s+f-(k[z>>2]|0)|0}while(0);g=g+1|0;f=i[g>>0]|0;if(!(f<<24>>24))break a;else s=h}if((N|0)==21){if(k[L>>2]|0)k[K>>2]=(k[K>>2]|0)+-1;if((d|0)!=0|(f|0)>-1)break;else{d=0;N=153}}else if((N|0)==152)if(!d){d=f;N=153}if((N|0)==153){f=d;d=-1}if(f){uj(e);uj(b)}}else d=0;while(0);if(O)yi(a);r=P;return d|0}function Ui(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0;m=r;r=r+128|0;e=m+112|0;l=m;f=l;g=36884;h=f+112|0;do{k[f>>2]=k[g>>2];f=f+4|0;g=g+4|0}while((f|0)<(h|0));if((b+-1|0)>>>0>2147483646)if(!b){b=1;j=4}else{b=Sh()|0;k[b>>2]=75;b=-1}else{e=a;j=4}if((j|0)==4){j=-2-e|0;j=b>>>0>j>>>0?j:b;k[l+48>>2]=j;a=l+20|0;k[a>>2]=e;k[l+44>>2]=e;b=e+j|0;e=l+16|0;k[e>>2]=b;k[l+28>>2]=b;b=Si(l,c,d)|0;if(j){c=k[a>>2]|0;i[c+(((c|0)==(k[e>>2]|0))<<31>>31)>>0]=0}}r=m;return b|0}function Vi(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=r;r=r+112|0;d=f;e=d;g=e+112|0;do{k[e>>2]=0;e=e+4|0}while((e|0)<(g|0));k[d+32>>2]=29;k[d+44>>2]=a;k[d+76>>2]=-1;k[d+84>>2]=a;g=Ti(d,b,c)|0;r=f;return g|0}function Wi(a,b,c){a=a|0;b=b|0;c=c|0;return +(+nj(a,b,2))}function Xi(a,b,c){a=a|0;b=b|0;c=c|0;a=oj(a,b,c,-1,-1)|0;return a|0}function Yi(a,b,c){a=a|0;b=b|0;c=c|0;a=oj(a,b,c,0,-2147483648)|0;return a|0}function Zi(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=b&255;d=(c|0)!=0;a:do if(d&(a&3|0)!=0){e=b&255;while(1){if((i[a>>0]|0)==e<<24>>24){g=6;break a}a=a+1|0;c=c+-1|0;d=(c|0)!=0;if(!(d&(a&3|0)!=0)){g=5;break}}}else g=5;while(0);if((g|0)==5)if(d)g=6;else c=0;b:do if((g|0)==6){e=b&255;if((i[a>>0]|0)!=e<<24>>24){d=ia(f,16843009)|0;c:do if(c>>>0>3)while(1){f=k[a>>2]^d;if((f&-2139062144^-2139062144)&f+-16843009)break;a=a+4|0;c=c+-4|0;if(c>>>0<=3){g=11;break c}}else g=11;while(0);if((g|0)==11)if(!c){c=0;break}while(1){if((i[a>>0]|0)==e<<24>>24)break b;a=a+1|0;c=c+-1|0;if(!c){c=0;break}}}}while(0);return ((c|0)!=0?a:0)|0}function _i(a,b){a=a|0;b=b|0;var c=0,d=0;c=b;a:do if(!((c^a)&3)){if(c&3)do{c=i[b>>0]|0;i[a>>0]=c;if(!(c<<24>>24))break a;b=b+1|0;a=a+1|0}while((b&3|0)!=0);c=k[b>>2]|0;if(!((c&-2139062144^-2139062144)&c+-16843009)){d=a;while(1){b=b+4|0;a=d+4|0;k[d>>2]=c;c=k[b>>2]|0;if((c&-2139062144^-2139062144)&c+-16843009)break;else d=a}}d=8}else d=8;while(0);if((d|0)==8){d=i[b>>0]|0;i[a>>0]=d;if(d<<24>>24)do{b=b+1|0;a=a+1|0;d=i[b>>0]|0;i[a>>0]=d}while(d<<24>>24!=0)}return a|0}function $i(a,b){a=a|0;b=b|0;var c=0,d=0;d=i[a>>0]|0;c=i[b>>0]|0;if(d<<24>>24==0?1:d<<24>>24!=c<<24>>24)b=d;else{do{a=a+1|0;b=b+1|0;d=i[a>>0]|0;c=i[b>>0]|0}while(!(d<<24>>24==0?1:d<<24>>24!=c<<24>>24));b=d}return (b&255)-(c&255)|0}function aj(a,b){a=a|0;b=b|0;_i(a,b)|0;return a|0}function bj(a){a=a|0;var b=0,c=0,d=0;d=a;a:do if(!(d&3))c=4;else{b=a;a=d;while(1){if(!(i[b>>0]|0))break a;b=b+1|0;a=b;if(!(a&3)){a=b;c=4;break}}}while(0);if((c|0)==4){while(1){b=k[a>>2]|0;if(!((b&-2139062144^-2139062144)&b+-16843009))a=a+4|0;else break}if((b&255)<<24>>24)do a=a+1|0;while((i[a>>0]|0)!=0)}return a-d|0}function cj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;if(!c)b=0;else{d=i[a>>0]|0;a:do if(!(d<<24>>24))d=0;else while(1){c=c+-1|0;e=i[b>>0]|0;if(!(d<<24>>24==e<<24>>24&((c|0)!=0&e<<24>>24!=0)))break a;a=a+1|0;b=b+1|0;d=i[a>>0]|0;if(!(d<<24>>24)){d=0;break}}while(0);b=(d&255)-(l[b>>0]|0)|0}return b|0}function dj(a){a=a|0;var b=0;b=a;while(1)if(!(k[b>>2]|0))break;else b=b+4|0;return b-a>>2|0}function ej(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if(c){d=a;while(1){c=c+-1|0;k[d>>2]=k[b>>2];if(!c)break;else{b=b+4|0;d=d+4|0}}}return a|0}function fj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=(c|0)==0;if(a-b>>2>>>0<c>>>0){if(!d)do{c=c+-1|0;k[a+(c<<2)>>2]=k[b+(c<<2)>>2]}while((c|0)!=0)}else if(!d){d=b;b=a;while(1){c=c+-1|0;k[b>>2]=k[d>>2];if(!c)break;else{d=d+4|0;b=b+4|0}}}return a|0}function gj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if(c){d=a;while(1){c=c+-1|0;k[d>>2]=b;if(!c)break;else d=d+4|0}}return a|0}function hj(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;g=a+4|0;c=k[g>>2]|0;h=a+100|0;if(c>>>0<(k[h>>2]|0)>>>0){k[g>>2]=c+1;c=l[c>>0]|0}else c=Xh(a)|0;switch(c|0){case 43:case 45:{d=(c|0)==45&1;c=k[g>>2]|0;if(c>>>0<(k[h>>2]|0)>>>0){k[g>>2]=c+1;c=l[c>>0]|0}else c=Xh(a)|0;if((b|0)!=0&(c+-48|0)>>>0>9?(k[h>>2]|0)!=0:0){k[g>>2]=(k[g>>2]|0)+-1;f=d}else f=d;break}default:f=0}if((c+-48|0)>>>0>9)if(!(k[h>>2]|0)){d=-2147483648;c=0}else{k[g>>2]=(k[g>>2]|0)+-1;d=-2147483648;c=0}else{d=0;do{d=c+-48+(d*10|0)|0;c=k[g>>2]|0;if(c>>>0<(k[h>>2]|0)>>>0){k[g>>2]=c+1;c=l[c>>0]|0}else c=Xh(a)|0}while((c+-48|0)>>>0<10&(d|0)<214748364);b=((d|0)<0)<<31>>31;if((c+-48|0)>>>0<10){do{b=hu(d|0,b|0,10,0)|0;d=M;c=Zt(c|0,((c|0)<0)<<31>>31|0,-48,-1)|0;d=Zt(c|0,M|0,b|0,d|0)|0;b=M;c=k[g>>2]|0;if(c>>>0<(k[h>>2]|0)>>>0){k[g>>2]=c+1;c=l[c>>0]|0}else c=Xh(a)|0}while((c+-48|0)>>>0<10&((b|0)<21474836|(b|0)==21474836&d>>>0<2061584302));e=d}else e=d;if((c+-48|0)>>>0<10)do{c=k[g>>2]|0;if(c>>>0<(k[h>>2]|0)>>>0){k[g>>2]=c+1;c=l[c>>0]|0}else c=Xh(a)|0}while((c+-48|0)>>>0<10);if(k[h>>2]|0)k[g>>2]=(k[g>>2]|0)+-1;a=(f|0)!=0;c=Xt(0,0,e|0,b|0)|0;d=a?M:b;c=a?c:e}M=d;return c|0}function ij(a){a=a|0;if(!(k[a+68>>2]|0))yi(a);return}function jj(a){a=a|0;if(!(k[a+68>>2]|0))yi(a);return}function kj(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;b=a+20|0;f=a+28|0;if((k[b>>2]|0)>>>0>(k[f>>2]|0)>>>0?(Qb[k[a+36>>2]&63](a,0,0)|0,(k[b>>2]|0)==0):0)b=-1;else{g=a+4|0;c=k[g>>2]|0;d=a+8|0;e=k[d>>2]|0;if(c>>>0<e>>>0)Qb[k[a+40>>2]&63](a,c-e|0,1)|0;k[a+16>>2]=0;k[f>>2]=0;k[b>>2]=0;k[d>>2]=0;k[g>>2]=0;b=0}return b|0}function lj(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,m=0,n=0.0,o=0,q=0,s=0,u=0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0;ga=r;r=r+624|0;ba=ga+24|0;da=ga+16|0;ca=ga+588|0;Y=ga+576|0;aa=ga;V=ga+536|0;fa=ga+8|0;ea=ga+528|0;L=(a|0)!=0;N=V+40|0;U=N;V=V+39|0;W=fa+4|0;X=Y+12|0;Y=Y+11|0;Z=ca;_=X;$=_-Z|0;O=-2-Z|0;P=_+2|0;Q=ba+288|0;R=ca+9|0;S=R;T=ca+8|0;f=0;w=b;g=0;b=0;a:while(1){do if((f|0)>-1)if((g|0)>(2147483647-f|0)){f=Sh()|0;k[f>>2]=75;f=-1;break}else{f=g+f|0;break}while(0);g=i[w>>0]|0;if(!(g<<24>>24)){K=245;break}else h=w;b:while(1){switch(g<<24>>24){case 37:{g=h;K=9;break b}case 0:{g=h;break b}default:{}}J=h+1|0;g=i[J>>0]|0;h=J}c:do if((K|0)==9)while(1){K=0;if((i[g+1>>0]|0)!=37)break c;h=h+1|0;g=g+2|0;if((i[g>>0]|0)==37)K=9;else break}while(0);y=h-w|0;if(L?(k[a>>2]&32|0)==0:0)Li(w,y,a)|0;if((h|0)!=(w|0)){w=g;g=y;continue}o=g+1|0;h=i[o>>0]|0;m=(h<<24>>24)+-48|0;if(m>>>0<10){J=(i[g+2>>0]|0)==36;o=J?g+3|0:o;h=i[o>>0]|0;u=J?m:-1;b=J?1:b}else u=-1;g=h<<24>>24;d:do if((g&-32|0)==32){m=0;while(1){if(!(1<<g+-32&75913)){q=m;g=o;break d}m=1<<(h<<24>>24)+-32|m;o=o+1|0;h=i[o>>0]|0;g=h<<24>>24;if((g&-32|0)!=32){q=m;g=o;break}}}else{q=0;g=o}while(0);do if(h<<24>>24==42){m=g+1|0;h=(i[m>>0]|0)+-48|0;if(h>>>0<10?(i[g+2>>0]|0)==36:0){k[e+(h<<2)>>2]=10;b=1;g=g+3|0;h=k[d+((i[m>>0]|0)+-48<<3)>>2]|0}else{if(b){f=-1;break a}if(!L){x=q;g=m;b=0;J=0;break}b=(k[c>>2]|0)+(4-1)&~(4-1);h=k[b>>2]|0;k[c>>2]=b+4;b=0;g=m}if((h|0)<0){x=q|8192;J=0-h|0}else{x=q;J=h}}else{m=(h<<24>>24)+-48|0;if(m>>>0<10){h=0;do{h=(h*10|0)+m|0;g=g+1|0;m=(i[g>>0]|0)+-48|0}while(m>>>0<10);if((h|0)<0){f=-1;break a}else{x=q;J=h}}else{x=q;J=0}}while(0);e:do if((i[g>>0]|0)==46){m=g+1|0;h=i[m>>0]|0;if(h<<24>>24!=42){o=(h<<24>>24)+-48|0;if(o>>>0<10){g=m;h=0}else{g=m;o=0;break}while(1){h=(h*10|0)+o|0;g=g+1|0;o=(i[g>>0]|0)+-48|0;if(o>>>0>=10){o=h;break e}}}m=g+2|0;h=(i[m>>0]|0)+-48|0;if(h>>>0<10?(i[g+3>>0]|0)==36:0){k[e+(h<<2)>>2]=10;g=g+4|0;o=k[d+((i[m>>0]|0)+-48<<3)>>2]|0;break}if(b){f=-1;break a}if(L){g=(k[c>>2]|0)+(4-1)&~(4-1);o=k[g>>2]|0;k[c>>2]=g+4;g=m}else{g=m;o=0}}else o=-1;while(0);s=0;while(1){h=(i[g>>0]|0)+-65|0;if(h>>>0>57){f=-1;break a}m=g+1|0;h=i[54679+(s*58|0)+h>>0]|0;q=h&255;if((q+-1|0)>>>0<8){g=m;s=q}else{I=m;break}}if(!(h<<24>>24)){f=-1;break}m=(u|0)>-1;do if(h<<24>>24==19)if(m){f=-1;break a}else K=52;else{if(m){k[e+(u<<2)>>2]=q;G=d+(u<<3)|0;H=k[G+4>>2]|0;K=aa;k[K>>2]=k[G>>2];k[K+4>>2]=H;K=52;break}if(!L){f=0;break a}qj(aa,q,c)}while(0);if((K|0)==52?(K=0,!L):0){w=I;g=y;continue}u=i[g>>0]|0;u=(s|0)!=0&(u&15|0)==3?u&-33:u;m=x&-65537;H=(x&8192|0)==0?x:m;f:do switch(u|0){case 110:switch(s|0){case 0:{k[k[aa>>2]>>2]=f;w=I;g=y;continue a}case 1:{k[k[aa>>2]>>2]=f;w=I;g=y;continue a}case 2:{w=k[aa>>2]|0;k[w>>2]=f;k[w+4>>2]=((f|0)<0)<<31>>31;w=I;g=y;continue a}case 3:{j[k[aa>>2]>>1]=f;w=I;g=y;continue a}case 4:{i[k[aa>>2]>>0]=f;w=I;g=y;continue a}case 6:{k[k[aa>>2]>>2]=f;w=I;g=y;continue a}case 7:{w=k[aa>>2]|0;k[w>>2]=f;k[w+4>>2]=((f|0)<0)<<31>>31;w=I;g=y;continue a}default:{w=I;g=y;continue a}}case 112:{s=H|8;o=o>>>0>8?o:8;u=120;K=64;break}case 88:case 120:{s=H;K=64;break}case 111:{m=aa;h=k[m>>2]|0;m=k[m+4>>2]|0;if((h|0)==0&(m|0)==0)g=N;else{g=N;do{g=g+-1|0;i[g>>0]=h&7|48;h=_t(h|0,m|0,3)|0;m=M}while(!((h|0)==0&(m|0)==0))}if(!(H&8)){h=H;s=0;q=55159;K=77}else{s=U-g+1|0;h=H;o=(o|0)<(s|0)?s:o;s=0;q=55159;K=77}break}case 105:case 100:{h=aa;g=k[h>>2]|0;h=k[h+4>>2]|0;if((h|0)<0){g=Xt(0,0,g|0,h|0)|0;h=M;m=aa;k[m>>2]=g;k[m+4>>2]=h;m=1;q=55159;K=76;break f}if(!(H&2048)){q=H&1;m=q;q=(q|0)==0?55159:55161;K=76}else{m=1;q=55160;K=76}break}case 117:{h=aa;g=k[h>>2]|0;h=k[h+4>>2]|0;m=0;q=55159;K=76;break}case 99:{i[V>>0]=k[aa>>2];w=V;h=1;s=0;u=55159;g=N;break}case 109:{g=Sh()|0;g=Th(k[g>>2]|0)|0;K=82;break}case 115:{g=k[aa>>2]|0;g=(g|0)!=0?g:55169;K=82;break}case 67:{k[fa>>2]=k[aa>>2];k[W>>2]=0;k[aa>>2]=fa;o=-1;K=86;break}case 83:{if(!o){sj(a,32,J,0,H);g=0;K=98}else K=86;break}case 65:case 71:case 70:case 69:case 97:case 103:case 102:case 101:{n=+p[aa>>3];k[da>>2]=0;p[t>>3]=n;if((k[t+4>>2]|0)>=0)if(!(H&2048)){G=H&1;F=G;G=(G|0)==0?55177:55182}else{F=1;G=55179}else{n=-n;F=1;G=55176}p[t>>3]=n;E=k[t+4>>2]&2146435072;do if(E>>>0<2146435072|(E|0)==2146435072&0<0){v=+ki(n,da)*2.0;h=v!=0.0;if(h)k[da>>2]=(k[da>>2]|0)+-1;C=u|32;if((C|0)==97){w=u&32;y=(w|0)==0?G:G+9|0;x=F|2;g=12-o|0;do if(!(o>>>0>11|(g|0)==0)){n=8.0;do{g=g+-1|0;n=n*16.0}while((g|0)!=0);if((i[y>>0]|0)==45){n=-(n+(-v-n));break}else{n=v+n-n;break}}else n=v;while(0);h=k[da>>2]|0;g=(h|0)<0?0-h|0:h;g=rj(g,((g|0)<0)<<31>>31,X)|0;if((g|0)==(X|0)){i[Y>>0]=48;g=Y}i[g+-1>>0]=(h>>31&2)+43;s=g+-2|0;i[s>>0]=u+15;q=(o|0)<1;m=(H&8|0)==0;h=ca;while(1){G=~~n;g=h+1|0;i[h>>0]=l[55143+G>>0]|w;n=(n-+(G|0))*16.0;do if((g-Z|0)==1){if(m&(q&n==0.0))break;i[g>>0]=46;g=h+2|0}while(0);if(!(n!=0.0))break;else h=g}o=(o|0)!=0&(O+g|0)<(o|0)?P+o-s|0:$-s+g|0;m=o+x|0;sj(a,32,J,m,H);if(!(k[a>>2]&32))Li(y,x,a)|0;sj(a,48,J,m,H^65536);g=g-Z|0;if(!(k[a>>2]&32))Li(ca,g,a)|0;h=_-s|0;sj(a,48,o-(g+h)|0,0,0);if(!(k[a>>2]&32))Li(s,h,a)|0;sj(a,32,J,m,H^8192);g=(m|0)<(J|0)?J:m;break}g=(o|0)<0?6:o;if(h){h=(k[da>>2]|0)+-28|0;k[da>>2]=h;n=v*268435456.0}else{n=v;h=k[da>>2]|0}E=(h|0)<0?ba:Q;D=E;h=E;do{B=~~n>>>0;k[h>>2]=B;h=h+4|0;n=(n-+(B>>>0))*1.0e9}while(n!=0.0);m=h;h=k[da>>2]|0;if((h|0)>0){q=E;while(1){s=(h|0)>29?29:h;o=m+-4|0;do if(o>>>0<q>>>0)o=q;else{h=0;do{B=au(k[o>>2]|0,0,s|0)|0;B=Zt(B|0,M|0,h|0,0)|0;h=M;A=ju(B|0,h|0,1e9,0)|0;k[o>>2]=A;h=iu(B|0,h|0,1e9,0)|0;o=o+-4|0}while(o>>>0>=q>>>0);if(!h){o=q;break}o=q+-4|0;k[o>>2]=h}while(0);while(1){if(m>>>0<=o>>>0)break;h=m+-4|0;if(!(k[h>>2]|0))m=h;else break}h=(k[da>>2]|0)-s|0;k[da>>2]=h;if((h|0)>0)q=o;else break}}else o=E;if((h|0)<0){y=((g+25|0)/9|0)+1|0;z=(C|0)==102;w=o;while(1){x=0-h|0;x=(x|0)>9?9:x;do if(w>>>0<m>>>0){h=(1<<x)+-1|0;q=1e9>>>x;o=0;s=w;do{B=k[s>>2]|0;k[s>>2]=(B>>>x)+o;o=ia(B&h,q)|0;s=s+4|0}while(s>>>0<m>>>0);h=(k[w>>2]|0)==0?w+4|0:w;if(!o){o=h;break}k[m>>2]=o;o=h;m=m+4|0}else o=(k[w>>2]|0)==0?w+4|0:w;while(0);h=z?E:o;m=(m-h>>2|0)>(y|0)?h+(y<<2)|0:m;h=(k[da>>2]|0)+x|0;k[da>>2]=h;if((h|0)>=0){w=o;break}else w=o}}else w=o;do if(w>>>0<m>>>0){h=(D-w>>2)*9|0;q=k[w>>2]|0;if(q>>>0<10)break;else o=10;do{o=o*10|0;h=h+1|0}while(q>>>0>=o>>>0)}else h=0;while(0);A=(C|0)==103;B=(g|0)!=0;o=g-((C|0)!=102?h:0)+((B&A)<<31>>31)|0;if((o|0)<(((m-D>>2)*9|0)+-9|0)){s=o+9216|0;z=(s|0)/9|0;o=E+(z+-1023<<2)|0;s=((s|0)%9|0)+1|0;if((s|0)<9){q=10;do{q=q*10|0;s=s+1|0}while((s|0)!=9)}else q=10;x=k[o>>2]|0;y=(x>>>0)%(q>>>0)|0;if((y|0)==0?(E+(z+-1022<<2)|0)==(m|0):0)q=w;else K=163;do if((K|0)==163){K=0;v=(((x>>>0)/(q>>>0)|0)&1|0)==0?9007199254740992.0:9007199254740994.0;s=(q|0)/2|0;do if(y>>>0<s>>>0)n=.5;else{if((y|0)==(s|0)?(E+(z+-1022<<2)|0)==(m|0):0){n=1.0;break}n=1.5}while(0);do if(F){if((i[G>>0]|0)!=45)break;v=-v;n=-n}while(0);s=x-y|0;k[o>>2]=s;if(!(v+n!=v)){q=w;break}C=s+q|0;k[o>>2]=C;if(C>>>0>999999999){h=w;while(1){q=o+-4|0;k[o>>2]=0;if(q>>>0<h>>>0){h=h+-4|0;k[h>>2]=0}C=(k[q>>2]|0)+1|0;k[q>>2]=C;if(C>>>0>999999999)o=q;else{w=h;o=q;break}}}h=(D-w>>2)*9|0;s=k[w>>2]|0;if(s>>>0<10){q=w;break}else q=10;do{q=q*10|0;h=h+1|0}while(s>>>0>=q>>>0);q=w}while(0);C=o+4|0;w=q;m=m>>>0>C>>>0?C:m}y=0-h|0;while(1){if(m>>>0<=w>>>0){z=0;C=m;break}o=m+-4|0;if(!(k[o>>2]|0))m=o;else{z=1;C=m;break}}do if(A){g=(B&1^1)+g|0;if((g|0)>(h|0)&(h|0)>-5){u=u+-1|0;g=g+-1-h|0}else{u=u+-2|0;g=g+-1|0}m=H&8;if(m)break;do if(z){m=k[C+-4>>2]|0;if(!m){o=9;break}if(!((m>>>0)%10|0)){q=10;o=0}else{o=0;break}do{q=q*10|0;o=o+1|0}while(((m>>>0)%(q>>>0)|0|0)==0)}else o=9;while(0);m=((C-D>>2)*9|0)+-9|0;if((u|32|0)==102){m=m-o|0;m=(m|0)<0?0:m;g=(g|0)<(m|0)?g:m;m=0;break}else{m=m+h-o|0;m=(m|0)<0?0:m;g=(g|0)<(m|0)?g:m;m=0;break}}else m=H&8;while(0);x=g|m;q=(x|0)!=0&1;s=(u|32|0)==102;if(s){h=(h|0)>0?h:0;u=0}else{o=(h|0)<0?y:h;o=rj(o,((o|0)<0)<<31>>31,X)|0;if((_-o|0)<2)do{o=o+-1|0;i[o>>0]=48}while((_-o|0)<2);i[o+-1>>0]=(h>>31&2)+43;D=o+-2|0;i[D>>0]=u;h=_-D|0;u=D}y=F+1+g+q+h|0;sj(a,32,J,y,H);if(!(k[a>>2]&32))Li(G,F,a)|0;sj(a,48,J,y,H^65536);do if(s){o=w>>>0>E>>>0?E:w;h=o;do{m=rj(k[h>>2]|0,0,R)|0;do if((h|0)==(o|0)){if((m|0)!=(R|0))break;i[T>>0]=48;m=T}else{if(m>>>0<=ca>>>0)break;do{m=m+-1|0;i[m>>0]=48}while(m>>>0>ca>>>0)}while(0);if(!(k[a>>2]&32))Li(m,S-m|0,a)|0;h=h+4|0}while(h>>>0<=E>>>0);do if(x){if(k[a>>2]&32)break;Li(55211,1,a)|0}while(0);if((g|0)>0&h>>>0<C>>>0){m=h;while(1){h=rj(k[m>>2]|0,0,R)|0;if(h>>>0>ca>>>0)do{h=h+-1|0;i[h>>0]=48}while(h>>>0>ca>>>0);if(!(k[a>>2]&32))Li(h,(g|0)>9?9:g,a)|0;m=m+4|0;h=g+-9|0;if(!((g|0)>9&m>>>0<C>>>0)){g=h;break}else g=h}}sj(a,48,g+9|0,9,0)}else{s=z?C:w+4|0;if((g|0)>-1){q=(m|0)==0;o=w;do{h=rj(k[o>>2]|0,0,R)|0;if((h|0)==(R|0)){i[T>>0]=48;h=T}do if((o|0)==(w|0)){m=h+1|0;if(!(k[a>>2]&32))Li(h,1,a)|0;if(q&(g|0)<1){h=m;break}if(k[a>>2]&32){h=m;break}Li(55211,1,a)|0;h=m}else{if(h>>>0<=ca>>>0)break;do{h=h+-1|0;i[h>>0]=48}while(h>>>0>ca>>>0)}while(0);m=S-h|0;if(!(k[a>>2]&32))Li(h,(g|0)>(m|0)?m:g,a)|0;g=g-m|0;o=o+4|0}while(o>>>0<s>>>0&(g|0)>-1)}sj(a,48,g+18|0,18,0);if(k[a>>2]&32)break;Li(u,_-u|0,a)|0}while(0);sj(a,32,J,y,H^8192);g=(y|0)<(J|0)?J:y}else{s=(u&32|0)!=0;q=n!=n|0.0!=0.0;h=q?0:F;o=h+3|0;sj(a,32,J,o,m);g=k[a>>2]|0;if(!(g&32)){Li(G,h,a)|0;g=k[a>>2]|0}if(!(g&32))Li(q?(s?55203:55207):s?55195:55199,3,a)|0;sj(a,32,J,o,H^8192);g=(o|0)<(J|0)?J:o}while(0);w=I;continue a}default:{m=H;h=o;s=0;u=55159;g=N}}while(0);g:do if((K|0)==64){m=aa;h=k[m>>2]|0;m=k[m+4>>2]|0;q=u&32;if(!((h|0)==0&(m|0)==0)){g=N;do{g=g+-1|0;i[g>>0]=l[55143+(h&15)>>0]|q;h=_t(h|0,m|0,4)|0;m=M}while(!((h|0)==0&(m|0)==0));K=aa;if((s&8|0)==0|(k[K>>2]|0)==0&(k[K+4>>2]|0)==0){h=s;s=0;q=55159;K=77}else{h=s;s=2;q=55159+(u>>4)|0;K=77}}else{g=N;h=s;s=0;q=55159;K=77}}else if((K|0)==76){g=rj(g,h,N)|0;h=H;s=m;K=77}else if((K|0)==82){K=0;H=Zi(g,0,o)|0;G=(H|0)==0;w=g;h=G?o:H-g|0;s=0;u=55159;g=G?g+o|0:H}else if((K|0)==86){K=0;h=0;g=0;q=k[aa>>2]|0;while(1){m=k[q>>2]|0;if(!m)break;g=wi(ea,m)|0;if((g|0)<0|g>>>0>(o-h|0)>>>0)break;h=g+h|0;if(o>>>0>h>>>0)q=q+4|0;else break}if((g|0)<0){f=-1;break a}sj(a,32,J,h,H);if(!h){g=0;K=98}else{m=0;o=k[aa>>2]|0;while(1){g=k[o>>2]|0;if(!g){g=h;K=98;break g}g=wi(ea,g)|0;m=g+m|0;if((m|0)>(h|0)){g=h;K=98;break g}if(!(k[a>>2]&32))Li(ea,g,a)|0;if(m>>>0>=h>>>0){g=h;K=98;break}else o=o+4|0}}}while(0);if((K|0)==98){K=0;sj(a,32,J,g,H^8192);w=I;g=(J|0)>(g|0)?J:g;continue}if((K|0)==77){K=0;m=(o|0)>-1?h&-65537:h;h=aa;h=(k[h>>2]|0)!=0|(k[h+4>>2]|0)!=0;if((o|0)!=0|h){h=(h&1^1)+(U-g)|0;w=g;h=(o|0)>(h|0)?o:h;u=q;g=N}else{w=N;h=0;u=q;g=N}}q=g-w|0;h=(h|0)<(q|0)?q:h;o=s+h|0;g=(J|0)<(o|0)?o:J;sj(a,32,g,o,m);if(!(k[a>>2]&32))Li(u,s,a)|0;sj(a,48,g,o,m^65536);sj(a,48,h,q,0);if(!(k[a>>2]&32))Li(w,q,a)|0;sj(a,32,g,o,m^8192);w=I}h:do if((K|0)==245)if(!a)if(b){f=1;while(1){b=k[e+(f<<2)>>2]|0;if(!b)break;qj(d+(f<<3)|0,b,c);f=f+1|0;if((f|0)>=10){f=1;break h}}if((f|0)<10)while(1){if(k[e+(f<<2)>>2]|0){f=-1;break h}f=f+1|0;if((f|0)>=10){f=1;break}}else f=1}else f=0;while(0);r=ga;return f|0}function mj(a,b,c){a=a|0;b=b|0;c=c|0;return Fi(a,b,c)|0}function nj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0,f=0,g=0,h=0;h=r;r=r+112|0;g=h;e=g;f=e+112|0;do{k[e>>2]=0;e=e+4|0}while((e|0)<(f|0));e=g+4|0;k[e>>2]=a;f=g+8|0;k[f>>2]=-1;k[g+44>>2]=a;k[g+76>>2]=-1;Wh(g,0);d=+Uh(g,c,1);c=(k[e>>2]|0)-(k[f>>2]|0)+(k[g+108>>2]|0)|0;if(b)k[b>>2]=(c|0)!=0?a+c|0:a;r=h;return +d}function oj(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;i=r;r=r+112|0;h=i;k[h>>2]=0;f=h+4|0;k[f>>2]=a;k[h+44>>2]=a;g=h+8|0;k[g>>2]=(a|0)<0?-1:a+2147483647|0;k[h+76>>2]=-1;Wh(h,0);d=Vh(h,c,1,d,e)|0;if(b)k[b>>2]=a+((k[f>>2]|0)+(k[h+108>>2]|0)-(k[g>>2]|0));r=i;return d|0}function pj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=a+20|0;e=k[d>>2]|0;a=(k[a+16>>2]|0)-e|0;a=a>>>0>c>>>0?c:a;$t(e|0,b|0,a|0)|0;k[d>>2]=(k[d>>2]|0)+a;return c|0}function qj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0.0;a:do if(b>>>0<=20)do switch(b|0){case 9:{d=(k[c>>2]|0)+(4-1)&~(4-1);b=k[d>>2]|0;k[c>>2]=d+4;k[a>>2]=b;break a}case 10:{d=(k[c>>2]|0)+(4-1)&~(4-1);b=k[d>>2]|0;k[c>>2]=d+4;d=a;k[d>>2]=b;k[d+4>>2]=((b|0)<0)<<31>>31;break a}case 11:{d=(k[c>>2]|0)+(4-1)&~(4-1);b=k[d>>2]|0;k[c>>2]=d+4;d=a;k[d>>2]=b;k[d+4>>2]=0;break a}case 12:{d=(k[c>>2]|0)+(8-1)&~(8-1);b=d;e=k[b>>2]|0;b=k[b+4>>2]|0;k[c>>2]=d+8;d=a;k[d>>2]=e;k[d+4>>2]=b;break a}case 13:{e=(k[c>>2]|0)+(4-1)&~(4-1);d=k[e>>2]|0;k[c>>2]=e+4;d=(d&65535)<<16>>16;e=a;k[e>>2]=d;k[e+4>>2]=((d|0)<0)<<31>>31;break a}case 14:{e=(k[c>>2]|0)+(4-1)&~(4-1);d=k[e>>2]|0;k[c>>2]=e+4;e=a;k[e>>2]=d&65535;k[e+4>>2]=0;break a}case 15:{e=(k[c>>2]|0)+(4-1)&~(4-1);d=k[e>>2]|0;k[c>>2]=e+4;d=(d&255)<<24>>24;e=a;k[e>>2]=d;k[e+4>>2]=((d|0)<0)<<31>>31;break a}case 16:{e=(k[c>>2]|0)+(4-1)&~(4-1);d=k[e>>2]|0;k[c>>2]=e+4;e=a;k[e>>2]=d&255;k[e+4>>2]=0;break a}case 17:{e=(k[c>>2]|0)+(8-1)&~(8-1);f=+p[e>>3];k[c>>2]=e+8;p[a>>3]=f;break a}case 18:{e=(k[c>>2]|0)+(8-1)&~(8-1);f=+p[e>>3];k[c>>2]=e+8;p[a>>3]=f;break a}default:break a}while(0);while(0);return}function rj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if(b>>>0>0|(b|0)==0&a>>>0>4294967295)while(1){d=ju(a|0,b|0,10,0)|0;c=c+-1|0;i[c>>0]=d|48;d=iu(a|0,b|0,10,0)|0;if(b>>>0>9|(b|0)==9&a>>>0>4294967295){a=d;b=M}else{a=d;break}}if(a)while(1){c=c+-1|0;i[c>>0]=(a>>>0)%10|0|48;if(a>>>0<10)break;else a=(a>>>0)/10|0}return c|0}function sj(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;h=r;r=r+256|0;g=h;do if((c|0)>(d|0)&(e&73728|0)==0){e=c-d|0;Yt(g|0,b|0,(e>>>0>256?256:e)|0)|0;b=k[a>>2]|0;f=(b&32|0)==0;if(e>>>0>255){d=c-d|0;do{if(f){Li(g,256,a)|0;b=k[a>>2]|0}e=e+-256|0;f=(b&32|0)==0}while(e>>>0>255);if(f)e=d&255;else break}else if(!f)break;Li(g,e,a)|0}while(0);r=h;return}function tj(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;do if(a>>>0<245){o=a>>>0<11?16:a+11&-8;a=o>>>3;h=k[10101]|0;c=h>>>a;if(c&3){a=(c&1^1)+a|0;d=a<<1;c=40444+(d<<2)|0;d=40444+(d+2<<2)|0;e=k[d>>2]|0;f=e+8|0;g=k[f>>2]|0;do if((c|0)!=(g|0)){if(g>>>0<(k[10105]|0)>>>0)Pa();b=g+12|0;if((k[b>>2]|0)==(e|0)){k[b>>2]=c;k[d>>2]=g;break}else Pa()}else k[10101]=h&~(1<<a);while(0);M=a<<3;k[e+4>>2]=M|3;M=e+(M|4)|0;k[M>>2]=k[M>>2]|1;M=f;return M|0}g=k[10103]|0;if(o>>>0>g>>>0){if(c){d=2<<a;d=c<<a&(d|0-d);d=(d&0-d)+-1|0;i=d>>>12&16;d=d>>>i;e=d>>>5&8;d=d>>>e;f=d>>>2&4;d=d>>>f;c=d>>>1&2;d=d>>>c;a=d>>>1&1;a=(e|i|f|c|a)+(d>>>a)|0;d=a<<1;c=40444+(d<<2)|0;d=40444+(d+2<<2)|0;f=k[d>>2]|0;i=f+8|0;e=k[i>>2]|0;do if((c|0)!=(e|0)){if(e>>>0<(k[10105]|0)>>>0)Pa();b=e+12|0;if((k[b>>2]|0)==(f|0)){k[b>>2]=c;k[d>>2]=e;j=k[10103]|0;break}else Pa()}else{k[10101]=h&~(1<<a);j=g}while(0);M=a<<3;g=M-o|0;k[f+4>>2]=o|3;h=f+o|0;k[f+(o|4)>>2]=g|1;k[f+M>>2]=g;if(j){e=k[10106]|0;c=j>>>3;b=c<<1;d=40444+(b<<2)|0;a=k[10101]|0;c=1<<c;if(a&c){a=40444+(b+2<<2)|0;b=k[a>>2]|0;if(b>>>0<(k[10105]|0)>>>0)Pa();else{l=a;m=b}}else{k[10101]=a|c;l=40444+(b+2<<2)|0;m=d}k[l>>2]=e;k[m+12>>2]=e;k[e+8>>2]=m;k[e+12>>2]=d}k[10103]=g;k[10106]=h;M=i;return M|0}a=k[10102]|0;if(a){c=(a&0-a)+-1|0;L=c>>>12&16;c=c>>>L;K=c>>>5&8;c=c>>>K;M=c>>>2&4;c=c>>>M;a=c>>>1&2;c=c>>>a;d=c>>>1&1;d=k[40708+((K|L|M|a|d)+(c>>>d)<<2)>>2]|0;c=(k[d+4>>2]&-8)-o|0;a=d;while(1){b=k[a+16>>2]|0;if(!b){b=k[a+20>>2]|0;if(!b){i=c;break}}a=(k[b+4>>2]&-8)-o|0;M=a>>>0<c>>>0;c=M?a:c;a=b;d=M?b:d}f=k[10105]|0;if(d>>>0<f>>>0)Pa();h=d+o|0;if(d>>>0>=h>>>0)Pa();g=k[d+24>>2]|0;c=k[d+12>>2]|0;do if((c|0)==(d|0)){a=d+20|0;b=k[a>>2]|0;if(!b){a=d+16|0;b=k[a>>2]|0;if(!b){n=0;break}}while(1){c=b+20|0;e=k[c>>2]|0;if(e){b=e;a=c;continue}c=b+16|0;e=k[c>>2]|0;if(!e)break;else{b=e;a=c}}if(a>>>0<f>>>0)Pa();else{k[a>>2]=0;n=b;break}}else{e=k[d+8>>2]|0;if(e>>>0<f>>>0)Pa();b=e+12|0;if((k[b>>2]|0)!=(d|0))Pa();a=c+8|0;if((k[a>>2]|0)==(d|0)){k[b>>2]=c;k[a>>2]=e;n=c;break}else Pa()}while(0);do if(g){b=k[d+28>>2]|0;a=40708+(b<<2)|0;if((d|0)==(k[a>>2]|0)){k[a>>2]=n;if(!n){k[10102]=k[10102]&~(1<<b);break}}else{if(g>>>0<(k[10105]|0)>>>0)Pa();b=g+16|0;if((k[b>>2]|0)==(d|0))k[b>>2]=n;else k[g+20>>2]=n;if(!n)break}a=k[10105]|0;if(n>>>0<a>>>0)Pa();k[n+24>>2]=g;b=k[d+16>>2]|0;do if(b)if(b>>>0<a>>>0)Pa();else{k[n+16>>2]=b;k[b+24>>2]=n;break}while(0);b=k[d+20>>2]|0;if(b)if(b>>>0<(k[10105]|0)>>>0)Pa();else{k[n+20>>2]=b;k[b+24>>2]=n;break}}while(0);if(i>>>0<16){M=i+o|0;k[d+4>>2]=M|3;M=d+(M+4)|0;k[M>>2]=k[M>>2]|1}else{k[d+4>>2]=o|3;k[d+(o|4)>>2]=i|1;k[d+(i+o)>>2]=i;b=k[10103]|0;if(b){f=k[10106]|0;c=b>>>3;b=c<<1;e=40444+(b<<2)|0;a=k[10101]|0;c=1<<c;if(a&c){b=40444+(b+2<<2)|0;a=k[b>>2]|0;if(a>>>0<(k[10105]|0)>>>0)Pa();else{p=b;q=a}}else{k[10101]=a|c;p=40444+(b+2<<2)|0;q=e}k[p>>2]=f;k[q+12>>2]=f;k[f+8>>2]=q;k[f+12>>2]=e}k[10103]=i;k[10106]=h}M=d+8|0;return M|0}else q=o}else q=o}else if(a>>>0<=4294967231){a=a+11|0;m=a&-8;l=k[10102]|0;if(l){c=0-m|0;a=a>>>8;if(a)if(m>>>0>16777215)j=31;else{q=(a+1048320|0)>>>16&8;v=a<<q;p=(v+520192|0)>>>16&4;v=v<<p;j=(v+245760|0)>>>16&2;j=14-(p|q|j)+(v<<j>>>15)|0;j=m>>>(j+7|0)&1|j<<1}else j=0;a=k[40708+(j<<2)>>2]|0;a:do if(!a){e=0;a=0;v=86}else{g=c;e=0;h=m<<((j|0)==31?0:25-(j>>>1)|0);i=a;a=0;while(1){f=k[i+4>>2]&-8;c=f-m|0;if(c>>>0<g>>>0)if((f|0)==(m|0)){f=i;a=i;v=90;break a}else a=i;else c=g;v=k[i+20>>2]|0;i=k[i+16+(h>>>31<<2)>>2]|0;e=(v|0)==0|(v|0)==(i|0)?e:v;if(!i){v=86;break}else{g=c;h=h<<1}}}while(0);if((v|0)==86){if((e|0)==0&(a|0)==0){a=2<<j;a=l&(a|0-a);if(!a){q=m;break}a=(a&0-a)+-1|0;n=a>>>12&16;a=a>>>n;l=a>>>5&8;a=a>>>l;p=a>>>2&4;a=a>>>p;q=a>>>1&2;a=a>>>q;e=a>>>1&1;e=k[40708+((l|n|p|q|e)+(a>>>e)<<2)>>2]|0;a=0}if(!e){h=c;i=a}else{f=e;v=90}}if((v|0)==90)while(1){v=0;q=(k[f+4>>2]&-8)-m|0;e=q>>>0<c>>>0;c=e?q:c;a=e?f:a;e=k[f+16>>2]|0;if(e){f=e;v=90;continue}f=k[f+20>>2]|0;if(!f){h=c;i=a;break}else v=90}if((i|0)!=0?h>>>0<((k[10103]|0)-m|0)>>>0:0){e=k[10105]|0;if(i>>>0<e>>>0)Pa();g=i+m|0;if(i>>>0>=g>>>0)Pa();f=k[i+24>>2]|0;c=k[i+12>>2]|0;do if((c|0)==(i|0)){a=i+20|0;b=k[a>>2]|0;if(!b){a=i+16|0;b=k[a>>2]|0;if(!b){o=0;break}}while(1){c=b+20|0;d=k[c>>2]|0;if(d){b=d;a=c;continue}c=b+16|0;d=k[c>>2]|0;if(!d)break;else{b=d;a=c}}if(a>>>0<e>>>0)Pa();else{k[a>>2]=0;o=b;break}}else{d=k[i+8>>2]|0;if(d>>>0<e>>>0)Pa();b=d+12|0;if((k[b>>2]|0)!=(i|0))Pa();a=c+8|0;if((k[a>>2]|0)==(i|0)){k[b>>2]=c;k[a>>2]=d;o=c;break}else Pa()}while(0);do if(f){b=k[i+28>>2]|0;a=40708+(b<<2)|0;if((i|0)==(k[a>>2]|0)){k[a>>2]=o;if(!o){k[10102]=k[10102]&~(1<<b);break}}else{if(f>>>0<(k[10105]|0)>>>0)Pa();b=f+16|0;if((k[b>>2]|0)==(i|0))k[b>>2]=o;else k[f+20>>2]=o;if(!o)break}a=k[10105]|0;if(o>>>0<a>>>0)Pa();k[o+24>>2]=f;b=k[i+16>>2]|0;do if(b)if(b>>>0<a>>>0)Pa();else{k[o+16>>2]=b;k[b+24>>2]=o;break}while(0);b=k[i+20>>2]|0;if(b)if(b>>>0<(k[10105]|0)>>>0)Pa();else{k[o+20>>2]=b;k[b+24>>2]=o;break}}while(0);b:do if(h>>>0>=16){k[i+4>>2]=m|3;k[i+(m|4)>>2]=h|1;k[i+(h+m)>>2]=h;b=h>>>3;if(h>>>0<256){a=b<<1;d=40444+(a<<2)|0;c=k[10101]|0;b=1<<b;if(c&b){b=40444+(a+2<<2)|0;a=k[b>>2]|0;if(a>>>0<(k[10105]|0)>>>0)Pa();else{s=b;t=a}}else{k[10101]=c|b;s=40444+(a+2<<2)|0;t=d}k[s>>2]=g;k[t+12>>2]=g;k[i+(m+8)>>2]=t;k[i+(m+12)>>2]=d;break}b=h>>>8;if(b)if(h>>>0>16777215)d=31;else{L=(b+1048320|0)>>>16&8;M=b<<L;K=(M+520192|0)>>>16&4;M=M<<K;d=(M+245760|0)>>>16&2;d=14-(K|L|d)+(M<<d>>>15)|0;d=h>>>(d+7|0)&1|d<<1}else d=0;b=40708+(d<<2)|0;k[i+(m+28)>>2]=d;k[i+(m+20)>>2]=0;k[i+(m+16)>>2]=0;a=k[10102]|0;c=1<<d;if(!(a&c)){k[10102]=a|c;k[b>>2]=g;k[i+(m+24)>>2]=b;k[i+(m+12)>>2]=g;k[i+(m+8)>>2]=g;break}b=k[b>>2]|0;c:do if((k[b+4>>2]&-8|0)!=(h|0)){d=h<<((d|0)==31?0:25-(d>>>1)|0);while(1){a=b+16+(d>>>31<<2)|0;c=k[a>>2]|0;if(!c)break;if((k[c+4>>2]&-8|0)==(h|0)){y=c;break c}else{d=d<<1;b=c}}if(a>>>0<(k[10105]|0)>>>0)Pa();else{k[a>>2]=g;k[i+(m+24)>>2]=b;k[i+(m+12)>>2]=g;k[i+(m+8)>>2]=g;break b}}else y=b;while(0);b=y+8|0;a=k[b>>2]|0;M=k[10105]|0;if(a>>>0>=M>>>0&y>>>0>=M>>>0){k[a+12>>2]=g;k[b>>2]=g;k[i+(m+8)>>2]=a;k[i+(m+12)>>2]=y;k[i+(m+24)>>2]=0;break}else Pa()}else{M=h+m|0;k[i+4>>2]=M|3;M=i+(M+4)|0;k[M>>2]=k[M>>2]|1}while(0);M=i+8|0;return M|0}else q=m}else q=m}else q=-1;while(0);c=k[10103]|0;if(c>>>0>=q>>>0){b=c-q|0;a=k[10106]|0;if(b>>>0>15){k[10106]=a+q;k[10103]=b;k[a+(q+4)>>2]=b|1;k[a+c>>2]=b;k[a+4>>2]=q|3}else{k[10103]=0;k[10106]=0;k[a+4>>2]=c|3;M=a+(c+4)|0;k[M>>2]=k[M>>2]|1}M=a+8|0;return M|0}a=k[10104]|0;if(a>>>0>q>>>0){L=a-q|0;k[10104]=L;M=k[10107]|0;k[10107]=M+q;k[M+(q+4)>>2]=L|1;k[M+4>>2]=q|3;M=M+8|0;return M|0}do if(!(k[10219]|0)){a=hb(30)|0;if(!(a+-1&a)){k[10221]=a;k[10220]=a;k[10222]=-1;k[10223]=-1;k[10224]=0;k[10212]=0;y=(zb(0)|0)&-16^1431655768;k[10219]=y;break}else Pa()}while(0);i=q+48|0;h=k[10221]|0;j=q+47|0;g=h+j|0;h=0-h|0;l=g&h;if(l>>>0<=q>>>0){M=0;return M|0}a=k[10211]|0;if((a|0)!=0?(t=k[10209]|0,y=t+l|0,y>>>0<=t>>>0|y>>>0>a>>>0):0){M=0;return M|0}d:do if(!(k[10212]&4)){a=k[10107]|0;e:do if(a){e=40852;while(1){c=k[e>>2]|0;if(c>>>0<=a>>>0?(r=e+4|0,(c+(k[r>>2]|0)|0)>>>0>a>>>0):0){f=e;a=r;break}e=k[e+8>>2]|0;if(!e){v=174;break e}}c=g-(k[10104]|0)&h;if(c>>>0<2147483647){e=bb(c|0)|0;y=(e|0)==((k[f>>2]|0)+(k[a>>2]|0)|0);a=y?c:0;if(y){if((e|0)!=(-1|0)){w=e;p=a;v=194;break d}}else v=184}else a=0}else v=174;while(0);do if((v|0)==174){f=bb(0)|0;if((f|0)!=(-1|0)){a=f;c=k[10220]|0;e=c+-1|0;if(!(e&a))c=l;else c=l-a+(e+a&0-c)|0;a=k[10209]|0;e=a+c|0;if(c>>>0>q>>>0&c>>>0<2147483647){y=k[10211]|0;if((y|0)!=0?e>>>0<=a>>>0|e>>>0>y>>>0:0){a=0;break}e=bb(c|0)|0;y=(e|0)==(f|0);a=y?c:0;if(y){w=f;p=a;v=194;break d}else v=184}else a=0}else a=0}while(0);f:do if((v|0)==184){f=0-c|0;do if(i>>>0>c>>>0&(c>>>0<2147483647&(e|0)!=(-1|0))?(u=k[10221]|0,u=j-c+u&0-u,u>>>0<2147483647):0)if((bb(u|0)|0)==(-1|0)){bb(f|0)|0;break f}else{c=u+c|0;break}while(0);if((e|0)!=(-1|0)){w=e;p=c;v=194;break d}}while(0);k[10212]=k[10212]|4;v=191}else{a=0;v=191}while(0);if((((v|0)==191?l>>>0<2147483647:0)?(w=bb(l|0)|0,x=bb(0)|0,w>>>0<x>>>0&((w|0)!=(-1|0)&(x|0)!=(-1|0))):0)?(z=x-w|0,A=z>>>0>(q+40|0)>>>0,A):0){p=A?z:a;v=194}if((v|0)==194){a=(k[10209]|0)+p|0;k[10209]=a;if(a>>>0>(k[10210]|0)>>>0)k[10210]=a;g=k[10107]|0;g:do if(g){f=40852;do{a=k[f>>2]|0;c=f+4|0;e=k[c>>2]|0;if((w|0)==(a+e|0)){B=a;C=c;D=e;E=f;v=204;break}f=k[f+8>>2]|0}while((f|0)!=0);if(((v|0)==204?(k[E+12>>2]&8|0)==0:0)?g>>>0<w>>>0&g>>>0>=B>>>0:0){k[C>>2]=D+p;M=(k[10104]|0)+p|0;L=g+8|0;L=(L&7|0)==0?0:0-L&7;K=M-L|0;k[10107]=g+L;k[10104]=K;k[g+(L+4)>>2]=K|1;k[g+(M+4)>>2]=40;k[10108]=k[10223];break}a=k[10105]|0;if(w>>>0<a>>>0){k[10105]=w;a=w}c=w+p|0;f=40852;while(1){if((k[f>>2]|0)==(c|0)){e=f;c=f;v=212;break}f=k[f+8>>2]|0;if(!f){c=40852;break}}if((v|0)==212)if(!(k[c+12>>2]&8)){k[e>>2]=w;n=c+4|0;k[n>>2]=(k[n>>2]|0)+p;n=w+8|0;n=(n&7|0)==0?0:0-n&7;j=w+(p+8)|0;j=(j&7|0)==0?0:0-j&7;b=w+(j+p)|0;m=n+q|0;o=w+m|0;l=b-(w+n)-q|0;k[w+(n+4)>>2]=q|3;h:do if((b|0)!=(g|0)){if((b|0)==(k[10106]|0)){M=(k[10103]|0)+l|0;k[10103]=M;k[10106]=o;k[w+(m+4)>>2]=M|1;k[w+(M+m)>>2]=M;break}h=p+4|0;c=k[w+(h+j)>>2]|0;if((c&3|0)==1){i=c&-8;f=c>>>3;i:do if(c>>>0>=256){g=k[w+((j|24)+p)>>2]|0;d=k[w+(p+12+j)>>2]|0;do if((d|0)==(b|0)){e=j|16;d=w+(h+e)|0;c=k[d>>2]|0;if(!c){d=w+(e+p)|0;c=k[d>>2]|0;if(!c){J=0;break}}while(1){e=c+20|0;f=k[e>>2]|0;if(f){c=f;d=e;continue}e=c+16|0;f=k[e>>2]|0;if(!f)break;else{c=f;d=e}}if(d>>>0<a>>>0)Pa();else{k[d>>2]=0;J=c;break}}else{e=k[w+((j|8)+p)>>2]|0;if(e>>>0<a>>>0)Pa();a=e+12|0;if((k[a>>2]|0)!=(b|0))Pa();c=d+8|0;if((k[c>>2]|0)==(b|0)){k[a>>2]=d;k[c>>2]=e;J=d;break}else Pa()}while(0);if(!g)break;a=k[w+(p+28+j)>>2]|0;c=40708+(a<<2)|0;do if((b|0)!=(k[c>>2]|0)){if(g>>>0<(k[10105]|0)>>>0)Pa();a=g+16|0;if((k[a>>2]|0)==(b|0))k[a>>2]=J;else k[g+20>>2]=J;if(!J)break i}else{k[c>>2]=J;if(J)break;k[10102]=k[10102]&~(1<<a);break i}while(0);c=k[10105]|0;if(J>>>0<c>>>0)Pa();k[J+24>>2]=g;b=j|16;a=k[w+(b+p)>>2]|0;do if(a)if(a>>>0<c>>>0)Pa();else{k[J+16>>2]=a;k[a+24>>2]=J;break}while(0);b=k[w+(h+b)>>2]|0;if(!b)break;if(b>>>0<(k[10105]|0)>>>0)Pa();else{k[J+20>>2]=b;k[b+24>>2]=J;break}}else{d=k[w+((j|8)+p)>>2]|0;e=k[w+(p+12+j)>>2]|0;c=40444+(f<<1<<2)|0;do if((d|0)!=(c|0)){if(d>>>0<a>>>0)Pa();if((k[d+12>>2]|0)==(b|0))break;Pa()}while(0);if((e|0)==(d|0)){k[10101]=k[10101]&~(1<<f);break}do if((e|0)==(c|0))F=e+8|0;else{if(e>>>0<a>>>0)Pa();a=e+8|0;if((k[a>>2]|0)==(b|0)){F=a;break}Pa()}while(0);k[d+12>>2]=e;k[F>>2]=d}while(0);b=w+((i|j)+p)|0;e=i+l|0}else e=l;b=b+4|0;k[b>>2]=k[b>>2]&-2;k[w+(m+4)>>2]=e|1;k[w+(e+m)>>2]=e;b=e>>>3;if(e>>>0<256){a=b<<1;d=40444+(a<<2)|0;c=k[10101]|0;b=1<<b;do if(!(c&b)){k[10101]=c|b;K=40444+(a+2<<2)|0;L=d}else{b=40444+(a+2<<2)|0;a=k[b>>2]|0;if(a>>>0>=(k[10105]|0)>>>0){K=b;L=a;break}Pa()}while(0);k[K>>2]=o;k[L+12>>2]=o;k[w+(m+8)>>2]=L;k[w+(m+12)>>2]=d;break}b=e>>>8;do if(!b)d=0;else{if(e>>>0>16777215){d=31;break}K=(b+1048320|0)>>>16&8;L=b<<K;J=(L+520192|0)>>>16&4;L=L<<J;d=(L+245760|0)>>>16&2;d=14-(J|K|d)+(L<<d>>>15)|0;d=e>>>(d+7|0)&1|d<<1}while(0);b=40708+(d<<2)|0;k[w+(m+28)>>2]=d;k[w+(m+20)>>2]=0;k[w+(m+16)>>2]=0;a=k[10102]|0;c=1<<d;if(!(a&c)){k[10102]=a|c;k[b>>2]=o;k[w+(m+24)>>2]=b;k[w+(m+12)>>2]=o;k[w+(m+8)>>2]=o;break}b=k[b>>2]|0;j:do if((k[b+4>>2]&-8|0)!=(e|0)){d=e<<((d|0)==31?0:25-(d>>>1)|0);while(1){a=b+16+(d>>>31<<2)|0;c=k[a>>2]|0;if(!c)break;if((k[c+4>>2]&-8|0)==(e|0)){M=c;break j}else{d=d<<1;b=c}}if(a>>>0<(k[10105]|0)>>>0)Pa();else{k[a>>2]=o;k[w+(m+24)>>2]=b;k[w+(m+12)>>2]=o;k[w+(m+8)>>2]=o;break h}}else M=b;while(0);b=M+8|0;a=k[b>>2]|0;L=k[10105]|0;if(a>>>0>=L>>>0&M>>>0>=L>>>0){k[a+12>>2]=o;k[b>>2]=o;k[w+(m+8)>>2]=a;k[w+(m+12)>>2]=M;k[w+(m+24)>>2]=0;break}else Pa()}else{M=(k[10104]|0)+l|0;k[10104]=M;k[10107]=o;k[w+(m+4)>>2]=M|1}while(0);M=w+(n|8)|0;return M|0}else c=40852;while(1){a=k[c>>2]|0;if(a>>>0<=g>>>0?(b=k[c+4>>2]|0,d=a+b|0,d>>>0>g>>>0):0)break;c=k[c+8>>2]|0}e=a+(b+-39)|0;a=a+(b+-47+((e&7|0)==0?0:0-e&7))|0;e=g+16|0;a=a>>>0<e>>>0?g:a;b=a+8|0;c=w+8|0;c=(c&7|0)==0?0:0-c&7;M=p+-40-c|0;k[10107]=w+c;k[10104]=M;k[w+(c+4)>>2]=M|1;k[w+(p+-36)>>2]=40;k[10108]=k[10223];c=a+4|0;k[c>>2]=27;k[b>>2]=k[10213];k[b+4>>2]=k[10214];k[b+8>>2]=k[10215];k[b+12>>2]=k[10216];k[10213]=w;k[10214]=p;k[10216]=0;k[10215]=b;b=a+28|0;k[b>>2]=7;if((a+32|0)>>>0<d>>>0)do{M=b;b=b+4|0;k[b>>2]=7}while((M+8|0)>>>0<d>>>0);if((a|0)!=(g|0)){f=a-g|0;k[c>>2]=k[c>>2]&-2;k[g+4>>2]=f|1;k[a>>2]=f;b=f>>>3;if(f>>>0<256){a=b<<1;d=40444+(a<<2)|0;c=k[10101]|0;b=1<<b;if(c&b){b=40444+(a+2<<2)|0;a=k[b>>2]|0;if(a>>>0<(k[10105]|0)>>>0)Pa();else{G=b;H=a}}else{k[10101]=c|b;G=40444+(a+2<<2)|0;H=d}k[G>>2]=g;k[H+12>>2]=g;k[g+8>>2]=H;k[g+12>>2]=d;break}b=f>>>8;if(b)if(f>>>0>16777215)d=31;else{L=(b+1048320|0)>>>16&8;M=b<<L;K=(M+520192|0)>>>16&4;M=M<<K;d=(M+245760|0)>>>16&2;d=14-(K|L|d)+(M<<d>>>15)|0;d=f>>>(d+7|0)&1|d<<1}else d=0;c=40708+(d<<2)|0;k[g+28>>2]=d;k[g+20>>2]=0;k[e>>2]=0;b=k[10102]|0;a=1<<d;if(!(b&a)){k[10102]=b|a;k[c>>2]=g;k[g+24>>2]=c;k[g+12>>2]=g;k[g+8>>2]=g;break}b=k[c>>2]|0;k:do if((k[b+4>>2]&-8|0)!=(f|0)){d=f<<((d|0)==31?0:25-(d>>>1)|0);while(1){a=b+16+(d>>>31<<2)|0;c=k[a>>2]|0;if(!c)break;if((k[c+4>>2]&-8|0)==(f|0)){I=c;break k}else{d=d<<1;b=c}}if(a>>>0<(k[10105]|0)>>>0)Pa();else{k[a>>2]=g;k[g+24>>2]=b;k[g+12>>2]=g;k[g+8>>2]=g;break g}}else I=b;while(0);b=I+8|0;a=k[b>>2]|0;M=k[10105]|0;if(a>>>0>=M>>>0&I>>>0>=M>>>0){k[a+12>>2]=g;k[b>>2]=g;k[g+8>>2]=a;k[g+12>>2]=I;k[g+24>>2]=0;break}else Pa()}}else{M=k[10105]|0;if((M|0)==0|w>>>0<M>>>0)k[10105]=w;k[10213]=w;k[10214]=p;k[10216]=0;k[10110]=k[10219];k[10109]=-1;b=0;do{M=b<<1;L=40444+(M<<2)|0;k[40444+(M+3<<2)>>2]=L;k[40444+(M+2<<2)>>2]=L;b=b+1|0}while((b|0)!=32);M=w+8|0;M=(M&7|0)==0?0:0-M&7;L=p+-40-M|0;k[10107]=w+M;k[10104]=L;k[w+(M+4)>>2]=L|1;k[w+(p+-36)>>2]=40;k[10108]=k[10223]}while(0);b=k[10104]|0;if(b>>>0>q>>>0){L=b-q|0;k[10104]=L;M=k[10107]|0;k[10107]=M+q;k[M+(q+4)>>2]=L|1;k[M+4>>2]=q|3;M=M+8|0;return M|0}}M=Sh()|0;k[M>>2]=12;M=0;return M|0}function uj(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;if(!a)return;b=a+-8|0;h=k[10105]|0;if(b>>>0<h>>>0)Pa();c=k[a+-4>>2]|0;d=c&3;if((d|0)==1)Pa();o=c&-8;q=a+(o+-8)|0;do if(!(c&1)){b=k[b>>2]|0;if(!d)return;i=-8-b|0;l=a+i|0;m=b+o|0;if(l>>>0<h>>>0)Pa();if((l|0)==(k[10106]|0)){b=a+(o+-4)|0;c=k[b>>2]|0;if((c&3|0)!=3){u=l;f=m;break}k[10103]=m;k[b>>2]=c&-2;k[a+(i+4)>>2]=m|1;k[q>>2]=m;return}e=b>>>3;if(b>>>0<256){d=k[a+(i+8)>>2]|0;c=k[a+(i+12)>>2]|0;b=40444+(e<<1<<2)|0;if((d|0)!=(b|0)){if(d>>>0<h>>>0)Pa();if((k[d+12>>2]|0)!=(l|0))Pa()}if((c|0)==(d|0)){k[10101]=k[10101]&~(1<<e);u=l;f=m;break}if((c|0)!=(b|0)){if(c>>>0<h>>>0)Pa();b=c+8|0;if((k[b>>2]|0)==(l|0))g=b;else Pa()}else g=c+8|0;k[d+12>>2]=c;k[g>>2]=d;u=l;f=m;break}g=k[a+(i+24)>>2]|0;d=k[a+(i+12)>>2]|0;do if((d|0)==(l|0)){c=a+(i+20)|0;b=k[c>>2]|0;if(!b){c=a+(i+16)|0;b=k[c>>2]|0;if(!b){j=0;break}}while(1){d=b+20|0;e=k[d>>2]|0;if(e){b=e;c=d;continue}d=b+16|0;e=k[d>>2]|0;if(!e)break;else{b=e;c=d}}if(c>>>0<h>>>0)Pa();else{k[c>>2]=0;j=b;break}}else{e=k[a+(i+8)>>2]|0;if(e>>>0<h>>>0)Pa();b=e+12|0;if((k[b>>2]|0)!=(l|0))Pa();c=d+8|0;if((k[c>>2]|0)==(l|0)){k[b>>2]=d;k[c>>2]=e;j=d;break}else Pa()}while(0);if(g){b=k[a+(i+28)>>2]|0;c=40708+(b<<2)|0;if((l|0)==(k[c>>2]|0)){k[c>>2]=j;if(!j){k[10102]=k[10102]&~(1<<b);u=l;f=m;break}}else{if(g>>>0<(k[10105]|0)>>>0)Pa();b=g+16|0;if((k[b>>2]|0)==(l|0))k[b>>2]=j;else k[g+20>>2]=j;if(!j){u=l;f=m;break}}c=k[10105]|0;if(j>>>0<c>>>0)Pa();k[j+24>>2]=g;b=k[a+(i+16)>>2]|0;do if(b)if(b>>>0<c>>>0)Pa();else{k[j+16>>2]=b;k[b+24>>2]=j;break}while(0);b=k[a+(i+20)>>2]|0;if(b)if(b>>>0<(k[10105]|0)>>>0)Pa();else{k[j+20>>2]=b;k[b+24>>2]=j;u=l;f=m;break}else{u=l;f=m}}else{u=l;f=m}}else{u=b;f=o}while(0);if(u>>>0>=q>>>0)Pa();b=a+(o+-4)|0;c=k[b>>2]|0;if(!(c&1))Pa();if(!(c&2)){if((q|0)==(k[10107]|0)){t=(k[10104]|0)+f|0;k[10104]=t;k[10107]=u;k[u+4>>2]=t|1;if((u|0)!=(k[10106]|0))return;k[10106]=0;k[10103]=0;return}if((q|0)==(k[10106]|0)){t=(k[10103]|0)+f|0;k[10103]=t;k[10106]=u;k[u+4>>2]=t|1;k[u+t>>2]=t;return}f=(c&-8)+f|0;e=c>>>3;do if(c>>>0>=256){g=k[a+(o+16)>>2]|0;b=k[a+(o|4)>>2]|0;do if((b|0)==(q|0)){c=a+(o+12)|0;b=k[c>>2]|0;if(!b){c=a+(o+8)|0;b=k[c>>2]|0;if(!b){p=0;break}}while(1){d=b+20|0;e=k[d>>2]|0;if(e){b=e;c=d;continue}d=b+16|0;e=k[d>>2]|0;if(!e)break;else{b=e;c=d}}if(c>>>0<(k[10105]|0)>>>0)Pa();else{k[c>>2]=0;p=b;break}}else{c=k[a+o>>2]|0;if(c>>>0<(k[10105]|0)>>>0)Pa();d=c+12|0;if((k[d>>2]|0)!=(q|0))Pa();e=b+8|0;if((k[e>>2]|0)==(q|0)){k[d>>2]=b;k[e>>2]=c;p=b;break}else Pa()}while(0);if(g){b=k[a+(o+20)>>2]|0;c=40708+(b<<2)|0;if((q|0)==(k[c>>2]|0)){k[c>>2]=p;if(!p){k[10102]=k[10102]&~(1<<b);break}}else{if(g>>>0<(k[10105]|0)>>>0)Pa();b=g+16|0;if((k[b>>2]|0)==(q|0))k[b>>2]=p;else k[g+20>>2]=p;if(!p)break}c=k[10105]|0;if(p>>>0<c>>>0)Pa();k[p+24>>2]=g;b=k[a+(o+8)>>2]|0;do if(b)if(b>>>0<c>>>0)Pa();else{k[p+16>>2]=b;k[b+24>>2]=p;break}while(0);b=k[a+(o+12)>>2]|0;if(b)if(b>>>0<(k[10105]|0)>>>0)Pa();else{k[p+20>>2]=b;k[b+24>>2]=p;break}}}else{d=k[a+o>>2]|0;c=k[a+(o|4)>>2]|0;b=40444+(e<<1<<2)|0;if((d|0)!=(b|0)){if(d>>>0<(k[10105]|0)>>>0)Pa();if((k[d+12>>2]|0)!=(q|0))Pa()}if((c|0)==(d|0)){k[10101]=k[10101]&~(1<<e);break}if((c|0)!=(b|0)){if(c>>>0<(k[10105]|0)>>>0)Pa();b=c+8|0;if((k[b>>2]|0)==(q|0))n=b;else Pa()}else n=c+8|0;k[d+12>>2]=c;k[n>>2]=d}while(0);k[u+4>>2]=f|1;k[u+f>>2]=f;if((u|0)==(k[10106]|0)){k[10103]=f;return}}else{k[b>>2]=c&-2;k[u+4>>2]=f|1;k[u+f>>2]=f}b=f>>>3;if(f>>>0<256){c=b<<1;e=40444+(c<<2)|0;d=k[10101]|0;b=1<<b;if(d&b){b=40444+(c+2<<2)|0;c=k[b>>2]|0;if(c>>>0<(k[10105]|0)>>>0)Pa();else{r=b;s=c}}else{k[10101]=d|b;r=40444+(c+2<<2)|0;s=e}k[r>>2]=u;k[s+12>>2]=u;k[u+8>>2]=s;k[u+12>>2]=e;return}b=f>>>8;if(b)if(f>>>0>16777215)e=31;else{r=(b+1048320|0)>>>16&8;s=b<<r;q=(s+520192|0)>>>16&4;s=s<<q;e=(s+245760|0)>>>16&2;e=14-(q|r|e)+(s<<e>>>15)|0;e=f>>>(e+7|0)&1|e<<1}else e=0;b=40708+(e<<2)|0;k[u+28>>2]=e;k[u+20>>2]=0;k[u+16>>2]=0;c=k[10102]|0;d=1<<e;a:do if(c&d){b=k[b>>2]|0;b:do if((k[b+4>>2]&-8|0)!=(f|0)){e=f<<((e|0)==31?0:25-(e>>>1)|0);while(1){c=b+16+(e>>>31<<2)|0;d=k[c>>2]|0;if(!d)break;if((k[d+4>>2]&-8|0)==(f|0)){t=d;break b}else{e=e<<1;b=d}}if(c>>>0<(k[10105]|0)>>>0)Pa();else{k[c>>2]=u;k[u+24>>2]=b;k[u+12>>2]=u;k[u+8>>2]=u;break a}}else t=b;while(0);b=t+8|0;c=k[b>>2]|0;s=k[10105]|0;if(c>>>0>=s>>>0&t>>>0>=s>>>0){k[c+12>>2]=u;k[b>>2]=u;k[u+8>>2]=c;k[u+12>>2]=t;k[u+24>>2]=0;break}else Pa()}else{k[10102]=c|d;k[b>>2]=u;k[u+24>>2]=b;k[u+12>>2]=u;k[u+8>>2]=u}while(0);u=(k[10109]|0)+-1|0;k[10109]=u;if(!u)b=40860;else return;while(1){b=k[b>>2]|0;if(!b)break;else b=b+8|0}k[10109]=-1;return}function vj(a,b){a=a|0;b=b|0;var c=0;if(a){c=ia(b,a)|0;if((b|a)>>>0>65535)c=((c>>>0)/(a>>>0)|0|0)==(b|0)?c:-1}else c=0;b=tj(c)|0;if(!b)return b|0;if(!(k[b+-4>>2]&3))return b|0;Yt(b|0,0,c|0)|0;return b|0}function wj(a,b){a=a|0;b=b|0;var c=0,d=0;if(!a){a=tj(b)|0;return a|0}if(b>>>0>4294967231){a=Sh()|0;k[a>>2]=12;a=0;return a|0}c=xj(a+-8|0,b>>>0<11?16:b+11&-8)|0;if(c){a=c+8|0;return a|0}c=tj(b)|0;if(!c){a=0;return a|0}d=k[a+-4>>2]|0;d=(d&-8)-((d&3|0)==0?8:4)|0;$t(c|0,a|0,(d>>>0<b>>>0?d:b)|0)|0;uj(a);a=c;return a|0}function xj(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;o=a+4|0;p=k[o>>2]|0;i=p&-8;l=a+i|0;h=k[10105]|0;c=p&3;if(!((c|0)!=1&a>>>0>=h>>>0&a>>>0<l>>>0))Pa();d=a+(i|4)|0;e=k[d>>2]|0;if(!(e&1))Pa();if(!c){if(b>>>0<256){a=0;return a|0}if(i>>>0>=(b+4|0)>>>0?(i-b|0)>>>0<=k[10221]<<1>>>0:0)return a|0;a=0;return a|0}if(i>>>0>=b>>>0){c=i-b|0;if(c>>>0<=15)return a|0;k[o>>2]=p&1|b|2;k[a+(b+4)>>2]=c|3;k[d>>2]=k[d>>2]|1;yj(a+b|0,c);return a|0}if((l|0)==(k[10107]|0)){c=(k[10104]|0)+i|0;if(c>>>0<=b>>>0){a=0;return a|0}n=c-b|0;k[o>>2]=p&1|b|2;k[a+(b+4)>>2]=n|1;k[10107]=a+b;k[10104]=n;return a|0}if((l|0)==(k[10106]|0)){d=(k[10103]|0)+i|0;if(d>>>0<b>>>0){a=0;return a|0}c=d-b|0;if(c>>>0>15){k[o>>2]=p&1|b|2;k[a+(b+4)>>2]=c|1;k[a+d>>2]=c;d=a+(d+4)|0;k[d>>2]=k[d>>2]&-2;d=a+b|0}else{k[o>>2]=p&1|d|2;d=a+(d+4)|0;k[d>>2]=k[d>>2]|1;d=0;c=0}k[10103]=c;k[10106]=d;return a|0}if(e&2){a=0;return a|0}m=(e&-8)+i|0;if(m>>>0<b>>>0){a=0;return a|0}n=m-b|0;f=e>>>3;do if(e>>>0>=256){g=k[a+(i+24)>>2]|0;f=k[a+(i+12)>>2]|0;do if((f|0)==(l|0)){d=a+(i+20)|0;c=k[d>>2]|0;if(!c){d=a+(i+16)|0;c=k[d>>2]|0;if(!c){j=0;break}}while(1){e=c+20|0;f=k[e>>2]|0;if(f){c=f;d=e;continue}e=c+16|0;f=k[e>>2]|0;if(!f)break;else{c=f;d=e}}if(d>>>0<h>>>0)Pa();else{k[d>>2]=0;j=c;break}}else{e=k[a+(i+8)>>2]|0;if(e>>>0<h>>>0)Pa();c=e+12|0;if((k[c>>2]|0)!=(l|0))Pa();d=f+8|0;if((k[d>>2]|0)==(l|0)){k[c>>2]=f;k[d>>2]=e;j=f;break}else Pa()}while(0);if(g){c=k[a+(i+28)>>2]|0;d=40708+(c<<2)|0;if((l|0)==(k[d>>2]|0)){k[d>>2]=j;if(!j){k[10102]=k[10102]&~(1<<c);break}}else{if(g>>>0<(k[10105]|0)>>>0)Pa();c=g+16|0;if((k[c>>2]|0)==(l|0))k[c>>2]=j;else k[g+20>>2]=j;if(!j)break}d=k[10105]|0;if(j>>>0<d>>>0)Pa();k[j+24>>2]=g;c=k[a+(i+16)>>2]|0;do if(c)if(c>>>0<d>>>0)Pa();else{k[j+16>>2]=c;k[c+24>>2]=j;break}while(0);c=k[a+(i+20)>>2]|0;if(c)if(c>>>0<(k[10105]|0)>>>0)Pa();else{k[j+20>>2]=c;k[c+24>>2]=j;break}}}else{e=k[a+(i+8)>>2]|0;d=k[a+(i+12)>>2]|0;c=40444+(f<<1<<2)|0;if((e|0)!=(c|0)){if(e>>>0<h>>>0)Pa();if((k[e+12>>2]|0)!=(l|0))Pa()}if((d|0)==(e|0)){k[10101]=k[10101]&~(1<<f);break}if((d|0)!=(c|0)){if(d>>>0<h>>>0)Pa();c=d+8|0;if((k[c>>2]|0)==(l|0))g=c;else Pa()}else g=d+8|0;k[e+12>>2]=d;k[g>>2]=e}while(0);if(n>>>0<16){k[o>>2]=m|p&1|2;b=a+(m|4)|0;k[b>>2]=k[b>>2]|1;return a|0}else{k[o>>2]=p&1|b|2;k[a+(b+4)>>2]=n|3;p=a+(m|4)|0;k[p>>2]=k[p>>2]|1;yj(a+b|0,n);return a|0}return 0}function yj(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;q=a+b|0;c=k[a+4>>2]|0;do if(!(c&1)){j=k[a>>2]|0;if(!(c&3))return;n=a+(0-j)|0;m=j+b|0;i=k[10105]|0;if(n>>>0<i>>>0)Pa();if((n|0)==(k[10106]|0)){d=a+(b+4)|0;c=k[d>>2]|0;if((c&3|0)!=3){t=n;g=m;break}k[10103]=m;k[d>>2]=c&-2;k[a+(4-j)>>2]=m|1;k[q>>2]=m;return}f=j>>>3;if(j>>>0<256){e=k[a+(8-j)>>2]|0;d=k[a+(12-j)>>2]|0;c=40444+(f<<1<<2)|0;if((e|0)!=(c|0)){if(e>>>0<i>>>0)Pa();if((k[e+12>>2]|0)!=(n|0))Pa()}if((d|0)==(e|0)){k[10101]=k[10101]&~(1<<f);t=n;g=m;break}if((d|0)!=(c|0)){if(d>>>0<i>>>0)Pa();c=d+8|0;if((k[c>>2]|0)==(n|0))h=c;else Pa()}else h=d+8|0;k[e+12>>2]=d;k[h>>2]=e;t=n;g=m;break}h=k[a+(24-j)>>2]|0;e=k[a+(12-j)>>2]|0;do if((e|0)==(n|0)){e=16-j|0;d=a+(e+4)|0;c=k[d>>2]|0;if(!c){d=a+e|0;c=k[d>>2]|0;if(!c){l=0;break}}while(1){e=c+20|0;f=k[e>>2]|0;if(f){c=f;d=e;continue}e=c+16|0;f=k[e>>2]|0;if(!f)break;else{c=f;d=e}}if(d>>>0<i>>>0)Pa();else{k[d>>2]=0;l=c;break}}else{f=k[a+(8-j)>>2]|0;if(f>>>0<i>>>0)Pa();c=f+12|0;if((k[c>>2]|0)!=(n|0))Pa();d=e+8|0;if((k[d>>2]|0)==(n|0)){k[c>>2]=e;k[d>>2]=f;l=e;break}else Pa()}while(0);if(h){c=k[a+(28-j)>>2]|0;d=40708+(c<<2)|0;if((n|0)==(k[d>>2]|0)){k[d>>2]=l;if(!l){k[10102]=k[10102]&~(1<<c);t=n;g=m;break}}else{if(h>>>0<(k[10105]|0)>>>0)Pa();c=h+16|0;if((k[c>>2]|0)==(n|0))k[c>>2]=l;else k[h+20>>2]=l;if(!l){t=n;g=m;break}}e=k[10105]|0;if(l>>>0<e>>>0)Pa();k[l+24>>2]=h;c=16-j|0;d=k[a+c>>2]|0;do if(d)if(d>>>0<e>>>0)Pa();else{k[l+16>>2]=d;k[d+24>>2]=l;break}while(0);c=k[a+(c+4)>>2]|0;if(c)if(c>>>0<(k[10105]|0)>>>0)Pa();else{k[l+20>>2]=c;k[c+24>>2]=l;t=n;g=m;break}else{t=n;g=m}}else{t=n;g=m}}else{t=a;g=b}while(0);i=k[10105]|0;if(q>>>0<i>>>0)Pa();c=a+(b+4)|0;d=k[c>>2]|0;if(!(d&2)){if((q|0)==(k[10107]|0)){s=(k[10104]|0)+g|0;k[10104]=s;k[10107]=t;k[t+4>>2]=s|1;if((t|0)!=(k[10106]|0))return;k[10106]=0;k[10103]=0;return}if((q|0)==(k[10106]|0)){s=(k[10103]|0)+g|0;k[10103]=s;k[10106]=t;k[t+4>>2]=s|1;k[t+s>>2]=s;return}g=(d&-8)+g|0;f=d>>>3;do if(d>>>0>=256){h=k[a+(b+24)>>2]|0;e=k[a+(b+12)>>2]|0;do if((e|0)==(q|0)){d=a+(b+20)|0;c=k[d>>2]|0;if(!c){d=a+(b+16)|0;c=k[d>>2]|0;if(!c){p=0;break}}while(1){e=c+20|0;f=k[e>>2]|0;if(f){c=f;d=e;continue}e=c+16|0;f=k[e>>2]|0;if(!f)break;else{c=f;d=e}}if(d>>>0<i>>>0)Pa();else{k[d>>2]=0;p=c;break}}else{f=k[a+(b+8)>>2]|0;if(f>>>0<i>>>0)Pa();c=f+12|0;if((k[c>>2]|0)!=(q|0))Pa();d=e+8|0;if((k[d>>2]|0)==(q|0)){k[c>>2]=e;k[d>>2]=f;p=e;break}else Pa()}while(0);if(h){c=k[a+(b+28)>>2]|0;d=40708+(c<<2)|0;if((q|0)==(k[d>>2]|0)){k[d>>2]=p;if(!p){k[10102]=k[10102]&~(1<<c);break}}else{if(h>>>0<(k[10105]|0)>>>0)Pa();c=h+16|0;if((k[c>>2]|0)==(q|0))k[c>>2]=p;else k[h+20>>2]=p;if(!p)break}d=k[10105]|0;if(p>>>0<d>>>0)Pa();k[p+24>>2]=h;c=k[a+(b+16)>>2]|0;do if(c)if(c>>>0<d>>>0)Pa();else{k[p+16>>2]=c;k[c+24>>2]=p;break}while(0);c=k[a+(b+20)>>2]|0;if(c)if(c>>>0<(k[10105]|0)>>>0)Pa();else{k[p+20>>2]=c;k[c+24>>2]=p;break}}}else{e=k[a+(b+8)>>2]|0;d=k[a+(b+12)>>2]|0;c=40444+(f<<1<<2)|0;if((e|0)!=(c|0)){if(e>>>0<i>>>0)Pa();if((k[e+12>>2]|0)!=(q|0))Pa()}if((d|0)==(e|0)){k[10101]=k[10101]&~(1<<f);break}if((d|0)!=(c|0)){if(d>>>0<i>>>0)Pa();c=d+8|0;if((k[c>>2]|0)==(q|0))o=c;else Pa()}else o=d+8|0;k[e+12>>2]=d;k[o>>2]=e}while(0);k[t+4>>2]=g|1;k[t+g>>2]=g;if((t|0)==(k[10106]|0)){k[10103]=g;return}}else{k[c>>2]=d&-2;k[t+4>>2]=g|1;k[t+g>>2]=g}c=g>>>3;if(g>>>0<256){d=c<<1;f=40444+(d<<2)|0;e=k[10101]|0;c=1<<c;if(e&c){c=40444+(d+2<<2)|0;d=k[c>>2]|0;if(d>>>0<(k[10105]|0)>>>0)Pa();else{r=c;s=d}}else{k[10101]=e|c;r=40444+(d+2<<2)|0;s=f}k[r>>2]=t;k[s+12>>2]=t;k[t+8>>2]=s;k[t+12>>2]=f;return}c=g>>>8;if(c)if(g>>>0>16777215)f=31;else{r=(c+1048320|0)>>>16&8;s=c<<r;q=(s+520192|0)>>>16&4;s=s<<q;f=(s+245760|0)>>>16&2;f=14-(q|r|f)+(s<<f>>>15)|0;f=g>>>(f+7|0)&1|f<<1}else f=0;c=40708+(f<<2)|0;k[t+28>>2]=f;k[t+20>>2]=0;k[t+16>>2]=0;d=k[10102]|0;e=1<<f;if(!(d&e)){k[10102]=d|e;k[c>>2]=t;k[t+24>>2]=c;k[t+12>>2]=t;k[t+8>>2]=t;return}c=k[c>>2]|0;a:do if((k[c+4>>2]&-8|0)!=(g|0)){f=g<<((f|0)==31?0:25-(f>>>1)|0);while(1){d=c+16+(f>>>31<<2)|0;e=k[d>>2]|0;if(!e)break;if((k[e+4>>2]&-8|0)==(g|0)){c=e;break a}else{f=f<<1;c=e}}if(d>>>0<(k[10105]|0)>>>0)Pa();k[d>>2]=t;k[t+24>>2]=c;k[t+12>>2]=t;k[t+8>>2]=t;return}while(0);d=c+8|0;e=k[d>>2]|0;s=k[10105]|0;if(!(e>>>0>=s>>>0&c>>>0>=s>>>0))Pa();k[e+12>>2]=t;k[d>>2]=t;k[t+8>>2]=e;k[t+12>>2]=c;k[t+24>>2]=0;return}function zj(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;d=k[9204]|0;Dj(41580,d,41636);k[10225]=42424;k[10227]=42444;k[10226]=0;a=k[10603]|0;x=0;ra(52,40900+a|0,41580);f=x;x=0;if(f&1){f=Wa()|0;Vk(40908);fb(f|0)}k[40900+(a+72)>>2]=0;k[40900+(a+76)>>2]=-1;e=k[9205]|0;Ej(41684,e,41644);k[10247]=42504;k[10248]=42524;c=k[10623]|0;x=0;ra(52,40988+c|0,41684);f=x;x=0;if(f&1){f=Wa()|0;Vk(40992);fb(f|0)}a=c+72|0;k[40988+a>>2]=0;b=c+76|0;k[40988+b>>2]=-1;f=k[9203]|0;Ej(41732,f,41652);k[10268]=42504;k[10269]=42524;x=0;ra(52,41072+c|0,41732);g=x;x=0;if(g&1){g=Wa()|0;Vk(41076);fb(g|0)}k[41072+a>>2]=0;k[41072+b>>2]=-1;g=k[41072+((k[(k[10268]|0)+-12>>2]|0)+24)>>2]|0;k[10289]=42504;k[10290]=42524;x=0;ra(52,41156+c|0,g|0);g=x;x=0;if(g&1){g=Wa()|0;Vk(41160);fb(g|0)}k[41156+a>>2]=0;k[41156+b>>2]=-1;k[40900+((k[(k[10225]|0)+-12>>2]|0)+72)>>2]=40988;a=41072+((k[(k[10268]|0)+-12>>2]|0)+4)|0;k[a>>2]=k[a>>2]|8192;k[41072+((k[(k[10268]|0)+-12>>2]|0)+72)>>2]=40988;Fj(41780,d,41660);k[10310]=42464;k[10312]=42484;k[10311]=0;a=k[10613]|0;x=0;ra(52,41240+a|0,41780);g=x;x=0;if(g&1){g=Wa()|0;_k(41248);fb(g|0)}k[41240+(a+72)>>2]=0;k[41240+(a+76)>>2]=-1;Gj(41836,e,41668);k[10332]=42544;k[10333]=42564;c=k[10633]|0;x=0;ra(52,41328+c|0,41836);g=x;x=0;if(g&1){g=Wa()|0;_k(41332);fb(g|0)}a=c+72|0;k[41328+a>>2]=0;b=c+76|0;k[41328+b>>2]=-1;Gj(41884,f,41676);k[10353]=42544;k[10354]=42564;x=0;ra(52,41412+c|0,41884);g=x;x=0;if(g&1){g=Wa()|0;_k(41416);fb(g|0)}k[41412+a>>2]=0;k[41412+b>>2]=-1;g=k[41412+((k[(k[10353]|0)+-12>>2]|0)+24)>>2]|0;k[10374]=42544;k[10375]=42564;x=0;ra(52,41496+c|0,g|0);g=x;x=0;if(g&1){g=Wa()|0;_k(41500);fb(g|0)}else{k[41496+a>>2]=0;k[41496+b>>2]=-1;k[41240+((k[(k[10310]|0)+-12>>2]|0)+72)>>2]=41328;g=41412+((k[(k[10353]|0)+-12>>2]|0)+4)|0;k[g>>2]=k[g>>2]|8192;k[41412+((k[(k[10353]|0)+-12>>2]|0)+72)>>2]=41328;return}}function Aj(a){a=a|0;x=0;ta(69,40988)|0;a=x;x=0;if(((!(a&1)?(x=0,ta(69,41156)|0,a=x,x=0,!(a&1)):0)?(x=0,ta(70,41328)|0,a=x,x=0,!(a&1)):0)?(x=0,ta(70,41496)|0,a=x,x=0,!(a&1)):0)return;a=Wa(0)|0;mc(a)}function Bj(){zj(0);tb(163,55213,w|0)|0;return}function Cj(){return}function Dj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;e=r;r=r+16|0;f=e+4|0;d=e;cl(a);k[a>>2]=42132;k[a+32>>2]=b;k[a+40>>2]=c;k[a+48>>2]=-1;i[a+52>>0]=0;tq(f,a+4|0);k[d>>2]=k[f>>2];x=0;ra(13,a|0,d|0);c=x;x=0;if(c&1){f=Wa()|0;uq(d);al(a);fb(f|0)}else{uq(d);r=e;return}}function Ej(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;e=r;r=r+16|0;f=e+4|0;d=e;cl(a);k[a>>2]=42068;k[a+32>>2]=b;tq(f,a+4|0);k[d>>2]=k[f>>2];x=0;b=Aa(26,d|0,43812)|0;f=x;x=0;if(f&1){f=Wa()|0;uq(d);al(a);fb(f|0)}else{uq(d);k[a+36>>2]=b;k[a+40>>2]=c;f=(Ob[k[(k[b>>2]|0)+28>>2]&127](b)|0)&1;i[a+44>>0]=f;r=e;return}}function Fj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;e=r;r=r+16|0;f=e+4|0;d=e;rl(a);k[a>>2]=42004;k[a+32>>2]=b;k[a+40>>2]=c;k[a+48>>2]=-1;i[a+52>>0]=0;tq(f,a+4|0);k[d>>2]=k[f>>2];x=0;ra(11,a|0,d|0);c=x;x=0;if(c&1){f=Wa()|0;uq(d);pl(a);fb(f|0)}else{uq(d);r=e;return}}function Gj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;e=r;r=r+16|0;f=e+4|0;d=e;rl(a);k[a>>2]=41940;k[a+32>>2]=b;tq(f,a+4|0);k[d>>2]=k[f>>2];x=0;b=Aa(26,d|0,43820)|0;f=x;x=0;if(f&1){f=Wa()|0;uq(d);pl(a);fb(f|0)}else{uq(d);k[a+36>>2]=b;k[a+40>>2]=c;f=(Ob[k[(k[b>>2]|0)+28>>2]&127](b)|0)&1;i[a+44>>0]=f;r=e;return}}function Hj(a){a=a|0;pl(a);Sg(a);return}function Ij(a,b){a=a|0;b=b|0;Ob[k[(k[a>>2]|0)+24>>2]&127](a)|0;b=wq(b,43820)|0;k[a+36>>2]=b;b=(Ob[k[(k[b>>2]|0)+28>>2]&127](b)|0)&1;i[a+44>>0]=b;return}function Jj(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;j=r;r=r+16|0;h=j+8|0;g=j;c=a+36|0;d=a+40|0;e=h+8|0;f=h;b=a+32|0;a:while(1){a=k[c>>2]|0;a=Wb[k[(k[a>>2]|0)+20>>2]&31](a,k[d>>2]|0,h,e,g)|0;l=(k[g>>2]|0)-f|0;if((Mi(h,1,l,k[b>>2]|0)|0)!=(l|0)){a=-1;break}switch(a|0){case 1:break;case 2:{a=-1;break a}default:{i=4;break a}}}if((i|0)==4)a=((Ji(k[b>>2]|0)|0)!=0)<<31>>31;r=j;return a|0}function Kj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;a:do if(!(i[a+44>>0]|0))if((c|0)>0){d=b;b=0;while(1){if((Vb[k[(k[a>>2]|0)+52>>2]&63](a,k[d>>2]|0)|0)==-1)break a;b=b+1|0;if((b|0)<(c|0))d=d+4|0;else break}}else b=0;else b=Mi(b,4,c,k[a+32>>2]|0)|0;while(0);return b|0}function Lj(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0;s=r;r=r+32|0;o=s+16|0;c=s+8|0;n=s+4|0;m=s;p=(b|0)==-1;a:do if(!p){k[c>>2]=b;if(i[a+44>>0]|0)if((Mi(c,4,1,k[a+32>>2]|0)|0)==1){q=11;break}else{c=-1;break}k[n>>2]=o;j=c+4|0;l=a+36|0;e=a+40|0;f=o+8|0;g=o;h=a+32|0;while(1){a=k[l>>2]|0;a=ac[k[(k[a>>2]|0)+12>>2]&15](a,k[e>>2]|0,c,j,m,o,f,n)|0;if((k[m>>2]|0)==(c|0)){c=-1;break a}if((a|0)==3)break;d=(a|0)==1;if(a>>>0>=2){c=-1;break a}a=(k[n>>2]|0)-g|0;if((Mi(o,1,a,k[h>>2]|0)|0)!=(a|0)){c=-1;break a}if(d)c=d?k[m>>2]|0:c;else{q=11;break a}}if((Mi(c,1,1,k[h>>2]|0)|0)!=1)c=-1;else q=11}else q=11;while(0);if((q|0)==11)c=p?0:b;r=s;return c|0}function Mj(a,b){a=a|0;b=b|0;var c=0,d=0;d=wq(b,43820)|0;c=a+36|0;k[c>>2]=d;d=Ob[k[(k[d>>2]|0)+24>>2]&127](d)|0;b=a+44|0;k[b>>2]=d;c=k[c>>2]|0;c=(Ob[k[(k[c>>2]|0)+28>>2]&127](c)|0)&1;i[a+53>>0]=c;if((k[b>>2]|0)>8)Fp(55239);return}function Nj(a){a=a|0;pl(a);Sg(a);return}function Oj(a){a=a|0;return Rj(a,0)|0}function Pj(a){a=a|0;return Rj(a,1)|0}function Qj(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0;l=r;r=r+32|0;j=l+16|0;h=l+8|0;d=l+4|0;e=l;f=a+52|0;c=(i[f>>0]|0)!=0;a:do if((b|0)==-1)if(c)b=-1;else{b=k[a+48>>2]|0;i[f>>0]=(b|0)!=-1&1}else{g=a+48|0;b:do if(c){k[d>>2]=k[g>>2];c=k[a+36>>2]|0;switch(ac[k[(k[c>>2]|0)+12>>2]&15](c,k[a+40>>2]|0,d,d+4|0,e,j,j+8|0,h)|0){case 1:case 2:{b=-1;break a}case 3:{i[j>>0]=k[g>>2];k[h>>2]=j+1;break}default:{}}c=a+32|0;while(1){d=k[h>>2]|0;if(d>>>0<=j>>>0)break b;a=d+-1|0;k[h>>2]=a;if((Qi(i[a>>0]|0,k[c>>2]|0)|0)==-1){b=-1;break a}}}while(0);k[g>>2]=b;i[f>>0]=1}while(0);r=l;return b|0}function Rj(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0;q=r;r=r+32|0;p=q+16|0;o=q+8|0;l=q+4|0;m=q;e=a+52|0;a:do if(i[e>>0]|0){d=a+48|0;c=k[d>>2]|0;if(b){k[d>>2]=-1;i[e>>0]=0}}else{c=k[a+44>>2]|0;c=(c|0)>1?c:1;n=a+32|0;if((c|0)>0){e=0;do{d=Ni(k[n>>2]|0)|0;if((d|0)==-1){c=-1;break a}i[p+e>>0]=d;e=e+1|0}while((e|0)<(c|0))}b:do if(!(i[a+53>>0]|0)){g=a+40|0;h=a+36|0;j=o+4|0;c:while(1){s=k[g>>2]|0;e=s;d=k[e>>2]|0;e=k[e+4>>2]|0;t=k[h>>2]|0;f=p+c|0;switch(ac[k[(k[t>>2]|0)+16>>2]&15](t,s,p,f,l,o,j,m)|0){case 2:{c=-1;break a}case 3:break c;case 1:break;default:break b}t=k[g>>2]|0;k[t>>2]=d;k[t+4>>2]=e;if((c|0)==8){c=-1;break a}d=Ni(k[n>>2]|0)|0;if((d|0)==-1){c=-1;break a}i[f>>0]=d;c=c+1|0}k[o>>2]=i[p>>0]}else k[o>>2]=i[p>>0];while(0);if(b){c=k[o>>2]|0;k[a+48>>2]=c;break}while(1){if((c|0)<=0)break;c=c+-1|0;if((Qi(i[p+c>>0]|0,k[n>>2]|0)|0)==-1){c=-1;break a}}c=k[o>>2]|0}while(0);r=q;return c|0}function Sj(a){a=a|0;al(a);Sg(a);return}function Tj(a,b){a=a|0;b=b|0;Ob[k[(k[a>>2]|0)+24>>2]&127](a)|0;b=wq(b,43812)|0;k[a+36>>2]=b;b=(Ob[k[(k[b>>2]|0)+28>>2]&127](b)|0)&1;i[a+44>>0]=b;return}function Uj(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;j=r;r=r+16|0;h=j+8|0;g=j;c=a+36|0;d=a+40|0;e=h+8|0;f=h;b=a+32|0;a:while(1){a=k[c>>2]|0;a=Wb[k[(k[a>>2]|0)+20>>2]&31](a,k[d>>2]|0,h,e,g)|0;l=(k[g>>2]|0)-f|0;if((Mi(h,1,l,k[b>>2]|0)|0)!=(l|0)){a=-1;break}switch(a|0){case 1:break;case 2:{a=-1;break a}default:{i=4;break a}}}if((i|0)==4)a=((Ji(k[b>>2]|0)|0)!=0)<<31>>31;r=j;return a|0}function Vj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;a:do if(!(i[a+44>>0]|0))if((c|0)>0){d=b;b=0;while(1){if((Vb[k[(k[a>>2]|0)+52>>2]&63](a,l[d>>0]|0)|0)==-1)break a;b=b+1|0;if((b|0)<(c|0))d=d+1|0;else break}}else b=0;else b=Mi(b,1,c,k[a+32>>2]|0)|0;while(0);return b|0}function Wj(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0;s=r;r=r+32|0;o=s+16|0;c=s+8|0;n=s+4|0;m=s;p=(b|0)==-1;a:do if(!p){i[c>>0]=b;if(i[a+44>>0]|0)if((Mi(c,1,1,k[a+32>>2]|0)|0)==1){q=11;break}else{c=-1;break}k[n>>2]=o;l=c+1|0;e=a+36|0;f=a+40|0;g=o+8|0;h=o;j=a+32|0;while(1){a=k[e>>2]|0;a=ac[k[(k[a>>2]|0)+12>>2]&15](a,k[f>>2]|0,c,l,m,o,g,n)|0;if((k[m>>2]|0)==(c|0)){c=-1;break a}if((a|0)==3)break;d=(a|0)==1;if(a>>>0>=2){c=-1;break a}a=(k[n>>2]|0)-h|0;if((Mi(o,1,a,k[j>>2]|0)|0)!=(a|0)){c=-1;break a}if(d)c=d?k[m>>2]|0:c;else{q=11;break a}}if((Mi(c,1,1,k[j>>2]|0)|0)!=1)c=-1;else q=11}else q=11;while(0);if((q|0)==11)c=p?0:b;r=s;return c|0}function Xj(a,b){a=a|0;b=b|0;var c=0,d=0;d=wq(b,43812)|0;c=a+36|0;k[c>>2]=d;d=Ob[k[(k[d>>2]|0)+24>>2]&127](d)|0;b=a+44|0;k[b>>2]=d;c=k[c>>2]|0;c=(Ob[k[(k[c>>2]|0)+28>>2]&127](c)|0)&1;i[a+53>>0]=c;if((k[b>>2]|0)>8)Fp(55239);return}function Yj(a){a=a|0;al(a);Sg(a);return}function Zj(a){a=a|0;return ak(a,0)|0}function _j(a){a=a|0;return ak(a,1)|0}function $j(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0;l=r;r=r+32|0;j=l+16|0;h=l+4|0;d=l+8|0;e=l;f=a+52|0;c=(i[f>>0]|0)!=0;a:do if((b|0)==-1)if(c)b=-1;else{b=k[a+48>>2]|0;i[f>>0]=(b|0)!=-1&1}else{g=a+48|0;b:do if(c){i[d>>0]=k[g>>2];c=k[a+36>>2]|0;switch(ac[k[(k[c>>2]|0)+12>>2]&15](c,k[a+40>>2]|0,d,d+1|0,e,j,j+8|0,h)|0){case 1:case 2:{b=-1;break a}case 3:{i[j>>0]=k[g>>2];k[h>>2]=j+1;break}default:{}}c=a+32|0;while(1){d=k[h>>2]|0;if(d>>>0<=j>>>0)break b;a=d+-1|0;k[h>>2]=a;if((Qi(i[a>>0]|0,k[c>>2]|0)|0)==-1){b=-1;break a}}}while(0);k[g>>2]=b;i[f>>0]=1}while(0);r=l;return b|0}
function As(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0;z=r;r=r+320|0;q=z+208|0;g=z+200|0;B=z+24|0;A=z+12|0;t=z+8|0;w=z+40|0;y=z+4|0;u=z;s=Xr(d)|0;$m(B,d,q,g);k[A>>2]=0;k[A+4>>2]=0;k[A+8>>2]=0;if(!(i[A>>0]&1))a=10;else a=(k[A>>2]&-2)+-1|0;x=0;Fa(6,A|0,a|0,0);p=x;x=0;a:do if(!(p&1)){n=A+8|0;o=A+1|0;a=(i[A>>0]&1)==0?o:k[n>>2]|0;k[t>>2]=a;k[y>>2]=w;k[u>>2]=0;p=A+4|0;m=k[g>>2]|0;g=k[b>>2]|0;b:while(1){if(g){d=k[g+12>>2]|0;if((d|0)==(k[g+16>>2]|0)){x=0;d=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;l=x;x=0;if(l&1){C=25;break}}else d=k[d>>2]|0;if((d|0)==-1){k[b>>2]=0;d=0;h=1}else{d=g;h=0}}else{d=0;h=1}j=k[c>>2]|0;do if(j){g=k[j+12>>2]|0;if((g|0)==(k[j+16>>2]|0)){x=0;g=ta(k[(k[j>>2]|0)+36>>2]|0,j|0)|0;l=x;x=0;if(l&1){C=25;break b}}else g=k[g>>2]|0;if((g|0)!=-1)if(h)break;else{g=j;break b}else{k[c>>2]=0;C=17;break}}else C=17;while(0);if((C|0)==17){C=0;if(h){g=0;break}else j=0}g=i[A>>0]|0;g=(g&1)==0?(g&255)>>>1:k[p>>2]|0;if((k[t>>2]|0)==(a+g|0)){x=0;Fa(6,A|0,g<<1|0,0);l=x;x=0;if(l&1){C=25;break}if(!(i[A>>0]&1))a=10;else a=(k[A>>2]&-2)+-1|0;x=0;Fa(6,A|0,a|0,0);l=x;x=0;if(l&1){C=25;break}a=(i[A>>0]&1)==0?o:k[n>>2]|0;k[t>>2]=a+g}h=d+12|0;g=k[h>>2]|0;l=d+16|0;if((g|0)==(k[l>>2]|0)){x=0;g=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;D=x;x=0;if(D&1){C=25;break}}else g=k[g>>2]|0;if(Xm(g,s,a,t,u,m,B,w,y,q)|0){g=j;break}g=k[h>>2]|0;if((g|0)==(k[l>>2]|0)){x=0;ta(k[(k[d>>2]|0)+40>>2]|0,d|0)|0;D=x;x=0;if(D&1){C=25;break}else{g=d;continue}}else{k[h>>2]=g+4;g=d;continue}}if((C|0)==25){a=Wa()|0;break}D=i[B>>0]|0;if((((D&1)==0?(D&255)>>>1:k[B+4>>2]|0)|0)!=0?(v=k[y>>2]|0,(v-w|0)<160):0){D=k[u>>2]|0;k[y>>2]=v+4;k[v>>2]=D}x=0;a=Ea(14,a|0,k[t>>2]|0,e|0,s|0)|0;D=x;x=0;if(!(D&1)){k[f>>2]=a;Ip(B,w,k[y>>2]|0,e);if(d){a=k[d+12>>2]|0;if((a|0)==(k[d+16>>2]|0)){x=0;a=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;D=x;x=0;if(D&1){C=26;break}}else a=k[a>>2]|0;if((a|0)==-1){k[b>>2]=0;d=1}else d=0}else d=1;do if(g){a=k[g+12>>2]|0;if((a|0)==(k[g+16>>2]|0)){x=0;a=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;D=x;x=0;if(D&1){C=26;break a}}else a=k[a>>2]|0;if((a|0)!=-1)if(d)break;else{C=53;break}else{k[c>>2]=0;C=51;break}}else C=51;while(0);if((C|0)==51?d:0)C=53;if((C|0)==53)k[e>>2]=k[e>>2]|2;D=k[b>>2]|0;wk(A);wk(B);r=z;return D|0}else C=26}else C=26;while(0);if((C|0)==26)a=Wa()|0;wk(A);wk(B);fb(a|0);return 0}function Bs(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0;z=r;r=r+320|0;q=z+208|0;g=z+200|0;B=z+24|0;A=z+12|0;t=z+8|0;w=z+40|0;y=z+4|0;u=z;s=Xr(d)|0;$m(B,d,q,g);k[A>>2]=0;k[A+4>>2]=0;k[A+8>>2]=0;if(!(i[A>>0]&1))a=10;else a=(k[A>>2]&-2)+-1|0;x=0;Fa(6,A|0,a|0,0);p=x;x=0;a:do if(!(p&1)){n=A+8|0;o=A+1|0;a=(i[A>>0]&1)==0?o:k[n>>2]|0;k[t>>2]=a;k[y>>2]=w;k[u>>2]=0;p=A+4|0;m=k[g>>2]|0;g=k[b>>2]|0;b:while(1){if(g){d=k[g+12>>2]|0;if((d|0)==(k[g+16>>2]|0)){x=0;d=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;l=x;x=0;if(l&1){C=25;break}}else d=k[d>>2]|0;if((d|0)==-1){k[b>>2]=0;d=0;h=1}else{d=g;h=0}}else{d=0;h=1}j=k[c>>2]|0;do if(j){g=k[j+12>>2]|0;if((g|0)==(k[j+16>>2]|0)){x=0;g=ta(k[(k[j>>2]|0)+36>>2]|0,j|0)|0;l=x;x=0;if(l&1){C=25;break b}}else g=k[g>>2]|0;if((g|0)!=-1)if(h)break;else{g=j;break b}else{k[c>>2]=0;C=17;break}}else C=17;while(0);if((C|0)==17){C=0;if(h){g=0;break}else j=0}g=i[A>>0]|0;g=(g&1)==0?(g&255)>>>1:k[p>>2]|0;if((k[t>>2]|0)==(a+g|0)){x=0;Fa(6,A|0,g<<1|0,0);l=x;x=0;if(l&1){C=25;break}if(!(i[A>>0]&1))a=10;else a=(k[A>>2]&-2)+-1|0;x=0;Fa(6,A|0,a|0,0);l=x;x=0;if(l&1){C=25;break}a=(i[A>>0]&1)==0?o:k[n>>2]|0;k[t>>2]=a+g}h=d+12|0;g=k[h>>2]|0;l=d+16|0;if((g|0)==(k[l>>2]|0)){x=0;g=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;D=x;x=0;if(D&1){C=25;break}}else g=k[g>>2]|0;if(Xm(g,s,a,t,u,m,B,w,y,q)|0){g=j;break}g=k[h>>2]|0;if((g|0)==(k[l>>2]|0)){x=0;ta(k[(k[d>>2]|0)+40>>2]|0,d|0)|0;D=x;x=0;if(D&1){C=25;break}else{g=d;continue}}else{k[h>>2]=g+4;g=d;continue}}if((C|0)==25){a=Wa()|0;break}D=i[B>>0]|0;if((((D&1)==0?(D&255)>>>1:k[B+4>>2]|0)|0)!=0?(v=k[y>>2]|0,(v-w|0)<160):0){D=k[u>>2]|0;k[y>>2]=v+4;k[v>>2]=D}x=0;a=Ea(15,a|0,k[t>>2]|0,e|0,s|0)|0;D=x;x=0;if(!(D&1)){k[f>>2]=a;Ip(B,w,k[y>>2]|0,e);if(d){a=k[d+12>>2]|0;if((a|0)==(k[d+16>>2]|0)){x=0;a=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;D=x;x=0;if(D&1){C=26;break}}else a=k[a>>2]|0;if((a|0)==-1){k[b>>2]=0;d=1}else d=0}else d=1;do if(g){a=k[g+12>>2]|0;if((a|0)==(k[g+16>>2]|0)){x=0;a=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;D=x;x=0;if(D&1){C=26;break a}}else a=k[a>>2]|0;if((a|0)!=-1)if(d)break;else{C=53;break}else{k[c>>2]=0;C=51;break}}else C=51;while(0);if((C|0)==51?d:0)C=53;if((C|0)==53)k[e>>2]=k[e>>2]|2;D=k[b>>2]|0;wk(A);wk(B);r=z;return D|0}else C=26}else C=26;while(0);if((C|0)==26)a=Wa()|0;wk(A);wk(B);fb(a|0);return 0}function Cs(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0;z=r;r=r+320|0;q=z+208|0;g=z+200|0;B=z+24|0;A=z+12|0;t=z+8|0;w=z+40|0;y=z+4|0;u=z;s=Xr(d)|0;$m(B,d,q,g);k[A>>2]=0;k[A+4>>2]=0;k[A+8>>2]=0;if(!(i[A>>0]&1))a=10;else a=(k[A>>2]&-2)+-1|0;x=0;Fa(6,A|0,a|0,0);p=x;x=0;a:do if(!(p&1)){n=A+8|0;o=A+1|0;a=(i[A>>0]&1)==0?o:k[n>>2]|0;k[t>>2]=a;k[y>>2]=w;k[u>>2]=0;p=A+4|0;m=k[g>>2]|0;g=k[b>>2]|0;b:while(1){if(g){d=k[g+12>>2]|0;if((d|0)==(k[g+16>>2]|0)){x=0;d=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;l=x;x=0;if(l&1){C=25;break}}else d=k[d>>2]|0;if((d|0)==-1){k[b>>2]=0;g=0;j=1}else j=0}else{g=0;j=1}h=k[c>>2]|0;do if(h){d=k[h+12>>2]|0;if((d|0)==(k[h+16>>2]|0)){x=0;d=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;l=x;x=0;if(l&1){C=25;break b}}else d=k[d>>2]|0;if((d|0)!=-1)if(j)break;else break b;else{k[c>>2]=0;C=17;break}}else C=17;while(0);if((C|0)==17){C=0;if(j){h=0;break}else h=0}d=i[A>>0]|0;d=(d&1)==0?(d&255)>>>1:k[p>>2]|0;if((k[t>>2]|0)==(a+d|0)){x=0;Fa(6,A|0,d<<1|0,0);l=x;x=0;if(l&1){C=25;break}if(!(i[A>>0]&1))a=10;else a=(k[A>>2]&-2)+-1|0;x=0;Fa(6,A|0,a|0,0);l=x;x=0;if(l&1){C=25;break}a=(i[A>>0]&1)==0?o:k[n>>2]|0;k[t>>2]=a+d}j=g+12|0;d=k[j>>2]|0;l=g+16|0;if((d|0)==(k[l>>2]|0)){x=0;d=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;D=x;x=0;if(D&1){C=25;break}}else d=k[d>>2]|0;if(Xm(d,s,a,t,u,m,B,w,y,q)|0)break;d=k[j>>2]|0;if((d|0)==(k[l>>2]|0)){x=0;ta(k[(k[g>>2]|0)+40>>2]|0,g|0)|0;D=x;x=0;if(D&1){C=25;break}else continue}else{k[j>>2]=d+4;continue}}if((C|0)==25){a=Wa()|0;break}D=i[B>>0]|0;if((((D&1)==0?(D&255)>>>1:k[B+4>>2]|0)|0)!=0?(v=k[y>>2]|0,(v-w|0)<160):0){D=k[u>>2]|0;k[y>>2]=v+4;k[v>>2]=D}x=0;a=Ea(16,a|0,k[t>>2]|0,e|0,s|0)|0;d=M;D=x;x=0;if(!(D&1)){D=f;k[D>>2]=a;k[D+4>>2]=d;Ip(B,w,k[y>>2]|0,e);if(g){a=k[g+12>>2]|0;if((a|0)==(k[g+16>>2]|0)){x=0;a=ta(k[(k[g>>2]|0)+36>>2]|0,g|0)|0;D=x;x=0;if(D&1){C=26;break}}else a=k[a>>2]|0;if((a|0)==-1){k[b>>2]=0;d=1}else d=0}else d=1;do if(h){a=k[h+12>>2]|0;if((a|0)==(k[h+16>>2]|0)){x=0;a=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;D=x;x=0;if(D&1){C=26;break a}}else a=k[a>>2]|0;if((a|0)!=-1)if(d)break;else{C=53;break}else{k[c>>2]=0;C=51;break}}else C=51;while(0);if((C|0)==51?d:0)C=53;if((C|0)==53)k[e>>2]=k[e>>2]|2;D=k[b>>2]|0;wk(A);wk(B);r=z;return D|0}else C=26}else C=26;while(0);if((C|0)==26)a=Wa()|0;wk(A);wk(B);fb(a|0);return 0}function Ds(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0.0,h=0,j=0,l=0,m=0,n=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;D=r;r=r+352|0;u=D+208|0;h=D+40|0;j=D+36|0;F=D+24|0;E=D+12|0;w=D+8|0;B=D+48|0;C=D+4|0;y=D;z=D+337|0;v=D+336|0;an(F,d,u,h,j);k[E>>2]=0;k[E+4>>2]=0;k[E+8>>2]=0;if(!(i[E>>0]&1))a=10;else a=(k[E>>2]&-2)+-1|0;x=0;Fa(6,E|0,a|0,0);t=x;x=0;a:do if(!(t&1)){q=E+8|0;s=E+1|0;a=(i[E>>0]&1)==0?s:k[q>>2]|0;k[w>>2]=a;k[C>>2]=B;k[y>>2]=0;i[z>>0]=1;i[v>>0]=69;t=E+4|0;p=k[h>>2]|0;n=k[j>>2]|0;d=k[b>>2]|0;b:while(1){if(d){h=k[d+12>>2]|0;if((h|0)==(k[d+16>>2]|0)){x=0;h=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;m=x;x=0;if(m&1){G=25;break}}else h=k[h>>2]|0;if((h|0)==-1){k[b>>2]=0;d=0;l=1}else l=0}else{d=0;l=1}h=k[c>>2]|0;do if(h){j=k[h+12>>2]|0;if((j|0)==(k[h+16>>2]|0)){x=0;j=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;m=x;x=0;if(m&1){G=25;break b}}else j=k[j>>2]|0;if((j|0)!=-1)if(l)break;else break b;else{k[c>>2]=0;G=17;break}}else G=17;while(0);if((G|0)==17){G=0;if(l){h=0;break}else h=0}j=i[E>>0]|0;j=(j&1)==0?(j&255)>>>1:k[t>>2]|0;if((k[w>>2]|0)==(a+j|0)){x=0;Fa(6,E|0,j<<1|0,0);m=x;x=0;if(m&1){G=25;break}if(!(i[E>>0]&1))a=10;else a=(k[E>>2]&-2)+-1|0;x=0;Fa(6,E|0,a|0,0);m=x;x=0;if(m&1){G=25;break}a=(i[E>>0]&1)==0?s:k[q>>2]|0;k[w>>2]=a+j}l=d+12|0;j=k[l>>2]|0;m=d+16|0;if((j|0)==(k[m>>2]|0)){x=0;j=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;H=x;x=0;if(H&1){G=25;break}}else j=k[j>>2]|0;if(bn(j,z,v,a,w,p,n,F,B,C,y,u)|0)break;h=k[l>>2]|0;if((h|0)==(k[m>>2]|0)){x=0;ta(k[(k[d>>2]|0)+40>>2]|0,d|0)|0;H=x;x=0;if(H&1){G=25;break}else continue}else{k[l>>2]=h+4;continue}}if((G|0)==25){a=Wa()|0;break}H=i[F>>0]|0;if(!((i[z>>0]|0)==0?1:(((H&1)==0?(H&255)>>>1:k[F+4>>2]|0)|0)==0)?(A=k[C>>2]|0,(A-B|0)<160):0){H=k[y>>2]|0;k[C>>2]=A+4;k[A>>2]=H}x=0;g=+Ca(1,a|0,k[w>>2]|0,e|0);H=x;x=0;if(!(H&1)){o[f>>2]=g;Ip(F,B,k[C>>2]|0,e);if(d){a=k[d+12>>2]|0;if((a|0)==(k[d+16>>2]|0)){x=0;a=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;H=x;x=0;if(H&1){G=26;break}}else a=k[a>>2]|0;if((a|0)==-1){k[b>>2]=0;d=1}else d=0}else d=1;do if(h){a=k[h+12>>2]|0;if((a|0)==(k[h+16>>2]|0)){x=0;a=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;H=x;x=0;if(H&1){G=26;break a}}else a=k[a>>2]|0;if((a|0)!=-1)if(d)break;else{G=53;break}else{k[c>>2]=0;G=51;break}}else G=51;while(0);if((G|0)==51?d:0)G=53;if((G|0)==53)k[e>>2]=k[e>>2]|2;H=k[b>>2]|0;wk(E);wk(F);r=D;return H|0}else G=26}else G=26;while(0);if((G|0)==26)a=Wa()|0;wk(E);wk(F);fb(a|0);return 0}function Es(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0.0,h=0,j=0,l=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;D=r;r=r+352|0;u=D+208|0;h=D+40|0;j=D+36|0;F=D+24|0;E=D+12|0;w=D+8|0;B=D+48|0;C=D+4|0;y=D;z=D+337|0;v=D+336|0;an(F,d,u,h,j);k[E>>2]=0;k[E+4>>2]=0;k[E+8>>2]=0;if(!(i[E>>0]&1))a=10;else a=(k[E>>2]&-2)+-1|0;x=0;Fa(6,E|0,a|0,0);t=x;x=0;a:do if(!(t&1)){q=E+8|0;s=E+1|0;a=(i[E>>0]&1)==0?s:k[q>>2]|0;k[w>>2]=a;k[C>>2]=B;k[y>>2]=0;i[z>>0]=1;i[v>>0]=69;t=E+4|0;o=k[h>>2]|0;n=k[j>>2]|0;d=k[b>>2]|0;b:while(1){if(d){h=k[d+12>>2]|0;if((h|0)==(k[d+16>>2]|0)){x=0;h=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;m=x;x=0;if(m&1){G=25;break}}else h=k[h>>2]|0;if((h|0)==-1){k[b>>2]=0;d=0;l=1}else l=0}else{d=0;l=1}h=k[c>>2]|0;do if(h){j=k[h+12>>2]|0;if((j|0)==(k[h+16>>2]|0)){x=0;j=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;m=x;x=0;if(m&1){G=25;break b}}else j=k[j>>2]|0;if((j|0)!=-1)if(l)break;else break b;else{k[c>>2]=0;G=17;break}}else G=17;while(0);if((G|0)==17){G=0;if(l){h=0;break}else h=0}j=i[E>>0]|0;j=(j&1)==0?(j&255)>>>1:k[t>>2]|0;if((k[w>>2]|0)==(a+j|0)){x=0;Fa(6,E|0,j<<1|0,0);m=x;x=0;if(m&1){G=25;break}if(!(i[E>>0]&1))a=10;else a=(k[E>>2]&-2)+-1|0;x=0;Fa(6,E|0,a|0,0);m=x;x=0;if(m&1){G=25;break}a=(i[E>>0]&1)==0?s:k[q>>2]|0;k[w>>2]=a+j}l=d+12|0;j=k[l>>2]|0;m=d+16|0;if((j|0)==(k[m>>2]|0)){x=0;j=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;H=x;x=0;if(H&1){G=25;break}}else j=k[j>>2]|0;if(bn(j,z,v,a,w,o,n,F,B,C,y,u)|0)break;h=k[l>>2]|0;if((h|0)==(k[m>>2]|0)){x=0;ta(k[(k[d>>2]|0)+40>>2]|0,d|0)|0;H=x;x=0;if(H&1){G=25;break}else continue}else{k[l>>2]=h+4;continue}}if((G|0)==25){a=Wa()|0;break}H=i[F>>0]|0;if(!((i[z>>0]|0)==0?1:(((H&1)==0?(H&255)>>>1:k[F+4>>2]|0)|0)==0)?(A=k[C>>2]|0,(A-B|0)<160):0){H=k[y>>2]|0;k[C>>2]=A+4;k[A>>2]=H}x=0;g=+Ca(2,a|0,k[w>>2]|0,e|0);H=x;x=0;if(!(H&1)){p[f>>3]=g;Ip(F,B,k[C>>2]|0,e);if(d){a=k[d+12>>2]|0;if((a|0)==(k[d+16>>2]|0)){x=0;a=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;H=x;x=0;if(H&1){G=26;break}}else a=k[a>>2]|0;if((a|0)==-1){k[b>>2]=0;d=1}else d=0}else d=1;do if(h){a=k[h+12>>2]|0;if((a|0)==(k[h+16>>2]|0)){x=0;a=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;H=x;x=0;if(H&1){G=26;break a}}else a=k[a>>2]|0;if((a|0)!=-1)if(d)break;else{G=53;break}else{k[c>>2]=0;G=51;break}}else G=51;while(0);if((G|0)==51?d:0)G=53;if((G|0)==53)k[e>>2]=k[e>>2]|2;H=k[b>>2]|0;wk(E);wk(F);r=D;return H|0}else G=26}else G=26;while(0);if((G|0)==26)a=Wa()|0;wk(E);wk(F);fb(a|0);return 0}function Fs(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0.0,h=0,j=0,l=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;D=r;r=r+352|0;u=D+208|0;h=D+40|0;j=D+36|0;F=D+24|0;E=D+12|0;w=D+8|0;B=D+48|0;C=D+4|0;y=D;z=D+337|0;v=D+336|0;an(F,d,u,h,j);k[E>>2]=0;k[E+4>>2]=0;k[E+8>>2]=0;if(!(i[E>>0]&1))a=10;else a=(k[E>>2]&-2)+-1|0;x=0;Fa(6,E|0,a|0,0);t=x;x=0;a:do if(!(t&1)){q=E+8|0;s=E+1|0;a=(i[E>>0]&1)==0?s:k[q>>2]|0;k[w>>2]=a;k[C>>2]=B;k[y>>2]=0;i[z>>0]=1;i[v>>0]=69;t=E+4|0;o=k[h>>2]|0;n=k[j>>2]|0;d=k[b>>2]|0;b:while(1){if(d){h=k[d+12>>2]|0;if((h|0)==(k[d+16>>2]|0)){x=0;h=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;m=x;x=0;if(m&1){G=25;break}}else h=k[h>>2]|0;if((h|0)==-1){k[b>>2]=0;d=0;l=1}else l=0}else{d=0;l=1}h=k[c>>2]|0;do if(h){j=k[h+12>>2]|0;if((j|0)==(k[h+16>>2]|0)){x=0;j=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;m=x;x=0;if(m&1){G=25;break b}}else j=k[j>>2]|0;if((j|0)!=-1)if(l)break;else break b;else{k[c>>2]=0;G=17;break}}else G=17;while(0);if((G|0)==17){G=0;if(l){h=0;break}else h=0}j=i[E>>0]|0;j=(j&1)==0?(j&255)>>>1:k[t>>2]|0;if((k[w>>2]|0)==(a+j|0)){x=0;Fa(6,E|0,j<<1|0,0);m=x;x=0;if(m&1){G=25;break}if(!(i[E>>0]&1))a=10;else a=(k[E>>2]&-2)+-1|0;x=0;Fa(6,E|0,a|0,0);m=x;x=0;if(m&1){G=25;break}a=(i[E>>0]&1)==0?s:k[q>>2]|0;k[w>>2]=a+j}l=d+12|0;j=k[l>>2]|0;m=d+16|0;if((j|0)==(k[m>>2]|0)){x=0;j=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;H=x;x=0;if(H&1){G=25;break}}else j=k[j>>2]|0;if(bn(j,z,v,a,w,o,n,F,B,C,y,u)|0)break;h=k[l>>2]|0;if((h|0)==(k[m>>2]|0)){x=0;ta(k[(k[d>>2]|0)+40>>2]|0,d|0)|0;H=x;x=0;if(H&1){G=25;break}else continue}else{k[l>>2]=h+4;continue}}if((G|0)==25){a=Wa()|0;break}H=i[F>>0]|0;if(!((i[z>>0]|0)==0?1:(((H&1)==0?(H&255)>>>1:k[F+4>>2]|0)|0)==0)?(A=k[C>>2]|0,(A-B|0)<160):0){H=k[y>>2]|0;k[C>>2]=A+4;k[A>>2]=H}x=0;g=+Ca(3,a|0,k[w>>2]|0,e|0);H=x;x=0;if(!(H&1)){p[f>>3]=g;Ip(F,B,k[C>>2]|0,e);if(d){a=k[d+12>>2]|0;if((a|0)==(k[d+16>>2]|0)){x=0;a=ta(k[(k[d>>2]|0)+36>>2]|0,d|0)|0;H=x;x=0;if(H&1){G=26;break}}else a=k[a>>2]|0;if((a|0)==-1){k[b>>2]=0;d=1}else d=0}else d=1;do if(h){a=k[h+12>>2]|0;if((a|0)==(k[h+16>>2]|0)){x=0;a=ta(k[(k[h>>2]|0)+36>>2]|0,h|0)|0;H=x;x=0;if(H&1){G=26;break a}}else a=k[a>>2]|0;if((a|0)!=-1)if(d)break;else{G=53;break}else{k[c>>2]=0;G=51;break}}else G=51;while(0);if((G|0)==51?d:0)G=53;if((G|0)==53)k[e>>2]=k[e>>2]|2;H=k[b>>2]|0;wk(E);wk(F);r=D;return H|0}else G=26}else G=26;while(0);if((G|0)==26)a=Wa()|0;wk(E);wk(F);fb(a|0);return 0}function Gs(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;f=r;r=r+16|0;g=f;k[g>>2]=e;e=ei(c)|0;c=Ui(a,b,d,g)|0;if((e|0)!=0?(x=0,ta(74,e|0)|0,g=x,x=0,g&1):0){g=Wa(0)|0;mc(g)}r=f;return c|0}function Hs(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=r;r=r+16|0;f=e;k[f>>2]=d;d=ei(b)|0;x=0;b=va(37,a|0,c|0,f|0)|0;a=x;x=0;if(a&1){b=Wa()|0;if((d|0)!=0?(x=0,ta(74,d|0)|0,f=x,x=0,f&1):0){f=Wa(0)|0;mc(f)}fb(b|0)}else{if((d|0)!=0?(x=0,ta(74,d|0)|0,f=x,x=0,f&1):0){f=Wa(0)|0;mc(f)}r=e;return b|0}return 0}function Is(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0;n=r;r=r+16|0;m=n;g=k[a>>2]|0;a:do if(!g)g=0;else{o=b;j=d-o>>2;l=e+12|0;h=k[l>>2]|0;j=(h|0)>(j|0)?h-j|0:0;h=c;o=h-o|0;e=o>>2;if((o|0)>0?(Qb[k[(k[g>>2]|0)+48>>2]&63](g,b,e)|0)!=(e|0):0){k[a>>2]=0;g=0;break}do if((j|0)>0){Jk(m,j,f);x=0;e=va(k[(k[g>>2]|0)+48>>2]|0,g|0,((i[m>>0]&1)==0?m+4|0:k[m+8>>2]|0)|0,j|0)|0;o=x;x=0;if(o&1){o=Wa()|0;Kk(m);fb(o|0)}if((e|0)==(j|0)){Kk(m);break}else{k[a>>2]=0;Kk(m);g=0;break a}}while(0);o=d-h|0;d=o>>2;if((o|0)>0?(Qb[k[(k[g>>2]|0)+48>>2]&63](g,c,d)|0)!=(d|0):0){k[a>>2]=0;g=0;break}k[l>>2]=0}while(0);r=n;return g|0}function Js(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,m=0,n=0,o=0,p=0,q=0,r=0;f=k[a>>2]|0;do if(f){if((k[f+12>>2]|0)==(k[f+16>>2]|0))if((Ob[k[(k[f>>2]|0)+36>>2]&127](f)|0)==-1){k[a>>2]=0;f=0;break}else{f=k[a>>2]|0;break}}else f=0;while(0);g=(f|0)==0;f=k[b>>2]|0;do if(f){if((k[f+12>>2]|0)==(k[f+16>>2]|0)?(Ob[k[(k[f>>2]|0)+36>>2]&127](f)|0)==-1:0){k[b>>2]=0;r=11;break}if(g)r=13;else r=12}else r=11;while(0);if((r|0)==11)if(g)r=12;else{f=0;r=13}a:do if((r|0)==12){k[c>>2]=k[c>>2]|6;f=0}else if((r|0)==13){g=k[a>>2]|0;h=k[g+12>>2]|0;if((h|0)==(k[g+16>>2]|0))g=Ob[k[(k[g>>2]|0)+36>>2]&127](g)|0;else g=l[h>>0]|0;h=g&255;if(h<<24>>24>-1?(q=d+8|0,(j[(k[q>>2]|0)+(g<<24>>24<<1)>>1]&2048)!=0):0){m=(Qb[k[(k[d>>2]|0)+36>>2]&63](d,h,0)|0)<<24>>24;g=k[a>>2]|0;h=g+12|0;i=k[h>>2]|0;if((i|0)==(k[g+16>>2]|0)){Ob[k[(k[g>>2]|0)+40>>2]&127](g)|0;o=e;n=f;e=f;f=m}else{k[h>>2]=i+1;o=e;n=f;e=f;f=m}while(1){f=f+-48|0;p=o+-1|0;g=k[a>>2]|0;do if(g){if((k[g+12>>2]|0)==(k[g+16>>2]|0))if((Ob[k[(k[g>>2]|0)+36>>2]&127](g)|0)==-1){k[a>>2]=0;g=0;break}else{g=k[a>>2]|0;break}}else g=0;while(0);i=(g|0)==0;if(e)if((k[e+12>>2]|0)==(k[e+16>>2]|0))if((Ob[k[(k[e>>2]|0)+36>>2]&127](e)|0)==-1){k[b>>2]=0;h=0;e=0}else{h=n;e=n}else h=n;else{h=n;e=0}g=k[a>>2]|0;if(!((o|0)>1&(i^(e|0)==0)))break;i=k[g+12>>2]|0;if((i|0)==(k[g+16>>2]|0))g=Ob[k[(k[g>>2]|0)+36>>2]&127](g)|0;else g=l[i>>0]|0;i=g&255;if(i<<24>>24<=-1)break a;if(!(j[(k[q>>2]|0)+(g<<24>>24<<1)>>1]&2048))break a;f=((Qb[k[(k[d>>2]|0)+36>>2]&63](d,i,0)|0)<<24>>24)+(f*10|0)|0;g=k[a>>2]|0;i=g+12|0;m=k[i>>2]|0;if((m|0)==(k[g+16>>2]|0)){Ob[k[(k[g>>2]|0)+40>>2]&127](g)|0;o=p;n=h;continue}else{k[i>>2]=m+1;o=p;n=h;continue}}do if(g){if((k[g+12>>2]|0)==(k[g+16>>2]|0))if((Ob[k[(k[g>>2]|0)+36>>2]&127](g)|0)==-1){k[a>>2]=0;g=0;break}else{g=k[a>>2]|0;break}}else g=0;while(0);g=(g|0)==0;do if(h){if((k[h+12>>2]|0)==(k[h+16>>2]|0)?(Ob[k[(k[h>>2]|0)+36>>2]&127](h)|0)==-1:0){k[b>>2]=0;r=50;break}if(g)break a}else r=50;while(0);if((r|0)==50?!g:0)break;k[c>>2]=k[c>>2]|2;break}k[c>>2]=k[c>>2]|4;f=0}while(0);return f|0}function Ks(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;f=k[a>>2]|0;do if(f){g=k[f+12>>2]|0;if((g|0)==(k[f+16>>2]|0))f=Ob[k[(k[f>>2]|0)+36>>2]&127](f)|0;else f=k[g>>2]|0;if((f|0)==-1){k[a>>2]=0;h=1;break}else{h=(k[a>>2]|0)==0;break}}else h=1;while(0);g=k[b>>2]|0;do if(g){f=k[g+12>>2]|0;if((f|0)==(k[g+16>>2]|0))f=Ob[k[(k[g>>2]|0)+36>>2]&127](g)|0;else f=k[f>>2]|0;if((f|0)!=-1)if(h){o=17;break}else{o=16;break}else{k[b>>2]=0;o=14;break}}else o=14;while(0);if((o|0)==14)if(h)o=16;else{g=0;o=17}a:do if((o|0)==16){k[c>>2]=k[c>>2]|6;f=0}else if((o|0)==17){f=k[a>>2]|0;h=k[f+12>>2]|0;if((h|0)==(k[f+16>>2]|0))f=Ob[k[(k[f>>2]|0)+36>>2]&127](f)|0;else f=k[h>>2]|0;if(!(Qb[k[(k[d>>2]|0)+12>>2]&63](d,2048,f)|0)){k[c>>2]=k[c>>2]|4;f=0;break}f=(Qb[k[(k[d>>2]|0)+52>>2]&63](d,f,0)|0)<<24>>24;h=k[a>>2]|0;i=h+12|0;j=k[i>>2]|0;if((j|0)==(k[h+16>>2]|0)){Ob[k[(k[h>>2]|0)+40>>2]&127](h)|0;m=e;l=g;i=g}else{k[i>>2]=j+4;m=e;l=g;i=g}while(1){f=f+-48|0;n=m+-1|0;g=k[a>>2]|0;do if(g){h=k[g+12>>2]|0;if((h|0)==(k[g+16>>2]|0))g=Ob[k[(k[g>>2]|0)+36>>2]&127](g)|0;else g=k[h>>2]|0;if((g|0)==-1){k[a>>2]=0;j=1;break}else{j=(k[a>>2]|0)==0;break}}else j=1;while(0);do if(i){g=k[i+12>>2]|0;if((g|0)==(k[i+16>>2]|0))g=Ob[k[(k[i>>2]|0)+36>>2]&127](i)|0;else g=k[g>>2]|0;if((g|0)==-1){k[b>>2]=0;i=0;e=0;g=1;break}else{i=l;e=l;g=(l|0)==0;break}}else{i=l;e=0;g=1}while(0);h=k[a>>2]|0;if(!((m|0)>1&(j^g)))break;g=k[h+12>>2]|0;if((g|0)==(k[h+16>>2]|0))g=Ob[k[(k[h>>2]|0)+36>>2]&127](h)|0;else g=k[g>>2]|0;if(!(Qb[k[(k[d>>2]|0)+12>>2]&63](d,2048,g)|0))break a;f=((Qb[k[(k[d>>2]|0)+52>>2]&63](d,g,0)|0)<<24>>24)+(f*10|0)|0;g=k[a>>2]|0;h=g+12|0;j=k[h>>2]|0;if((j|0)==(k[g+16>>2]|0)){Ob[k[(k[g>>2]|0)+40>>2]&127](g)|0;m=n;l=i;i=e;continue}else{k[h>>2]=j+4;m=n;l=i;i=e;continue}}do if(h){g=k[h+12>>2]|0;if((g|0)==(k[h+16>>2]|0))g=Ob[k[(k[h>>2]|0)+36>>2]&127](h)|0;else g=k[g>>2]|0;if((g|0)==-1){k[a>>2]=0;h=1;break}else{h=(k[a>>2]|0)==0;break}}else h=1;while(0);do if(i){g=k[i+12>>2]|0;if((g|0)==(k[i+16>>2]|0))g=Ob[k[(k[i>>2]|0)+36>>2]&127](i)|0;else g=k[g>>2]|0;if((g|0)!=-1)if(h)break a;else break;else{k[b>>2]=0;o=60;break}}else o=60;while(0);if((o|0)==60?!h:0)break;k[c>>2]=k[c>>2]|2}while(0);return f|0}function Ls(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0;f=a+4|0;d=(k[f>>2]|0)!=165;h=k[a>>2]|0;g=h;e=(k[c>>2]|0)-g|0;e=e>>>0<2147483647?e<<1:-1;g=(k[b>>2]|0)-g|0;h=wj(d?h:0,e)|0;if(!h)Gh();do if(!d){d=k[a>>2]|0;k[a>>2]=h;if(d){x=0;qa(k[f>>2]|0,d|0);h=x;x=0;if(h&1){h=Wa(0)|0;mc(h)}else{i=k[a>>2]|0;break}}else i=h}else{k[a>>2]=h;i=h}while(0);k[f>>2]=177;k[b>>2]=i+g;k[c>>2]=(k[a>>2]|0)+e;return}function Ms(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0;f=a+4|0;d=(k[f>>2]|0)!=165;h=k[a>>2]|0;g=h;e=(k[c>>2]|0)-g|0;e=e>>>0<2147483647?e<<1:-1;g=(k[b>>2]|0)-g>>2;h=wj(d?h:0,e)|0;if(!h)Gh();do if(!d){d=k[a>>2]|0;k[a>>2]=h;if(d){x=0;qa(k[f>>2]|0,d|0);h=x;x=0;if(h&1){h=Wa(0)|0;mc(h)}else{i=k[a>>2]|0;break}}else i=h}else{k[a>>2]=h;i=h}while(0);k[f>>2]=177;k[b>>2]=i+(g<<2);k[c>>2]=(k[a>>2]|0)+(e>>>2<<2);return}function Ns(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0;f=b;d=i[a>>0]|0;if(!(d&1)){e=10;j=(d&255)>>>1}else{d=k[a>>2]|0;e=(d&-2)+-1|0;j=k[a+4>>2]|0;d=d&255}h=c-f|0;do if((c|0)!=(b|0)){if((e-j|0)>>>0<h>>>0){Hk(a,e,j+h-e|0,j,j,0,0);d=i[a>>0]|0}if(!(d&1))g=a+1|0;else g=k[a+8>>2]|0;f=c+(j-f)|0;if((b|0)!=(c|0)){d=b;e=g+j|0;while(1){i[e>>0]=i[d>>0]|0;d=d+1|0;if((d|0)==(c|0))break;else e=e+1|0}}i[g+f>>0]=0;d=j+h|0;if(!(i[a>>0]&1)){i[a>>0]=d<<1;break}else{k[a+4>>2]=d;break}}while(0);return a|0}function Os(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0;f=a+4|0;d=(k[f>>2]|0)!=165;h=k[a>>2]|0;g=h;e=(k[c>>2]|0)-g|0;e=e>>>0<2147483647?e<<1:-1;g=(k[b>>2]|0)-g>>2;h=wj(d?h:0,e)|0;if(!h)Gh();do if(!d){d=k[a>>2]|0;k[a>>2]=h;if(d){x=0;qa(k[f>>2]|0,d|0);h=x;x=0;if(h&1){h=Wa(0)|0;mc(h)}else{i=k[a>>2]|0;break}}else i=h}else{k[a>>2]=h;i=h}while(0);k[f>>2]=177;k[b>>2]=i+(g<<2);k[c>>2]=(k[a>>2]|0)+(e>>>2<<2);return}function Ps(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0;f=b;d=i[a>>0]|0;if(!(d&1)){e=1;j=(d&255)>>>1}else{d=k[a>>2]|0;e=(d&-2)+-1|0;j=k[a+4>>2]|0;d=d&255}h=c-f>>2;do if(h){if((e-j|0)>>>0<h>>>0){Qk(a,e,j+h-e|0,j,j,0,0);d=i[a>>0]|0}if(!(d&1))g=a+4|0;else g=k[a+8>>2]|0;f=j+((c-f|0)>>>2)|0;if((b|0)!=(c|0)){d=b;e=g+(j<<2)|0;while(1){k[e>>2]=k[d>>2];d=d+4|0;if((d|0)==(c|0))break;else e=e+4|0}}k[g+(f<<2)>>2]=0;d=j+h|0;if(!(i[a>>0]&1)){i[a>>0]=d<<1;break}else{k[a+4>>2]=d;break}}while(0);return a|0}function Qs(a,b){a=a|0;b=b|0;var c=0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;i[a+128>>0]=0;do if(b){x=0;ra(104,a|0,b|0);c=x;x=0;if(c&1){c=Wa()|0;rt(a);fb(c|0)}else{It(a,b);break}}while(0);return}function Rs(a,b){a=a|0;b=b|0;lq(a,b,vq(42680)|0);return}function Ss(a,b){a=a|0;b=b|0;lq(a,b,vq(42720)|0);return}function Ts(a,b){a=a|0;b=b|0;lq(a,b,vq(43752)|0);return}function Us(a,b){a=a|0;b=b|0;lq(a,b,vq(43744)|0);return}function Vs(a,b){a=a|0;b=b|0;lq(a,b,vq(43812)|0);return}function Ws(a,b){a=a|0;b=b|0;lq(a,b,vq(43820)|0);return}function Xs(a,b){a=a|0;b=b|0;lq(a,b,vq(43876)|0);return}function Ys(a,b){a=a|0;b=b|0;lq(a,b,vq(43884)|0);return}function Zs(a,b){a=a|0;b=b|0;lq(a,b,vq(43892)|0);return}function _s(a,b){a=a|0;b=b|0;lq(a,b,vq(43900)|0);return}function $s(a,b){a=a|0;b=b|0;lq(a,b,vq(42792)|0);return}function at(a,b){a=a|0;b=b|0;lq(a,b,vq(42864)|0);return}function bt(a,b){a=a|0;b=b|0;lq(a,b,vq(42924)|0);return}function ct(a,b){a=a|0;b=b|0;lq(a,b,vq(42984)|0);return}function dt(a,b){a=a|0;b=b|0;lq(a,b,vq(43296)|0);return}function et(a,b){a=a|0;b=b|0;lq(a,b,vq(43360)|0);return}function ft(a,b){a=a|0;b=b|0;lq(a,b,vq(43424)|0);return}function gt(a,b){a=a|0;b=b|0;lq(a,b,vq(43488)|0);return}function ht(a,b){a=a|0;b=b|0;lq(a,b,vq(43524)|0);return}function it(a,b){a=a|0;b=b|0;lq(a,b,vq(43560)|0);return}function jt(a,b){a=a|0;b=b|0;lq(a,b,vq(43596)|0);return}function kt(a,b){a=a|0;b=b|0;lq(a,b,vq(43632)|0);return}function lt(a,b){a=a|0;b=b|0;lq(a,b,vq(43076)|0);return}function mt(a,b){a=a|0;b=b|0;lq(a,b,vq(43168)|0);return}function nt(a,b){a=a|0;b=b|0;lq(a,b,vq(43200)|0);return}function ot(a,b){a=a|0;b=b|0;lq(a,b,vq(43232)|0);return}function pt(a,b){a=a|0;b=b|0;lq(a,b,vq(43672)|0);return}function qt(a,b){a=a|0;b=b|0;lq(a,b,vq(43712)|0);return}function rt(a){a=a|0;var b=0,c=0,d=0;c=k[a>>2]|0;do if(c){d=a+4|0;b=k[d>>2]|0;if((b|0)!=(c|0)){do b=b+-4|0;while((b|0)!=(c|0));k[d>>2]=b}if((a+16|0)==(c|0)){i[a+128>>0]=0;break}else{Sg(c);break}}while(0);return}function st(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;g=a+4|0;c=k[g>>2]|0;d=k[a>>2]|0;e=c-d>>2;if(e>>>0>=b>>>0){if(e>>>0>b>>>0?(f=d+(b<<2)|0,(c|0)!=(f|0)):0){do c=c+-4|0;while((c|0)!=(f|0));k[g>>2]=c}}else Ht(a,b-e|0);return}function tt(a,b){a=a|0;b=b|0;var c=0;c=k[a+8>>2]|0;if((k[a+12>>2]|0)-c>>2>>>0>b>>>0)c=(k[c+(b<<2)>>2]|0)!=0;else c=0;return c|0}function ut(a){a=a|0;var b=0,c=0;c=a+4|0;b=k[c>>2]|0;c=k[c+4>>2]|0;a=(k[a>>2]|0)+(c>>1)|0;if(c&1)b=k[(k[a>>2]|0)+b>>2]|0;Lb[b&255](a);return}function vt(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var l=0,n=0;k[c>>2]=a;k[f>>2]=d;if(h&2)if((e-d|0)<3)a=1;else{k[f>>2]=d+1;i[d>>0]=-17;l=k[f>>2]|0;k[f>>2]=l+1;i[l>>0]=-69;l=k[f>>2]|0;k[f>>2]=l+1;i[l>>0]=-65;l=4}else l=4;a:do if((l|0)==4){n=b;a=k[c>>2]|0;if(a>>>0<b>>>0)while(1){h=j[a>>1]|0;l=h&65535;if(l>>>0>g>>>0){a=2;break a}do if((h&65535)<128){a=k[f>>2]|0;if((e-a|0)<1){a=1;break a}k[f>>2]=a+1;i[a>>0]=h}else{if((h&65535)<2048){a=k[f>>2]|0;if((e-a|0)<2){a=1;break a}k[f>>2]=a+1;i[a>>0]=l>>>6|192;d=k[f>>2]|0;k[f>>2]=d+1;i[d>>0]=l&63|128;break}if((h&65535)<55296){a=k[f>>2]|0;if((e-a|0)<3){a=1;break a}k[f>>2]=a+1;i[a>>0]=l>>>12|224;d=k[f>>2]|0;k[f>>2]=d+1;i[d>>0]=l>>>6&63|128;d=k[f>>2]|0;k[f>>2]=d+1;i[d>>0]=l&63|128;break}if((h&65535)>=56320){if((h&65535)<57344){a=2;break a}a=k[f>>2]|0;if((e-a|0)<3){a=1;break a}k[f>>2]=a+1;i[a>>0]=l>>>12|224;d=k[f>>2]|0;k[f>>2]=d+1;i[d>>0]=l>>>6&63|128;d=k[f>>2]|0;k[f>>2]=d+1;i[d>>0]=l&63|128;break}if((n-a|0)<4){a=1;break a}a=a+2|0;h=m[a>>1]|0;if((h&64512|0)!=56320){a=2;break a}if((e-(k[f>>2]|0)|0)<4){a=1;break a}d=l&960;if(((d<<10)+65536|l<<10&64512|h&1023)>>>0>g>>>0){a=2;break a}k[c>>2]=a;a=(d>>>6)+1|0;d=k[f>>2]|0;k[f>>2]=d+1;i[d>>0]=a>>>2|240;d=k[f>>2]|0;k[f>>2]=d+1;i[d>>0]=l>>>2&15|a<<4&48|128;d=k[f>>2]|0;k[f>>2]=d+1;i[d>>0]=l<<4&48|h>>>6&15|128;l=k[f>>2]|0;k[f>>2]=l+1;i[l>>0]=h&63|128}while(0);a=(k[c>>2]|0)+2|0;k[c>>2]=a;if(a>>>0>=b>>>0){a=0;break}}else a=0}while(0);return a|0}function wt(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var m=0,n=0,o=0,p=0,q=0,r=0;k[c>>2]=a;k[f>>2]=d;if(h&4){a=k[c>>2]|0;h=b;if((((h-a|0)>2?(i[a>>0]|0)==-17:0)?(i[a+1>>0]|0)==-69:0)?(i[a+2>>0]|0)==-65:0){k[c>>2]=a+3;m=k[f>>2]|0}else m=d}else{m=d;h=b}q=e;d=k[c>>2]|0;a=d>>>0<b>>>0;a:do if(a&m>>>0<e>>>0)while(1){a=i[d>>0]|0;o=a&255;if(o>>>0>g>>>0){a=2;break a}do if(a<<24>>24>-1){j[m>>1]=a&255;k[c>>2]=d+1}else{if((a&255)<194){a=2;break a}if((a&255)<224){if((h-d|0)<2){a=1;break a}a=l[d+1>>0]|0;if((a&192|0)!=128){a=2;break a}a=a&63|o<<6&1984;if(a>>>0>g>>>0){a=2;break a}j[m>>1]=a;k[c>>2]=d+2;break}if((a&255)<240){if((h-d|0)<3){a=1;break a}n=i[d+1>>0]|0;a=i[d+2>>0]|0;switch(o|0){case 224:{if((n&-32)<<24>>24!=-96){a=2;break a}break}case 237:{if((n&-32)<<24>>24!=-128){a=2;break a}break}default:if((n&-64)<<24>>24!=-128){a=2;break a}}a=a&255;if((a&192|0)!=128){a=2;break a}a=(n&255)<<6&4032|o<<12|a&63;if((a&65535)>>>0>g>>>0){a=2;break a}j[m>>1]=a;k[c>>2]=d+3;break}if((a&255)>=245){a=2;break a}if((h-d|0)<4){a=1;break a}n=i[d+1>>0]|0;a=i[d+2>>0]|0;d=i[d+3>>0]|0;switch(o|0){case 240:{if((n+112&255)>=48){a=2;break a}break}case 244:{if((n&-16)<<24>>24!=-128){a=2;break a}break}default:if((n&-64)<<24>>24!=-128){a=2;break a}}p=a&255;if((p&192|0)!=128){a=2;break a}a=d&255;if((a&192|0)!=128){a=2;break a}if((q-m|0)<4){a=1;break a}o=o&7;d=n&255;n=p<<6;a=a&63;if((d<<12&258048|o<<18|n&4032|a)>>>0>g>>>0){a=2;break a}j[m>>1]=d<<2&60|p>>>4&3|((d>>>4&3|o<<2)<<6)+16320|55296;p=m+2|0;k[f>>2]=p;j[p>>1]=a|n&960|56320;k[c>>2]=(k[c>>2]|0)+4}while(0);m=(k[f>>2]|0)+2|0;k[f>>2]=m;d=k[c>>2]|0;a=d>>>0<b>>>0;if(!(a&m>>>0<e>>>0)){r=39;break}}else r=39;while(0);if((r|0)==39)a=a&1;return a|0}function xt(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,m=0,n=0;n=b;if((((e&4|0)!=0?(n-a|0)>2:0)?(i[a>>0]|0)==-17:0)?(i[a+1>>0]|0)==-69:0)e=(i[a+2>>0]|0)==-65?a+3|0:a;else e=a;a:do if((c|0)!=0&e>>>0<b>>>0){m=e;f=0;b:while(1){e=i[m>>0]|0;k=e&255;if(k>>>0>d>>>0){e=m;f=42;break a}do if(e<<24>>24>-1)e=m+1|0;else{if((e&255)<194){e=m;f=42;break a}if((e&255)<224){if((n-m|0)<2){e=m;f=42;break a}e=l[m+1>>0]|0;if((e&192|0)!=128){e=m;f=42;break a}if((e&63|k<<6&1984)>>>0>d>>>0){e=m;f=42;break a}e=m+2|0;break}if((e&255)<240){e=m;if((n-e|0)<3){e=m;f=42;break a}h=i[m+1>>0]|0;g=i[m+2>>0]|0;switch(k|0){case 224:{if((h&-32)<<24>>24!=-96){f=20;break b}break}case 237:{if((h&-32)<<24>>24!=-128){f=22;break b}break}default:if((h&-64)<<24>>24!=-128){f=24;break b}}e=g&255;if((e&192|0)!=128){e=m;f=42;break a}if(((h&255)<<6&4032|k<<12&61440|e&63)>>>0>d>>>0){e=m;f=42;break a}e=m+3|0;break}if((e&255)>=245){e=m;f=42;break a}e=m;if((c-f|0)>>>0<2|(n-e|0)<4){e=m;f=42;break a}j=i[m+1>>0]|0;g=i[m+2>>0]|0;h=i[m+3>>0]|0;switch(k|0){case 240:{if((j+112&255)>=48){f=32;break b}break}case 244:{if((j&-16)<<24>>24!=-128){f=34;break b}break}default:if((j&-64)<<24>>24!=-128){f=36;break b}}g=g&255;if((g&192|0)!=128){e=m;f=42;break a}e=h&255;if((e&192|0)!=128){e=m;f=42;break a}if(((j&255)<<12&258048|k<<18&1835008|g<<6&4032|e&63)>>>0>d>>>0){e=m;f=42;break a}e=m+4|0;f=f+1|0}while(0);f=f+1|0;if(!(f>>>0<c>>>0&e>>>0<b>>>0)){f=42;break a}else m=e}if((f|0)==20){e=e-a|0;break}else if((f|0)==22){e=e-a|0;break}else if((f|0)==24){e=e-a|0;break}else if((f|0)==32){e=e-a|0;break}else if((f|0)==34){e=e-a|0;break}else if((f|0)==36){e=e-a|0;break}}else f=42;while(0);if((f|0)==42)e=e-a|0;return e|0}function yt(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,l=0;k[c>>2]=a;k[f>>2]=d;l=e;if(h&2)if((l-d|0)<3)a=1;else{k[f>>2]=d+1;i[d>>0]=-17;j=k[f>>2]|0;k[f>>2]=j+1;i[j>>0]=-69;j=k[f>>2]|0;k[f>>2]=j+1;i[j>>0]=-65;j=4}else j=4;a:do if((j|0)==4){a=k[c>>2]|0;if(a>>>0<b>>>0)while(1){h=k[a>>2]|0;if(h>>>0>g>>>0|(h&-2048|0)==55296){a=2;break a}do if(h>>>0>=128){if(h>>>0<2048){a=k[f>>2]|0;if((l-a|0)<2){a=1;break a}k[f>>2]=a+1;i[a>>0]=h>>>6|192;j=k[f>>2]|0;k[f>>2]=j+1;i[j>>0]=h&63|128;break}a=k[f>>2]|0;e=l-a|0;if(h>>>0<65536){if((e|0)<3){a=1;break a}k[f>>2]=a+1;i[a>>0]=h>>>12|224;j=k[f>>2]|0;k[f>>2]=j+1;i[j>>0]=h>>>6&63|128;j=k[f>>2]|0;k[f>>2]=j+1;i[j>>0]=h&63|128;break}else{if((e|0)<4){a=1;break a}k[f>>2]=a+1;i[a>>0]=h>>>18|240;j=k[f>>2]|0;k[f>>2]=j+1;i[j>>0]=h>>>12&63|128;j=k[f>>2]|0;k[f>>2]=j+1;i[j>>0]=h>>>6&63|128;j=k[f>>2]|0;k[f>>2]=j+1;i[j>>0]=h&63|128;break}}else{a=k[f>>2]|0;if((l-a|0)<1){a=1;break a}k[f>>2]=a+1;i[a>>0]=h}while(0);a=(k[c>>2]|0)+4|0;k[c>>2]=a;if(a>>>0>=b>>>0){a=0;break}}else a=0}while(0);return a|0}function zt(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,m=0,n=0,o=0,p=0,q=0;k[c>>2]=a;k[f>>2]=d;if(h&4){a=k[c>>2]|0;h=b;if((((h-a|0)>2?(i[a>>0]|0)==-17:0)?(i[a+1>>0]|0)==-69:0)?(i[a+2>>0]|0)==-65:0){k[c>>2]=a+3;d=k[f>>2]|0;p=h}else p=h}else p=b;h=k[c>>2]|0;a=h>>>0<b>>>0;a:do if(a&d>>>0<e>>>0)while(1){a=i[h>>0]|0;o=a&255;do if(a<<24>>24>-1){if(o>>>0>g>>>0){a=2;break a}k[d>>2]=o;k[c>>2]=h+1}else{if((a&255)<194){a=2;break a}if((a&255)<224){if((p-h|0)<2){a=1;break a}a=l[h+1>>0]|0;if((a&192|0)!=128){a=2;break a}a=a&63|o<<6&1984;if(a>>>0>g>>>0){a=2;break a}k[d>>2]=a;k[c>>2]=h+2;break}if((a&255)<240){if((p-h|0)<3){a=1;break a}j=i[h+1>>0]|0;a=i[h+2>>0]|0;switch(o|0){case 224:{if((j&-32)<<24>>24!=-96){a=2;break a}break}case 237:{if((j&-32)<<24>>24!=-128){a=2;break a}break}default:if((j&-64)<<24>>24!=-128){a=2;break a}}a=a&255;if((a&192|0)!=128){a=2;break a}a=(j&255)<<6&4032|o<<12&61440|a&63;if(a>>>0>g>>>0){a=2;break a}k[d>>2]=a;k[c>>2]=h+3;break}if((a&255)>=245){a=2;break a}if((p-h|0)<4){a=1;break a}n=i[h+1>>0]|0;a=i[h+2>>0]|0;j=i[h+3>>0]|0;switch(o|0){case 240:{if((n+112&255)>=48){a=2;break a}break}case 244:{if((n&-16)<<24>>24!=-128){a=2;break a}break}default:if((n&-64)<<24>>24!=-128){a=2;break a}}m=a&255;if((m&192|0)!=128){a=2;break a}a=j&255;if((a&192|0)!=128){a=2;break a}a=(n&255)<<12&258048|o<<18&1835008|m<<6&4032|a&63;if(a>>>0>g>>>0){a=2;break a}k[d>>2]=a;k[c>>2]=h+4}while(0);d=(k[f>>2]|0)+4|0;k[f>>2]=d;h=k[c>>2]|0;a=h>>>0<b>>>0;if(!(a&d>>>0<e>>>0)){q=38;break}}else q=38;while(0);if((q|0)==38)a=a&1;return a|0}function At(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,m=0,n=0;n=b;if((((e&4|0)!=0?(n-a|0)>2:0)?(i[a>>0]|0)==-17:0)?(i[a+1>>0]|0)==-69:0)e=(i[a+2>>0]|0)==-65?a+3|0:a;else e=a;a:do if((c|0)!=0&e>>>0<b>>>0){k=e;m=0;b:while(1){e=i[k>>0]|0;j=e&255;do if(e<<24>>24>-1){if(j>>>0>d>>>0){e=k;f=42;break a}e=k+1|0}else{if((e&255)<194){e=k;f=42;break a}if((e&255)<224){if((n-k|0)<2){e=k;f=42;break a}e=l[k+1>>0]|0;if((e&192|0)!=128){e=k;f=42;break a}if((e&63|j<<6&1984)>>>0>d>>>0){e=k;f=42;break a}e=k+2|0;break}if((e&255)<240){e=k;if((n-e|0)<3){e=k;f=42;break a}g=i[k+1>>0]|0;f=i[k+2>>0]|0;switch(j|0){case 224:{if((g&-32)<<24>>24!=-96){f=20;break b}break}case 237:{if((g&-32)<<24>>24!=-128){f=22;break b}break}default:if((g&-64)<<24>>24!=-128){f=24;break b}}e=f&255;if((e&192|0)!=128){e=k;f=42;break a}if(((g&255)<<6&4032|j<<12&61440|e&63)>>>0>d>>>0){e=k;f=42;break a}e=k+3|0;break}if((e&255)>=245){e=k;f=42;break a}e=k;if((n-e|0)<4){e=k;f=42;break a}h=i[k+1>>0]|0;f=i[k+2>>0]|0;g=i[k+3>>0]|0;switch(j|0){case 240:{if((h+112&255)>=48){f=32;break b}break}case 244:{if((h&-16)<<24>>24!=-128){f=34;break b}break}default:if((h&-64)<<24>>24!=-128){f=36;break b}}f=f&255;if((f&192|0)!=128){e=k;f=42;break a}e=g&255;if((e&192|0)!=128){e=k;f=42;break a}if(((h&255)<<12&258048|j<<18&1835008|f<<6&4032|e&63)>>>0>d>>>0){e=k;f=42;break a}e=k+4|0}while(0);m=m+1|0;if(!(m>>>0<c>>>0&e>>>0<b>>>0)){f=42;break a}else k=e}if((f|0)==20){e=e-a|0;break}else if((f|0)==22){e=e-a|0;break}else if((f|0)==24){e=e-a|0;break}else if((f|0)==32){e=e-a|0;break}else if((f|0)==34){e=e-a|0;break}else if((f|0)==36){e=e-a|0;break}}else f=42;while(0);if((f|0)==42)e=e-a|0;return e|0}function Bt(a){a=a|0;wk(44728);wk(44716);wk(44704);wk(44692);wk(44680);wk(44668);wk(44656);wk(44644);wk(44632);wk(44620);wk(44608);wk(44596);wk(44584);wk(44572);return}function Ct(a){a=a|0;Kk(44900);Kk(44888);Kk(44876);Kk(44864);Kk(44852);Kk(44840);Kk(44828);Kk(44816);Kk(44804);Kk(44792);Kk(44780);Kk(44768);Kk(44756);Kk(44744);return}function Dt(a){a=a|0;wk(45532);wk(45520);wk(45508);wk(45496);wk(45484);wk(45472);wk(45460);wk(45448);wk(45436);wk(45424);wk(45412);wk(45400);wk(45388);wk(45376);wk(45364);wk(45352);wk(45340);wk(45328);wk(45316);wk(45304);wk(45292);wk(45280);wk(45268);wk(45256);return}function Et(a){a=a|0;Kk(45824);Kk(45812);Kk(45800);Kk(45788);Kk(45776);Kk(45764);Kk(45752);Kk(45740);Kk(45728);Kk(45716);Kk(45704);Kk(45692);Kk(45680);Kk(45668);Kk(45656);Kk(45644);Kk(45632);Kk(45620);Kk(45608);Kk(45596);Kk(45584);Kk(45572);Kk(45560);Kk(45548);return}function Ft(a){a=a|0;wk(46636);wk(46624);wk(46612);wk(46600);wk(46588);wk(46576);wk(46564);wk(46552);wk(46540);wk(46528);wk(46516);wk(46504);wk(46492);wk(46480);wk(46468);wk(46456);wk(46444);wk(46432);wk(46420);wk(46408);wk(46396);wk(46384);wk(46372);wk(46360);return}function Gt(a){a=a|0;Kk(46928);Kk(46916);Kk(46904);Kk(46892);Kk(46880);Kk(46868);Kk(46856);Kk(46844);Kk(46832);Kk(46820);Kk(46808);Kk(46796);Kk(46784);Kk(46772);Kk(46760);Kk(46748);Kk(46736);Kk(46724);Kk(46712);Kk(46700);Kk(46688);Kk(46676);Kk(46664);Kk(46652);return}function Ht(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0;i=r;r=r+32|0;h=i;f=k[a+8>>2]|0;c=k[a+4>>2]|0;if(f-c>>2>>>0<b>>>0){d=k[a>>2]|0;g=c-d>>2;e=g+b|0;if(e>>>0>1073741823)Pg(a);c=f-d|0;if(c>>2>>>0<536870911){c=c>>1;c=c>>>0<e>>>0?e:c}else c=1073741823;Jt(h,c,g,a+16|0);g=h+8|0;f=k[g>>2]|0;Yt(f|0,0,b<<2|0)|0;k[g>>2]=f+(b<<2);Kt(a,h);Lt(h)}else It(a,b);r=i;return}function It(a,b){a=a|0;b=b|0;var c=0;c=a+4|0;a=b;b=k[c>>2]|0;do{k[b>>2]=0;b=(k[c>>2]|0)+4|0;k[c>>2]=b;a=a+-1|0}while((a|0)!=0);return}function Jt(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;k[a+12>>2]=0;k[a+16>>2]=d;do if(b){e=d+112|0;if(b>>>0<29&(i[e>>0]|0)==0){i[e>>0]=1;break}else{d=Rg(b<<2)|0;break}}else d=0;while(0);k[a>>2]=d;c=d+(c<<2)|0;k[a+8>>2]=c;k[a+4>>2]=c;k[a+12>>2]=d+(b<<2);return}function Kt(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;d=k[a>>2]|0;f=a+4|0;c=b+4|0;e=(k[f>>2]|0)-d|0;g=(k[c>>2]|0)+(0-(e>>2)<<2)|0;k[c>>2]=g;$t(g|0,d|0,e|0)|0;e=k[a>>2]|0;k[a>>2]=k[c>>2];k[c>>2]=e;e=b+8|0;d=k[f>>2]|0;k[f>>2]=k[e>>2];k[e>>2]=d;e=a+8|0;a=b+12|0;d=k[e>>2]|0;k[e>>2]=k[a>>2];k[a>>2]=d;k[b>>2]=k[c>>2];return}function Lt(a){a=a|0;var b=0,c=0,d=0;c=k[a+4>>2]|0;d=a+8|0;b=k[d>>2]|0;if((b|0)!=(c|0)){do b=b+-4|0;while((b|0)!=(c|0));k[d>>2]=b}c=k[a>>2]|0;do if(c){b=k[a+16>>2]|0;if((b|0)==(c|0)){i[b+112>>0]=0;break}else{Sg(c);break}}while(0);return}function Mt(a,b){a=a|0;b=b|0;var c=0;if(b>>>0>1073741823)Pg(a);c=a+128|0;if(b>>>0<29&(i[c>>0]|0)==0){i[c>>0]=1;c=a+16|0}else c=Rg(b<<2)|0;k[a+4>>2]=c;k[a>>2]=c;k[a+8>>2]=c+(b<<2);return}function Nt(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0,f=0,g=0,h=0;h=r;r=r+16|0;g=h;do if((a|0)!=(b|0)){e=Sh()|0;f=k[e>>2]|0;k[e>>2]=0;d=+Wi(a,g,Jm()|0);a=k[e>>2]|0;if(!a)k[e>>2]=f;if((k[g>>2]|0)!=(b|0)){k[c>>2]=4;d=0.0;break}if((a|0)==34)k[c>>2]=4}else{k[c>>2]=4;d=0.0}while(0);r=h;return +d}function Ot(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0,f=0,g=0,h=0;h=r;r=r+16|0;g=h;do if((a|0)!=(b|0)){e=Sh()|0;f=k[e>>2]|0;k[e>>2]=0;d=+Wi(a,g,Jm()|0);a=k[e>>2]|0;if(!a)k[e>>2]=f;if((k[g>>2]|0)!=(b|0)){k[c>>2]=4;d=0.0;break}if((a|0)==34)k[c>>2]=4}else{k[c>>2]=4;d=0.0}while(0);r=h;return +d}function Pt(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0,f=0,g=0,h=0;h=r;r=r+16|0;g=h;do if((a|0)==(b|0)){k[c>>2]=4;d=0.0}else{e=Sh()|0;f=k[e>>2]|0;k[e>>2]=0;d=+Wi(a,g,Jm()|0);a=k[e>>2]|0;if(!a)k[e>>2]=f;if((k[g>>2]|0)!=(b|0)){k[c>>2]=4;d=0.0;break}if((a|0)==34)k[c>>2]=4}while(0);r=h;return +d}function Qt(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;h=r;r=r+16|0;g=h;do if((a|0)!=(b|0)){if((i[a>>0]|0)==45){k[c>>2]=4;d=0;a=0;break}e=Sh()|0;f=k[e>>2]|0;k[e>>2]=0;a=Lh(a,g,d,Jm()|0)|0;d=k[e>>2]|0;if(!d)k[e>>2]=f;if((k[g>>2]|0)!=(b|0)){k[c>>2]=4;d=0;a=0;break}if((d|0)==34){k[c>>2]=4;d=-1;a=-1}else d=M}else{k[c>>2]=4;d=0;a=0}while(0);M=d;r=h;return a|0}function Rt(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;j=r;r=r+16|0;h=j;do if((a|0)!=(b|0)){if((i[a>>0]|0)==45){k[c>>2]=4;a=0;break}f=Sh()|0;g=k[f>>2]|0;k[f>>2]=0;a=Lh(a,h,d,Jm()|0)|0;d=M;e=k[f>>2]|0;if(!e)k[f>>2]=g;if((k[h>>2]|0)!=(b|0)){k[c>>2]=4;a=0;break}if(d>>>0>0|(d|0)==0&a>>>0>4294967295|(e|0)==34){k[c>>2]=4;a=-1;break}else break}else{k[c>>2]=4;a=0}while(0);r=j;return a|0}function St(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;j=r;r=r+16|0;h=j;do if((a|0)!=(b|0)){if((i[a>>0]|0)==45){k[c>>2]=4;a=0;break}f=Sh()|0;g=k[f>>2]|0;k[f>>2]=0;a=Lh(a,h,d,Jm()|0)|0;d=M;e=k[f>>2]|0;if(!e)k[f>>2]=g;if((k[h>>2]|0)!=(b|0)){k[c>>2]=4;a=0;break}if(d>>>0>0|(d|0)==0&a>>>0>4294967295|(e|0)==34){k[c>>2]=4;a=-1;break}else break}else{k[c>>2]=4;a=0}while(0);r=j;return a|0}function Tt(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;j=r;r=r+16|0;h=j;do if((a|0)!=(b|0)){if((i[a>>0]|0)==45){k[c>>2]=4;a=0;break}f=Sh()|0;g=k[f>>2]|0;k[f>>2]=0;a=Lh(a,h,d,Jm()|0)|0;d=M;e=k[f>>2]|0;if(!e)k[f>>2]=g;if((k[h>>2]|0)!=(b|0)){k[c>>2]=4;a=0;break}if(d>>>0>0|(d|0)==0&a>>>0>65535|(e|0)==34){k[c>>2]=4;a=-1;break}else{a=a&65535;break}}else{k[c>>2]=4;a=0}while(0);r=j;return a|0}function Ut(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=r;r=r+16|0;h=i;do if((a|0)!=(b|0)){f=Sh()|0;g=k[f>>2]|0;k[f>>2]=0;a=Mh(a,h,d,Jm()|0)|0;d=M;e=k[f>>2]|0;if(!e)k[f>>2]=g;if((k[h>>2]|0)!=(b|0)){k[c>>2]=4;d=0;a=0;break}if((e|0)==34){k[c>>2]=4;h=(d|0)>0|(d|0)==0&a>>>0>0;M=h?2147483647:-2147483648;r=i;return (h?-1:0)|0}}else{k[c>>2]=4;d=0;a=0}while(0);M=d;r=i;return a|0}function Vt(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=r;r=r+16|0;h=i;a:do if((a|0)==(b|0)){k[c>>2]=4;a=0}else{f=Sh()|0;g=k[f>>2]|0;k[f>>2]=0;a=Mh(a,h,d,Jm()|0)|0;d=M;e=k[f>>2]|0;if(!e)k[f>>2]=g;if((k[h>>2]|0)!=(b|0)){k[c>>2]=4;a=0;break}do if((e|0)==34){k[c>>2]=4;if((d|0)>0|(d|0)==0&a>>>0>0){a=2147483647;break a}}else{if((d|0)<-1|(d|0)==-1&a>>>0<2147483648){k[c>>2]=4;break}if((d|0)>0|(d|0)==0&a>>>0>2147483647){k[c>>2]=4;a=2147483647;break a}else break a}while(0);a=-2147483648}while(0);r=i;return a|0}function Wt(){}function Xt(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=b-d-(c>>>0>a>>>0|0)>>>0;return (M=d,a-c>>>0|0)|0}function Yt(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=a+c|0;if((c|0)>=20){b=b&255;f=a&3;g=b|b<<8|b<<16|b<<24;e=d&~3;if(f){f=a+4-f|0;while((a|0)<(f|0)){i[a>>0]=b;a=a+1|0}}while((a|0)<(e|0)){k[a>>2]=g;a=a+4|0}}while((a|0)<(d|0)){i[a>>0]=b;a=a+1|0}return a-c|0}function Zt(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;c=a+c>>>0;return (M=b+d+(c>>>0<a>>>0|0)>>>0,c|0)|0}function _t(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){M=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}M=0;return b>>>c-32|0}function $t(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if((c|0)>=4096)return db(a|0,b|0,c|0)|0;d=a|0;if((a&3)==(b&3)){while(a&3){if(!c)return d|0;i[a>>0]=i[b>>0]|0;a=a+1|0;b=b+1|0;c=c-1|0}while((c|0)>=4){k[a>>2]=k[b>>2];a=a+4|0;b=b+4|0;c=c-4|0}}while((c|0)>0){i[a>>0]=i[b>>0]|0;a=a+1|0;b=b+1|0;c=c-1|0}return d|0}function au(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){M=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}M=a<<c-32;return 0}function bu(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if((b|0)<(a|0)&(a|0)<(b+c|0)){d=a;b=b+c|0;a=a+c|0;while((c|0)>0){a=a-1|0;b=b-1|0;c=c-1|0;i[a>>0]=i[b>>0]|0}a=d}else $t(a,b,c)|0;return a|0}function cu(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){M=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}M=(b|0)<0?-1:0;return b>>c-32|0}function du(a){a=a|0;var b=0;b=i[v+(a&255)>>0]|0;if((b|0)<8)return b|0;b=i[v+(a>>8&255)>>0]|0;if((b|0)<8)return b+8|0;b=i[v+(a>>16&255)>>0]|0;if((b|0)<8)return b+16|0;return (i[v+(a>>>24)>>0]|0)+24|0}function eu(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;f=a&65535;e=b&65535;c=ia(e,f)|0;d=a>>>16;a=(c>>>16)+(ia(e,d)|0)|0;e=b>>>16;b=ia(e,f)|0;return (M=(a>>>16)+(ia(e,d)|0)+(((a&65535)+b|0)>>>16)|0,a+b<<16|c&65535|0)|0}function fu(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=b>>31|((b|0)<0?-1:0)<<1;i=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;f=d>>31|((d|0)<0?-1:0)<<1;e=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;h=Xt(j^a,i^b,j,i)|0;g=M;a=f^j;b=e^i;return Xt((ku(h,g,Xt(f^c,e^d,f,e)|0,M,0)|0)^a,M^b,a,b)|0}function gu(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;e=r;r=r+16|0;h=e|0;g=b>>31|((b|0)<0?-1:0)<<1;f=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;j=d>>31|((d|0)<0?-1:0)<<1;i=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;a=Xt(g^a,f^b,g,f)|0;b=M;ku(a,b,Xt(j^c,i^d,j,i)|0,M,h)|0;d=Xt(k[h>>2]^g,k[h+4>>2]^f,g,f)|0;c=M;r=e;return (M=c,d)|0}function hu(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;f=c;c=eu(e,f)|0;a=M;return (M=(ia(b,f)|0)+(ia(d,e)|0)+a|a&0,c|0|0)|0}function iu(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return ku(a,b,c,d,0)|0}function ju(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;f=r;r=r+16|0;e=f|0;ku(a,b,c,d,e)|0;r=f;return (M=k[e+4>>2]|0,k[e>>2]|0)|0}function ku(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;l=a;i=b;j=i;g=c;n=d;h=n;if(!j){f=(e|0)!=0;if(!h){if(f){k[e>>2]=(l>>>0)%(g>>>0);k[e+4>>2]=0}n=0;e=(l>>>0)/(g>>>0)>>>0;return (M=n,e)|0}else{if(!f){n=0;e=0;return (M=n,e)|0}k[e>>2]=a|0;k[e+4>>2]=b&0;n=0;e=0;return (M=n,e)|0}}f=(h|0)==0;do if(g){if(!f){f=(ka(h|0)|0)-(ka(j|0)|0)|0;if(f>>>0<=31){m=f+1|0;h=31-f|0;b=f-31>>31;g=m;a=l>>>(m>>>0)&b|j<<h;b=j>>>(m>>>0)&b;f=0;h=l<<h;break}if(!e){n=0;e=0;return (M=n,e)|0}k[e>>2]=a|0;k[e+4>>2]=i|b&0;n=0;e=0;return (M=n,e)|0}f=g-1|0;if(f&g){h=(ka(g|0)|0)+33-(ka(j|0)|0)|0;p=64-h|0;m=32-h|0;i=m>>31;o=h-32|0;b=o>>31;g=h;a=m-1>>31&j>>>(o>>>0)|(j<<m|l>>>(h>>>0))&b;b=b&j>>>(h>>>0);f=l<<p&i;h=(j<<p|l>>>(o>>>0))&i|l<<m&h-33>>31;break}if(e){k[e>>2]=f&l;k[e+4>>2]=0}if((g|0)==1){o=i|b&0;p=a|0|0;return (M=o,p)|0}else{p=du(g|0)|0;o=j>>>(p>>>0)|0;p=j<<32-p|l>>>(p>>>0)|0;return (M=o,p)|0}}else{if(f){if(e){k[e>>2]=(j>>>0)%(g>>>0);k[e+4>>2]=0}o=0;p=(j>>>0)/(g>>>0)>>>0;return (M=o,p)|0}if(!l){if(e){k[e>>2]=0;k[e+4>>2]=(j>>>0)%(h>>>0)}o=0;p=(j>>>0)/(h>>>0)>>>0;return (M=o,p)|0}f=h-1|0;if(!(f&h)){if(e){k[e>>2]=a|0;k[e+4>>2]=f&j|b&0}o=0;p=j>>>((du(h|0)|0)>>>0);return (M=o,p)|0}f=(ka(h|0)|0)-(ka(j|0)|0)|0;if(f>>>0<=30){b=f+1|0;h=31-f|0;g=b;a=j<<h|l>>>(b>>>0);b=j>>>(b>>>0);f=0;h=l<<h;break}if(!e){o=0;p=0;return (M=o,p)|0}k[e>>2]=a|0;k[e+4>>2]=i|b&0;o=0;p=0;return (M=o,p)|0}while(0);if(!g){j=h;i=0;h=0}else{m=c|0|0;l=n|d&0;j=Zt(m|0,l|0,-1,-1)|0;c=M;i=h;h=0;do{d=i;i=f>>>31|i<<1;f=h|f<<1;d=a<<1|d>>>31|0;n=a>>>31|b<<1|0;Xt(j,c,d,n)|0;p=M;o=p>>31|((p|0)<0?-1:0)<<1;h=o&1;a=Xt(d,n,o&m,(((p|0)<0?-1:0)>>31|((p|0)<0?-1:0)<<1)&l)|0;b=M;g=g-1|0}while((g|0)!=0);j=i;i=0}g=0;if(e){k[e>>2]=a;k[e+4>>2]=b}o=(f|0)>>>31|(j|g)<<1|(g<<1|f>>>31)&0|i;p=(f<<1|0>>>31)&-2|h;return (M=o,p)|0}function lu(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;return Ib[a&15](b|0,c|0,d|0,e|0,f|0,g|0,h|0)|0}function mu(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;Jb[a&15](b|0,c|0,d|0,e|0,f|0)}function nu(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=+g;return Kb[a&3](b|0,c|0,d|0,e|0,f|0,+g)|0}function ou(a,b){a=a|0;b=b|0;Lb[a&255](b|0)}function pu(a,b,c){a=a|0;b=b|0;c=c|0;Mb[a&127](b|0,c|0)}function qu(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return Nb[a&63](b|0,c|0,d|0,e|0,f|0,g|0)|0}function ru(a,b){a=a|0;b=b|0;return Ob[a&127](b|0)|0}function su(a,b,c,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;return Pb[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0,k|0,l|0)|0}function tu(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Qb[a&63](b|0,c|0,d|0)|0}function uu(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;p=p|0;Rb[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0,k|0,l|0,m|0,n|0,o|0,p|0)}function vu(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;Sb[a&15](b|0,c|0,d|0,e|0,f|0,g|0)}function wu(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;Tb[a&7](b|0,c|0,d|0,e|0,f|0,g|0,h|0)}function xu(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;Ub[a&7](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0,k|0)}function yu(a,b,c){a=a|0;b=b|0;c=c|0;return Vb[a&63](b|0,c|0)|0}function zu(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return Wb[a&31](b|0,c|0,d|0,e|0,f|0)|0}function Au(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return +Xb[a&3](b|0,c|0,d|0)}function Bu(a){a=a|0;return Yb[a&15]()|0}function Cu(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Zb[a&31](b|0,c|0,d|0,e|0)|0}function Du(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;_b[a&15](b|0,c|0,d|0)}function Eu(a){a=a|0;$b[a&7]()}function Fu(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;return ac[a&15](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0)|0}function Gu(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;return bc[a&7](b|0,c|0,d|0,e|0,+f)|0}function Hu(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;cc[a&63](b|0,c|0,d|0,e|0)}function Iu(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;la(0);return 0}function Ju(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;la(1)}function Ku(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;la(2);return 0}function Lu(a){a=a|0;la(3)}function Mu(a,b){a=a|0;b=b|0;la(4)}function Nu(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;la(5);return 0}function Ou(a){a=a|0;la(6);return 0}function Pu(a){a=a|0;return lb(a|0)|0}function Qu(a){a=a|0;return Ab(a|0)|0}function Ru(a){a=a|0;return qb(a|0)|0}function Su(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;la(7);return 0}function Tu(a,b,c){a=a|0;b=b|0;c=c|0;la(8);return 0}function Uu(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;la(9)}function Vu(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;la(10)}function Wu(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;la(11)}function Xu(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;la(12)}function Yu(a,b){a=a|0;b=b|0;la(13);return 0}function Zu(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;la(14);return 0}function _u(a,b,c){a=a|0;b=b|0;c=c|0;la(15);return 0.0}function $u(){la(16);return 0}function av(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;la(17);return 0}function bv(a,b,c){a=a|0;b=b|0;c=c|0;la(18)}function cv(a,b,c){a=a|0;b=b|0;c=c|0;ub(a|0,b|0,c|0)}function dv(){la(19)}function ev(){yb()}function fv(){eb()}function gv(){vb()}function hv(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;la(20);return 0}function iv(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;la(21);return 0}function jv(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;la(22)}

// EMSCRIPTEN_END_FUNCS
var Ib=[Iu,Eo,Io,Cp,Gp,Lp,Np,ls,ws,Iu,Iu,Iu,Iu,Iu,Iu,Iu];var Jb=[Ju,pg,dg,Tf,Hf,vf,jf,Ye,He,Ah,zh,wh,Ju,Ju,Ju,Ju];var Kb=[Ku,Rp,Xp,Ku];var Lb=[Lu,lg,mg,$f,ag,Pf,Qf,Df,Ef,rf,sf,ef,ff,Ue,Ve,De,Ee,Od,Sd,Pd,Ql,Sl,Rl,Tl,jd,kd,Lg,ld,cd,dd,Hc,Ic,Pc,Qc,Wc,Xc,md,nd,td,ud,Ad,Bd,Hd,Id,be,ce,ie,je,pe,qe,we,xe,Se,Te,rk,xg,Vg,Wg,ah,bh,fh,gh,ih,lh,jh,kh,mh,nh,pl,Hj,Nj,al,Sj,Yj,pk,qk,bl,ql,El,Gl,Fl,Hl,Kl,Ml,Ll,Nl,Yl,_l,Zl,$l,gm,hm,Uk,im,jm,km,mm,yq,qm,rm,vm,wm,Km,Lm,cn,dn,sn,tn,Fn,Gn,co,eo,Bo,Do,Go,Ho,Ko,Lo,Vo,Wo,ep,fp,pp,qp,Ap,Bp,Jp,Kp,Pp,Qp,Vp,Wp,$p,aq,eq,fq,mq,nq,Qq,Rq,ks,hr,Jr,Kr,Lr,Mr,lm,xq,Aq,_q,pr,xr,Fr,Gr,Dg,Pg,wc,Jl,cl,Ke,Kh,ij,jj,Aj,ai,Dp,Fp,zq,ut,Bt,Ct,Dt,Et,Ft,Gt,wk,Kk,uj,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu,Lu];var Mb=[Mu,og,cg,Sf,Gf,uf,hf,Xe,Ge,dl,Ij,Mj,Tj,Xj,sl,Oo,Po,Qo,Ro,To,Uo,Zo,_o,$o,ap,cp,dp,ip,jp,kp,lp,np,op,tp,up,vp,wp,yp,zp,dq,iq,Rr,Tr,Vr,Sr,Ur,Wr,Bg,Cg,Eg,Ul,Tk,Zk,Bc,Dc,Ek,Je,_e,lf,xf,Jf,Vf,fg,rg,Ng,gk,ek,Xk,am,fk,Ck,Ok,Nk,Qs,Rs,Ss,Ts,Us,Vs,gr,Ws,Xs,Ys,Zs,_s,$s,at,bt,ct,dt,et,ft,gt,ht,it,jt,kt,lt,mt,nt,ot,pt,qt,st,Mt,Mu,Mu,Mu,Mu,Mu,Mu,Mu,Mu,Mu,Mu,Mu,Mu,Mu,Mu,Mu,Mu,Mu,Mu,Mu,Mu,Mu,Mu,Mu];var Nb=[Nu,xm,ym,zm,Am,Bm,Cm,Dm,Em,Fm,Gm,Hm,Mm,Nm,Om,Pm,Qm,Rm,Sm,Tm,Um,Vm,Wm,kn,mn,xn,zn,In,Jn,Kn,Mn,On,go,ho,io,ko,mo,Up,_p,bd,Is,Nu,Nu,Nu,Nu,Nu,Nu,Nu,Nu,Nu,Nu,Nu,Nu,Nu,Nu,Nu,Nu,Nu,Nu,Nu,Nu,Nu,Nu,Nu];var Ob=[Ou,hl,il,gd,ll,yg,Xg,ch,hh,Ai,Jj,xl,zl,Al,wl,Oj,Pj,Uj,kl,Zj,_j,cm,Hn,Yr,_r,as,gs,is,cs,es,fo,Zr,$r,bs,hs,js,ds,fs,Mo,No,So,Xo,Yo,bp,gp,hp,mp,rp,sp,xp,lr,mr,or,Nr,Pr,Or,Qr,cr,dr,fr,tr,ur,wr,Br,Cr,Er,Rg,Yk,Gg,Il,Ol,Pu,Qu,Ru,ei,dj,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou,Ou];var Pb=[Su,Ep,Mp,Su];var Qb=[Tu,el,jl,nl,ik,jk,oh,pj,Di,Ci,Bi,Ei,tl,yl,Kj,Cl,Vj,pm,um,bq,gq,Tq,Vq,Yq,Bq,Iq,Lq,Oq,Cc,mj,Fk,di,Ns,Ps,ti,si,ni,Ri,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu,Tu];var Rb=[Uu,Tp,Zp,Uu];var Sb=[Vu,ed,Dh,Ch,Bh,ul,fl,cq,hq,Vu,Vu,Vu,Vu,Vu,Vu,Vu];var Tb=[Wu,jn,pn,wn,Bn,Wu,Wu,Wu];var Ub=[Xu,Hp,Op,Sp,Yp,Xu,Xu,Xu];var Vb=[Yu,ng,bg,Rf,Ff,tf,gf,We,Fe,hd,id,Bl,Lj,Qj,Dl,ml,Wj,$j,ol,Sq,Uq,Wq,Gq,Jq,Mq,uc,wq,Wl,Xl,ci,bi,yk,Lk,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu,Yu];var Wb=[Zu,nm,sm,en,fn,ln,rn,un,vn,yn,Dn,Zq,kr,nr,Pq,br,er,sr,vr,Ar,Dr,ui,qi,Zu,Zu,Zu,Zu,Zu,Zu,Zu,Zu,Zu];var Xb=[_u,Pt,Ot,Nt];var Yb=[$u,rc,Qg,Jm,pq,qq,rq,Nh,Ph,Oh,$u,$u,$u,$u,$u,$u];var Zb=[av,Xq,Dq,Eq,Fq,Nq,vs,Hs,ri,_h,oi,Vt,Ut,Tt,St,Rt,Qt,av,av,av,av,av,av,av,av,av,av,av,av,av,av,av];var _b=[bv,hk,zg,dm,ok,cv,Ak,Fg,lk,fm,Ls,Ms,Os,uk,Ik,bv];var $b=[dv,ev,Hh,fv,Ih,gv,Gh,dv];var ac=[hv,Qn,oo,ir,jr,$q,ar,qr,rr,yr,zr,hv,hv,hv,hv,hv];var bc=[iv,nn,qn,An,Cn,iv,iv,iv];var cc=[jv,Td,Ud,Qd,Rd,fd,Jc,Kc,Rc,Sc,Yc,Zc,od,pd,vd,wd,Cd,Dd,Jd,Kd,de,ee,ke,le,re,se,ye,ze,qh,rh,th,vl,gl,om,tm,nk,xc,yc,zc,Ac,Ec,Fc,Gc,Zd,_d,$d,ae,jv,jv,jv,jv,jv,jv,jv,jv,jv,jv,jv,jv,jv,jv,jv,jv,jv];return{___cxa_can_catch:Eh,_free:uj,_jpegls_decode:Mg,___cxa_is_pointer_type:Fh,_i64Add:Zt,_memmove:bu,_i64Subtract:Xt,_memset:Yt,_malloc:tj,_memcpy:$t,_bitshift64Lshr:_t,_bitshift64Shl:au,__GLOBAL__I_000101:Bj,__GLOBAL__sub_I_jpegls_cpp:vc,__GLOBAL__sub_I_iostream_cpp:Cj,runPostSets:Wt,_emscripten_replace_memory:Hb,stackAlloc:dc,stackSave:ec,stackRestore:fc,establishStackSpace:gc,setThrew:hc,setTempRet0:kc,getTempRet0:lc,dynCall_iiiiiiii:lu,dynCall_viiiii:mu,dynCall_iiiiiid:nu,dynCall_vi:ou,dynCall_vii:pu,dynCall_iiiiiii:qu,dynCall_ii:ru,dynCall_iiiiiiiiiiii:su,dynCall_iiii:tu,dynCall_viiiiiiiiiiiiiii:uu,dynCall_viiiiii:vu,dynCall_viiiiiii:wu,dynCall_viiiiiiiiii:xu,dynCall_iii:yu,dynCall_iiiiii:zu,dynCall_diii:Au,dynCall_i:Bu,dynCall_iiiii:Cu,dynCall_viii:Du,dynCall_v:Eu,dynCall_iiiiiiiii:Fu,dynCall_iiiiid:Gu,dynCall_viiii:Hu}})


// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg,Module.asmLibraryArg,buffer);var runPostSets=Module["runPostSets"]=asm["runPostSets"];var ___cxa_can_catch=Module["___cxa_can_catch"]=asm["___cxa_can_catch"];var _free=Module["_free"]=asm["_free"];var _jpegls_decode=Module["_jpegls_decode"]=asm["_jpegls_decode"];var ___cxa_is_pointer_type=Module["___cxa_is_pointer_type"]=asm["___cxa_is_pointer_type"];var _i64Add=Module["_i64Add"]=asm["_i64Add"];var _memmove=Module["_memmove"]=asm["_memmove"];var _i64Subtract=Module["_i64Subtract"]=asm["_i64Subtract"];var _memset=Module["_memset"]=asm["_memset"];var _malloc=Module["_malloc"]=asm["_malloc"];var _memcpy=Module["_memcpy"]=asm["_memcpy"];var _emscripten_replace_memory=Module["_emscripten_replace_memory"]=asm["_emscripten_replace_memory"];var __GLOBAL__sub_I_iostream_cpp=Module["__GLOBAL__sub_I_iostream_cpp"]=asm["__GLOBAL__sub_I_iostream_cpp"];var _bitshift64Lshr=Module["_bitshift64Lshr"]=asm["_bitshift64Lshr"];var __GLOBAL__sub_I_jpegls_cpp=Module["__GLOBAL__sub_I_jpegls_cpp"]=asm["__GLOBAL__sub_I_jpegls_cpp"];var __GLOBAL__I_000101=Module["__GLOBAL__I_000101"]=asm["__GLOBAL__I_000101"];var _bitshift64Shl=Module["_bitshift64Shl"]=asm["_bitshift64Shl"];var dynCall_iiiiiiii=Module["dynCall_iiiiiiii"]=asm["dynCall_iiiiiiii"];var dynCall_viiiii=Module["dynCall_viiiii"]=asm["dynCall_viiiii"];var dynCall_iiiiiid=Module["dynCall_iiiiiid"]=asm["dynCall_iiiiiid"];var dynCall_vi=Module["dynCall_vi"]=asm["dynCall_vi"];var dynCall_vii=Module["dynCall_vii"]=asm["dynCall_vii"];var dynCall_iiiiiii=Module["dynCall_iiiiiii"]=asm["dynCall_iiiiiii"];var dynCall_ii=Module["dynCall_ii"]=asm["dynCall_ii"];var dynCall_iiiiiiiiiiii=Module["dynCall_iiiiiiiiiiii"]=asm["dynCall_iiiiiiiiiiii"];var dynCall_iiii=Module["dynCall_iiii"]=asm["dynCall_iiii"];var dynCall_viiiiiiiiiiiiiii=Module["dynCall_viiiiiiiiiiiiiii"]=asm["dynCall_viiiiiiiiiiiiiii"];var dynCall_viiiiii=Module["dynCall_viiiiii"]=asm["dynCall_viiiiii"];var dynCall_viiiiiii=Module["dynCall_viiiiiii"]=asm["dynCall_viiiiiii"];var dynCall_viiiiiiiiii=Module["dynCall_viiiiiiiiii"]=asm["dynCall_viiiiiiiiii"];var dynCall_iii=Module["dynCall_iii"]=asm["dynCall_iii"];var dynCall_iiiiii=Module["dynCall_iiiiii"]=asm["dynCall_iiiiii"];var dynCall_diii=Module["dynCall_diii"]=asm["dynCall_diii"];var dynCall_i=Module["dynCall_i"]=asm["dynCall_i"];var dynCall_iiiii=Module["dynCall_iiiii"]=asm["dynCall_iiiii"];var dynCall_viii=Module["dynCall_viii"]=asm["dynCall_viii"];var dynCall_v=Module["dynCall_v"]=asm["dynCall_v"];var dynCall_iiiiiiiii=Module["dynCall_iiiiiiiii"]=asm["dynCall_iiiiiiiii"];var dynCall_iiiiid=Module["dynCall_iiiiid"]=asm["dynCall_iiiiid"];var dynCall_viiii=Module["dynCall_viiii"]=asm["dynCall_viiii"];Runtime.stackAlloc=asm["stackAlloc"];Runtime.stackSave=asm["stackSave"];Runtime.stackRestore=asm["stackRestore"];Runtime.establishStackSpace=asm["establishStackSpace"];Runtime.setTempRet0=asm["setTempRet0"];Runtime.getTempRet0=asm["getTempRet0"];function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;var preloadStartTime=null;var calledMain=false;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"])run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};Module["callMain"]=Module.callMain=function callMain(args){assert(runDependencies==0,"cannot call main when async dependencies remain! (listen on __ATMAIN__)");assert(__ATPRERUN__.length==0,"cannot call main when preRun functions remain to be called");args=args||[];ensureInitRuntime();var argc=args.length+1;function pad(){for(var i=0;i<4-1;i++){argv.push(0)}}var argv=[allocate(intArrayFromString(Module["thisProgram"]),"i8",ALLOC_NORMAL)];pad();for(var i=0;i<argc-1;i=i+1){argv.push(allocate(intArrayFromString(args[i]),"i8",ALLOC_NORMAL));pad()}argv.push(0);argv=allocate(argv,"i32",ALLOC_NORMAL);try{var ret=Module["_main"](argc,argv,0);exit(ret,true)}catch(e){if(e instanceof ExitStatus){return}else if(e=="SimulateInfiniteLoop"){Module["noExitRuntime"]=true;return}else{if(e&&typeof e==="object"&&e.stack)Module.printErr("exception thrown: "+[e,e.stack]);throw e}}finally{calledMain=true}};function run(args){args=args||Module["arguments"];if(preloadStartTime===null)preloadStartTime=Date.now();if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();if(Module["_main"]&&shouldRunNow)Module["callMain"](args);postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout((function(){setTimeout((function(){Module["setStatus"]("")}),1);doRun()}),1)}else{doRun()}}Module["run"]=Module.run=run;function exit(status,implicit){if(implicit&&Module["noExitRuntime"]){return}if(Module["noExitRuntime"]){}else{ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(Module["onExit"])Module["onExit"](status)}if(ENVIRONMENT_IS_NODE){process["stdout"]["once"]("drain",(function(){process["exit"](status)}));console.log(" ");setTimeout((function(){process["exit"](status)}),500)}else if(ENVIRONMENT_IS_SHELL&&typeof quit==="function"){quit(status)}throw new ExitStatus(status)}Module["exit"]=Module.exit=exit;var abortDecorators=[];function abort(what){if(what!==undefined){Module.print(what);Module.printErr(what);what=JSON.stringify(what)}else{what=""}ABORT=true;EXITSTATUS=1;var extra="\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";var output="abort("+what+") at "+stackTrace()+extra;if(abortDecorators){abortDecorators.forEach((function(decorator){output=decorator(output,what)}))}throw output}Module["abort"]=Module.abort=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}var shouldRunNow=true;if(Module["noInitialRun"]){shouldRunNow=false}run()





  return Module;
};

}).call(this,require('_process'),"/lib")
},{"_process":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/watchify/node_modules/process/browser.js","fs":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/watchify/node_modules/browserify/lib/_empty.js","path":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/path-browserify/index.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/lib/libopenjpeg.js":[function(require,module,exports){
(function (process,__dirname){

var OpenJPEG;
module.exports = OpenJPEG = function(Module) {
  Module = Module || {};

var Module;if(!Module)Module=(typeof OpenJPEG!=="undefined"?OpenJPEG:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=typeof window==="object";var ENVIRONMENT_IS_WORKER=typeof importScripts==="function";var ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof require==="function"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!Module["print"])Module["print"]=function print(x){process["stdout"].write(x+"\n")};if(!Module["printErr"])Module["printErr"]=function printErr(x){process["stderr"].write(x+"\n")};var nodeFS=require("fs");var nodePath=require("path");Module["read"]=function read(filename,binary){filename=nodePath["normalize"](filename);var ret=nodeFS["readFileSync"](filename);if(!ret&&filename!=nodePath["resolve"](filename)){filename=path.join(__dirname,"..","src",filename);ret=nodeFS["readFileSync"](filename)}if(ret&&!binary)ret=ret.toString();return ret};Module["readBinary"]=function readBinary(filename){var ret=Module["read"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};Module["load"]=function load(f){globalEval(read(f))};if(!Module["thisProgram"]){if(process["argv"].length>1){Module["thisProgram"]=process["argv"][1].replace(/\\/g,"/")}else{Module["thisProgram"]="unknown-program"}}Module["arguments"]=process["argv"].slice(2);if(typeof module!=="undefined"){module["exports"]=Module}process["on"]("uncaughtException",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));Module["inspect"]=(function(){return"[Emscripten Module object]"})}else if(ENVIRONMENT_IS_SHELL){if(!Module["print"])Module["print"]=print;if(typeof printErr!="undefined")Module["printErr"]=printErr;if(typeof read!="undefined"){Module["read"]=read}else{Module["read"]=function read(){throw"no read() available (jsc?)"}}Module["readBinary"]=function readBinary(f){if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}var data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){Module["arguments"]=scriptArgs}else if(typeof arguments!="undefined"){Module["arguments"]=arguments}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){Module["read"]=function read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};if(typeof arguments!="undefined"){Module["arguments"]=arguments}if(typeof console!=="undefined"){if(!Module["print"])Module["print"]=function print(x){console.log(x)};if(!Module["printErr"])Module["printErr"]=function printErr(x){console.log(x)}}else{var TRY_USE_DUMP=false;if(!Module["print"])Module["print"]=TRY_USE_DUMP&&typeof dump!=="undefined"?(function(x){dump(x)}):(function(x){})}if(ENVIRONMENT_IS_WORKER){Module["load"]=importScripts}if(typeof Module["setWindowTitle"]==="undefined"){Module["setWindowTitle"]=(function(title){document.title=title})}}else{throw"Unknown runtime environment. Where are we?"}function globalEval(x){eval.call(null,x)}if(!Module["load"]&&Module["read"]){Module["load"]=function load(f){globalEval(Module["read"](f))}}if(!Module["print"]){Module["print"]=(function(){})}if(!Module["printErr"]){Module["printErr"]=Module["print"]}if(!Module["arguments"]){Module["arguments"]=[]}if(!Module["thisProgram"]){Module["thisProgram"]="./this.program"}Module.print=Module["print"];Module.printErr=Module["printErr"];Module["preRun"]=[];Module["postRun"]=[];for(var key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}var Runtime={setTempRet0:(function(value){tempRet0=value}),getTempRet0:(function(){return tempRet0}),stackSave:(function(){return STACKTOP}),stackRestore:(function(stackTop){STACKTOP=stackTop}),getNativeTypeSize:(function(type){switch(type){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:{if(type[type.length-1]==="*"){return Runtime.QUANTUM_SIZE}else if(type[0]==="i"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}),getNativeFieldSize:(function(type){return Math.max(Runtime.getNativeTypeSize(type),Runtime.QUANTUM_SIZE)}),STACK_ALIGN:16,prepVararg:(function(ptr,type){if(type==="double"||type==="i64"){if(ptr&7){assert((ptr&7)===4);ptr+=4}}else{assert((ptr&3)===0)}return ptr}),getAlignSize:(function(type,size,vararg){if(!vararg&&(type=="i64"||type=="double"))return 8;if(!type)return Math.min(size,8);return Math.min(size||(type?Runtime.getNativeFieldSize(type):0),Runtime.QUANTUM_SIZE)}),dynCall:(function(sig,ptr,args){if(args&&args.length){if(!args.splice)args=Array.prototype.slice.call(args);args.splice(0,0,ptr);return Module["dynCall_"+sig].apply(null,args)}else{return Module["dynCall_"+sig].call(null,ptr)}}),functionPointers:[],addFunction:(function(func){for(var i=0;i<Runtime.functionPointers.length;i++){if(!Runtime.functionPointers[i]){Runtime.functionPointers[i]=func;return 2*(1+i)}}throw"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS."}),removeFunction:(function(index){Runtime.functionPointers[(index-2)/2]=null}),warnOnce:(function(text){if(!Runtime.warnOnce.shown)Runtime.warnOnce.shown={};if(!Runtime.warnOnce.shown[text]){Runtime.warnOnce.shown[text]=1;Module.printErr(text)}}),funcWrappers:{},getFuncWrapper:(function(func,sig){assert(sig);if(!Runtime.funcWrappers[sig]){Runtime.funcWrappers[sig]={}}var sigCache=Runtime.funcWrappers[sig];if(!sigCache[func]){sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func,arguments)}}return sigCache[func]}),getCompilerSetting:(function(name){throw"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work"}),stackAlloc:(function(size){var ret=STACKTOP;STACKTOP=STACKTOP+size|0;STACKTOP=STACKTOP+15&-16;return ret}),staticAlloc:(function(size){var ret=STATICTOP;STATICTOP=STATICTOP+size|0;STATICTOP=STATICTOP+15&-16;return ret}),dynamicAlloc:(function(size){var ret=DYNAMICTOP;DYNAMICTOP=DYNAMICTOP+size|0;DYNAMICTOP=DYNAMICTOP+15&-16;if(DYNAMICTOP>=TOTAL_MEMORY){var success=enlargeMemory();if(!success){DYNAMICTOP=ret;return 0}}return ret}),alignMemory:(function(size,quantum){var ret=size=Math.ceil(size/(quantum?quantum:16))*(quantum?quantum:16);return ret}),makeBigInt:(function(low,high,unsigned){var ret=unsigned?+(low>>>0)+ +(high>>>0)*+4294967296:+(low>>>0)+ +(high|0)*+4294967296;return ret}),GLOBAL_BASE:8,QUANTUM_SIZE:4,__dummy__:0};Module["Runtime"]=Runtime;var __THREW__=0;var ABORT=false;var EXITSTATUS=0;var undef=0;var tempValue,tempInt,tempBigInt,tempInt2,tempBigInt2,tempPair,tempBigIntI,tempBigIntR,tempBigIntS,tempBigIntP,tempBigIntD,tempDouble,tempFloat;var tempI64,tempI64b;var tempRet0,tempRet1,tempRet2,tempRet3,tempRet4,tempRet5,tempRet6,tempRet7,tempRet8,tempRet9;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}var globalScope=this;function getCFunc(ident){var func=Module["_"+ident];if(!func){try{func=eval("_"+ident)}catch(e){}}assert(func,"Cannot call unknown function "+ident+" (perhaps LLVM optimizations or closure removed it?)");return func}var cwrap,ccall;((function(){var JSfuncs={"stackSave":(function(){Runtime.stackSave()}),"stackRestore":(function(){Runtime.stackRestore()}),"arrayToC":(function(arr){var ret=Runtime.stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),"stringToC":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){ret=Runtime.stackAlloc((str.length<<2)+1);writeStringToMemory(str,ret)}return ret})};var toC={"string":JSfuncs["stringToC"],"array":JSfuncs["arrayToC"]};ccall=function ccallFunc(ident,returnType,argTypes,args,opts){var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=Runtime.stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);if(returnType==="string")ret=Pointer_stringify(ret);if(stack!==0){if(opts&&opts.async){EmterpreterAsync.asyncFinalizers.push((function(){Runtime.stackRestore(stack)}));return}Runtime.stackRestore(stack)}return ret};var sourceRegex=/^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;function parseJSFunc(jsfunc){var parsed=jsfunc.toString().match(sourceRegex).slice(1);return{arguments:parsed[0],body:parsed[1],returnValue:parsed[2]}}var JSsource={};for(var fun in JSfuncs){if(JSfuncs.hasOwnProperty(fun)){JSsource[fun]=parseJSFunc(JSfuncs[fun])}}cwrap=function cwrap(ident,returnType,argTypes){argTypes=argTypes||[];var cfunc=getCFunc(ident);var numericArgs=argTypes.every((function(type){return type==="number"}));var numericRet=returnType!=="string";if(numericRet&&numericArgs){return cfunc}var argNames=argTypes.map((function(x,i){return"$"+i}));var funcstr="(function("+argNames.join(",")+") {";var nargs=argTypes.length;if(!numericArgs){funcstr+="var stack = "+JSsource["stackSave"].body+";";for(var i=0;i<nargs;i++){var arg=argNames[i],type=argTypes[i];if(type==="number")continue;var convertCode=JSsource[type+"ToC"];funcstr+="var "+convertCode.arguments+" = "+arg+";";funcstr+=convertCode.body+";";funcstr+=arg+"="+convertCode.returnValue+";"}}var cfuncname=parseJSFunc((function(){return cfunc})).returnValue;funcstr+="var ret = "+cfuncname+"("+argNames.join(",")+");";if(!numericRet){var strgfy=parseJSFunc((function(){return Pointer_stringify})).returnValue;funcstr+="ret = "+strgfy+"(ret);"}if(!numericArgs){funcstr+=JSsource["stackRestore"].body.replace("()","(stack)")+";"}funcstr+="return ret})";return eval(funcstr)}}))();Module["ccall"]=ccall;Module["cwrap"]=cwrap;function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=+1?tempDouble>+0?(Math_min(+Math_floor(tempDouble/+4294967296),+4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/+4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}Module["setValue"]=setValue;function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for setValue: "+type)}return null}Module["getValue"]=getValue;var ALLOC_NORMAL=0;var ALLOC_STACK=1;var ALLOC_STATIC=2;var ALLOC_DYNAMIC=3;var ALLOC_NONE=4;Module["ALLOC_NORMAL"]=ALLOC_NORMAL;Module["ALLOC_STACK"]=ALLOC_STACK;Module["ALLOC_STATIC"]=ALLOC_STATIC;Module["ALLOC_DYNAMIC"]=ALLOC_DYNAMIC;Module["ALLOC_NONE"]=ALLOC_NONE;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab==="number"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types==="string"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[_malloc,Runtime.stackAlloc,Runtime.staticAlloc,Runtime.dynamicAlloc][allocator===undefined?ALLOC_STATIC:allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var ptr=ret,stop;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType==="i8"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];if(typeof curr==="function"){curr=Runtime.getFunctionIndex(curr)}type=singleType||types[i];if(type===0){i++;continue}if(type=="i64")type="i32";setValue(ret+i,curr,type);if(previousType!==type){typeSize=Runtime.getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}Module["allocate"]=allocate;function getMemory(size){if(!staticSealed)return Runtime.staticAlloc(size);if(typeof _sbrk!=="undefined"&&!_sbrk.called||!runtimeInitialized)return Runtime.dynamicAlloc(size);return _malloc(size)}Module["getMemory"]=getMemory;function Pointer_stringify(ptr,length){if(length===0||!ptr)return"";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret="";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return Module["UTF8ToString"](ptr)}Module["Pointer_stringify"]=Pointer_stringify;function AsciiToString(ptr){var str="";while(1){var ch=HEAP8[ptr++>>0];if(!ch)return str;str+=String.fromCharCode(ch)}}Module["AsciiToString"]=AsciiToString;function stringToAscii(str,outPtr){return writeAsciiToMemory(str,outPtr,false)}Module["stringToAscii"]=stringToAscii;function UTF8ArrayToString(u8Array,idx){var u0,u1,u2,u3,u4,u5;var str="";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}Module["UTF8ArrayToString"]=UTF8ArrayToString;function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}Module["UTF8ToString"]=UTF8ToString;function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}Module["stringToUTF8Array"]=stringToUTF8Array;function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}Module["stringToUTF8"]=stringToUTF8;function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){++len}else if(u<=2047){len+=2}else if(u<=65535){len+=3}else if(u<=2097151){len+=4}else if(u<=67108863){len+=5}else{len+=6}}return len}Module["lengthBytesUTF8"]=lengthBytesUTF8;function UTF16ToString(ptr){var i=0;var str="";while(1){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)return str;++i;str+=String.fromCharCode(codeUnit)}}Module["UTF16ToString"]=UTF16ToString;function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr}Module["stringToUTF16"]=stringToUTF16;function lengthBytesUTF16(str){return str.length*2}Module["lengthBytesUTF16"]=lengthBytesUTF16;function UTF32ToString(ptr){var i=0;var str="";while(1){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)return str;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}}Module["UTF32ToString"]=UTF32ToString;function stringToUTF32(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr}Module["stringToUTF32"]=stringToUTF32;function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len}Module["lengthBytesUTF32"]=lengthBytesUTF32;function demangle(func){var hasLibcxxabi=!!Module["___cxa_demangle"];if(hasLibcxxabi){try{var buf=_malloc(func.length);writeStringToMemory(func.substr(1),buf);var status=_malloc(4);var ret=Module["___cxa_demangle"](buf,0,0,status);if(getValue(status,"i32")===0&&ret){return Pointer_stringify(ret)}}catch(e){}finally{if(buf)_free(buf);if(status)_free(status);if(ret)_free(ret)}}var i=3;var basicTypes={"v":"void","b":"bool","c":"char","s":"short","i":"int","l":"long","f":"float","d":"double","w":"wchar_t","a":"signed char","h":"unsigned char","t":"unsigned short","j":"unsigned int","m":"unsigned long","x":"long long","y":"unsigned long long","z":"..."};var subs=[];var first=true;function dump(x){if(x)Module.print(x);Module.print(func);var pre="";for(var a=0;a<i;a++)pre+=" ";Module.print(pre+"^")}function parseNested(){i++;if(func[i]==="K")i++;var parts=[];while(func[i]!=="E"){if(func[i]==="S"){i++;var next=func.indexOf("_",i);var num=func.substring(i,next)||0;parts.push(subs[num]||"?");i=next+1;continue}if(func[i]==="C"){parts.push(parts[parts.length-1]);i+=2;continue}var size=parseInt(func.substr(i));var pre=size.toString().length;if(!size||!pre){i--;break}var curr=func.substr(i+pre,size);parts.push(curr);subs.push(curr);i+=pre+size}i++;return parts}function parse(rawList,limit,allowVoid){limit=limit||Infinity;var ret="",list=[];function flushList(){return"("+list.join(", ")+")"}var name;if(func[i]==="N"){name=parseNested().join("::");limit--;if(limit===0)return rawList?[name]:name}else{if(func[i]==="K"||first&&func[i]==="L")i++;var size=parseInt(func.substr(i));if(size){var pre=size.toString().length;name=func.substr(i+pre,size);i+=pre+size}}first=false;if(func[i]==="I"){i++;var iList=parse(true);var iRet=parse(true,1,true);ret+=iRet[0]+" "+name+"<"+iList.join(", ")+">"}else{ret=name}paramLoop:while(i<func.length&&limit-->0){var c=func[i++];if(c in basicTypes){list.push(basicTypes[c])}else{switch(c){case"P":list.push(parse(true,1,true)[0]+"*");break;case"R":list.push(parse(true,1,true)[0]+"&");break;case"L":{i++;var end=func.indexOf("E",i);var size=end-i;list.push(func.substr(i,size));i+=size+2;break};case"A":{var size=parseInt(func.substr(i));i+=size.toString().length;if(func[i]!=="_")throw"?";i++;list.push(parse(true,1,true)[0]+" ["+size+"]");break};case"E":break paramLoop;default:ret+="?"+c;break paramLoop}}}if(!allowVoid&&list.length===1&&list[0]==="void")list=[];if(rawList){if(ret){list.push(ret+"?")}return list}else{return ret+flushList()}}var parsed=func;try{if(func=="Object._main"||func=="_main"){return"main()"}if(typeof func==="number")func=Pointer_stringify(func);if(func[0]!=="_")return func;if(func[1]!=="_")return func;if(func[2]!=="Z")return func;switch(func[3]){case"n":return"operator new()";case"d":return"operator delete()"}parsed=parse()}catch(e){parsed+="?"}if(parsed.indexOf("?")>=0&&!hasLibcxxabi){Runtime.warnOnce("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling")}return parsed}function demangleAll(text){return text.replace(/__Z[\w\d_]+/g,(function(x){var y=demangle(x);return x===y?x:x+" ["+y+"]"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return"(no stack trace available)"}}return err.stack.toString()}function stackTrace(){return demangleAll(jsStackTrace())}Module["stackTrace"]=stackTrace;var PAGE_SIZE=4096;function alignMemoryPage(x){if(x%4096>0){x+=4096-x%4096}return x}var HEAP;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;var STATIC_BASE=0,STATICTOP=0,staticSealed=false;var STACK_BASE=0,STACKTOP=0,STACK_MAX=0;var DYNAMIC_BASE=0,DYNAMICTOP=0;function enlargeMemory(){var OLD_TOTAL_MEMORY=TOTAL_MEMORY;var LIMIT=Math.pow(2,31);if(DYNAMICTOP>=LIMIT)return false;while(TOTAL_MEMORY<=DYNAMICTOP){if(TOTAL_MEMORY<LIMIT/2){TOTAL_MEMORY=alignMemoryPage(2*TOTAL_MEMORY)}else{var last=TOTAL_MEMORY;TOTAL_MEMORY=alignMemoryPage((3*TOTAL_MEMORY+LIMIT)/4);if(TOTAL_MEMORY<=last)return false}}TOTAL_MEMORY=Math.max(TOTAL_MEMORY,16*1024*1024);if(TOTAL_MEMORY>=LIMIT)return false;try{if(ArrayBuffer.transfer){buffer=ArrayBuffer.transfer(buffer,TOTAL_MEMORY)}else{var oldHEAP8=HEAP8;buffer=new ArrayBuffer(TOTAL_MEMORY)}}catch(e){return false}var success=_emscripten_replace_memory(buffer);if(!success)return false;Module["buffer"]=buffer;Module["HEAP8"]=HEAP8=new Int8Array(buffer);Module["HEAP16"]=HEAP16=new Int16Array(buffer);Module["HEAP32"]=HEAP32=new Int32Array(buffer);Module["HEAPU8"]=HEAPU8=new Uint8Array(buffer);Module["HEAPU16"]=HEAPU16=new Uint16Array(buffer);Module["HEAPU32"]=HEAPU32=new Uint32Array(buffer);Module["HEAPF32"]=HEAPF32=new Float32Array(buffer);Module["HEAPF64"]=HEAPF64=new Float64Array(buffer);if(!ArrayBuffer.transfer){HEAP8.set(oldHEAP8)}return true}var byteLength;try{byteLength=Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype,"byteLength").get);byteLength(new ArrayBuffer(4))}catch(e){byteLength=(function(buffer){return buffer.byteLength})}var TOTAL_STACK=Module["TOTAL_STACK"]||5242880;var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||16777216;var totalMemory=64*1024;while(totalMemory<TOTAL_MEMORY||totalMemory<2*TOTAL_STACK){if(totalMemory<16*1024*1024){totalMemory*=2}else{totalMemory+=16*1024*1024}}totalMemory=Math.max(totalMemory,16*1024*1024);if(totalMemory!==TOTAL_MEMORY){TOTAL_MEMORY=totalMemory}assert(typeof Int32Array!=="undefined"&&typeof Float64Array!=="undefined"&&!!(new Int32Array(1))["subarray"]&&!!(new Int32Array(1))["set"],"JS engine does not provide full typed array support");var buffer;buffer=new ArrayBuffer(TOTAL_MEMORY);HEAP8=new Int8Array(buffer);HEAP16=new Int16Array(buffer);HEAP32=new Int32Array(buffer);HEAPU8=new Uint8Array(buffer);HEAPU16=new Uint16Array(buffer);HEAPU32=new Uint32Array(buffer);HEAPF32=new Float32Array(buffer);HEAPF64=new Float64Array(buffer);HEAP32[0]=255;assert(HEAPU8[0]===255&&HEAPU8[3]===0,"Typed arrays 2 must be run on a little-endian system");Module["HEAP"]=HEAP;Module["buffer"]=buffer;Module["HEAP8"]=HEAP8;Module["HEAP16"]=HEAP16;Module["HEAP32"]=HEAP32;Module["HEAPU8"]=HEAPU8;Module["HEAPU16"]=HEAPU16;Module["HEAPU32"]=HEAPU32;Module["HEAPF32"]=HEAPF32;Module["HEAPF64"]=HEAPF64;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Runtime.dynCall("v",func)}else{Runtime.dynCall("vi",func,[callback.arg])}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}Module["addOnPreRun"]=addOnPreRun;function addOnInit(cb){__ATINIT__.unshift(cb)}Module["addOnInit"]=addOnInit;function addOnPreMain(cb){__ATMAIN__.unshift(cb)}Module["addOnPreMain"]=addOnPreMain;function addOnExit(cb){__ATEXIT__.unshift(cb)}Module["addOnExit"]=addOnExit;function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}Module["addOnPostRun"]=addOnPostRun;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}Module["intArrayFromString"]=intArrayFromString;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){chr&=255}ret.push(String.fromCharCode(chr))}return ret.join("")}Module["intArrayToString"]=intArrayToString;function writeStringToMemory(string,buffer,dontAddNull){var array=intArrayFromString(string,dontAddNull);var i=0;while(i<array.length){var chr=array[i];HEAP8[buffer+i>>0]=chr;i=i+1}}Module["writeStringToMemory"]=writeStringToMemory;function writeArrayToMemory(array,buffer){for(var i=0;i<array.length;i++){HEAP8[buffer++>>0]=array[i]}}Module["writeArrayToMemory"]=writeArrayToMemory;function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}Module["writeAsciiToMemory"]=writeAsciiToMemory;function unSign(value,bits,ignore){if(value>=0){return value}return bits<=32?2*Math.abs(1<<bits-1)+value:Math.pow(2,bits)+value}function reSign(value,bits,ignore){if(value<=0){return value}var half=bits<=32?Math.abs(1<<bits-1):Math.pow(2,bits-1);if(value>=half&&(bits<=32||value>half)){value=-2*half+value}return value}if(!Math["imul"]||Math["imul"](4294967295,5)!==-5)Math["imul"]=function imul(a,b){var ah=a>>>16;var al=a&65535;var bh=b>>>16;var bl=b&65535;return al*bl+(ah*bl+al*bh<<16)|0};Math.imul=Math["imul"];if(!Math["clz32"])Math["clz32"]=(function(x){x=x>>>0;for(var i=0;i<32;i++){if(x&1<<31-i)return i}return 32});Math.clz32=Math["clz32"];var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_tan=Math.tan;var Math_acos=Math.acos;var Math_asin=Math.asin;var Math_atan=Math.atan;var Math_atan2=Math.atan2;var Math_exp=Math.exp;var Math_log=Math.log;var Math_sqrt=Math.sqrt;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_pow=Math.pow;var Math_imul=Math.imul;var Math_fround=Math.fround;var Math_min=Math.min;var Math_clz32=Math.clz32;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}Module["addRunDependency"]=addRunDependency;function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["removeRunDependency"]=removeRunDependency;Module["preloadedImages"]={};Module["preloadedAudios"]={};var memoryInitializer=null;var ASM_CONSTS=[];STATIC_BASE=8;STATICTOP=STATIC_BASE+25680;__ATINIT__.push();allocate([131,192,202,161,69,182,251,63,127,251,58,112,206,136,234,63,127,251,58,112,206,136,234,63,131,192,202,161,69,182,251,63,225,122,20,174,71,225,252,63,94,186,73,12,2,43,249,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,6,64,0,0,0,0,0,128,21,64,92,143,194,245,40,92,37,64,215,163,112,61,10,87,53,64,246,40,92,143,194,85,69,64,133,235,81,184,30,85,85,64,102,102,102,102,102,86,101,64,205,204,204,204,204,84,117,64,207,247,83,227,165,155,240,63,70,182,243,253,212,120,249,63,39,49,8,172,28,90,7,64,29,90,100,59,223,207,22,64,41,92,143,194,245,168,38,64,164,112,61,10,215,163,54,64,0,0,0,0,0,160,70,64,31,133,235,81,184,158,86,64,205,204,204,204,204,156,102,64,0,0,0,0,0,0,0,0,207,247,83,227,165,155,240,63,70,182,243,253,212,120,249,63,39,49,8,172,28,90,7,64,29,90,100,59,223,207,22,64,41,92,143,194,245,168,38,64,164,112,61,10,215,163,54,64,0,0,0,0,0,160,70,64,31,133,235,81,184,158,86,64,205,204,204,204,204,156,102,64,0,0,0,0,0,0,0,0,173,250,92,109,197,254,230,63,86,125,174,182,98,127,237,63,199,75,55,137,65,96,249,63,242,210,77,98,16,88,8,64,250,126,106,188,116,19,24,64,133,235,81,184,30,5,40,64,0,0,0,0,0,0,56,64,92,143,194,245,40,252,71,64,236,81,184,30,133,251,87,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,113,61,10,215,163,112,255,63,104,145,237,124,63,181,16,64,117,147,24,4,86,206,32,64,102,102,102,102,102,230,48,64,236,81,184,30,133,235,64,64,92,143,194,245,40,236,80,64,154,153,153,153,153,233,96,64,154,153,153,153,153,233,112,64,51,51,51,51,51,231,128,64,147,24,4,86,14,45,0,64,182,243,253,212,120,233,15,64,246,40,92,143,194,181,32,64,10,215,163,112,61,10,49,64,195,245,40,92,143,34,65,64,184,30,133,235,81,40,81,64,154,153,153,153,153,41,97,64,154,153,153,153,153,41,113,64,0,0,0,0,0,40,129,64,0,0,0,0,0,0,0,0,147,24,4,86,14,45,0,64,182,243,253,212,120,233,15,64,246,40,92,143,194,181,32,64,10,215,163,112,61,10,49,64,195,245,40,92,143,34,65,64,184,30,133,235,81,40,81,64,154,153,153,153,153,41,97,64,154,153,153,153,153,41,113,64,0,0,0,0,0,40,129,64,0,0,0,0,0,0,0,0,164,112,61,10,215,163,0,64,236,81,184,30,133,235,14,64,119,190,159,26,47,157,32,64,174,71,225,122,20,46,49,64,123,20,174,71,225,90,65,64,246,40,92,143,194,101,81,64,154,153,153,153,153,105,97,64,154,153,153,153,153,105,113,64,154,153,153,153,153,105,129,64,0,0,0,0,0,0,0,0,4,0,0,0,67,80,82,76,0,0,0,0,0,0,0,0,76,82,67,80,0,0,0,0,3,0,0,0,80,67,82,76,0,0,0,0,1,0,0,0,82,76,67,80,0,0,0,0,2,0,0,0,82,80,67,76,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,144,255,0,0,12,0,0,0,1,0,0,0,82,255,0,0,20,0,0,0,2,0,0,0,83,255,0,0,20,0,0,0,3,0,0,0,94,255,0,0,20,0,0,0,4,0,0,0,92,255,0,0,20,0,0,0,5,0,0,0,93,255,0,0,20,0,0,0,6,0,0,0,95,255,0,0,20,0,0,0,7,0,0,0,81,255,0,0,2,0,0,0,8,0,0,0,85,255,0,0,4,0,0,0,9,0,0,0,87,255,0,0,4,0,0,0,10,0,0,0,88,255,0,0,16,0,0,0,11,0,0,0,96,255,0,0,4,0,0,0,12,0,0,0,97,255,0,0,16,0,0,0,13,0,0,0,145,255,0,0,0,0,0,0,0,0,0,0,99,255,0,0,4,0,0,0,14,0,0,0,100,255,0,0,20,0,0,0,15,0,0,0,116,255,0,0,20,0,0,0,16,0,0,0,120,255,0,0,4,0,0,0,17,0,0,0,117,255,0,0,20,0,0,0,18,0,0,0,119,255,0,0,20,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,32,32,80,106,20,0,0,0,112,121,116,102,21,0,0,0,104,50,112,106,22,0,0,0,114,100,104,105,23,0,0,0,114,108,111,99,24,0,0,0,99,99,112,98,25,0,0,0,114,108,99,112,26,0,0,0,112,97,109,99,27,0,0,0,102,101,100,99,28,0,0,0,1,86,0,0,0,0,0,0,164,4,0,0,180,4,0,0,1,86,0,0,1,0,0,0,180,4,0,0,164,4,0,0,1,52,0,0,0,0,0,0,196,4,0,0,68,5,0,0,1,52,0,0,1,0,0,0,212,4,0,0,84,5,0,0,1,24,0,0,0,0,0,0,228,4,0,0,164,5,0,0,1,24,0,0,1,0,0,0,244,4,0,0,180,5,0,0,193,10,0,0,0,0,0,0,4,5,0,0,4,6,0,0,193,10,0,0,1,0,0,0,20,5,0,0,20,6,0,0,33,5,0,0,0,0,0,0,36,5,0,0,36,8,0,0,33,5,0,0,1,0,0,0,52,5,0,0,52,8,0,0,33,2,0,0,0,0,0,0,68,9,0,0,164,8,0,0,33,2,0,0,1,0,0,0,84,9,0,0,180,8,0,0,1,86,0,0,0,0,0,0,100,5,0,0,84,5,0,0,1,86,0,0,1,0,0,0,116,5,0,0,68,5,0,0,1,84,0,0,0,0,0,0,132,5,0,0,68,6,0,0,1,84,0,0,1,0,0,0,148,5,0,0,84,6,0,0,1,72,0,0,0,0,0,0,164,5,0,0,68,6,0,0,1,72,0,0,1,0,0,0,180,5,0,0,84,6,0,0,1,56,0,0,0,0,0,0,196,5,0,0,68,6,0,0,1,56,0,0,1,0,0,0,212,5,0,0,84,6,0,0,1,48,0,0,0,0,0,0,228,5,0,0,164,6,0,0,1,48,0,0,1,0,0,0,244,5,0,0,180,6,0,0,1,36,0,0,0,0,0,0,4,6,0,0,196,6,0,0,1,36,0,0,1,0,0,0,20,6,0,0,212,6,0,0,1,28,0,0,0,0,0,0,36,6,0,0,4,7,0,0,1,28,0,0,1,0,0,0,52,6,0,0,20,7,0,0,1,22,0,0,0,0,0,0,36,8,0,0,36,7,0,0,1,22,0,0,1,0,0,0,52,8,0,0,52,7,0,0,1,86,0,0,0,0,0,0,100,6,0,0,84,6,0,0,1,86,0,0,1,0,0,0,116,6,0,0,68,6,0,0,1,84,0,0,0,0,0,0,132,6,0,0,68,6,0,0,1,84,0,0,1,0,0,0,148,6,0,0,84,6,0,0,1,81,0,0,0,0,0,0,164,6,0,0,100,6,0,0,1,81,0,0,1,0,0,0,180,6,0,0,116,6,0,0,1,72,0,0,0,0,0,0,196,6,0,0,132,6,0,0,1,72,0,0,1,0,0,0,212,6,0,0,148,6,0,0,1,56,0,0,0,0,0,0,228,6,0,0,164,6,0,0,1,56,0,0,1,0,0,0,244,6,0,0,180,6,0,0,1,52,0,0,0,0,0,0,4,7,0,0,196,6,0,0,1,52,0,0,1,0,0,0,20,7,0,0,212,6,0,0,1,48,0,0,0,0,0,0,36,7,0,0,228,6,0,0,1,48,0,0,1,0,0,0,52,7,0,0,244,6,0,0,1,40,0,0,0,0,0,0,68,7,0,0,228,6,0,0,1,40,0,0,1,0,0,0,84,7,0,0,244,6,0,0,1,36,0,0,0,0,0,0,100,7,0,0,4,7,0,0,1,36,0,0,1,0,0,0,116,7,0,0,20,7,0,0,1,34,0,0,0,0,0,0,132,7,0,0,36,7,0,0,1,34,0,0,1,0,0,0,148,7,0,0,52,7,0,0,1,28,0,0,0,0,0,0,164,7,0,0,68,7,0,0,1,28,0,0,1,0,0,0,180,7,0,0,84,7,0,0,1,24,0,0,0,0,0,0,196,7,0,0,100,7,0,0,1,24,0,0,1,0,0,0,212,7,0,0,116,7,0,0,1,22,0,0,0,0,0,0,228,7,0,0,132,7,0,0,1,22,0,0,1,0,0,0,244,7,0,0,148,7,0,0,1,20,0,0,0,0,0,0,4,8,0,0,164,7,0,0,1,20,0,0,1,0,0,0,20,8,0,0,180,7,0,0,1,18,0,0,0,0,0,0,36,8,0,0,196,7,0,0,1,18,0,0,1,0,0,0,52,8,0,0,212,7,0,0,1,17,0,0,0,0,0,0,68,8,0,0,228,7,0,0,1,17,0,0,1,0,0,0,84,8,0,0,244,7,0,0,193,10,0,0,0,0,0,0,100,8,0,0,4,8,0,0,193,10,0,0,1,0,0,0,116,8,0,0,20,8,0,0,193,9,0,0,0,0,0,0,132,8,0,0,36,8,0,0,193,9,0,0,1,0,0,0,148,8,0,0,52,8,0,0,161,8,0,0,0,0,0,0,164,8,0,0,68,8,0,0,161,8,0,0,1,0,0,0,180,8,0,0,84,8,0,0,33,5,0,0,0,0,0,0,196,8,0,0,100,8,0,0,33,5,0,0,1,0,0,0,212,8,0,0,116,8,0,0,65,4,0,0,0,0,0,0,228,8,0,0,132,8,0,0,65,4,0,0,1,0,0,0,244,8,0,0,148,8,0,0,161,2,0,0,0,0,0,0,4,9,0,0,164,8,0,0,161,2,0,0,1,0,0,0,20,9,0,0,180,8,0,0,33,2,0,0,0,0,0,0,36,9,0,0,196,8,0,0,33,2,0,0,1,0,0,0,52,9,0,0,212,8,0,0,65,1,0,0,0,0,0,0,68,9,0,0,228,8,0,0,65,1,0,0,1,0,0,0,84,9,0,0,244,8,0,0,17,1,0,0,0,0,0,0,100,9,0,0,4,9,0,0,17,1,0,0,1,0,0,0,116,9,0,0,20,9,0,0,133,0,0,0,0,0,0,0,132,9,0,0,36,9,0,0,133,0,0,0,1,0,0,0,148,9,0,0,52,9,0,0,73,0,0,0,0,0,0,0,164,9,0,0,68,9,0,0,73,0,0,0,1,0,0,0,180,9,0,0,84,9,0,0,37,0,0,0,0,0,0,0,196,9,0,0,100,9,0,0,37,0,0,0,1,0,0,0,212,9,0,0,116,9,0,0,21,0,0,0,0,0,0,0,228,9,0,0,132,9,0,0,21,0,0,0,1,0,0,0,244,9,0,0,148,9,0,0,9,0,0,0,0,0,0,0,4,10,0,0,164,9,0,0,9,0,0,0,1,0,0,0,20,10,0,0,180,9,0,0,5,0,0,0,0,0,0,0,36,10,0,0,196,9,0,0,5,0,0,0,1,0,0,0,52,10,0,0,212,9,0,0,1,0,0,0,0,0,0,0,36,10,0,0,228,9,0,0,1,0,0,0,1,0,0,0,52,10,0,0,244,9,0,0,1,86,0,0,0,0,0,0,68,10,0,0,68,10,0,0,1,86,0,0,1,0,0,0,84,10,0,0,84,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,11,0,0,12,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,57,94,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,64,4,32,0,32,2,128,0,128,8,16,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,0,3,128,4,0,6,128,7,0,9,128,10,0,12,128,13,0,15,128,16,0,18,128,19,0,21,128,22,0,24,128,25,0,27,128,28,0,30,128,31,0,33,128,34,0,36,128,37,0,39,128,40,0,42,128,43,0,45,128,46,0,48,128,49,0,51,128,52,0,54,128,55,0,57,128,58,0,60,128,61,0,63,128,64,0,66,128,67,0,69,128,70,0,72,128,73,0,75,128,76,0,78,128,79,0,81,128,82,0,84,128,85,0,87,128,88,0,90,128,91,0,93,128,94,0,96,128,97,0,99,128,100,0,102,128,103,0,105,128,106,0,108,128,109,0,111,128,112,0,114,128,115,0,117,128,118,0,0,0,0,0,0,0,0,0,0,0,0,128,0,128,0,128,0,128,0,0,1,0,1,0,1,128,1,128,1,0,2,0,2,128,2,128,2,0,3,0,3,128,3,0,4,0,4,128,4,0,5,128,5,128,5,0,6,128,6,0,7,128,7,0,8,128,8,0,9,128,9,0,10,128,10,128,11,0,12,128,12,0,13,0,14,128,14,0,15,0,16,128,16,128,17,0,18,0,19,128,19,128,20,0,21,0,22,0,23,128,23,128,24,128,25,128,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,128,38,128,39,128,40,128,41,0,43,0,44,0,45,128,46,128,47,0,49,0,50,128,51,128,52,0,54,0,55,128,56,0,58,0,59,128,60,0,62,128,63,128,64,0,66,128,67,0,69,128,70,0,72,128,73,0,75,128,76,0,78,128,79,128,81,0,83,128,84,0,86,0,88,128,89,0,91,0,93,128,94,128,96,0,98,0,100,128,101,128,103,0,105,0,107,0,109,128,110,128,112,128,114,128,116,0,118,0,120,0,122,0,124,0,126,0,24,128,23,0,23,128,22,0,22,128,21,0,21,128,20,0,20,128,19,0,19,128,18,0,18,128,17,0,17,128,16,0,16,128,15,0,15,128,14,0,14,128,13,0,13,128,12,0,12,128,11,0,11,128,10,0,10,128,9,0,9,128,8,0,8,128,7,0,7,128,6,0,6,128,5,0,5,128,4,0,4,128,3,0,3,128,2,0,2,128,1,0,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,1,128,1,0,2,128,2,0,3,128,3,0,4,128,4,0,5,128,5,0,6,128,6,0,7,128,7,0,8,128,8,0,9,128,9,0,10,128,10,0,11,128,11,0,12,128,12,0,13,128,13,0,14,128,14,0,15,128,15,0,16,128,16,0,17,128,17,0,18,128,18,0,19,128,19,0,20,128,20,0,21,128,21,0,22,128,22,0,23,128,23,0,32,0,31,0,30,0,29,0,28,0,27,128,26,128,25,128,24,128,23,0,23,0,22,0,21,128,20,128,19,0,19,0,18,128,17,128,16,0,16,0,15,128,14,0,14,0,13,128,12,0,12,128,11,128,10,0,10,128,9,0,9,128,8,0,8,128,7,0,7,128,6,0,6,128,5,128,5,0,5,128,4,0,4,0,4,128,3,0,3,0,3,128,2,128,2,0,2,0,2,128,1,128,1,0,1,0,1,0,1,128,0,128,0,128,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,128,0,128,0,128,0,0,1,0,1,0,1,128,1,128,1,0,2,0,2,128,2,128,2,0,3,0,3,128,3,0,4,0,4,128,4,0,5,128,5,128,5,0,6,128,6,0,7,128,7,0,8,128,8,0,9,128,9,0,10,128,10,128,11,0,12,128,12,0,13,0,14,128,14,0,15,0,16,128,16,128,17,0,18,0,19,128,19,128,20,0,21,0,22,0,23,128,23,128,24,128,25,128,26,0,27,0,28,0,29,0,30,0,31,91,69,82,82,79,82,93,32,111,112,106,95,100,101,99,111,109,112,114,101,115,115,58,32,102,97,105,108,101,100,32,116,111,32,115,101,116,117,112,32,116,104,101,32,100,101,99,111,100,101,114,0,91,69,82,82,79,82,93,32,111,112,106,95,100,101,99,111,109,112,114,101,115,115,58,32,102,97,105,108,101,100,32,116,111,32,114,101,97,100,32,116,104,101,32,104,101,97,100,101,114,0,91,69,82,82,79,82,93,32,111,112,106,95,100,101,99,111,109,112,114,101,115,115,58,32,102,97,105,108,101,100,32,116,111,32,100,101,99,111,100,101,32,116,105,108,101,33,0,98,112,112,32,61,37,100,10,0,115,103,110,100,32,61,37,100,10,0,91,69,82,82,79,82,93,32,37,115,0,83,116,114,101,97,109,32,114,101,97,99,104,101,100,32,105,116,115,32,101,110,100,32,33,10,0,69,114,114,111,114,32,111,110,32,119,114,105,116,105,110,103,32,115,116,114,101,97,109,33,10,0,83,116,114,101,97,109,32,101,114,114,111,114,33,10,0,50,46,49,46,48,0,67,111,100,101,99,32,112,114,111,118,105,100,101,100,32,116,111,32,116,104,101,32,111,112,106,95,115,101,116,117,112,95,100,101,99,111,100,101,114,32,102,117,110,99,116,105,111,110,32,105,115,32,110,111,116,32,97,32,100,101,99,111,109,112,114,101,115,115,111,114,32,104,97,110,100,108,101,114,46,10,0,67,111,100,101,99,32,112,114,111,118,105,100,101,100,32,116,111,32,116,104,101,32,111,112,106,95,114,101,97,100,95,104,101,97,100,101,114,32,102,117,110,99,116,105,111,110,32,105,115,32,110,111,116,32,97,32,100,101,99,111,109,112,114,101,115,115,111,114,32,104,97,110,100,108,101,114,46,10,0,119,98,0,114,98,0,73,110,118,97,108,105,100,32,110,117,109,98,101,114,32,111,102,32,114,101,115,111,108,117,116,105,111,110,115,32,58,32,37,100,32,110,111,116,32,105,110,32,114,97,110,103,101,32,91,49,44,37,100,93,10,0,68,101,112,114,101,99,97,116,101,100,32,102,105,101,108,100,115,32,99,112,95,99,105,110,101,109,97,32,111,114,32,99,112,95,114,115,105,122,32,97,114,101,32,117,115,101,100,10,80,108,101,97,115,101,32,99,111,110,115,105,100,101,114,32,117,115,105,110,103,32,111,110,108,121,32,116,104,101,32,114,115,105,122,32,102,105,101,108,100,10,83,101,101,32,111,112,101,110,106,112,101,103,46,104,32,100,111,99,117,109,101,110,116,97,116,105,111,110,32,102,111,114,32,109,111,114,101,32,100,101,116,97,105,108,115,10,0,84,104,101,32,100,101,115,105,114,101,100,32,109,97,120,105,109,117,109,32,99,111,100,101,115,116,114,101,97,109,32,115,105,122,101,32,104,97,115,32,108,105,109,105,116,101,100,10,97,116,32,108,101,97,115,116,32,111,110,101,32,111,102,32,116,104,101,32,100,101,115,105,114,101,100,32,113,117,97,108,105,116,121,32,108,97,121,101,114,115,10,0,74,80,69,71,32,50,48,48,48,32,83,99,97,108,97,98,108,101,32,68,105,103,105,116,97,108,32,67,105,110,101,109,97,32,112,114,111,102,105,108,101,115,32,110,111,116,32,121,101,116,32,115,117,112,112,111,114,116,101,100,10,0,74,80,69,71,32,50,48,48,48,32,80,114,111,102,105,108,101,45,51,32,97,110,100,32,52,32,40,50,107,47,52,107,32,100,99,32,112,114,111,102,105,108,101,41,32,114,101,113,117,105,114,101,115,58,10,49,32,115,105,110,103,108,101,32,113,117,97,108,105,116,121,32,108,97,121,101,114,45,62,32,78,117,109,98,101,114,32,111,102,32,108,97,121,101,114,115,32,102,111,114,99,101,100,32,116,111,32,49,32,40,114,97,116,104,101,114,32,116,104,97,110,32,37,100,41,10,45,62,32,82,97,116,101,32,111,102,32,116,104,101,32,108,97,115,116,32,108,97,121,101,114,32,40,37,51,46,49,102,41,32,119,105,108,108,32,98,101,32,117,115,101,100,0,74,80,69,71,32,50,48,48,48,32,80,114,111,102,105,108,101,45,51,32,40,50,107,32,100,99,32,112,114,111,102,105,108,101,41,32,114,101,113,117,105,114,101,115,58,10,78,117,109,98,101,114,32,111,102,32,100,101,99,111,109,112,111,115,105,116,105,111,110,32,108,101,118,101,108,115,32,60,61,32,53,10,45,62,32,78,117,109,98,101,114,32,111,102,32,100,101,99,111,109,112,111,115,105,116,105,111,110,32,108,101,118,101,108,115,32,102,111,114,99,101,100,32,116,111,32,53,32,40,114,97,116,104,101,114,32,116,104,97,110,32,37,100,41,10,0,74,80,69,71,32,50,48,48,48,32,80,114,111,102,105,108,101,45,52,32,40,52,107,32,100,99,32,112,114,111,102,105,108,101,41,32,114,101,113,117,105,114,101,115,58,10,78,117,109,98,101,114,32,111,102,32,100,101,99,111,109,112,111,115,105,116,105,111,110,32,108,101,118,101,108,115,32,62,61,32,49,32,38,38,32,60,61,32,54,10,45,62,32,78,117,109,98,101,114,32,111,102,32,100,101,99,111,109,112,111,115,105,116,105,111,110,32,108,101,118,101,108,115,32,102,111,114,99,101,100,32,116,111,32,49,32,40,114,97,116,104,101,114,32,116,104,97,110,32,37,100,41,10,0,74,80,69,71,32,50,48,48,48,32,80,114,111,102,105,108,101,45,52,32,40,52,107,32,100,99,32,112,114,111,102,105,108,101,41,32,114,101,113,117,105,114,101,115,58,10,78,117,109,98,101,114,32,111,102,32,100,101,99,111,109,112,111,115,105,116,105,111,110,32,108,101,118,101,108,115,32,62,61,32,49,32,38,38,32,60,61,32,54,10,45,62,32,78,117,109,98,101,114,32,111,102,32,100,101,99,111,109,112,111,115,105,116,105,111,110,32,108,101,118,101,108,115,32,102,111,114,99,101,100,32,116,111,32,54,32,40,114,97,116,104,101,114,32,116,104,97,110,32,37,100,41,10,0,74,80,69,71,32,50,48,48,48,32,80,114,111,102,105,108,101,45,51,32,97,110,100,32,52,32,40,50,107,47,52,107,32,100,99,32,112,114,111,102,105,108,101,41,32,114,101,113,117,105,114,101,115,58,10,77,97,120,105,109,117,109,32,49,51,48,50,48,56,51,32,99,111,109,112,114,101,115,115,101,100,32,98,121,116,101,115,32,64,32,50,52,102,112,115,10,65,115,32,110,111,32,114,97,116,101,32,104,97,115,32,98,101,101,110,32,103,105,118,101,110,44,32,116,104,105,115,32,108,105,109,105,116,32,119,105,108,108,32,98,101,32,117,115,101,100,46,10,0,74,80,69,71,32,50,48,48,48,32,80,114,111,102,105,108,101,45,51,32,97,110,100,32,52,32,40,50,107,47,52,107,32,100,99,32,112,114,111,102,105,108,101,41,32,114,101,113,117,105,114,101,115,58,10,77,97,120,105,109,117,109,32,49,51,48,50,48,56,51,32,99,111,109,112,114,101,115,115,101,100,32,98,121,116,101,115,32,64,32,50,52,102,112,115,10,45,62,32,83,112,101,99,105,102,105,101,100,32,114,97,116,101,32,101,120,99,101,101,100,115,32,116,104,105,115,32,108,105,109,105,116,46,32,82,97,116,101,32,119,105,108,108,32,98,101,32,102,111,114,99,101,100,32,116,111,32,49,51,48,50,48,56,51,32,98,121,116,101,115,46,10,0,74,80,69,71,32,50,48,48,48,32,80,114,111,102,105,108,101,45,51,32,97,110,100,32,52,32,40,50,107,47,52,107,32,100,99,32,112,114,111,102,105,108,101,41,32,114,101,113,117,105,114,101,115,58,10,77,97,120,105,109,117,109,32,49,48,52,49,54,54,54,32,99,111,109,112,114,101,115,115,101,100,32,98,121,116,101,115,32,64,32,50,52,102,112,115,10,65,115,32,110,111,32,114,97,116,101,32,104,97,115,32,98,101,101,110,32,103,105,118,101,110,44,32,116,104,105,115,32,108,105,109,105,116,32,119,105,108,108,32,98,101,32,117,115,101,100,46,10,0,74,80,69,71,32,50,48,48,48,32,80,114,111,102,105,108,101,45,51,32,97,110,100,32,52,32,40,50,107,47,52,107,32,100,99,32,112,114,111,102,105,108,101,41,32,114,101,113,117,105,114,101,115,58,10,77,97,120,105,109,117,109,32,49,48,52,49,54,54,54,32,99,111,109,112,114,101,115,115,101,100,32,98,121,116,101,115,32,64,32,50,52,102,112,115,10,45,62,32,83,112,101,99,105,102,105,101,100,32,114,97,116,101,32,101,120,99,101,101,100,115,32,116,104,105,115,32,108,105,109,105,116,46,32,82,97,116,101,32,119,105,108,108,32,98,101,32,102,111,114,99,101,100,32,116,111,32,49,48,52,49,54,54,54,32,98,121,116,101,115,46,10,0,74,80,69,71,32,50,48,48,48,32,80,114,111,102,105,108,101,45,51,32,40,50,107,32,100,99,32,112,114,111,102,105,108,101,41,32,114,101,113,117,105,114,101,115,58,10,51,32,99,111,109,112,111,110,101,110,116,115,45,62,32,78,117,109,98,101,114,32,111,102,32,99,111,109,112,111,110,101,110,116,115,32,111,102,32,105,110,112,117,116,32,105,109,97,103,101,32,40,37,100,41,32,105,115,32,110,111,116,32,99,111,109,112,108,105,97,110,116,10,45,62,32,78,111,110,45,112,114,111,102,105,108,101,45,51,32,99,111,100,101,115,116,114,101,97,109,32,119,105,108,108,32,98,101,32,103,101,110,101,114,97,116,101,100,10,0,115,105,103,110,101,100,0,117,110,115,105,103,110,101,100,0,74,80,69,71,32,50,48,48,48,32,80,114,111,102,105,108,101,45,51,32,40,50,107,32,100,99,32,112,114,111,102,105,108,101,41,32,114,101,113,117,105,114,101,115,58,10,80,114,101,99,105,115,105,111,110,32,111,102,32,101,97,99,104,32,99,111,109,112,111,110,101,110,116,32,115,104,97,108,108,32,98,101,32,49,50,32,98,105,116,115,32,117,110,115,105,103,110,101,100,45,62,32,65,116,32,108,101,97,115,116,32,99,111,109,112,111,110,101,110,116,32,37,100,32,111,102,32,105,110,112,117,116,32,105,109,97,103,101,32,40,37,100,32,98,105,116,115,44,32,37,115,41,32,105,115,32,110,111,116,32,99,111,109,112,108,105,97,110,116,10,45,62,32,78,111,110,45,112,114,111,102,105,108,101,45,51,32,99,111,100,101,115,116,114,101,97,109,32,119,105,108,108,32,98,101,32,103,101,110,101,114,97,116,101,100,10,0,74,80,69,71,32,50,48,48,48,32,80,114,111,102,105,108,101,45,51,32,40,50,107,32,100,99,32,112,114,111,102,105,108,101,41,32,114,101,113,117,105,114,101,115,58,10,119,105,100,116,104,32,60,61,32,50,48,52,56,32,97,110,100,32,104,101,105,103,104,116,32,60,61,32,49,48,56,48,10,45,62,32,73,110,112,117,116,32,105,109,97,103,101,32,115,105,122,101,32,37,100,32,120,32,37,100,32,105,115,32,110,111,116,32,99,111,109,112,108,105,97,110,116,10,45,62,32,78,111,110,45,112,114,111,102,105,108,101,45,51,32,99,111,100,101,115,116,114,101,97,109,32,119,105,108,108,32,98,101,32,103,101,110,101,114,97,116,101,100,10,0,74,80,69,71,32,50,48,48,48,32,80,114,111,102,105,108,101,45,52,32,40,52,107,32,100,99,32,112,114,111,102,105,108,101,41,32,114,101,113,117,105,114,101,115,58,10,119,105,100,116,104,32,60,61,32,52,48,57,54,32,97,110,100,32,104,101,105,103,104,116,32,60,61,32,50,49,54,48,10,45,62,32,73,109,97,103,101,32,115,105,122,101,32,37,100,32,120,32,37,100,32,105,115,32,110,111,116,32,99,111,109,112,108,105,97,110,116,10,45,62,32,78,111,110,45,112,114,111,102,105,108,101,45,52,32,99,111,100,101,115,116,114,101,97,109,32,119,105,108,108,32,98,101,32,103,101,110,101,114,97,116,101,100,10,0,74,80,69,71,32,50,48,48,48,32,76,111,110,103,32,84,101,114,109,32,83,116,111,114,97,103,101,32,112,114,111,102,105,108,101,32,110,111,116,32,121,101,116,32,115,117,112,112,111,114,116,101,100,10,0,74,80,69,71,32,50,48,48,48,32,66,114,111,97,100,99,97,115,116,32,112,114,111,102,105,108,101,115,32,110,111,116,32,121,101,116,32,115,117,112,112,111,114,116,101,100,10,0,74,80,69,71,32,50,48,48,48,32,73,77,70,32,112,114,111,102,105,108,101,115,32,110,111,116,32,121,101,116,32,115,117,112,112,111,114,116,101,100,10,0,74,80,69,71,32,50,48,48,48,32,80,97,114,116,45,50,32,112,114,111,102,105,108,101,32,100,101,102,105,110,101,100,10,98,117,116,32,110,111,32,80,97,114,116,45,50,32,101,120,116,101,110,115,105,111,110,32,101,110,97,98,108,101,100,46,10,80,114,111,102,105,108,101,32,115,101,116,32,116,111,32,78,79,78,69,46,10,0,85,110,115,117,112,112,111,114,116,101,100,32,80,97,114,116,45,50,32,101,120,116,101,110,115,105,111,110,32,101,110,97,98,108,101,100,10,80,114,111,102,105,108,101,32,115,101,116,32,116,111,32,78,79,78,69,46,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,97,108,108,111,99,97,116,101,32,99,111,112,121,32,111,102,32,117,115,101,114,32,101,110,99,111,100,105,110,103,32,112,97,114,97,109,101,116,101,114,115,32,109,97,116,114,105,120,32,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,97,108,108,111,99,97,116,101,32,99,111,112,121,32,111,102,32,99,111,109,109,101,110,116,32,115,116,114,105,110,103,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,97,108,108,111,99,97,116,101,32,99,111,109,109,101,110,116,32,115,116,114,105,110,103,10,0,37,115,37,115,0,67,114,101,97,116,101,100,32,98,121,32,79,112,101,110,74,80,69,71,32,118,101,114,115,105,111,110,32,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,97,108,108,111,99,97,116,101,32,116,105,108,101,32,99,111,100,105,110,103,32,112,97,114,97,109,101,116,101,114,115,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,102,111,114,32,99,104,101,99,107,105,110,103,32,116,104,101,32,112,111,99,32,118,97,108,117,101,115,46,10,0,77,105,115,115,105,110,103,32,112,97,99,107,101,116,115,32,112,111,115,115,105,98,108,101,32,108,111,115,115,32,111,102,32,100,97,116,97,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,97,108,108,111,99,97,116,101,32,116,105,108,101,32,99,111,109,112,111,110,101,110,116,32,99,111,100,105,110,103,32,112,97,114,97,109,101,116,101,114,115,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,97,108,108,111,99,97,116,101,32,116,101,109,112,32,98,117,102,102,101,114,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,97,108,108,111,99,97,116,101,32,101,110,99,111,100,101,114,32,77,67,84,32,99,111,100,105,110,103,32,109,97,116,114,105,120,32,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,97,108,108,111,99,97,116,101,32,101,110,99,111,100,101,114,32,77,67,84,32,100,101,99,111,100,105,110,103,32,109,97,116,114,105,120,32,10,0,70,97,105,108,101,100,32,116,111,32,105,110,118,101,114,115,101,32,101,110,99,111,100,101,114,32,77,67,84,32,100,101,99,111,100,105,110,103,32,109,97,116,114,105,120,32,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,97,108,108,111,99,97,116,101,32,101,110,99,111,100,101,114,32,77,67,84,32,110,111,114,109,115,32,10,0,70,97,105,108,101,100,32,116,111,32,115,101,116,117,112,32,106,50,107,32,109,99,116,32,101,110,99,111,100,105,110,103,10,0,67,97,110,110,111,116,32,112,101,114,102,111,114,109,32,77,67,84,32,111,110,32,99,111,109,112,111,110,101,110,116,115,32,119,105,116,104,32,100,105,102,102,101,114,101,110,116,32,115,105,122,101,115,46,32,68,105,115,97,98,108,105,110,103,32,77,67,84,46,10,0,83,116,114,101,97,109,32,116,111,111,32,115,104,111,114,116,10,0,73,110,99,111,110,115,105,115,116,101,110,116,32,109,97,114,107,101,114,32,115,105,122,101,10,0,77,97,114,107,101,114,32,105,115,32,110,111,116,32,99,111,109,112,108,105,97,110,116,32,119,105,116,104,32,105,116,115,32,112,111,115,105,116,105,111,110,10,0,77,97,114,107,101,114,32,115,105,122,101,32,105,110,99,111,110,115,105,115,116,101,110,116,32,119,105,116,104,32,115,116,114,101,97,109,32,108,101,110,103,116,104,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,114,101,97,100,32,104,101,97,100,101,114,10,0,78,111,116,32,115,117,114,101,32,104,111,119,32,116,104,97,116,32,104,97,112,112,101,110,101,100,46,10,0,70,97,105,108,32,116,111,32,114,101,97,100,32,116,104,101,32,99,117,114,114,101,110,116,32,109,97,114,107,101,114,32,115,101,103,109,101,110,116,32,40,37,35,120,41,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,97,100,100,32,116,108,32,109,97,114,107,101,114,10,0,84,105,108,101,32,112,97,114,116,32,108,101,110,103,116,104,32,115,105,122,101,32,105,110,99,111,110,115,105,115,116,101,110,116,32,119,105,116,104,32,115,116,114,101,97,109,32,108,101,110,103,116,104,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,100,101,99,111,100,101,32,116,105,108,101,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,83,79,84,32,109,97,114,107,101,114,10,0,111,112,106,95,106,50,107,95,97,112,112,108,121,95,110,98,95,116,105,108,101,95,112,97,114,116,115,95,99,111,114,114,101,99,116,105,111,110,32,101,114,114,111,114,10,0,78,111,110,32,99,111,110,102,111,114,109,97,110,116,32,99,111,100,101,115,116,114,101,97,109,32,84,80,115,111,116,61,61,84,78,115,111,116,46,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,114,101,97,100,32,80,80,84,32,109,97,114,107,101,114,10,0,70,97,105,108,101,100,32,116,111,32,109,101,114,103,101,32,80,80,84,32,100,97,116,97,10,0,67,97,110,110,111,116,32,100,101,99,111,100,101,32,116,105,108,101,44,32,109,101,109,111,114,121,32,101,114,114,111,114,10,0,72,101,97,100,101,114,32,111,102,32,116,105,108,101,32,37,100,32,47,32,37,100,32,104,97,115,32,98,101,101,110,32,114,101,97,100,46,10,0,70,97,105,108,101,100,32,116,111,32,100,101,99,111,100,101,46,10,0,78,111,32,69,79,67,32,109,97,114,107,101,114,46,32,80,111,115,115,105,98,108,121,32,97,32,116,114,117,110,99,97,116,101,100,32,115,116,114,101,97,109,10,0,83,116,114,101,97,109,32,100,111,101,115,32,110,111,116,32,101,110,100,32,119,105,116,104,32,69,79,67,10,0,83,116,114,101,97,109,32,116,111,111,32,115,104,111,114,116,44,32,101,120,112,101,99,116,101,100,32,83,79,84,10,0,78,101,101,100,32,116,111,32,100,101,99,111,100,101,32,116,104,101,32,109,97,105,110,32,104,101,97,100,101,114,32,98,101,102,111,114,101,32,98,101,103,105,110,32,116,111,32,100,101,99,111,100,101,32,116,104,101,32,114,101,109,97,105,110,105,110,103,32,99,111,100,101,115,116,114,101,97,109,0,78,111,32,100,101,99,111,100,101,100,32,97,114,101,97,32,112,97,114,97,109,101,116,101,114,115,44,32,115,101,116,32,116,104,101,32,100,101,99,111,100,101,100,32,97,114,101,97,32,116,111,32,116,104,101,32,119,104,111,108,101,32,105,109,97,103,101,10,0,76,101,102,116,32,112,111,115,105,116,105,111,110,32,111,102,32,116,104,101,32,100,101,99,111,100,101,100,32,97,114,101,97,32,40,114,101,103,105,111,110,95,120,48,61,37,100,41,32,105,115,32,111,117,116,115,105,100,101,32,116,104,101,32,105,109,97,103,101,32,97,114,101,97,32,40,88,115,105,122,61,37,100,41,46,10,0,76,101,102,116,32,112,111,115,105,116,105,111,110,32,111,102,32,116,104,101,32,100,101,99,111,100,101,100,32,97,114,101,97,32,40,114,101,103,105,111,110,95,120,48,61,37,100,41,32,105,115,32,111,117,116,115,105,100,101,32,116,104,101,32,105,109,97,103,101,32,97,114,101,97,32,40,88,79,115,105,122,61,37,100,41,46,10,0,85,112,32,112,111,115,105,116,105,111,110,32,111,102,32,116,104,101,32,100,101,99,111,100,101,100,32,97,114,101,97,32,40,114,101,103,105,111,110,95,121,48,61,37,100,41,32,105,115,32,111,117,116,115,105,100,101,32,116,104,101,32,105,109,97,103,101,32,97,114,101,97,32,40,89,115,105,122,61,37,100,41,46,10,0,85,112,32,112,111,115,105,116,105,111,110,32,111,102,32,116,104,101,32,100,101,99,111,100,101,100,32,97,114,101,97,32,40,114,101,103,105,111,110,95,121,48,61,37,100,41,32,105,115,32,111,117,116,115,105,100,101,32,116,104,101,32,105,109,97,103,101,32,97,114,101,97,32,40,89,79,115,105,122,61,37,100,41,46,10,0,82,105,103,104,116,32,112,111,115,105,116,105,111,110,32,111,102,32,116,104,101,32,100,101,99,111,100,101,100,32,97,114,101,97,32,40,114,101,103,105,111,110,95,120,49,61,37,100,41,32,105,115,32,111,117,116,115,105,100,101,32,116,104,101,32,105,109,97,103,101,32,97,114,101,97,32,40,88,79,115,105,122,61,37,100,41,46,10,0,82,105,103,104,116,32,112,111,115,105,116,105,111,110,32,111,102,32,116,104,101,32,100,101,99,111,100,101,100,32,97,114,101,97,32,40,114,101,103,105,111,110,95,120,49,61,37,100,41,32,105,115,32,111,117,116,115,105,100,101,32,116,104,101,32,105,109,97,103,101,32,97,114,101,97,32,40,88,115,105,122,61,37,100,41,46,10,0,66,111,116,116,111,109,32,112,111,115,105,116,105,111,110,32,111,102,32,116,104,101,32,100,101,99,111,100,101,100,32,97,114,101,97,32,40,114,101,103,105,111,110,95,121,49,61,37,100,41,32,105,115,32,111,117,116,115,105,100,101,32,116,104,101,32,105,109,97,103,101,32,97,114,101,97,32,40,89,79,115,105,122,61,37,100,41,46,10,0,66,111,116,116,111,109,32,112,111,115,105,116,105,111,110,32,111,102,32,116,104,101,32,100,101,99,111,100,101,100,32,97,114,101,97,32,40,114,101,103,105,111,110,95,121,49,61,37,100,41,32,105,115,32,111,117,116,115,105,100,101,32,116,104,101,32,105,109,97,103,101,32,97,114,101,97,32,40,89,115,105,122,61,37,100,41,46,10,0,83,105,122,101,32,120,32,111,102,32,116,104,101,32,100,101,99,111,100,101,100,32,99,111,109,112,111,110,101,110,116,32,105,109,97,103,101,32,105,115,32,105,110,99,111,114,114,101,99,116,32,40,99,111,109,112,91,37,100,93,46,119,61,37,100,41,46,10,0,83,105,122,101,32,121,32,111,102,32,116,104,101,32,100,101,99,111,100,101,100,32,99,111,109,112,111,110,101,110,116,32,105,109,97,103,101,32,105,115,32,105,110,99,111,114,114,101,99,116,32,40,99,111,109,112,91,37,100,93,46,104,61,37,100,41,46,10,0,83,101,116,116,105,110,103,32,100,101,99,111,100,105,110,103,32,97,114,101,97,32,116,111,32,37,100,44,37,100,44,37,100,44,37,100,10,0,87,114,111,110,103,32,102,108,97,103,10,0,67,111,100,101,115,116,114,101,97,109,32,105,110,102,111,32,102,114,111,109,32,109,97,105,110,32,104,101,97,100,101,114,58,32,123,10,0,9,32,116,120,48,61,37,100,44,32,116,121,48,61,37,100,10,0,9,32,116,100,120,61,37,100,44,32,116,100,121,61,37,100,10,0,9,32,116,119,61,37,100,44,32,116,104,61,37,100,10,0,125,10,0,67,111,100,101,115,116,114,101,97,109,32,105,110,100,101,120,32,102,114,111,109,32,109,97,105,110,32,104,101,97,100,101,114,58,32,123,10,0,9,32,77,97,105,110,32,104,101,97,100,101,114,32,115,116,97,114,116,32,112,111,115,105],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE);allocate([116,105,111,110,61,37,108,108,105,10,9,32,77,97,105,110,32,104,101,97,100,101,114,32,101,110,100,32,112,111,115,105,116,105,111,110,61,37,108,108,105,10,0,9,32,77,97,114,107,101,114,32,108,105,115,116,58,32,123,10,0,9,9,32,116,121,112,101,61,37,35,120,44,32,112,111,115,61,37,108,108,105,44,32,108,101,110,61,37,100,10,0,9,32,125,10,0,9,32,84,105,108,101,32,105,110,100,101,120,58,32,123,10,0,9,9,32,110,98,32,111,102,32,116,105,108,101,45,112,97,114,116,32,105,110,32,116,105,108,101,32,91,37,100,93,61,37,100,10,0,9,9,9,32,116,105,108,101,45,112,97,114,116,91,37,100,93,58,32,115,116,97,114,95,112,111,115,61,37,108,108,105,44,32,101,110,100,95,104,101,97,100,101,114,61,37,108,108,105,44,32,101,110,100,95,112,111,115,61,37,108,108,105,46,10,0,91,68,69,86,93,32,68,117,109,112,32,97,110,32,105,109,97,103,101,95,104,101,97,100,101,114,32,115,116,114,117,99,116,32,123,10,0,73,109,97,103,101,32,105,110,102,111,32,123,10,0,37,115,32,120,48,61,37,100,44,32,121,48,61,37,100,10,0,37,115,32,120,49,61,37,100,44,32,121,49,61,37,100,10,0,37,115,32,110,117,109,99,111,109,112,115,61,37,100,10,0,37,115,9,32,99,111,109,112,111,110,101,110,116,32,37,100,32,123,10,0,37,115,125,10,0,91,68,69,86,93,32,68,117,109,112,32,97,110,32,105,109,97,103,101,95,99,111,109,112,95,104,101,97,100,101,114,32,115,116,114,117,99,116,32,123,10,0,37,115,32,100,120,61,37,100,44,32,100,121,61,37,100,10,0,37,115,32,112,114,101,99,61,37,100,10,0,37,115,32,115,103,110,100,61,37,100,10,0,87,101,32,110,101,101,100,32,97,110,32,105,109,97,103,101,32,112,114,101,118,105,111,117,115,108,121,32,99,114,101,97,116,101,100,46,10,0,84,105,108,101,32,105,110,100,101,120,32,112,114,111,118,105,100,101,100,32,98,121,32,116,104,101,32,117,115,101,114,32,105,115,32,105,110,99,111,114,114,101,99,116,32,37,100,32,40,109,97,120,32,61,32,37,100,41,32,10,0,82,101,115,111,108,117,116,105,111,110,32,102,97,99,116,111,114,32,105,115,32,103,114,101,97,116,101,114,32,116,104,97,110,32,116,104,101,32,109,97,120,105,109,117,109,32,114,101,115,111,108,117,116,105,111,110,32,105,110,32,116,104,101,32,99,111,109,112,111,110,101,110,116,46,10,0,84,104,101,32,103,105,118,101,110,32,116,105,108,101,32,105,110,100,101,120,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,46,0,116,105,108,101,32,110,117,109,98,101,114,32,37,100,32,47,32,37,100,10,0,69,114,114,111,114,32,97,108,108,111,99,97,116,105,110,103,32,116,105,108,101,32,99,111,109,112,111,110,101,110,116,32,100,97,116,97,46,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,101,110,99,111,100,101,32,97,108,108,32,116,105,108,101,115,10,0,83,105,122,101,32,109,105,115,109,97,116,99,104,32,98,101,116,119,101,101,110,32,116,105,108,101,32,100,97,116,97,32,97,110,100,32,115,101,110,116,32,100,97,116,97,46,0,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,105,109,97,103,101,32,104,101,97,100,101,114,46,0,69,114,114,111,114,32,119,104,105,108,101,32,111,112,106,95,106,50,107,95,112,114,101,95,119,114,105,116,101,95,116,105,108,101,32,119,105,116,104,32,116,105,108,101,32,105,110,100,101,120,32,61,32,37,100,10,0,69,114,114,111,114,32,119,104,105,108,101,32,111,112,106,95,106,50,107,95,112,111,115,116,95,119,114,105,116,101,95,116,105,108,101,32,119,105,116,104,32,116,105,108,101,32,105,110,100,101,120,32,61,32,37,100,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,99,114,101,97,116,101,32,84,105,108,101,32,67,111,100,101,114,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,119,114,105,116,101,32,67,66,68,32,109,97,114,107,101,114,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,119,114,105,116,101,32,77,67,84,32,109,97,114,107,101,114,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,119,114,105,116,101,32,77,67,67,32,109,97,114,107,101,114,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,119,114,105,116,101,32,77,67,79,32,109,97,114,107,101,114,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,119,114,105,116,101,32,116,104,101,32,67,79,77,32,109,97,114,107,101,114,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,119,114,105,116,101,32,80,79,67,32,109,97,114,107,101,114,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,119,114,105,116,101,32,84,76,77,32,109,97,114,107,101,114,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,119,114,105,116,101,32,81,67,67,32,109,97,114,107,101,114,10,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,83,81,99,100,32,83,81,99,99,32,101,108,101,109,101,110,116,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,119,114,105,116,101,32,67,79,67,32,109,97,114,107,101,114,10,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,83,80,67,111,100,32,83,80,67,111,99,32,101,108,101,109,101,110,116,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,119,114,105,116,101,32,81,67,68,32,109,97,114,107,101,114,10,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,81,67,68,32,109,97,114,107,101,114,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,119,114,105,116,101,32,67,79,68,32,109,97,114,107,101,114,10,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,67,79,68,32,109,97,114,107,101,114,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,102,111,114,32,116,104,101,32,83,73,90,32,109,97,114,107,101,114,10,0,78,117,109,98,101,114,32,111,102,32,114,101,115,111,108,117,116,105,111,110,115,32,105,115,32,116,111,111,32,104,105,103,104,32,105,110,32,99,111,109,112,97,114,105,115,111,110,32,116,111,32,116,104,101,32,115,105,122,101,32,111,102,32,116,105,108,101,115,10,0,67,97,110,110,111,116,32,101,110,99,111,100,101,32,116,105,108,101,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,100,101,99,111,100,101,32,111,110,101,32,116,105,108,101,10,0,80,114,111,98,108,101,109,32,119,105,116,104,32,115,101,101,107,32,102,117,110,99,116,105,111,110,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,100,101,99,111,100,101,32,116,105,108,101,32,37,100,47,37,100,10,0,84,105,108,101,32,37,100,47,37,100,32,104,97,115,32,98,101,101,110,32,100,101,99,111,100,101,100,46,10,0,73,109,97,103,101,32,100,97,116,97,32,104,97,115,32,98,101,101,110,32,117,112,100,97,116,101,100,32,119,105,116,104,32,116,105,108,101,32,37,100,46,10,10,0,84,105,108,101,32,114,101,97,100,44,32,100,101,99,111,100,101,100,32,97,110,100,32,117,112,100,97,116,101,100,32,105,115,32,110,111,116,32,116,104,101,32,100,101,115,105,114,101,100,32,111,110,101,32,40,37,100,32,118,115,32,37,100,41,46,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,100,101,99,111,100,101,32,116,105,108,101,115,10,0,70,97,105,108,101,100,32,116,111,32,100,101,99,111,100,101,32,116,105,108,101,32,37,100,47,37,100,10,0,9,32,100,101,102,97,117,108,116,32,116,105,108,101,32,123,10,0,9,9,32,99,115,116,121,61,37,35,120,10,0,9,9,32,112,114,103,61,37,35,120,10,0,9,9,32,110,117,109,108,97,121,101,114,115,61,37,100,10,0,9,9,32,109,99,116,61,37,120,10,0,9,9,32,99,111,109,112,32,37,100,32,123,10,0,9,9,9,32,99,115,116,121,61,37,35,120,10,0,9,9,9,32,110,117,109,114,101,115,111,108,117,116,105,111,110,115,61,37,100,10,0,9,9,9,32,99,98,108,107,119,61,50,94,37,100,10,0,9,9,9,32,99,98,108,107,104,61,50,94,37,100,10,0,9,9,9,32,99,98,108,107,115,116,121,61,37,35,120,10,0,9,9,9,32,113,109,102,98,105,100,61,37,100,10,0,9,9,9,32,112,114,101,99,99,105,110,116,115,105,122,101,32,40,119,44,104,41,61,0,40,37,100,44,37,100,41,32,0,9,9,9,32,113,110,116,115,116,121,61,37,100,10,0,9,9,9,32,110,117,109,103,98,105,116,115,61,37,100,10,0,9,9,9,32,115,116,101,112,115,105,122,101,115,32,40,109,44,101,41,61,0,9,9,9,32,114,111,105,115,104,105,102,116,61,37,100,10,0,9,9,32,125,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,77,67,79,32,109,97,114,107,101,114,10,0,67,97,110,110,111,116,32,116,97,107,101,32,105,110,32,99,104,97,114,103,101,32,109,117,108,116,105,112,108,101,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,115,116,97,103,101,115,46,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,77,67,67,32,109,97,114,107,101,114,10,0,67,97,110,110,111,116,32,116,97,107,101,32,105,110,32,99,104,97,114,103,101,32,109,117,108,116,105,112,108,101,32,100,97,116,97,32,115,112,97,110,110,105,110,103,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,114,101,97,100,32,77,67,67,32,109,97,114,107,101,114,10,0,67,97,110,110,111,116,32,116,97,107,101,32,105,110,32,99,104,97,114,103,101,32,109,117,108,116,105,112,108,101,32,99,111,108,108,101,99,116,105,111,110,115,10,0,67,97,110,110,111,116,32,116,97,107,101,32,105,110,32,99,104,97,114,103,101,32,99,111,108,108,101,99,116,105,111,110,115,32,111,116,104,101,114,32,116,104,97,110,32,97,114,114,97,121,32,100,101,99,111,114,114,101,108,97,116,105,111,110,10,0,67,97,110,110,111,116,32,116,97,107,101,32,105,110,32,99,104,97,114,103,101,32,99,111,108,108,101,99,116,105,111,110,115,32,119,105,116,104,32,105,110,100,105,120,32,115,104,117,102,102,108,101,10,0,67,97,110,110,111,116,32,116,97,107,101,32,105,110,32,99,104,97,114,103,101,32,99,111,108,108,101,99,116,105,111,110,115,32,119,105,116,104,111,117,116,32,115,97,109,101,32,110,117,109,98,101,114,32,111,102,32,105,110,100,105,120,101,115,10,0,67,114,114,111,114,32,114,101,97,100,105,110,103,32,67,66,68,32,109,97,114,107,101,114,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,77,67,84,32,109,97,114,107,101,114,10,0,67,97,110,110,111,116,32,116,97,107,101,32,105,110,32,99,104,97,114,103,101,32,109,99,116,32,100,97,116,97,32,119,105,116,104,105,110,32,109,117,108,116,105,112,108,101,32,77,67,84,32,114,101,99,111,114,100,115,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,114,101,97,100,32,77,67,84,32,109,97,114,107,101,114,10,0,67,97,110,110,111,116,32,116,97,107,101,32,105,110,32,99,104,97,114,103,101,32,109,117,108,116,105,112,108,101,32,77,67,84,32,109,97,114,107,101,114,115,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,67,82,71,32,109,97,114,107,101,114,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,80,80,84,32,109,97,114,107,101,114,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,80,80,84,32,109,97,114,107,101,114,58,32,112,97,99,107,101,116,32,104,101,97,100,101,114,32,104,97,118,101,32,98,101,101,110,32,112,114,101,118,105,111,117,115,108,121,32,102,111,117,110,100,32,105,110,32,116,104,101,32,109,97,105,110,32,104,101,97,100,101,114,32,40,80,80,77,32,109,97,114,107,101,114,41,46,10,0,90,112,112,116,32,37,117,32,97,108,114,101,97,100,121,32,114,101,97,100,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,80,80,77,32,109,97,114,107,101,114,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,114,101,97,100,32,80,80,77,32,109,97,114,107,101,114,10,0,90,112,112,109,32,37,117,32,97,108,114,101,97,100,121,32,114,101,97,100,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,80,76,84,32,109,97,114,107,101,114,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,80,76,77,32,109,97,114,107,101,114,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,84,76,77,32,109,97,114,107,101,114,10,0,69,114,114,111,114,32,119,105,116,104,32,83,73,90,32,109,97,114,107,101,114,32,115,105,122,101,10,0,69,114,114,111,114,32,119,105,116,104,32,83,73,90,32,109,97,114,107,101,114,58,32,110,117,109,98,101,114,32,111,102,32,99,111,109,112,111,110,101,110,116,32,105,115,32,105,108,108,101,103,97,108,32,45,62,32,37,100,10,0,69,114,114,111,114,32,119,105,116,104,32,83,73,90,32,109,97,114,107,101,114,58,32,110,117,109,98,101,114,32,111,102,32,99,111,109,112,111,110,101,110,116,32,105,115,32,110,111,116,32,99,111,109,112,97,116,105,98,108,101,32,119,105,116,104,32,116,104,101,32,114,101,109,97,105,110,105,110,103,32,110,117,109,98,101,114,32,111,102,32,112,97,114,97,109,101,116,101,114,115,32,40,32,37,100,32,118,115,32,37,100,41,10,0,69,114,114,111,114,32,119,105,116,104,32,83,73,90,32,109,97,114,107,101,114,58,32,110,101,103,97,116,105,118,101,32,111,114,32,122,101,114,111,32,105,109,97,103,101,32,115,105,122,101,32,40,37,100,32,120,32,37,100,41,10,0,69,114,114,111,114,32,119,105,116,104,32,83,73,90,32,109,97,114,107,101,114,58,32,105,110,118,97,108,105,100,32,116,105,108,101,32,115,105,122,101,32,40,116,100,120,58,32,37,100,44,32,116,100,121,58,32,37,100,41,10,0,80,114,101,118,101,110,116,32,98,117,102,102,101,114,32,111,118,101,114,102,108,111,119,32,40,120,49,58,32,37,100,44,32,121,49,58,32,37,100,41,10,0,69,114,114,111,114,32,119,105,116,104,32,83,73,90,32,109,97,114,107,101,114,58,32,105,108,108,101,103,97,108,32,116,105,108,101,32,111,102,102,115,101,116,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,116,97,107,101,32,105,110,32,99,104,97,114,103,101,32,83,73,90,32,109,97,114,107,101,114,10,0,73,110,118,97,108,105,100,32,118,97,108,117,101,115,32,102,111,114,32,99,111,109,112,32,61,32,37,100,32,58,32,100,120,61,37,117,32,100,121,61,37,117,10,32,40,115,104,111,117,108,100,32,98,101,32,98,101,116,119,101,101,110,32,49,32,97,110,100,32,50,53,53,32,97,99,99,111,114,100,105,110,103,32,116,104,101,32,74,80,69,71,50,48,48,48,32,110,111,114,109,41,0,73,110,118,97,108,105,100,32,110,117,109,98,101,114,32,111,102,32,116,105,108,101,115,32,58,32,37,117,32,120,32,37,117,32,40,109,97,120,105,109,117,109,32,102,105,120,101,100,32,98,121,32,106,112,101,103,50,48,48,48,32,110,111,114,109,32,105,115,32,54,53,53,51,53,32,116,105,108,101,115,41,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,80,79,67,32,109,97,114,107,101,114,10,0,84,111,111,32,109,97,110,121,32,80,79,67,115,32,37,100,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,81,67,67,32,109,97,114,107,101,114,10,0,73,110,118,97,108,105,100,32,99,111,109,112,111,110,101,110,116,32,110,117,109,98,101,114,58,32,37,100,44,32,114,101,103,97,114,100,105,110,103,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,99,111,109,112,111,110,101,110,116,115,32,37,100,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,83,81,99,100,32,111,114,32,83,81,99,99,32,101,108,101,109,101,110,116,10,0,87,104,105,108,101,32,114,101,97,100,105,110,103,32,67,67,80,95,81,78,84,83,84,89,32,101,108,101,109,101,110,116,32,105,110,115,105,100,101,32,81,67,68,32,111,114,32,81,67,67,32,109,97,114,107,101,114,32,115,101,103,109,101,110,116,44,32,110,117,109,98,101,114,32,111,102,32,115,117,98,98,97,110,100,115,32,40,37,100,41,32,105,115,32,103,114,101,97,116,101,114,32,116,111,32,79,80,74,95,74,50,75,95,77,65,88,66,65,78,68,83,32,40,37,100,41,46,32,83,111,32,119,101,32,108,105,109,105,116,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,101,108,101,109,101,110,116,115,32,115,116,111,114,101,100,32,116,111,32,79,80,74,95,74,50,75,95,77,65,88,66,65,78,68,83,32,40,37,100,41,32,97,110,100,32,115,107,105,112,32,116,104,101,32,114,101,115,116,46,32,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,81,67,68,32,109,97,114,107,101,114,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,82,71,78,32,109,97,114,107,101,114,10,0,98,97,100,32,99,111,109,112,111,110,101,110,116,32,110,117,109,98,101,114,32,105,110,32,82,71,78,32,40,37,100,32,119,104,101,110,32,116,104,101,114,101,32,97,114,101,32,111,110,108,121,32,37,100,41,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,67,79,67,32,109,97,114,107,101,114,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,67,79,67,32,109,97,114,107,101,114,32,40,98,97,100,32,110,117,109,98,101,114,32,111,102,32,99,111,109,112,111,110,101,110,116,115,41,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,83,80,67,111,100,32,83,80,67,111,99,32,101,108,101,109,101,110,116,10,0,73,110,118,97,108,105,100,32,118,97,108,117,101,32,102,111,114,32,110,117,109,114,101,115,111,108,117,116,105,111,110,115,32,58,32,37,100,44,32,109,97,120,32,118,97,108,117,101,32,105,115,32,115,101,116,32,105,110,32,111,112,101,110,106,112,101,103,46,104,32,97,116,32,37,100,10,0,69,114,114,111,114,32,100,101,99,111,100,105,110,103,32,99,111,109,112,111,110,101,110,116,32,37,100,46,10,84,104,101,32,110,117,109,98,101,114,32,111,102,32,114,101,115,111,108,117,116,105,111,110,115,32,116,111,32,114,101,109,111,118,101,32,105,115,32,104,105,103,104,101,114,32,116,104,97,110,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,114,101,115,111,108,117,116,105,111,110,115,32,111,102,32,116,104,105,115,32,99,111,109,112,111,110,101,110,116,10,77,111,100,105,102,121,32,116,104,101,32,99,112,95,114,101,100,117,99,101,32,112,97,114,97,109,101,116,101,114,46,10,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,83,80,67,111,100,32,83,80,67,111,99,32,101,108,101,109,101,110,116,44,32,73,110,118,97,108,105,100,32,99,98,108,107,119,47,99,98,108,107,104,32,99,111,109,98,105,110,97,116,105,111,110,10,0,73,110,118,97,108,105,100,32,112,114,101,99,105,110,99,116,32,115,105,122,101,10,0,67,79,68,32,109,97,114,107,101,114,32,97,108,114,101,97,100,121,32,114,101,97,100,46,32,78,111,32,109,111,114,101,32,116,104,97,110,32,111,110,101,32,67,79,68,32,109,97,114,107,101,114,32,112,101,114,32,116,105,108,101,46,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,67,79,68,32,109,97,114,107,101,114,10,0,85,110,107,110,111,119,110,32,83,99,111,100,32,118,97,108,117,101,32,105,110,32,67,79,68,32,109,97,114,107,101,114,10,0,85,110,107,110,111,119,110,32,112,114,111,103,114,101,115,115,105,111,110,32,111,114,100,101,114,32,105,110,32,67,79,68,32,109,97,114,107,101,114,10,0,73,110,118,97,108,105,100,32,110,117,109,98,101,114,32,111,102,32,108,97,121,101,114,115,32,105,110,32,67,79,68,32,109,97,114,107,101,114,32,58,32,37,100,32,110,111,116,32,105,110,32,114,97,110,103,101,32,91,49,45,54,53,53,51,53,93,10,0,73,110,118,97,108,105,100,32,116,105,108,101,32,110,117,109,98,101,114,32,37,100,10,0,69,109,112,116,121,32,83,79,84,32,109,97,114,107,101,114,32,100,101,116,101,99,116,101,100,58,32,80,115,111,116,61,37,100,46,10,0,80,115,111,116,32,118,97,108,117,101,32,105,115,32,110,111,116,32,99,111,114,114,101,99,116,32,114,101,103,97,114,100,115,32,116,111,32,116,104,101,32,74,80,69,71,50,48,48,48,32,110,111,114,109,58,32,37,100,46,10,0,80,115,111,116,32,118,97,108,117,101,32,111,102,32,116,104,101,32,99,117,114,114,101,110,116,32,116,105,108,101,45,112,97,114,116,32,105,115,32,101,113,117,97,108,32,116,111,32,122,101,114,111,44,32,119,101,32,97,115,115,117,109,105,110,103,32,105,116,32,105,115,32,116,104,101,32,108,97,115,116,32,116,105,108,101,45,112,97,114,116,32,111,102,32,116,104,101,32,99,111,100,101,115,116,114,101,97,109,46,10,0,73,110,32,83,79,84,32,109,97,114,107,101,114,44,32,84,80,83,111,116,32,40,37,100,41,32,105,115,32,110,111,116,32,118,97,108,105,100,32,114,101,103,97,114,100,115,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,110,117,109,98,101,114,32,111,102,32,116,105,108,101,45,112,97,114,116,32,40,37,100,41,44,32,103,105,118,105,110,103,32,117,112,10,0,73,110,32,83,79,84,32,109,97,114,107,101,114,44,32,84,80,83,111,116,32,40,37,100,41,32,105,115,32,110,111,116,32,118,97,108,105,100,32,114,101,103,97,114,100,115,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,110,117,109,98,101,114,32,111,102,32,116,105,108,101,45,112,97,114,116,32,40,104,101,97,100,101,114,41,32,40,37,100,41,44,32,103,105,118,105,110,103,32,117,112,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,114,101,97,100,32,83,79,84,32,109,97,114,107,101,114,46,32,84,105,108,101,32,105,110,100,101,120,32,97,108,108,111,99,97,116,105,111,110,32,102,97,105,108,101,100,10,0,83,116,97,114,116,32,116,111,32,114,101,97,100,32,106,50,107,32,109,97,105,110,32,104,101,97,100,101,114,32,40,37,100,41,46,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,97,100,100,32,109,104,32,109,97,114,107,101,114,10,0,69,120,112,101,99,116,101,100,32,97,32,83,79,67,32,109,97,114,107,101,114,32,10,0,65,32,109,97,114,107,101,114,32,73,68,32,119,97,115,32,101,120,112,101,99,116,101,100,32,40,48,120,102,102,45,45,41,32,105,110,115,116,101,97,100,32,111,102,32,37,46,56,120,10,0,85,110,107,110,111,119,110,32,109,97,114,107,101,114,10,0,85,110,107,110,111,119,32,109,97,114,107,101,114,32,104,97,118,101,32,98,101,101,110,32,100,101,116,101,99,116,101,100,32,97,110,100,32,103,101,110,101,114,97,116,101,100,32,101,114,114,111,114,46,10,0,77,97,114,107,101,114,32,104,97,110,100,108,101,114,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,32,116,111,32,114,101,97,100,32,116,104,101,32,109,97,114,107,101,114,32,115,101,103,109,101,110,116,10,0,114,101,113,117,105,114,101,100,32,83,73,90,32,109,97,114,107,101,114,32,110,111,116,32,102,111,117,110,100,32,105,110,32,109,97,105,110,32,104,101,97,100,101,114,10,0,114,101,113,117,105,114,101,100,32,67,79,68,32,109,97,114,107,101,114,32,110,111,116,32,102,111,117,110,100,32,105,110,32,109,97,105,110,32,104,101,97,100,101,114,10,0,114,101,113,117,105,114,101,100,32,81,67,68,32,109,97,114,107,101,114,32,110,111,116,32,102,111,117,110,100,32,105,110,32,109,97,105,110,32,104,101,97,100,101,114,10,0,78,111,116,32,101,110,111,117,103,104,32,98,121,116,101,115,32,116,111,32,114,101,97,100,32,78,112,112,109,10,0,67,111,114,114,117,112,116,101,100,32,80,80,77,32,109,97,114,107,101,114,115,10,0,70,97,105,108,101,100,32,116,111,32,109,101,114,103,101,32,80,80,77,32,100,97,116,97,10,0,77,97,105,110,32,104,101,97,100,101,114,32,104,97,115,32,98,101,101,110,32,99,111,114,114,101,99,116,108,121,32,100,101,99,111,100,101,100,46,10,0,70,97,105,108,101,100,32,116,111,32,100,101,99,111,100,101,32,116,104,101,32,99,111,100,101,115,116,114,101,97,109,32,105,110,32,116,104,101,32,74,80,50,32,102,105,108,101,10,0,73,110,118,97,108,105,100,32,110,117,109,98,101,114,32,111,102,32,99,111,109,112,111,110,101,110,116,115,32,115,112,101,99,105,102,105,101,100,32,119,104,105,108,101,32,115,101,116,116,105,110,103,32,117,112,32,74,80,50,32,101,110,99,111,100,101,114,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,119,104,101,110,32,115,101,116,117,112,32,116,104,101,32,74,80,50,32,101,110,99,111,100,101,114,10,0,65,108,112,104,97,32,99,104,97,110,110,101,108,32,115,112,101,99,105,102,105,101,100,32,98,117,116,32,117,110,107,110,111,119,110,32,101,110,117,109,99,115,46,32,78,111,32,99,100,101,102,32,98,111,120,32,119,105,108,108,32,98,101,32,99,114,101,97,116,101,100,46,10,0,65,108,112,104,97,32,99,104,97,110,110,101,108,32,115,112,101,99,105,102,105,101,100,32,98,117,116,32,110,111,116,32,101,110,111,117,103,104,32,105,109,97,103,101,32,99,111,109,112,111,110,101,110,116,115,32,102,111,114,32,97,110,32,97,117,116,111,109,97,116,105,99,32,99,100,101,102,32,98,111,120,32,99,114,101,97,116,105,111,110,46,10,0,65,108,112,104,97,32,99,104,97,110,110,101,108,32,112,111,115,105,116,105,111,110,32,99,111,110,102,108,105,99,116,115,32,119,105,116,104,32,99,111,108,111,114,32,99,104,97,110,110,101,108,46,32,78,111,32,99,100,101,102,32,98,111,120,32,119,105,108,108,32,98,101,32,99,114,101,97,116,101,100,46,10,0,77,117,108,116,105,112,108,101,32,97,108,112,104,97,32,99,104,97,110,110,101,108,115,32,115,112,101,99,105,102,105,101,100,46,32,78,111,32,99,100,101,102,32,98,111,120,32,119,105,108,108,32,98,101,32,99,114,101,97,116,101,100,46,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,115,101,116,117,112,32,116,104,101,32,74,80,50,32,101,110,99,111,100,101,114,10,0,74,80,50,32,98,111,120,32,119,104,105,99,104,32,97,114,101,32,97,102,116,101,114,32,116,104,101,32,99,111,100,101,115,116,114,101,97,109,32,119,105,108,108,32,110,111,116,32,98,101,32,114,101,97,100,32,98,121,32,116,104,105,115,32,102,117,110,99,116,105,111,110,46,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,104,111,108,100,32,74,80,50,32,72,101,97,100,101,114,32,100,97,116,97,10,0,83,116,114,101,97,109,32,101,114,114,111,114,32,119,104,105,108,101,32,119,114,105,116,105,110,103,32,74,80,50,32,72,101,97,100,101,114,32,98,111,120,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,104,97,110,100,108,101,32,102,116,121,112,32,100,97,116,97,10,0,69,114,114,111,114,32,119,104,105,108,101,32,119,114,105,116,105,110,103,32,102,116,121,112,32,100,97,116,97,32,116,111,32,115,116,114,101,97,109,10,0,70,97,105,108,101,100,32,116,111,32,115,101,101,107,32,105,110,32,116,104,101,32,115,116,114,101,97,109,46,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,104,97,110,100,108,101,32,106,112,101,103,50,48,48,48,32,102,105,108,101,32,104,101,97,100,101,114,10,0,67,97,110,110,111,116,32,104,97,110,100,108,101,32,98,111,120,32,115,105,122,101,115,32,104,105,103,104,101,114,32,116,104,97,110,32,50,94,51,50,10,0,98,97,100,32,112,108,97,99,101,100,32,106,112,101,103,32,99,111,100,101,115,116,114,101,97,109,10,0,67,97,110,110,111,116,32,104,97,110,100,108,101,32,98,111,120,32,111,102,32,117,110,100,101,102,105,110,101,100,32,115,105,122,101,115,10,0,105,110,118,97,108,105,100,32,98,111,120,32,115,105,122,101,32,37,100,32,40,37,120,41,10,0,70,111,117,110,100,32,97,32,109,105,115,112,108,97,99,101,100,32,39,37,99,37,99,37,99,37,99,39,32,98,111,120,32,111,117,116,115,105,100,101,32,106,112,50,104,32,98,111,120,10,0,74,80,69,71,50,48,48,48,32,72,101,97,100,101,114,32,98,111,120,32,110,111,116,32,114,101,97,100,32,121,101,116,44,32,39,37,99,37,99,37,99,37,99,39,32,98,111,120,32,119,105,108,108,32,98,101,32,105,103,110,111,114,101,100,10,0,80,114,111,98,108,101,109,32,119,105,116,104,32,115,107,105,112,112,105,110,103,32,74,80,69,71,50,48,48,48,32,98,111,120,44,32,115,116,114,101,97,109,32,101,114,114,111,114,10,0,73,110,118,97,108,105,100,32,98,111,120,32,115,105,122,101,32,37,100,32,102,111,114,32,98,111,120,32,39,37,99,37,99,37,99,37,99,39,46,32,78,101,101,100,32,37,100,32,98,121,116,101,115,44,32,37,100,32,98,121,116,101,115,32,114,101,109,97,105,110,105,110,103,32,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,104,97,110,100,108,101,32,106,112,101,103,50,48,48,48,32,98,111,120,10,0,80,114,111,98,108,101,109,32,119,105,116,104,32,114,101,97,100,105,110,103,32,74,80,69,71,50,48,48,48,32,98,111,120,44,32,115,116,114,101,97,109,32,101,114,114,111,114,10,0,77,97,108,102,111,114,109,101,100,32,74,80,50,32,102,105,108,101,32,102,111,114,109,97,116,58,32,102,105,114,115,116,32,98,111,120,32,109,117,115,116,32,98,101,32,74,80,69,71,32,50,48,48,48,32,115,105,103,110,97,116,117,114,101,32,98,111,120,10,0,77,97,108,102,111,114,109,101,100,32,74,80,50,32,102,105,108,101,32,102,111,114,109,97,116,58,32,115,101,99,111,110,100,32,98,111,120,32,109,117,115,116,32,98,101,32,102,105,108,101,32,116,121,112,101,32,98,111,120,10,0,73,110,115,117,102,102,105,99,105,101,110,116,32,100,97,116,97,32,102,111,114,32,67,68,69,70,32,98,111,120,46,10,0,78,117,109,98,101,114,32,111,102,32,99,104,97,110,110,101,108,32,100,101,115,99,114,105,112,116,105,111,110,32,105,115,32,101,113,117,97,108,32,116,111,32,122,101,114,111,32,105,110,32,67,68,69,70,32,98,111,120,46,10,0,78,101,101,100,32,116,111,32,114,101,97,100,32,97,32,80,67,76,82,32,98,111,120,32,98,101,102,111,114,101,32,116,104,101,32,67,77,65,80,32,98,111,120,46,10,0,79,110,108,121,32,111,110,101,32,67,77,65,80,32,98,111,120,32,105,115,32,97,108,108,111,119,101,100,46,10,0,73,110,115,117,102,102,105,99,105,101,110,116,32,100,97,116,97,32,102,111,114,32,67,77,65,80,32,98,111,120,46,10,0,73,110,118,97,108,105,100,32,80,67,76,82,32,98,111,120,46,32,82,101,112,111,114,116,115,32,37,100,32,101,110,116,114,105,101,115,10,0,73,110,118,97,108,105,100,32,80,67,76,82,32,98,111,120,46,32,82,101,112,111,114,116,115,32,48,32,112,97,108,101,116,116,101,32,99,111,108,117,109,110,115,10,0,65,32,66,80,67,67,32,104,101,97,100,101,114,32,98,111,120,32,105,115,32,97,118,97,105,108,97,98,108,101,32,97,108,116,104,111,117,103,104,32,66,80,67,32,103,105,118,101,110,32,98,121,32,116,104,101,32,73,72,68,82,32,98,111,120,32,40,37,100,41,32,105,110,100,105,99,97,116,101,32,99,111,109,112,111,110,101,110,116,115,32,98,105,116,32,100,101,112,116,104,32,105,115,32,99,111,110,115,116,97,110,116,10,0,66,97,100,32,66,80,67,67,32,104,101,97,100,101,114,32,98,111,120,32,40,98,97,100,32,115,105,122,101,41,10,0,66,97,100,32,67,79,76,82,32,104,101,97,100,101,114,32,98,111,120,32,40,98,97,100,32,115,105,122,101,41,10,0,65,32,99,111,110,102,111,114,109,105,110,103,32,74,80,50,32,114,101,97,100,101,114,32,115,104,97,108,108,32,105,103,110,111,114,101,32,97,108,108,32,67,111,108,111,117,114,32,83,112,101,99,105,102,105,99,97,116,105,111,110,32,98,111,120,101,115,32,97,102,116,101,114,32,116,104,101,32,102,105,114,115,116,44,32,115,111,32,119,101,32,105,103,110,111,114,101,32,116,104,105,115,32,111,110,101,46,10,0,66,97,100,32,67,79,76,82,32,104,101,97,100,101,114,32,98,111,120,32,40,98,97,100,32,115,105,122,101,58,32,37,100,41,10,0,66,97,100,32,67,79,76,82,32,104,101,97,100,101,114,32,98,111,120,32,40,67,73,69,76,97,98,44,32,98,97,100,32,115,105,122,101,58,32,37,100,41,10,0,67,79,76,82,32,66,79,88,32,109,101,116,104,32,118,97,108,117,101,32,105,115,32,110,111,116,32,97,32,114,101,103,117,108,97,114,32,118,97,108,117,101,32,40,37,100,41,44,32,115,111,32,119,101,32,119,105,108,108,32,105,103,110,111,114,101,32,116,104,101,32,101,110,116,105,114,101,32,67,111,108,111,117,114,32,83,112,101,99,105,102,105,99,97,116,105,111,110,32,98,111,120,46,32,10,0,66,97,100,32,105,109,97,103,101,32,104,101,97,100,101,114,32,98,111,120,32,40,98,97,100,32,115,105,122,101,41,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,104,97,110,100,108,101,32,105,109,97,103,101,32,104,101,97,100,101,114,32,40,105,104,100,114,41,10,0,74,80,50,32,73,72,68,82,32,98,111,120,58,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,105,110,100,105,99,97,116,101,32,116,104,97,116,32,116,104,101,32,102,105,108,101,32,105,115,32,110,111,116,32,97,32,99,111,110,102,111,114,109,105,110,103,32,74,80,50,32,102,105,108,101,32,40,37,100,41,32,10,0,84,104,101,32,32,98,111,120,32,109,117,115,116,32,98,101,32,116,104,101,32,102,105,114,115,116,32,98,111,120,32,105,110,32,116,104,101,32,102,105,108,101,46,10,0,67,97,110,110,111,116,32,104,97,110,100,108,101,32,98,111,120,32,111,102,32,108,101,115,115,32,116,104,97,110,32,56,32,98,121,116,101,115,10,0,67,97,110,110,111,116,32,104,97,110,100,108,101,32,88,76,32,98,111,120,32,111,102,32,108,101,115,115,32,116,104,97,110,32,49,54,32,98,121,116,101,115,10,0,66,111,120,32,108,101,110,103,116,104,32,105,115,32,105,110,99,111,110,115,105,115,116,101,110,116,46,10,0,83,116,114,101,97,109,32,101,114,114,111,114,32,119,104,105,108,101,32,114,101,97,100,105,110,103,32,74,80,50,32,72,101,97,100,101,114,32,98,111,120,10,0,83,116,114,101,97,109,32,101,114,114,111,114,32,119,104,105,108,101,32,114,101,97,100,105,110,103,32,74,80,50,32,72,101,97,100,101,114,32,98,111,120,58,32,98,111,120,32,108,101,110,103,116,104,32,105,115,32,105,110,99,111,110,115,105,115,116,101,110,116,46,10,0,83,116,114,101,97,109,32,101,114,114,111,114,32,119,104,105,108,101,32,114,101,97,100,105,110,103,32,74,80,50,32,72,101,97,100,101,114,32,98,111,120,58,32,110,111,32,39,105,104,100,114,39,32,98,111,120,46,10,0,84,104,101,32,102,116,121,112,32,98,111,120,32,109,117,115,116,32,98,101,32,116,104,101,32,115,101,99,111,110,100,32,98,111,120,32,105,110,32,116,104,101,32,102,105,108,101,46,10,0,69,114,114,111,114,32,119,105,116,104,32,70,84,89,80,32,115,105,103,110,97,116,117,114,101,32,66,111,120,32,115,105,122,101,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,119,105,116,104,32,70,84,89,80,32,66,111,120,10,0,84,104,101,32,115,105,103,110,97,116,117,114,101,32,98,111,120,32,109,117,115,116,32,98,101,32,116,104,101,32,102,105,114,115,116,32,98,111,120,32,105,110,32,116,104,101,32,102,105,108,101,46,10,0,69,114,114,111,114,32,119,105,116,104,32,74,80,32,115,105,103,110,97,116,117,114,101,32,66,111,120,32,115,105,122,101,10,0,69,114,114,111,114,32,119,105,116,104,32,74,80,32,83,105,103,110,97,116,117,114,101,32,58,32,98,97,100,32,109,97,103,105,99,32,110,117,109,98,101,114,10,0,111,112,106,95,106,112,50,95,97,112,112,108,121,95,99,100,101,102,58,32,99,110,61,37,100,44,32,110,117,109,99,111,109,112,115,61,37,100,10,0,111,112,106,95,106,112,50,95,97,112,112,108,121,95,99,100,101,102,58,32,97,99,110,61,37,100,44,32,110,117,109,99,111,109,112,115,61,37,100,10,0,73,110,118,97,108,105,100,32,99,111,109,112,111,110,101,110,116,32,105,110,100,101,120,32,37,100,32,40,62,61,32,37,100,41,46,10,0,73,110,99,111,109,112,108,101,116,101,32,99,104,97,110,110,101,108,32,100,101,102,105,110,105,116,105,111,110,115,46,10,0,85,110,101,120,112,101,99,116,101,100,32,79,79,77,46,10,0,73,110,118,97,108,105,100,32,99,111,109,112,111,110,101,110,116,47,112,97,108,101,116,116,101,32,105,110,100,101,120,32,102,111,114,32,100,105,114,101,99,116,32,109,97,112,112,105,110,103,32,37,100,46,10,0,67,111,109,112,111,110,101,110,116,32,37,100,32,105,115,32,109,97,112,112,101,100,32,116,119,105,99,101,46,10,0,68,105,114,101,99,116,32,117,115,101,32,97,116,32,35,37,100,32,104,111,119,101,118,101,114,32,112,99,111,108,61,37,100,46,10,0,67,111,109,112,111,110,101,110,116,32,37,100,32,100,111,101,115,110,39,116,32,104,97,118,101,32,97,32,109,97,112,112,105,110,103,46,10,0,67,111,109,112,111,110,101,110,116,32,109,97,112,112,105,110,103,32,115,101,101,109,115,32,119,114,111,110,103,46,32,84,114,121,105,110,103,32,116,111,32,99,111,114,114,101,99,116,46,10,0,84,105,108,101,115,32,100,111,110,39,116,32,97,108,108,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,100,105,109,101,110,115,105,111,110,46,32,83,107,105,112,32,116,104,101,32,77,67,84,32,115,116,101,112,46,10,0,78,117,109,98,101,114,32,111,102,32,99,111,109,112,111,110,101,110,116,115,32,40,37,100,41,32,105,115,32,105,110,99,111,110,115,105,115,116,101,110,116,32,119,105,116,104,32,97,32,77,67,84,46,32,83,107,105,112,32,116,104,101,32,77,67,84,32,115,116,101,112,46,10,0,116,105,108,101,115,32,114,101,113,117,105,114,101,32,97,116,32,108,101,97,115,116,32,111,110,101,32,114,101,115,111,108,117,116,105,111,110,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,102,111,114,32,116,105,108,101,32,100,97,116,97,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,102,111,114,32,116,105,108,101,32,114,101,115,111,108,117,116,105,111,110,115,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,104,97,110,100,108,101,32,98,97,110,100,32,112,114,101,99,105,110,116,115,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,102,111,114,32,99,117,114,114,101,110,116,32,112,114,101,99,105,110,99,116,32,99,111,100,101,98,108,111,99,107,32,101,108,101,109,101,110,116,10,0,78,111,32,105,110,99,108,116,114,101,101,32,99,114,101,97,116,101,100,46,10,0,78,111,32,105,109,115,98,116,114,101,101,32,99,114,101,97,116,101,100,46,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,99,114,101,97,116,101,32,84,97,103,45,116,114,101,101,10,0,116,103,116,95,99,114,101,97,116,101,32,116,114,101,101,45,62,110,117,109,110,111,100,101,115,32,61,61,32,48,44,32,110,111,32,116,114,101,101,32,99,114,101,97,116,101,100,46,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,99,114,101,97,116,101,32,84,97,103,45,116,114,101,101,32,110,111,100,101,115,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,114,101,105,110,105,116,105,97,108,105,122,101,32,116,104,101,32,116,97,103,32,116,114,101,101,10,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,97,100,100,32,97,32,110,101,119,32,118,97,108,105,100,97,116,105,111,110,32,112,114,111,99,101,100,117,114,101,10,0,0,1,1,2,1,2,2,2,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+10240);allocate([7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,1,1,2,1,2,2,2,1,2,2,2,2,2,2,2,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,1,1,2,1,2,2,2,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,3,3,6,3,6,6,8,3,6,6,8,6,8,8,8,1,4,4,7,4,7,7,8,4,7,7,8,7,8,8,8,1,4,4,7,4,7,7,8,4,7,7,8,7,8,8,8,2,5,5,7,5,7,7,8,5,7,7,8,7,8,8,8,1,4,4,7,4,7,7,8,4,7,7,8,7,8,8,8,2,5,5,7,5,7,7,8,5,7,7,8,7,8,8,8,2,5,5,7,5,7,7,8,5,7,7,8,7,8,8,8,2,5,5,7,5,7,7,8,5,7,7,8,7,8,8,8,1,4,4,7,4,7,7,8,4,7,7,8,7,8,8,8,2,5,5,7,5,7,7,8,5,7,7,8,7,8,8,8,2,5,5,7,5,7,7,8,5,7,7,8,7,8,8,8,2,5,5,7,5,7,7,8,5,7,7,8,7,8,8,8,2,5,5,7,5,7,7,8,5,7,7,8,7,8,8,8,2,5,5,7,5,7,7,8,5,7,7,8,7,8,8,8,2,5,5,7,5,7,7,8,5,7,7,8,7,8,8,8,2,5,5,7,5,7,7,8,5,7,7,8,7,8,8,8,9,10,12,13,10,10,13,13,12,13,12,13,13,13,13,13,9,10,12,11,10,9,13,12,12,11,12,11,13,12,13,12,9,10,12,11,10,10,11,11,12,13,9,10,13,13,10,10,9,10,12,13,10,9,11,12,12,11,9,10,13,12,10,9,9,10,12,13,10,9,11,12,12,13,12,13,11,12,11,12,9,10,12,11,10,10,11,11,12,11,12,11,11,11,11,11,9,10,12,11,10,9,13,12,12,13,9,10,11,12,10,9,9,10,12,13,10,10,13,13,12,11,9,10,11,11,10,10,9,10,12,13,10,10,13,13,12,11,9,10,11,11,10,10,9,10,12,11,10,9,13,12,12,13,9,10,11,12,10,9,9,10,12,11,10,10,11,11,12,11,12,11,11,11,11,11,9,10,12,13,10,9,11,12,12,13,12,13,11,12,11,12,9,10,12,13,10,9,11,12,12,11,9,10,13,12,10,9,9,10,12,11,10,10,11,11,12,13,9,10,13,13,10,10,9,10,12,11,10,9,13,12,12,11,12,11,13,12,13,12,9,10,12,13,10,10,13,13,12,13,12,13,13,13,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,0,1,0,0,1,1,0,0,1,1,0,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,114,101,97,100,58,32,115,101,103,109,101,110,116,32,116,111,111,32,108,111,110,103,32,40,37,100,41,32,119,105,116,104,32,109,97,120,32,40,37,100,41,32,102,111,114,32,99,111,100,101,98,108,111,99,107,32,37,100,32,40,112,61,37,100,44,32,98,61,37,100,44,32,114,61,37,100,44,32,99,61,37,100,41,10,0,114,101,97,100,58,32,115,101,103,109,101,110,116,32,116,111,111,32,108,111,110,103,32,40,37,100,41,32,119,105,116,104,32,99,117,114,114,101,110,116,32,115,105,122,101,32,40,37,100,32,62,32,37,100,41,32,102,111,114,32,99,111,100,101,98,108,111,99,107,32,37,100,32,40,112,61,37,100,44,32,98,61,37,100,44,32,114,61,37,100,44,32,99,61,37,100,41,10,0,115,107,105,112,58,32,115,101,103,109,101,110,116,32,116,111,111,32,108,111,110,103,32,40,37,100,41,32,119,105,116,104,32,109,97,120,32,40,37,100,41,32,102,111,114,32,99,111,100,101,98,108,111,99,107,32,37,100,32,40,112,61,37,100,44,32,98,61,37,100,44,32,114,61,37,100,44,32,99,61,37,100,41,10,0,78,111,116,32,101,110,111,117,103,104,32,115,112,97,99,101,32,102,111,114,32,101,120,112,101,99,116,101,100,32,83,79,80,32,109,97,114,107,101,114,10,0,69,120,112,101,99,116,101,100,32,83,79,80,32,109,97,114,107,101,114,10,0,78,111,116,32,101,110,111,117,103,104,32,115,112,97,99,101,32,102,111,114,32,101,120,112,101,99,116,101,100,32,69,80,72,32,109,97,114,107,101,114,10,0,69,120,112,101,99,116,101,100,32,69,80,72,32,109,97,114,107,101,114,10,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,114,119,97],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+20480);allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+25137);var tempDoublePtr=Runtime.alignMemory(allocate(12,"i8",ALLOC_STATIC),8);assert(tempDoublePtr%8==0);function copyTempFloat(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3]}function copyTempDouble(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3];HEAP8[tempDoublePtr+4]=HEAP8[ptr+4];HEAP8[tempDoublePtr+5]=HEAP8[ptr+5];HEAP8[tempDoublePtr+6]=HEAP8[ptr+6];HEAP8[tempDoublePtr+7]=HEAP8[ptr+7]}Module["_i64Subtract"]=_i64Subtract;var _floorf=Math_floor;Module["_bitshift64Ashr"]=_bitshift64Ashr;var _SItoF=true;Module["_memset"]=_memset;var _BDtoILow=true;var _ceilf=Math_ceil;Module["_bitshift64Shl"]=_bitshift64Shl;function _abort(){Module["abort"]()}function ___lock(){}function ___unlock(){}Module["_i64Add"]=_i64Add;var _floor=Math_floor;var _sqrt=Math_sqrt;var PATH=undefined;function _emscripten_set_main_loop_timing(mode,value){Browser.mainLoop.timingMode=mode;Browser.mainLoop.timingValue=value;if(!Browser.mainLoop.func){return 1}if(mode==0){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_setTimeout(){setTimeout(Browser.mainLoop.runner,value)};Browser.mainLoop.method="timeout"}else if(mode==1){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_rAF(){Browser.requestAnimationFrame(Browser.mainLoop.runner)};Browser.mainLoop.method="rAF"}else if(mode==2){if(!window["setImmediate"]){var setImmediates=[];var emscriptenMainLoopMessageId="__emcc";function Browser_setImmediate_messageHandler(event){if(event.source===window&&event.data===emscriptenMainLoopMessageId){event.stopPropagation();setImmediates.shift()()}}window.addEventListener("message",Browser_setImmediate_messageHandler,true);window["setImmediate"]=function Browser_emulated_setImmediate(func){setImmediates.push(func);window.postMessage(emscriptenMainLoopMessageId,"*")}}Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_setImmediate(){window["setImmediate"](Browser.mainLoop.runner)};Browser.mainLoop.method="immediate"}return 0}function _emscripten_set_main_loop(func,fps,simulateInfiniteLoop,arg,noSetTiming){Module["noExitRuntime"]=true;assert(!Browser.mainLoop.func,"emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");Browser.mainLoop.func=func;Browser.mainLoop.arg=arg;var thisMainLoopId=Browser.mainLoop.currentlyRunningMainloop;Browser.mainLoop.runner=function Browser_mainLoop_runner(){if(ABORT)return;if(Browser.mainLoop.queue.length>0){var start=Date.now();var blocker=Browser.mainLoop.queue.shift();blocker.func(blocker.arg);if(Browser.mainLoop.remainingBlockers){var remaining=Browser.mainLoop.remainingBlockers;var next=remaining%1==0?remaining-1:Math.floor(remaining);if(blocker.counted){Browser.mainLoop.remainingBlockers=next}else{next=next+.5;Browser.mainLoop.remainingBlockers=(8*remaining+next)/9}}console.log('main loop blocker "'+blocker.name+'" took '+(Date.now()-start)+" ms");Browser.mainLoop.updateStatus();setTimeout(Browser.mainLoop.runner,0);return}if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;Browser.mainLoop.currentFrameNumber=Browser.mainLoop.currentFrameNumber+1|0;if(Browser.mainLoop.timingMode==1&&Browser.mainLoop.timingValue>1&&Browser.mainLoop.currentFrameNumber%Browser.mainLoop.timingValue!=0){Browser.mainLoop.scheduler();return}if(Browser.mainLoop.method==="timeout"&&Module.ctx){Module.printErr("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");Browser.mainLoop.method=""}Browser.mainLoop.runIter((function(){if(typeof arg!=="undefined"){Runtime.dynCall("vi",func,[arg])}else{Runtime.dynCall("v",func)}}));if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;if(typeof SDL==="object"&&SDL.audio&&SDL.audio.queueNewAudioData)SDL.audio.queueNewAudioData();Browser.mainLoop.scheduler()};if(!noSetTiming){if(fps&&fps>0)_emscripten_set_main_loop_timing(0,1e3/fps);else _emscripten_set_main_loop_timing(1,1);Browser.mainLoop.scheduler()}if(simulateInfiniteLoop){throw"SimulateInfiniteLoop"}}var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:(function(){Browser.mainLoop.scheduler=null;Browser.mainLoop.currentlyRunningMainloop++}),resume:(function(){Browser.mainLoop.currentlyRunningMainloop++;var timingMode=Browser.mainLoop.timingMode;var timingValue=Browser.mainLoop.timingValue;var func=Browser.mainLoop.func;Browser.mainLoop.func=null;_emscripten_set_main_loop(func,0,false,Browser.mainLoop.arg,true);_emscripten_set_main_loop_timing(timingMode,timingValue);Browser.mainLoop.scheduler()}),updateStatus:(function(){if(Module["setStatus"]){var message=Module["statusMessage"]||"Please wait...";var remaining=Browser.mainLoop.remainingBlockers;var expected=Browser.mainLoop.expectedBlockers;if(remaining){if(remaining<expected){Module["setStatus"](message+" ("+(expected-remaining)+"/"+expected+")")}else{Module["setStatus"](message)}}else{Module["setStatus"]("")}}}),runIter:(function(func){if(ABORT)return;if(Module["preMainLoop"]){var preRet=Module["preMainLoop"]();if(preRet===false){return}}try{func()}catch(e){if(e instanceof ExitStatus){return}else{if(e&&typeof e==="object"&&e.stack)Module.printErr("exception thrown: "+[e,e.stack]);throw e}}if(Module["postMainLoop"])Module["postMainLoop"]()})},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:(function(){if(!Module["preloadPlugins"])Module["preloadPlugins"]=[];if(Browser.initted)return;Browser.initted=true;try{new Blob;Browser.hasBlobConstructor=true}catch(e){Browser.hasBlobConstructor=false;console.log("warning: no blob constructor, cannot create blobs with mimetypes")}Browser.BlobBuilder=typeof MozBlobBuilder!="undefined"?MozBlobBuilder:typeof WebKitBlobBuilder!="undefined"?WebKitBlobBuilder:!Browser.hasBlobConstructor?console.log("warning: no BlobBuilder"):null;Browser.URLObject=typeof window!="undefined"?window.URL?window.URL:window.webkitURL:undefined;if(!Module.noImageDecoding&&typeof Browser.URLObject==="undefined"){console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");Module.noImageDecoding=true}var imagePlugin={};imagePlugin["canHandle"]=function imagePlugin_canHandle(name){return!Module.noImageDecoding&&/\.(jpg|jpeg|png|bmp)$/i.test(name)};imagePlugin["handle"]=function imagePlugin_handle(byteArray,name,onload,onerror){var b=null;if(Browser.hasBlobConstructor){try{b=new Blob([byteArray],{type:Browser.getMimetype(name)});if(b.size!==byteArray.length){b=new Blob([(new Uint8Array(byteArray)).buffer],{type:Browser.getMimetype(name)})}}catch(e){Runtime.warnOnce("Blob constructor present but fails: "+e+"; falling back to blob builder")}}if(!b){var bb=new Browser.BlobBuilder;bb.append((new Uint8Array(byteArray)).buffer);b=bb.getBlob()}var url=Browser.URLObject.createObjectURL(b);var img=new Image;img.onload=function img_onload(){assert(img.complete,"Image "+name+" could not be decoded");var canvas=document.createElement("canvas");canvas.width=img.width;canvas.height=img.height;var ctx=canvas.getContext("2d");ctx.drawImage(img,0,0);Module["preloadedImages"][name]=canvas;Browser.URLObject.revokeObjectURL(url);if(onload)onload(byteArray)};img.onerror=function img_onerror(event){console.log("Image "+url+" could not be decoded");if(onerror)onerror()};img.src=url};Module["preloadPlugins"].push(imagePlugin);var audioPlugin={};audioPlugin["canHandle"]=function audioPlugin_canHandle(name){return!Module.noAudioDecoding&&name.substr(-4)in{".ogg":1,".wav":1,".mp3":1}};audioPlugin["handle"]=function audioPlugin_handle(byteArray,name,onload,onerror){var done=false;function finish(audio){if(done)return;done=true;Module["preloadedAudios"][name]=audio;if(onload)onload(byteArray)}function fail(){if(done)return;done=true;Module["preloadedAudios"][name]=new Audio;if(onerror)onerror()}if(Browser.hasBlobConstructor){try{var b=new Blob([byteArray],{type:Browser.getMimetype(name)})}catch(e){return fail()}var url=Browser.URLObject.createObjectURL(b);var audio=new Audio;audio.addEventListener("canplaythrough",(function(){finish(audio)}),false);audio.onerror=function audio_onerror(event){if(done)return;console.log("warning: browser could not fully decode audio "+name+", trying slower base64 approach");function encode64(data){var BASE="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var PAD="=";var ret="";var leftchar=0;var leftbits=0;for(var i=0;i<data.length;i++){leftchar=leftchar<<8|data[i];leftbits+=8;while(leftbits>=6){var curr=leftchar>>leftbits-6&63;leftbits-=6;ret+=BASE[curr]}}if(leftbits==2){ret+=BASE[(leftchar&3)<<4];ret+=PAD+PAD}else if(leftbits==4){ret+=BASE[(leftchar&15)<<2];ret+=PAD}return ret}audio.src="data:audio/x-"+name.substr(-3)+";base64,"+encode64(byteArray);finish(audio)};audio.src=url;Browser.safeSetTimeout((function(){finish(audio)}),1e4)}else{return fail()}};Module["preloadPlugins"].push(audioPlugin);var canvas=Module["canvas"];function pointerLockChange(){Browser.pointerLock=document["pointerLockElement"]===canvas||document["mozPointerLockElement"]===canvas||document["webkitPointerLockElement"]===canvas||document["msPointerLockElement"]===canvas}if(canvas){canvas.requestPointerLock=canvas["requestPointerLock"]||canvas["mozRequestPointerLock"]||canvas["webkitRequestPointerLock"]||canvas["msRequestPointerLock"]||(function(){});canvas.exitPointerLock=document["exitPointerLock"]||document["mozExitPointerLock"]||document["webkitExitPointerLock"]||document["msExitPointerLock"]||(function(){});canvas.exitPointerLock=canvas.exitPointerLock.bind(document);document.addEventListener("pointerlockchange",pointerLockChange,false);document.addEventListener("mozpointerlockchange",pointerLockChange,false);document.addEventListener("webkitpointerlockchange",pointerLockChange,false);document.addEventListener("mspointerlockchange",pointerLockChange,false);if(Module["elementPointerLock"]){canvas.addEventListener("click",(function(ev){if(!Browser.pointerLock&&canvas.requestPointerLock){canvas.requestPointerLock();ev.preventDefault()}}),false)}}}),createContext:(function(canvas,useWebGL,setInModule,webGLContextAttributes){if(useWebGL&&Module.ctx&&canvas==Module.canvas)return Module.ctx;var ctx;var contextHandle;if(useWebGL){var contextAttributes={antialias:false,alpha:false};if(webGLContextAttributes){for(var attribute in webGLContextAttributes){contextAttributes[attribute]=webGLContextAttributes[attribute]}}contextHandle=GL.createContext(canvas,contextAttributes);if(contextHandle){ctx=GL.getContext(contextHandle).GLctx}canvas.style.backgroundColor="black"}else{ctx=canvas.getContext("2d")}if(!ctx)return null;if(setInModule){if(!useWebGL)assert(typeof GLctx==="undefined","cannot set in module if GLctx is used, but we are a non-GL context that would replace it");Module.ctx=ctx;if(useWebGL)GL.makeContextCurrent(contextHandle);Module.useWebGL=useWebGL;Browser.moduleContextCreatedCallbacks.forEach((function(callback){callback()}));Browser.init()}return ctx}),destroyContext:(function(canvas,useWebGL,setInModule){}),fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:(function(lockPointer,resizeCanvas,vrDevice){Browser.lockPointer=lockPointer;Browser.resizeCanvas=resizeCanvas;Browser.vrDevice=vrDevice;if(typeof Browser.lockPointer==="undefined")Browser.lockPointer=true;if(typeof Browser.resizeCanvas==="undefined")Browser.resizeCanvas=false;if(typeof Browser.vrDevice==="undefined")Browser.vrDevice=null;var canvas=Module["canvas"];function fullScreenChange(){Browser.isFullScreen=false;var canvasContainer=canvas.parentNode;if((document["webkitFullScreenElement"]||document["webkitFullscreenElement"]||document["mozFullScreenElement"]||document["mozFullscreenElement"]||document["fullScreenElement"]||document["fullscreenElement"]||document["msFullScreenElement"]||document["msFullscreenElement"]||document["webkitCurrentFullScreenElement"])===canvasContainer){canvas.cancelFullScreen=document["cancelFullScreen"]||document["mozCancelFullScreen"]||document["webkitCancelFullScreen"]||document["msExitFullscreen"]||document["exitFullscreen"]||(function(){});canvas.cancelFullScreen=canvas.cancelFullScreen.bind(document);if(Browser.lockPointer)canvas.requestPointerLock();Browser.isFullScreen=true;if(Browser.resizeCanvas)Browser.setFullScreenCanvasSize()}else{canvasContainer.parentNode.insertBefore(canvas,canvasContainer);canvasContainer.parentNode.removeChild(canvasContainer);if(Browser.resizeCanvas)Browser.setWindowedCanvasSize()}if(Module["onFullScreen"])Module["onFullScreen"](Browser.isFullScreen);Browser.updateCanvasDimensions(canvas)}if(!Browser.fullScreenHandlersInstalled){Browser.fullScreenHandlersInstalled=true;document.addEventListener("fullscreenchange",fullScreenChange,false);document.addEventListener("mozfullscreenchange",fullScreenChange,false);document.addEventListener("webkitfullscreenchange",fullScreenChange,false);document.addEventListener("MSFullscreenChange",fullScreenChange,false)}var canvasContainer=document.createElement("div");canvas.parentNode.insertBefore(canvasContainer,canvas);canvasContainer.appendChild(canvas);canvasContainer.requestFullScreen=canvasContainer["requestFullScreen"]||canvasContainer["mozRequestFullScreen"]||canvasContainer["msRequestFullscreen"]||(canvasContainer["webkitRequestFullScreen"]?(function(){canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"])}):null);if(vrDevice){canvasContainer.requestFullScreen({vrDisplay:vrDevice})}else{canvasContainer.requestFullScreen()}}),nextRAF:0,fakeRequestAnimationFrame:(function(func){var now=Date.now();if(Browser.nextRAF===0){Browser.nextRAF=now+1e3/60}else{while(now+2>=Browser.nextRAF){Browser.nextRAF+=1e3/60}}var delay=Math.max(Browser.nextRAF-now,0);setTimeout(func,delay)}),requestAnimationFrame:function requestAnimationFrame(func){if(typeof window==="undefined"){Browser.fakeRequestAnimationFrame(func)}else{if(!window.requestAnimationFrame){window.requestAnimationFrame=window["requestAnimationFrame"]||window["mozRequestAnimationFrame"]||window["webkitRequestAnimationFrame"]||window["msRequestAnimationFrame"]||window["oRequestAnimationFrame"]||Browser.fakeRequestAnimationFrame}window.requestAnimationFrame(func)}},safeCallback:(function(func){return(function(){if(!ABORT)return func.apply(null,arguments)})}),allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:(function(){Browser.allowAsyncCallbacks=false}),resumeAsyncCallbacks:(function(){Browser.allowAsyncCallbacks=true;if(Browser.queuedAsyncCallbacks.length>0){var callbacks=Browser.queuedAsyncCallbacks;Browser.queuedAsyncCallbacks=[];callbacks.forEach((function(func){func()}))}}),safeRequestAnimationFrame:(function(func){return Browser.requestAnimationFrame((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}else{Browser.queuedAsyncCallbacks.push(func)}}))}),safeSetTimeout:(function(func,timeout){Module["noExitRuntime"]=true;return setTimeout((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}else{Browser.queuedAsyncCallbacks.push(func)}}),timeout)}),safeSetInterval:(function(func,timeout){Module["noExitRuntime"]=true;return setInterval((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}}),timeout)}),getMimetype:(function(name){return{"jpg":"image/jpeg","jpeg":"image/jpeg","png":"image/png","bmp":"image/bmp","ogg":"audio/ogg","wav":"audio/wav","mp3":"audio/mpeg"}[name.substr(name.lastIndexOf(".")+1)]}),getUserMedia:(function(func){if(!window.getUserMedia){window.getUserMedia=navigator["getUserMedia"]||navigator["mozGetUserMedia"]}window.getUserMedia(func)}),getMovementX:(function(event){return event["movementX"]||event["mozMovementX"]||event["webkitMovementX"]||0}),getMovementY:(function(event){return event["movementY"]||event["mozMovementY"]||event["webkitMovementY"]||0}),getMouseWheelDelta:(function(event){var delta=0;switch(event.type){case"DOMMouseScroll":delta=event.detail;break;case"mousewheel":delta=event.wheelDelta;break;case"wheel":delta=event["deltaY"];break;default:throw"unrecognized mouse wheel event: "+event.type}return delta}),mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:(function(event){if(Browser.pointerLock){if(event.type!="mousemove"&&"mozMovementX"in event){Browser.mouseMovementX=Browser.mouseMovementY=0}else{Browser.mouseMovementX=Browser.getMovementX(event);Browser.mouseMovementY=Browser.getMovementY(event)}if(typeof SDL!="undefined"){Browser.mouseX=SDL.mouseX+Browser.mouseMovementX;Browser.mouseY=SDL.mouseY+Browser.mouseMovementY}else{Browser.mouseX+=Browser.mouseMovementX;Browser.mouseY+=Browser.mouseMovementY}}else{var rect=Module["canvas"].getBoundingClientRect();var cw=Module["canvas"].width;var ch=Module["canvas"].height;var scrollX=typeof window.scrollX!=="undefined"?window.scrollX:window.pageXOffset;var scrollY=typeof window.scrollY!=="undefined"?window.scrollY:window.pageYOffset;if(event.type==="touchstart"||event.type==="touchend"||event.type==="touchmove"){var touch=event.touch;if(touch===undefined){return}var adjustedX=touch.pageX-(scrollX+rect.left);var adjustedY=touch.pageY-(scrollY+rect.top);adjustedX=adjustedX*(cw/rect.width);adjustedY=adjustedY*(ch/rect.height);var coords={x:adjustedX,y:adjustedY};if(event.type==="touchstart"){Browser.lastTouches[touch.identifier]=coords;Browser.touches[touch.identifier]=coords}else if(event.type==="touchend"||event.type==="touchmove"){var last=Browser.touches[touch.identifier];if(!last)last=coords;Browser.lastTouches[touch.identifier]=last;Browser.touches[touch.identifier]=coords}return}var x=event.pageX-(scrollX+rect.left);var y=event.pageY-(scrollY+rect.top);x=x*(cw/rect.width);y=y*(ch/rect.height);Browser.mouseMovementX=x-Browser.mouseX;Browser.mouseMovementY=y-Browser.mouseY;Browser.mouseX=x;Browser.mouseY=y}}),xhrLoad:(function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response)}else{onerror()}};xhr.onerror=onerror;xhr.send(null)}),asyncLoad:(function(url,onload,onerror,noRunDep){Browser.xhrLoad(url,(function(arrayBuffer){assert(arrayBuffer,'Loading data file "'+url+'" failed (no arrayBuffer).');onload(new Uint8Array(arrayBuffer));if(!noRunDep)removeRunDependency("al "+url)}),(function(event){if(onerror){onerror()}else{throw'Loading data file "'+url+'" failed.'}}));if(!noRunDep)addRunDependency("al "+url)}),resizeListeners:[],updateResizeListeners:(function(){var canvas=Module["canvas"];Browser.resizeListeners.forEach((function(listener){listener(canvas.width,canvas.height)}))}),setCanvasSize:(function(width,height,noUpdates){var canvas=Module["canvas"];Browser.updateCanvasDimensions(canvas,width,height);if(!noUpdates)Browser.updateResizeListeners()}),windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:(function(){if(typeof SDL!="undefined"){var flags=HEAPU32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2];flags=flags|8388608;HEAP32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2]=flags}Browser.updateResizeListeners()}),setWindowedCanvasSize:(function(){if(typeof SDL!="undefined"){var flags=HEAPU32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2];flags=flags&~8388608;HEAP32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2]=flags}Browser.updateResizeListeners()}),updateCanvasDimensions:(function(canvas,wNative,hNative){if(wNative&&hNative){canvas.widthNative=wNative;canvas.heightNative=hNative}else{wNative=canvas.widthNative;hNative=canvas.heightNative}var w=wNative;var h=hNative;if(Module["forcedAspectRatio"]&&Module["forcedAspectRatio"]>0){if(w/h<Module["forcedAspectRatio"]){w=Math.round(h*Module["forcedAspectRatio"])}else{h=Math.round(w/Module["forcedAspectRatio"])}}if((document["webkitFullScreenElement"]||document["webkitFullscreenElement"]||document["mozFullScreenElement"]||document["mozFullscreenElement"]||document["fullScreenElement"]||document["fullscreenElement"]||document["msFullScreenElement"]||document["msFullscreenElement"]||document["webkitCurrentFullScreenElement"])===canvas.parentNode&&typeof screen!="undefined"){var factor=Math.min(screen.width/w,screen.height/h);w=Math.round(w*factor);h=Math.round(h*factor)}if(Browser.resizeCanvas){if(canvas.width!=w)canvas.width=w;if(canvas.height!=h)canvas.height=h;if(typeof canvas.style!="undefined"){canvas.style.removeProperty("width");canvas.style.removeProperty("height")}}else{if(canvas.width!=wNative)canvas.width=wNative;if(canvas.height!=hNative)canvas.height=hNative;if(typeof canvas.style!="undefined"){if(w!=wNative||h!=hNative){canvas.style.setProperty("width",w+"px","important");canvas.style.setProperty("height",h+"px","important")}else{canvas.style.removeProperty("width");canvas.style.removeProperty("height")}}}}),wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:(function(){var handle=Browser.nextWgetRequestHandle;Browser.nextWgetRequestHandle++;return handle})};var SYSCALLS={varargs:0,get:(function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret}),getStr:(function(){var ret=Pointer_stringify(SYSCALLS.get());return ret}),get64:(function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low}),getZero:(function(){assert(SYSCALLS.get()===0)})};function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___setErrNo(value){if(Module["___errno_location"])HEAP32[Module["___errno_location"]()>>2]=value;return value}var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name){switch(name){case 30:return PAGE_SIZE;case 85:return totalMemory/PAGE_SIZE;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 79:return 0;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:{if(typeof navigator==="object")return navigator["hardwareConcurrency"]||1;return 1}}___setErrNo(ERRNO_CODES.EINVAL);return-1}Module["_bitshift64Lshr"]=_bitshift64Lshr;var _BDtoIHigh=true;function _pthread_cleanup_push(routine,arg){__ATEXIT__.push((function(){Runtime.dynCall("vi",routine,[arg])}));_pthread_cleanup_push.level=__ATEXIT__.length}function _pthread_cleanup_pop(){assert(_pthread_cleanup_push.level==__ATEXIT__.length,"cannot pop if something else added meanwhile!");__ATEXIT__.pop();_pthread_cleanup_push.level=__ATEXIT__.length}function ___syscall5(which,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(),flags=SYSCALLS.get(),mode=SYSCALLS.get();var stream=FS.open(pathname,flags,mode);return stream.fd}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}Module["_memcpy"]=_memcpy;function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}var _llvm_pow_f64=Math_pow;function _sbrk(bytes){var self=_sbrk;if(!self.called){DYNAMICTOP=alignMemoryPage(DYNAMICTOP);self.called=true;assert(Runtime.dynamicAlloc);self.alloc=Runtime.dynamicAlloc;Runtime.dynamicAlloc=(function(){abort("cannot dynamically allocate, sbrk now has control")})}var ret=DYNAMICTOP;if(bytes!=0){var success=self.alloc(bytes);if(!success)return-1>>>0}return ret}var _BItoD=true;function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret}return ret}function _pthread_self(){return 0}function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;assert(offset_high===0);FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.get(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();var ret=0;if(!___syscall146.buffer)___syscall146.buffer=[];var buffer=___syscall146.buffer;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){var curr=HEAPU8[ptr+j];if(curr===0||curr===10){Module["print"](UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}}ret+=len}return ret}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall221(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),cmd=SYSCALLS.get();switch(cmd){case 0:{var arg=SYSCALLS.get();if(arg<0){return-ERRNO_CODES.EINVAL}var newStream;newStream=FS.open(stream.path,stream.flags,0,arg);return newStream.fd};case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=SYSCALLS.get();stream.flags|=arg;return 0};case 12:case 12:{var arg=SYSCALLS.get();var offset=0;HEAP16[arg+offset>>1]=2;return 0};case 13:case 14:case 13:case 14:return 0;case 16:case 8:return-ERRNO_CODES.EINVAL;case 9:___setErrNo(ERRNO_CODES.EINVAL);return-1;default:{return-ERRNO_CODES.EINVAL}}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall145(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();return SYSCALLS.doReadv(stream,iov,iovcnt)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["requestFullScreen"]=function Module_requestFullScreen(lockPointer,resizeCanvas,vrDevice){Browser.requestFullScreen(lockPointer,resizeCanvas,vrDevice)};Module["requestAnimationFrame"]=function Module_requestAnimationFrame(func){Browser.requestAnimationFrame(func)};Module["setCanvasSize"]=function Module_setCanvasSize(width,height,noUpdates){Browser.setCanvasSize(width,height,noUpdates)};Module["pauseMainLoop"]=function Module_pauseMainLoop(){Browser.mainLoop.pause()};Module["resumeMainLoop"]=function Module_resumeMainLoop(){Browser.mainLoop.resume()};Module["getUserMedia"]=function Module_getUserMedia(){Browser.getUserMedia()};Module["createContext"]=function Module_createContext(canvas,useWebGL,setInModule,webGLContextAttributes){return Browser.createContext(canvas,useWebGL,setInModule,webGLContextAttributes)};STACK_BASE=STACKTOP=Runtime.alignMemory(STATICTOP);staticSealed=true;STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=DYNAMICTOP=Runtime.alignMemory(STACK_MAX);assert(DYNAMIC_BASE<TOTAL_MEMORY,"TOTAL_MEMORY not big enough for stack");var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],"i8",ALLOC_DYNAMIC);function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7){try{return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiii(index,a1,a2,a3){try{return Module["dynCall_iiii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_di(index,a1){try{return Module["dynCall_di"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vi(index,a1){try{Module["dynCall_vi"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vii(index,a1,a2){try{Module["dynCall_vii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6){try{return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_ii(index,a1){try{return Module["dynCall_ii"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viii(index,a1,a2,a3){try{Module["dynCall_viii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){try{return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiii(index,a1,a2,a3,a4){try{return Module["dynCall_iiiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iii(index,a1,a2){try{return Module["dynCall_iii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiii(index,a1,a2,a3,a4,a5){try{return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiii(index,a1,a2,a3,a4){try{Module["dynCall_viiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}Module.asmGlobalArg={"Math":Math,"Int8Array":Int8Array,"Int16Array":Int16Array,"Int32Array":Int32Array,"Uint8Array":Uint8Array,"Uint16Array":Uint16Array,"Uint32Array":Uint32Array,"Float32Array":Float32Array,"Float64Array":Float64Array,"NaN":NaN,"Infinity":Infinity,"byteLength":byteLength};Module.asmLibraryArg={"abort":abort,"assert":assert,"invoke_iiiiiiii":invoke_iiiiiiii,"invoke_iiii":invoke_iiii,"invoke_di":invoke_di,"invoke_vi":invoke_vi,"invoke_vii":invoke_vii,"invoke_iiiiiii":invoke_iiiiiii,"invoke_ii":invoke_ii,"invoke_viii":invoke_viii,"invoke_iiiiiiiiiiii":invoke_iiiiiiiiiiii,"invoke_iiiii":invoke_iiiii,"invoke_iii":invoke_iii,"invoke_iiiiii":invoke_iiiiii,"invoke_viiii":invoke_viiii,"_pthread_cleanup_pop":_pthread_cleanup_pop,"___syscall221":___syscall221,"_llvm_pow_f64":_llvm_pow_f64,"_abort":_abort,"_pthread_cleanup_push":_pthread_cleanup_push,"_ceilf":_ceilf,"_emscripten_set_main_loop_timing":_emscripten_set_main_loop_timing,"_sbrk":_sbrk,"_emscripten_memcpy_big":_emscripten_memcpy_big,"_sysconf":_sysconf,"___setErrNo":___setErrNo,"_floor":_floor,"_pthread_self":_pthread_self,"_sqrt":_sqrt,"_floorf":_floorf,"___syscall54":___syscall54,"___unlock":___unlock,"_emscripten_set_main_loop":_emscripten_set_main_loop,"___lock":___lock,"___syscall6":___syscall6,"___syscall5":___syscall5,"_time":_time,"___syscall140":___syscall140,"___syscall145":___syscall145,"___syscall146":___syscall146,"STACKTOP":STACKTOP,"STACK_MAX":STACK_MAX,"tempDoublePtr":tempDoublePtr,"ABORT":ABORT,"cttz_i8":cttz_i8};// EMSCRIPTEN_START_ASM
var asm=(function(global,env,buffer) {
"use asm";var a=global.Int8Array;var b=global.Int16Array;var c=global.Int32Array;var d=global.Uint8Array;var e=global.Uint16Array;var f=global.Uint32Array;var g=global.Float32Array;var h=global.Float64Array;var i=new a(buffer);var j=new b(buffer);var k=new c(buffer);var l=new d(buffer);var m=new e(buffer);var n=new f(buffer);var o=new g(buffer);var p=new h(buffer);var q=global.byteLength;var r=env.STACKTOP|0;var s=env.STACK_MAX|0;var t=env.tempDoublePtr|0;var u=env.ABORT|0;var v=env.cttz_i8|0;var w=0;var x=0;var y=0;var z=0;var A=global.NaN,B=global.Infinity;var C=0,D=0,E=0,F=0,G=0.0,H=0,I=0,J=0,K=0.0;var L=0;var M=0;var N=0;var O=0;var P=0;var Q=0;var R=0;var S=0;var T=0;var U=0;var V=global.Math.floor;var W=global.Math.abs;var X=global.Math.sqrt;var Y=global.Math.pow;var Z=global.Math.cos;var _=global.Math.sin;var $=global.Math.tan;var aa=global.Math.acos;var ba=global.Math.asin;var ca=global.Math.atan;var da=global.Math.atan2;var ea=global.Math.exp;var fa=global.Math.log;var ga=global.Math.ceil;var ha=global.Math.imul;var ia=global.Math.min;var ja=global.Math.clz32;var ka=env.abort;var la=env.assert;var ma=env.invoke_iiiiiiii;var na=env.invoke_iiii;var oa=env.invoke_di;var pa=env.invoke_vi;var qa=env.invoke_vii;var ra=env.invoke_iiiiiii;var sa=env.invoke_ii;var ta=env.invoke_viii;var ua=env.invoke_iiiiiiiiiiii;var va=env.invoke_iiiii;var wa=env.invoke_iii;var xa=env.invoke_iiiiii;var ya=env.invoke_viiii;var za=env._pthread_cleanup_pop;var Aa=env.___syscall221;var Ba=env._llvm_pow_f64;var Ca=env._abort;var Da=env._pthread_cleanup_push;var Ea=env._ceilf;var Fa=env._emscripten_set_main_loop_timing;var Ga=env._sbrk;var Ha=env._emscripten_memcpy_big;var Ia=env._sysconf;var Ja=env.___setErrNo;var Ka=env._floor;var La=env._pthread_self;var Ma=env._sqrt;var Na=env._floorf;var Oa=env.___syscall54;var Pa=env.___unlock;var Qa=env._emscripten_set_main_loop;var Ra=env.___lock;var Sa=env.___syscall6;var Ta=env.___syscall5;var Ua=env._time;var Va=env.___syscall140;var Wa=env.___syscall145;var Xa=env.___syscall146;var Ya=0.0;function Za(newBuffer){if(q(newBuffer)&16777215||q(newBuffer)<=16777215||q(newBuffer)>2147483648)return false;i=new a(newBuffer);j=new b(newBuffer);k=new c(newBuffer);l=new d(newBuffer);m=new e(newBuffer);n=new f(newBuffer);o=new g(newBuffer);p=new h(newBuffer);buffer=newBuffer;return true}
// EMSCRIPTEN_START_FUNCS
function pe(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0;l=r;r=r+48|0;e=l+32|0;j=l+28|0;k[e>>2]=c;if((k[a+8>>2]|0)==16)i=(k[a+164>>2]|0)+((k[a+200>>2]|0)*5640|0)|0;else i=k[a+12>>2]|0;f=(k[a+80>>2]|0)+16|0;g=(k[f>>2]|0)>>>0<257?1:2;h=g+1|0;if(h>>>0>c>>>0){cc(d,1,14604,l)|0;d=0;r=l;return d|0}k[e>>2]=c-h;Ab(b,j,g);c=k[j>>2]|0;if(c>>>0>=(k[f>>2]|0)>>>0){cc(d,1,14630,l+8|0)|0;d=0;r=l;return d|0}Ab(b+g|0,(k[i+5584>>2]|0)+(c*1080|0)|0,1);if(!(Pe(a,k[j>>2]|0,b+h|0,e,d)|0)){cc(d,1,14604,l+16|0)|0;d=0;r=l;return d|0}if(!(k[e>>2]|0)){d=1;r=l;return d|0}cc(d,1,14604,l+24|0)|0;d=0;r=l;return d|0}function qe(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=r;r=r+32|0;h=i+8|0;e=i+20|0;g=k[(k[a+80>>2]|0)+16>>2]|0;f=g>>>0<257?1:2;if((f+2|0)!=(c|0)){cc(d,1,14521,i)|0;h=0;r=i;return h|0}if((k[a+8>>2]|0)==16)a=(k[a+164>>2]|0)+((k[a+200>>2]|0)*5640|0)|0;else a=k[a+12>>2]|0;Ab(b,e,f);Ab(b+f|0,i+16|0,1);c=k[e>>2]|0;if(c>>>0<g>>>0){Ab(b+(f+1)|0,(k[a+5584>>2]|0)+(c*1080|0)+808|0,1);h=1;r=i;return h|0}else{k[h>>2]=c;k[h+4>>2]=g;cc(d,1,14547,h)|0;h=0;r=i;return h|0}return 0}function re(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;g=r;r=r+16|0;e=g+12|0;k[e>>2]=c;if(!(Oe(a,0,b,e,d)|0)){cc(d,1,14495,g)|0;f=0;r=g;return f|0}if(k[e>>2]|0){cc(d,1,14495,g+8|0)|0;f=0;r=g;return f|0}if((k[a+8>>2]|0)==16)e=(k[a+164>>2]|0)+((k[a+200>>2]|0)*5640|0)|0;else e=k[a+12>>2]|0;e=k[e+5584>>2]|0;c=a+80|0;if((k[(k[c>>2]|0)+16>>2]|0)>>>0<=1){f=1;r=g;return f|0}d=e+24|0;a=e+804|0;f=e+28|0;b=1;while(1){k[e+1104>>2]=k[d>>2];k[e+1884>>2]=k[a>>2];cj(e+1108|0,f|0,776)|0;b=b+1|0;if(b>>>0>=(k[(k[c>>2]|0)+16>>2]|0)>>>0){e=1;break}else e=e+1080|0}r=g;return e|0}function se(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0;n=r;r=r+48|0;m=n+32|0;l=n+24|0;j=n+16|0;f=n+8|0;e=n;i=n+40|0;g=n+36|0;k[i>>2]=c;h=a+80|0;do if((k[(k[h>>2]|0)+16>>2]|0)>>>0<257){if(c){Ab(b,g,1);f=b+1|0;b=c+-1|0;break}cc(d,1,14148,e)|0;m=0;r=n;return m|0}else{if(c>>>0>=2){Ab(b,g,2);f=b+2|0;b=c+-2|0;break}cc(d,1,14148,f)|0;m=0;r=n;return m|0}while(0);k[i>>2]=b;e=k[g>>2]|0;b=k[(k[h>>2]|0)+16>>2]|0;if(e>>>0>=b>>>0){k[j>>2]=e;k[j+4>>2]=b;cc(d,1,14174,j)|0;m=0;r=n;return m|0}if(!(Oe(a,e,f,i,d)|0)){cc(d,1,14148,l)|0;m=0;r=n;return m|0}if(!(k[i>>2]|0)){m=1;r=n;return m|0}cc(d,1,14148,m)|0;m=0;r=n;return m|0}function te(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0;t=r;r=r+16|0;f=t+8|0;s=t+12|0;q=k[(k[a+80>>2]|0)+16>>2]|0;p=q>>>0<257?1:2;o=(p<<1)+5|0;e=(c>>>0)/(o>>>0)|0;if((e|0)==0|((c>>>0)%(o>>>0)|0|0)!=0){cc(d,1,14104,t)|0;s=0;r=t;return s|0}if((k[a+8>>2]|0)==16)o=(k[a+164>>2]|0)+((k[a+200>>2]|0)*5640|0)|0;else o=k[a+12>>2]|0;c=o+5636|0;a=i[c>>0]|0;if(!(a&4))n=0;else n=(k[o+420>>2]|0)+1|0;m=n+e|0;if(m>>>0>31){k[f>>2]=m;cc(d,1,14130,f)|0;s=0;r=t;return s|0}i[c>>0]=a|4;if(n>>>0<m>>>0){d=p+1|0;l=o+8|0;f=p+3|0;g=p|4;h=g+p|0;j=h+1|0;a=b;e=n;c=o+424+(n*148|0)|0;while(1){Ab(a,c,1);Ab(a+1|0,c+4|0,p);b=c+8|0;Ab(a+d|0,b,2);u=k[b>>2]|0;n=k[l>>2]|0;k[b>>2]=u>>>0<n>>>0?u:n;Ab(a+f|0,c+12|0,1);b=c+16|0;Ab(a+g|0,b,p);Ab(a+h|0,s,1);k[c+36>>2]=k[s>>2];n=k[b>>2]|0;k[b>>2]=n>>>0<q>>>0?n:q;e=e+1|0;if(e>>>0>=m>>>0)break;else{a=a+j|0;c=c+148|0}}}k[o+420>>2]=m+-1;u=1;r=t;return u|0}function ue(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,M=0;M=r;r=r+144|0;K=M+128|0;G=M+120|0;F=M+112|0;E=M+104|0;D=M+96|0;C=M+88|0;A=M+72|0;t=M+64|0;q=M+56|0;p=M+48|0;o=M+40|0;s=M+32|0;h=M+24|0;f=M+16|0;e=M+136|0;w=M+132|0;I=k[a+80>>2]|0;J=a+88|0;if(c>>>0<36){cc(d,1,13459,M)|0;d=0;r=M;return d|0}H=c+-36|0;n=(H>>>0)/3|0;if((H>>>0)%3|0){cc(d,1,13459,M+8|0)|0;d=0;r=M;return d|0}Ab(b,e,2);j[J>>1]=k[e>>2];x=I+8|0;Ab(b+2|0,x,4);B=I+12|0;Ab(b+6|0,B,4);Ab(b+10|0,I,4);m=I+4|0;Ab(b+14|0,m,4);v=a+100|0;Ab(b+18|0,v,4);z=a+104|0;Ab(b+22|0,z,4);u=a+92|0;Ab(b+26|0,u,4);y=a+96|0;Ab(b+30|0,y,4);Ab(b+34|0,e,2);g=b+36|0;c=k[e>>2]|0;if(c>>>0>=16385){k[f>>2]=c;cc(d,1,13487,f)|0;d=0;r=M;return d|0}c=c&65535;H=I+16|0;k[H>>2]=c;if((c|0)!=(n|0)){k[h>>2]=c;k[h+4>>2]=n;cc(d,1,13548,h)|0;d=0;r=M;return d|0}h=k[I>>2]|0;l=k[x>>2]|0;if(l>>>0>h>>>0){c=k[m>>2]|0;b=k[B>>2]|0;if(c>>>0<b>>>0){e=k[v>>2]|0;f=k[z>>2]|0;if(!(ha(f,e)|0)){k[o>>2]=e;k[o+4>>2]=f;cc(d,1,13724,o)|0;d=0;r=M;return d|0}s=hj(b|0,0,l|0,0)|0;if(!((s|0)==(ha(b,l)|0)&(L|0)==0)){k[p>>2]=l;k[p+4>>2]=b;cc(d,1,13785,p)|0;d=0;r=M;return d|0}l=k[u>>2]|0;o=aj(l|0,0,e|0,0)|0;p=L;m=k[y>>2]|0;s=aj(m|0,0,f|0,0)|0;if(l>>>0<=h>>>0?m>>>0<=c>>>0&(o|0-p)>>>0>h>>>0&(s|0-L)>>>0>c>>>0:0){b=_c(n,52)|0;n=I+24|0;k[n>>2]=b;if(!b){k[H>>2]=0;cc(d,1,13871,t)|0;d=0;r=M;return d|0}a:do if(k[H>>2]|0){h=a+168|0;c=0;f=b;while(1){Ab(g,w,1);k[f+24>>2]=(k[w>>2]&127)+1;k[f+32>>2]=(k[w>>2]|0)>>>7;Ab(g+1|0,w,1);k[f>>2]=k[w>>2];Ab(g+2|0,w,1);e=k[w>>2]|0;k[f+4>>2]=e;b=k[f>>2]|0;if((e+-1|0)>>>0>254|(b+-1|0)>>>0>254)break;k[f+36>>2]=0;k[f+40>>2]=k[h>>2];c=c+1|0;if(c>>>0>=(k[H>>2]|0)>>>0)break a;else{g=g+3|0;f=f+52|0}}k[A>>2]=c;k[A+4>>2]=b;k[A+8>>2]=e;cc(d,1,13919,A)|0;d=0;r=M;return d|0}while(0);l=k[u>>2]|0;h=k[v>>2]|0;g=((k[x>>2]|0)+-1-l+h|0)/(h|0)|0;k[a+112>>2]=g;f=k[y>>2]|0;e=k[z>>2]|0;b=((k[B>>2]|0)+-1-f+e|0)/(e|0)|0;k[a+116>>2]=b;if(!((b|0)==0|(g|0)==0)?g>>>0<=(65535/(b>>>0)|0)>>>0:0){m=ha(g,b)|0;c=a+28|0;if(!(i[a+76>>0]&2)){k[c>>2]=0;k[a+32>>2]=0;k[a+36>>2]=g;k[a+40>>2]=b}else{k[c>>2]=(((k[c>>2]|0)-l|0)>>>0)/(h>>>0)|0;C=a+32|0;k[C>>2]=(((k[C>>2]|0)-f|0)>>>0)/(e>>>0)|0;C=a+36|0;k[C>>2]=((k[C>>2]|0)+-1-l+h|0)/(h|0)|0;C=a+40|0;k[C>>2]=((k[C>>2]|0)+-1-f+e|0)/(e|0)|0}C=_c(m,5640)|0;g=a+164|0;k[g>>2]=C;if(!C){cc(d,1,13871,D)|0;d=0;r=M;return d|0}D=_c(k[H>>2]|0,1080)|0;b=a+12|0;k[(k[b>>2]|0)+5584>>2]=D;if(!D){cc(d,1,13871,E)|0;d=0;r=M;return d|0}E=_c(10,20)|0;c=k[b>>2]|0;k[c+5612>>2]=E;if(!E){cc(d,1,13871,F)|0;d=0;r=M;return d|0}k[c+5620>>2]=10;F=_c(10,20)|0;c=k[b>>2]|0;k[c+5624>>2]=F;if(!F){cc(d,1,13871,G)|0;d=0;r=M;return d|0}k[c+5632>>2]=10;f=k[H>>2]|0;if(f){e=k[n>>2]|0;c=c+5584|0;b=0;do{if(!(k[e+(b*52|0)+32>>2]|0))k[(k[c>>2]|0)+(b*1080|0)+1076>>2]=1<<(k[e+(b*52|0)+24>>2]|0)+-1;b=b+1|0}while(b>>>0<f>>>0)}b:do if(m){c=k[g>>2]|0;G=_c(f,1080)|0;k[c+5584>>2]=G;if(G){b=0;while(1){b=b+1|0;if(b>>>0>=m>>>0)break b;G=_c(k[H>>2]|0,1080)|0;k[c+11224>>2]=G;if(!G)break;else c=c+5640|0}}cc(d,1,13871,K)|0;d=0;r=M;return d|0}while(0);k[a+8>>2]=4;ic(I,J);d=1;r=M;return d|0}k[C>>2]=g;k[C+4>>2]=b;cc(d,1,14021,C)|0;d=0;r=M;return d|0}cc(d,1,13827,q)|0;d=0;r=M;return d|0}}else{b=k[B>>2]|0;c=k[m>>2]|0}k[s>>2]=l-h;k[s+4>>2]=b-c;cc(d,1,13662,s)|0;d=0;r=M;return d|0}function ve(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=r;r=r+32|0;a=e+12|0;if(c>>>0<2){cc(d,1,13433,e)|0;d=0;r=e;return d|0}Ab(b,e+16|0,1);Ab(b+1|0,a,1);b=k[a>>2]|0;if(!(((c+-2|0)>>>0)%(((b>>>5&2)+2+(b>>>4&3)|0)>>>0)|0)){d=1;r=e;return d|0}cc(d,1,13433,e+8|0)|0;d=0;r=e;return d|0}function we(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=r;r=r+16|0;if(!c){cc(d,1,13407,a)|0;b=0}else b=1;r=a;return b|0}function xe(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=r;r=r+32|0;h=i+8|0;g=i+12|0;if(!c){cc(d,1,13381,i)|0;d=0;r=i;return d|0}Ab(b,i+16|0,1);e=c+-1|0;if(!e){d=1;r=i;return d|0}else{f=0;a=0}do{b=b+1|0;Ab(b,g,1);c=k[g>>2]|0;if(!(c&128))a=0;else a=(c&127|a)<<7;f=f+1|0}while((f|0)!=(e|0));if(!a){d=1;r=i;return d|0}cc(d,1,13381,h)|0;d=0;r=i;return d|0}function ye(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;o=r;r=r+48|0;n=o+32|0;j=o+24|0;f=o+16|0;e=o+8|0;m=o+36|0;if(c>>>0<2){cc(d,1,13295,o)|0;n=0;r=o;return n|0}l=a+184|0;i[l>>0]=i[l>>0]|1;Ab(b,m,1);l=b+1|0;h=c+-1|0;g=a+124|0;c=k[g>>2]|0;do if(c){e=a+120|0;b=k[m>>2]|0;if((k[e>>2]|0)>>>0<=b>>>0){a=b+1|0;b=bd(c,a<<3)|0;if(b){k[g>>2]=b;c=k[e>>2]|0;_i(b+(c<<3)|0,0,a-c<<3|0)|0;k[e>>2]=a;c=k[g>>2]|0;break}cc(d,1,13321,f)|0;n=0;r=o;return n|0}}else{b=(k[m>>2]|0)+1|0;c=_c(b,8)|0;k[g>>2]=c;if(c){k[a+120>>2]=b;break}cc(d,1,13321,e)|0;n=0;r=o;return n|0}while(0);b=k[m>>2]|0;if(k[c+(b<<3)>>2]|0){k[j>>2]=b;cc(d,1,13359,j)|0;n=0;r=o;return n|0}j=Zc(h)|0;c=k[m>>2]|0;b=k[g>>2]|0;k[b+(c<<3)>>2]=j;if(!j){cc(d,1,13321,n)|0;n=0;r=o;return n|0}else{k[b+(c<<3)+4>>2]=h;cj(k[b+(k[m>>2]<<3)>>2]|0,l|0,h|0)|0;n=1;r=o;return n|0}return 0}function ze(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;q=r;r=r+48|0;p=q+40|0;n=q+32|0;h=q+24|0;g=q+16|0;o=q+44|0;if(c>>>0<2){cc(d,1,13146,q)|0;p=0;r=q;return p|0}if(i[a+184>>0]&1){cc(d,1,13172,q+8|0)|0;p=0;r=q;return p|0}f=k[a+200>>2]|0;e=k[a+164>>2]|0;m=e+(f*5640|0)+5636|0;i[m>>0]=i[m>>0]|2;Ab(b,o,1);m=b+1|0;l=c+-1|0;j=e+(f*5640|0)+5164|0;b=k[j>>2]|0;do if(b){e=e+(f*5640|0)+5160|0;a=k[o>>2]|0;if((k[e>>2]|0)>>>0<=a>>>0){c=a+1|0;a=bd(b,c<<3)|0;if(a){k[j>>2]=a;b=k[e>>2]|0;_i(a+(b<<3)|0,0,c-b<<3|0)|0;k[e>>2]=c;b=k[j>>2]|0;break}cc(d,1,8794,h)|0;p=0;r=q;return p|0}}else{a=(k[o>>2]|0)+1|0;b=_c(a,8)|0;k[j>>2]=b;if(b){k[e+(f*5640|0)+5160>>2]=a;break}cc(d,1,8794,g)|0;p=0;r=q;return p|0}while(0);a=k[o>>2]|0;if(k[b+(a<<3)>>2]|0){k[n>>2]=a;cc(d,1,13273,n)|0;p=0;r=q;return p|0}n=Zc(l)|0;b=k[o>>2]|0;a=k[j>>2]|0;k[a+(b<<3)>>2]=n;if(!n){cc(d,1,8794,p)|0;p=0;r=q;return p|0}else{k[a+(b<<3)+4>>2]=l;cj(k[a+(k[o>>2]<<3)>>2]|0,m|0,l|0)|0;p=1;r=q;return p|0}return 0}function Ae(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;b=r;r=r+16|0;if((k[(k[a+80>>2]|0)+16>>2]<<2|0)==(c|0)){d=1;r=b;return d|0}cc(d,1,13120,b)|0;d=0;r=b;return d|0}function Be(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return 1}function Ce(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0;s=r;r=r+48|0;q=s+40|0;p=s+32|0;j=s+24|0;o=s+44|0;if((k[a+8>>2]|0)==16)h=(k[a+164>>2]|0)+((k[a+200>>2]|0)*5640|0)|0;else h=k[a+12>>2]|0;if(c>>>0<2){cc(d,1,12952,s)|0;q=0;r=s;return q|0}Ab(b,o,2);if(k[o>>2]|0){cc(d,2,12978,s+8|0)|0;q=1;r=s;return q|0}if(c>>>0<7){cc(d,1,12952,s+16|0)|0;q=0;r=s;return q|0}Ab(b+2|0,o,2);m=b+4|0;n=k[o>>2]&255;i=h+5612|0;e=k[i>>2]|0;l=h+5616|0;a=k[l>>2]|0;a:do if(!a){f=0;g=e}else{f=0;g=e;do{if((k[g+8>>2]|0)==(n|0))break a;g=g+20|0;f=f+1|0}while(f>>>0<a>>>0)}while(0);if((f|0)==(a|0)){f=h+5620|0;do if((a|0)==(k[f>>2]|0)){a=a+10|0;k[f>>2]=a;a=bd(e,a*20|0)|0;if(a){k[i>>2]=a;e=k[l>>2]|0;_i(a+(e*20|0)|0,0,((k[f>>2]|0)-e|0)*20|0)|0;e=k[i>>2]|0;a=k[l>>2]|0;break}cd(k[i>>2]|0);k[i>>2]=0;k[f>>2]=0;k[l>>2]=0;cc(d,1,13038,j)|0;q=0;r=s;return q|0}while(0);k[l>>2]=a+1;g=e+(a*20|0)|0}f=g+12|0;a=k[f>>2]|0;if(a){cd(a);k[f>>2]=0}k[g+8>>2]=n;n=k[o>>2]|0;k[g+4>>2]=n>>>8&3;k[g>>2]=n>>>10&3;Ab(m,o,2);if(k[o>>2]|0){cc(d,2,13076,p)|0;q=1;r=s;return q|0}a=c+-6|0;e=Zc(a)|0;k[f>>2]=e;if(!e){cc(d,1,12952,q)|0;q=0;r=s;return q|0}else{cj(e|0,b+6|0,a|0)|0;k[g+16>>2]=a;q=1;r=s;return q|0}return 0}function De(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;h=r;r=r+32|0;e=h+16|0;g=h+12|0;a=a+80|0;f=k[(k[a>>2]|0)+16>>2]|0;if((f+2|0)!=(c|0)){cc(d,1,12926,h)|0;g=0;r=h;return g|0}Ab(b,e,2);if((k[e>>2]|0)!=(f|0)){cc(d,1,12926,h+8|0)|0;g=0;r=h;return g|0}if(!f){g=1;r=h;return g|0}e=b+2|0;b=0;a=k[(k[a>>2]|0)+24>>2]|0;while(1){Ab(e,g,1);k[a+32>>2]=(k[g>>2]|0)>>>7&1;k[a+24>>2]=(k[g>>2]&127)+1;b=b+1|0;if((b|0)==(f|0)){a=1;break}else{e=e+1|0;a=a+52|0}}r=h;return a|0}function Ee(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;J=r;r=r+144|0;I=J+120|0;H=J+112|0;G=J+104|0;F=J+96|0;E=J+88|0;D=J+80|0;C=J+72|0;B=J+64|0;A=J+56|0;z=J+48|0;o=J+40|0;n=J+32|0;l=J+24|0;x=J+136|0;u=J+132|0;v=J+128|0;w=J+124|0;if((k[a+8>>2]|0)==16)p=(k[a+164>>2]|0)+((k[a+200>>2]|0)*5640|0)|0;else p=k[a+12>>2]|0;if(c>>>0<2){cc(d,1,12586,J)|0;I=0;r=J;return I|0}Ab(b,x,2);if(k[x>>2]|0){cc(d,2,12612,J+8|0)|0;I=1;r=J;return I|0}if(c>>>0<7){cc(d,1,12586,J+16|0)|0;I=0;r=J;return I|0}Ab(b+2|0,u,1);m=b+3|0;j=p+5624|0;e=k[j>>2]|0;y=p+5628|0;a=k[y>>2]|0;a:do if(!a){g=0;f=e}else{h=k[u>>2]|0;g=0;f=e;do{if((k[f>>2]|0)==(h|0))break a;f=f+20|0;g=g+1|0}while(g>>>0<a>>>0)}while(0);if((g|0)==(a|0)){f=p+5632|0;do if((a|0)==(k[f>>2]|0)){a=a+10|0;k[f>>2]=a;a=bd(e,a*20|0)|0;if(a){k[j>>2]=a;e=k[y>>2]|0;_i(a+(e*20|0)|0,0,((k[f>>2]|0)-e|0)*20|0)|0;e=k[j>>2]|0;a=k[y>>2]|0;break}cd(k[j>>2]|0);k[j>>2]=0;k[f>>2]=0;k[y>>2]=0;cc(d,1,12658,l)|0;I=0;r=J;return I|0}while(0);f=e+(a*20|0)|0}k[f>>2]=k[u>>2];Ab(m,x,2);if(k[x>>2]|0){cc(d,2,12612,n)|0;I=1;r=J;return I|0}Ab(b+5|0,v,2);e=k[v>>2]|0;if(e>>>0>1){cc(d,2,12696,o)|0;I=1;r=J;return I|0}a=c+-7|0;b:do if(e){q=f+4|0;s=f+16|0;t=f+8|0;c=f+12|0;o=p+5612|0;n=p+5616|0;l=b+7|0;m=0;c:while(1){if(a>>>0<3){e=27;break}Ab(l,x,1);if((k[x>>2]|0)!=1){e=29;break}Ab(l+1|0,w,2);e=a+-3|0;g=k[w>>2]|0;h=(g>>>15)+1|0;g=g&32767;k[q>>2]=g;f=(ha(h,g)|0)+2|0;if(e>>>0<f>>>0){e=31;break}a=l+3|0;j=e-f|0;if(g){e=0;do{Ab(a,x,h);if((k[x>>2]|0)!=(e|0)){e=34;break c}a=a+h|0;e=e+1|0}while(e>>>0<(k[q>>2]|0)>>>0)}Ab(a,w,2);e=a+2|0;f=k[w>>2]|0;g=(f>>>15)+1|0;f=f&32767;k[w>>2]=f;if((f|0)!=(k[q>>2]|0)){e=37;break}a=(ha(g,f)|0)+3|0;if(j>>>0<a>>>0){e=39;break}a=j-a|0;if(f){f=0;do{Ab(e,x,g);if((k[x>>2]|0)!=(f|0)){e=42;break c}e=e+g|0;f=f+1|0}while(f>>>0<(k[q>>2]|0)>>>0)}Ab(e,x,3);l=e+3|0;i[s>>0]=((k[x>>2]|0)>>>16^1)&1|i[s>>0]&-2;k[t>>2]=0;k[c>>2]=0;j=k[x>>2]|0;f=j&255;k[u>>2]=f;if(f){g=k[n>>2]|0;if(!g){e=50;break}h=0;e=k[o>>2]|0;while(1){if((k[e+8>>2]|0)==(f|0))break;h=h+1|0;if(h>>>0>=g>>>0){e=50;break c}else e=e+20|0}k[t>>2]=e}f=j>>>8&255;k[u>>2]=f;if(f){g=k[n>>2]|0;if(!g){e=57;break}h=0;e=k[o>>2]|0;while(1){if((k[e+8>>2]|0)==(f|0))break;h=h+1|0;if(h>>>0>=g>>>0){e=57;break c}else e=e+20|0}k[c>>2]=e}m=m+1|0;if(m>>>0>=(k[v>>2]|0)>>>0)break b}if((e|0)==27){cc(d,1,12586,z)|0;I=0;r=J;return I|0}else if((e|0)==29){cc(d,2,12740,A)|0;I=1;r=J;return I|0}else if((e|0)==31){cc(d,1,12586,B)|0;I=0;r=J;return I|0}else if((e|0)==34){cc(d,2,12806,C)|0;I=1;r=J;return I|0}else if((e|0)==37){cc(d,2,12860,D)|0;I=1;r=J;return I|0}else if((e|0)==39){cc(d,1,12586,E)|0;I=0;r=J;return I|0}else if((e|0)==42){cc(d,2,12806,F)|0;I=1;r=J;return I|0}else if((e|0)==50){cc(d,1,12586,G)|0;I=0;r=J;return I|0}else if((e|0)==57){cc(d,1,12586,H)|0;I=0;r=J;return I|0}}while(0);if(!a){k[y>>2]=(k[y>>2]|0)+1;I=1;r=J;return I|0}else{cc(d,1,12586,I)|0;I=0;r=J;return I|0}return 0}function Fe(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0;s=r;r=r+32|0;q=s+24|0;p=s+20|0;m=a+80|0;e=k[m>>2]|0;if((k[a+8>>2]|0)==16)f=(k[a+164>>2]|0)+((k[a+200>>2]|0)*5640|0)|0;else f=k[a+12>>2]|0;if(!c){cc(d,1,12505,s)|0;q=0;r=s;return q|0}Ab(b,p,1);a=k[p>>2]|0;if(a>>>0>1){cc(d,2,12531,s+8|0)|0;q=1;r=s;return q|0}if((a+1|0)!=(c|0)){cc(d,2,12505,s+16|0)|0;q=0;r=s;return q|0}l=f+5584|0;a=k[e+16>>2]|0;if(a){c=0;d=k[l>>2]|0;while(1){k[d+1076>>2]=0;c=c+1|0;if(c>>>0>=a>>>0)break;else d=d+1080|0}}j=f+5604|0;a=k[j>>2]|0;if(a){cd(a);k[j>>2]=0}if(!(k[p>>2]|0)){q=1;r=s;return q|0}i=f+5624|0;g=f+5628|0;h=0;while(1){b=b+1|0;Ab(b,q,1);a=k[m>>2]|0;e=k[i>>2]|0;f=k[g>>2]|0;if(((f|0)!=0?!((f|0)==0?1:(k[e>>2]|0)!=(k[q>>2]|0)):0)?(n=k[e+4>>2]|0,o=a+16|0,(n|0)==(k[o>>2]|0)):0){a=k[e+8>>2]|0;if(a){c=ha(n,n)|0;f=ha(k[1036+(k[a>>2]<<2)>>2]|0,c)|0;if((k[a+16>>2]|0)!=(f|0)){a=0;c=32;break}d=Zc(c<<2)|0;k[j>>2]=d;if(!d){a=0;c=32;break}fb[k[1052+(k[a>>2]<<2)>>2]&15](k[a+12>>2]|0,d,c)}a=k[e+12>>2]|0;if(a){c=k[o>>2]|0;f=ha(c,k[1036+(k[a>>2]<<2)>>2]|0)|0;if((k[a+16>>2]|0)!=(f|0)){a=0;c=32;break}f=Zc(c<<2)|0;if(!f){a=0;c=32;break}fb[k[1068+(k[a>>2]<<2)>>2]&15](k[a+12>>2]|0,f,c);a=k[o>>2]|0;if(a){c=0;d=f;e=k[l>>2]|0;while(1){k[e+1076>>2]=k[d>>2];c=c+1|0;if((c|0)==(a|0))break;else{d=d+4|0;e=e+1080|0}}}cd(f)}}h=h+1|0;if(h>>>0>=(k[p>>2]|0)>>>0){a=1;c=32;break}}if((c|0)==32){r=s;return a|0}return 0}function Ge(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;f=r;r=r+16|0;e=f;if(!c){r=f;return}d=0;while(1){Ab(a,e,2);k[b>>2]=k[e>>2];d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+2|0}}r=f;return}function He(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;f=r;r=r+16|0;e=f;if(!c){r=f;return}d=0;while(1){Ab(a,e,4);k[b>>2]=k[e>>2];d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+4|0}}r=f;return}function Ie(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;f=r;r=r+16|0;e=f;if(!c){r=f;return}d=0;while(1){Eb(a,e);k[b>>2]=~~+o[e>>2];d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+4|0}}r=f;return}function Je(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;f=r;r=r+16|0;e=f;if(!c){r=f;return}d=0;while(1){Cb(a,e);k[b>>2]=~~+p[e>>3];d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+8|0}}r=f;return}function Ke(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;f=r;r=r+16|0;e=f;if(!c){r=f;return}d=0;while(1){Ab(a,e,2);o[b>>2]=+((k[e>>2]|0)>>>0);d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+2|0}}r=f;return}function Le(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;f=r;r=r+16|0;e=f;if(!c){r=f;return}d=0;while(1){Ab(a,e,4);o[b>>2]=+((k[e>>2]|0)>>>0);d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+4|0}}r=f;return}function Me(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;f=r;r=r+16|0;e=f;if(!c){r=f;return}d=0;while(1){Eb(a,e);k[b>>2]=k[e>>2];d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+4|0}}r=f;return}function Ne(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;f=r;r=r+16|0;e=f;if(!c){r=f;return}d=0;while(1){Cb(a,e);o[b>>2]=+p[e>>3];d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+8|0}}r=f;return}function Oe(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0;m=r;r=r+32|0;g=m+8|0;i=m+20|0;if((k[a+8>>2]|0)==16)a=(k[a+164>>2]|0)+((k[a+200>>2]|0)*5640|0)|0;else a=k[a+12>>2]|0;l=k[a+5584>>2]|0;a=k[d>>2]|0;if(!a){cc(e,1,14243,m)|0;b=0;r=m;return b|0}k[d>>2]=a+-1;Ab(c,i,1);c=c+1|0;f=k[i>>2]&31;h=l+(b*1080|0)+24|0;k[h>>2]=f;k[l+(b*1080|0)+804>>2]=(k[i>>2]|0)>>>5;do if((f|0)==1){a=1;j=8}else{a=(k[d>>2]|0)>>>((f|0)!=0&1);if(a>>>0>97){k[g>>2]=a;k[g+4>>2]=97;k[g+8>>2]=97;cc(e,2,14279,g)|0;f=k[h>>2]|0}e=(a|0)==0;if(f)if(e){a=0;j=20;break}else{j=8;break}if(!e){f=0;while(1){Ab(c,i,1);if(f>>>0<97){k[l+(b*1080|0)+28+(f<<3)>>2]=(k[i>>2]|0)>>>3;k[l+(b*1080|0)+28+(f<<3)+4>>2]=0}f=f+1|0;if((f|0)==(a|0))break;else c=c+1|0}}a=(k[d>>2]|0)-a|0}while(0);if((j|0)==8){f=0;while(1){Ab(c,i,2);if(f>>>0<97){k[l+(b*1080|0)+28+(f<<3)>>2]=(k[i>>2]|0)>>>11;k[l+(b*1080|0)+28+(f<<3)+4>>2]=k[i>>2]&2047}f=f+1|0;if((f|0)==(a|0)){j=20;break}else c=c+2|0}}if((j|0)==20)a=(k[d>>2]|0)-(a<<1)|0;k[d>>2]=a;if((k[h>>2]|0)!=1){b=1;r=m;return b|0}a=l+(b*1080|0)+28|0;c=l+(b*1080|0)+32|0;f=1;do{d=(k[a>>2]|0)-(((f+-1|0)>>>0)/3|0)|0;k[l+(b*1080|0)+28+(f<<3)>>2]=(d|0)>0?d:0;k[l+(b*1080|0)+28+(f<<3)+4>>2]=k[c>>2];f=f+1|0}while((f|0)!=97);a=1;r=m;return a|0}function Pe(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;q=r;r=r+48|0;o=q+40|0;j=q+32|0;i=q+16|0;h=q+8|0;n=q+44|0;g=a+8|0;if((k[g>>2]|0)==16)f=(k[a+164>>2]|0)+((k[a+200>>2]|0)*5640|0)|0;else f=k[a+12>>2]|0;l=k[f+5584>>2]|0;if((k[d>>2]|0)>>>0<5){cc(e,1,14683,q)|0;d=0;r=q;return d|0}m=l+(b*1080|0)+4|0;Ab(c,m,1);f=(k[m>>2]|0)+1|0;k[m>>2]=f;if(f>>>0>33){k[h>>2]=f;k[h+4>>2]=33;cc(e,1,14718,h)|0;d=0;r=q;return d|0}if((k[a+168>>2]|0)>>>0>=f>>>0){k[i>>2]=b;cc(e,1,14795,i)|0;k[g>>2]=k[g>>2]|32768;d=0;r=q;return d|0}h=l+(b*1080|0)+8|0;Ab(c+1|0,h,1);k[h>>2]=(k[h>>2]|0)+2;a=l+(b*1080|0)+12|0;Ab(c+2|0,a,1);i=(k[a>>2]|0)+2|0;k[a>>2]=i;h=k[h>>2]|0;if(h>>>0>10|i>>>0>10|(h+i|0)>>>0>12){cc(e,1,14953,q+24|0)|0;d=0;r=q;return d|0}Ab(c+3|0,l+(b*1080|0)+16|0,1);Ab(c+4|0,l+(b*1080|0)+20|0,1);g=(k[d>>2]|0)+-5|0;k[d>>2]=g;f=k[m>>2]|0;if(!(k[l+(b*1080|0)>>2]&1)){if(!f){d=1;r=q;return d|0}else f=0;do{k[l+(b*1080|0)+812+(f<<2)>>2]=15;k[l+(b*1080|0)+944+(f<<2)>>2]=15;f=f+1|0}while(f>>>0<(k[m>>2]|0)>>>0);f=1;r=q;return f|0}if(g>>>0<f>>>0){cc(e,1,14683,j)|0;d=0;r=q;return d|0}do if(!f)f=0;else{a=0;g=c+5|0;while(1){Ab(g,n,1);g=g+1|0;f=k[n>>2]|0;if((a|0)!=0?f>>>0<16|(f&15|0)==0:0)break;k[l+(b*1080|0)+812+(a<<2)>>2]=f&15;k[l+(b*1080|0)+944+(a<<2)>>2]=(k[n>>2]|0)>>>4;a=a+1|0;f=k[m>>2]|0;if(a>>>0>=f>>>0){p=22;break}}if((p|0)==22){g=k[d>>2]|0;break}cc(e,1,15021,o)|0;d=0;r=q;return d|0}while(0);k[d>>2]=g-f;d=1;r=q;return d|0}function Qe(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if(!c)return;d=0;while(1){zb(b,~~+o[a>>2]>>>0,2);d=d+1|0;if((d|0)==(c|0))break;else{b=b+2|0;a=a+4|0}}return}function Re(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if(!c)return;d=0;while(1){zb(b,~~+o[a>>2]>>>0,4);d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+4|0}}return}function Se(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if(!c)return;d=0;while(1){Db(b,+o[a>>2]);d=d+1|0;if((d|0)==(c|0))break;else{b=b+4|0;a=a+4|0}}return}function Te(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if(!c)return;d=0;while(1){Bb(b,+o[a>>2]);d=d+1|0;if((d|0)==(c|0))break;else{b=b+8|0;a=a+4|0}}return}function Ue(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;h=r;r=r+16|0;if(!c){c=0;r=h;return c|0}if(!(vd(k[a>>2]|0,b,c,d)|0)){cc(d,1,16322,h)|0;c=0;r=h;return c|0}if(k[a+128>>2]|0){c=1;r=h;return c|0}g=a+108|0;if(!(mf(c,g,d)|0)){c=0;r=h;return c|0}b=k[a+48>>2]|0;a:do switch(b|0){case 16:{k[c+20>>2]=1;break}case 17:{k[c+20>>2]=2;break}case 18:{k[c+20>>2]=3;break}case 24:{k[c+20>>2]=4;break}default:{e=c+20|0;if((b|0)==12){k[e>>2]=5;break a}else{k[e>>2]=-1;break a}}}while(0);f=a+120|0;b=k[f>>2]|0;do if(b){if(k[b+12>>2]|0){nf(c,g);break}cd(k[b+4>>2]|0);cd(k[(k[f>>2]|0)+8>>2]|0);cd(k[k[f>>2]>>2]|0);b=k[f>>2]|0;e=k[b+12>>2]|0;if(e){cd(e);b=k[f>>2]|0}cd(b);k[f>>2]=0}while(0);if(k[a+116>>2]|0)of(c,g,d);b=k[g>>2]|0;if(!b){c=1;r=h;return c|0}k[c+28>>2]=b;k[c+32>>2]=k[a+112>>2];k[g>>2]=0;c=1;r=h;return c|0}function Ve(a,b){a=a|0;b=b|0;ed(k[a>>2]|0,b);i[a+124>>0]=0;k[a+128>>2]=k[b+8248>>2]&1;return}function We(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0;w=r;r=r+80|0;v=w+64|0;s=w+56|0;n=w+48|0;q=w+40|0;p=w+32|0;o=w+24|0;if(!((a|0)!=0&(b|0)!=0&(c|0)!=0)){b=0;r=w;return b|0}t=c+16|0;if(((k[t>>2]|0)+-1|0)>>>0>16383){cc(d,1,16371,w)|0;b=0;r=w;return b|0}if(!(hd(k[a>>2]|0,b,c,d)|0)){b=0;r=w;return b|0}k[a+56>>2]=1785737760;k[a+60>>2]=0;k[a+64>>2]=1;e=Zc(4)|0;f=a+68|0;k[f>>2]=e;if(!e){k[f>>2]=0;cc(d,1,16440,w+8|0)|0;b=0;r=w;return b|0}k[e>>2]=1785737760;i=k[t>>2]|0;k[a+20>>2]=i;i=Zc(i*12|0)|0;e=a+72|0;k[e>>2]=i;if(!i){k[e>>2]=0;cc(d,1,16440,w+16|0)|0;b=0;r=w;return b|0}k[a+16>>2]=(k[c+12>>2]|0)-(k[c+4>>2]|0);k[a+12>>2]=(k[c+8>>2]|0)-(k[c>>2]|0);u=c+24|0;l=k[u>>2]|0;g=k[l+24>>2]|0;h=k[l+32>>2]|0;e=a+24|0;k[e>>2]=g+-1+(h<<7);m=k[t>>2]|0;if(m>>>0>1){f=1;do{if((g|0)!=(k[l+(f*52|0)+24>>2]|0))k[e>>2]=255;f=f+1|0}while(f>>>0<m>>>0)}k[a+28>>2]=7;k[a+32>>2]=0;k[a+36>>2]=0;f=(m|0)==0;if(!f?(k[i+8>>2]=g+-1+(h<<7),m>>>0>1):0){e=1;do{k[i+(e*12|0)+8>>2]=(k[l+(e*52|0)+24>>2]|0)+-1+(k[l+(e*52|0)+32>>2]<<7);e=e+1|0}while(e>>>0<m>>>0)}e=a+40|0;a:do if(!(k[c+32>>2]|0)){k[e>>2]=1;switch(k[c+20>>2]|0){case 1:{k[a+48>>2]=16;break a}case 2:{k[a+48>>2]=17;break a}case 3:{k[a+48>>2]=18;break a}default:break a}}else{k[e>>2]=2;k[a+48>>2]=0}while(0);b:do if(!f){f=0;e=0;g=0;do{c=(j[l+(g*52|0)+48>>1]|0)==0;e=(c&1^1)+e|0;f=c?f:g;g=g+1|0}while(g>>>0<m>>>0);g=f;if((e|0)!=1){if(e>>>0<=1)break;cc(d,2,16736,n)|0;break}switch(k[a+48>>2]|0){case 18:case 16:{f=3;break}case 17:{f=1;break}default:{cc(d,2,16486,o)|0;break b}}if(m>>>0<(f+1|0)>>>0){cc(d,2,16560,p)|0;break}if(g>>>0<f>>>0){cc(d,2,16653,q)|0;break}q=Zc(8)|0;e=a+116|0;k[e>>2]=q;if(!q){cc(d,1,16801,s)|0;b=0;r=w;return b|0}s=Zc((k[t>>2]|0)*6|0)|0;c=k[e>>2]|0;k[c>>2]=s;if(!s){cc(d,1,16801,v)|0;b=0;r=w;return b|0}i=k[t>>2]|0;j[c+4>>1]=i;h=k[c>>2]|0;e=0;do{j[h+(e*6|0)>>1]=e;j[h+(e*6|0)+2>>1]=0;v=e;e=e+1|0;j[h+(v*6|0)+4>>1]=e}while((e|0)!=(f|0));if(f>>>0<i>>>0){g=k[u>>2]|0;do{v=(j[g+(f*52|0)+48>>1]|0)==0;j[h+(f*6|0)>>1]=f;e=h+(f*6|0)+2|0;if(v){j[e>>1]=-1;j[h+(f*6|0)+4>>1]=-1}else{j[e>>1]=1;j[(k[c>>2]|0)+(f*6|0)+4>>1]=0}f=f+1|0}while(f>>>0<i>>>0)}}while(0);k[a+52>>2]=0;k[a+44>>2]=0;k[a+96>>2]=k[b+18692>>2];b=1;r=w;return b|0}function Xe(a,b,c){a=a|0;b=b|0;c=c|0;return yd(k[a>>2]|0,b,c)|0}function Ye(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;d=a+8|0;if(!(Cg(k[d>>2]|0,52,c)|0)){c=0;return c|0}f=k[d>>2]|0;g=Dg(f)|0;d=Eg(f)|0;if(g){h=0;e=1;while(1){if(!e)e=0;else e=($a[k[d>>2]&63](a,b,c)|0)!=0;h=h+1|0;if((h|0)==(g|0))break;else{d=d+4|0;e=e&1}}Fg(f);if(!e){c=0;return c|0}}else Fg(f);c=jd(k[a>>2]|0,b,c)|0;return c|0}function Ze(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;d=a+8|0;if(!(Cg(k[d>>2]|0,53,c)|0)){c=0;return c|0}if(!(zd(k[a>>2]|0,b,c)|0)){c=0;return c|0}h=k[d>>2]|0;f=Dg(h)|0;d=Eg(h)|0;if(!f)d=1;else{g=0;e=d;d=1;while(1){if(!d)d=0;else d=($a[k[e>>2]&63](a,b,c)|0)!=0;d=d&1;g=g+1|0;if((g|0)==(f|0))break;else e=e+4|0}}Fg(h);c=d;return c|0}function _e(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;e=a+4|0;if(!(Cg(k[e>>2]|0,54,d)|0)){b=0;return b|0}g=k[e>>2]|0;h=Dg(g)|0;e=Eg(g)|0;if(h){i=0;f=1;while(1){if(!f)f=0;else f=($a[k[e>>2]&63](a,b,d)|0)!=0;i=i+1|0;if((i|0)==(h|0))break;else{e=e+4|0;f=f&1}}Fg(g);if(!f){b=0;return b|0}}else Fg(g);e=a+8|0;if(!(Cg(k[e>>2]|0,55,d)|0)){b=0;return b|0}if(!(Cg(k[e>>2]|0,56,d)|0)){b=0;return b|0}if(!(Cg(k[e>>2]|0,57,d)|0)){b=0;return b|0}if((k[a+96>>2]|0)!=0?(Cg(k[e>>2]|0,58,d)|0)==0:0){b=0;return b|0}if(!(Cg(k[e>>2]|0,59,d)|0)){b=0;return b|0}g=k[e>>2]|0;h=Dg(g)|0;e=Eg(g)|0;if(h){i=0;f=1;while(1){if(!f)f=0;else f=($a[k[e>>2]&63](a,b,d)|0)!=0;i=i+1|0;if((i|0)==(h|0))break;else{e=e+4|0;f=f&1}}Fg(g);if(!f){b=0;return b|0}}else Fg(g);b=Ad(k[a>>2]|0,b,c,d)|0;return b|0}function $e(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=b+8|0;if(!(Cg(k[j>>2]|0,52,d)|0)){a=0;return a|0}g=k[b+4>>2]|0;h=Dg(g)|0;e=Eg(g)|0;if(h){i=0;f=1;while(1){if(!f)f=0;else f=($a[k[e>>2]&63](b,a,d)|0)!=0;i=i+1|0;if((i|0)==(h|0))break;else{e=e+4|0;f=f&1}}Fg(g);if(!f){a=0;return a|0}}else Fg(g);g=k[j>>2]|0;h=Dg(g)|0;e=Eg(g)|0;if(h){i=0;f=1;while(1){if(!f)f=0;else f=($a[k[e>>2]&63](b,a,d)|0)!=0;i=i+1|0;if((i|0)==(h|0))break;else{e=e+4|0;f=f&1}}Fg(g);if(!f){a=0;return a|0}}else Fg(g);a=kd(a,k[b>>2]|0,c,d)|0;return a|0}function af(a,b,c,d,e,f,g,h,i,j,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;l=l|0;return md(k[a>>2]|0,b,c,d,e,f,g,h,i,j,l)|0}function bf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return Bd(k[a>>2]|0,b,c,d,e,f)|0}function cf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return nd(k[a>>2]|0,b,c,d,e,f)|0}function df(a){a=a|0;var b=0,c=0,d=0;if(!a)return;gd(k[a>>2]|0);k[a>>2]=0;b=a+72|0;c=k[b>>2]|0;if(c){cd(c);k[b>>2]=0}b=a+68|0;c=k[b>>2]|0;if(c){cd(c);k[b>>2]=0}b=a+108|0;c=k[b>>2]|0;if(c){cd(c);k[b>>2]=0}d=a+116|0;b=k[d>>2]|0;if(b){c=k[b>>2]|0;if(c){cd(c);b=k[d>>2]|0;k[b>>2]=0}cd(b);k[d>>2]=0}d=a+120|0;b=k[d>>2]|0;if(b){c=k[b+12>>2]|0;if(c){cd(c);b=k[d>>2]|0;k[b+12>>2]=0}c=k[b+4>>2]|0;if(c){cd(c);b=k[d>>2]|0;k[b+4>>2]=0}c=k[b+8>>2]|0;if(c){cd(c);b=k[d>>2]|0;k[b+8>>2]=0}c=k[b>>2]|0;if(c){cd(c);b=k[d>>2]|0;k[b>>2]=0}cd(b);k[d>>2]=0}b=a+4|0;c=k[b>>2]|0;if(c){Bg(c);k[b>>2]=0}b=a+8|0;c=k[b>>2]|0;if(c){Bg(c);k[b>>2]=0}cd(a);return}function ef(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return od(k[a>>2]|0,b,c,d,e,f,g)|0}function ff(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;h=r;r=r+16|0;if(!c){a=0;r=h;return a|0}cc(d,2,16845,h)|0;if(!(wd(k[a>>2]|0,b,c,d,e)|0)){cc(d,1,16322,h+8|0)|0;a=0;r=h;return a|0}g=a+108|0;if(!(mf(c,g,d)|0)){a=0;r=h;return a|0}e=k[a+48>>2]|0;a:do switch(e|0){case 16:{k[c+20>>2]=1;break}case 17:{k[c+20>>2]=2;break}case 18:{k[c+20>>2]=3;break}case 24:{k[c+20>>2]=4;break}default:{b=c+20|0;if((e|0)==12){k[b>>2]=5;break a}else{k[b>>2]=-1;break a}}}while(0);f=a+120|0;b=k[f>>2]|0;do if(b){if(k[b+12>>2]|0){nf(c,g);break}cd(k[b+4>>2]|0);cd(k[(k[f>>2]|0)+8>>2]|0);cd(k[k[f>>2]>>2]|0);b=k[f>>2]|0;e=k[b+12>>2]|0;if(e){cd(e);b=k[f>>2]|0}cd(b);k[f>>2]=0}while(0);if(k[a+116>>2]|0)of(c,g,d);b=k[g>>2]|0;if(!b){a=1;r=h;return a|0}k[c+28>>2]=b;k[c+32>>2]=k[a+112>>2];k[g>>2]=0;a=1;r=h;return a|0}function gf(a){a=a|0;var b=0;b=_c(1,136)|0;if(!b)return b|0;if(!a){a=fd()|0;k[b>>2]=a}else{a=pd()|0;k[b>>2]=a}if(!a){df(b);b=0;return b|0}a=b+108|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;k[a+12>>2]=0;i[a+16>>0]=0;a=Ag()|0;k[b+4>>2]=a;if(!a){df(b);b=0;return b|0}a=Ag()|0;k[b+8>>2]=a;if(a)return b|0;df(b);b=0;return b|0}function hf(a,b,c){a=a|0;b=b|0;c=c|0;qd(k[a>>2]|0,b,c);return}function jf(a){a=a|0;return ud(k[a>>2]|0)|0}function kf(a){a=a|0;return td(k[a>>2]|0)|0}function lf(a,b,c){a=a|0;b=b|0;c=c|0;return xd(k[a>>2]|0,b,c)|0}function mf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;B=r;r=r+80|0;A=B+72|0;z=B+64|0;y=B+56|0;x=B+48|0;w=B+40|0;v=B+32|0;u=B+24|0;s=B+16|0;n=B+8|0;h=B;d=k[b+8>>2]|0;a:do if(d){q=k[d>>2]|0;p=j[d+4>>1]|0;d=k[a+16>>2]|0;o=k[b+12>>2]|0;if((o|0)!=0?(k[o+12>>2]|0)!=0:0)b=l[o+18>>0]|0;else b=d;g=p<<16>>16==0;b:do if(!g){f=0;c:while(1){e=f&65535;d=m[q+(e*6|0)>>1]|0;if(d>>>0>=b>>>0){e=15;break}d=j[q+(e*6|0)+4>>1]|0;switch(d<<16>>16){case 0:case -1:break;default:{d=(d&65535)+-1|0;if(d>>>0>=b>>>0){e=18;break c}}}f=f+1<<16>>16;if((f&65535)>=(p&65535))break b}if((e|0)==15){k[h>>2]=d;k[h+4>>2]=b;cc(c,1,19362,h)|0;c=0;r=B;return c|0}else if((e|0)==18){k[n>>2]=d;k[n+4>>2]=b;cc(c,1,19362,n)|0;c=0;r=B;return c|0}}while(0);if(!b)d=o;else{d:do if(!g)while(1){b=b+-1|0;d=0;do{if((m[q+((d&65535)*6|0)>>1]|0)==(b|0))break;d=d+1<<16>>16}while((d&65535)<(p&65535));if(d<<16>>16==p<<16>>16)break d;if(!b){d=o;break a}}while(0);cc(c,1,19399,s)|0;c=0;r=B;return c|0}}else d=k[b+12>>2]|0;while(0);if(!d){c=1;r=B;return c|0}t=k[d+12>>2]|0;if(!t){c=1;r=B;return c|0}o=i[d+18>>0]|0;s=o&255;q=o<<24>>24==0;if(q)d=1;else{f=a+16|0;b=0;g=0;d=1;do{b=m[t+(b<<2)>>1]|0;e=k[f>>2]|0;if(b>>>0>=e>>>0){k[u>>2]=b;k[u+4>>2]=e;cc(c,1,19362,u)|0;d=0}g=g+1<<16>>16;b=g&65535}while(b>>>0<s>>>0)}p=_c(s,4)|0;if(!p){cc(c,1,19432,v)|0;c=0;r=B;return c|0}if(!q){h=0;n=0;do{e=i[t+(h<<2)+3>>0]|0;f=e&255;do if((e&255)<(o&255)){g=p+(f<<2)|0;b=i[t+(h<<2)+2>>0]|0;if((k[g>>2]|0)!=0&b<<24>>24==1){k[x>>2]=f;cc(c,1,19505,x)|0;d=0;break}if(b<<24>>24!=0|e<<24>>24==0){k[g>>2]=1;break}else{k[y>>2]=h;k[y+4>>2]=f;cc(c,1,19536,y)|0;d=0;break}}else{k[w>>2]=f;cc(c,1,19449,w)|0;d=0}while(0);n=n+1<<16>>16;h=n&65535}while(h>>>0<s>>>0);if(!q){b=0;e=0;do{if((k[p+(b<<2)>>2]|0)==0?(i[t+(b<<2)+2>>0]|0)!=0:0){k[z>>2]=b;cc(c,1,19572,z)|0;d=0}e=e+1<<16>>16;b=e&65535}while(b>>>0<s>>>0)}}if(!d){cd(p);c=0;r=B;return c|0}e:do if(!((k[a+16>>2]|0)!=1|q)){d=0;b=0;while(1){b=b+1<<16>>16;if(!(k[p+(d<<2)>>2]|0))break;d=b&65535;if(d>>>0>=s>>>0)break e}k[A>>2]=d;cc(c,2,19610,A)|0;if(!q){d=0;b=0;do{i[t+(d<<2)+2>>0]=1;i[t+(d<<2)+3>>0]=b;b=b+1<<16>>16;d=b&65535}while(d>>>0<s>>>0)}}while(0);cd(p);c=1;r=B;return c|0}function nf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;w=b+12|0;b=k[w>>2]|0;h=k[b+8>>2]|0;o=k[b+4>>2]|0;q=k[b>>2]|0;r=k[b+12>>2]|0;b=i[b+18>>0]|0;s=a+24|0;t=k[s>>2]|0;u=b&255;v=Zc(u*52|0)|0;if(!v)return;n=b<<24>>24==0;if(!n){f=0;g=0;do{b=j[r+(f<<2)>>1]|0;if(!(i[r+(f<<2)+2>>0]|0)){b=b&65535;c=v+(f*52|0)|0;d=t+(b*52|0)|0;e=c+52|0;do{k[c>>2]=k[d>>2];c=c+4|0;d=d+4|0}while((c|0)<(e|0))}else{b=b&65535;c=v+((l[r+(f<<2)+3>>0]|0)*52|0)|0;d=t+(b*52|0)|0;e=c+52|0;do{k[c>>2]=k[d>>2];c=c+4|0;d=d+4|0}while((c|0)<(e|0))}e=Zc(ha(k[t+(b*52|0)+8>>2]<<2,k[t+(b*52|0)+12>>2]|0)|0)|0;k[v+(f*52|0)+44>>2]=e;if(!e){p=7;break}k[v+(f*52|0)+24>>2]=l[h+f>>0];k[v+(f*52|0)+32>>2]=l[o+f>>0];g=g+1<<16>>16;f=g&65535}while(f>>>0<u>>>0);if((p|0)==7){cd(v);return}h=(m[(k[w>>2]|0)+16>>1]|0)+-1|0;if(!n){b=0;g=0;do{e=k[t+((m[r+(b<<2)>>1]|0)*52|0)+44>>2]|0;d=l[r+(b<<2)+3>>0]|0;f=ha(k[v+(d*52|0)+12>>2]|0,k[v+(d*52|0)+8>>2]|0)|0;if(!(i[r+(b<<2)+2>>0]|0)){b=k[v+(b*52|0)+44>>2]|0;if(f){c=0;do{k[b+(c<<2)>>2]=k[e+(c<<2)>>2];c=c+1|0}while((c|0)!=(f|0))}}else{b=k[v+(d*52|0)+44>>2]|0;if(f){c=0;do{p=k[e+(c<<2)>>2]|0;p=q+((ha((p|0)<0?0:(p|0)>(h|0)?h:p,u)|0)+d<<2)|0;k[b+(c<<2)>>2]=k[p>>2];c=c+1|0}while((c|0)!=(f|0))}}g=g+1<<16>>16;b=g&65535}while(b>>>0<u>>>0)}}c=a+16|0;d=k[c>>2]|0;if(d){b=0;e=0;do{b=k[t+(b*52|0)+44>>2]|0;if(b)cd(b);e=e+1<<16>>16;b=e&65535}while(b>>>0<d>>>0)}cd(t);k[s>>2]=v;k[c>>2]=u;cd(k[(k[w>>2]|0)+4>>2]|0);cd(k[(k[w>>2]|0)+8>>2]|0);cd(k[k[w>>2]>>2]|0);b=k[w>>2]|0;c=k[b+12>>2]|0;if(c){cd(c);b=k[w>>2]|0}cd(b);k[w>>2]=0;return}function of(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;y=r;r=r+80|0;w=y+8|0;v=y;u=y+16|0;x=b+8|0;d=k[x>>2]|0;b=k[d>>2]|0;t=j[d+4>>1]|0;if(t<<16>>16){s=a+16|0;n=a+24|0;p=1;q=0;while(1){o=j[b+(q*6|0)>>1]|0;m=o&65535;a=k[s>>2]|0;a:do if(m>>>0<a>>>0){d=j[b+(q*6|0)+4>>1]|0;switch(d<<16>>16){case -1:case 0:{j[(k[n>>2]|0)+(m*52|0)+48>>1]=j[b+(q*6|0)+2>>1]|0;break a}default:{}}h=(d&65535)+65535|0;l=h&65535;h=h&65535;if(h>>>0>=a>>>0){k[w>>2]=h;k[w+4>>2]=a;cc(c,2,19321,w)|0;break}i=b+(q*6|0)+2|0;if((m|0)!=(h|0)?(j[i>>1]|0)==0:0){d=k[n>>2]|0;a=d+(m*52|0)|0;e=u;f=a;g=e+52|0;do{k[e>>2]=k[f>>2];e=e+4|0;f=f+4|0}while((e|0)<(g|0));e=a;f=d+(h*52|0)|0;g=e+52|0;do{k[e>>2]=k[f>>2];e=e+4|0;f=f+4|0}while((e|0)<(g|0));e=(k[n>>2]|0)+(h*52|0)|0;f=u;g=e+52|0;do{k[e>>2]=k[f>>2];e=e+4|0;f=f+4|0}while((e|0)<(g|0));if((q+1&65535)<(t&65535)){e=p;do{d=b+(e*6|0)|0;a=j[d>>1]|0;if(a<<16>>16!=o<<16>>16){if(a<<16>>16==l<<16>>16)j[d>>1]=o}else j[d>>1]=l;e=e+1|0}while((e&65535)<<16>>16!=t<<16>>16)}}j[(k[n>>2]|0)+(m*52|0)+48>>1]=j[i>>1]|0}else{k[v>>2]=m;k[v+4>>2]=a;cc(c,2,19281,v)|0}while(0);q=q+1|0;if((q&65535)<<16>>16==t<<16>>16)break;else p=p+1|0}b=k[x>>2]|0;d=b;b=k[b>>2]|0}if(!b){w=d;cd(w);k[x>>2]=0;r=y;return}else{cd(b);w=k[x>>2]|0;cd(w);k[x>>2]=0;r=y;return}}function pf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;H=r;r=r+192|0;y=H+152|0;x=H+144|0;w=H+136|0;v=H+128|0;u=H+120|0;D=H+88|0;s=H+80|0;p=H+64|0;o=H+48|0;F=H+40|0;z=H+32|0;E=H+24|0;t=H+16|0;q=H+8|0;m=H+176|0;n=H+168|0;C=H+156|0;d=_c(1,1024)|0;if(!d){cc(c,1,17117,H)|0;G=0;r=H;return G|0}l=m+4|0;A=C+4|0;B=a+100|0;j=1024;a:while(1){if((Wb(b,m,8,c)|0)!=8)break;while(1){Ab(m,C,4);Ab(l,A,4);switch(k[C>>2]|0){case 0:{e=_b(b)|0;i=L;if((i|0)>0|(i|0)==0&e>>>0>4294967287){G=6;break a}k[C>>2]=e+8;h=8;break}case 1:{if((Wb(b,m,8,c)|0)!=8)break a;Ab(m,n,4);if(k[n>>2]|0){G=10;break a}Ab(l,C,4);h=16;break}default:h=8}f=k[A>>2]|0;if((f|0)==1785737827){G=13;break a}e=k[C>>2]|0;if(!e){G=17;break a}if(e>>>0<h>>>0){G=19;break a}if((f|0)==1783636e3){g=1084;f=h;G=22;break}if((f|0)==1718909296){g=1092;f=h;G=22;break}i=(f|0)==1785737832;b:do if((f|0)!=1768449138)if((f|0)!=1668246642)if((f|0)!=1651532643)if((f|0)!=1885564018)if((f|0)!=1668112752){g=(f|0)==1667523942?1148:0;e=e-h|0;if((f|0)<1785737832)switch(f|0){case 1667523942:{G=30;break b}default:{}}else switch(f|0){case 1785737832:{G=30;break b}default:{}}f=k[B>>2]|0;if(!(f&1)){G=45;break a}if(!(f&2)){G=47;break a}k[B>>2]=f|2147483647;i=$b(b,e,0,c)|0;if(!((i|0)==(e|0)&(L|0)==0)){G=50;break a}}else{g=1140;G=28}else{g=1132;G=28}else{g=1124;G=28}else{g=1116;G=28}else{g=1108;G=28}while(0);if((G|0)==28){e=e-h|0;G=30}if((G|0)==30){G=0;if(i){g=1100;break}k[o>>2]=f>>>24;k[o+4>>2]=f>>>16&255;k[o+8>>2]=f>>>8&255;k[o+12>>2]=f&255;cc(c,2,17301,o)|0;if(k[B>>2]&4)break;i=k[A>>2]|0;k[p>>2]=i>>>24;k[p+4>>2]=i>>>16&255;k[p+8>>2]=i>>>8&255;k[p+12>>2]=i&255;cc(c,2,17352,p)|0;k[B>>2]=k[B>>2]|2147483647;i=$b(b,e,0,c)|0;if(!((i|0)==(e|0)&(L|0)==0)){G=33;break a}}if((Wb(b,m,8,c)|0)!=8)break a}if((G|0)==22){G=0;e=e-f|0}i=_b(b)|0;h=L;if(0>(h|0)|0==(h|0)&e>>>0>i>>>0){G=35;break}if(e>>>0>j>>>0){f=bd(d,e)|0;if(!f){G=38;break}else{d=f;f=e}}else f=j;if((Wb(b,d,e,c)|0)!=(e|0)){G=40;break}if(!(hb[k[g+4>>2]&63](a,d,e,c)|0)){G=43;break}else j=f}switch(G|0){case 6:{cc(c,1,17167,q)|0;break}case 10:{cc(c,1,17167,t)|0;break}case 13:{e=k[B>>2]|0;if(!(e&4)){cc(c,1,17209,E)|0;cd(d);G=0;r=H;return G|0}else{k[B>>2]=e|8;cd(d);G=1;r=H;return G|0}}case 17:{cc(c,1,17237,z)|0;cd(d);G=0;r=H;return G|0}case 19:{k[F>>2]=e;k[F+4>>2]=f;cc(c,1,17275,F)|0;cd(d);G=0;r=H;return G|0}case 33:{cc(c,1,17418,s)|0;cd(d);G=0;r=H;return G|0}case 35:{E=k[C>>2]|0;F=k[A>>2]|0;G=_b(b)|0;k[D>>2]=E;k[D+4>>2]=F>>>24;k[D+8>>2]=F>>>16&255;k[D+12>>2]=F>>>8&255;k[D+16>>2]=F&255;k[D+20>>2]=e;k[D+24>>2]=G;cc(c,1,17468,D)|0;cd(d);G=0;r=H;return G|0}case 38:{cd(d);cc(c,1,17544,u)|0;G=0;r=H;return G|0}case 40:{cc(c,1,17586,v)|0;cd(d);G=0;r=H;return G|0}case 43:{cd(d);G=0;r=H;return G|0}case 45:{cc(c,1,17635,w)|0;cd(d);G=0;r=H;return G|0}case 47:{cc(c,1,17705,x)|0;cd(d);G=0;r=H;return G|0}case 50:{cc(c,1,17418,y)|0;cd(d);G=0;r=H;return G|0}}cd(d);G=1;r=H;return G|0}function qf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;g=r;r=r+32|0;f=g+24|0;d=Zb(b)|0;e=L;a=a+80|0;h=a;h=Yi(d|0,e|0,k[h>>2]|0,k[h+4>>2]|0)|0;zb(f,h,4);zb(f+4|0,1785737827,4);if(!(ac(b,k[a>>2]|0,k[a+4>>2]|0,c)|0)){cc(c,1,17086,g)|0;h=0;r=g;return h|0}if((Xb(b,f,8,c)|0)!=8){cc(c,1,17086,g+8|0)|0;h=0;r=g;return h|0}if(ac(b,d,e,c)|0){h=1;r=g;return h|0}cc(c,1,17086,g+16|0)|0;h=0;r=g;return h|0}function rf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;c=((k[a>>2]|0)!=0?(k[a+104>>2]|k[a+100>>2]|0)==0:0)&(k[a+8>>2]|0)!=0&(k[a+4>>2]|0)!=0&(k[a+64>>2]|0)!=0&(k[a+16>>2]|0)!=0&(k[a+12>>2]|0)!=0&1;d=k[a+20>>2]|0;if(!d){f=c;a=a+40|0;a=k[a>>2]|0;a=a+-1|0;a=a>>>0<2;a=a&1;b=bc(b)|0;b=b&f;a=b&a;return a|0}e=k[a+72>>2]|0;f=0;do{c=(k[e+(f*12|0)+8>>2]&126)>>>0<38&c;f=f+1|0}while(f>>>0<d>>>0);a=a+40|0;a=k[a>>2]|0;a=a+-1|0;a=a>>>0<2;a=a&1;b=bc(b)|0;b=b&c;a=b&a;return a|0}function sf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;a=r;r=r+16|0;d=a;zb(d,12,4);zb(d+4|0,1783636e3,4);zb(d+8|0,218793738,4);c=(Xb(b,d,12,c)|0)==12&1;r=a;return c|0}function tf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;j=r;r=r+16|0;i=j+8|0;e=a+64|0;g=(k[e>>2]<<2)+16|0;h=_c(1,g)|0;if(!h){cc(c,1,17006,j)|0;i=0;r=j;return i|0}zb(h,g,4);zb(h+4|0,1718909296,4);zb(h+8|0,k[a+56>>2]|0,4);zb(h+12|0,k[a+60>>2]|0,4);f=h+16|0;if(k[e>>2]|0){a=a+68|0;d=0;do{zb(f,k[(k[a>>2]|0)+(d<<2)>>2]|0,4);d=d+1|0}while(d>>>0<(k[e>>2]|0)>>>0)}a=(Xb(b,h,g,c)|0)==(g|0);if(!a)cc(c,1,17045,i)|0;cd(h);i=a&1;r=j;return i|0}function uf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;p=r;r=r+80|0;n=p+16|0;l=p+8|0;i=p;e=p+24|0;j=p+72|0;d=e;f=d+48|0;do{k[d>>2]=0;d=d+4|0}while((d|0)<(f|0));o=(k[a+24>>2]|0)==255;k[e>>2]=2;d=e+12|0;if(o){k[d>>2]=3;k[e+24>>2]=4;d=3}else{k[d>>2]=4;d=2}if(!(k[a+116>>2]|0))o=d;else{k[e+(d*12|0)>>2]=5;o=d+1|0}zb(j+4|0,1785737832,4);g=0;h=e;d=8;while(1){f=h+8|0;q=ib[k[h>>2]&7](a,f)|0;k[h+4>>2]=q;if(!q){m=8;break}d=(k[f>>2]|0)+d|0;g=g+1|0;if((g|0)>=(o|0))break;else h=h+12|0}if((m|0)==8){cc(c,1,16920,i)|0;f=0;while(1){d=k[e+4>>2]|0;if(d)cd(d);f=f+1|0;if((f|0)>=(o|0)){d=0;break}else e=e+12|0}r=p;return d|0}zb(j,d,4);a:do if((Xb(b,j,8,c)|0)==8){d=0;f=e;while(1){q=f+8|0;m=Xb(b,k[f+4>>2]|0,k[q>>2]|0,c)|0;if((m|0)!=(k[q>>2]|0))break;d=d+1|0;if((d|0)>=(o|0)){d=1;break a}else f=f+12|0}cc(c,1,16963,n)|0;d=0}else{cc(c,1,16963,l)|0;d=0}while(0);g=0;while(1){f=k[e+4>>2]|0;if(f)cd(f);g=g+1|0;if((g|0)>=(o|0))break;else e=e+12|0}r=p;return d|0}function vf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=Zb(b)|0;a=a+88|0;k[a>>2]=d;k[a+4>>2]=L;b=$b(b,24,0,c)|0;return (b|0)==24&(L|0)==0&1|0}function wf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=Zb(b)|0;a=a+80|0;k[a>>2]=d;k[a+4>>2]=L;b=$b(b,8,0,c)|0;return (b|0)==8&(L|0)==0&1|0}function xf(a,b){a=a|0;b=b|0;var c=0;c=_c(1,22)|0;if(!c){b=0;return b|0}zb(c,22,4);zb(c+4|0,1768449138,4);zb(c+8|0,k[a+16>>2]|0,4);zb(c+12|0,k[a+12>>2]|0,4);zb(c+16|0,k[a+20>>2]|0,2);zb(c+18|0,k[a+24>>2]|0,1);zb(c+19|0,k[a+28>>2]|0,1);zb(c+20|0,k[a+32>>2]|0,1);zb(c+21|0,k[a+36>>2]|0,1);k[b>>2]=22;b=c;return b|0}function yf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;e=a+20|0;f=(k[e>>2]|0)+8|0;g=_c(1,f)|0;if(!g){b=0;return b|0}zb(g,f,4);zb(g+4|0,1651532643,4);if(k[e>>2]|0){a=a+72|0;c=0;d=g+8|0;while(1){zb(d,k[(k[a>>2]|0)+(c*12|0)+8>>2]|0,1);c=c+1|0;if(c>>>0>=(k[e>>2]|0)>>>0)break;else d=d+1|0}}k[b>>2]=f;b=g;return b|0}function zf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;c=a+40|0;switch(k[c>>2]|0){case 1:{h=15;break}case 2:{h=(k[a+112>>2]|0)+11|0;break}default:{b=0;return b|0}}g=_c(1,h)|0;if(!g){b=0;return b|0}zb(g,h,4);zb(g+4|0,1668246642,4);zb(g+8|0,k[c>>2]|0,1);zb(g+9|0,k[a+52>>2]|0,1);zb(g+10|0,k[a+44>>2]|0,1);e=g+11|0;switch(k[c>>2]|0){case 1:{zb(e,k[a+48>>2]|0,4);break}case 2:{f=a+112|0;if(k[f>>2]|0){a=a+108|0;d=0;c=e;while(1){zb(c,l[(k[a>>2]|0)+d>>0]|0,1);d=d+1|0;if(d>>>0>=(k[f>>2]|0)>>>0)break;else c=c+1|0}}break}default:{}}k[b>>2]=h;b=g;return b|0}function Af(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;f=a+116|0;g=((m[(k[f>>2]|0)+4>>1]|0)*6|0)+10|0;h=Zc(g)|0;if(!h){b=0;return b|0}zb(h,g,4);zb(h+4|0,1667523942,4);zb(h+8|0,m[(k[f>>2]|0)+4>>1]|0,2);a=k[f>>2]|0;if(j[a+4>>1]|0){d=0;c=0;e=h+10|0;while(1){zb(e,m[(k[a>>2]|0)+(d*6|0)>>1]|0,2);zb(e+2|0,m[(k[k[f>>2]>>2]|0)+(d*6|0)+2>>1]|0,2);zb(e+4|0,m[(k[k[f>>2]>>2]|0)+(d*6|0)+4>>1]|0,2);c=c+1<<16>>16;a=k[f>>2]|0;if((c&65535)>=(m[a+4>>1]|0))break;else{d=c&65535;e=e+6|0}}}k[b>>2]=g;b=h;return b|0}function Bf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;f=r;r=r+32|0;e=f+16|0;if((c|0)!=14){cc(d,1,18526,f)|0;e=0;r=f;return e|0}Ab(b,a+16|0,4);Ab(b+4|0,a+12|0,4);c=a+20|0;Ab(b+8|0,c,2);c=_c(k[c>>2]|0,12)|0;k[a+72>>2]=c;if(!c){cc(d,1,18559,f+8|0)|0;e=0;r=f;return e|0}Ab(b+10|0,a+24|0,1);c=a+28|0;Ab(b+11|0,c,1);c=k[c>>2]|0;if((c|0)!=7){k[e>>2]=c;cc(d,4,18608,e)|0}Ab(b+12|0,a+32|0,1);Ab(b+13|0,a+36|0,1);e=1;r=f;return e|0}function Cf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0;x=r;r=r+80|0;g=x+40|0;t=x+32|0;j=x+24|0;h=x+16|0;u=x+72|0;s=x+68|0;o=x+64|0;p=x+60|0;m=x+56|0;q=x+52|0;n=x+48|0;l=x+44|0;if(c>>>0<3){cc(d,1,18199,x)|0;w=0;r=x;return w|0}v=a+108|0;w=a+124|0;if(i[w>>0]|0){cc(d,4,18231,x+8|0)|0;w=1;r=x;return w|0}f=a+40|0;Ab(b,f,1);Ab(b+1|0,a+52|0,1);Ab(b+2|0,a+44|0,1);e=b+3|0;f=k[f>>2]|0;switch(f|0){case 1:{if(c>>>0<7){k[h>>2]=c;cc(d,1,18340,h)|0;w=0;r=x;return w|0}f=a+48|0;if(c>>>0>7?(k[f>>2]|0)!=14:0){k[j>>2]=c;cc(d,2,18340,j)|0}Ab(e,f,4);if((k[f>>2]|0)==14){e=Zc(36)|0;k[e>>2]=14;k[n>>2]=0;k[m>>2]=0;k[o>>2]=0;k[q>>2]=0;k[p>>2]=0;k[s>>2]=0;k[l>>2]=4470064;f=e+4|0;k[f>>2]=1145390592;switch(c|0){case 35:{Ab(b+7|0,s,4);Ab(b+11|0,o,4);Ab(b+15|0,p,4);Ab(b+19|0,m,4);Ab(b+23|0,q,4);Ab(b+27|0,n,4);Ab(b+31|0,l,4);k[f>>2]=0;break}case 7:break;default:{k[t>>2]=c;cc(d,2,18376,t)|0}}k[e+8>>2]=k[s>>2];k[e+16>>2]=k[p>>2];k[e+24>>2]=k[q>>2];k[e+12>>2]=k[o>>2];k[e+20>>2]=k[m>>2];k[e+28>>2]=k[n>>2];k[e+32>>2]=k[l>>2];k[v>>2]=e;k[a+112>>2]=0}i[w>>0]=1;w=1;r=x;return w|0}case 2:{g=c+-3|0;f=a+112|0;k[f>>2]=g;a=_c(1,g)|0;k[v>>2]=a;if(!a){k[f>>2]=0;w=0;r=x;return w|0}if((c|0)>3){f=0;while(1){Ab(e,u,1);i[(k[v>>2]|0)+f>>0]=k[u>>2];f=f+1|0;if((f|0)==(g|0))break;else e=e+1|0}}i[w>>0]=1;w=1;r=x;return w|0}default:{if(f>>>0<=2){w=1;r=x;return w|0}k[g>>2]=f;cc(d,4,18420,g)|0;w=1;r=x;return w|0}}return 0}function Df(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;h=r;r=r+16|0;f=h;e=k[a+24>>2]|0;if((e|0)!=255){k[f>>2]=e;cc(d,2,18053,f)|0}g=a+20|0;if((k[g>>2]|0)!=(c|0)){cc(d,1,18167,h+8|0)|0;g=0;r=h;return g|0}if(!c){g=1;r=h;return g|0}f=a+72|0;e=0;while(1){Ab(b,(k[f>>2]|0)+(e*12|0)+8|0,1);e=e+1|0;if(e>>>0>=(k[g>>2]|0)>>>0){b=1;break}else b=b+1|0}r=h;return b|0}function Ef(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,m=0,n=0,o=0,p=0,q=0;q=r;r=r+16|0;e=q;p=q+12|0;f=a+120|0;if(c>>>0<3|(k[f>>2]|0)!=0){c=0;r=q;return c|0}Ab(b,p,2);g=k[p>>2]|0;o=g&65535;if((o+-1|0)>>>0>1023){k[e>>2]=o;cc(d,1,17970,e)|0;c=0;r=q;return c|0}Ab(b+2|0,p,1);n=k[p>>2]&65535;if(!n){cc(d,1,18008,q+8|0)|0;c=0;r=q;return c|0}if((n+3|0)>>>0>c>>>0){c=0;r=q;return c|0}e=Zc(ha(o<<2,n)|0)|0;if(!e){c=0;r=q;return c|0}m=Zc(n)|0;if(!m){cd(e);c=0;r=q;return c|0}h=Zc(n)|0;if(!h){cd(e);cd(m);c=0;r=q;return c|0}a=Zc(20)|0;if(!a){cd(e);cd(m);cd(h);c=0;r=q;return c|0}k[a+4>>2]=h;k[a+8>>2]=m;k[a>>2]=e;j[a+16>>1]=g;i[a+18>>0]=k[p>>2];k[a+12>>2]=0;k[f>>2]=a;a=b+3|0;d=0;f=0;do{Ab(a,p,1);a=a+1|0;i[m+d>>0]=(k[p>>2]&127)+1;i[h+d>>0]=(k[p>>2]|0)>>>7&1;f=f+1<<16>>16;d=f&65535}while(d>>>0<n>>>0);if(!o){c=1;r=q;return c|0}d=0;a:while(1){g=0;f=e;h=0;while(1){e=((l[m+g>>0]|0)+7|0)>>>3;e=e>>>0>4?4:e;if((a-b+e|0)>(c|0)){a=0;e=22;break a}Ab(a,p,e);a=a+e|0;k[f>>2]=k[p>>2];e=f+4|0;h=h+1<<16>>16;g=h&65535;if(g>>>0>=n>>>0)break;else f=e}d=d+1<<16>>16;if((d&65535)>>>0>=o>>>0){a=1;e=22;break}}if((e|0)==22){r=q;return a|0}return 0}function Ff(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;h=r;r=r+32|0;g=h+20|0;f=a+120|0;a=k[f>>2]|0;if(!a){cc(d,1,17860,h)|0;g=0;r=h;return g|0}if(k[a+12>>2]|0){cc(d,1,17906,h+8|0)|0;g=0;r=h;return g|0}e=i[a+18>>0]|0;a=(e&255)<<2;if(a>>>0>c>>>0){cc(d,1,17937,h+16|0)|0;g=0;r=h;return g|0}d=Zc(a)|0;if(!d){g=0;r=h;return g|0}if(e<<24>>24){a=b;c=0;while(1){Ab(a,g,2);j[d+(c<<2)>>1]=k[g>>2];Ab(a+2|0,g,1);i[d+(c<<2)+2>>0]=k[g>>2];Ab(a+3|0,g,1);i[d+(c<<2)+3>>0]=k[g>>2];c=c+1|0;if((c&255)<<24>>24==e<<24>>24)break;else a=a+4|0}}k[(k[f>>2]|0)+12>>2]=d;g=1;r=h;return g|0}function Gf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;h=r;r=r+32|0;g=h+20|0;f=a+116|0;if(k[f>>2]|0){g=0;r=h;return g|0}if(c>>>0<2){cc(d,1,17766,h)|0;g=0;r=h;return g|0}Ab(b,g,2);a=k[g>>2]|0;e=a&65535;if(!e){cc(d,1,17799,h+8|0)|0;g=0;r=h;return g|0}if(((e*6|0)+2|0)>>>0>c>>>0){cc(d,1,17766,h+16|0)|0;g=0;r=h;return g|0}c=Zc(a*6|0)|0;if(!c){g=0;r=h;return g|0}a=Zc(8)|0;k[f>>2]=a;if(!a){cd(c);g=0;r=h;return g|0}k[a>>2]=c;d=k[g>>2]&65535;j[a+4>>1]=d;if(!(d<<16>>16)){g=1;r=h;return g|0}else{e=0;a=b}do{b=e&65535;Ab(a+2|0,g,2);j[c+(b*6|0)>>1]=k[g>>2];Ab(a+4|0,g,2);a=a+6|0;j[c+(b*6|0)+2>>1]=k[g>>2];Ab(a,g,2);j[c+(b*6|0)+4>>1]=k[g>>2];e=e+1<<16>>16}while((e&65535)<(m[(k[f>>2]|0)+4>>1]|0));a=1;r=h;return a|0}function Hf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;f=r;r=r+32|0;e=f+20|0;a=a+100|0;if(k[a>>2]|0){cc(d,1,19149,f)|0;d=0;r=f;return d|0}if((c|0)!=4){cc(d,1,19203,f+8|0)|0;d=0;r=f;return d|0}Ab(b,e,4);if((k[e>>2]|0)==218793738){k[a>>2]=k[a>>2]|1;d=1;r=f;return d|0}else{cc(d,1,19237,f+16|0)|0;d=0;r=f;return d|0}return 0}function If(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;h=r;r=r+32|0;f=h+24|0;g=a+100|0;if((k[g>>2]|0)!=1){cc(d,1,19030,h)|0;g=0;r=h;return g|0}if(c>>>0<8){cc(d,1,19080,h+8|0)|0;g=0;r=h;return g|0}Ab(b,a+56|0,4);Ab(b+4|0,a+60|0,4);b=b+8|0;c=c+-8|0;if(c&3){cc(d,1,19080,h+16|0)|0;g=0;r=h;return g|0}c=c>>>2;e=a+64|0;k[e>>2]=c;if(c){c=_c(c,4)|0;k[a+68>>2]=c;if(!c){cc(d,1,19116,f)|0;g=0;r=h;return g|0}if(k[e>>2]|0){a=a+68|0;c=0;while(1){Ab(b,(k[a>>2]|0)+(c<<2)|0,4);c=c+1|0;if(c>>>0>=(k[e>>2]|0)>>>0)break;else b=b+4|0}}}k[g>>2]=k[g>>2]|2;g=1;r=h;return g|0}function Jf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;A=r;r=r+96|0;y=A+72|0;s=A+64|0;q=A+56|0;p=A+48|0;w=A+40|0;v=A+32|0;u=A+24|0;t=A+16|0;o=A+8|0;m=A+80|0;n=A+76|0;x=a+100|0;if(!(k[x>>2]&2)){cc(d,1,18698,A)|0;z=0;r=A;return z|0}l=a+104|0;k[l>>2]=0;do if(c){i=b;b=0;a:while(1){if(c>>>0<8){z=6;break}Ab(i,m,4);e=k[m>>2]|0;Ab(i+4|0,m,4);h=k[m>>2]|0;switch(e|0){case 0:{z=14;break a}case 1:{if(c>>>0<16){z=9;break a}Ab(i+8|0,n,4);if(k[n>>2]|0){z=11;break a}Ab(i+12|0,m,4);e=k[m>>2]|0;if(!e){z=13;break a}else f=16;break}default:f=8}if(e>>>0<f>>>0){z=16;break}if(c>>>0<e>>>0){z=19;break}g=(h|0)==1768449138;if(!g)if((h|0)!=1668246642)if((h|0)!=1651532643)if((h|0)!=1885564018)if((h|0)!=1668112752)if((h|0)==1667523942){j=1148;z=26}else k[l>>2]=k[l>>2]|2147483647;else{j=1140;z=26}else{j=1132;z=26}else{j=1124;z=26}else{j=1116;z=26}else{j=1108;z=26}if((z|0)==26?(z=0,(hb[k[j+4>>2]&63](a,i+f|0,e-f|0,d)|0)==0):0){b=0;z=32;break}b=g?1:b;if((c|0)==(e|0)){z=29;break}else{i=i+e|0;c=c-e|0}}if((z|0)==6)cc(d,1,18743,o)|0;else if((z|0)==9)cc(d,1,18783,t)|0;else if((z|0)==11)cc(d,1,17167,u)|0;else if((z|0)==13)cc(d,1,17237,v)|0;else if((z|0)==14)cc(d,1,17237,w)|0;else if((z|0)==16)cc(d,1,18827,p)|0;else if((z|0)==19){cc(d,1,18899,s)|0;z=0;r=A;return z|0}else if((z|0)==29){if(!b)break;k[x>>2]=k[x>>2]|4;z=1;r=A;return z|0}else if((z|0)==32){r=A;return b|0}cc(d,1,18856,q)|0;z=0;r=A;return z|0}while(0);cc(d,1,18971,y)|0;z=0;r=A;return z|0}function Kf(){return 8}function Lf(){return 32}function Mf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0;if(!d)return;else e=0;do{l=a+(e<<2)|0;h=k[l>>2]|0;i=b+(e<<2)|0;g=k[i>>2]|0;f=c+(e<<2)|0;j=k[f>>2]|0;k[l>>2]=(g<<1)+h+j>>2;k[i>>2]=j-g;k[f>>2]=h-g;e=e+1|0}while((e|0)!=(d|0));return}function Nf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0;if(!d)return;else e=0;do{j=a+(e<<2)|0;i=b+(e<<2)|0;g=k[i>>2]|0;f=c+(e<<2)|0;l=k[f>>2]|0;h=(k[j>>2]|0)-(l+g>>2)|0;k[j>>2]=h+l;k[i>>2]=h;k[f>>2]=h+g;e=e+1|0}while((e|0)!=(d|0));return}function Of(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;if(!d)return;else e=0;do{o=a+(e<<2)|0;u=k[o>>2]|0;j=b+(e<<2)|0;t=k[j>>2]|0;f=c+(e<<2)|0;s=k[f>>2]|0;i=((u|0)<0)<<31>>31;q=hj(u|0,i|0,2449,0)|0;q=aj(q|0,L|0,4096,0)|0;q=bj(q|0,L|0,13)|0;h=((t|0)<0)<<31>>31;r=hj(t|0,h|0,4809,0)|0;r=aj(r|0,L|0,4096,0)|0;r=bj(r|0,L|0,13)|0;g=((s|0)<0)<<31>>31;p=hj(s|0,g|0,934,0)|0;p=aj(p|0,L|0,4096,0)|0;p=bj(p|0,L|0,13)|0;l=hj(u|0,i|0,1382,0)|0;l=aj(l|0,L|0,4096,0)|0;l=bj(l|0,L|0,13)|0;m=hj(t|0,h|0,2714,0)|0;m=aj(m|0,L|0,4096,0)|0;m=bj(m|0,L|0,13)|0;n=$i(s|0,g|0,12)|0;n=aj(n|0,L|0,4096,0)|0;n=bj(n|0,L|0,13)|0;i=$i(u|0,i|0,12)|0;i=aj(i|0,L|0,4096,0)|0;i=bj(i|0,L|0,13)|0;h=hj(t|0,h|0,3430,0)|0;h=aj(h|0,L|0,4096,0)|0;h=bj(h|0,L|0,13)|0;g=hj(s|0,g|0,666,0)|0;g=aj(g|0,L|0,4096,0)|0;g=bj(g|0,L|0,13)|0;k[o>>2]=r+q+p;k[j>>2]=n-(m+l);k[f>>2]=i-h-g;e=e+1|0}while((e|0)!=(d|0));return}function Pf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0.0,h=0.0,i=0,j=0.0,k=0;if(!d)return;else e=0;do{k=a+(e<<2)|0;h=+o[k>>2];i=b+(e<<2)|0;g=+o[i>>2];f=c+(e<<2)|0;j=+o[f>>2];o[k>>2]=h+j*1.4019999504089355;o[i>>2]=h-g*.3441300094127655-j*.714139997959137;o[f>>2]=h+g*1.7719999551773071;e=e+1|0}while((e|0)!=(d|0));return}function Qf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,p=0,q=0;f=ha(d,d)|0;n=Zc(f+d<<2)|0;if(!n){d=0;return d|0}if(f){g=0;e=a;while(1){k[n+(g+d<<2)>>2]=~~(+o[e>>2]*8192.0);g=g+1|0;if((g|0)==(f|0))break;else e=e+4|0}}if(b){l=(d|0)==0;m=0;do{if(!l){e=0;do{k[n+(e<<2)>>2]=k[k[c+(e<<2)>>2]>>2];e=e+1|0}while((e|0)!=(d|0));if(!l){a=0;i=n;do{i=i+(d<<2)|0;f=c+(a<<2)|0;e=k[f>>2]|0;k[e>>2]=0;g=0;h=0;j=i;while(1){p=k[j>>2]|0;q=k[n+(h<<2)>>2]|0;p=hj(q|0,((q|0)<0)<<31>>31|0,p|0,((p|0)<0)<<31>>31|0)|0;p=aj(p|0,L|0,4096,0)|0;p=bj(p|0,L|0,13)|0;g=p+g|0;k[e>>2]=g;h=h+1|0;if((h|0)==(d|0))break;else j=j+4|0}k[f>>2]=e+4;a=a+1|0}while((a|0)!=(d|0))}}m=m+1|0}while((m|0)!=(b|0))}cd(n);q=1;return q|0}function Rf(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0.0,g=0,h=0,i=0,j=0,l=0,m=0,n=0;l=Zc(d<<3)|0;if(!l){d=0;return d|0}if(b){m=(d|0)==0;n=0;do{if(!m){e=0;do{k[l+(e<<2)>>2]=k[k[c+(e<<2)>>2]>>2];e=e+1|0}while((e|0)!=(d|0));if(!m){i=0;j=a;while(1){e=l+(i+d<<2)|0;o[e>>2]=0.0;f=0.0;g=0;h=j;while(1){f=f+ +o[h>>2]*+o[l+(g<<2)>>2];o[e>>2]=f;g=g+1|0;if((g|0)==(d|0))break;else h=h+4|0}g=c+(i<<2)|0;h=k[g>>2]|0;k[g>>2]=h+4;o[h>>2]=f;i=i+1|0;if((i|0)==(d|0))break;else j=j+(d<<2)|0}}}n=n+1|0}while((n|0)!=(b|0))}cd(l);d=1;return d|0}function Sf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0,f=0,g=0,h=0,i=0.0;if(!b)return;else h=0;do{g=a+(h<<3)|0;p[g>>3]=0.0;d=0.0;e=0;f=h;while(1){i=+o[c+(f<<2)>>2];d=d+i*i;e=e+1|0;if((e|0)==(b|0))break;else f=f+b|0}i=+X(+d);p[g>>3]=i;h=h+1|0}while((h|0)!=(b|0));return}function Tf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;F=r;r=r+32|0;B=F+28|0;w=F+24|0;x=F+20|0;y=F+16|0;z=F+12|0;A=F+8|0;h=F+4|0;j=F;d=b+76|0;D=k[d>>2]|0;C=D+(c*5640|0)+420|0;E=(k[C>>2]|0)+1|0;l=a+16|0;v=Zc((k[l>>2]|0)*528|0)|0;if(!v){E=0;r=F;return E|0}u=Zc(k[l>>2]<<2)|0;if(!u){cd(v);E=0;r=F;return E|0}d=Zf(a,k[d>>2]|0,c)|0;if(!d){cd(v);cd(u);E=0;r=F;return E|0}e=k[l>>2]|0;if(e){f=0;g=v;while(1){k[u+(f<<2)>>2]=g;f=f+1|0;if(f>>>0>=e>>>0)break;else g=g+528|0}}_f(a,b,c,x,y,z,A,h,j,w,B,u);s=k[w>>2]|0;p=ha(k[l>>2]|0,s)|0;q=ha(k[B>>2]|0,p)|0;t=D+(c*5640|0)+8|0;o=_c(ha((k[t>>2]|0)+1|0,q)|0,2)|0;f=d+4|0;k[f>>2]=o;if(!o){cd(v);cd(u);e=k[f>>2]|0;if(e){cd(e);k[f>>2]=0}if(E){a=d;m=0;while(1){l=a+196|0;e=k[l>>2]|0;if(e){b=a+192|0;f=k[b>>2]|0;if(f){j=0;while(1){g=e+12|0;h=k[g>>2]|0;if(h){cd(h);k[g>>2]=0;f=k[b>>2]|0}j=j+1|0;if(j>>>0>=f>>>0)break;else e=e+16|0}e=k[l>>2]|0}cd(e);k[l>>2]=0}m=m+1|0;if((m|0)==(E|0))break;else a=a+232|0}}cd(d);E=0;r=F;return E|0}e=k[d+196>>2]|0;o=k[a+24>>2]|0;k[d+200>>2]=k[x>>2];k[d+204>>2]=k[z>>2];k[d+208>>2]=k[y>>2];k[d+212>>2]=k[A>>2];k[d+20>>2]=1;k[d+16>>2]=s;k[d+12>>2]=p;k[d+8>>2]=q;l=k[d+192>>2]|0;if(l){a=0;b=o;while(1){g=k[e+12>>2]|0;f=k[u+(a<<2)>>2]|0;k[e>>2]=k[b>>2];k[e+4>>2]=k[b+4>>2];j=k[e+8>>2]|0;if(j){h=0;while(1){k[g>>2]=k[f>>2];k[g+4>>2]=k[f+4>>2];k[g+8>>2]=k[f+8>>2];k[g+12>>2]=k[f+12>>2];h=h+1|0;if(h>>>0>=j>>>0)break;else{f=f+16|0;g=g+16|0}}}a=a+1|0;if(a>>>0>=l>>>0)break;else{e=e+16|0;b=b+52|0}}}if(E>>>0>1){l=d;n=1;do{e=k[l+428>>2]|0;k[l+432>>2]=k[x>>2];k[l+436>>2]=k[z>>2];k[l+440>>2]=k[y>>2];k[l+444>>2]=k[A>>2];k[l+252>>2]=1;k[l+248>>2]=s;k[l+244>>2]=p;k[l+240>>2]=q;a=k[l+424>>2]|0;if(a){m=0;b=o;while(1){g=k[e+12>>2]|0;f=k[u+(m<<2)>>2]|0;k[e>>2]=k[b>>2];k[e+4>>2]=k[b+4>>2];j=k[e+8>>2]|0;if(j){h=0;while(1){k[g>>2]=k[f>>2];k[g+4>>2]=k[f+4>>2];k[g+8>>2]=k[f+8>>2];k[g+12>>2]=k[f+12>>2];h=h+1|0;if(h>>>0>=j>>>0)break;else{f=f+16|0;g=g+16|0}}}m=m+1|0;if(m>>>0>=a>>>0)break;else{e=e+16|0;b=b+52|0}}}k[l+236>>2]=k[l+4>>2];l=l+232|0;n=n+1|0}while((n|0)!=(E|0))}cd(v);cd(u);l=k[w>>2]|0;if(!(i[D+(c*5640|0)+5636>>0]&4)){b=k[B>>2]|0;j=(k[C>>2]|0)+1|0;if(!j){E=d;r=F;return E|0}h=k[D+(c*5640|0)+4>>2]|0;e=k[t>>2]|0;f=d;g=0;while(1){k[f+80>>2]=h;k[f+40>>2]=1;k[f+44>>2]=0;k[f+48>>2]=0;k[f+64>>2]=0;k[f+68>>2]=0;k[f+56>>2]=b;k[f+60>>2]=k[f+192>>2];k[f+52>>2]=e;k[f+72>>2]=l;g=g+1|0;if((g|0)==(j|0))break;else f=f+232|0}r=F;return d|0}else{g=(k[C>>2]|0)+1|0;if(!g){E=d;r=F;return E|0}h=d;e=D+(c*5640|0)+424|0;f=0;while(1){k[h+80>>2]=k[e+36>>2];k[h+40>>2]=1;k[h+44>>2]=k[e>>2];k[h+48>>2]=k[e+4>>2];k[h+64>>2]=0;k[h+68>>2]=0;k[h+56>>2]=k[e+12>>2];k[h+60>>2]=k[e+16>>2];k[h+52>>2]=k[e+8>>2];k[h+72>>2]=l;f=f+1|0;if((f|0)==(g|0))break;else{h=h+232|0;e=e+148|0}}r=F;return d|0}return 0}function Uf(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;if(!a)return;c=a+4|0;d=k[c>>2]|0;if(d){cd(d);k[c>>2]=0}if(b){j=a;l=0;while(1){i=j+196|0;c=k[i>>2]|0;if(c){h=j+192|0;d=k[h>>2]|0;if(d){g=0;while(1){e=c+12|0;f=k[e>>2]|0;if(f){cd(f);k[e>>2]=0;d=k[h>>2]|0}g=g+1|0;if(g>>>0>=d>>>0)break;else c=c+16|0}c=k[i>>2]|0}cd(c);k[i>>2]=0}l=l+1|0;if((l|0)==(b|0))break;else j=j+232|0}}cd(a);return}function Vf(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;L=r;r=r+32|0;G=L+28|0;F=L+24|0;B=L+20|0;C=L+16|0;D=L+12|0;E=L+8|0;H=L+4|0;I=L;J=b+76|0;x=k[J>>2]|0;K=(k[x+(c*5640|0)+420>>2]|0)+1|0;A=a+16|0;z=Zc((k[A>>2]|0)*528|0)|0;if(!z){c=0;r=L;return c|0}y=Zc(k[A>>2]<<2)|0;if(!y){cd(z);c=0;r=L;return c|0}e=Zf(a,k[J>>2]|0,c)|0;if(!e){cd(z);cd(y);c=0;r=L;return c|0}f=k[A>>2]|0;if(f){g=0;h=z;while(1){k[y+(g<<2)>>2]=h;g=g+1|0;if(g>>>0>=f>>>0)break;else h=h+528|0}}_f(a,b,c,B,C,D,E,H,I,F,G,y);u=k[F>>2]|0;v=ha(k[A>>2]|0,u)|0;w=ha(k[G>>2]|0,v)|0;i[e>>0]=(l[b+93>>0]|0)>>>3&1;t=_c(ha(k[x+(c*5640|0)+8>>2]|0,w)|0,2)|0;g=e+4|0;k[g>>2]=t;if(!t){cd(z);cd(y);f=k[g>>2]|0;if(f){cd(f);k[g>>2]=0}if(K){p=e;q=0;while(1){o=p+196|0;f=k[o>>2]|0;if(f){n=p+192|0;g=k[n>>2]|0;if(g){m=0;while(1){h=f+12|0;a=k[h>>2]|0;if(a){cd(a);k[h>>2]=0;g=k[n>>2]|0}m=m+1|0;if(m>>>0>=g>>>0)break;else f=f+16|0}f=k[o>>2]|0}cd(f);k[o>>2]=0}q=q+1|0;if((q|0)==(K|0))break;else p=p+232|0}}cd(e);c=0;r=L;return c|0}f=k[e+196>>2]|0;t=k[a+24>>2]|0;k[e+200>>2]=k[B>>2];k[e+204>>2]=k[D>>2];k[e+208>>2]=k[C>>2];k[e+212>>2]=k[E>>2];k[e+224>>2]=k[H>>2];k[e+228>>2]=k[I>>2];k[e+20>>2]=1;k[e+16>>2]=u;k[e+12>>2]=v;k[e+8>>2]=w;o=k[e+192>>2]|0;if(o){p=0;n=t;while(1){h=k[f+12>>2]|0;g=k[y+(p<<2)>>2]|0;k[f>>2]=k[n>>2];k[f+4>>2]=k[n+4>>2];m=k[f+8>>2]|0;if(m){a=0;while(1){k[h>>2]=k[g>>2];k[h+4>>2]=k[g+4>>2];k[h+8>>2]=k[g+8>>2];k[h+12>>2]=k[g+12>>2];a=a+1|0;if(a>>>0>=m>>>0)break;else{g=g+16|0;h=h+16|0}}}p=p+1|0;if(p>>>0>=o>>>0)break;else{f=f+16|0;n=n+52|0}}}if(K>>>0>1){o=e;s=1;do{f=k[o+428>>2]|0;k[o+432>>2]=k[B>>2];k[o+436>>2]=k[D>>2];k[o+440>>2]=k[C>>2];k[o+444>>2]=k[E>>2];k[o+456>>2]=k[H>>2];k[o+460>>2]=k[I>>2];k[o+252>>2]=1;k[o+248>>2]=u;k[o+244>>2]=v;k[o+240>>2]=w;p=k[o+424>>2]|0;if(p){q=0;n=t;while(1){h=k[f+12>>2]|0;g=k[y+(q<<2)>>2]|0;k[f>>2]=k[n>>2];k[f+4>>2]=k[n+4>>2];m=k[f+8>>2]|0;if(m){a=0;while(1){k[h>>2]=k[g>>2];k[h+4>>2]=k[g+4>>2];k[h+8>>2]=k[g+8>>2];k[h+12>>2]=k[g+12>>2];a=a+1|0;if(a>>>0>=m>>>0)break;else{g=g+16|0;h=h+16|0}}}q=q+1|0;if(q>>>0>=p>>>0)break;else{f=f+16|0;n=n+52|0}}}k[o+236>>2]=k[o+4>>2];o=o+232|0;s=s+1|0}while((s|0)!=(K|0))}cd(z);cd(y);do if(i[x+(c*5640|0)+5636>>0]&4){f=j[b>>1]|0;if((f&65535)>2){if(!((d|0)==1|(f&65535)<7))break}else if((d|0)!=1)break;$f(k[J>>2]|0,c,k[B>>2]|0,k[C>>2]|0,k[D>>2]|0,k[E>>2]|0,k[F>>2]|0,k[H>>2]|0,k[I>>2]|0);c=e;r=L;return c|0}while(0);w=k[A>>2]|0;v=k[B>>2]|0;u=k[C>>2]|0;t=k[D>>2]|0;s=k[E>>2]|0;q=k[F>>2]|0;p=k[G>>2]|0;o=k[H>>2]|0;n=k[I>>2]|0;f=k[J>>2]|0;h=(k[f+(c*5640|0)+420>>2]|0)+1|0;if(!h){c=e;r=L;return c|0}a=k[f+(c*5640|0)+8>>2]|0;m=k[f+(c*5640|0)+4>>2]|0;f=f+(c*5640|0)+424|0;g=0;while(1){k[f+76>>2]=0;k[f+92>>2]=w;k[f+72>>2]=0;k[f+88>>2]=p;k[f+68>>2]=0;k[f+84>>2]=a;k[f+36>>2]=m;k[f+80>>2]=0;k[f+96>>2]=q;k[f+100>>2]=v;k[f+104>>2]=u;k[f+108>>2]=t;k[f+112>>2]=s;k[f+116>>2]=o;k[f+120>>2]=n;g=g+1|0;if((g|0)==(h|0))break;else f=f+148|0}r=L;return e|0}function Wf(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0;Q=k[b+76>>2]|0;R=Q+(c*5640|0)+424+(d*148|0)+36|0;S=dd(k[R>>2]|0)|0;k[a+(d*232|0)+40>>2]=1;T=a+(d*232|0)+44|0;k[a+(d*232|0)+80>>2]=k[R>>2];do if(i[b+93>>0]&8){h=j[b>>1]|0;if((h&65535)>2){if(!((g|0)==1&(h&65535)>6|(h+-3&65535)<4))break}else if(!((g|0)==1|(h+-3&65535)<4))break;h=f+1|0;a:do if((h|0)<4){g=Q+(c*5640|0)+424+(d*148|0)+72|0;l=Q+(c*5640|0)+424+(d*148|0)+88|0;m=a+(d*232|0)+56|0;n=Q+(c*5640|0)+424+(d*148|0)+76|0;o=a+(d*232|0)+48|0;p=Q+(c*5640|0)+424+(d*148|0)+92|0;q=a+(d*232|0)+60|0;r=Q+(c*5640|0)+424+(d*148|0)+68|0;s=a+(d*232|0)+64|0;t=Q+(c*5640|0)+424+(d*148|0)+84|0;u=a+(d*232|0)+52|0;v=Q+(c*5640|0)+424+(d*148|0)+80|0;w=a+(d*232|0)+68|0;x=Q+(c*5640|0)+424+(d*148|0)+96|0;y=a+(d*232|0)+72|0;z=Q+(c*5640|0)+424+(d*148|0)+100|0;A=a+(d*232|0)+96|0;B=Q+(c*5640|0)+424+(d*148|0)+108|0;C=a+(d*232|0)+104|0;D=Q+(c*5640|0)+424+(d*148|0)+104|0;E=a+(d*232|0)+100|0;F=Q+(c*5640|0)+424+(d*148|0)+112|0;G=a+(d*232|0)+108|0;while(1){b:do switch(i[S+h>>0]|0){case 82:{k[T>>2]=k[g>>2];k[m>>2]=k[l>>2];break}case 67:{k[o>>2]=k[n>>2];k[q>>2]=k[p>>2];break}case 76:{k[s>>2]=k[r>>2];k[u>>2]=k[t>>2];break}case 80:if((k[R>>2]|0)>>>0<2){k[w>>2]=k[v>>2];k[y>>2]=k[x>>2];break b}else{k[A>>2]=k[z>>2];k[C>>2]=k[B>>2];k[E>>2]=k[D>>2];k[G>>2]=k[F>>2];break b}default:{}}while(0);h=h+1|0;if((h|0)==4)break a}}while(0);h=(f|0)>-1;if(!e){if(!h)return;m=Q+(c*5640|0)+424+(d*148|0)+76|0;n=Q+(c*5640|0)+424+(d*148|0)+132|0;o=a+(d*232|0)+48|0;p=a+(d*232|0)+60|0;q=Q+(c*5640|0)+424+(d*148|0)+72|0;r=Q+(c*5640|0)+424+(d*148|0)+128|0;s=a+(d*232|0)+56|0;t=Q+(c*5640|0)+424+(d*148|0)+68|0;u=Q+(c*5640|0)+424+(d*148|0)+124|0;v=a+(d*232|0)+64|0;w=a+(d*232|0)+52|0;x=Q+(c*5640|0)+424+(d*148|0)+80|0;y=Q+(c*5640|0)+424+(d*148|0)+136|0;z=a+(d*232|0)+68|0;A=a+(d*232|0)+72|0;B=Q+(c*5640|0)+424+(d*148|0)+100|0;C=Q+(c*5640|0)+424+(d*148|0)+140|0;D=Q+(c*5640|0)+424+(d*148|0)+108|0;E=Q+(c*5640|0)+424+(d*148|0)+144|0;F=a+(d*232|0)+96|0;G=Q+(c*5640|0)+424+(d*148|0)+116|0;e=a+(d*232|0)+100|0;H=a+(d*232|0)+104|0;l=Q+(c*5640|0)+424+(d*148|0)+120|0;g=a+(d*232|0)+108|0;h=f;while(1){c:do switch(i[S+h>>0]|0){case 67:{d=k[m>>2]|0;k[o>>2]=d;d=d+1|0;k[p>>2]=d;k[n>>2]=d;break}case 82:{d=k[q>>2]|0;k[T>>2]=d;d=d+1|0;k[s>>2]=d;k[r>>2]=d;break}case 76:{d=k[t>>2]|0;k[v>>2]=d;d=d+1|0;k[w>>2]=d;k[u>>2]=d;break}case 80:if((k[R>>2]|0)>>>0<2){d=k[x>>2]|0;k[z>>2]=d;d=d+1|0;k[A>>2]=d;k[y>>2]=d;break c}else{d=k[B>>2]|0;f=k[D>>2]|0;k[F>>2]=d;c=k[G>>2]|0;c=c+d-((d>>>0)%(c>>>0)|0)|0;k[e>>2]=c;k[H>>2]=f;d=k[l>>2]|0;d=d+f-((f>>>0)%(d>>>0)|0)|0;k[g>>2]=d;k[C>>2]=c;k[E>>2]=d;break c}default:{}}while(0);if((h|0)>0)h=h+-1|0;else break}return}if(!h)return;L=Q+(c*5640|0)+424+(d*148|0)+128|0;M=Q+(c*5640|0)+424+(d*148|0)+88|0;N=Q+(c*5640|0)+424+(d*148|0)+72|0;O=a+(d*232|0)+56|0;P=Q+(c*5640|0)+424+(d*148|0)+132|0;p=Q+(c*5640|0)+424+(d*148|0)+92|0;q=Q+(c*5640|0)+424+(d*148|0)+76|0;r=a+(d*232|0)+48|0;s=a+(d*232|0)+60|0;t=Q+(c*5640|0)+424+(d*148|0)+124|0;u=Q+(c*5640|0)+424+(d*148|0)+84|0;v=Q+(c*5640|0)+424+(d*148|0)+68|0;w=a+(d*232|0)+64|0;x=a+(d*232|0)+52|0;y=Q+(c*5640|0)+424+(d*148|0)+136|0;z=Q+(c*5640|0)+424+(d*148|0)+96|0;A=Q+(c*5640|0)+424+(d*148|0)+80|0;B=a+(d*232|0)+68|0;C=a+(d*232|0)+72|0;D=Q+(c*5640|0)+424+(d*148|0)+140|0;E=Q+(c*5640|0)+424+(d*148|0)+104|0;F=a+(d*232|0)+96|0;G=Q+(c*5640|0)+424+(d*148|0)+116|0;e=a+(d*232|0)+100|0;H=Q+(c*5640|0)+424+(d*148|0)+144|0;I=Q+(c*5640|0)+424+(d*148|0)+112|0;J=a+(d*232|0)+104|0;K=Q+(c*5640|0)+424+(d*148|0)+120|0;n=a+(d*232|0)+108|0;o=Q+(c*5640|0)+424+(d*148|0)+100|0;m=Q+(c*5640|0)+424+(d*148|0)+108|0;l=f;h=1;while(1){g=S+l|0;d:do switch(i[g>>0]|0){case 67:{f=k[P>>2]|0;k[r>>2]=f+-1;k[s>>2]=f;break}case 82:{f=k[L>>2]|0;k[T>>2]=f+-1;k[O>>2]=f;break}case 76:{f=k[t>>2]|0;k[w>>2]=f+-1;k[x>>2]=f;break}case 80:if((k[R>>2]|0)>>>0<2){f=k[y>>2]|0;k[B>>2]=f+-1;k[C>>2]=f;break d}else{f=k[D>>2]|0;Q=k[G>>2]|0;k[F>>2]=f-Q-((f>>>0)%(Q>>>0)|0);k[e>>2]=f;f=k[H>>2]|0;Q=k[K>>2]|0;k[J>>2]=f-Q-((f>>>0)%(Q>>>0)|0);k[n>>2]=f;break d}default:{}}while(0);e:do if((h|0)==1)switch(i[g>>0]|0){case 82:{h=k[L>>2]|0;if((h|0)!=(k[M>>2]|0)){k[T>>2]=h;h=h+1|0;k[O>>2]=h;k[L>>2]=h;h=0;break e}if(!(ag(l+-1|0,b,c,d,S)|0)){h=0;break e}h=k[N>>2]|0;k[T>>2]=h;h=h+1|0;k[O>>2]=h;k[L>>2]=h;h=1;break e}case 67:{h=k[P>>2]|0;if((h|0)!=(k[p>>2]|0)){k[r>>2]=h;h=h+1|0;k[s>>2]=h;k[P>>2]=h;h=0;break e}if(!(ag(l+-1|0,b,c,d,S)|0)){h=0;break e}h=k[q>>2]|0;k[r>>2]=h;h=h+1|0;k[s>>2]=h;k[P>>2]=h;h=1;break e}case 76:{h=k[t>>2]|0;if((h|0)!=(k[u>>2]|0)){k[w>>2]=h;h=h+1|0;k[x>>2]=h;k[t>>2]=h;h=0;break e}if(!(ag(l+-1|0,b,c,d,S)|0)){h=0;break e}h=k[v>>2]|0;k[w>>2]=h;h=h+1|0;k[x>>2]=h;k[t>>2]=h;h=1;break e}case 80:{if((k[R>>2]|0)>>>0<2){h=k[y>>2]|0;if((h|0)!=(k[z>>2]|0)){k[B>>2]=h;h=h+1|0;k[C>>2]=h;k[y>>2]=h;h=0;break e}if(!(ag(l+-1|0,b,c,d,S)|0)){h=0;break e}h=k[A>>2]|0;k[B>>2]=h;h=h+1|0;k[C>>2]=h;k[y>>2]=h;h=1;break e}h=k[D>>2]|0;if(h>>>0<(k[E>>2]|0)>>>0){k[F>>2]=h;f=k[G>>2]|0;h=f+h-((h>>>0)%(f>>>0)|0)|0;k[e>>2]=h;k[D>>2]=h;h=0;break e}g=k[H>>2]|0;if(g>>>0<(k[I>>2]|0)>>>0){k[J>>2]=g;f=k[K>>2]|0;h=0;g=f+g-((g>>>0)%(f>>>0)|0)|0}else{if(!(ag(l+-1|0,b,c,d,S)|0)){h=0;break e}f=k[m>>2]|0;k[H>>2]=f;k[J>>2]=f;g=k[K>>2]|0;h=1;g=g+f-((f>>>0)%(g>>>0)|0)|0}k[n>>2]=g;k[H>>2]=g;Q=k[o>>2]|0;k[F>>2]=Q;f=k[G>>2]|0;f=f+Q-((Q>>>0)%(f>>>0)|0)|0;k[e>>2]=f;k[D>>2]=f;break e}default:{h=1;break e}}while(0);if((l|0)>0)l=l+-1|0;else break}return}while(0);k[T>>2]=k[Q+(c*5640|0)+424+(d*148|0)+72>>2];k[a+(d*232|0)+56>>2]=k[Q+(c*5640|0)+424+(d*148|0)+88>>2];k[a+(d*232|0)+48>>2]=k[Q+(c*5640|0)+424+(d*148|0)+76>>2];k[a+(d*232|0)+60>>2]=k[Q+(c*5640|0)+424+(d*148|0)+92>>2];k[a+(d*232|0)+64>>2]=k[Q+(c*5640|0)+424+(d*148|0)+68>>2];k[a+(d*232|0)+52>>2]=k[Q+(c*5640|0)+424+(d*148|0)+84>>2];k[a+(d*232|0)+68>>2]=k[Q+(c*5640|0)+424+(d*148|0)+80>>2];k[a+(d*232|0)+72>>2]=k[Q+(c*5640|0)+424+(d*148|0)+96>>2];k[a+(d*232|0)+96>>2]=k[Q+(c*5640|0)+424+(d*148|0)+100>>2];k[a+(d*232|0)+104>>2]=k[Q+(c*5640|0)+424+(d*148|0)+108>>2];k[a+(d*232|0)+100>>2]=k[Q+(c*5640|0)+424+(d*148|0)+104>>2];k[a+(d*232|0)+108>>2]=k[Q+(c*5640|0)+424+(d*148|0)+112>>2];return}function Xf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,M=0,N=0,O=0;H=k[b+76>>2]|0;J=k[b+24>>2]|0;N=(c>>>0)%(J>>>0)|0;J=(c>>>0)/(J>>>0)|0;K=k[b+4>>2]|0;G=k[b+12>>2]|0;F=(ha(G,N)|0)+K|0;M=k[a>>2]|0;M=(F|0)>(M|0)?F:M;K=(ha(G,N+1|0)|0)+K|0;N=k[a+8>>2]|0;N=(K|0)<(N|0)?K:N;K=k[b+8>>2]|0;G=k[b+16>>2]|0;F=(ha(G,J)|0)+K|0;I=k[a+4>>2]|0;I=(F|0)>(I|0)?F:I;K=(ha(G,J+1|0)|0)+K|0;J=k[a+12>>2]|0;J=(K|0)<(J|0)?K:J;K=k[a+16>>2]|0;if(!K){l=0;j=2147483647;h=2147483647;g=0}else{C=J+-1|0;D=N+-1|0;E=I+-1|0;F=M+-1|0;l=0;j=2147483647;h=2147483647;g=0;G=0;A=k[a+24>>2]|0;B=k[H+(c*5640|0)+5584>>2]|0;while(1){x=k[A>>2]|0;y=k[A+4>>2]|0;z=k[B+4>>2]|0;g=z>>>0>g>>>0?z:g;if(z){v=(C+y|0)/(y|0)|0;t=(D+x|0)/(x|0)|0;r=(E+y|0)/(y|0)|0;p=(F+x|0)/(x|0)|0;p=aj(p|0,((p|0)<0)<<31>>31|0,-1,-1)|0;q=L;r=aj(r|0,((r|0)<0)<<31>>31|0,-1,-1)|0;s=L;t=aj(t|0,((t|0)<0)<<31>>31|0,-1,-1)|0;u=L;v=aj(v|0,((v|0)<0)<<31>>31|0,-1,-1)|0;w=L;b=0;o=0;while(1){m=k[B+812+(o<<2)>>2]|0;n=k[B+944+(o<<2)>>2]|0;e=b+-1+z|0;f=x<<e+m;O=y<<n+e;j=j>>>0<f>>>0?j:f;h=h>>>0<O>>>0?h:O;O=$i(1,0,e|0)|0;f=L;b=aj(p|0,q|0,O|0,f|0)|0;b=Zi(b|0,L|0,e|0)|0;d=aj(r|0,s|0,O|0,f|0)|0;d=Zi(d|0,L|0,e|0)|0;a=aj(t|0,u|0,O|0,f|0)|0;a=Zi(a|0,L|0,e|0)|0;f=aj(v|0,w|0,O|0,f|0)|0;e=Zi(f|0,L|0,e|0)|0;f=$i(1,0,n|0)|0;f=aj(f|0,L|0,-1,-1)|0;f=aj(f|0,L|0,e|0,((e|0)<0)<<31>>31|0)|0;f=Zi(f|0,L|0,n|0)|0;if((b|0)==(a|0))b=0;else{O=$i(1,0,m|0)|0;O=aj(O|0,L|0,-1,-1)|0;O=aj(O|0,L|0,a|0,((a|0)<0)<<31>>31|0)|0;O=Zi(O|0,L|0,m|0)|0;b=(O<<m)-(b>>m<<m)>>m}a=ha(b,(d|0)==(e|0)?0:(f<<n)-(d>>n<<n)>>n)|0;l=a>>>0>l>>>0?a:l;a=o+1|0;if(a>>>0<z>>>0){b=~o;o=a}else break}}G=G+1|0;if(G>>>0>=K>>>0)break;else{A=A+52|0;B=B+1080|0}}}if(i[H+(c*5640|0)+5636>>0]&4){$f(H,c,M,N,I,J,l,j,h);return}d=(k[H+(c*5640|0)+420>>2]|0)+1|0;if(!d)return;e=k[H+(c*5640|0)+8>>2]|0;f=k[H+(c*5640|0)+4>>2]|0;b=H+(c*5640|0)+424|0;a=0;while(1){k[b+76>>2]=0;k[b+92>>2]=K;k[b+72>>2]=0;k[b+88>>2]=g;k[b+68>>2]=0;k[b+84>>2]=e;k[b+36>>2]=f;k[b+80>>2]=0;k[b+96>>2]=l;k[b+100>>2]=M;k[b+104>>2]=N;k[b+108>>2]=I;k[b+112>>2]=J;k[b+116>>2]=j;k[b+120>>2]=h;a=a+1|0;if((a|0)==(d|0))break;else b=b+148|0}return}function Yf(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0;switch(k[a+80>>2]|0){case 0:{b=a+40|0;if(!(k[b>>2]|0)){E=a+32|0;l=E;E=k[E>>2]|0;c=18}else{k[b>>2]=0;t=k[a+64>>2]|0;k[a+36>>2]=t;c=5}while(1){if((c|0)==5){if(t>>>0>=(k[a+52>>2]|0)>>>0){nb=0;c=153;break}z=k[a+44>>2]|0;k[a+28>>2]=z;c=7}else if((c|0)==18){g=E+1|0;k[l>>2]=g;e=l;c=14}while(1){if((c|0)==7){c=0;if(z>>>0>=(k[a+56>>2]|0)>>>0){c=21;break}A=k[a+48>>2]|0;p=a+24|0;k[p>>2]=A}else if((c|0)==14){if(g>>>0<(k[a+72>>2]|0)>>>0){c=16;break}F=a+24|0;n=F;F=k[F>>2]|0;c=19}while(1){if((c|0)==19){c=0;A=F+1|0;k[n>>2]=A;p=n}if(A>>>0>=(k[a+60>>2]|0)>>>0){c=20;break}B=k[a+196>>2]|0;C=k[a+28>>2]|0;if(C>>>0<(k[B+(A<<4)+8>>2]|0)>>>0)break;else{n=p;F=A;c=19}}if((c|0)==20){c=a+28|0;z=(k[c>>2]|0)+1|0;k[c>>2]=z;c=7;continue}b=k[B+(A<<4)+12>>2]|0;if(!(i[a>>0]|0)){mb=ha(k[b+(C<<4)+12>>2]|0,k[b+(C<<4)+8>>2]|0)|0;k[a+72>>2]=mb}g=k[a+68>>2]|0;e=a+32|0;k[e>>2]=g;c=14}if((c|0)==16){c=0;D=ha(k[a+8>>2]|0,k[a+36>>2]|0)|0;D=(ha(k[a+12>>2]|0,k[a+28>>2]|0)|0)+D|0;D=D+(ha(k[a+16>>2]|0,k[a+24>>2]|0)|0)|0;D=D+(ha(k[a+20>>2]|0,g)|0)|0;D=(k[a+4>>2]|0)+(D<<1)|0;if(!(j[D>>1]|0))break;else{l=e;E=g;c=18;continue}}else if((c|0)==21){c=a+36|0;t=(k[c>>2]|0)+1|0;k[c>>2]=t;c=5;continue}}if((c|0)==153)return nb|0;j[D>>1]=1;a=1;return a|0}case 1:{b=a+40|0;if(!(k[b>>2]|0)){x=a+32|0;h=x;x=k[x>>2]|0;c=38}else{k[b>>2]=0;G=k[a+44>>2]|0;k[a+28>>2]=G;c=25}while(1){if((c|0)==25){if(G>>>0>=(k[a+56>>2]|0)>>>0){nb=0;c=153;break}r=k[a+64>>2]|0;k[a+36>>2]=r;c=27}else if((c|0)==38){f=x+1|0;k[h>>2]=f;d=h;c=34}while(1){if((c|0)==27){c=0;if(r>>>0>=(k[a+52>>2]|0)>>>0){c=41;break}s=k[a+48>>2]|0;o=a+24|0;k[o>>2]=s}else if((c|0)==34){if(f>>>0<(k[a+72>>2]|0)>>>0){c=36;break}y=a+24|0;m=y;y=k[y>>2]|0;c=39}while(1){if((c|0)==39){c=0;s=y+1|0;k[m>>2]=s;o=m}if(s>>>0>=(k[a+60>>2]|0)>>>0){c=40;break}u=k[a+196>>2]|0;v=k[a+28>>2]|0;if(v>>>0<(k[u+(s<<4)+8>>2]|0)>>>0)break;else{m=o;y=s;c=39}}if((c|0)==40){c=a+36|0;r=(k[c>>2]|0)+1|0;k[c>>2]=r;c=27;continue}b=k[u+(s<<4)+12>>2]|0;if(!(i[a>>0]|0)){mb=ha(k[b+(v<<4)+12>>2]|0,k[b+(v<<4)+8>>2]|0)|0;k[a+72>>2]=mb}f=k[a+68>>2]|0;d=a+32|0;k[d>>2]=f;c=34}if((c|0)==36){c=0;w=ha(k[a+8>>2]|0,k[a+36>>2]|0)|0;w=(ha(k[a+12>>2]|0,k[a+28>>2]|0)|0)+w|0;w=w+(ha(k[a+16>>2]|0,k[a+24>>2]|0)|0)|0;w=w+(ha(k[a+20>>2]|0,f)|0)|0;w=(k[a+4>>2]|0)+(w<<1)|0;if(!(j[w>>1]|0))break;else{h=d;x=f;c=38;continue}}else if((c|0)==41){c=a+28|0;G=(k[c>>2]|0)+1|0;k[c>>2]=G;c=25;continue}}if((c|0)==153)return nb|0;j[w>>1]=1;a=1;return a|0}case 2:{b=a+40|0;if(!(k[b>>2]|0)){lb=a+36|0;Ta=lb;lb=k[lb>>2]|0;c=75}else{k[b>>2]=0;o=a+224|0;k[o>>2]=0;p=a+228|0;k[p>>2]=0;q=k[a+192>>2]|0;if(q){r=k[a+196>>2]|0;b=0;c=0;s=0;do{g=k[r+(s<<4)+8>>2]|0;if(g){h=k[r+(s<<4)+12>>2]|0;l=k[r+(s<<4)>>2]|0;m=k[r+(s<<4)+4>>2]|0;n=g+-1|0;d=0;f=0;while(1){e=n+d|0;Sa=l<<e+(k[h+(f<<4)>>2]|0);e=m<<(k[h+(f<<4)+4>>2]|0)+e;b=(b|0)==0?Sa:b>>>0<Sa>>>0?b:Sa;c=(c|0)==0?e:c>>>0<e>>>0?c:e;e=f+1|0;if((e|0)==(g|0))break;else{d=~f;f=e}}k[o>>2]=b;k[p>>2]=c}s=s+1|0}while((s|0)!=(q|0))}if(!(i[a>>0]|0)){k[a+104>>2]=k[a+204>>2];k[a+96>>2]=k[a+200>>2];k[a+108>>2]=k[a+212>>2];k[a+100>>2]=k[a+208>>2]}J=k[a+44>>2]|0;k[a+28>>2]=J;c=54}while(1){if((c|0)==54){if(J>>>0>=(k[a+56>>2]|0)>>>0){nb=0;c=153;break}Xa=k[a+104>>2]|0;k[a+220>>2]=Xa;c=56}else if((c|0)==75){jb=lb+1|0;k[Ta>>2]=jb;Ua=Ta;c=71}while(1){if((c|0)==56){if((Xa|0)>=(k[a+108>>2]|0)){c=79;break}Ya=k[a+96>>2]|0;k[a+216>>2]=Ya;c=58}else if((c|0)==71){if(jb>>>0<(k[a+52>>2]|0)>>>0){c=73;break}mb=a+24|0;Va=mb;mb=k[mb>>2]|0;c=76}while(1){if((c|0)==58){if((Ya|0)>=(k[a+100>>2]|0)){c=78;break}Za=k[a+48>>2]|0;Wa=a+24|0;k[Wa>>2]=Za}else if((c|0)==76){Za=mb+1|0;k[Va>>2]=Za;Wa=Va}if(Za>>>0>=(k[a+60>>2]|0)>>>0){Ya=k[a+224>>2]|0;c=a+216|0;Sa=k[c>>2]|0;Ya=Sa+Ya-((Sa|0)%(Ya|0)|0)|0;k[c>>2]=Ya;c=58;continue}c=k[a+196>>2]|0;m=k[a+28>>2]|0;b=k[c+(Za<<4)+8>>2]|0;if(m>>>0>=b>>>0){Va=Wa;mb=Za;c=76;continue}n=k[c+(Za<<4)+12>>2]|0;f=b+~m|0;g=k[a+200>>2]|0;h=k[c+(Za<<4)>>2]|0;_a=h<<f;$a=(g+-1+_a|0)/(_a|0)|0;l=k[a+204>>2]|0;Sa=k[c+(Za<<4)+4>>2]|0;ab=Sa<<f;bb=(l+-1+ab|0)/(ab|0)|0;cb=_a+-1|0;b=(cb+(k[a+208>>2]|0)|0)/(_a|0)|0;db=ab+-1|0;c=(db+(k[a+212>>2]|0)|0)/(ab|0)|0;eb=k[n+(m<<4)>>2]|0;d=eb+f|0;fb=k[n+(m<<4)+4>>2]|0;e=fb+f|0;gb=k[a+220>>2]|0;if((gb|0)%(Sa<<e|0)|0){if((gb|0)!=(l|0)){Va=Wa;mb=Za;c=76;continue}if(!((bb<<f|0)%(1<<e|0)|0)){Va=Wa;mb=Za;c=76;continue}}hb=k[a+216>>2]|0;if((hb|0)%(h<<d|0)|0){if((hb|0)!=(g|0)){Va=Wa;mb=Za;c=76;continue}if(!(($a<<f|0)%(1<<d|0)|0)){Va=Wa;mb=Za;c=76;continue}}ib=k[n+(m<<4)+8>>2]|0;if(!ib){Va=Wa;mb=Za;c=76;continue}if((bb|0)==(c|0)|(($a|0)==(b|0)?1:(k[n+(m<<4)+12>>2]|0)==0)){Va=Wa;mb=Za;c=76}else{c=70;break}}if((c|0)==70){jb=(((cb+hb|0)/(_a|0)|0)>>eb)-($a>>eb)+(ha((((db+gb|0)/(ab|0)|0)>>fb)-(bb>>fb)|0,ib)|0)|0;k[a+32>>2]=jb;jb=k[a+64>>2]|0;Ua=a+36|0;k[Ua>>2]=jb;c=71;continue}else if((c|0)==78){Xa=k[a+228>>2]|0;c=a+220|0;Sa=k[c>>2]|0;Xa=Sa+Xa-((Sa|0)%(Xa|0)|0)|0;k[c>>2]=Xa;c=56;continue}}if((c|0)==73){c=0;kb=ha(k[a+8>>2]|0,jb)|0;kb=(ha(k[a+12>>2]|0,k[a+28>>2]|0)|0)+kb|0;kb=kb+(ha(k[a+16>>2]|0,k[a+24>>2]|0)|0)|0;kb=kb+(ha(k[a+20>>2]|0,k[a+32>>2]|0)|0)|0;kb=(k[a+4>>2]|0)+(kb<<1)|0;if(!(j[kb>>1]|0))break;else{Ta=Ua;lb=jb;c=75;continue}}else if((c|0)==79){c=a+28|0;J=(k[c>>2]|0)+1|0;k[c>>2]=J;c=54;continue}}if((c|0)==153)return nb|0;j[kb>>1]=1;a=1;return a|0}case 3:{c=a+40|0;if(!(k[c>>2]|0)){Ra=k[a+24>>2]|0;Ka=a+36|0;pa=Ka;Ka=k[Ka>>2]|0;Na=Ra;Ra=(k[a+196>>2]|0)+(Ra<<4)|0;c=113}else{k[c>>2]=0;o=a+224|0;k[o>>2]=0;p=a+228|0;k[p>>2]=0;q=k[a+192>>2]|0;if(q){r=k[a+196>>2]|0;b=0;c=0;s=0;do{g=k[r+(s<<4)+8>>2]|0;if(g){h=k[r+(s<<4)+12>>2]|0;l=k[r+(s<<4)>>2]|0;m=k[r+(s<<4)+4>>2]|0;n=g+-1|0;d=0;f=0;while(1){e=n+d|0;mb=l<<e+(k[h+(f<<4)>>2]|0);e=m<<(k[h+(f<<4)+4>>2]|0)+e;b=(b|0)==0?mb:b>>>0<mb>>>0?b:mb;c=(c|0)==0?e:c>>>0<e>>>0?c:e;e=f+1|0;if((e|0)==(g|0))break;else{d=~f;f=e}}k[o>>2]=b;k[p>>2]=c}s=s+1|0}while((s|0)!=(q|0))}if(!(i[a>>0]|0)){b=k[a+204>>2]|0;k[a+104>>2]=b;k[a+96>>2]=k[a+200>>2];k[a+108>>2]=k[a+212>>2];k[a+100>>2]=k[a+208>>2]}else b=k[a+104>>2]|0;k[a+220>>2]=b;c=93}while(1){if((c|0)==93){if((b|0)>=(k[a+108>>2]|0)){nb=0;c=153;break}ta=k[a+96>>2]|0;k[a+216>>2]=ta;c=95}else if((c|0)==113){Ha=Ka+1|0;k[pa>>2]=Ha;qa=pa;Ia=Na;Qa=Ra;c=109}while(1){if((c|0)==95){if((ta|0)>=(k[a+100>>2]|0)){c=117;break}ua=k[a+48>>2]|0;k[a+24>>2]=ua;c=97}else if((c|0)==109){if(Ha>>>0<(k[a+52>>2]|0)>>>0){c=111;break}La=a+28|0;ra=La;La=k[La>>2]|0;Oa=Ia;Sa=Qa;c=114}while(1){if((c|0)==97){if(ua>>>0>=(k[a+60>>2]|0)>>>0){c=116;break}Pa=(k[a+196>>2]|0)+(ua<<4)|0;va=k[a+44>>2]|0;sa=a+28|0;k[sa>>2]=va;Ma=ua}else if((c|0)==114){va=La+1|0;k[ra>>2]=va;sa=ra;Ma=Oa;Pa=Sa}mb=k[a+56>>2]|0;c=k[Pa+8>>2]|0;if(va>>>0>=(mb>>>0<c>>>0?mb:c)>>>0){ua=Ma+1|0;k[a+24>>2]=ua;c=97;continue}n=k[Pa+12>>2]|0;c=c+~va|0;d=k[a+200>>2]|0;e=k[Pa>>2]|0;wa=e<<c;xa=(d+-1+wa|0)/(wa|0)|0;f=k[a+204>>2]|0;mb=k[Pa+4>>2]|0;ya=mb<<c;za=(f+-1+ya|0)/(ya|0)|0;Aa=wa+-1|0;g=(Aa+(k[a+208>>2]|0)|0)/(wa|0)|0;Ba=ya+-1|0;h=(Ba+(k[a+212>>2]|0)|0)/(ya|0)|0;Ca=k[n+(va<<4)>>2]|0;l=Ca+c|0;Da=k[n+(va<<4)+4>>2]|0;m=Da+c|0;Ea=k[a+220>>2]|0;if((Ea|0)%(mb<<m|0)|0){if((Ea|0)!=(f|0)){ra=sa;La=va;Oa=Ma;Sa=Pa;c=114;continue}if(!((za<<c|0)%(1<<m|0)|0)){ra=sa;La=va;Oa=Ma;Sa=Pa;c=114;continue}}Fa=k[a+216>>2]|0;if((Fa|0)%(e<<l|0)|0){if((Fa|0)!=(d|0)){ra=sa;La=va;Oa=Ma;Sa=Pa;c=114;continue}if(!((xa<<c|0)%(1<<l|0)|0)){ra=sa;La=va;Oa=Ma;Sa=Pa;c=114;continue}}Ga=k[n+(va<<4)+8>>2]|0;if(!Ga){ra=sa;La=va;Oa=Ma;Sa=Pa;c=114;continue}if((za|0)==(h|0)|((xa|0)==(g|0)?1:(k[n+(va<<4)+12>>2]|0)==0)){ra=sa;La=va;Oa=Ma;Sa=Pa;c=114}else{c=108;break}}if((c|0)==108){Ha=(((Aa+Fa|0)/(wa|0)|0)>>Ca)-(xa>>Ca)+(ha((((Ba+Ea|0)/(ya|0)|0)>>Da)-(za>>Da)|0,Ga)|0)|0;k[a+32>>2]=Ha;Ha=k[a+64>>2]|0;qa=a+36|0;k[qa>>2]=Ha;Ia=Ma;Qa=Pa;c=109;continue}else if((c|0)==116){ta=k[a+224>>2]|0;c=a+216|0;mb=k[c>>2]|0;ta=mb+ta-((mb|0)%(ta|0)|0)|0;k[c>>2]=ta;c=95;continue}}if((c|0)==111){c=0;Ja=ha(k[a+8>>2]|0,Ha)|0;Ja=(ha(k[a+12>>2]|0,k[a+28>>2]|0)|0)+Ja|0;Ja=Ja+(ha(k[a+16>>2]|0,Ia)|0)|0;Ja=Ja+(ha(k[a+20>>2]|0,k[a+32>>2]|0)|0)|0;Ja=(k[a+4>>2]|0)+(Ja<<1)|0;if(!(j[Ja>>1]|0))break;else{pa=qa;Ka=Ha;Na=Ia;Ra=Qa;c=113;continue}}else if((c|0)==117){b=k[a+228>>2]|0;c=a+220|0;mb=k[c>>2]|0;b=mb+b-((mb|0)%(b|0)|0)|0;k[c>>2]=b;c=93;continue}}if((c|0)==153)return nb|0;j[Ja>>1]=1;a=1;return a|0}case 4:{b=a+40|0;if(!(k[b>>2]|0)){na=k[a+24>>2]|0;da=a+36|0;K=da;da=k[da>>2]|0;fa=na;na=(k[a+196>>2]|0)+(na<<4)|0;c=148}else{k[b>>2]=0;O=k[a+48>>2]|0;k[a+24>>2]=O;c=121}while(1){if((c|0)==121){if(O>>>0>=(k[a+60>>2]|0)>>>0){nb=0;c=153;break}b=k[a+196>>2]|0;q=b+(O<<4)|0;o=a+224|0;k[o>>2]=0;p=a+228|0;k[p>>2]=0;l=k[b+(O<<4)+8>>2]|0;if(l){m=k[b+(O<<4)+12>>2]|0;n=k[q>>2]|0;e=k[b+(O<<4)+4>>2]|0;f=l+-1|0;c=0;b=0;d=0;h=0;while(1){g=f+d|0;mb=n<<g+(k[m+(h<<4)>>2]|0);g=e<<(k[m+(h<<4)+4>>2]|0)+g;c=(c|0)==0?mb:c>>>0<mb>>>0?c:mb;b=(b|0)==0?g:b>>>0<g>>>0?b:g;g=h+1|0;if((g|0)==(l|0))break;else{d=~h;h=g}}k[o>>2]=c;k[p>>2]=b}if(!(i[a>>0]|0)){b=k[a+204>>2]|0;k[a+104>>2]=b;k[a+96>>2]=k[a+200>>2];k[a+108>>2]=k[a+212>>2];k[a+100>>2]=k[a+208>>2]}else b=k[a+104>>2]|0;k[a+220>>2]=b;H=b;I=O;c=130}else if((c|0)==148){aa=da+1|0;k[K>>2]=aa;L=K;ba=fa;ma=na;c=144}while(1){if((c|0)==130){if((H|0)>=(k[a+108>>2]|0)){c=152;break}P=k[a+96>>2]|0;k[a+216>>2]=P;ga=I;ka=q;c=132}else if((c|0)==144){if(aa>>>0<(k[a+52>>2]|0)>>>0){c=146;break}ea=a+28|0;M=ea;ea=k[ea>>2]|0;ja=ba;oa=ma;c=149}while(1){if((c|0)==132){if((P|0)>=(k[a+100>>2]|0)){c=151;break}Q=k[a+44>>2]|0;N=a+28|0;k[N>>2]=Q;ia=ga;la=ka}else if((c|0)==149){Q=ea+1|0;k[M>>2]=Q;N=M;ia=ja;la=oa}mb=k[a+56>>2]|0;b=k[la+8>>2]|0;if(Q>>>0>=(mb>>>0<b>>>0?mb:b)>>>0){P=k[a+224>>2]|0;ga=a+216|0;ka=k[ga>>2]|0;P=ka+P-((ka|0)%(P|0)|0)|0;k[ga>>2]=P;ga=ia;ka=la;c=132;continue}m=k[la+12>>2]|0;b=b+~Q|0;c=k[a+200>>2]|0;d=k[la>>2]|0;R=d<<b;S=(c+-1+R|0)/(R|0)|0;e=k[a+204>>2]|0;mb=k[la+4>>2]|0;T=mb<<b;U=(e+-1+T|0)/(T|0)|0;V=R+-1|0;f=(V+(k[a+208>>2]|0)|0)/(R|0)|0;W=T+-1|0;g=(W+(k[a+212>>2]|0)|0)/(T|0)|0;X=k[m+(Q<<4)>>2]|0;h=X+b|0;Y=k[m+(Q<<4)+4>>2]|0;l=Y+b|0;Z=k[a+220>>2]|0;if((Z|0)%(mb<<l|0)|0){if((Z|0)!=(e|0)){M=N;ea=Q;ja=ia;oa=la;c=149;continue}if(!((U<<b|0)%(1<<l|0)|0)){M=N;ea=Q;ja=ia;oa=la;c=149;continue}}_=k[a+216>>2]|0;if((_|0)%(d<<h|0)|0){if((_|0)!=(c|0)){M=N;ea=Q;ja=ia;oa=la;c=149;continue}if(!((S<<b|0)%(1<<h|0)|0)){M=N;ea=Q;ja=ia;oa=la;c=149;continue}}$=k[m+(Q<<4)+8>>2]|0;if(!$){M=N;ea=Q;ja=ia;oa=la;c=149;continue}if((U|0)==(g|0)|((S|0)==(f|0)?1:(k[m+(Q<<4)+12>>2]|0)==0)){M=N;ea=Q;ja=ia;oa=la;c=149}else{c=143;break}}if((c|0)==143){aa=(((V+_|0)/(R|0)|0)>>X)-(S>>X)+(ha((((W+Z|0)/(T|0)|0)>>Y)-(U>>Y)|0,$)|0)|0;k[a+32>>2]=aa;aa=k[a+64>>2]|0;L=a+36|0;k[L>>2]=aa;ba=ia;ma=la;c=144;continue}else if((c|0)==151){H=k[a+228>>2]|0;I=a+220|0;q=k[I>>2]|0;H=q+H-((q|0)%(H|0)|0)|0;k[I>>2]=H;I=ga;q=ka;c=130;continue}}if((c|0)==146){c=0;ca=ha(k[a+8>>2]|0,aa)|0;ca=(ha(k[a+12>>2]|0,k[a+28>>2]|0)|0)+ca|0;ca=ca+(ha(k[a+16>>2]|0,ba)|0)|0;ca=ca+(ha(k[a+20>>2]|0,k[a+32>>2]|0)|0)|0;ca=(k[a+4>>2]|0)+(ca<<1)|0;if(!(j[ca>>1]|0))break;else{K=L;da=aa;fa=ba;na=ma;c=148;continue}}else if((c|0)==152){O=I+1|0;k[a+24>>2]=O;c=121;continue}}if((c|0)==153)return nb|0;j[ca>>1]=1;a=1;return a|0}default:{a=0;return a|0}}return 0}function Zf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;l=(k[b+(c*5640|0)+420>>2]|0)+1|0;d=_c(l,232)|0;if(!d){l=0;return l|0}if(!l){l=d;return l|0}i=a+16|0;f=b+(c*5640|0)+5584|0;a=k[i>>2]|0;g=d;h=0;a:while(1){b=_c(a,16)|0;e=g+196|0;k[e>>2]=b;if(!b){a=5;break}j=k[i>>2]|0;k[g+192>>2]=j;b:do if(!j)a=0;else{a=(k[f>>2]|0)+4|0;j=_c(k[a>>2]|0,16)|0;k[b+12>>2]=j;if(!j){a=18;break a}else c=0;while(1){k[b+(c<<4)+8>>2]=k[a>>2];c=c+1|0;a=k[i>>2]|0;if(c>>>0>=a>>>0)break b;b=k[e>>2]|0;a=(k[f>>2]|0)+(c*1080|0)+4|0;j=_c(k[a>>2]|0,16)|0;k[b+(c<<4)+12>>2]=j;if(!j){a=18;break a}}}while(0);h=h+1|0;if(h>>>0>=l>>>0){a=32;break}else g=g+232|0}if((a|0)==5){a=d+4|0;b=k[a>>2]|0;if(!b){i=d;j=0}else{cd(b);k[a>>2]=0;i=d;j=0}while(1){h=i+196|0;a=k[h>>2]|0;if(a){g=i+192|0;b=k[g>>2]|0;if(b){f=0;while(1){c=a+12|0;e=k[c>>2]|0;if(e){cd(e);k[c>>2]=0;b=k[g>>2]|0}f=f+1|0;if(f>>>0>=b>>>0)break;else a=a+16|0}a=k[h>>2]|0}cd(a);k[h>>2]=0}j=j+1|0;if((j|0)==(l|0))break;else i=i+232|0}cd(d);l=0;return l|0}else if((a|0)==18){a=d+4|0;b=k[a>>2]|0;if(!b){i=d;j=0}else{cd(b);k[a>>2]=0;i=d;j=0}while(1){h=i+196|0;a=k[h>>2]|0;if(a){g=i+192|0;b=k[g>>2]|0;if(b){f=0;while(1){c=a+12|0;e=k[c>>2]|0;if(e){cd(e);k[c>>2]=0;b=k[g>>2]|0}f=f+1|0;if(f>>>0>=b>>>0)break;else a=a+16|0}a=k[h>>2]|0}cd(a);k[h>>2]=0}j=j+1|0;if((j|0)==(l|0))break;else i=i+232|0}cd(d);l=0;return l|0}else if((a|0)==32)return d|0;return 0}function _f(a,b,c,d,e,f,g,h,i,j,l,m){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;o=k[(k[b+76>>2]|0)+(c*5640|0)+5584>>2]|0;n=k[a+24>>2]|0;H=k[b+24>>2]|0;G=b+12|0;F=(ha(k[G>>2]|0,(c>>>0)%(H>>>0)|0)|0)+(k[b+4>>2]|0)|0;E=k[a>>2]|0;k[d>>2]=F>>>0>E>>>0?F:E;F=aj(k[G>>2]|0,0,F|0,0)|0;F=F|0-L;G=k[a+8>>2]|0;k[e>>2]=F>>>0<G>>>0?F:G;G=b+16|0;H=(ha(k[G>>2]|0,(c>>>0)/(H>>>0)|0)|0)+(k[b+8>>2]|0)|0;F=k[a+4>>2]|0;k[f>>2]=H>>>0>F>>>0?H:F;H=aj(k[G>>2]|0,0,H|0,0)|0;H=H|0-L;G=k[a+12>>2]|0;k[g>>2]=H>>>0<G>>>0?H:G;k[j>>2]=0;k[l>>2]=0;k[h>>2]=2147483647;k[i>>2]=2147483647;G=a+16|0;if(!(k[G>>2]|0))return;else H=0;while(1){r=k[m+(H<<2)>>2]|0;p=k[n>>2]|0;a=((k[d>>2]|0)+-1+p|0)/(p|0)|0;E=n+4|0;q=k[E>>2]|0;c=((k[f>>2]|0)+-1+q|0)/(q|0)|0;p=(p+-1+(k[e>>2]|0)|0)/(p|0)|0;q=(q+-1+(k[g>>2]|0)|0)/(q|0)|0;F=o+4|0;b=k[F>>2]|0;if(b>>>0>(k[l>>2]|0)>>>0){k[l>>2]=b;b=k[F>>2]|0}if(b){C=aj(a|0,((a|0)<0)<<31>>31|0,-1,-1)|0;D=L;A=aj(c|0,((c|0)<0)<<31>>31|0,-1,-1)|0;B=L;y=aj(p|0,((p|0)<0)<<31>>31|0,-1,-1)|0;z=L;w=aj(q|0,((q|0)<0)<<31>>31|0,-1,-1)|0;x=L;v=0;while(1){b=b+-1|0;p=k[o+812+(v<<2)>>2]|0;u=k[o+944+(v<<2)>>2]|0;k[r>>2]=p;k[r+4>>2]=u;s=k[n>>2]<<p+b;I=k[E>>2]<<u+b;a=k[h>>2]|0;k[h>>2]=(a|0)<(s|0)?a:s;s=k[i>>2]|0;k[i>>2]=(s|0)<(I|0)?s:I;I=$i(1,0,b|0)|0;s=L;a=aj(C|0,D|0,I|0,s|0)|0;a=Zi(a|0,L|0,b|0)|0;q=aj(A|0,B|0,I|0,s|0)|0;q=Zi(q|0,L|0,b|0)|0;c=aj(y|0,z|0,I|0,s|0)|0;c=Zi(c|0,L|0,b|0)|0;s=aj(w|0,x|0,I|0,s|0)|0;s=Zi(s|0,L|0,b|0)|0;I=$i(1,0,u|0)|0;t=L;J=aj(s|0,((s|0)<0)<<31>>31|0,-1,-1)|0;t=aj(J|0,L|0,I|0,t|0)|0;t=Zi(t|0,L|0,u|0)|0;if((a|0)==(c|0))a=0;else{c=aj(c|0,((c|0)<0)<<31>>31|0,-1,-1)|0;I=L;J=$i(1,0,p|0)|0;J=aj(c|0,I|0,J|0,L|0)|0;J=Zi(J|0,L|0,p|0)|0;a=(J<<p)-(a>>p<<p)>>p}J=(q|0)==(s|0)?0:(t<<u)-(q>>u<<u)>>u;k[r+8>>2]=a;k[r+12>>2]=J;a=ha(a,J)|0;if(a>>>0>(k[j>>2]|0)>>>0)k[j>>2]=a;v=v+1|0;if(v>>>0>=(k[F>>2]|0)>>>0)break;else r=r+16|0}}H=H+1|0;if(H>>>0>=(k[G>>2]|0)>>>0)break;else{n=n+52|0;o=o+1080|0}}return}function $f(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,l=0;j=(k[a+(b*5640|0)+420>>2]|0)+1|0;k[a+(b*5640|0)+500>>2]=k[a+(b*5640|0)+428>>2];k[a+(b*5640|0)+516>>2]=k[a+(b*5640|0)+440>>2];k[a+(b*5640|0)+496>>2]=k[a+(b*5640|0)+424>>2];k[a+(b*5640|0)+512>>2]=k[a+(b*5640|0)+436>>2];k[a+(b*5640|0)+508>>2]=k[a+(b*5640|0)+432>>2];k[a+(b*5640|0)+492>>2]=0;k[a+(b*5640|0)+460>>2]=k[a+(b*5640|0)+456>>2];k[a+(b*5640|0)+504>>2]=0;k[a+(b*5640|0)+520>>2]=g;k[a+(b*5640|0)+524>>2]=c;k[a+(b*5640|0)+528>>2]=d;k[a+(b*5640|0)+532>>2]=e;k[a+(b*5640|0)+536>>2]=f;k[a+(b*5640|0)+540>>2]=h;k[a+(b*5640|0)+544>>2]=i;if(j>>>0<=1)return;a=a+(b*5640|0)+572|0;b=1;while(1){k[a+76>>2]=k[a+4>>2];k[a+92>>2]=k[a+16>>2];k[a+72>>2]=k[a>>2];k[a+88>>2]=k[a+12>>2];l=k[a+8>>2]|0;k[a+84>>2]=l;k[a+36>>2]=k[a+32>>2];k[a+80>>2]=0;k[a+68>>2]=l>>>0>(k[a+-64>>2]|0)>>>0?l:0;k[a+96>>2]=g;k[a+100>>2]=c;k[a+104>>2]=d;k[a+108>>2]=e;k[a+112>>2]=f;k[a+116>>2]=h;k[a+120>>2]=i;b=b+1|0;if((b|0)==(j|0))break;else a=a+148|0}return}function ag(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;h=k[b+76>>2]|0;if((a|0)>-1)f=a;else{c=0;return c|0}a:while(1){switch(i[e+f>>0]|0){case 82:{g=3;break a}case 67:{g=5;break a}case 76:{g=7;break a}case 80:{g=9;break a}default:{}}f=f+-1|0}if((g|0)==3)if((k[h+(c*5640|0)+424+(d*148|0)+128>>2]|0)==(k[h+(c*5640|0)+424+(d*148|0)+88>>2]|0))return (ag(a+-1|0,b,c,d,e)|0)!=0|0;else{c=1;return c|0}else if((g|0)==5)if((k[h+(c*5640|0)+424+(d*148|0)+132>>2]|0)==(k[h+(c*5640|0)+424+(d*148|0)+92>>2]|0))return (ag(a+-1|0,b,c,d,e)|0)!=0|0;else{c=1;return c|0}else if((g|0)==7)if((k[h+(c*5640|0)+424+(d*148|0)+124>>2]|0)==(k[h+(c*5640|0)+424+(d*148|0)+84>>2]|0))return (ag(a+-1|0,b,c,d,e)|0)!=0|0;else{c=1;return c|0}else if((g|0)==9){if((k[h+(c*5640|0)+424+(d*148|0)+36>>2]|0)>>>0<2)if((k[h+(c*5640|0)+424+(d*148|0)+136>>2]|0)==(k[h+(c*5640|0)+424+(d*148|0)+96>>2]|0))return (ag(f+-1|0,b,c,d,e)|0)!=0|0;else{c=1;return c|0}if((k[h+(c*5640|0)+424+(d*148|0)+140>>2]|0)!=(k[h+(c*5640|0)+424+(d*148|0)+104>>2]|0)){c=1;return c|0}if((k[h+(c*5640|0)+424+(d*148|0)+144>>2]|0)==(k[h+(c*5640|0)+424+(d*148|0)+112>>2]|0))return (ag(f+-1|0,b,c,d,e)|0)!=0|0;else{c=1;return c|0}}return 0}function bg(a){a=a|0;var b=0,c=0;b=_c(1,44)|0;if(!b){a=0;return a|0}c=b+40|0;i[c>>0]=i[c>>0]&-2|(a|0)!=0;a=_c(1,4)|0;k[b+20>>2]=a;if(a){c=b;return c|0}cd(b);c=0;return c|0}function cg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0.0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0;O=r;r=r+1200|0;N=O;d=k[k[a+20>>2]>>2]|0;M=d+16|0;e=k[M>>2]|0;if(!e){r=O;return}J=d+20|0;K=(k[a+32>>2]|0)+8|0;L=(k[a+28>>2]|0)+88|0;H=a+24|0;I=(b|0)==0;F=(c|0)==0;G=b+-1|0;d=e;E=0;do{h=k[J>>2]|0;i=k[K>>2]|0;C=k[h+(E*52|0)+16>>2]|0;if(i){if(C){a=k[L>>2]|0;f=+((k[(k[(k[H>>2]|0)+24>>2]|0)+(E*52|0)+24>>2]|0)>>>0)*.0625;e=0;do{c=ha(C,e)|0;g=0;do{D=(c+g|0)*3|0;k[N+(e*120|0)+(g*12|0)>>2]=~~(+(k[a+(D<<2)>>2]|0)*f);k[N+(e*120|0)+(g*12|0)+4>>2]=~~(+(k[a+(D+1<<2)>>2]|0)*f);k[N+(e*120|0)+(g*12|0)+8>>2]=~~(+(k[a+(D+2<<2)>>2]|0)*f);g=g+1|0}while(g>>>0<C>>>0);e=e+1|0}while(e>>>0<i>>>0);D=9}}else D=9;if((D|0)==9){D=0;if(C){w=h+(E*52|0)+24|0;B=0;do{x=k[w>>2]|0;y=x+(B*136|0)+24|0;d=k[y>>2]|0;if(d){z=x+(B*136|0)+16|0;A=x+(B*136|0)+20|0;a=k[A>>2]|0;c=k[z>>2]|0;v=0;do{if(ha(a,c)|0){s=x+(B*136|0)+28+(v*36|0)+20|0;t=N+(b*120|0)+(B*12|0)+(v<<2)|0;u=N+(G*120|0)+(B*12|0)+(v<<2)|0;q=0;do{d=k[s>>2]|0;p=ha(k[d+(q*40|0)+20>>2]|0,k[d+(q*40|0)+16>>2]|0)|0;if(p){l=d+(q*40|0)+24|0;m=k[t>>2]|0;o=0;do{i=k[l>>2]|0;j=i+(o*52|0)|0;n=k[i+(o*52|0)+4>>2]|0;d=(k[(k[(k[H>>2]|0)+24>>2]|0)+(E*52|0)+24>>2]|0)-(k[i+(o*52|0)+28>>2]|0)|0;if(!I){a=k[u>>2]|0;c=m-a|0;if((a|0)<=(d|0)){c=c+(a-d)|0;c=(c|0)<0?0:c}}else{k[i+(o*52|0)+44>>2]=0;c=(m|0)>(d|0)?m-d|0:0}h=i+(o*52|0)+44|0;e=k[h>>2]|0;g=(e|0)==0;if(g)if(!c)c=0;else c=(c*3|0)+-2|0;else c=(c*3|0)+e|0;k[n+(b*24|0)>>2]=c-e;do if((c|0)!=(e|0)){a=k[i+(o*52|0)+8>>2]|0;d=k[a+((c+-1|0)*24|0)>>2]|0;if(g)k[n+(b*24|0)+16>>2]=k[j>>2];else{i=k[a+((e+-1|0)*24|0)>>2]|0;k[n+(b*24|0)+16>>2]=(k[j>>2]|0)+i;d=d-i|0}k[n+(b*24|0)+4>>2]=d;if(F)break;k[h>>2]=c}while(0);o=o+1|0}while(o>>>0<p>>>0);a=k[A>>2]|0;c=k[z>>2]|0}q=q+1|0}while(q>>>0<(ha(a,c)|0)>>>0);d=k[y>>2]|0}v=v+1|0}while(v>>>0<d>>>0)}B=B+1|0}while(B>>>0<C>>>0);d=k[M>>2]|0}}E=E+1|0}while(E>>>0<d>>>0);r=O;return}function dg(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;var e=0,f=0.0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;a=k[k[a+20>>2]>>2]|0;G=a+40+(b<<3)|0;p[G>>3]=0.0;H=a+16|0;e=k[H>>2]|0;if(!e)return;E=a+20|0;F=(b|0)==0;D=(d|0)==0;a=e;C=0;do{e=k[E>>2]|0;B=k[e+(C*52|0)+16>>2]|0;if(B){v=e+(C*52|0)+24|0;A=0;do{w=k[v>>2]|0;x=w+(A*136|0)+24|0;a=k[x>>2]|0;if(a){y=w+(A*136|0)+16|0;z=w+(A*136|0)+20|0;e=k[z>>2]|0;d=k[y>>2]|0;u=0;do{if(ha(e,d)|0){t=w+(A*136|0)+28+(u*36|0)+20|0;s=0;do{a=k[t>>2]|0;r=ha(k[a+(s*40|0)+20>>2]|0,k[a+(s*40|0)+16>>2]|0)|0;if(r){m=a+(s*40|0)+24|0;q=0;do{i=k[m>>2]|0;j=i+(q*52|0)|0;n=k[i+(q*52|0)+4>>2]|0;o=i+(q*52|0)+44|0;if(F){k[o>>2]=0;l=0}else l=k[o>>2]|0;d=k[i+(q*52|0)+48>>2]|0;if(l>>>0<d>>>0){g=k[i+(q*52|0)+8>>2]|0;a=l;h=l;do{e=k[g+(h*24|0)>>2]|0;f=+p[g+(h*24|0)+8>>3];if(a){J=a+-1|0;f=f-+p[g+(J*24|0)+8>>3];e=e-(k[g+(J*24|0)>>2]|0)|0}do if(!e){if(!(f!=0.0))break;a=h+1|0}else{if(!(c-f/+(e>>>0)<2.220446049250313e-16))break;a=h+1|0}while(0);h=h+1|0}while(h>>>0<d>>>0);g=a;k[n+(b*24|0)>>2]=g-l;if((g|0)!=(l|0)){d=g+-1|0;e=k[i+(q*52|0)+8>>2]|0;a=k[e+(d*24|0)>>2]|0;if(!l){k[n+(b*24|0)+16>>2]=k[j>>2];f=+p[e+(d*24|0)+8>>3]}else{l=l+-1|0;J=k[e+(l*24|0)>>2]|0;k[n+(b*24|0)+16>>2]=(k[j>>2]|0)+J;f=+p[e+(d*24|0)+8>>3]-+p[e+(l*24|0)+8>>3];a=a-J|0}k[n+(b*24|0)+4>>2]=a;p[n+(b*24|0)+8>>3]=f;p[G>>3]=f+ +p[G>>3];if(!D)k[o>>2]=g}else I=26}else{k[n+(b*24|0)>>2]=0;I=26}if((I|0)==26){I=0;p[n+(b*24|0)+8>>3]=0.0}q=q+1|0}while(q>>>0<r>>>0);e=k[z>>2]|0;d=k[y>>2]|0}s=s+1|0}while(s>>>0<(ha(e,d)|0)>>>0);a=k[x>>2]|0}u=u+1|0}while(u>>>0<a>>>0)}A=A+1|0}while(A>>>0<B>>>0);a=k[H>>2]|0}C=C+1|0}while(C>>>0<a>>>0);return}function eg(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0.0,l=0.0,m=0.0,n=0.0,q=0.0,s=0.0,t=0,u=0,v=0,w=0,x=0.0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0.0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;V=r;r=r+800|0;U=V;R=k[a+28>>2]|0;S=k[k[a+20>>2]>>2]|0;T=k[a+32>>2]|0;O=S+24|0;k[O>>2]=0;P=k[S+16>>2]|0;if(!P){f=0;J=0.0;h=0.0;m=1797693134862315708145274.0e284}else{M=k[S+20>>2]|0;N=k[(k[a+24>>2]|0)+24>>2]|0;f=0;Q=0;l=0.0;h=0.0;m=1797693134862315708145274.0e284;do{I=M+(Q*52|0)+48|0;k[I>>2]=0;K=k[M+(Q*52|0)+16>>2]|0;if(!K)g=0;else{L=k[M+(Q*52|0)+24>>2]|0;g=0;H=0;do{E=k[L+(H*136|0)+24>>2]|0;if(E){F=ha(k[L+(H*136|0)+20>>2]|0,k[L+(H*136|0)+16>>2]|0)|0;G=(F|0)==0;D=0;do{if(!G){C=k[L+(H*136|0)+28+(D*36|0)+20>>2]|0;B=0;do{z=ha(k[C+(B*40|0)+20>>2]|0,k[C+(B*40|0)+16>>2]|0)|0;if(z){A=k[C+(B*40|0)+24>>2]|0;y=0;do{v=k[A+(y*52|0)+48>>2]|0;if(v){w=k[A+(y*52|0)+8>>2]|0;u=0;do{t=k[w+(u*24|0)>>2]|0;n=+p[w+(u*24|0)+8>>3];if(u){W=u+-1|0;n=n-+p[w+(W*24|0)+8>>3];t=t-(k[w+(W*24|0)>>2]|0)|0}do if(t){n=n/+(t|0);m=n<m?n:m;if(!(n>l))break;l=n}while(0);u=u+1|0}while(u>>>0<v>>>0)}W=ha((k[A+(y*52|0)+24>>2]|0)-(k[A+(y*52|0)+16>>2]|0)|0,(k[A+(y*52|0)+20>>2]|0)-(k[A+(y*52|0)+12>>2]|0)|0)|0;f=W+f|0;g=W+g|0;y=y+1|0}while(y>>>0<z>>>0);k[O>>2]=f;k[I>>2]=g}B=B+1|0}while(B>>>0<F>>>0)}D=D+1|0}while(D>>>0<E>>>0)}H=H+1|0}while(H>>>0<K>>>0)}J=+(1<<k[N+(Q*52|0)+24>>2]|0)+-1.0;h=h+ +(g|0)*(J*J);Q=Q+1|0}while(Q>>>0<P>>>0);J=l}I=(e|0)!=0;if(I){Q=k[a+36>>2]|0;P=k[e+88>>2]|0;k[P+(Q*592|0)+552>>2]=f;p[P+(Q*592|0)+560>>3]=+p[S+32>>3];f=T+8|0;W=Zc(k[f>>2]<<3)|0;k[P+(Q*592|0)>>2]=W;if(!W){W=0;r=V;return W|0}}else f=T+8|0;if(!(k[f>>2]|0)){W=1;r=V;return W|0}z=S+32|0;A=R+93|0;B=a+36|0;C=e+88|0;D=S+40|0;E=a+24|0;F=a+8|0;G=a+16|0;H=0;while(1){l=+o[T+20+(H<<2)>>2];if(l!=0.0){w=~~+ga(+l)>>>0;w=w>>>0<d>>>0?w:d}else w=d;s=+o[T+5184+(H<<2)>>2];x=+p[z>>3]-h/+Y(10.0,+(s/10.0));W=i[A>>0]|0;if(!((W&1)!=0&l>0.0)?!((W&4)!=0&s>0.0):0)l=m;else{y=nh(k[E>>2]|0,R)|0;if(!y){f=0;g=57;break}v=H+1|0;g=U+(H+-1<<3)|0;t=S+40+(H<<3)|0;if(!H){q=J;g=0;s=m;n=0.0;do{l=(s+q)*.5;dg(a,0,l,0);do if(i[A>>0]&4){if(((j[R>>1]|0)+-3&65535)>=4){W=+p[D>>3]<x;q=W?l:q;s=W?s:l;n=W?l:n;break}if(!(lh(y,k[B>>2]|0,S,v,b,c,w,e,k[F>>2]|0,k[a>>2]|0,k[G>>2]|0,0)|0))s=l;else{W=+p[D>>3]<x;q=W?l:q;s=W?s:l;n=W?l:n}}else{W=(lh(y,k[B>>2]|0,S,v,b,c,w,e,k[F>>2]|0,k[a>>2]|0,k[G>>2]|0,0)|0)==0;q=W?q:l;s=W?l:s;n=W?n:l}while(0);g=g+1|0}while((g|0)!=128)}else{q=J;u=0;s=m;n=0.0;do{l=(s+q)*.5;dg(a,H,l,0);do if(i[A>>0]&4){if(((j[R>>1]|0)+-3&65535)>=4){W=+p[g>>3]+ +p[t>>3]<x;q=W?l:q;s=W?s:l;n=W?l:n;break}if(!(lh(y,k[B>>2]|0,S,v,b,c,w,e,k[F>>2]|0,k[a>>2]|0,k[G>>2]|0,0)|0))s=l;else{W=+p[g>>3]+ +p[t>>3]<x;q=W?l:q;s=W?s:l;n=W?l:n}}else{W=(lh(y,k[B>>2]|0,S,v,b,c,w,e,k[F>>2]|0,k[a>>2]|0,k[G>>2]|0,0)|0)==0;q=W?q:l;s=W?l:s;n=W?n:l}while(0);u=u+1|0}while((u|0)!=128)}oh(y);l=n==0.0?l:n}if(I)p[(k[(k[C>>2]|0)+((k[B>>2]|0)*592|0)>>2]|0)+(H<<3)>>3]=l;dg(a,H,l,1);if(!H)l=+p[D>>3];else l=+p[U+(H+-1<<3)>>3]+ +p[S+40+(H<<3)>>3];p[U+(H<<3)>>3]=l;H=H+1|0;if(H>>>0>=(k[f>>2]|0)>>>0){f=1;g=57;break}}if((g|0)==57){r=V;return f|0}return 0}function fg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;k[a+24>>2]=b;k[a+28>>2]=c;e=_c(1,848)|0;d=a+20|0;k[k[d>>2]>>2]=e;if(!e){a=0;return a|0}e=b+16|0;f=_c(k[e>>2]|0,52)|0;b=k[k[d>>2]>>2]|0;k[b+20>>2]=f;if(!f){f=0;return f|0}k[b+16>>2]=k[e>>2];k[a>>2]=k[c+84>>2];f=1;return f|0}function gg(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;if(!a)return;s=a+20|0;b=k[s>>2]|0;do if(b){r=(i[a+40>>0]&1)==0?3:4;c=k[b>>2]|0;if(c){o=c+20|0;j=c+16|0;if(k[j>>2]|0){m=0;n=k[o>>2]|0;while(1){l=n+24|0;b=k[l>>2]|0;if(b){g=k[n+28>>2]|0;h=(g>>>0)/136|0;if(g>>>0>135){g=0;while(1){f=b+48|0;c=k[f>>2]|0;if(c){d=k[b+52>>2]|0;e=(d>>>0)/40|0;if(d>>>0>39){d=0;while(1){t=c+32|0;wg(k[t>>2]|0);k[t>>2]=0;t=c+36|0;wg(k[t>>2]|0);k[t>>2]=0;bb[r&7](c);d=d+1|0;if(d>>>0>=e>>>0)break;else c=c+40|0}c=k[f>>2]|0}cd(c);k[f>>2]=0}f=b+84|0;c=k[f>>2]|0;if(c){t=k[b+88>>2]|0;e=(t>>>0)/40|0;if(t>>>0>39){d=0;while(1){t=c+32|0;wg(k[t>>2]|0);k[t>>2]=0;t=c+36|0;wg(k[t>>2]|0);k[t>>2]=0;bb[r&7](c);d=d+1|0;if(d>>>0>=e>>>0)break;else c=c+40|0}c=k[f>>2]|0}cd(c);k[f>>2]=0}f=b+120|0;c=k[f>>2]|0;if(c){t=k[b+124>>2]|0;e=(t>>>0)/40|0;if(t>>>0>39){d=0;while(1){t=c+32|0;wg(k[t>>2]|0);k[t>>2]=0;t=c+36|0;wg(k[t>>2]|0);k[t>>2]=0;bb[r&7](c);d=d+1|0;if(d>>>0>=e>>>0)break;else c=c+40|0}c=k[f>>2]|0}cd(c);k[f>>2]=0}g=g+1|0;if(g>>>0>=h>>>0)break;else b=b+136|0}b=k[l>>2]|0}cd(b);k[l>>2]=0}if((k[n+36>>2]|0)!=0?(p=n+32|0,q=k[p>>2]|0,(q|0)!=0):0){ad(q);k[p>>2]=0;k[p+4>>2]=0;k[p+8>>2]=0;k[p+12>>2]=0}m=m+1|0;if(m>>>0>=(k[j>>2]|0)>>>0)break;else n=n+52|0}}cd(k[o>>2]|0);k[o>>2]=0;cd(k[k[s>>2]>>2]|0);b=k[s>>2]|0;k[b>>2]=0;if(!b)break}cd(b);k[s>>2]=0}while(0);cd(a);return}function hg(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;d=a+32|0;e=k[d>>2]|0;b=a+40|0;c=k[b>>2]|0;if(e){f=a+44|0;if(c>>>0<=(k[f>>2]|0)>>>0){a=1;return a|0}if(k[a+36>>2]|0){ad(e);e=$c(k[b>>2]|0)|0;k[d>>2]=e;if(!e){k[f>>2]=0;k[b>>2]=0;k[a+36>>2]=0;a=0;return a|0}else{k[f>>2]=k[b>>2];k[a+36>>2]=1;a=1;return a|0}}}f=$c(c)|0;k[d>>2]=f;if(!f){a=0;return a|0}k[a+44>>2]=k[b>>2];k[a+36>>2]=1;a=1;return a|0}function ig(a,b,c){a=a|0;b=b|0;c=c|0;return sg(a,b,1,1.0,52,c)|0}function jg(a,b,c){a=a|0;b=b|0;c=c|0;return sg(a,b,0,.5,56,c)|0}function kg(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0;c=k[a+24>>2]|0;e=k[c+16>>2]|0;if(!e){f=0;return f|0}f=0;b=0;d=k[c+24>>2]|0;c=k[(k[k[a+20>>2]>>2]|0)+20>>2]|0;while(1){h=k[d+24>>2]|0;h=((h&7|0)!=0&1)+(h>>>3)|0;g=k[c+24>>2]|0;a=(k[c+20>>2]|0)+-1|0;b=(ha(ha((h|0)==3?4:h,(k[g+(a*136|0)+8>>2]|0)-(k[g+(a*136|0)>>2]|0)|0)|0,(k[g+(a*136|0)+12>>2]|0)-(k[g+(a*136|0)+4>>2]|0)|0)|0)+b|0;f=f+1|0;if(f>>>0>=e>>>0)break;else{d=d+52|0;c=c+52|0}}return b|0}function lg(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;y=r;r=r+16|0;w=y;if(!(k[a+8>>2]|0)){k[a+36>>2]=b;u=a+28|0;g=k[(k[u>>2]|0)+76>>2]|0;x=a+32|0;k[x>>2]=g+(b*5640|0);v=(f|0)==0;t=a+20|0;if(!v){h=k[(k[k[t>>2]>>2]|0)+20>>2]|0;n=k[g+(b*5640|0)+5584>>2]|0;o=h+16|0;if(!(k[o>>2]|0)){h=f+88|0;g=0}else{j=k[h+24>>2]|0;h=f+88|0;l=k[h>>2]|0;m=0;g=0;do{s=j+(m*136|0)+16|0;k[l+(b*592|0)+20+(m<<2)>>2]=k[s>>2];q=j+(m*136|0)+20|0;k[l+(b*592|0)+152+(m<<2)>>2]=k[q>>2];g=(ha(k[q>>2]|0,k[s>>2]|0)|0)+g|0;k[l+(b*592|0)+284+(m<<2)>>2]=k[n+812+(m<<2)>>2];k[l+(b*592|0)+416+(m<<2)>>2]=k[n+944+(m<<2)>>2];m=m+1|0}while(m>>>0<(k[o>>2]|0)>>>0)}s=_c(ha(ha(k[f+52>>2]|0,g)|0,k[f+56>>2]|0)|0,32)|0;k[(k[h>>2]|0)+(b*592|0)+548>>2]=s;if(!s){a=0;r=y;return a|0}}g=k[k[t>>2]>>2]|0;s=g+16|0;if(!(k[s>>2]|0)){m=k[x>>2]|0;j=0;h=k[g+20>>2]|0}else{m=k[x>>2]|0;h=k[g+20>>2]|0;b=0;p=k[m+5584>>2]|0;q=h;while(1){n=k[q+32>>2]|0;o=ha((k[q+12>>2]|0)-(k[q+4>>2]|0)|0,(k[q+8>>2]|0)-(k[q>>2]|0)|0)|0;g=(o|0)==0;if((k[p+20>>2]|0)==1){if(!g){j=p+1076|0;l=0;g=n;while(1){k[g>>2]=(k[g>>2]|0)-(k[j>>2]|0);l=l+1|0;if((l|0)==(o|0))break;else g=g+4|0}}}else if(!g){j=p+1076|0;l=0;g=n;while(1){k[g>>2]=(k[g>>2]|0)-(k[j>>2]|0)<<11;l=l+1|0;if((l|0)==(o|0))break;else g=g+4|0}}b=b+1|0;j=k[s>>2]|0;if(b>>>0>=j>>>0)break;else{p=p+1080|0;q=q+52|0}}}n=ha((k[h+12>>2]|0)-(k[h+4>>2]|0)|0,(k[h+8>>2]|0)-(k[h>>2]|0)|0)|0;a:do switch(k[m+16>>2]|0){case 0:break;case 2:{if(k[m+5608>>2]|0){l=Zc(j<<2)|0;if(!l){a=0;r=y;return a|0}g=k[s>>2]|0;if(!g)g=0;else{j=0;while(1){k[l+(j<<2)>>2]=k[h+32>>2];j=j+1|0;if((j|0)==(g|0))break;else h=h+52|0}}s=(Qf(k[(k[x>>2]|0)+5608>>2]|0,n,l,g,k[(k[(k[a+24>>2]|0)+24>>2]|0)+32>>2]|0)|0)==0;cd(l);if(s){a=0;r=y;return a|0}}break}default:{j=k[h+32>>2]|0;l=k[h+84>>2]|0;g=k[h+136>>2]|0;if(!(k[(k[m+5584>>2]|0)+20>>2]|0)){Of(j,l,g,n);break a}else{Mf(j,l,g,n);break a}}}while(0);g=k[k[t>>2]>>2]|0;h=g+16|0;b:do if(k[h>>2]|0){j=0;l=k[(k[x>>2]|0)+5584>>2]|0;g=k[g+20>>2]|0;c:while(1){switch(k[l+20>>2]|0){case 1:{if(!(Pg(g)|0)){g=0;h=54;break c}break}case 0:{if(!(Tg(g)|0)){g=0;h=54;break c}break}default:{}}j=j+1|0;if(j>>>0>=(k[h>>2]|0)>>>0)break b;else{l=l+1080|0;g=g+52|0}}if((h|0)==54){r=y;return g|0}}while(0);g=k[x>>2]|0;h=eh(1)|0;if(!h){a=0;r=y;return a|0}do if((k[g+16>>2]|0)==1)if(!(k[(k[g+5584>>2]|0)+20>>2]|0)){j=Lf()|0;l=3;break}else{j=Kf()|0;l=3;break}else{j=k[g+5600>>2]|0;l=k[(k[a+24>>2]|0)+16>>2]|0}while(0);t=hh(h,k[k[t>>2]>>2]|0,g,j,l)|0;fh(h);if(!t){a=0;r=y;return a|0}g=k[u>>2]|0;k[w>>2]=0;if(!v)k[f+12>>2]=0;if(!(i[g+93>>0]&5)){if(k[(k[x>>2]|0)+8>>2]|0){g=0;do{cg(a,g,1);g=g+1|0}while(g>>>0<(k[(k[x>>2]|0)+8>>2]|0)>>>0)}}else if(!(eg(a,c,w,e,f)|0)){a=0;r=y;return a|0}}if(f)k[f+12>>2]=1;g=nh(k[a+24>>2]|0,k[a+28>>2]|0)|0;if(!g)g=1;else{a=lh(g,k[a+36>>2]|0,k[k[a+20>>2]>>2]|0,k[(k[a+32>>2]|0)+8>>2]|0,c,d,e,f,k[a+4>>2]|0,k[a>>2]|0,k[a+16>>2]|0,1)|0;oh(g);g=(a|0)==0}a=g&1^1;r=y;return a|0}function mg(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0,m=0,n=0,p=0,q=0,s=0,t=0,u=0;u=r;r=r+16|0;j=u+8|0;i=u;h=u+12|0;g=a+36|0;k[g>>2]=d;t=k[a+28>>2]|0;n=a+32|0;k[n>>2]=(k[t+76>>2]|0)+(d*5640|0);k[h>>2]=0;m=a+24|0;d=nh(k[m>>2]|0,t)|0;if(!d){t=0;r=u;return t|0}l=a+20|0;t=mh(d,k[g>>2]|0,k[k[l>>2]>>2]|0,b,h,c,e,f)|0;oh(d);if(!t){t=0;r=u;return t|0}d=k[k[l>>2]>>2]|0;a=k[(k[n>>2]|0)+5584>>2]|0;g=k[d+20>>2]|0;c=eh(0)|0;if(!c){t=0;r=u;return t|0}h=d+16|0;a:do if(k[h>>2]|0){e=0;d=g;while(1){if(!(gh(c,d,a)|0))break;e=e+1|0;if(e>>>0>=(k[h>>2]|0)>>>0)break a;else{a=a+1080|0;d=d+52|0}}fh(c);t=0;r=u;return t|0}while(0);fh(c);d=k[k[l>>2]>>2]|0;g=d+16|0;do if(k[g>>2]|0){h=0;e=k[(k[m>>2]|0)+24>>2]|0;c=k[(k[n>>2]|0)+5584>>2]|0;a=k[d+20>>2]|0;while(1){d=(k[e+36>>2]|0)+1|0;if((k[c+20>>2]|0)==1){if(!(Qg(a,d)|0)){d=0;a=49;break}}else if(!(Xg(a,d)|0)){d=0;a=49;break}h=h+1|0;if(h>>>0>=(k[g>>2]|0)>>>0){a=14;break}else{e=e+52|0;c=c+1080|0;a=a+52|0}}if((a|0)==14){d=k[k[l>>2]>>2]|0;break}else if((a|0)==49){r=u;return d|0}}while(0);h=k[n>>2]|0;a=k[d+20>>2]|0;g=k[h+16>>2]|0;do if(g){b=ha((k[a+12>>2]|0)-(k[a+4>>2]|0)|0,(k[a+8>>2]|0)-(k[a>>2]|0)|0)|0;c=d+16|0;d=k[c>>2]|0;if(d>>>0<=2){k[j>>2]=d;cc(f,1,19722,j)|0;break}if((ha((k[a+64>>2]|0)-(k[a+56>>2]|0)|0,(k[a+60>>2]|0)-(k[a+52>>2]|0)|0)|0)>=(b|0)?(ha((k[a+116>>2]|0)-(k[a+108>>2]|0)|0,(k[a+112>>2]|0)-(k[a+104>>2]|0)|0)|0)>=(b|0):0){if((g|0)!=2){d=k[a+32>>2]|0;if((k[(k[h+5584>>2]|0)+20>>2]|0)==1){Nf(d,k[a+84>>2]|0,k[a+136>>2]|0,b);break}else{Pf(d,k[a+84>>2]|0,k[a+136>>2]|0,b);break}}e=h+5604|0;if(!(k[e>>2]|0))break;h=Zc(d<<2)|0;if(!h){t=0;r=u;return t|0}d=k[c>>2]|0;if(!d)d=0;else{g=0;while(1){k[h+(g<<2)>>2]=k[a+32>>2];g=g+1|0;if((g|0)==(d|0))break;else a=a+52|0}}t=(Rf(k[e>>2]|0,b,h,d,k[(k[(k[m>>2]|0)+24>>2]|0)+32>>2]|0)|0)==0;cd(h);if(t)d=0;else break;r=u;return d|0}cc(f,1,19661,i)|0;t=0;r=u;return t|0}while(0);d=k[k[l>>2]>>2]|0;s=d+16|0;if(!(k[s>>2]|0)){t=1;r=u;return t|0}t=0;q=k[(k[m>>2]|0)+24>>2]|0;p=k[(k[n>>2]|0)+5584>>2]|0;n=k[d+20>>2]|0;while(1){m=k[n+24>>2]|0;f=k[q+36>>2]|0;g=k[m+(f*136|0)+8>>2]|0;h=k[m+(f*136|0)>>2]|0;l=g-h|0;e=k[m+(f*136|0)+12>>2]|0;f=k[m+(f*136|0)+4>>2]|0;m=(k[n+8>>2]|0)-(k[n>>2]|0)-l|0;d=k[q+24>>2]|0;if(!(k[q+32>>2]|0)){d=1<<d;j=0}else{j=1<<d+-1;d=j;j=0-j|0}i=d+-1|0;d=k[n+32>>2]|0;a=(e|0)==(f|0);if((k[p+20>>2]|0)==1){if(!a){c=(g|0)==(h|0);b=p+1076|0;h=e-f|0;e=0;while(1){if(!c){a=0;g=d;while(1){f=(k[b>>2]|0)+(k[g>>2]|0)|0;k[g>>2]=(f|0)<(j|0)?j:(f|0)>(i|0)?i:f;a=a+1|0;if((a|0)==(l|0))break;else g=g+4|0}d=d+(l<<2)|0}e=e+1|0;if((e|0)==(h|0))break;else d=d+(m<<2)|0}}}else if(!a){c=(g|0)==(h|0);b=p+1076|0;h=e-f|0;e=0;while(1){if(!c){a=0;g=d;while(1){f=Rh(+o[g>>2])|0;f=(k[b>>2]|0)+f|0;k[g>>2]=(f|0)<(j|0)?j:(f|0)>(i|0)?i:f;a=a+1|0;if((a|0)==(l|0))break;else g=g+4|0}d=d+(l<<2)|0}e=e+1|0;if((e|0)==(h|0))break;else d=d+(m<<2)|0}}t=t+1|0;if(t>>>0>=(k[s>>2]|0)>>>0){d=1;break}else{q=q+52|0;p=p+1080|0;n=n+52|0}}r=u;return d|0}function ng(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0;q=a+24|0;m=k[q>>2]|0;e=k[m+16>>2]|0;l=(e|0)==0;if(l){q=1;return q|0}f=0;d=0;g=k[m+24>>2]|0;h=k[(k[k[a+20>>2]>>2]|0)+20>>2]|0;while(1){n=k[g+24>>2]|0;n=((n&7|0)!=0&1)+(n>>>3)|0;o=k[h+24>>2]|0;p=(k[h+20>>2]|0)+-1|0;d=(ha(ha((n|0)==3?4:n,(k[o+(p*136|0)+8>>2]|0)-(k[o+(p*136|0)>>2]|0)|0)|0,(k[o+(p*136|0)+12>>2]|0)-(k[o+(p*136|0)+4>>2]|0)|0)|0)+d|0;f=f+1|0;if((f|0)==(e|0))break;else{g=g+52|0;h=h+52|0}}d=d>>>0>c>>>0;if(d|l){q=d&1^1;return q|0}p=0;o=k[m+24>>2]|0;n=k[(k[k[a+20>>2]>>2]|0)+20>>2]|0;while(1){l=k[o+24>>2]|0;a=k[n+24>>2]|0;c=k[o+36>>2]|0;f=k[a+(c*136|0)+8>>2]|0;g=k[a+(c*136|0)>>2]|0;m=f-g|0;h=k[a+(c*136|0)+12>>2]|0;c=k[a+(c*136|0)+4>>2]|0;a=(k[n+8>>2]|0)-(k[n>>2]|0)-m|0;l=((l&7|0)!=0&1)+(l>>>3)|0;a:do switch(((l|0)==3?4:l)|0){case 1:{d=k[n+32>>2]|0;e=(h|0)==(c|0);if(!(k[o+32>>2]|0)){if(e)break a;l=(f|0)==(g|0);h=h-c|0;c=0;while(1){if(!l){g=b+m|0;f=0;e=d;while(1){i[b>>0]=k[e>>2];f=f+1|0;if((f|0)==(m|0))break;else{b=b+1|0;e=e+4|0}}b=g;d=d+(m<<2)|0}c=c+1|0;if((c|0)==(h|0))break;else d=d+(a<<2)|0}}else{if(e)break a;l=(f|0)==(g|0);h=h-c|0;c=0;while(1){if(!l){g=b+m|0;f=0;e=d;while(1){i[b>>0]=k[e>>2];f=f+1|0;if((f|0)==(m|0))break;else{b=b+1|0;e=e+4|0}}b=g;d=d+(m<<2)|0}c=c+1|0;if((c|0)==(h|0))break;else d=d+(a<<2)|0}}break}case 2:{d=k[n+32>>2]|0;e=(h|0)==(c|0);if(!(k[o+32>>2]|0)){if(!e){l=(f|0)==(g|0);h=h-c|0;c=0;while(1){if(!l){g=b+(m<<1)|0;f=0;e=d;while(1){j[b>>1]=k[e>>2];f=f+1|0;if((f|0)==(m|0))break;else{b=b+2|0;e=e+4|0}}b=g;d=d+(m<<2)|0}c=c+1|0;if((c|0)==(h|0))break;else d=d+(a<<2)|0}}}else if(!e){l=(f|0)==(g|0);h=h-c|0;c=0;while(1){if(!l){g=b+(m<<1)|0;f=0;e=d;while(1){j[b>>1]=k[e>>2];f=f+1|0;if((f|0)==(m|0))break;else{b=b+2|0;e=e+4|0}}b=g;d=d+(m<<2)|0}c=c+1|0;if((c|0)==(h|0))break;else d=d+(a<<2)|0}}break}case 4:{if((h|0)!=(c|0)){l=(f|0)==(g|0);h=h-c|0;c=0;d=k[n+32>>2]|0;while(1){if(!l){g=b+(m<<2)|0;f=0;e=d;while(1){k[b>>2]=k[e>>2];f=f+1|0;if((f|0)==(m|0))break;else{b=b+4|0;e=e+4|0}}b=g;d=d+(m<<2)|0}c=c+1|0;if((c|0)==(h|0))break;else d=d+(a<<2)|0}}break}default:{}}while(0);p=p+1|0;if(p>>>0>=(k[(k[q>>2]|0)+16>>2]|0)>>>0){b=1;break}else{o=o+52|0;n=n+52|0}}return b|0}function og(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;c=k[a+24>>2]|0;e=k[c+16>>2]|0;if(!e){f=0;return f|0}f=0;b=0;d=k[c+24>>2]|0;c=k[(k[k[a+20>>2]>>2]|0)+20>>2]|0;while(1){a=k[d+24>>2]|0;a=((a&7|0)!=0&1)+(a>>>3)|0;b=(ha(ha((k[c+12>>2]|0)-(k[c+4>>2]|0)|0,(k[c+8>>2]|0)-(k[c>>2]|0)|0)|0,(a|0)==3?4:a)|0)+b|0;f=f+1|0;if(f>>>0>=e>>>0)break;else{d=d+52|0;c=c+52|0}}return b|0}function pg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,n=0,o=0,p=0,q=0;o=k[a+24>>2]|0;q=o+16|0;e=k[q>>2]|0;n=(e|0)==0;if(n)d=0;else{f=0;d=0;g=k[o+24>>2]|0;h=k[(k[k[a+20>>2]>>2]|0)+20>>2]|0;while(1){p=k[g+24>>2]|0;p=((p&7|0)!=0&1)+(p>>>3)|0;d=(ha(ha((k[h+12>>2]|0)-(k[h+4>>2]|0)|0,(k[h+8>>2]|0)-(k[h>>2]|0)|0)|0,(p|0)==3?4:p)|0)+d|0;f=f+1|0;if((f|0)==(e|0))break;else{g=g+52|0;h=h+52|0}}}d=(d|0)!=(c|0);if(d|n){q=d&1^1;return q|0}p=0;n=k[o+24>>2]|0;c=k[(k[k[a+20>>2]>>2]|0)+20>>2]|0;while(1){a=k[n+24>>2]|0;d=(k[c+8>>2]|0)-(k[c>>2]|0)|0;e=(k[c+12>>2]|0)-(k[c+4>>2]|0)|0;h=ha(e,d)|0;a=((a&7|0)!=0&1)+(a>>>3)|0;a:do switch(((a|0)==3?4:a)|0){case 1:{e=k[c+32>>2]|0;d=(h|0)==0;if(!(k[n+32>>2]|0)){if(d)break a;else{f=0;d=e;e=b}while(1){k[d>>2]=l[e>>0];f=f+1|0;if((f|0)==(h|0))break;else{d=d+4|0;e=e+1|0}}b=b+h|0;break a}else{if(d)break a;else{f=0;d=e;e=b}while(1){k[d>>2]=i[e>>0];f=f+1|0;if((f|0)==(h|0))break;else{d=d+4|0;e=e+1|0}}b=b+h|0;break a}}case 2:{g=k[c+32>>2]|0;f=(h|0)==0;if(!(k[n+32>>2]|0)){if(!f){f=b+(ha(e<<1,d)|0)|0;e=0;d=g;while(1){k[d>>2]=m[b>>1];e=e+1|0;if((e|0)==(h|0))break;else{d=d+4|0;b=b+2|0}}b=f}}else if(!f){f=b+(ha(e<<1,d)|0)|0;e=0;d=g;while(1){k[d>>2]=j[b>>1];e=e+1|0;if((e|0)==(h|0))break;else{d=d+4|0;b=b+2|0}}b=f}break}case 4:{if(h){f=b+(ha(e<<2,d)|0)|0;d=0;e=k[c+32>>2]|0;while(1){k[e>>2]=k[b>>2];d=d+1|0;if((d|0)==(h|0))break;else{e=e+4|0;b=b+4|0}}b=f}break}default:{}}while(0);p=p+1|0;if(p>>>0>=(k[q>>2]|0)>>>0){b=1;break}else{n=n+52|0;c=c+52|0}}return b|0}function qg(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;f=a+24|0;b=k[f>>2]|0;if(!b)return;e=k[a+28>>2]|0;d=(e>>>0)/52|0;if(e>>>0>51){e=0;while(1){a=k[b>>2]|0;if(a){cd(a+-1|0);k[b>>2]=0}a=b+4|0;c=k[a>>2]|0;if(c){cd(c);k[a>>2]=0}a=b+8|0;c=k[a>>2]|0;if(c){cd(c);k[a>>2]=0}e=e+1|0;if(e>>>0>=d>>>0)break;else b=b+52|0}b=k[f>>2]|0}cd(b);k[f>>2]=0;return}function rg(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;f=a+24|0;b=k[f>>2]|0;if(!b)return;e=k[a+28>>2]|0;d=(e>>>0)/56|0;if(e>>>0>55){e=0;while(1){a=k[b>>2]|0;if(a){cd(a);k[b>>2]=0}c=b+4|0;a=k[c>>2]|0;if(a){cd(a);k[c>>2]=0}e=e+1|0;if(e>>>0>=d>>>0)break;else b=b+56|0}b=k[f>>2]|0}cd(b);k[f>>2]=0;return}function sg(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0.0;Sa=r;r=r+80|0;La=Sa+64|0;Ka=Sa+56|0;Na=Sa+48|0;Pa=Sa+40|0;Oa=Sa+32|0;Qa=Sa+24|0;Ma=Sa+16|0;Ja=Sa+8|0;g=k[a+28>>2]|0;Ia=k[k[a+20>>2]>>2]|0;n=k[(k[g+76>>2]|0)+(b*5640|0)+5584>>2]|0;p=k[Ia+20>>2]|0;l=k[a+24>>2]|0;m=k[l+24>>2]|0;Fa=k[g+24>>2]|0;j=k[g+12>>2]|0;Ha=(ha(j,(b>>>0)%(Fa>>>0)|0)|0)+(k[g+4>>2]|0)|0;h=k[l>>2]|0;h=Ha>>>0>h>>>0?Ha:h;k[Ia>>2]=h;Ha=aj(j|0,0,Ha|0,0)|0;Ha=Ha|0-L;j=k[l+8>>2]|0;j=Ha>>>0<j>>>0?Ha:j;Ha=Ia+8|0;k[Ha>>2]=j;Ga=k[g+16>>2]|0;Fa=(ha(Ga,(b>>>0)/(Fa>>>0)|0)|0)+(k[g+8>>2]|0)|0;b=k[l+4>>2]|0;b=Fa>>>0>b>>>0?Fa:b;Ea=Ia+4|0;k[Ea>>2]=b;Fa=aj(Ga|0,0,Fa|0,0)|0;Fa=Fa|0-L;l=k[l+12>>2]|0;l=Fa>>>0<l>>>0?Fa:l;Fa=Ia+12|0;k[Fa>>2]=l;if(!(k[n+4>>2]|0)){cc(f,1,19796,Sa)|0;Ra=0;r=Sa;return Ra|0}Ga=Ia+16|0;if(!(k[Ga>>2]|0)){Ra=1;r=Sa;return Ra|0}Da=g+80|0;Ca=a+40|0;Ba=(c|0)==0;g=b;Aa=0;a:while(1){k[m+36>>2]=0;va=k[m>>2]|0;b=(h+-1+va|0)/(va|0)|0;k[p>>2]=b;wa=k[m+4>>2]|0;g=(g+-1+wa|0)/(wa|0)|0;za=p+4|0;k[za>>2]=g;va=(j+-1+va|0)/(va|0)|0;ya=p+8|0;k[ya>>2]=va;wa=(l+-1+wa|0)/(wa|0)|0;xa=p+12|0;k[xa>>2]=wa;b=va-b|0;g=wa-g|0;if((4294967295/(b>>>0)|0)>>>0<g>>>0){Ra=6;break}b=ha(g,b)|0;if(b>>>0>1073741823){Ra=8;break}j=b<<2;va=k[n+4>>2]|0;wa=p+16|0;k[wa>>2]=va;a=k[Da>>2]|0;k[p+20>>2]=va>>>0<a>>>0?1:va-a|0;a=p+40|0;k[a>>2]=j;do if(i[Ca>>0]&1){c=p+32|0;h=k[c>>2]|0;if(h){g=p+44|0;if(j>>>0<=(k[g>>2]|0)>>>0)break;b=p+36|0;if(k[b>>2]|0){ad(h);va=$c(k[a>>2]|0)|0;k[c>>2]=va;if(!va){Ra=16;break a}k[g>>2]=k[a>>2];k[b>>2]=1;break}}va=$c(j)|0;k[c>>2]=va;if(!va)break a;k[p+44>>2]=k[a>>2];k[p+36>>2]=1}while(0);c=(k[wa>>2]|0)*136|0;g=p+24|0;a=k[g>>2]|0;if(a){b=p+28|0;if(c>>>0>(k[b>>2]|0)>>>0){a=bd(a,c)|0;if(!a){Ra=24;break}k[g>>2]=a;va=k[b>>2]|0;_i(a+va|0,0,c-va|0)|0;k[b>>2]=c}}else{b=Zc(c)|0;k[g>>2]=b;if(!b){b=0;Ra=87;break}k[p+28>>2]=c;_i(b|0,0,c|0)|0}b=k[wa>>2]|0;va=(k[n+20>>2]|0)==0?7:8;if(b){ra=n+8|0;sa=n+12|0;ta=m+24|0;ua=n+804|0;qa=k[g>>2]|0;g=n+28|0;a=0;while(1){oa=b;pa=b+-1|0;la=k[p>>2]|0;ma=$i(1,0,pa|0)|0;ma=aj(ma|0,L|0,-1,-1)|0;na=L;la=aj(ma|0,na|0,la|0,((la|0)<0)<<31>>31|0)|0;la=Zi(la|0,L|0,pa|0)|0;k[qa>>2]=la;c=k[za>>2]|0;c=aj(ma|0,na|0,c|0,((c|0)<0)<<31>>31|0)|0;c=Zi(c|0,L|0,pa|0)|0;k[qa+4>>2]=c;b=k[ya>>2]|0;b=aj(ma|0,na|0,b|0,((b|0)<0)<<31>>31|0)|0;b=Zi(b|0,L|0,pa|0)|0;k[qa+8>>2]=b;h=k[xa>>2]|0;h=aj(ma|0,na|0,h|0,((h|0)<0)<<31>>31|0)|0;h=Zi(h|0,L|0,pa|0)|0;k[qa+12>>2]=h;q=k[n+812+(a<<2)>>2]|0;l=k[n+944+(a<<2)>>2]|0;s=la>>q<<q;t=c>>l<<l;j=$i(1,0,l|0)|0;j=aj(j|0,L|0,-1,-1)|0;j=aj(j|0,L|0,h|0,((h|0)<0)<<31>>31|0)|0;j=Zi(j|0,L|0,l|0)|0;if((la|0)==(b|0))b=0;else{la=$i(1,0,q|0)|0;la=aj(la|0,L|0,-1,-1)|0;b=aj(la|0,L|0,b|0,((b|0)<0)<<31>>31|0)|0;b=Zi(b|0,L|0,q|0)|0;b=(b<<q)-s>>q}la=qa+16|0;k[la>>2]=b;ia=(c|0)==(h|0)?0:(j<<l)-t>>l;k[qa+20>>2]=ia;ia=ha(ia,b)|0;ja=ia*40|0;ka=(a|0)==0;if(ka)b=1;else{s=aj(s|0,((s|0)<0)<<31>>31|0,1,0)|0;s=bj(s|0,L|0,1)|0;t=aj(t|0,((t|0)<0)<<31>>31|0,1,0)|0;t=bj(t|0,L|0,1)|0;b=3;l=l+-1|0;q=q+-1|0}ga=qa+24|0;k[ga>>2]=b;S=k[ra>>2]|0;S=S>>>0<q>>>0?S:q;T=k[sa>>2]|0;T=T>>>0<l>>>0?T:l;U=(ia|0)!=0;V=(ia|0)==0;W=1<<q;X=1<<l;Y=$i(1,0,S|0)|0;Y=aj(Y|0,L|0,-1,-1)|0;Z=L;_=$i(1,0,T|0)|0;_=aj(_|0,L|0,-1,-1)|0;$=L;aa=1<<S;ba=1<<T;ca=$i(1,0,oa|0)|0;ca=aj(ca|0,L|0,-1,-1)|0;da=L;ea=0;fa=qa+28|0;R=g;while(1){if(ka){b=k[p>>2]|0;b=aj(ma|0,na|0,b|0,((b|0)<0)<<31>>31|0)|0;b=Zi(b|0,L|0,pa|0)|0;g=k[za>>2]|0;g=aj(ma|0,na|0,g|0,((g|0)<0)<<31>>31|0)|0;g=Zi(g|0,L|0,pa|0)|0;c=k[ya>>2]|0;c=aj(ma|0,na|0,c|0,((c|0)<0)<<31>>31|0)|0;c=Zi(c|0,L|0,pa|0)|0;j=k[xa>>2]|0;j=aj(ma|0,na|0,j|0,((j|0)<0)<<31>>31|0)|0;j=Zi(j|0,L|0,pa|0)|0;h=0}else{h=ea+1|0;b=k[p>>2]|0;O=$i(h&1|0,0,pa|0)|0;O=Yi(ca|0,da|0,O|0,L|0)|0;j=L;b=aj(O|0,j|0,b|0,((b|0)<0)<<31>>31|0)|0;b=Zi(b|0,L|0,oa|0)|0;g=k[za>>2]|0;P=$i(h>>>1|0,0,pa|0)|0;P=Yi(ca|0,da|0,P|0,L|0)|0;Q=L;g=aj(P|0,Q|0,g|0,((g|0)<0)<<31>>31|0)|0;g=Zi(g|0,L|0,oa|0)|0;c=k[ya>>2]|0;c=aj(O|0,j|0,c|0,((c|0)<0)<<31>>31|0)|0;c=Zi(c|0,L|0,oa|0)|0;j=k[xa>>2]|0;j=aj(P|0,Q|0,j|0,((j|0)<0)<<31>>31|0)|0;j=Zi(j|0,L|0,oa|0)|0}k[fa+16>>2]=h;k[fa>>2]=b;Q=fa+4|0;k[Q>>2]=g;P=fa+8|0;k[P>>2]=c;O=fa+12|0;k[O>>2]=j;g=eb[va&15](h)|0;Ta=+(k[R+4>>2]|0)*.00048828125+1.0;Ta=+Qh(1.0,(k[ta>>2]|0)+g-(k[R>>2]|0)|0)*Ta*d;o[fa+32>>2]=Ta;k[fa+28>>2]=(k[R>>2]|0)+-1+(k[ua>>2]|0);g=fa+20|0;c=k[g>>2]|0;if(!(U&(c|0)==0)){b=fa+24|0;if((k[b>>2]|0)>>>0<ja>>>0){c=bd(c,ja)|0;if(!c){Ra=41;break a}k[g>>2]=c;N=k[b>>2]|0;_i(c+N|0,0,ja-N|0)|0;k[b>>2]=ja}}else{b=Zc(ja)|0;k[g>>2]=b;if(!b){b=0;Ra=87;break a}_i(b|0,0,ja|0)|0;k[fa+24>>2]=ja}if(!V){M=k[g>>2]|0;N=0;while(1){E=k[la>>2]|0;I=(((N>>>0)%(E>>>0)|0)<<q)+s|0;E=(((N>>>0)/(E>>>0)|0)<<l)+t|0;F=I+W|0;G=E+X|0;H=k[fa>>2]|0;H=(I|0)>(H|0)?I:H;k[M>>2]=H;I=k[Q>>2]|0;I=(E|0)>(I|0)?E:I;E=M+4|0;k[E>>2]=I;K=k[P>>2]|0;K=(F|0)<(K|0)?F:K;F=M+8|0;k[F>>2]=K;h=k[O>>2]|0;h=(G|0)<(h|0)?G:h;G=M+12|0;k[G>>2]=h;H=H>>S<<S;I=I>>T<<T;K=aj(Y|0,Z|0,K|0,((K|0)<0)<<31>>31|0)|0;K=Zi(K|0,L|0,S|0)|0;h=aj(_|0,$|0,h|0,((h|0)<0)<<31>>31|0)|0;h=Zi(h|0,L|0,T|0)|0;K=(K<<S)-H>>S;J=M+16|0;k[J>>2]=K;h=(h<<T)-I>>T;u=M+20|0;k[u>>2]=h;K=ha(h,K)|0;h=ha(K,e)|0;g=M+24|0;c=k[g>>2]|0;do if((c|0)==0&(K|0)!=0){b=Zc(h)|0;k[g>>2]=b;if(!b){b=0;Ra=87;break a}_i(b|0,0,h|0)|0;k[M+28>>2]=h}else{b=M+28|0;if(h>>>0<=(k[b>>2]|0)>>>0)break;c=bd(c,h)|0;if(!c){Ra=50;break a}k[g>>2]=c;D=k[b>>2]|0;_i(c+D|0,0,h-D|0)|0;k[b>>2]=h}while(0);j=M+32|0;b=k[j>>2]|0;c=k[J>>2]|0;h=k[u>>2]|0;if(!b)b=tg(c,h,f)|0;else b=vg(b,c,h,f)|0;k[j>>2]=b;if(!b)cc(f,2,20009,Ka)|0;j=M+36|0;c=k[j>>2]|0;h=k[J>>2]|0;b=k[u>>2]|0;if(!c)b=tg(h,b,f)|0;else b=vg(c,h,b,f)|0;k[j>>2]=b;if(!b)cc(f,2,20031,La)|0;if(K){D=0;do{A=k[J>>2]|0;z=(((D>>>0)%(A>>>0)|0)<<S)+H|0;A=(((D>>>0)/(A>>>0)|0)<<T)+I|0;B=z+aa|0;C=A+ba|0;do if(Ba){b=k[g>>2]|0;c=b+(D*56|0)|0;h=k[c>>2]|0;if(!h){y=Zc(8192)|0;k[c>>2]=y;if(!y){b=0;Ra=87;break a}k[b+(D*56|0)+32>>2]=8192;y=_c(10,32)|0;k[b+(D*56|0)+4>>2]=y;if(!y){b=0;Ra=87;break a}k[b+(D*56|0)+52>>2]=10}else{j=b+(D*56|0)+32|0;u=k[j>>2]|0;v=b+(D*56|0)+4|0;w=k[v>>2]|0;x=c;y=x+52|0;do{k[x>>2]=0;x=x+4|0}while((x|0)<(y|0));k[c>>2]=h;k[j>>2]=u;k[v>>2]=w}y=k[M>>2]|0;k[b+(D*56|0)+8>>2]=(z|0)>(y|0)?z:y;z=k[E>>2]|0;k[b+(D*56|0)+12>>2]=(A|0)>(z|0)?A:z;A=k[F>>2]|0;k[b+(D*56|0)+16>>2]=(B|0)<(A|0)?B:A;B=k[G>>2]|0;k[b+(D*56|0)+20>>2]=(C|0)<(B|0)?C:B}else{c=k[g>>2]|0;b=c+(D*52|0)+4|0;if((k[b>>2]|0)==0?(y=_c(100,24)|0,k[b>>2]=y,(y|0)==0):0){b=0;Ra=87;break a}b=c+(D*52|0)+8|0;if((k[b>>2]|0)==0?(y=_c(100,24)|0,k[b>>2]=y,(y|0)==0):0){b=0;Ra=87;break a}j=k[M>>2]|0;j=(z|0)>(j|0)?z:j;k[c+(D*52|0)+12>>2]=j;b=k[E>>2]|0;A=(A|0)>(b|0)?A:b;k[c+(D*52|0)+16>>2]=A;b=k[F>>2]|0;b=(B|0)<(b|0)?B:b;k[c+(D*52|0)+20>>2]=b;B=k[G>>2]|0;C=(C|0)<(B|0)?C:B;k[c+(D*52|0)+24>>2]=C;j=ha(C-A|0,b-j<<2)|0;b=c+(D*52|0)+36|0;if(j>>>0<=(k[b>>2]|0)>>>0)break;h=c+(D*52|0)|0;c=k[h>>2]|0;if(c)cd(c+-1|0);c=Zc(j|1)|0;k[h>>2]=c;if(!c){Ra=74;break a}k[b>>2]=j;i[c>>0]=0;k[h>>2]=(k[h>>2]|0)+1}while(0);D=D+1|0}while(D>>>0<K>>>0)}N=N+1|0;if(N>>>0>=ia>>>0)break;else M=M+40|0}}g=R+8|0;ea=ea+1|0;if(ea>>>0>=(k[ga>>2]|0)>>>0)break;else{fa=fa+36|0;R=g}}a=a+1|0;if(a>>>0<(k[wa>>2]|0)>>>0){b=pa;qa=qa+136|0}else break}}b=Aa+1|0;if(b>>>0>=(k[Ga>>2]|0)>>>0){b=1;Ra=87;break}h=k[Ia>>2]|0;g=k[Ea>>2]|0;j=k[Ha>>2]|0;l=k[Fa>>2]|0;Aa=b;m=m+52|0;n=n+1080|0;p=p+52|0}if((Ra|0)==6){cc(f,1,19835,Ja)|0;Ra=0;r=Sa;return Ra|0}else if((Ra|0)==8){cc(f,1,19835,Ma)|0;Ra=0;r=Sa;return Ra|0}else if((Ra|0)==16){k[g>>2]=0;k[a>>2]=0;k[b>>2]=0}else if((Ra|0)==24){cc(f,1,19868,Oa)|0;cd(k[g>>2]|0);k[g>>2]=0;k[b>>2]=0;Ra=0;r=Sa;return Ra|0}else if((Ra|0)==41){cc(f,1,19908,Pa)|0;cd(k[g>>2]|0);k[g>>2]=0;k[b>>2]=0;Ra=0;r=Sa;return Ra|0}else if((Ra|0)==50){cd(k[g>>2]|0);k[g>>2]=0;k[b>>2]=0;cc(f,1,19951,Na)|0;Ra=0;r=Sa;return Ra|0}else if((Ra|0)==74){k[b>>2]=0;Ra=0;r=Sa;return Ra|0}else if((Ra|0)==87){r=Sa;return b|0}cc(f,1,19835,Qa)|0;Ra=0;r=Sa;return Ra|0}function tg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0;v=r;r=r+288|0;j=v+16|0;h=v+8|0;t=v+152|0;u=v+24|0;d=_c(1,20)|0;if(!d){cc(c,1,20053,v)|0;u=0;r=v;return u|0}k[d>>2]=a;l=d+4|0;k[l>>2]=b;k[t>>2]=a;k[u>>2]=b;i=d+8|0;k[i>>2]=0;e=0;g=0;while(1){s=ha(b,a)|0;a=(a+1|0)/2|0;f=g+1|0;k[t+(f<<2)>>2]=a;b=(b+1|0)/2|0;k[u+(f<<2)>>2]=b;e=e+s|0;if(s>>>0<=1)break;else g=f}k[i>>2]=e;if(!e){cd(d);cc(c,2,20091,h)|0;u=0;r=v;return u|0}e=_c(e,16)|0;k[d+12>>2]=e;if(!e){cc(c,1,20141,j)|0;cd(d);u=0;r=v;return u|0}s=k[i>>2]|0;k[d+16>>2]=s<<4;b=e+((ha(k[l>>2]|0,k[d>>2]|0)|0)<<4)|0;if(!g)b=e;else{q=0;f=b;a=b;b=e;do{o=k[u+(q<<2)>>2]|0;a:do if((o|0)>0){p=k[t+(q<<2)>>2]|0;if((p|0)<=0){i=o+-1|0;c=0;while(1){n=(c&1|0)!=0|(c|0)==(i|0);h=n?f:a;a=n?f:a+(p<<4)|0;c=c+1|0;if((c|0)>=(o|0)){f=h;break a}else f=h}}n=((p+2+((p|0)<2?~p:-3)|0)>>>1)+1|0;l=o+-1|0;m=0;do{c=p;j=f;while(1){k[b>>2]=j;h=b+16|0;i=c;c=c+-2|0;if((c|0)>-1){k[h>>2]=j;b=b+32|0}else b=h;if((i|0)<=2)break;else j=j+16|0}j=f+(n<<4)|0;c=(m&1|0)!=0|(m|0)==(l|0);f=c?j:a;a=c?j:a+(p<<4)|0;m=m+1|0}while((m|0)<(o|0))}while(0);q=q+1|0}while((q|0)!=(g|0))}k[b>>2]=0;if(!s){u=d;r=v;return u|0}else b=0;while(1){k[e+4>>2]=999;k[e+8>>2]=0;k[e+12>>2]=0;b=b+1|0;if((b|0)==(s|0))break;else e=e+16|0}r=v;return d|0}function ug(a){a=a|0;var b=0,c=0;if(!a)return;b=k[a+8>>2]|0;if(!b)return;c=0;a=k[a+12>>2]|0;while(1){k[a+4>>2]=999;k[a+8>>2]=0;k[a+12>>2]=0;c=c+1|0;if(c>>>0>=b>>>0)break;else a=a+16|0}return}
function lb(a){a=a|0;var b=0;b=r;r=r+a|0;r=r+15&-16;return b|0}function mb(){return r|0}function nb(a){a=a|0;r=a}function ob(a,b){a=a|0;b=b|0;r=a;s=b}function pb(a,b){a=a|0;b=b|0;if(!w){w=a;x=b}}function qb(a){a=a|0;i[t>>0]=i[a>>0];i[t+1>>0]=i[a+1>>0];i[t+2>>0]=i[a+2>>0];i[t+3>>0]=i[a+3>>0]}function rb(a){a=a|0;i[t>>0]=i[a>>0];i[t+1>>0]=i[a+1>>0];i[t+2>>0]=i[a+2>>0];i[t+3>>0]=i[a+3>>0];i[t+4>>0]=i[a+4>>0];i[t+5>>0]=i[a+5>>0];i[t+6>>0]=i[a+6>>0];i[t+7>>0]=i[a+7>>0]}function sb(a){a=a|0;L=a}function tb(){return L|0}function ub(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;p=r;r=r+8288|0;l=p+8|0;j=p;i=p+28|0;n=p+24|0;h=p+12|0;k[n>>2]=0;if((k[a>>2]|0)==1375686655)o=qc(0)|0;else o=qc(2)|0;lc(o,1,0)|0;mc(o,2,0)|0;nc(o,3,0)|0;rc(i);k[h>>2]=a;k[h+4>>2]=a;k[h+8>>2]=b;m=oc(h,1)|0;if(!(sc(o,i)|0)){wi(4476)|0;Pb(m);Jc(o);f=1;r=p;return f|0}if(!(tc(m,o,n)|0)){wi(4528)|0;Pb(m);Jc(o);hc(k[n>>2]|0);f=1;r=p;return f|0}if(!(yc(o,m,k[n>>2]|0,k[i+8228>>2]|0)|0)){wi(4578)|0;Jc(o);Pb(m);hc(k[n>>2]|0);f=1;r=p;return f|0}k[j>>2]=k[(k[(k[n>>2]|0)+24>>2]|0)+28>>2];vi(4625,j)|0;k[l>>2]=k[(k[(k[n>>2]|0)+24>>2]|0)+32>>2];vi(4634,l)|0;h=k[n>>2]|0;k[e>>2]=k[h+8>>2];k[f>>2]=k[h+12>>2];a=k[h+16>>2]|0;k[g>>2]=a;a=ha(ha(a<<2,k[e>>2]|0)|0,k[f>>2]|0)|0;k[d>>2]=a;j=Pi(a)|0;k[c>>2]=j;switch(k[g>>2]|0){case 1:{cj(j|0,k[(k[h+24>>2]|0)+44>>2]|0,a|0)|0;break}case 3:{if((ha(k[f>>2]|0,k[e>>2]|0)|0)>0){b=k[h+24>>2]|0;h=k[b+44>>2]|0;a=k[b+96>>2]|0;b=k[b+148>>2]|0;i=0;do{g=i*3|0;k[j+(g<<2)>>2]=k[h+(i<<2)>>2];k[j+(g+1<<2)>>2]=k[a+(i<<2)>>2];k[j+(g+2<<2)>>2]=k[b+(i<<2)>>2];i=i+1|0}while((i|0)<(ha(k[f>>2]|0,k[e>>2]|0)|0))}break}default:{}}Pb(m);Jc(o);hc(k[n>>2]|0);f=0;r=p;return f|0}function vb(){return pc()|0}function wb(a,b){a=a|0;b=b|0;return}function xb(a,b){a=a|0;b=b|0;return}function yb(a,b){a=a|0;b=b|0;var c=0;b=r;r=r+16|0;c=b;k[c>>2]=a;vi(4644,c)|0;r=b;return}function zb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;f=r;r=r+16|0;e=f;k[e>>2]=b;if(!c){r=f;return}b=a;d=0;a=e+(c+-1)|0;while(1){i[b>>0]=i[a>>0]|0;d=d+1|0;if((d|0)==(c|0))break;else{b=b+1|0;a=a+-1|0}}r=f;return}function Ab(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;k[b>>2]=0;if(!c)return;d=0;b=b+(c+-1)|0;while(1){i[b>>0]=i[a>>0]|0;d=d+1|0;if((d|0)==(c|0))break;else{a=a+1|0;b=b+-1|0}}return}function Bb(a,b){a=a|0;b=+b;var c=0,d=0,e=0,f=0,g=0;c=r;r=r+16|0;f=c;p[f>>3]=b;f=f+8|0;p[t>>3]=b;d=k[t>>2]|0;e=k[t+4>>2]|0;g=bj(d|0,e|0,56)|0;i[a>>0]=g;g=bj(d|0,e|0,48)|0;i[a+1>>0]=g;g=bj(d|0,e|0,40)|0;i[a+2>>0]=g;i[a+3>>0]=e;i[a+4>>0]=i[f+-5>>0]|0;i[a+5>>0]=i[f+-6>>0]|0;e=bj(d|0,e|0,8)|0;i[a+6>>0]=e;i[a+7>>0]=d;r=c;return}function Cb(a,b){a=a|0;b=b|0;var c=0;c=b+8|0;i[c+-1>>0]=i[a>>0]|0;i[c+-2>>0]=i[a+1>>0]|0;i[c+-3>>0]=i[a+2>>0]|0;i[c+-4>>0]=i[a+3>>0]|0;i[c+-5>>0]=i[a+4>>0]|0;i[c+-6>>0]=i[a+5>>0]|0;i[c+-7>>0]=i[a+6>>0]|0;i[b>>0]=i[a+7>>0]|0;return}function Db(a,b){a=a|0;b=+b;var c=0;c=(o[t>>2]=b,k[t>>2]|0);i[a>>0]=c>>>24;i[a+1>>0]=c>>>16;i[a+2>>0]=c>>>8;i[a+3>>0]=c;return}function Eb(a,b){a=a|0;b=b|0;var c=0;c=b+4|0;i[c+-1>>0]=i[a>>0]|0;i[c+-2>>0]=i[a+1>>0]|0;i[c+-3>>0]=i[a+2>>0]|0;i[b>>0]=i[a+3>>0]|0;return}function Fb(a,b){a=a|0;b=b|0;var c=0,d=0;d=_c(1,72)|0;if(!d){b=0;return b|0}k[d+64>>2]=a;a=Zc(a)|0;k[d+32>>2]=a;if(!a){cd(d);b=0;return b|0}k[d+36>>2]=a;a=d+68|0;c=k[a>>2]|0;if(!b){k[a>>2]=c|1;k[d+40>>2]=31;k[d+44>>2]=32}else{k[a>>2]=c|2;k[d+40>>2]=29;k[d+44>>2]=30}k[d+16>>2]=4;k[d+20>>2]=5;k[d+24>>2]=6;k[d+28>>2]=7;b=d;return b|0}function Gb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0;m=r;r=r+16|0;l=m;e=a+48|0;f=k[e>>2]|0;if(f>>>0>=b>>>0){l=a+36|0;k[l>>2]=(k[l>>2]|0)+b;k[e>>2]=f-b;l=a+56|0;a=l;a=aj(k[a>>2]|0,k[a+4>>2]|0,b|0,c|0)|0;k[l>>2]=a;k[l+4>>2]=L;l=c;a=b;L=l;r=m;return a|0}j=a+68|0;if(k[j>>2]&4){l=a+36|0;k[l>>2]=(k[l>>2]|0)+f;k[e>>2]=0;a=a+56|0;l=a;l=aj(k[l>>2]|0,k[l+4>>2]|0,f|0,0)|0;k[a>>2]=l;k[a+4>>2]=L;a=(f|0)!=0;l=a?0:-1;a=a?f:-1;L=l;r=m;return a|0}if(!f){f=0;e=0}else{k[a+36>>2]=k[a+32>>2];b=Yi(b|0,c|0,f|0,0)|0;k[e>>2]=0;e=0;c=L}a:do if((c|0)>0|(c|0)==0&b>>>0>0){i=a+24|0;while(1){g=$a[k[i>>2]&63](b,c,k[a>>2]|0)|0;h=L;if((g|0)==-1&(h|0)==-1)break;b=Yi(b|0,c|0,g|0,h|0)|0;c=L;f=aj(g|0,h|0,f|0,e|0)|0;e=L;if(!((c|0)>0|(c|0)==0&b>>>0>0))break a}cc(d,4,4655,l)|0;k[j>>2]=k[j>>2]|4;a=a+56|0;l=a;l=aj(k[l>>2]|0,k[l+4>>2]|0,f|0,e|0)|0;k[a>>2]=l;k[a+4>>2]=L;a=(f|0)!=0|(e|0)!=0;l=a?e:-1;a=a?f:-1;L=l;r=m;return a|0}while(0);l=a+56|0;a=l;a=aj(k[a>>2]|0,k[a+4>>2]|0,f|0,e|0)|0;k[l>>2]=a;k[l+4>>2]=L;l=e;a=f;L=l;r=m;return a|0}function Hb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;k[a+36>>2]=k[a+32>>2];k[a+48>>2]=0;f=($a[k[a+28>>2]&63](b,c,k[a>>2]|0)|0)==0;d=a+68|0;e=k[d>>2]|0;if(f){k[d>>2]=e|4;f=0;return f|0}else{k[d>>2]=e&-5;f=a+56|0;k[f>>2]=b;k[f+4>>2]=c;f=1;return f|0}return 0}function Ib(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0;q=r;r=r+16|0;p=q+8|0;l=q;o=a+68|0;if(k[o>>2]&8){p=-1;a=-1;L=p;r=q;return a|0}i=a+32|0;e=k[i>>2]|0;n=a+36|0;k[n>>2]=e;j=a+48|0;f=k[j>>2]|0;do if(f){h=a+20|0;while(1){g=$a[k[h>>2]&63](e,f,k[a>>2]|0)|0;if((g|0)==-1)break;e=(k[n>>2]|0)+g|0;k[n>>2]=e;s=k[j>>2]|0;f=s-g|0;k[j>>2]=f;if((s|0)==(g|0)){m=6;break}}if((m|0)==6){e=k[i>>2]|0;break}k[o>>2]=k[o>>2]|8;cc(d,4,4681,l)|0;k[o>>2]=k[o>>2]|8;k[j>>2]=0;a=-1;s=-1;L=a;r=q;return s|0}while(0);k[n>>2]=e;a:do if((c|0)>0|(c|0)==0&b>>>0>0){i=a+24|0;f=0;e=0;while(1){g=$a[k[i>>2]&63](b,c,k[a>>2]|0)|0;h=L;if((g|0)==-1&(h|0)==-1)break;b=Yi(b|0,c|0,g|0,h|0)|0;c=L;f=aj(g|0,h|0,f|0,e|0)|0;e=L;if(!((c|0)>0|(c|0)==0&b>>>0>0))break a}cc(d,4,4707,p)|0;k[o>>2]=k[o>>2]|8;s=a+56|0;a=s;a=aj(k[a>>2]|0,k[a+4>>2]|0,f|0,e|0)|0;k[s>>2]=a;k[s+4>>2]=L;s=(f|0)!=0|(e|0)!=0;a=s?e:-1;s=s?f:-1;L=a;r=q;return s|0}else{f=0;e=0}while(0);a=a+56|0;s=a;s=aj(k[s>>2]|0,k[s+4>>2]|0,f|0,e|0)|0;k[a>>2]=s;k[a+4>>2]=L;a=e;s=f;L=a;r=q;return s|0}function Jb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;o=r;r=r+16|0;i=o;l=a+32|0;e=k[l>>2]|0;m=a+36|0;k[m>>2]=e;n=a+48|0;f=k[n>>2]|0;do if(!f)f=a;else{h=a+20|0;while(1){g=$a[k[h>>2]&63](e,f,k[a>>2]|0)|0;if((g|0)==-1)break;e=(k[m>>2]|0)+g|0;k[m>>2]=e;p=k[n>>2]|0;f=p-g|0;k[n>>2]=f;if((p|0)==(g|0)){j=6;break}}if((j|0)==6){f=a;e=k[l>>2]|0;break}p=a+68|0;k[p>>2]=k[p>>2]|8;cc(d,4,4681,i)|0;k[p>>2]=k[p>>2]|8;p=0;r=o;return p|0}while(0);k[m>>2]=e;k[n>>2]=0;if(!($a[k[a+28>>2]&63](b,c,k[f>>2]|0)|0)){p=a+68|0;k[p>>2]=k[p>>2]|8;p=0;r=o;return p|0}else{p=a+56|0;k[p>>2]=b;k[p+4>>2]=c;p=1;r=o;return p|0}return 0}function Kb(a,b,c){a=a|0;b=b|0;c=c|0;return -1}function Lb(a,b,c){a=a|0;b=b|0;c=c|0;return -1}function Mb(a,b,c){a=a|0;b=b|0;c=c|0;L=-1;return -1}function Nb(a,b,c){a=a|0;b=b|0;c=c|0;return 0}function Ob(a){a=a|0;var b=0,c=0,d=0;d=_c(1,72)|0;if(!d){a=0;return a|0}k[d+64>>2]=1048576;b=Zc(1048576)|0;k[d+32>>2]=b;if(!b){cd(d);a=0;return a|0}k[d+36>>2]=b;b=d+68|0;c=k[b>>2]|0;if(!a){k[b>>2]=c|1;k[d+40>>2]=31;k[d+44>>2]=32}else{k[b>>2]=c|2;k[d+40>>2]=29;k[d+44>>2]=30}k[d+16>>2]=4;k[d+20>>2]=5;k[d+24>>2]=6;k[d+28>>2]=7;a=d;return a|0}function Pb(a){a=a|0;var b=0;if(!a)return;b=k[a+4>>2]|0;if(b)bb[b&7](k[a>>2]|0);b=a+32|0;cd(k[b>>2]|0);k[b>>2]=0;cd(a);return}function Qb(a,b){a=a|0;b=b|0;if(!a)return;if(!(k[a+68>>2]&2))return;k[a+16>>2]=b;return}function Rb(a,b){a=a|0;b=b|0;if(!a)return;k[a+28>>2]=b;return}function Sb(a,b){a=a|0;b=b|0;if(!a)return;if(!(k[a+68>>2]&1))return;k[a+20>>2]=b;return}function Tb(a,b){a=a|0;b=b|0;if(!a)return;k[a+24>>2]=b;return}function Ub(a,b,c){a=a|0;b=b|0;c=c|0;if(!a)return;k[a>>2]=b;k[a+4>>2]=c;return}function Vb(a,b,c){a=a|0;b=b|0;c=c|0;if(!a)return;a=a+8|0;k[a>>2]=b;k[a+4>>2]=c;return}function Wb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0;w=r;r=r+16|0;s=w+8|0;q=w;v=a+48|0;e=k[v>>2]|0;if(e>>>0>=c>>>0){u=a+36|0;cj(b|0,k[u>>2]|0,c|0)|0;k[u>>2]=(k[u>>2]|0)+c;k[v>>2]=(k[v>>2]|0)-c;v=a+56|0;u=v;u=aj(k[u>>2]|0,k[u+4>>2]|0,c|0,0)|0;k[v>>2]=u;k[v+4>>2]=L;v=c;r=w;return v|0}t=a+68|0;if(k[t>>2]&4){u=a+36|0;cj(b|0,k[u>>2]|0,e|0)|0;d=k[v>>2]|0;k[u>>2]=(k[u>>2]|0)+d;u=a+56|0;t=u;d=aj(k[t>>2]|0,k[t+4>>2]|0,d|0,0)|0;k[u>>2]=d;k[u+4>>2]=L;k[v>>2]=0;v=(e|0)!=0?e:-1;r=w;return v|0}if(!e){n=a+32|0;f=k[n>>2]|0;o=a+36|0;k[o>>2]=f;p=o;u=a+56|0;e=0}else{o=a+36|0;cj(b|0,k[o>>2]|0,e|0)|0;n=a+32|0;f=k[n>>2]|0;k[o>>2]=f;p=k[v>>2]|0;u=a+56|0;l=u;l=aj(k[l>>2]|0,k[l+4>>2]|0,p|0,0)|0;m=u;k[m>>2]=l;k[m+4>>2]=L;k[v>>2]=0;c=c-p|0;b=b+p|0;p=o}l=a+64|0;m=a+16|0;j=b;g=f;while(1){b=k[l>>2]|0;f=k[m>>2]|0;if(c>>>0<b>>>0){f=$a[f&63](g,b,k[a>>2]|0)|0;k[v>>2]=f;if((f|0)==-1){f=11;break}if(f>>>0>=c>>>0){b=j;f=14;break}cj(j|0,k[p>>2]|0,f|0)|0;g=k[n>>2]|0;k[o>>2]=g;b=k[v>>2]|0;h=u;h=aj(k[h>>2]|0,k[h+4>>2]|0,b|0,0)|0;i=L;e=f+e|0}else{b=$a[f&63](j,c,k[a>>2]|0)|0;k[v>>2]=b;if((b|0)==-1){f=16;break}e=b+e|0;if(b>>>0>=c>>>0){f=20;break}g=k[n>>2]|0;k[o>>2]=g;h=u;h=aj(k[h>>2]|0,k[h+4>>2]|0,b|0,0)|0;i=L}f=u;k[f>>2]=h;k[f+4>>2]=i;k[v>>2]=0;c=c-b|0;j=j+b|0}if((f|0)==11){cc(d,4,4655,q)|0;k[v>>2]=0;k[t>>2]=k[t>>2]|4;v=(e|0)!=0?e:-1;r=w;return v|0}else if((f|0)==14){cj(b|0,k[p>>2]|0,c|0)|0;k[p>>2]=(k[p>>2]|0)+c;k[v>>2]=(k[v>>2]|0)-c;d=u;d=aj(k[d>>2]|0,k[d+4>>2]|0,c|0,0)|0;v=u;k[v>>2]=d;k[v+4>>2]=L;v=e+c|0;r=w;return v|0}else if((f|0)==16){cc(d,4,4655,s)|0;k[v>>2]=0;k[t>>2]=k[t>>2]|4;v=(e|0)!=0?e:-1;r=w;return v|0}else if((f|0)==20){d=u;d=aj(k[d>>2]|0,k[d+4>>2]|0,b|0,0)|0;k[u>>2]=d;k[u+4>>2]=L;k[o>>2]=k[n>>2];k[v>>2]=0;v=e;r=w;return v|0}return 0}function Xb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0;u=r;r=r+16|0;q=u;m=a+68|0;if(k[m>>2]&8){t=-1;r=u;return t|0}p=a+64|0;e=k[p>>2]|0;t=a+48|0;i=k[t>>2]|0;f=e-i|0;do if(f>>>0<c>>>0){n=a+32|0;g=a+36|0;o=a+20|0;h=a+56|0;j=e;l=f;e=0;a:while(1){if((j|0)==(i|0))f=k[n>>2]|0;else{cj(k[g>>2]|0,b|0,l|0)|0;f=k[n>>2]|0;k[g>>2]=f;i=(k[t>>2]|0)+l|0;k[t>>2]=i;v=h;v=aj(k[v>>2]|0,k[v+4>>2]|0,l|0,0)|0;j=h;k[j>>2]=v;k[j+4>>2]=L;c=c-l|0;b=b+l|0;e=l+e|0}k[g>>2]=f;if(!i)i=0;else{do{j=$a[k[o>>2]&63](f,i,k[a>>2]|0)|0;if((j|0)==-1)break a;f=(k[g>>2]|0)+j|0;k[g>>2]=f;v=k[t>>2]|0;i=v-j|0;k[t>>2]=i}while((v|0)!=(j|0));f=k[n>>2]|0}k[g>>2]=f;j=k[p>>2]|0;l=j-i|0;if(c>>>0<=l>>>0){s=5;break}}if((s|0)==5)break;k[m>>2]=k[m>>2]|8;cc(d,4,4681,q)|0;v=-1;r=u;return v|0}else{f=a+36|0;h=a+56|0;g=f;f=k[f>>2]|0;e=0}while(0);cj(f|0,b|0,c|0)|0;k[g>>2]=(k[g>>2]|0)+c;k[t>>2]=(k[t>>2]|0)+c;t=h;t=aj(k[t>>2]|0,k[t+4>>2]|0,c|0,0)|0;v=h;k[v>>2]=t;k[v+4>>2]=L;v=e+c|0;r=u;return v|0}function Yb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0;m=r;r=r+16|0;i=m;f=a+32|0;c=k[f>>2]|0;l=a+36|0;k[l>>2]=c;g=a+48|0;d=k[g>>2]|0;do if(d){h=a+20|0;while(1){e=$a[k[h>>2]&63](c,d,k[a>>2]|0)|0;if((e|0)==-1)break;c=(k[l>>2]|0)+e|0;k[l>>2]=c;n=k[g>>2]|0;d=n-e|0;k[g>>2]=d;if((n|0)==(e|0)){j=6;break}}if((j|0)==6){c=k[f>>2]|0;break}n=a+68|0;k[n>>2]=k[n>>2]|8;cc(b,4,4681,i)|0;n=0;r=m;return n|0}while(0);k[l>>2]=c;n=1;r=m;return n|0}function Zb(a){a=a|0;a=a+56|0;L=k[a+4>>2]|0;return k[a>>2]|0}function _b(a){a=a|0;var b=0,c=0;c=a+8|0;b=k[c>>2]|0;c=k[c+4>>2]|0;if((b|0)==0&(c|0)==0){c=0;a=0;L=c;return a|0}a=a+56|0;a=Yi(b|0,c|0,k[a>>2]|0,k[a+4>>2]|0)|0;c=L;L=c;return a|0}function $b(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=hb[k[a+40>>2]&63](a,b,c,d)|0;return a|0}function ac(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return hb[k[a+44>>2]&63](a,b,c,d)|0}function bc(a){a=a|0;return (k[a+28>>2]|0)!=7|0}function cc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;h=r;r=r+528|0;f=h;g=h+16|0;a:do if(a){switch(b|0){case 1:{b=a;e=a+12|0;break}case 2:{b=a+4|0;e=a+16|0;break}case 4:{b=a+8|0;e=a+20|0;break}default:{b=0;break a}}a=k[b>>2]|0;b=k[e>>2]|0;if(b)if(!c)b=1;else{_i(g|0,0,512)|0;k[f>>2]=d;zi(g,512,c,f)|0;cb[b&7](g,a);b=1}else b=0}else b=0;while(0);r=h;return b|0}function dc(a){a=a|0;k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;k[a+12>>2]=4;k[a+20>>2]=4;k[a+16>>2]=4;return}function ec(a,b){a=a|0;b=b|0;return}function fc(){return _c(1,36)|0}function gc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;d=_c(1,36)|0;if(!d){h=d;return h|0}k[d+20>>2]=c;g=d+16|0;k[g>>2]=a;c=_c(1,a*52|0)|0;h=d+24|0;k[h>>2]=c;if(!c){c=k[d+28>>2]|0;if(c)cd(c);cd(d);h=0;return h|0}if(!a){h=d;return h|0}e=0;while(1){k[c+(e*52|0)>>2]=k[b+(e*36|0)>>2];k[c+(e*52|0)+4>>2]=k[b+(e*36|0)+4>>2];i=k[b+(e*36|0)+8>>2]|0;k[c+(e*52|0)+8>>2]=i;j=k[b+(e*36|0)+12>>2]|0;k[c+(e*52|0)+12>>2]=j;k[c+(e*52|0)+16>>2]=k[b+(e*36|0)+16>>2];k[c+(e*52|0)+20>>2]=k[b+(e*36|0)+20>>2];k[c+(e*52|0)+24>>2]=k[b+(e*36|0)+24>>2];k[c+(e*52|0)+28>>2]=k[b+(e*36|0)+28>>2];k[c+(e*52|0)+32>>2]=k[b+(e*36|0)+32>>2];i=_c(ha(j,i)|0,4)|0;k[c+(e*52|0)+44>>2]=i;e=e+1|0;if(!i)break;if(e>>>0>=a>>>0){f=22;break}c=k[h>>2]|0}if((f|0)==22)return d|0;c=k[h>>2]|0;if(c){e=k[g>>2]|0;if(e){b=0;while(1){c=k[c+(b*52|0)+44>>2]|0;if(c){cd(c);e=k[g>>2]|0}b=b+1|0;if(b>>>0>=e>>>0)break;c=k[h>>2]|0}c=k[h>>2]|0}cd(c)}c=k[d+28>>2]|0;if(c)cd(c);cd(d);j=0;return j|0}function hc(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;if(!a)return;e=a+24|0;b=k[e>>2]|0;if(b){f=a+16|0;c=k[f>>2]|0;if(c){d=0;while(1){b=k[b+(d*52|0)+44>>2]|0;if(b){cd(b);c=k[f>>2]|0}d=d+1|0;if(d>>>0>=c>>>0)break;b=k[e>>2]|0}b=k[e>>2]|0}cd(b)}b=k[a+28>>2]|0;if(b)cd(b);cd(a);return}function ic(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;c=k[b+4>>2]|0;d=k[a>>2]|0;f=k[b+8>>2]|0;g=k[a+4>>2]|0;e=k[b+12>>2]|0;l=(ha((k[b+24>>2]|0)+-1|0,e)|0)+c|0;h=k[b+16>>2]|0;i=(ha((k[b+28>>2]|0)+-1|0,h)|0)+f|0;b=aj(l|0,0,e|0,0)|0;b=b|0-L;e=k[a+8>>2]|0;h=aj(i|0,0,h|0,0)|0;h=h|0-L;i=k[a+12>>2]|0;l=k[a+16>>2]|0;if(!l)return;j=(c>>>0>d>>>0?c:d)+-1|0;f=(f>>>0>g>>>0?f:g)+-1|0;e=(b>>>0<e>>>0?b:e)+-1|0;c=(h>>>0<i>>>0?h:i)+-1|0;d=0;b=k[a+24>>2]|0;while(1){g=k[b>>2]|0;i=((j+g|0)>>>0)/(g>>>0)|0;o=k[b+4>>2]|0;a=((f+o|0)>>>0)/(o>>>0)|0;h=k[b+40>>2]|0;n=$i(1,0,h|0)|0;m=L;g=aj((((e+g|0)>>>0)/(g>>>0)|0)-i|0,0,-1,-1)|0;g=aj(g|0,L|0,n|0,m|0)|0;g=bj(g|0,L|0,h|0)|0;o=aj((((c+o|0)>>>0)/(o>>>0)|0)-a|0,0,-1,-1)|0;m=aj(o|0,L|0,n|0,m|0)|0;h=bj(m|0,L|0,h|0)|0;k[b+8>>2]=g;k[b+12>>2]=h;k[b+16>>2]=i;k[b+20>>2]=a;d=d+1|0;if(d>>>0>=l>>>0)break;else b=b+52|0}return}function jc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0;k[b>>2]=k[a>>2];k[b+4>>2]=k[a+4>>2];k[b+8>>2]=k[a+8>>2];k[b+12>>2]=k[a+12>>2];i=b+24|0;d=k[i>>2]|0;h=b+16|0;if(!d)c=i;else{c=k[h>>2]|0;if(!c)c=i;else{e=0;while(1){d=k[d+(e*52|0)+44>>2]|0;if(d){cd(d);c=k[h>>2]|0}e=e+1|0;if(e>>>0>=c>>>0)break;d=k[i>>2]|0}c=i;d=k[i>>2]|0}cd(d);k[i>>2]=0}d=k[a+16>>2]|0;k[h>>2]=d;d=Zc(d*52|0)|0;k[c>>2]=d;if(!d){k[i>>2]=0;k[h>>2]=0;return}if(k[h>>2]|0){g=a+24|0;f=0;do{c=d+(f*52|0)|0;d=(k[g>>2]|0)+(f*52|0)|0;e=c+52|0;do{k[c>>2]=k[d>>2];c=c+4|0;d=d+4|0}while((c|0)<(e|0));d=k[i>>2]|0;k[d+(f*52|0)+44>>2]=0;f=f+1|0}while(f>>>0<(k[h>>2]|0)>>>0)}k[b+20>>2]=k[a+20>>2];e=a+32|0;c=k[e>>2]|0;f=b+32|0;k[f>>2]=c;if(!c){k[b+28>>2]=0;return}d=Zc(c)|0;c=b+28|0;k[c>>2]=d;if(!d){k[c>>2]=0;k[f>>2]=0;return}else{cj(d|0,k[a+28>>2]|0,k[e>>2]|0)|0;return}}function kc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=_c(1,36)|0;if(!d){a=d;return a|0}k[d+20>>2]=c;k[d+16>>2]=a;c=_c(a,52)|0;k[d+24>>2]=c;if(!c){c=k[d+28>>2]|0;if(c)cd(c);cd(d);a=0;return a|0}else{if(!a){a=d;return a|0}else e=0;do{k[c+(e*52|0)>>2]=k[b+(e*36|0)>>2];k[c+(e*52|0)+4>>2]=k[b+(e*36|0)+4>>2];k[c+(e*52|0)+8>>2]=k[b+(e*36|0)+8>>2];k[c+(e*52|0)+12>>2]=k[b+(e*36|0)+12>>2];k[c+(e*52|0)+16>>2]=k[b+(e*36|0)+16>>2];k[c+(e*52|0)+20>>2]=k[b+(e*36|0)+20>>2];k[c+(e*52|0)+24>>2]=k[b+(e*36|0)+24>>2];k[c+(e*52|0)+32>>2]=k[b+(e*36|0)+32>>2];k[c+(e*52|0)+44>>2]=0;e=e+1|0}while((e|0)!=(a|0));return d|0}return 0}function lc(a,b,c){a=a|0;b=b|0;c=c|0;if(!a){c=0;return c|0}k[a+64>>2]=b;k[a+52>>2]=c;c=1;return c|0}function mc(a,b,c){a=a|0;b=b|0;c=c|0;if(!a){c=0;return c|0}k[a+60>>2]=b;k[a+48>>2]=c;c=1;return c|0}function nc(a,b,c){a=a|0;b=b|0;c=c|0;if(!a){c=0;return c|0}k[a+56>>2]=b;k[a+44>>2]=c;c=1;return c|0}function oc(a,b){a=a|0;b=b|0;var c=0;if(!a){a=0;return a|0}c=Ob(b)|0;if(!c){a=0;return a|0}Ub(c,a,0);Vb(c,k[a+8>>2]|0,0);if(!b)Sb(c,9);else Qb(c,8);Tb(c,1);Rb(c,10);a=c;return a|0}function pc(){return 4722}function qc(a){a=a|0;var b=0;b=_c(1,84)|0;if(!b){a=0;return a|0}k[b+68>>2]=1;switch(a|0){case 0:{k[b+72>>2]=13;k[b+76>>2]=2;k[b+80>>2]=3;k[b+4>>2]=33;k[b+16>>2]=11;k[b>>2]=34;k[b+20>>2]=1;k[b+24>>2]=5;k[b+8>>2]=1;k[b+12>>2]=1;k[b+28>>2]=1;k[b+32>>2]=1;k[b+36>>2]=12;a=pd()|0;k[b+40>>2]=a;if(!a){cd(b);a=0;return a|0}break}case 2:{k[b+72>>2]=14;k[b+76>>2]=4;k[b+80>>2]=5;k[b+4>>2]=35;k[b+16>>2]=13;k[b>>2]=36;k[b+8>>2]=2;k[b+12>>2]=2;k[b+20>>2]=2;k[b+24>>2]=6;k[b+28>>2]=2;k[b+32>>2]=2;k[b+36>>2]=14;a=gf(1)|0;k[b+40>>2]=a;if(!a){cd(b);a=0;return a|0}break}default:{cd(b);a=0;return a|0}}dc(b+44|0);a=b;return a|0}function rc(a){a=a|0;if(!a)return;_i(a|0,0,8248)|0;k[a+8200>>2]=-1;k[a+8204>>2]=-1;k[a+8248>>2]=0;return}function sc(a,b){a=a|0;b=b|0;var c=0;c=r;r=r+16|0;if(!((a|0)!=0&(b|0)!=0)){b=0;r=c;return b|0}if(!(k[a+68>>2]|0)){cc(a+44|0,1,4728,c)|0;b=0;r=c;return b|0}else{cb[k[a+24>>2]&7](k[a+40>>2]|0,b);b=1;r=c;return b|0}return 0}function tc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=r;r=r+16|0;if(!((a|0)!=0&(b|0)!=0)){a=0;r=d;return a|0}if(!(k[b+68>>2]|0)){cc(b+44|0,1,4809,d)|0;a=0;r=d;return a|0}else{a=hb[k[b>>2]&63](a,k[b+40>>2]|0,c,b+44|0)|0;r=d;return a|0}return 0}function uc(a,b,c){a=a|0;b=b|0;c=c|0;if(!((a|0)!=0&(b|0)!=0)){b=0;return b|0}if(!(k[a+68>>2]|0)){b=0;return b|0}b=hb[k[a+4>>2]&63](k[a+40>>2]|0,b,c,a+44|0)|0;return b|0}function vc(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(!a){d=0;return d|0}if(!(k[a+68>>2]|0)){d=0;return d|0}d=_a[k[a+28>>2]&3](k[a+40>>2]|0,b,c,d,e,f,a+44|0)|0;return d|0}function wc(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;if(!((c|0)!=0&((a|0)!=0&(b|0)!=0&(d|0)!=0))){h=0;return h|0}if(!(k[a+68>>2]|0)){h=0;return h|0}h=gb[k[a+8>>2]&3](k[a+40>>2]|0,c,d,e,f,g,h,i,j,b,a+44|0)|0;return h|0}function xc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;if(!((a|0)!=0&(c|0)!=0&(e|0)!=0)){b=0;return b|0}if(!(k[a+68>>2]|0)){b=0;return b|0}b=db[k[a+12>>2]&7](k[a+40>>2]|0,b,c,d,e,a+44|0)|0;return b|0}function yc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;if(!((a|0)!=0&(b|0)!=0)){d=0;return d|0}if(!(k[a+68>>2]|0)){d=0;return d|0}d=jb[k[a+32>>2]&3](k[a+40>>2]|0,b,c,a+44|0,d)|0;return d|0}function zc(a,b){a=a|0;b=b|0;if(!a){b=0;return b|0}b=$a[k[a+36>>2]&63](k[a+40>>2]|0,b,a+44|0)|0;return b|0}function Ac(a){a=a|0;var b=0;b=_c(1,84)|0;if(!b){a=0;return a|0}k[b+68>>2]=0;switch(a|0){case 0:{k[b+4>>2]=15;k[b+12>>2]=16;k[b>>2]=37;k[b+8>>2]=3;k[b+16>>2]=1;k[b+20>>2]=38;a=fd()|0;k[b+40>>2]=a;if(!a){cd(b);a=0;return a|0}break}case 2:{k[b+4>>2]=17;k[b+12>>2]=18;k[b>>2]=39;k[b+8>>2]=4;k[b+16>>2]=2;k[b+20>>2]=40;a=gf(0)|0;k[b+40>>2]=a;if(!a){cd(b);a=0;return a|0}break}default:{cd(b);a=0;return a|0}}dc(b+44|0);a=b;return a|0}function Bc(a){a=a|0;if(!a)return;_i(a|0,0,18708)|0;k[a+5592>>2]=6;k[a+18684>>2]=0;k[a+5596>>2]=64;k[a+5600>>2]=64;k[a+44>>2]=0;k[a+5612>>2]=-1;k[a+18188>>2]=1;k[a+18192>>2]=1;i[a+18688>>0]=0;k[a+18196>>2]=-1;k[a+18200>>2]=-1;o[a+4792>>2]=0.0;k[a+4788>>2]=0;k[a+20>>2]=0;k[a+24>>2]=0;k[a+28>>2]=0;k[a+18692>>2]=0;return}function Cc(a,b,c){a=a|0;b=b|0;c=c|0;if(!((a|0)!=0&(b|0)!=0&(c|0)!=0)){b=0;return b|0}if(k[a+68>>2]|0){b=0;return b|0}b=hb[k[a+20>>2]&63](k[a+40>>2]|0,b,c,a+44|0)|0;return b|0}function Dc(a,b,c){a=a|0;b=b|0;c=c|0;if(!((a|0)!=0&(c|0)!=0)){c=0;return c|0}if(k[a+68>>2]|0){c=0;return c|0}c=hb[k[a>>2]&63](k[a+40>>2]|0,c,b,a+44|0)|0;return c|0}function Ec(a,b){a=a|0;b=b|0;if(!((a|0)!=0&(b|0)!=0)){b=0;return b|0}if(k[a+68>>2]|0){b=0;return b|0}b=$a[k[a+4>>2]&63](k[a+40>>2]|0,b,a+44|0)|0;return b|0}function Fc(a,b){a=a|0;b=b|0;if(!((a|0)!=0&(b|0)!=0)){b=0;return b|0}if(k[a+68>>2]|0){b=0;return b|0}b=$a[k[a+12>>2]&63](k[a+40>>2]|0,b,a+44|0)|0;return b|0}function Gc(a,b){a=a|0;b=b|0;if(!((a|0)!=0&(b|0)!=0)){b=0;return b|0}if(!(k[a+68>>2]|0)){b=0;return b|0}b=$a[k[a+16>>2]&63](k[a+40>>2]|0,b,a+44|0)|0;return b|0}function Hc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0;g=d<<2;e=ha(g,d)|0;f=a+18704|0;d=m[f>>1]|0;j[f>>1]=(d&32768|0)==0?-32512:(d|256)&65535;k[a+5608>>2]=1;i[a+18690>>0]=2;f=Zc(e+g|0)|0;d=a+18696|0;k[d>>2]=f;if(!f){c=0;return c|0}cj(f|0,b|0,e|0)|0;cj((k[d>>2]|0)+e|0,c|0,g|0)|0;c=1;return c|0}function Ic(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;if(!((c|0)!=0&((a|0)!=0&(e|0)!=0))){b=0;return b|0}if(k[a+68>>2]|0){b=0;return b|0}b=db[k[a+8>>2]&7](k[a+40>>2]|0,b,c,d,e,a+44|0)|0;return b|0}function Jc(a){a=a|0;var b=0,c=0;if(!a)return;b=a+40|0;c=k[b>>2]|0;if(!(k[a+68>>2]|0))bb[k[a+16>>2]&7](c);else bb[k[a+20>>2]&7](c);k[b>>2]=0;cd(a);return}function Kc(a,b,c){a=a|0;b=b|0;c=c|0;if(!a)return;fb[k[a+72>>2]&15](k[a+40>>2]|0,b,c);return}function Lc(a){a=a|0;if(!a){a=0;return a|0}a=eb[k[a+76>>2]&15](k[a+40>>2]|0)|0;return a|0}function Mc(a){a=a|0;var b=0,c=0;if(!a)return;b=k[a>>2]|0;c=k[b+48>>2]|0;if(c){cd(c);b=k[a>>2]|0}cd(b);k[a>>2]=0;return}function Nc(a){a=a|0;if(!a){a=0;return a|0}a=eb[k[a+80>>2]&15](k[a+40>>2]|0)|0;return a|0}function Oc(a){a=a|0;var b=0;b=k[a>>2]|0;if(!b)return;ld(b);k[a>>2]=0;return}function Pc(a,b){a=a|0;b=b|0;return Qc(a,1048576,b)|0}function Qc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if(!a){b=0;return b|0}d=ii(a,(c|0)==0?4888:4891)|0;if(!d){b=0;return b|0}a=Fb(b,c)|0;if(!a){gi(d)|0;b=0;return b|0}else{Ub(a,d,6);pi(d,0,2)|0;b=si(d)|0;pi(d,0,0)|0;Vb(a,b,((b|0)<0)<<31>>31);Qb(a,19);Sb(a,20);Tb(a,21);Rb(a,22);b=a;return b|0}return 0}function Rc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;f=(k[c>>2]|0)+(k[c+8>>2]|0)|0;c=c+4|0;d=k[c>>2]|0;e=f-d|0;if((f|0)==(d|0)){f=-1;return f|0}f=e>>>0>b>>>0?b:e;cj(a|0,d|0,f|0)|0;k[c>>2]=(k[c>>2]|0)+f;return f|0}function Sc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;j=c+4|0;d=k[j>>2]|0;h=c+8|0;f=k[h>>2]|0;i=d-(k[c>>2]|0)|0;e=(f|0)==0?1:f;while(1)if((e-i|0)>>>0<b>>>0)e=e<<1;else{g=e;break}if((g|0)!=(f|0)){d=Zc(g)|0;if(!d){b=-1;return b|0}e=k[c>>2]|0;if(e){cj(d|0,e|0,i|0)|0;cd(k[c>>2]|0)}k[c>>2]=d;d=d+i|0;k[j>>2]=d;k[h>>2]=g}cj(d|0,a|0,b|0)|0;k[j>>2]=(k[j>>2]|0)+b;return b|0}function Tc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;e=(k[b>>2]|0)+(k[b+8>>2]|0)|0;b=b+4|0;c=k[b>>2]|0;d=e-c|0;if((e|0)==(c|0)){e=-1;return e|0}k[b>>2]=c+a;e=d>>>0>a>>>0?a:d;return e|0}function Uc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=k[c+8>>2]|0;k[c+4>>2]=(k[c>>2]|0)+(0>(b|0)|0==(b|0)&d>>>0>a>>>0?a:d);return 1}function Vc(a,b,c){a=a|0;b=b|0;c=c|0;b=mi(a,1,b,c)|0;return ((b|0)!=0?b:-1)|0}function Wc(a,b,c){a=a|0;b=b|0;c=c|0;return ui(a,1,b,c)|0}function Xc(a,b,c){a=a|0;b=b|0;c=c|0;c=(pi(c,a,1)|0)==0;L=c?b:-1;return (c?a:-1)|0}function Yc(a,b,c){a=a|0;b=b|0;c=c|0;return (pi(c,a,0)|0)==0|0}function Zc(a){a=a|0;if(!a)a=0;else a=Pi(a)|0;return a|0}function _c(a,b){a=a|0;b=b|0;if(!b)a=0;else a=Ri(a,b)|0;return a|0}function $c(a){a=a|0;var b=0,c=0;c=r;r=r+16|0;b=c;do if(a)if(!(Ti(b,16,a)|0)){b=k[b>>2]|0;break}else{k[b>>2]=0;b=0;break}else b=0;while(0);r=c;return b|0}function ad(a){a=a|0;Qi(a);return}function bd(a,b){a=a|0;b=b|0;if(!b)b=0;else b=Si(a,b)|0;return b|0}function cd(a){a=a|0;Qi(a);return}function dd(a){a=a|0;var b=0,c=0;b=696;while(1){c=k[b>>2]|0;if((c|0)==-1|(c|0)==(a|0))break;else b=b+12|0}return b+4|0}function ed(a,b){a=a|0;b=b|0;if(!((a|0)!=0&(b|0)!=0))return;k[a+172>>2]=k[b+4>>2];k[a+168>>2]=k[b>>2];return}function fd(){var a=0,b=0;a=_c(1,208)|0;if(!a){a=0;return a|0}k[a>>2]=0;b=a+184|0;i[b>>0]=i[b>>0]&-3;b=Zc(1e3)|0;k[a+44>>2]=b;if(!b){gd(a);b=0;return b|0}k[a+48>>2]=1e3;b=Ag()|0;k[a+192>>2]=b;if(!b){gd(a);b=0;return b|0}b=Ag()|0;k[a+188>>2]=b;if(b){b=a;return b|0}gd(a);b=0;return b|0}function gd(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;if(!a)return;if(!(k[a>>2]|0)){b=a+36|0;c=k[b>>2]|0;if(c){cd(c);k[b>>2]=0}b=a+24|0;c=k[b>>2]|0;if(c){cd(c);k[b>>2]=0;k[a+28>>2]=0}b=a+44|0;c=k[b>>2]|0;if(c){cd(c);k[b>>2]=0;k[a+48>>2]=0}}else{b=a+12|0;c=k[b>>2]|0;if(c){Cd(c);cd(k[b>>2]|0);k[b>>2]=0}b=a+16|0;c=k[b>>2]|0;if(c){cd(c);k[b>>2]=0;k[a+20>>2]=0}}gg(k[a+204>>2]|0);b=a+88|0;f=a+164|0;c=k[f>>2]|0;if(c){d=ha(k[a+112>>2]|0,k[a+116>>2]|0)|0;if(d){e=0;while(1){Cd(c);e=e+1|0;if((e|0)==(d|0))break;else c=c+5640|0}c=k[f>>2]|0}cd(c);k[f>>2]=0}f=a+124|0;c=k[f>>2]|0;if(c){g=a+120|0;d=k[g>>2]|0;if(d){e=0;while(1){c=k[c+(e<<3)>>2]|0;if(c){cd(c);d=k[g>>2]|0}e=e+1|0;if(e>>>0>=d>>>0)break;c=k[f>>2]|0}c=k[f>>2]|0}k[g>>2]=0;cd(c);k[f>>2]=0}g=a+144|0;cd(k[g>>2]|0);k[g>>2]=0;k[a+128>>2]=0;g=a+108|0;cd(k[g>>2]|0);k[g>>2]=0;if(!(i[a+184>>0]&2)){g=a+176|0;cd(k[g>>2]|0);k[g>>2]=0}c=b+100|0;do{k[b>>2]=0;b=b+4|0}while((b|0)<(c|0));g=a+188|0;Bg(k[g>>2]|0);k[g>>2]=0;Bg(k[a+192>>2]|0);k[g>>2]=0;g=a+196|0;ld(k[g>>2]|0);k[g>>2]=0;g=a+80|0;hc(k[g>>2]|0);k[g>>2]=0;g=a+84|0;hc(k[g>>2]|0);k[g>>2]=0;cd(a);return}function hd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,l=0,m=0,n=0,q=0.0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ia=0,ja=0,ka=0,la=0.0;ka=r;r=r+320|0;ea=ka+296|0;da=ka+288|0;ja=ka+280|0;ia=ka+272|0;ga=ka+264|0;fa=ka+256|0;ca=ka+248|0;ba=ka+240|0;W=ka+232|0;T=ka+224|0;S=ka+216|0;R=ka+208|0;Q=ka+200|0;P=ka+192|0;O=ka+184|0;v=ka+176|0;u=ka+168|0;t=ka+160|0;s=ka+152|0;n=ka+144|0;I=ka+136|0;H=ka+128|0;M=ka+112|0;G=ka+104|0;F=ka+96|0;E=ka+88|0;C=ka+80|0;B=ka+72|0;A=ka+64|0;z=ka+56|0;y=ka+48|0;x=ka+32|0;w=ka+24|0;m=ka+16|0;g=ka+8|0;f=ka;K=ka+309|0;L=ka+300|0;if(!((a|0)!=0&(b|0)!=0&(c|0)!=0)){d=0;r=ka;return d|0}aa=b+5592|0;e=k[aa>>2]|0;if((e+-1|0)>>>0>32){k[f>>2]=e;k[f+4>>2]=33;cc(d,1,4894,f)|0;d=0;r=ka;return d|0}_=a+112|0;k[_>>2]=1;$=a+116|0;k[$>>2]=1;J=b+18704|0;do if(!(j[J>>1]|0)){switch(k[b+18676>>2]|0){case 1:{j[J>>1]=3;k[b+18700>>2]=1302083;k[b+18680>>2]=1041666;f=1;break}case 2:{j[J>>1]=3;k[b+18700>>2]=651041;k[b+18680>>2]=520833;f=1;break}case 3:{j[J>>1]=4;k[b+18700>>2]=1302083;k[b+18680>>2]=1041666;f=1;break}default:f=0}e=k[b+18684>>2]|0;a:do if((e|0)>=4)if((e|0)<33024){switch(e|0){case 4:break;default:{Z=13;break a}}j[J>>1]=4;break}else{switch(e|0){case 33024:break;default:{Z=13;break a}}j[J>>1]=-32512;break}else{switch(e|0){case 3:break;default:{Z=13;break a}}j[J>>1]=3}while(0);if((Z|0)==13?(f|0)==0:0)break;cc(d,2,4950,g)|0}while(0);D=b+18700|0;e=k[D>>2]|0;do if((e|0)<1){q=+o[b+4792+((k[b+4788>>2]|0)+-1<<2)>>2];if(q>0.0){X=k[c+24>>2]|0;m=ha(k[X+8>>2]|0,k[c+16>>2]|0)|0;m=ha(m,k[X+12>>2]|0)|0;la=+((ha(m,k[X+24>>2]|0)|0)>>>0);X=~~+V(+(la/(q*8.0*+((k[X>>2]|0)>>>0)*+((k[X+4>>2]|0)>>>0))));k[D>>2]=X;break}else{k[D>>2]=0;break}}else{l=k[c+24>>2]|0;X=ha(k[l+8>>2]|0,k[c+16>>2]|0)|0;X=ha(X,k[l+12>>2]|0)|0;q=+((ha(X,k[l+24>>2]|0)|0)>>>0);e=ha(e<<3,k[l>>2]|0)|0;q=q/+((ha(e,k[l+4>>2]|0)|0)>>>0);l=b+4788|0;e=k[l>>2]|0;if(e){g=e;e=0;h=0;while(1){f=b+4792+(h<<2)|0;if(+o[f>>2]<q){o[f>>2]=q;f=k[l>>2]|0;e=1}else f=g;h=h+1|0;if(h>>>0>=f>>>0)break;else g=f}if(e)cc(d,2,5087,m)|0}}while(0);e=j[J>>1]|0;b:do if((e+-3&65535)>=4){if(e<<16>>16==7){cc(d,2,7247,n)|0;j[J>>1]=0;e=0;break}if((e+-256&65535)<524){cc(d,2,7302,s)|0;j[J>>1]=0;e=0;break}if((e+-1024&65535)<1180){cc(d,2,7350,t)|0;j[J>>1]=0;e=0;break}if(e<<16>>16<=-1)switch(e<<16>>16){case -32512:{e=-32512;break b}case -32768:{cc(d,2,7392,u)|0;j[J>>1]=0;e=0;break b}default:{cc(d,2,7480,v)|0;j[J>>1]=0;e=0;break b}}}else{if((e+-5&65535)<2){cc(d,2,5179,w)|0;j[J>>1]=0;e=0;break}k[b>>2]=0;k[b+12>>2]=1;k[b+16>>2]=1;i[b+18689>>0]=67;i[b+18688>>0]=1;k[b+4>>2]=0;k[b+8>>2]=0;k[b+18180>>2]=0;k[b+18184>>2]=0;k[b+5596>>2]=32;k[b+5600>>2]=32;k[b+5604>>2]=0;k[b+5612>>2]=-1;k[b+18188>>2]=1;k[b+18192>>2]=1;k[b+5608>>2]=1;f=b+4788|0;g=k[f>>2]|0;if((g|0)>1){la=+o[b+4792+(g+-1<<2)>>2];k[x>>2]=g;p[x+8>>3]=la;cc(d,2,5241,x)|0;k[b+4792>>2]=k[b+4792+((k[f>>2]|0)+-1<<2)>>2];k[f>>2]=1;e=j[J>>1]|0}c:do switch(e&65535|0){case 3:{e=k[aa>>2]|0;if((e|0)>6){k[y>>2]=e+1;cc(d,2,5414,y)|0;k[aa>>2]=6;e=6}break}case 4:{e=k[aa>>2]|0;if((e|0)<2){k[z>>2]=e+1;cc(d,2,5560,z)|0;k[aa>>2]=1;e=1;break c}if((e|0)>7){k[A>>2]=e+1;cc(d,2,5714,A)|0;k[aa>>2]=7;e=7}break}default:e=k[aa>>2]|0}while(0);f=b+40|0;k[f>>2]=k[f>>2]|1;f=b+5620|0;k[f>>2]=e+-1;if((e|0)>1){e=0;do{k[b+5624+(e<<2)>>2]=256;k[b+5756+(e<<2)>>2]=256;e=e+1|0}while((e|0)<(k[f>>2]|0))}k[b+44>>2]=4;if((j[J>>1]|0)==4){e=k[aa>>2]|0;k[b+96>>2]=1;k[b+48>>2]=0;k[b+52>>2]=0;k[b+56>>2]=1;X=e+-1|0;k[b+60>>2]=X;k[b+64>>2]=3;k[b+80>>2]=4;k[b+244>>2]=1;k[b+196>>2]=X;k[b+200>>2]=0;k[b+204>>2]=1;k[b+208>>2]=e;k[b+212>>2]=3;k[b+228>>2]=4;e=2}else e=0;k[b+4784>>2]=e;k[b+20>>2]=1;e=k[D>>2]|0;if((e|0)>=1){if((e|0)>1302083){cc(d,2,6017,C)|0;k[D>>2]=1302083}}else{k[D>>2]=1302083;cc(d,2,5868,B)|0}e=b+18680|0;f=k[e>>2]|0;if((f|0)>=1){if((f|0)>1041666){cc(d,2,6339,F)|0;k[e>>2]=1041666}}else{k[e>>2]=1041666;cc(d,2,6190,E)|0}f=k[c+16>>2]|0;h=k[c+24>>2]|0;l=k[h+8>>2]|0;e=ha(l,f)|0;m=k[h+12>>2]|0;e=ha(e,m)|0;la=+((ha(e,k[h+24>>2]|0)|0)>>>0);e=ha(k[D>>2]<<3,k[h>>2]|0)|0;la=la/+((ha(e,k[h+4>>2]|0)|0)>>>0);o[b+4792>>2]=la;e=j[J>>1]|0;d:do if((f|0)==3){f=h+28|0;g=h+32|0;if(!((k[f>>2]|0)!=12|k[g>>2])){f=h+80|0;g=h+84|0;if(!((k[f>>2]|0)!=12|k[g>>2])){f=h+132|0;g=h+136|0;if(!((k[f>>2]|0)!=12|k[g>>2])){switch(e&65535|0){case 3:{if(m>>>0>1080|l>>>0>2048){k[H>>2]=l;k[H+4>>2]=m;cc(d,2,6911,H)|0;break d}break}case 4:{if(m>>>0>2160|l>>>0>4096){k[I>>2]=l;k[I+4>>2]=m;cc(d,2,7082,I)|0;break d}break}default:{}}break b}else{m=f;e=g;f=2}}else{m=f;e=g;f=1}}else{m=f;e=g;f=0};i[K>>0]=i[6678]|0;i[K+1>>0]=i[6679]|0;i[K+2>>0]=i[6680]|0;i[K+3>>0]=i[6681]|0;i[K+4>>0]=i[6682]|0;i[K+5>>0]=i[6683]|0;i[K+6>>0]=i[6684]|0;g=L;h=6685;l=g+9|0;do{i[g>>0]=i[h>>0]|0;g=g+1|0;h=h+1|0}while((g|0)<(l|0));X=(k[e>>2]|0)!=0?K:L;L=k[m>>2]|0;k[M>>2]=f;k[M+4>>2]=L;k[M+8>>2]=X;cc(d,2,6694,M)|0}else{k[G>>2]=f;cc(d,2,6512,G)|0}while(0);j[J>>1]=0;e=0}while(0);k[a+168>>2]=k[b+18680>>2];X=a+88|0;j[X>>1]=e;M=a+181|0;K=i[M>>0]&-2|k[b+20>>2]&1;i[M>>0]=K;L=b+24|0;K=(k[L>>2]&255)<<1&2|K&-3;i[M>>0]=K;i[M>>0]=K&-5|(k[b+28>>2]&255)<<2&4;do if((k[L>>2]|0)!=0?(N=b+32|0,(k[N>>2]|0)!=0):0){e=ha((k[b+4788>>2]|0)*12|0,k[aa>>2]|0)|0;f=Zc(e)|0;k[a+176>>2]=f;if(f){cj(f|0,k[N>>2]|0,e|0)|0;break}cc(d,1,7539,O)|0;d=0;r=ka;return d|0}while(0);h=a+100|0;k[h>>2]=k[b+12>>2];l=a+104|0;k[l>>2]=k[b+16>>2];g=a+92|0;k[g>>2]=k[b+4>>2];m=a+96|0;k[m>>2]=k[b+8>>2];f=b+36|0;e=k[f>>2]|0;do if(!e){e=pc()|0;f=Zc((Gi(e)|0)+29|0)|0;k[a+108>>2]=f;if(f){k[R>>2]=7716;k[R+4>>2]=e;xi(f,7711,R)|0;break}cc(d,1,7665,Q)|0;d=0;r=ka;return d|0}else{e=Zc((Gi(e)|0)+1|0)|0;k[a+108>>2]=e;if(e){Fi(e,k[f>>2]|0)|0;break}cc(d,1,7611,P)|0;d=0;r=ka;return d|0}while(0);e=(k[c+8>>2]|0)-(k[g>>2]|0)|0;f=k[c+12>>2]|0;if(!(k[b>>2]|0)){k[h>>2]=e;k[l>>2]=f-(k[m>>2]|0)}else{R=k[h>>2]|0;k[_>>2]=(e+-1+R|0)/(R|0)|0;R=k[l>>2]|0;k[$>>2]=(f+-1-(k[m>>2]|0)+R|0)/(R|0)|0}if(i[b+18688>>0]|0){i[a+180>>0]=i[b+18689>>0]|0;i[M>>0]=i[M>>0]|8}R=_c(ha(k[$>>2]|0,k[_>>2]|0)|0,5640)|0;L=a+164|0;k[L>>2]=R;if(!R){cc(d,1,7745,S)|0;d=0;r=ka;return d|0}K=b+4784|0;A=k[K>>2]|0;do if(A){w=b+48|0;B=k[aa>>2]|0;C=k[c+16>>2]|0;D=k[b+4788>>2]|0;E=ha(C,B)|0;F=_c(ha(E,D)|0,4)|0;if(!F){cc(d,1,7799,T)|0;break}g=k[w>>2]|0;s=b+60|0;e=k[s>>2]|0;if(g>>>0<e>>>0){n=ha(g,C)|0;t=b+52|0;u=b+64|0;v=b+56|0;f=k[u>>2]|0;while(1){h=k[t>>2]|0;if(h>>>0<f>>>0){e=k[v>>2]|0;m=h;l=h+n|0;while(1){if(!e)e=0;else{f=l;h=0;while(1){k[F+(f<<2)>>2]=1;h=h+1|0;e=k[v>>2]|0;if(h>>>0>=e>>>0)break;else f=f+E|0}f=k[u>>2]|0}m=m+1|0;if(m>>>0>=f>>>0)break;else l=l+1|0}e=k[s>>2]|0}g=g+1|0;if(g>>>0>=e>>>0)break;else n=n+C|0}}if(A>>>0>1){z=1;do{e=w;w=w+148|0;v=k[e+8>>2]|0;u=e+156|0;h=k[u>>2]|0;v=h>>>0>v>>>0?v:0;l=k[w>>2]|0;x=e+160|0;f=k[x>>2]|0;if(l>>>0<f>>>0){n=ha(l,C)|0;y=e+152|0;s=e+164|0;t=ha(v,E)|0;g=k[s>>2]|0;e=h;while(1){h=k[y>>2]|0;if(h>>>0<g>>>0){m=h;h=h+n|0;while(1){if(v>>>0<e>>>0){f=h+t|0;g=v;while(1){k[F+(f<<2)>>2]=1;g=g+1|0;e=k[u>>2]|0;if(g>>>0>=e>>>0)break;else f=f+E|0}g=k[s>>2]|0}m=m+1|0;if(m>>>0>=g>>>0)break;else h=h+1|0}f=k[x>>2]|0}l=l+1|0;if(l>>>0>=f>>>0)break;else n=n+C|0}}z=z+1|0}while((z|0)!=(A|0))}if((D|0)!=0?(U=(C|0)==0,(B|0)!=0):0){f=0;n=0;e=0;do{if(!U){m=f;l=0;while(1){g=0;h=m;while(1){e=(k[F+(h<<2)>>2]|0)!=1|e;g=g+1|0;if((g|0)==(C|0))break;else h=h+1|0}l=l+1|0;if((l|0)==(B|0))break;else m=m+C|0}f=E+f|0}n=n+1|0}while((n|0)!=(D|0));if(e)cc(d,1,7847,W)|0}cd(F)}while(0);e:do if(ha(k[$>>2]|0,k[_>>2]|0)|0){w=b+4788|0;x=b+40|0;y=b+44|0;z=b+18690|0;A=c+16|0;f=b+18696|0;B=c+24|0;C=b+5596|0;D=b+5600|0;E=b+5604|0;F=b+5608|0;G=b+5612|0;H=b+5616|0;I=b+5620|0;J=0;f:while(1){n=k[L>>2]|0;s=n+(J*5640|0)|0;W=k[w>>2]|0;e=n+(J*5640|0)+8|0;k[e>>2]=W;if(W){g=((j[X>>1]|0)+-3&65535)<4;l=0;do{h=(i[M>>0]&4)==0;do if(!g)if(h){k[n+(J*5640|0)+20+(l<<2)>>2]=k[b+4792+(l<<2)>>2];break}else{k[n+(J*5640|0)+5184+(l<<2)>>2]=k[b+5192+(l<<2)>>2];break}else{if(!h)k[n+(J*5640|0)+5184+(l<<2)>>2]=k[b+5192+(l<<2)>>2];k[n+(J*5640|0)+20+(l<<2)>>2]=k[b+4792+(l<<2)>>2]}while(0);l=l+1|0}while(l>>>0<(k[e>>2]|0)>>>0)}k[s>>2]=k[x>>2];k[n+(J*5640|0)+4>>2]=k[y>>2];m=n+(J*5640|0)+16|0;k[m>>2]=i[z>>0];e=n+(J*5640|0)+5636|0;g=i[e>>0]|0;i[e>>0]=g&-5;if(!(k[K>>2]|0))k[n+(J*5640|0)+420>>2]=0;else{i[e>>0]=g|4;g=k[K>>2]|0;if(!g)e=0;else{h=J+1|0;l=0;e=0;do{if((h|0)==(k[b+48+(l*148|0)+48>>2]|0)){k[n+(J*5640|0)+424+(e*148|0)>>2]=k[b+48+(e*148|0)>>2];k[n+(J*5640|0)+424+(e*148|0)+4>>2]=k[b+48+(e*148|0)+4>>2];k[n+(J*5640|0)+424+(e*148|0)+8>>2]=k[b+48+(e*148|0)+8>>2];k[n+(J*5640|0)+424+(e*148|0)+12>>2]=k[b+48+(e*148|0)+12>>2];k[n+(J*5640|0)+424+(e*148|0)+16>>2]=k[b+48+(e*148|0)+16>>2];k[n+(J*5640|0)+424+(e*148|0)+32>>2]=k[b+48+(e*148|0)+32>>2];k[n+(J*5640|0)+424+(e*148|0)+48>>2]=k[b+48+(e*148|0)+48>>2];e=e+1|0}l=l+1|0}while(l>>>0<g>>>0)}k[n+(J*5640|0)+420>>2]=e+-1}W=_c(k[A>>2]|0,1080)|0;v=n+(J*5640|0)+5584|0;k[v>>2]=W;if(!W){Z=149;break}do if(!(k[f>>2]|0)){g:do if((k[m>>2]|0)==1){e=k[A>>2]|0;if(e>>>0<=2){h=e;break}g=k[B>>2]|0;e=k[g>>2]|0;do if((e|0)==(k[g+52>>2]|0)){if((e|0)!=(k[g+104>>2]|0))break;e=k[g+4>>2]|0;if((e|0)!=(k[g+56>>2]|0))break;if((e|0)==(k[g+108>>2]|0)){Z=175;break g}}while(0);cc(d,2,8243,ea)|0;k[m>>2]=0;Z=175}else Z=175;while(0);if((Z|0)==175){Z=0;h=k[A>>2]|0}if(!h)break;e=k[B>>2]|0;g=0;do{if(!(k[e+(g*52|0)+32>>2]|0))k[(k[v>>2]|0)+(g*1080|0)+1076>>2]=1<<(k[e+(g*52|0)+24>>2]|0)+-1;g=g+1|0}while(g>>>0<h>>>0);Y=h;Z=166}else{h=k[A>>2]|0;h=ha(h<<2,h)|0;e=Zc(h)|0;l=(k[f>>2]|0)+h|0;if(!e){Z=152;break f}k[m>>2]=2;g=Zc(h)|0;k[n+(J*5640|0)+5608>>2]=g;if(!g){Z=154;break f}cj(g|0,k[f>>2]|0,h|0)|0;cj(e|0,k[f>>2]|0,h|0)|0;g=Zc(h)|0;h=n+(J*5640|0)+5604|0;k[h>>2]=g;if(!g){Z=156;break f}if(!(dh(e,g,k[A>>2]|0)|0)){Z=158;break f}g=Zc(k[A>>2]<<3)|0;k[n+(J*5640|0)+5600>>2]=g;if(!g){Z=160;break f}Sf(g,k[A>>2]|0,k[h>>2]|0);cd(e);e=k[A>>2]|0;if(e){g=k[v>>2]|0;h=0;do{k[g+(h*1080|0)+1076>>2]=k[l+(h<<2)>>2];h=h+1|0}while(h>>>0<e>>>0)}if(!(id(s,c)|0)){Z=167;break f}Y=k[A>>2]|0;Z=166}while(0);if((Z|0)==166?(Z=0,(Y|0)!=0):0){u=0;do{s=k[v>>2]|0;t=s+(u*1080|0)|0;k[t>>2]=k[x>>2]&1;h=k[aa>>2]|0;l=s+(u*1080|0)+4|0;k[l>>2]=h;e=k[C>>2]|0;if((e|0)>1){g=0;do{e=e>>1;g=g+1|0}while((e|0)>1);e=g}else e=0;k[s+(u*1080|0)+8>>2]=e;e=k[D>>2]|0;if((e|0)>1){g=0;do{e=e>>1;g=g+1|0}while((e|0)>1);e=g}else e=0;k[s+(u*1080|0)+12>>2]=e;k[s+(u*1080|0)+16>>2]=k[E>>2];W=k[F>>2]|0;k[s+(u*1080|0)+20>>2]=(W|0)==0&1;k[s+(u*1080|0)+24>>2]=(W|0)!=0?2:0;k[s+(u*1080|0)+804>>2]=2;if((u|0)==(k[G>>2]|0))e=k[H>>2]|0;else e=0;k[s+(u*1080|0)+808>>2]=e;do if(!(k[x>>2]&1)){if(!h)break;else e=0;do{k[s+(u*1080|0)+812+(e<<2)>>2]=15;k[s+(u*1080|0)+944+(e<<2)>>2]=15;e=e+1|0}while(e>>>0<(k[l>>2]|0)>>>0)}else{if((h|0)>0){l=h;n=0}else break;while(1){m=l;l=l+-1|0;e=k[I>>2]|0;do if((n|0)<(e|0)){e=k[b+5624+(n<<2)>>2]|0;if((e|0)<1)k[s+(u*1080|0)+812+(l<<2)>>2]=1;else{if((e|0)>1){g=0;do{e=e>>1;g=g+1|0}while((e|0)>1);e=g}else e=0;k[s+(u*1080|0)+812+(l<<2)>>2]=e}e=k[b+5756+(n<<2)>>2]|0;if((e|0)<1){k[s+(u*1080|0)+944+(l<<2)>>2]=1;break}if((e|0)>1){g=0;do{e=e>>1;g=g+1|0}while((e|0)>1);e=g}else e=0;k[s+(u*1080|0)+944+(l<<2)>>2]=e}else{W=e+-1|0;g=n-W|0;e=k[b+5624+(W<<2)>>2]>>g;g=k[b+5756+(W<<2)>>2]>>g;if((e|0)<1)k[s+(u*1080|0)+812+(l<<2)>>2]=1;else{if((e|0)>1){h=0;do{e=e>>1;h=h+1|0}while((e|0)>1);e=h}else e=0;k[s+(u*1080|0)+812+(l<<2)>>2]=e}if((g|0)<1){k[s+(u*1080|0)+944+(l<<2)>>2]=1;break}if((g|0)>1){e=0;do{g=g>>1;e=e+1|0}while((g|0)>1)}else e=0;k[s+(u*1080|0)+944+(l<<2)>>2]=e}while(0);if((m|0)<=1)break;else n=n+1|0}}while(0);Wg(t,k[(k[B>>2]|0)+(u*52|0)+24>>2]|0);u=u+1|0}while(u>>>0<(k[A>>2]|0)>>>0)}J=J+1|0;if(J>>>0>=(ha(k[$>>2]|0,k[_>>2]|0)|0)>>>0)break e}if((Z|0)==149){cc(d,1,7886,ba)|0;d=0;r=ka;return d|0}else if((Z|0)==152){cc(d,1,7950,ca)|0;d=0;r=ka;return d|0}else if((Z|0)==154){cd(e);cc(d,1,7993,fa)|0;d=0;r=ka;return d|0}else if((Z|0)==156){cd(e);cc(d,1,8051,ga)|0;d=0;r=ka;return d|0}else if((Z|0)==158){cd(e);cc(d,1,8111,ia)|0;d=0;r=ka;return d|0}else if((Z|0)==160){cd(e);cc(d,1,8159,ja)|0;d=0;r=ka;return d|0}else if((Z|0)==167){cc(d,1,8209,da)|0;d=0;r=ka;return d|0}}else f=b+18696|0;while(0);e=k[f>>2]|0;if(!e){d=1;r=ka;return d|0}cd(e);k[f>>2]=0;d=1;r=ka;return d|0}function id(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,p=0,q=0,r=0;if((k[a+16>>2]|0)!=2){a=1;return a|0}l=a+5604|0;r=a+5616|0;c=k[r>>2]|0;m=a+5620|0;do if(k[l>>2]|0){do if((c|0)==(k[m>>2]|0)){c=c+10|0;k[m>>2]=c;d=a+5612|0;c=bd(k[d>>2]|0,c*20|0)|0;if(c){k[d>>2]=c;q=k[r>>2]|0;_i(c+(q*20|0)|0,0,((k[m>>2]|0)-q|0)*20|0)|0;c=k[r>>2]|0;break}cd(k[d>>2]|0);k[d>>2]=0;k[m>>2]=0;k[r>>2]=0;a=0;return a|0}else d=a+5612|0;while(0);h=k[d>>2]|0;f=h+(c*20|0)|0;j=h+(c*20|0)+12|0;d=k[j>>2]|0;if(d){cd(d);k[j>>2]=0}k[h+(c*20|0)+8>>2]=1;k[h+(c*20|0)+4>>2]=1;k[f>>2]=2;d=k[b+16>>2]|0;d=ha(d,d)|0;e=d<<2;g=Zc(e)|0;k[j>>2]=g;if(!g){a=0;return a|0}else{fb[k[768+(k[f>>2]<<2)>>2]&15](k[l>>2]|0,g,d);k[h+(c*20|0)+16>>2]=e;c=(k[r>>2]|0)+1|0;k[r>>2]=c;g=2;break}}else{g=1;f=0}while(0);do if((c|0)==(k[m>>2]|0)){d=c+10|0;k[m>>2]=d;c=a+5612|0;d=bd(k[c>>2]|0,d*20|0)|0;if(!d){cd(k[c>>2]|0);k[c>>2]=0;k[m>>2]=0;k[r>>2]=0;a=0;return a|0}else{k[c>>2]=d;e=k[r>>2]|0;_i(d+(e*20|0)|0,0,((k[m>>2]|0)-e|0)*20|0)|0;if(!f){f=0;break}f=d+((e+-1|0)*20|0)|0;break}}else c=a+5612|0;while(0);l=k[c>>2]|0;m=k[r>>2]|0;q=l+(m*20|0)|0;n=l+(m*20|0)+12|0;c=k[n>>2]|0;if(c){cd(c);k[n>>2]=0}p=g+1|0;k[l+(m*20|0)+8>>2]=g;k[l+(m*20|0)+4>>2]=2;k[q>>2]=2;b=b+16|0;c=k[b>>2]|0;d=c<<2;j=Zc(d)|0;k[n>>2]=j;if(!j){a=0;return a|0}e=Zc(d)|0;if(!e){cd(k[n>>2]|0);k[n>>2]=0;a=0;return a|0}if(c){g=0;h=e;j=k[a+5584>>2]|0;while(1){o[h>>2]=+(k[j+1076>>2]|0);g=g+1|0;if((g|0)==(c|0))break;else{h=h+4|0;j=j+1080|0}}}fb[k[768+(k[q>>2]<<2)>>2]&15](e,k[n>>2]|0,c);cd(e);k[l+(m*20|0)+16>>2]=d;k[r>>2]=(k[r>>2]|0)+1;g=a+5628|0;c=k[g>>2]|0;e=a+5632|0;do if((c|0)==(k[e>>2]|0)){c=c+10|0;k[e>>2]=c;d=a+5624|0;c=bd(k[d>>2]|0,c*20|0)|0;if(c){k[d>>2]=c;a=k[g>>2]|0;_i(c+(a*20|0)|0,0,((k[e>>2]|0)-a|0)*20|0)|0;c=k[g>>2]|0;break}cd(k[d>>2]|0);k[d>>2]=0;k[e>>2]=0;k[g>>2]=0;a=0;return a|0}else d=a+5624|0;while(0);a=k[d>>2]|0;k[a+(c*20|0)+8>>2]=f;r=a+(c*20|0)+16|0;i[r>>0]=i[r>>0]|1;k[a+(c*20|0)+4>>2]=k[b>>2];k[a+(c*20|0)>>2]=p;k[a+(c*20|0)+12>>2]=q;k[g>>2]=(k[g>>2]|0)+1;a=1;return a|0}function jd(a,b,c){a=a|0;b=b|0;c=c|0;return 1}function kd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;i=fc()|0;j=b+80|0;k[j>>2]=i;if(!i){j=0;return j|0}e=b+192|0;if((Cg(k[e>>2]|0,23,d)|0)!=0?(Cg(k[e>>2]|0,24,d)|0)!=0:0){g=k[e>>2]|0;h=Dg(g)|0;e=Eg(g)|0;if(h){i=0;f=1;while(1){if(!f)f=0;else f=($a[k[e>>2]&63](b,a,d)|0)!=0;i=i+1|0;if((i|0)==(h|0))break;else{e=e+4|0;f=f&1}}Fg(g);if(!f){hc(k[j>>2]|0);k[j>>2]=0;j=0;return j|0}}else Fg(g);e=b+188|0;if((Cg(k[e>>2]|0,25,d)|0)!=0?(Cg(k[e>>2]|0,26,d)|0)!=0:0){g=k[e>>2]|0;h=Dg(g)|0;e=Eg(g)|0;if(h){i=0;f=1;while(1){if(!f)f=0;else f=($a[k[e>>2]&63](b,a,d)|0)!=0;i=i+1|0;if((i|0)==(h|0))break;else{e=e+4|0;f=f&1}}Fg(g);if(!f){hc(k[j>>2]|0);k[j>>2]=0;j=0;return j|0}}else Fg(g);e=fc()|0;k[c>>2]=e;if(!e){j=0;return j|0}jc(k[j>>2]|0,e);e=ha(k[b+116>>2]|0,k[b+112>>2]|0)|0;h=b+196|0;k[(k[h>>2]|0)+36>>2]=e;e=_c(e,40)|0;f=k[h>>2]|0;k[f+40>>2]=e;if(!e){j=0;return j|0}if(!(k[f+36>>2]|0)){j=1;return j|0}g=0;while(1){k[e+(g*40|0)+28>>2]=100;k[e+(g*40|0)+20>>2]=0;j=_c(100,24)|0;f=k[h>>2]|0;e=k[f+40>>2]|0;k[e+(g*40|0)+24>>2]=j;g=g+1|0;if(!j){e=0;f=30;break}if(g>>>0>=(k[f+36>>2]|0)>>>0){e=1;f=30;break}}if((f|0)==30)return e|0}hc(k[j>>2]|0);k[j>>2]=0;j=0;return j|0}hc(k[j>>2]|0);k[j>>2]=0;j=0;return j|0}function ld(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;if(!a)return;b=a+28|0;c=k[b>>2]|0;if(c){cd(c);k[b>>2]=0}g=a+40|0;b=k[g>>2]|0;if(b){f=a+36|0;if(k[f>>2]|0){c=b;e=0;do{d=k[c+(e*40|0)+36>>2]|0;if(d){cd(d);b=k[g>>2]|0;k[b+(e*40|0)+36>>2]=0;c=b}d=k[c+(e*40|0)+16>>2]|0;if(d){cd(d);b=k[g>>2]|0;k[b+(e*40|0)+16>>2]=0;c=b}d=k[c+(e*40|0)+24>>2]|0;if(d){cd(d);c=k[g>>2]|0;k[c+(e*40|0)+24>>2]=0;b=c}e=e+1|0}while(e>>>0<(k[f>>2]|0)>>>0)}cd(b);k[g>>2]=0}cd(a);return}function md(a,b,c,d,e,f,g,h,l,m,n){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;l=l|0;m=m|0;n=n|0;var o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0;Da=r;r=r+256|0;Ca=Da+200|0;Ba=Da+192|0;za=Da+184|0;ya=Da+176|0;pa=Da+168|0;oa=Da+160|0;na=Da+152|0;ma=Da+144|0;la=Da+136|0;ka=Da+128|0;ia=Da+120|0;ga=Da+112|0;wa=Da+104|0;ua=Da+96|0;fa=Da+88|0;ea=Da+80|0;da=Da+72|0;va=Da+64|0;ca=Da+56|0;ba=Da+48|0;sa=Da+40|0;ra=Da+32|0;qa=Da+24|0;ja=Da+16|0;aa=Da+8|0;$=Da;V=Da+240|0;T=Da+236|0;X=Da+232|0;Z=Da+228|0;_=Da+224|0;U=Da+220|0;Y=Da+216|0;S=Da+212|0;W=Da+208|0;k[S>>2]=65424;Aa=a+8|0;a:do switch(k[Aa>>2]|0){case 256:{k[S>>2]=65497;o=a+76|0;xa=117;break}case 8:{ta=a+76|0;if(!(i[ta>>0]&1)){O=a+200|0;P=a+164|0;Q=a+72|0;R=a+24|0;B=a+196|0;C=a+112|0;D=a+116|0;F=V+2|0;G=V+6|0;H=V+7|0;I=a+16|0;J=a+20|0;K=a+64|0;o=65424;b:while(1){c:do if((o|0)!=65427){while(1){A=_b(m)|0;if((A|0)==0&(L|0)==0){xa=7;break}if((Wb(m,k[I>>2]|0,2,n)|0)!=2){xa=9;break b}Ab(k[I>>2]|0,W,2);if((k[W>>2]|0)>>>0<2){xa=11;break b}if((k[S>>2]|0)==32896?(A=_b(m)|0,(A|0)==0&(L|0)==0):0){xa=14;break}s=k[Aa>>2]|0;o=k[W>>2]|0;if(s&16)k[R>>2]=-2-o+(k[R>>2]|0);p=o+-2|0;k[W>>2]=p;o=k[S>>2]|0;q=784;while(1){A=k[q>>2]|0;if((A|0)==0|(A|0)==(o|0)){y=q;break}else q=q+12|0}if(!(k[q+4>>2]&s)){xa=20;break b}if(p>>>0>(k[J>>2]|0)>>>0){A=_b(m)|0;z=L;if(0>(z|0)|0==(z|0)&p>>>0>A>>>0){xa=24;break b}o=bd(k[I>>2]|0,k[W>>2]|0)|0;if(!o){xa=26;break b}k[I>>2]=o;p=k[W>>2]|0;k[J>>2]=p}else o=k[I>>2]|0;p=Wb(m,o,p,n)|0;if((p|0)!=(k[W>>2]|0)){xa=29;break b}o=k[q+8>>2]|0;if(!o){xa=31;break b}if(!(hb[o&63](a,k[I>>2]|0,p,n)|0)){xa=33;break b}q=k[O>>2]|0;p=k[B>>2]|0;v=k[y>>2]|0;w=Zb(m)|0;x=k[W>>2]|0;w=w-x+-4|0;x=x+4|0;p=p+40|0;u=k[p>>2]|0;o=k[u+(q*40|0)+20>>2]|0;s=u+(q*40|0)+28|0;t=k[s>>2]|0;if((o+1|0)>>>0>t>>>0){t=~~(+(t>>>0)+100.0)>>>0;k[s>>2]=t;s=bd(k[u+(q*40|0)+24>>2]|0,t*24|0)|0;t=k[p>>2]|0;o=t+(q*40|0)+24|0;if(!s){xa=41;break b}k[o>>2]=s;p=t;o=k[t+(q*40|0)+20>>2]|0}else{p=u;s=k[u+(q*40|0)+24>>2]|0}j[s+(o*24|0)>>1]=v;A=s+(o*24|0)+8|0;k[A>>2]=w;k[A+4>>2]=((w|0)<0)<<31>>31;k[s+(o*24|0)+16>>2]=x;k[p+(q*40|0)+20>>2]=o+1;if((v|0)==65424?(E=k[p+(q*40|0)+16>>2]|0,(E|0)!=0):0){A=E+((k[p+(q*40|0)+12>>2]|0)*24|0)|0;k[A>>2]=w;k[A+4>>2]=0}do if((k[y>>2]|0)==65424){o=Zb(m)|0;o=-4-(k[W>>2]|0)+o|0;A=K;z=k[A+4>>2]|0;if(!(0>(z|0)|(0==(z|0)?o>>>0>(k[A>>2]|0)>>>0:0)))break;A=K;k[A>>2]=o;k[A+4>>2]=0}while(0);if(i[ta>>0]&4){xa=46;break}if((Wb(m,k[I>>2]|0,2,n)|0)!=2){xa=50;break b}Ab(k[I>>2]|0,S,2);if((k[S>>2]|0)==65427)break c}if((xa|0)==7){xa=0;k[Aa>>2]=64;break}else if((xa|0)==14){xa=0;k[Aa>>2]=64;break}else if((xa|0)==46){xa=0;A=$b(m,k[R>>2]|0,0,n)|0;if(!((L|0)==0?(A|0)==(k[R>>2]|0):0)){xa=47;break b}k[S>>2]=65427;break}}while(0);A=_b(m)|0;if((A|0)==0&(L|0)==0?(k[Aa>>2]|0)==64:0){xa=115;break}o=i[ta>>0]|0;if(!(o&4)){p=k[O>>2]|0;q=k[P>>2]|0;if(!(k[Q>>2]|0)){o=k[R>>2]|0;if(o>>>0>1){s=o+-2|0;k[R>>2]=s}else s=o}else{s=_b(m)|0;s=aj(s|0,L|0,-2,0)|0;k[R>>2]=s}o=q+(p*5640|0)+5592|0;A=q+(p*5640|0)+5596|0;do if(!s)z=1;else{z=_b(m)|0;y=L;if(0>(y|0)|0==(y|0)&s>>>0>z>>>0)cc(n,2,8592,fa)|0;p=k[o>>2]|0;if(!p){z=Zc(k[R>>2]|0)|0;k[o>>2]=z;if(!z)break b;else{z=0;break}}p=bd(p,(k[R>>2]|0)+(k[A>>2]|0)|0)|0;if(!p){xa=65;break b}k[o>>2]=p;z=0}while(0);p=k[B>>2]|0;if(p){w=Zb(m)|0;s=L;y=aj(w|0,s|0,-2,-1)|0;q=k[O>>2]|0;p=p+40|0;u=k[p>>2]|0;v=k[u+(q*40|0)+12>>2]|0;t=k[u+(q*40|0)+16>>2]|0;x=t+(v*24|0)+8|0;k[x>>2]=y;k[x+4>>2]=L;x=k[R>>2]|0;s=aj(x|0,0,w|0,s|0)|0;v=t+(v*24|0)+16|0;k[v>>2]=s;k[v+4>>2]=L;x=x+2|0;v=k[u+(q*40|0)+20>>2]|0;s=u+(q*40|0)+28|0;t=k[s>>2]|0;if((v+1|0)>>>0>t>>>0){t=~~(+(t>>>0)+100.0)>>>0;k[s>>2]=t;s=bd(k[u+(q*40|0)+24>>2]|0,t*24|0)|0;t=k[p>>2]|0;u=t+(q*40|0)+24|0;if(!s){o=u;xa=74;break}k[u>>2]=s;w=t;p=k[t+(q*40|0)+20>>2]|0}else{w=u;s=k[u+(q*40|0)+24>>2]|0;p=v}j[s+(p*24|0)>>1]=-109;v=Zi(0,y|0,32)|0;y=s+(p*24|0)+8|0;k[y>>2]=v;k[y+4>>2]=L;k[s+(p*24|0)+16>>2]=x;k[w+(q*40|0)+20>>2]=p+1}if(!z)o=Wb(m,(k[o>>2]|0)+(k[A>>2]|0)|0,k[R>>2]|0,n)|0;else o=0;k[Aa>>2]=(o|0)==(k[R>>2]|0)?8:64;k[A>>2]=(k[A>>2]|0)+o;o=i[ta>>0]|0;if((o&9)==1){i[ta>>0]=o|8;p=k[O>>2]|0;do if((bc(m)|0)!=0?(M=Zb(m)|0,N=L,!((M|0)==-1&(N|0)==-1)):0){while(1){if((Wb(m,V,2,n)|0)!=2){xa=81;break}Ab(V,T,2);if((k[T>>2]|0)!=65424){xa=83;break}if((Wb(m,V,2,n)|0)!=2){xa=85;break}Ab(V,X,2);if((k[X>>2]|0)!=10){xa=87;break}k[X>>2]=8;o=Wb(m,V,8,n)|0;if((o|0)!=(k[X>>2]|0)){xa=89;break}if((o|0)!=8){xa=91;break}Ab(V,Z,2);Ab(F,_,4);Ab(G,U,1);Ab(H,Y,1);if((k[Z>>2]|0)==(p|0)){xa=97;break}o=k[_>>2]|0;if(o>>>0<14){xa=94;break}xa=o+-12|0;k[_>>2]=xa;xa=$b(m,xa,0,n)|0;if(!((L|0)==0?(xa|0)==(k[_>>2]|0):0)){xa=96;break}}if((xa|0)==81){xa=0;o=(ac(m,M,N,n)|0)!=0&1;p=0;break}else if((xa|0)==83){xa=0;o=(ac(m,M,N,n)|0)!=0&1;p=0;break}else if((xa|0)==85){xa=0;cc(n,1,8314,ga)|0;o=0;p=0;break}else if((xa|0)==87){xa=0;cc(n,1,8332,ia)|0;o=0;p=0;break}else if((xa|0)==89){xa=0;cc(n,1,8314,ka)|0;o=0;p=0;break}else if((xa|0)==91){xa=0;cc(n,1,8681,la)|0;o=0;p=0;break}else if((xa|0)==94){xa=0;o=(ac(m,M,N,n)|0)!=0&1;p=0;break}else if((xa|0)==96){xa=0;o=(ac(m,M,N,n)|0)!=0&1;p=0;break}else if((xa|0)==97){xa=0;p=(k[U>>2]|0)==(k[Y>>2]|0)&1;o=(ac(m,M,N,n)|0)!=0&1;break}}else{o=1;p=0}while(0);if(!o){xa=99;break}if(p){o=ha(k[D>>2]|0,k[C>>2]|0)|0;i[ta>>0]=i[ta>>0]&-18|16;if(o){p=k[P>>2]|0;t=0;do{q=p+(t*5640|0)+5588|0;s=k[q>>2]|0;if(s)k[q>>2]=s+1;t=t+1|0}while((t|0)!=(o|0))}cc(n,2,8753,na)|0}}if(!(i[ta>>0]&1)){if((Wb(m,k[I>>2]|0,2,n)|0)!=2){xa=109;break}Ab(k[I>>2]|0,S,2)}}else{i[ta>>0]=o&-6;k[Aa>>2]=8;if((Wb(m,k[I>>2]|0,2,n)|0)!=2){xa=113;break}Ab(k[I>>2]|0,S,2)}o=k[S>>2]|0;if(!((o|0)!=65497&(i[ta>>0]&1)==0)){xa=116;break}}switch(xa|0){case 9:{cc(n,1,8314,$)|0;n=0;r=Da;return n|0}case 11:{cc(n,1,8332,aa)|0;n=0;r=Da;return n|0}case 20:{cc(n,1,8358,ja)|0;n=0;r=Da;return n|0}case 24:{cc(n,1,8401,qa)|0;n=0;r=Da;return n|0}case 26:{cd(k[I>>2]|0);k[I>>2]=0;k[J>>2]=0;cc(n,1,8446,ra)|0;n=0;r=Da;return n|0}case 29:{cc(n,1,8314,sa)|0;n=0;r=Da;return n|0}case 31:{cc(n,1,8480,ba)|0;n=0;r=Da;return n|0}case 33:{k[ca>>2]=k[S>>2];cc(n,1,8509,ca)|0;n=0;r=Da;return n|0}case 41:{cd(k[o>>2]|0);Ca=k[p>>2]|0;k[Ca+(q*40|0)+24>>2]=0;k[Ca+(q*40|0)+28>>2]=0;k[Ca+(q*40|0)+20>>2]=0;cc(n,1,8556,va)|0;n=0;r=Da;return n|0}case 47:{cc(n,1,8314,da)|0;n=0;r=Da;return n|0}case 50:{cc(n,1,8314,ea)|0;n=0;r=Da;return n|0}case 65:{cd(k[o>>2]|0);k[o>>2]=0;break}case 74:{cd(k[o>>2]|0);Ca=k[p>>2]|0;k[Ca+(q*40|0)+24>>2]=0;k[Ca+(q*40|0)+28>>2]=0;k[Ca+(q*40|0)+20>>2]=0;cc(n,1,8556,wa)|0;n=0;r=Da;return n|0}case 99:{cc(n,1,8707,ma)|0;n=0;r=Da;return n|0}case 109:{cc(n,1,8314,oa)|0;n=0;r=Da;return n|0}case 113:{cc(n,1,8314,pa)|0;n=0;r=Da;return n|0}case 115:{o=k[S>>2]|0;xa=116;break}}if((xa|0)==116)if((o|0)==65497){o=ta;xa=117;break a}else{o=ta;break a}cc(n,1,8647,ua)|0;n=0;r=Da;return n|0}else o=ta;break}default:{n=0;r=Da;return n|0}}while(0);if((xa|0)==117)if((k[Aa>>2]|0)!=256){k[a+200>>2]=0;k[Aa>>2]=256}if(!(i[o>>0]&1)){s=ha(k[a+112>>2]|0,k[a+116>>2]|0)|0;t=a+200|0;p=k[t>>2]|0;d:do if(p>>>0<s>>>0){o=p;q=(k[a+164>>2]|0)+(p*5640|0)|0;while(1){if(k[q+5592>>2]|0){p=o;break d}p=o+1|0;k[t>>2]=p;if(p>>>0<s>>>0){o=p;q=q+5640|0}else break}}while(0);if((p|0)==(s|0)){k[l>>2]=0;n=1;r=Da;return n|0}}else{p=a+200|0;t=p;p=k[p>>2]|0}A=k[a+164>>2]|0;if(i[A+(p*5640|0)+5636>>0]&2){B=A+(p*5640|0)+5160|0;q=k[B>>2]|0;if(!q)o=0;else{s=k[A+(p*5640|0)+5164>>2]|0;u=0;o=0;do{o=(k[s+(u<<3)+4>>2]|0)+o|0;u=u+1|0}while((u|0)!=(q|0))}xa=Zc(o)|0;z=A+(p*5640|0)+5172|0;k[z>>2]=xa;if(!xa){cc(n,1,8794,ya)|0;cc(n,1,8832,za)|0;n=0;r=Da;return n|0}y=A+(p*5640|0)+5180|0;k[y>>2]=o;q=k[B>>2]|0;x=A+(p*5640|0)+5164|0;if(!q)o=k[x>>2]|0;else{o=k[x>>2]|0;v=o;w=0;u=0;while(1){s=k[v+(w<<3)>>2]|0;if(!s)s=v;else{cj((k[z>>2]|0)+u|0,s|0,k[v+(w<<3)+4>>2]|0)|0;s=k[x>>2]|0;u=(k[s+(w<<3)+4>>2]|0)+u|0;cd(k[s+(w<<3)>>2]|0);s=k[x>>2]|0;k[s+(w<<3)>>2]=0;k[s+(w<<3)+4>>2]=0;q=k[B>>2]|0;o=s}w=w+1|0;if(w>>>0>=q>>>0)break;else v=s}}k[B>>2]=0;cd(o);k[x>>2]=0;k[A+(p*5640|0)+5168>>2]=k[z>>2];k[A+(p*5640|0)+5176>>2]=k[y>>2];p=k[t>>2]|0}o=a+204|0;if(!(jg(k[o>>2]|0,p,n)|0)){cc(n,1,8858,Ba)|0;n=0;r=Da;return n|0}else{Ba=ha(k[a+112>>2]|0,k[a+116>>2]|0)|0;k[Ca>>2]=(k[t>>2]|0)+1;k[Ca+4>>2]=Ba;cc(n,4,8892,Ca)|0;k[b>>2]=k[t>>2];k[l>>2]=1;n=kg(k[o>>2]|0)|0;k[c>>2]=n;n=k[k[(k[o>>2]|0)+20>>2]>>2]|0;k[d>>2]=k[n>>2];k[e>>2]=k[n+4>>2];k[f>>2]=k[n+8>>2];k[g>>2]=k[n+12>>2];k[h>>2]=k[n+16>>2];k[Aa>>2]=k[Aa>>2]|128;n=1;r=Da;return n|0}return 0}function nd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0;t=r;r=r+48|0;q=t+28|0;s=t+32|0;n=a+8|0;if(!(k[n>>2]&128)){e=0;r=t;return e|0}p=a+200|0;if((k[p>>2]|0)!=(b|0)){e=0;r=t;return e|0}g=k[a+164>>2]|0;m=g+(b*5640|0)|0;o=g+(b*5640|0)+5592|0;h=k[o>>2]|0;if(!h){Cd(m);e=0;r=t;return e|0}j=a+204|0;l=g+(b*5640|0)+5596|0;if(!(mg(k[j>>2]|0,h,k[l>>2]|0,b,k[a+196>>2]|0,f)|0)){Cd(m);k[n>>2]=k[n>>2]|32768;cc(f,1,8931,t)|0;e=0;r=t;return e|0}if(!(ng(k[j>>2]|0,c,d)|0)){e=0;r=t;return e|0}g=k[o>>2]|0;if(g){cd(g);k[o>>2]=0;k[l>>2]=0}o=a+76|0;i[o>>0]=i[o>>0]&-2;k[n>>2]=k[n>>2]&-129;o=_b(e)|0;a=k[n>>2]|0;if((a|0)==256|(o|0)==0&(L|0)==0&(a|0)==64){e=1;r=t;return e|0}if((Wb(e,s,2,f)|0)!=2){cc(f,2,8950,t+8|0)|0;e=1;r=t;return e|0}Ab(s,q,2);switch(k[q>>2]|0){case 65497:{k[p>>2]=0;k[n>>2]=256;e=1;r=t;return e|0}case 65424:{e=1;r=t;return e|0}default:if((_b(e)|0)==0&(L|0)==0){k[n>>2]=64;cc(f,2,8994,t+16|0)|0;e=1;r=t;return e|0}else{cc(f,1,9024,t+24|0)|0;e=0;r=t;return e|0}}return 0}function od(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;z=r;r=r+112|0;y=z+96|0;x=z+88|0;w=z+80|0;v=z+72|0;u=z+64|0;s=z+56|0;q=z+48|0;n=z+40|0;m=z+32|0;l=z+24|0;j=z+16|0;o=k[a+80>>2]|0;if((k[a+8>>2]|0)!=8){cc(g,1,9056,z)|0;g=0;r=z;return g|0}if(!(d|c|e|f)){cc(g,4,9135,z+8|0)|0;k[a+28>>2]=0;k[a+32>>2]=0;k[a+36>>2]=k[a+112>>2];k[a+40>>2]=k[a+116>>2];g=1;r=z;return g|0}t=o+8|0;h=k[t>>2]|0;if(h>>>0<c>>>0){k[j>>2]=c;k[j+4>>2]=h;cc(g,1,9204,j)|0;g=0;r=z;return g|0}h=k[o>>2]|0;if(h>>>0>c>>>0){k[l>>2]=c;k[l+4>>2]=h;cc(g,2,9291,l)|0;h=0;c=k[o>>2]|0}else h=((c-(k[a+92>>2]|0)|0)>>>0)/((k[a+100>>2]|0)>>>0)|0;k[a+28>>2]=h;k[b>>2]=c;p=o+12|0;c=k[p>>2]|0;if(c>>>0<d>>>0){k[m>>2]=d;k[m+4>>2]=c;cc(g,1,9379,m)|0;g=0;r=z;return g|0}j=o+4|0;c=k[j>>2]|0;if(c>>>0>d>>>0){k[n>>2]=d;k[n+4>>2]=c;cc(g,2,9464,n)|0;c=0;d=k[j>>2]|0}else c=((d-(k[a+96>>2]|0)|0)>>>0)/((k[a+104>>2]|0)>>>0)|0;k[a+32>>2]=c;l=b+4|0;k[l>>2]=d;c=k[o>>2]|0;if(c>>>0>e>>>0){k[q>>2]=e;k[q+4>>2]=c;cc(g,1,9550,q)|0;g=0;r=z;return g|0}c=k[t>>2]|0;if(c>>>0<e>>>0){k[s>>2]=e;k[s+4>>2]=c;cc(g,2,9639,s)|0;c=k[a+112>>2]|0;e=k[t>>2]|0}else{c=k[a+100>>2]|0;c=(e+-1-(k[a+92>>2]|0)+c|0)/(c|0)|0}k[a+36>>2]=c;h=b+8|0;k[h>>2]=e;e=k[j>>2]|0;if(e>>>0>f>>>0){k[u>>2]=f;k[u+4>>2]=e;cc(g,1,9727,u)|0;g=0;r=z;return g|0}e=k[p>>2]|0;if(e>>>0<f>>>0){k[v>>2]=f;k[v+4>>2]=e;cc(g,2,9817,v)|0;c=k[p>>2]|0;e=k[a+116>>2]|0}else{e=k[a+104>>2]|0;c=f;e=(f+-1-(k[a+96>>2]|0)+e|0)/(e|0)|0}k[a+40>>2]=e;f=b+12|0;k[f>>2]=c;v=a+76|0;i[v>>0]=i[v>>0]|2;v=k[b+16>>2]|0;a=k[b>>2]|0;a:do if(v){d=k[l>>2]|0;t=d+-1|0;u=k[h>>2]|0;p=u+-1|0;q=a+-1|0;e=0;o=k[b+24>>2]|0;while(1){b=k[o>>2]|0;c=(q+b|0)/(b|0)|0;k[o+16>>2]=c;n=k[o+4>>2]|0;h=(t+n|0)/(n|0)|0;k[o+20>>2]=h;b=(p+b|0)/(b|0)|0;j=k[o+40>>2]|0;l=$i(1,0,j|0)|0;m=L;b=aj(b|0,((b|0)<0)<<31>>31|0,-1,-1)|0;b=aj(b|0,L|0,l|0,m|0)|0;b=Zi(b|0,L|0,j|0)|0;c=aj(c|0,((c|0)<0)<<31>>31|0,-1,-1)|0;c=aj(c|0,L|0,l|0,m|0)|0;c=Zi(c|0,L|0,j|0)|0;c=b-c|0;if((c|0)<0){h=29;break}s=k[f>>2]|0;b=(n+-1+s|0)/(n|0)|0;k[o+8>>2]=c;b=aj(b|0,((b|0)<0)<<31>>31|0,-1,-1)|0;b=aj(b|0,L|0,l|0,m|0)|0;b=Zi(b|0,L|0,j|0)|0;c=aj(h|0,((h|0)<0)<<31>>31|0,-1,-1)|0;c=aj(c|0,L|0,l|0,m|0)|0;c=Zi(c|0,L|0,j|0)|0;c=b-c|0;if((c|0)<0){h=31;break}k[o+12>>2]=c;e=e+1|0;if(e>>>0>=v>>>0){c=u;e=s;break a}else o=o+52|0}if((h|0)==29){k[w>>2]=e;k[w+4>>2]=c;cc(g,1,9906,w)|0;g=0;r=z;return g|0}else if((h|0)==31){k[x>>2]=e;k[x+4>>2]=c;cc(g,1,9975,x)|0;g=0;r=z;return g|0}}else{d=k[l>>2]|0;c=k[h>>2]|0;e=k[f>>2]|0}while(0);k[y>>2]=a;k[y+4>>2]=d;k[y+8>>2]=c;k[y+12>>2]=e;cc(g,4,10044,y)|0;g=1;r=z;return g|0}function pd(){var a=0,b=0,c=0;a=_c(1,208)|0;if(!a){b=0;return b|0}k[a>>2]=1;b=a+184|0;i[b>>0]=i[b>>0]|2;b=_c(1,5640)|0;k[a+12>>2]=b;if(!b){gd(a);b=0;return b|0}b=_c(1,1e3)|0;k[a+16>>2]=b;if(!b){gd(a);b=0;return b|0}k[a+20>>2]=1e3;k[a+60>>2]=-1;b=a+64|0;k[b>>2]=0;k[b+4>>2]=0;b=_c(1,48)|0;do if(b){k[b+32>>2]=100;k[b+24>>2]=0;c=_c(100,24)|0;k[b+28>>2]=c;if(!c){cd(b);break}k[b+40>>2]=0;k[a+196>>2]=b;c=Ag()|0;k[a+192>>2]=c;if(!c){gd(a);c=0;return c|0}c=Ag()|0;k[a+188>>2]=c;if(c){c=a;return c|0}gd(a);c=0;return c|0}while(0);k[a+196>>2]=0;gd(a);c=0;return c|0}function qd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0;t=r;r=r+128|0;s=t+104|0;q=t+72|0;p=t+64|0;l=t+40|0;i=t+24|0;g=t+16|0;f=t+8|0;e=t;if(b&384){ui(10082,11,1,c)|0;r=t;return}if((b&1|0)!=0?(d=k[a+80>>2]|0,(d|0)!=0):0)rd(d,0,c);if(b&2){ui(10094,36,1,c)|0;d=k[a+96>>2]|0;k[e>>2]=k[a+92>>2];k[e+4>>2]=d;ji(c,10131,e)|0;e=k[a+104>>2]|0;k[f>>2]=k[a+100>>2];k[f+4>>2]=e;ji(c,10149,f)|0;f=k[a+116>>2]|0;k[g>>2]=k[a+112>>2];k[g+4>>2]=f;ji(c,10167,g)|0;Hd(k[a+12>>2]|0,k[(k[a+80>>2]|0)+16>>2]|0,c);ui(10183,2,1,c)|0}if((b&8|0)!=0?(h=ha(k[a+112>>2]|0,k[a+116>>2]|0)|0,(h|0)!=0):0){d=a+80|0;e=0;f=k[a+164>>2]|0;while(1){Hd(f,k[(k[d>>2]|0)+16>>2]|0,c);e=e+1|0;if((e|0)==(h|0))break;else f=f+5640|0}}if(!(b&16)){r=t;return}g=k[a+196>>2]|0;ui(10186,37,1,c)|0;h=g;b=k[h+4>>2]|0;d=g+8|0;a=k[d>>2]|0;d=k[d+4>>2]|0;f=i;k[f>>2]=k[h>>2];k[f+4>>2]=b;f=i+8|0;k[f>>2]=a;k[f+4>>2]=d;ji(c,10224,i)|0;ui(10291,17,1,c)|0;f=g+28|0;d=k[f>>2]|0;a:do if((d|0)!=0?(j=g+24|0,(k[j>>2]|0)!=0):0){e=0;while(1){b=d+(e*24|0)+8|0;h=k[b>>2]|0;b=k[b+4>>2]|0;i=k[d+(e*24|0)+16>>2]|0;k[l>>2]=m[d+(e*24|0)>>1];a=l+8|0;k[a>>2]=h;k[a+4>>2]=b;k[l+16>>2]=i;ji(c,10309,l)|0;e=e+1|0;if(e>>>0>=(k[j>>2]|0)>>>0)break a;d=k[f>>2]|0}}while(0);ui(10340,4,1,c)|0;b=g+40|0;f=k[b>>2]|0;if((f|0)!=0?(o=g+36|0,n=k[o>>2]|0,(n|0)!=0):0){e=0;d=0;do{d=(k[f+(e*40|0)+4>>2]|0)+d|0;e=e+1|0}while((e|0)!=(n|0));if(d){ui(10345,16,1,c)|0;if(k[o>>2]|0){d=k[b>>2]|0;h=0;do{g=k[d+(h*40|0)+4>>2]|0;k[p>>2]=h;k[p+4>>2]=g;ji(c,10362,p)|0;d=k[b>>2]|0;e=k[d+(h*40|0)+16>>2]|0;b:do if(!((g|0)==0|(e|0)==0)){d=0;while(1){a=e+(d*24|0)|0;u=k[a>>2]|0;a=k[a+4>>2]|0;j=e+(d*24|0)+8|0;i=k[j>>2]|0;j=k[j+4>>2]|0;n=e+(d*24|0)+16|0;l=k[n>>2]|0;n=k[n+4>>2]|0;k[q>>2]=d;f=q+8|0;k[f>>2]=u;k[f+4>>2]=a;f=q+16|0;k[f>>2]=i;k[f+4>>2]=j;f=q+24|0;k[f>>2]=l;k[f+4>>2]=n;ji(c,10398,q)|0;f=d+1|0;d=k[b>>2]|0;if((f|0)==(g|0))break b;e=k[d+(h*40|0)+16>>2]|0;d=f}}while(0);e=k[d+(h*40|0)+24>>2]|0;c:do if((e|0)!=0?(k[d+(h*40|0)+20>>2]|0)!=0:0){d=0;while(1){n=e+(d*24|0)+8|0;l=k[n>>2]|0;n=k[n+4>>2]|0;f=k[e+(d*24|0)+16>>2]|0;k[s>>2]=m[e+(d*24|0)>>1];u=s+8|0;k[u>>2]=l;k[u+4>>2]=n;k[s+16>>2]=f;ji(c,10309,s)|0;f=d+1|0;d=k[b>>2]|0;if(f>>>0>=(k[d+(h*40|0)+20>>2]|0)>>>0)break c;e=k[d+(h*40|0)+24>>2]|0;d=f}}while(0);h=h+1|0}while(h>>>0<(k[o>>2]|0)>>>0)}ui(10340,4,1,c)|0}}ui(10183,2,1,c)|0;r=t;return}function rd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0;m=r;r=r+64|0;l=m+48|0;j=m+40|0;g=m+32|0;f=m+16|0;e=m;h=m+52|0;if(!b){ui(10501,13,1,c)|0;i[h+1>>0]=0;d=9}else{ui(10464,36,1,k[676]|0)|0;d=0}i[h>>0]=d;n=k[a>>2]|0;d=k[a+4>>2]|0;k[e>>2]=h;k[e+4>>2]=n;k[e+8>>2]=d;ji(c,10515,e)|0;e=k[a+8>>2]|0;d=k[a+12>>2]|0;k[f>>2]=h;k[f+4>>2]=e;k[f+8>>2]=d;ji(c,10532,f)|0;f=a+16|0;d=k[f>>2]|0;k[g>>2]=h;k[g+4>>2]=d;ji(c,10549,g)|0;d=a+24|0;if(!(k[d>>2]|0)){ui(10183,2,1,c)|0;r=m;return}if(!(k[f>>2]|0)){ui(10183,2,1,c)|0;r=m;return}else e=0;do{k[j>>2]=h;k[j+4>>2]=e;ji(c,10565,j)|0;sd((k[d>>2]|0)+(e*52|0)|0,b,c);k[l>>2]=h;ji(c,10585,l)|0;e=e+1|0}while(e>>>0<(k[f>>2]|0)>>>0);ui(10183,2,1,c)|0;r=m;return}function sd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0;j=r;r=r+48|0;h=j+24|0;g=j+16|0;f=j;e=j+32|0;d=(b|0)!=0;if(d){ui(10590,41,1,k[676]|0)|0;b=0}else{i[e+1>>0]=9;i[e+2>>0]=0;b=9}i[e>>0]=b;l=k[a>>2]|0;b=k[a+4>>2]|0;k[f>>2]=e;k[f+4>>2]=l;k[f+8>>2]=b;ji(c,10632,f)|0;f=k[a+24>>2]|0;k[g>>2]=e;k[g+4>>2]=f;ji(c,10649,g)|0;g=k[a+32>>2]|0;k[h>>2]=e;k[h+4>>2]=g;ji(c,10661,h)|0;if(!d){r=j;return}ui(10183,2,1,c)|0;r=j;return}function td(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;l=r;r=r+16|0;d=l;b=a+80|0;i=k[(k[b>>2]|0)+16>>2]|0;c=_c(1,56)|0;k[d>>2]=c;if(!c){j=0;r=l;return j|0}k[c+24>>2]=k[(k[b>>2]|0)+16>>2];k[c>>2]=k[a+92>>2];k[c+4>>2]=k[a+96>>2];k[c+8>>2]=k[a+100>>2];k[c+12>>2]=k[a+104>>2];k[c+16>>2]=k[a+112>>2];k[c+20>>2]=k[a+116>>2];k[c+52>>2]=0;c=k[a+12>>2]|0;b=k[d>>2]|0;k[b+32>>2]=k[c>>2];k[b+36>>2]=k[c+4>>2];k[b+40>>2]=k[c+8>>2];k[b+44>>2]=k[c+16>>2];h=_c(k[b+24>>2]|0,1080)|0;k[b+48>>2]=h;b=k[d>>2]|0;h=b+48|0;a=k[h>>2]|0;if(!a){Mc(d);j=0;r=l;return j|0}if(!i){j=b;r=l;return j|0}g=c+5584|0;c=0;while(1){f=k[g>>2]|0;k[a+(c*1080|0)+4>>2]=k[f+(c*1080|0)>>2];d=f+(c*1080|0)+4|0;e=k[d>>2]|0;k[a+(c*1080|0)+8>>2]=e;k[a+(c*1080|0)+12>>2]=k[f+(c*1080|0)+8>>2];k[a+(c*1080|0)+16>>2]=k[f+(c*1080|0)+12>>2];k[a+(c*1080|0)+20>>2]=k[f+(c*1080|0)+16>>2];k[a+(c*1080|0)+24>>2]=k[f+(c*1080|0)+20>>2];if(e>>>0<33){cj(a+(c*1080|0)+948|0,f+(c*1080|0)+944|0,e|0)|0;cj(a+(c*1080|0)+816|0,f+(c*1080|0)+812|0,k[d>>2]|0)|0}e=k[f+(c*1080|0)+24>>2]|0;k[a+(c*1080|0)+28>>2]=e;k[a+(c*1080|0)+808>>2]=k[f+(c*1080|0)+804>>2];if((e|0)!=1){e=(k[d>>2]|0)*3|0;d=e+-2|0;if((d|0)<97&(e|0)>2)j=10}else{d=1;j=10}if((j|0)==10){j=0;e=0;do{k[a+(c*1080|0)+32+(e<<2)>>2]=k[f+(c*1080|0)+28+(e<<3)+4>>2];k[a+(c*1080|0)+420+(e<<2)>>2]=k[f+(c*1080|0)+28+(e<<3)>>2];e=e+1|0}while((e|0)!=(d|0))}k[a+(c*1080|0)+812>>2]=k[f+(c*1080|0)+808>>2];c=c+1|0;if((c|0)==(i|0))break;a=k[h>>2]|0}r=l;return b|0}function ud(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;b=_c(1,48)|0;if(!b){j=0;return j|0}g=a+196|0;c=k[g>>2]|0;h=c;j=k[h+4>>2]|0;a=b;k[a>>2]=k[h>>2];k[a+4>>2]=j;a=c+8|0;j=k[a+4>>2]|0;h=b+8|0;k[h>>2]=k[a>>2];k[h+4>>2]=j;h=c+16|0;j=k[h+4>>2]|0;a=b+16|0;k[a>>2]=k[h>>2];k[a+4>>2]=j;c=k[c+24>>2]|0;a=b+24|0;k[a>>2]=c;c=Zc(c*24|0)|0;j=b+28|0;k[j>>2]=c;if(!c){cd(b);j=0;return j|0}d=k[(k[g>>2]|0)+28>>2]|0;if(!d){cd(c);k[j>>2]=0}else cj(c|0,d|0,(k[a>>2]|0)*24|0)|0;a=k[(k[g>>2]|0)+36>>2]|0;f=b+36|0;k[f>>2]=a;a=_c(a,40)|0;h=b+40|0;k[h>>2]=a;if(!a){cd(k[j>>2]|0);cd(b);j=0;return j|0}c=k[(k[g>>2]|0)+40>>2]|0;if(!c){cd(a);k[h>>2]=0;j=b;return j|0}if(!(k[f>>2]|0)){j=b;return j|0}c=k[c+20>>2]|0;k[a+20>>2]=c;c=Zc(c*24|0)|0;a=k[h>>2]|0;k[a+24>>2]=c;a:do if(!c)c=0;else{e=c;c=0;while(1){d=k[(k[(k[g>>2]|0)+40>>2]|0)+(c*40|0)+24>>2]|0;if(!d){cd(e);a=k[h>>2]|0;k[a+(c*40|0)+24>>2]=0}else{cj(e|0,d|0,(k[a+(c*40|0)+20>>2]|0)*24|0)|0;a=k[h>>2]|0}d=k[(k[(k[g>>2]|0)+40>>2]|0)+(c*40|0)+4>>2]|0;k[a+(c*40|0)+4>>2]=d;d=Zc(d*24|0)|0;a=k[h>>2]|0;k[a+(c*40|0)+16>>2]=d;if(!d)break;e=k[(k[(k[g>>2]|0)+40>>2]|0)+(c*40|0)+16>>2]|0;if(!e){cd(d);a=k[h>>2]|0;k[a+(c*40|0)+16>>2]=0}else{cj(d|0,e|0,(k[a+(c*40|0)+4>>2]|0)*24|0)|0;a=k[h>>2]|0}k[a+(c*40|0)+32>>2]=0;k[a+(c*40|0)+36>>2]=0;c=c+1|0;if(c>>>0>=(k[f>>2]|0)>>>0){i=32;break}e=k[(k[(k[g>>2]|0)+40>>2]|0)+(c*40|0)+20>>2]|0;k[a+(c*40|0)+20>>2]=e;e=Zc(e*24|0)|0;a=k[h>>2]|0;k[a+(c*40|0)+24>>2]=e;if(!e)break a}if((i|0)==32)return b|0;if(c){cd(k[a+24>>2]|0);cd(k[(k[h>>2]|0)+16>>2]|0);if((c|0)!=1){a=1;do{cd(k[(k[h>>2]|0)+(a*40|0)+24>>2]|0);cd(k[(k[h>>2]|0)+(a*40|0)+16>>2]|0);a=a+1|0}while((a|0)!=(c|0))}a=k[h>>2]|0}cd(a);cd(k[j>>2]|0);cd(b);j=0;return j|0}while(0);if(c){cd(k[a+24>>2]|0);if((c|0)!=1){a=1;do{cd(k[(k[h>>2]|0)+(a*40|0)+24>>2]|0);a=a+1|0}while((a|0)!=(c|0))}a=k[h>>2]|0}cd(a);cd(k[j>>2]|0);cd(b);j=0;return j|0}function vd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;if(!c){c=0;return c|0}e=fc()|0;j=a+84|0;k[j>>2]=e;if(!e){c=0;return c|0}jc(c,e);g=a+188|0;Cg(k[g>>2]|0,27,d)|0;g=k[g>>2]|0;h=Dg(g)|0;e=Eg(g)|0;if(h){i=0;f=1;while(1){if(!f)f=0;else f=($a[k[e>>2]&63](a,b,d)|0)!=0;i=i+1|0;if((i|0)==(h|0))break;else{e=e+4|0;f=f&1}}Fg(g);if(!f){c=a+80|0;hc(k[c>>2]|0);k[c>>2]=0;c=0;return c|0}}else Fg(g);h=k[c+16>>2]|0;if(!h){c=1;return c|0}g=k[(k[j>>2]|0)+24>>2]|0;e=k[c+24>>2]|0;f=0;do{k[e+(f*52|0)+36>>2]=k[g+(f*52|0)+36>>2];c=g+(f*52|0)+44|0;k[e+(f*52|0)+44>>2]=k[c>>2];k[c>>2]=0;f=f+1|0}while(f>>>0<h>>>0);e=1;return e|0}function wd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;t=r;r=r+16|0;h=t+8|0;if(!c){cc(d,1,10673,t)|0;s=0;r=t;return s|0}f=k[a+112>>2]|0;g=ha(k[a+116>>2]|0,f)|0;if(g>>>0<=e>>>0){k[h>>2]=e;k[h+4>>2]=g+-1;cc(d,1,10711,h)|0;s=0;r=t;return s|0}s=(e>>>0)%(f>>>0)|0;q=(e>>>0)/(f>>>0)|0;h=k[a+100>>2]|0;g=ha(h,s)|0;i=k[a+92>>2]|0;g=g+i|0;k[c>>2]=g;p=a+80|0;f=k[p>>2]|0;j=k[f>>2]|0;g=g>>>0<j>>>0?j:g;k[c>>2]=g;i=(ha(h,s+1|0)|0)+i|0;s=c+8|0;k[s>>2]=i;h=k[f+8>>2]|0;i=i>>>0>h>>>0?h:i;k[s>>2]=i;s=k[a+104>>2]|0;h=ha(s,q)|0;j=k[a+96>>2]|0;h=h+j|0;o=c+4|0;k[o>>2]=h;n=k[f+4>>2]|0;h=h>>>0<n>>>0?n:h;k[o>>2]=h;j=(ha(s,q+1|0)|0)+j|0;q=c+12|0;k[q>>2]=j;s=k[f+12>>2]|0;j=j>>>0>s>>>0?s:j;k[q>>2]=j;q=c+24|0;s=c+16|0;o=k[s>>2]|0;if(o){n=k[f+24>>2]|0;m=g+-1|0;l=h+-1|0;i=i+-1|0;f=j+-1|0;g=0;h=k[q>>2]|0;while(1){j=k[n+(g*52|0)+40>>2]|0;k[h+40>>2]=j;z=k[h>>2]|0;y=(m+z|0)/(z|0)|0;k[h+16>>2]=y;u=k[h+4>>2]|0;x=(l+u|0)/(u|0)|0;k[h+20>>2]=x;z=(i+z|0)/(z|0)|0;u=(f+u|0)/(u|0)|0;w=$i(1,0,j|0)|0;v=L;z=aj(z|0,((z|0)<0)<<31>>31|0,-1,-1)|0;z=aj(z|0,L|0,w|0,v|0)|0;z=Zi(z|0,L|0,j|0)|0;y=aj(y|0,((y|0)<0)<<31>>31|0,-1,-1)|0;y=aj(y|0,L|0,w|0,v|0)|0;y=Zi(y|0,L|0,j|0)|0;k[h+8>>2]=z-y;u=aj(u|0,((u|0)<0)<<31>>31|0,-1,-1)|0;u=aj(u|0,L|0,w|0,v|0)|0;u=Zi(u|0,L|0,j|0)|0;x=aj(x|0,((x|0)<0)<<31>>31|0,-1,-1)|0;v=aj(x|0,L|0,w|0,v|0)|0;j=Zi(v|0,L|0,j|0)|0;k[h+12>>2]=u-j;g=g+1|0;if(g>>>0>=o>>>0)break;else h=h+52|0}}l=a+84|0;f=k[l>>2]|0;if(f)hc(f);f=fc()|0;k[l>>2]=f;if(!f){z=0;r=t;return z|0}jc(c,f);k[a+60>>2]=e;h=a+188|0;Cg(k[h>>2]|0,28,d)|0;h=k[h>>2]|0;i=Dg(h)|0;f=Eg(h)|0;if(i){j=0;g=1;while(1){if(!g)g=0;else g=($a[k[f>>2]&63](a,b,d)|0)!=0;j=j+1|0;if((j|0)==(i|0))break;else{f=f+4|0;g=g&1}}Fg(h);if(!g){hc(k[p>>2]|0);k[p>>2]=0;z=0;r=t;return z|0}}else Fg(h);f=k[s>>2]|0;if(!f){z=1;r=t;return z|0}i=k[(k[l>>2]|0)+24>>2]|0;h=k[q>>2]|0;j=0;while(1){k[h+(j*52|0)+36>>2]=k[i+(j*52|0)+36>>2];g=k[h+(j*52|0)+44>>2]|0;if(!g)g=i;else{cd(g);g=k[(k[l>>2]|0)+24>>2]|0;h=k[q>>2]|0;f=k[s>>2]|0}z=g+(j*52|0)+44|0;k[h+(j*52|0)+44>>2]=k[z>>2];k[z>>2]=0;j=j+1|0;if(j>>>0>=f>>>0){f=1;break}else i=g}r=t;return f|0}function xd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0;i=r;r=r+16|0;h=i;k[a+168>>2]=b;d=k[a+80>>2]|0;a:do if((((d|0)!=0?(g=k[d+24>>2]|0,(g|0)!=0):0)?(e=k[a+12>>2]|0,(e|0)!=0):0)?(f=k[e+5584>>2]|0,(f|0)!=0):0){d=k[d+16>>2]|0;if(!d)d=1;else{e=0;while(1){if((k[f+(e*1080|0)+4>>2]|0)>>>0<=b>>>0)break;k[g+(e*52|0)+40>>2]=b;e=e+1|0;if(e>>>0>=d>>>0){d=1;break a}}cc(c,1,10772,h)|0;d=0}}else d=0;while(0);r=i;return d|0}function yd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0;Q=r;r=r+48|0;O=Q+32|0;N=Q+24|0;M=Q+16|0;K=Q+8|0;L=Q;A=a+204|0;d=k[A>>2]|0;F=a+116|0;G=a+112|0;H=ha(k[G>>2]|0,k[F>>2]|0)|0;I=(H|0)==1;if(!H){P=1;r=Q;return P|0}J=a+200|0;B=a+12|0;C=a+164|0;D=a+8|0;E=d+20|0;y=d+24|0;z=0;d=0;h=0;a:while(1){if((k[J>>2]|0)!=(z|0)){P=5;break}w=z;z=z+1|0;x=ha(k[F>>2]|0,k[G>>2]|0)|0;k[K>>2]=z;k[K+4>>2]=x;cc(c,4,10885,K)|0;k[B>>2]=0;x=k[A>>2]|0;k[x+12>>2]=k[(k[C>>2]|0)+(w*5640|0)+5588>>2];k[D>>2]=0;if(!(ig(x,k[J>>2]|0,c)|0))break;e=k[A>>2]|0;if(k[(k[e+24>>2]|0)+16>>2]|0){g=0;do{f=k[(k[k[E>>2]>>2]|0)+20>>2]|0;if(I){k[f+(g*52|0)+32>>2]=k[(k[(k[y>>2]|0)+24>>2]|0)+(g*52|0)+44>>2];k[f+(g*52|0)+36>>2]=0}else{if(!(hg(f+(g*52|0)|0)|0)){P=14;break a}e=k[A>>2]|0}g=g+1|0}while(g>>>0<(k[(k[e+24>>2]|0)+16>>2]|0)>>>0)}x=og(e)|0;if(!I){if(x>>>0>h>>>0){e=bd(d,x)|0;if(!e){P=20;break}else{d=e;e=x}}else e=h;f=k[A>>2]|0;w=f+24|0;g=k[w>>2]|0;if(k[g+16>>2]|0){v=f+20|0;f=d;u=0;do{q=k[(k[k[v>>2]>>2]|0)+20>>2]|0;l=k[g+24>>2]|0;p=k[l+(u*52|0)+24>>2]|0;p=((p&7|0)!=0&1)+(p>>>3)|0;m=k[q+(u*52|0)+8>>2]|0;n=k[q+(u*52|0)>>2]|0;t=m-n|0;o=k[q+(u*52|0)+12>>2]|0;q=k[q+(u*52|0)+4>>2]|0;T=k[g>>2]|0;S=k[l+(u*52|0)>>2]|0;h=k[l+(u*52|0)+4>>2]|0;R=(S+~T+(k[g+8>>2]|0)|0)/(S|0)|0;s=R-t|0;g=n-((T+-1+S|0)/(S|0)|0)+(ha(R,q-(((k[g+4>>2]|0)+-1+h|0)/(h|0)|0)|0)|0)|0;g=(k[l+(u*52|0)+44>>2]|0)+(g<<2)|0;b:do switch(((p|0)==3?4:p)|0){case 1:{h=(o|0)==(q|0);if(!(k[l+(u*52|0)+32>>2]|0)){if(h)break b;p=(m|0)==(n|0);n=o-q|0;o=0;while(1){if(!p){h=0;l=f;m=g;while(1){i[l>>0]=k[m>>2];h=h+1|0;if((h|0)==(t|0))break;else{l=l+1|0;m=m+4|0}}f=f+t|0;g=g+(t<<2)|0}o=o+1|0;if((o|0)==(n|0))break;else g=g+(s<<2)|0}}else{if(h)break b;p=(m|0)==(n|0);n=o-q|0;o=0;while(1){if(!p){h=0;l=f;m=g;while(1){i[l>>0]=k[m>>2];h=h+1|0;if((h|0)==(t|0))break;else{l=l+1|0;m=m+4|0}}f=f+t|0;g=g+(t<<2)|0}o=o+1|0;if((o|0)==(n|0))break;else g=g+(s<<2)|0}}break}case 2:{h=(o|0)==(q|0);if(!(k[l+(u*52|0)+32>>2]|0)){if(!h){p=(m|0)==(n|0);n=o-q|0;o=0;while(1){if(!p){h=0;l=f;m=g;while(1){j[l>>1]=k[m>>2];h=h+1|0;if((h|0)==(t|0))break;else{l=l+2|0;m=m+4|0}}f=f+(t<<1)|0;g=g+(t<<2)|0}o=o+1|0;if((o|0)==(n|0))break;else g=g+(s<<2)|0}}}else if(!h){p=(m|0)==(n|0);n=o-q|0;o=0;while(1){if(!p){h=0;l=f;m=g;while(1){j[l>>1]=k[m>>2];h=h+1|0;if((h|0)==(t|0))break;else{l=l+2|0;m=m+4|0}}f=f+(t<<1)|0;g=g+(t<<2)|0}o=o+1|0;if((o|0)==(n|0))break;else g=g+(s<<2)|0}}break}case 4:{if((o|0)!=(q|0)){p=(m|0)==(n|0);n=o-q|0;o=0;while(1){if(!p){h=0;l=f;m=g;while(1){k[l>>2]=k[m>>2];h=h+1|0;if((h|0)==(t|0))break;else{l=l+4|0;m=m+4|0}}f=f+(t<<2)|0;g=g+(t<<2)|0}o=o+1|0;if((o|0)==(n|0))break;else g=g+(s<<2)|0}}break}default:{}}while(0);u=u+1|0;g=k[w>>2]|0}while(u>>>0<(k[g+16>>2]|0)>>>0);f=k[A>>2]|0}if(!(pg(f,d,x)|0)){P=63;break}}else e=h;if(!(Kd(a,b,c)|0)){P=65;break}if(z>>>0>=H>>>0){P=67;break}else h=e}if((P|0)==5)cc(c,1,10848,L)|0;else if((P|0)==14){cc(c,1,10906,M)|0;if(!d){T=0;r=Q;return T|0}cd(d);T=0;r=Q;return T|0}else if((P|0)==20){if(d)cd(d);cc(c,1,10944,N)|0;T=0;r=Q;return T|0}else if((P|0)==63){cc(c,1,10983,O)|0;cd(d);T=0;r=Q;return T|0}else if((P|0)==65){if(!d){T=0;r=Q;return T|0}cd(d);T=0;r=Q;return T|0}else if((P|0)==67){if(!d){T=1;r=Q;return T|0}cd(d);T=1;r=Q;return T|0}if(!d){T=0;r=Q;return T|0}cd(d);T=0;r=Q;return T|0}function zd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;d=a+188|0;if(!(Cg(k[d>>2]|0,29,c)|0)){b=0;return b|0}if(((j[a+88>>1]|0)+-3&65535)<4?(Cg(k[d>>2]|0,30,c)|0)==0:0){b=0;return b|0}if(!(Cg(k[d>>2]|0,31,c)|0)){b=0;return b|0}if(!(Cg(k[d>>2]|0,32,c)|0)){b=0;return b|0}if(!(Cg(k[d>>2]|0,33,c)|0)){b=0;return b|0}h=k[d>>2]|0;f=Dg(h)|0;d=Eg(h)|0;if(!f)d=1;else{g=0;e=d;d=1;while(1){if(!d)d=0;else d=($a[k[e>>2]&63](a,b,c)|0)!=0;d=d&1;g=g+1|0;if((g|0)==(f|0))break;else e=e+4|0}}Fg(h);b=d;return b|0}function Ad(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,l=0;l=r;r=r+16|0;e=fc()|0;h=a+80|0;k[h>>2]=e;if(!e){cc(d,1,11030,l)|0;b=0;r=l;return b|0}jc(c,e);g=k[c+24>>2]|0;if((g|0)!=0?(i=k[c+16>>2]|0,(i|0)!=0):0){f=0;do{c=g+(f*52|0)+44|0;e=k[c>>2]|0;if(e){k[(k[(k[h>>2]|0)+24>>2]|0)+(f*52|0)+44>>2]=e;k[c>>2]=0}f=f+1|0}while(f>>>0<i>>>0)}e=a+192|0;if(!(Cg(k[e>>2]|0,34,d)|0)){b=0;r=l;return b|0}if(!(Cg(k[e>>2]|0,35,d)|0)){b=0;r=l;return b|0}if(!(Cg(k[e>>2]|0,36,d)|0)){b=0;r=l;return b|0}f=k[e>>2]|0;g=Dg(f)|0;e=Eg(f)|0;if(g){h=0;c=1;while(1){if(!c)c=0;else c=($a[k[e>>2]&63](a,b,d)|0)!=0;h=h+1|0;if((h|0)==(g|0))break;else{e=e+4|0;c=c&1}}Fg(f);if(!c){b=0;r=l;return b|0}}else Fg(f);e=a+188|0;if(!(Cg(k[e>>2]|0,37,d)|0)){b=0;r=l;return b|0}if(!(Cg(k[e>>2]|0,38,d)|0)){b=0;r=l;return b|0}if(!(Cg(k[e>>2]|0,39,d)|0)){b=0;r=l;return b|0}if(!(Cg(k[e>>2]|0,40,d)|0)){b=0;r=l;return b|0}if(!(Cg(k[e>>2]|0,41,d)|0)){b=0;r=l;return b|0}if(!(Cg(k[e>>2]|0,42,d)|0)){b=0;r=l;return b|0}if(!(Cg(k[e>>2]|0,43,d)|0)){b=0;r=l;return b|0}c=a+88|0;if(((j[c>>1]|0)+-3&65535)<4){if(!(Cg(k[e>>2]|0,44,d)|0)){b=0;r=l;return b|0}if((j[c>>1]|0)==4?(Cg(k[e>>2]|0,45,d)|0)==0:0){b=0;r=l;return b|0}}if(!(Cg(k[e>>2]|0,46,d)|0)){b=0;r=l;return b|0}if((k[a+108>>2]|0)!=0?(Cg(k[e>>2]|0,47,d)|0)==0:0){b=0;r=l;return b|0}if((j[c>>1]&256)!=0?(Cg(k[e>>2]|0,48,d)|0)==0:0){b=0;r=l;return b|0}if((k[a+196>>2]|0)!=0?(Cg(k[e>>2]|0,49,d)|0)==0:0){b=0;r=l;return b|0}if(!(Cg(k[e>>2]|0,50,d)|0)){b=0;r=l;return b|0}if(!(Cg(k[e>>2]|0,51,d)|0)){b=0;r=l;return b|0}h=k[e>>2]|0;f=Dg(h)|0;e=Eg(h)|0;if(!f)e=1;else{g=0;c=e;e=1;while(1){if(!e)e=0;else e=($a[k[c>>2]&63](a,b,d)|0)!=0;e=e&1;g=g+1|0;if((g|0)==(f|0))break;else c=c+4|0}}Fg(h);b=e;r=l;return b|0}function Bd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;p=r;r=r+48|0;n=p+40|0;o=p+32|0;m=p+24|0;j=p+16|0;h=p+8|0;g=p;i=a+200|0;if((k[i>>2]|0)==(b|0)){l=ha(k[a+116>>2]|0,k[a+112>>2]|0)|0;k[h>>2]=b+1;k[h+4>>2]=l;cc(f,4,10885,h)|0;k[a+12>>2]=0;l=a+204|0;h=k[l>>2]|0;k[h+12>>2]=k[(k[a+164>>2]|0)+(b*5640|0)+5588>>2];k[a+8>>2]=0;if(ig(h,k[i>>2]|0,f)|0){g=k[l>>2]|0;a:do if(k[(k[g+24>>2]|0)+16>>2]|0){h=0;while(1){if(!(hg((k[(k[k[g+20>>2]>>2]|0)+20>>2]|0)+(h*52|0)|0)|0))break;h=h+1|0;g=k[l>>2]|0;if(h>>>0>=(k[(k[g+24>>2]|0)+16>>2]|0)>>>0)break a}cc(f,1,10906,m)|0;o=0;r=p;return o|0}while(0);if(!(pg(g,c,d)|0)){cc(f,1,10983,o)|0;o=0;r=p;return o|0}if(Kd(a,e,f)|0){o=1;r=p;return o|0}k[n>>2]=b;cc(f,1,11120,n)|0;o=0;r=p;return o|0}}else cc(f,1,10848,g)|0;k[j>>2]=b;cc(f,1,11063,j)|0;o=0;r=p;return o|0}function Cd(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0;if(!a)return;e=a+5164|0;b=k[e>>2]|0;if(b){f=a+5160|0;c=k[f>>2]|0;if(c){d=0;while(1){b=k[b+(d<<3)>>2]|0;if(b){cd(b);c=k[f>>2]|0}d=d+1|0;if(d>>>0>=c>>>0)break;b=k[e>>2]|0}b=k[e>>2]|0}k[f>>2]=0;cd(b);k[e>>2]=0}b=a+5172|0;c=k[b>>2]|0;if(c){cd(c);k[b>>2]=0}b=a+5584|0;c=k[b>>2]|0;if(c){cd(c);k[b>>2]=0}b=a+5608|0;c=k[b>>2]|0;if(c){cd(c);k[b>>2]=0}b=a+5604|0;c=k[b>>2]|0;if(c){cd(c);k[b>>2]=0}b=a+5624|0;c=k[b>>2]|0;if(c){cd(c);k[b>>2]=0;k[a+5632>>2]=0;k[a+5628>>2]=0}h=a+5612|0;b=k[h>>2]|0;if(b){g=a+5616|0;c=k[g>>2]|0;if(c){f=0;while(1){d=b+12|0;e=k[d>>2]|0;if(e){cd(e);k[d>>2]=0;c=k[g>>2]|0}f=f+1|0;if(f>>>0>=c>>>0)break;else b=b+20|0}b=k[h>>2]|0}cd(b);k[h>>2]=0}b=a+5600|0;c=k[b>>2]|0;if(c){cd(c);k[b>>2]=0}b=a+5592|0;c=k[b>>2]|0;if(!c)return;cd(c);k[b>>2]=0;k[a+5596>>2]=0;return}function Dd(a,b,c){a=a|0;b=b|0;c=c|0;return 1}function Ed(a,b,c){a=a|0;b=b|0;c=c|0;return (k[a+8>>2]|0)==0&(k[a+188>>2]|0)!=0&(k[a+192>>2]|0)!=0&1|0}function Fd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0;Y=r;r=r+224|0;X=Y+200|0;U=Y+192|0;T=Y+184|0;Q=Y+176|0;P=Y+168|0;O=Y+160|0;M=Y+152|0;K=Y+144|0;J=Y+136|0;D=Y+128|0;I=Y+120|0;C=Y+112|0;B=Y+104|0;A=Y+96|0;z=Y+88|0;y=Y+80|0;H=Y+72|0;G=Y+64|0;x=Y+56|0;w=Y+48|0;v=Y+40|0;E=Y+32|0;o=Y+24|0;l=Y+16|0;h=Y+8|0;N=Y;S=Y+216|0;d=Y+204|0;F=Y+212|0;u=Y+208|0;W=a+8|0;k[W>>2]=1;a:do if((Wb(b,S,2,c)|0)==2?(Ab(S,d,2),(k[d>>2]|0)==65359):0){k[W>>2]=2;n=Zb(b)|0;n=aj(n|0,L|0,-2,-1)|0;m=L;V=a+196|0;e=k[V>>2]|0;k[e>>2]=n;k[e+4>>2]=m;e=N;k[e>>2]=n;k[e+4>>2]=m;cc(c,4,15785,N)|0;e=k[V>>2]|0;m=k[e>>2]|0;n=e+24|0;d=k[n>>2]|0;g=e+32|0;f=k[g>>2]|0;do if((d+1|0)>>>0>f>>>0){t=~~(+(f>>>0)+100.0)>>>0;k[g>>2]=t;d=e+28|0;e=bd(k[d>>2]|0,t*24|0)|0;if(!e){cd(k[d>>2]|0);k[d>>2]=0;k[g>>2]=0;k[n>>2]=0;cc(c,1,15822,h)|0;break a}else{k[d>>2]=e;d=k[n>>2]|0;break}}else e=k[e+28>>2]|0;while(0);j[e+(d*24|0)>>1]=-177;s=Zi(0,m|0,32)|0;t=e+(d*24|0)+8|0;k[t>>2]=s;k[t+4>>2]=L;k[e+(d*24|0)+16>>2]=2;k[n>>2]=d+1;t=a+16|0;if((Wb(b,k[t>>2]|0,2,c)|0)!=2){cc(c,1,8314,o)|0;c=0;r=Y;return c|0}Ab(k[t>>2]|0,F,2);d=k[F>>2]|0;if((d|0)!=65424){s=a+20|0;p=0;f=0;q=0;b:while(1){if(d>>>0<65280){R=14;break}else h=784;while(1){e=k[h>>2]|0;g=(e|0)==0;if(g|(e|0)==(d|0))break;else h=h+12|0}if(g){cc(c,2,15933,v)|0;l=2;c:while(1){do{if((Wb(b,k[t>>2]|0,2,c)|0)!=2){R=20;break b}Ab(k[t>>2]|0,N,2);d=k[N>>2]|0}while(d>>>0<65280);h=784;while(1){e=k[h>>2]|0;if((e|0)==0|(e|0)==(d|0)){g=h;d=h;break}else h=h+12|0}if(!(k[d+4>>2]&k[W>>2])){R=25;break b}if((e|0)>=65424){R=100;break}switch(e|0){case 0:break;default:{o=g;n=l;break c}}l=l+2|0}if((R|0)==100){R=0;switch(e|0){case 65424:{e=p;d=q;R=27;break b}default:{o=g;n=l}}}h=k[V>>2]|0;m=Zb(b)|0;m=m-n|0;g=h+24|0;d=k[g>>2]|0;e=h+32|0;l=k[e>>2]|0;if((d+1|0)>>>0>l>>>0){d=~~(+(l>>>0)+100.0)>>>0;k[e>>2]=d;h=h+28|0;d=bd(k[h>>2]|0,d*24|0)|0;if(!d){f=h;d=h;R=32;break}k[h>>2]=d;e=d;d=k[g>>2]|0}else e=k[h+28>>2]|0;j[e+(d*24|0)>>1]=0;l=e+(d*24|0)+8|0;k[l>>2]=m;k[l+4>>2]=((m|0)<0)<<31>>31;k[e+(d*24|0)+16>>2]=n;k[g>>2]=d+1;d=k[o>>2]|0;k[F>>2]=d;if((d|0)==65424){e=p;d=q;break}else g=784;while(1){e=k[g>>2]|0;if((e|0)==0|(e|0)==(d|0))break;else g=g+12|0}}else g=h;q=(e|0)==65361?1:q;p=(e|0)==65362?1:p;f=(e|0)==65372?1:f;if(!(k[g+4>>2]&k[W>>2])){R=38;break}if((Wb(b,k[t>>2]|0,2,c)|0)!=2){R=40;break}Ab(k[t>>2]|0,u,2);e=(k[u>>2]|0)+-2|0;k[u>>2]=e;d=k[t>>2]|0;if(e>>>0>(k[s>>2]|0)>>>0){d=bd(d,e)|0;if(!d){R=43;break}k[t>>2]=d;e=k[u>>2]|0;k[s>>2]=e}d=Wb(b,d,e,c)|0;if((d|0)!=(k[u>>2]|0)){R=46;break}if(!(hb[k[g+8>>2]&63](a,k[t>>2]|0,d,c)|0)){R=48;break}l=k[V>>2]|0;m=k[g>>2]|0;n=Zb(b)|0;o=k[u>>2]|0;n=-4-o+n|0;o=o+4|0;g=l+24|0;d=k[g>>2]|0;e=l+32|0;h=k[e>>2]|0;if((d+1|0)>>>0>h>>>0){d=~~(+(h>>>0)+100.0)>>>0;k[e>>2]=d;h=l+28|0;d=bd(k[h>>2]|0,d*24|0)|0;if(!d){f=h;d=h;R=53;break}k[h>>2]=d;e=d;d=k[g>>2]|0}else e=k[l+28>>2]|0;j[e+(d*24|0)>>1]=m;m=e+(d*24|0)+8|0;k[m>>2]=n;k[m+4>>2]=((n|0)<0)<<31>>31;k[e+(d*24|0)+16>>2]=o;k[g>>2]=d+1;if((Wb(b,k[t>>2]|0,2,c)|0)!=2){R=55;break}Ab(k[t>>2]|0,F,2);d=k[F>>2]|0;if((d|0)==65424){e=p;d=q;break}}switch(R|0){case 14:{k[E>>2]=d;cc(c,1,15882,E)|0;c=0;r=Y;return c|0}case 20:{cc(c,1,8314,w)|0;R=34;break}case 25:{cc(c,1,8358,x)|0;R=34;break}case 27:{k[F>>2]=65424;break}case 32:{cd(k[d>>2]|0);k[f>>2]=0;k[e>>2]=0;k[g>>2]=0;cc(c,1,15822,G)|0;R=34;break}case 38:{cc(c,1,8358,y)|0;c=0;r=Y;return c|0}case 40:{cc(c,1,8314,z)|0;c=0;r=Y;return c|0}case 43:{cd(k[t>>2]|0);k[t>>2]=0;k[s>>2]=0;cc(c,1,8446,A)|0;c=0;r=Y;return c|0}case 46:{cc(c,1,8314,B)|0;c=0;r=Y;return c|0}case 48:{cc(c,1,16004,C)|0;c=0;r=Y;return c|0}case 53:{cd(k[d>>2]|0);k[f>>2]=0;k[e>>2]=0;k[g>>2]=0;cc(c,1,15822,I)|0;c=0;r=Y;return c|0}case 55:{cc(c,1,8314,D)|0;c=0;r=Y;return c|0}}if((R|0)==34){cc(c,1,15949,H)|0;c=0;r=Y;return c|0}if(d){if(!e){cc(c,1,16109,K)|0;c=0;r=Y;return c|0}if(!f){cc(c,1,16155,M)|0;c=0;r=Y;return c|0}d:do if(i[a+184>>0]&1){s=a+120|0;do if(k[s>>2]|0){m=a+124|0;n=0;d=0;e=0;e:do{f=k[m>>2]|0;g=k[f+(n<<3)>>2]|0;f:do if(g){h=k[f+(n<<3)+4>>2]|0;f=d>>>0<h>>>0;l=f?0:d-h|0;if((h|0)==(d|0)|f^1)d=l;else{g=f?g+d|0:g;d=h-d|0;while(1){if(d>>>0<4){R=70;break e}Ab(g,N,4);f=d+-4|0;d=k[N>>2]|0;e=d+e|0;if(f>>>0<d>>>0)break;if((f|0)==(d|0)){d=l;break f}else{g=g+(d+4)|0;d=f-d|0}}d=d-f|0}}while(0);n=n+1|0}while(n>>>0<(k[s>>2]|0)>>>0);if((R|0)==70){cc(c,1,16201,O)|0;break}if(!d)R=77;else cc(c,1,16232,P)|0}else{e=0;R=77}while(0);g:do if((R|0)==77){f=Zc(e)|0;o=a+144|0;k[o>>2]=f;if(!f){cc(c,1,13321,Q)|0;break}p=a+132|0;k[p>>2]=e;g=k[s>>2]|0;q=a+124|0;do if(g){d=k[q>>2]|0;f=d;n=0;m=0;e=0;h:while(1){h=k[f+(n<<3)>>2]|0;if(!h)h=m;else{f=k[f+(n<<3)+4>>2]|0;d=(k[o>>2]|0)+e|0;i:do if(m>>>0<f>>>0){cj(d|0,h|0,m|0)|0;e=e+m|0;if((f|0)==(m|0)){h=0;break}l=h+m|0;d=f-m|0;while(1){if(d>>>0<4){R=88;break h}Ab(l,S,4);h=l+4|0;g=d+-4|0;f=k[S>>2]|0;d=(k[o>>2]|0)+e|0;if(g>>>0<f>>>0){f=h;break}cj(d|0,h|0,f|0)|0;d=k[S>>2]|0;e=d+e|0;if((g|0)==(d|0)){h=0;break i}else{l=l+(d+4)|0;d=g-d|0}}cj(d|0,f|0,g|0)|0;h=(k[S>>2]|0)-g|0;e=g+e|0}else{cj(d|0,h|0,f|0)|0;h=m-f|0;e=f+e|0}while(0);cd(k[(k[q>>2]|0)+(n<<3)>>2]|0);f=k[q>>2]|0;k[f+(n<<3)>>2]=0;k[f+(n<<3)+4>>2]=0;g=k[s>>2]|0;d=f}n=n+1|0;if(n>>>0>=g>>>0){R=94;break}else m=h}if((R|0)==88){cc(c,1,16201,T)|0;break g}else if((R|0)==94){f=k[o>>2]|0;e=k[p>>2]|0;break}}else d=k[q>>2]|0;while(0);k[a+128>>2]=f;k[a+152>>2]=e;k[s>>2]=0;cd(d);k[q>>2]=0;break d}while(0);cc(c,1,16255,U)|0;c=0;r=Y;return c|0}while(0);cc(c,4,16281,X)|0;X=Zb(b)|0;c=(k[V>>2]|0)+8|0;k[c>>2]=X+-2;k[c+4>>2]=0;k[W>>2]=8;c=1;r=Y;return c|0}}cc(c,1,16063,J)|0;c=0;r=Y;return c|0}while(0);cc(c,1,15858,l)|0;c=0;r=Y;return c|0}function Gd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;G=r;r=r+16|0;F=G;D=k[a+80>>2]|0;E=a+88|0;A=ha(k[a+112>>2]|0,k[a+116>>2]|0)|0;p=k[D+16>>2]|0;n=p*1080|0;o=k[a+12>>2]|0;p=ha(p<<2,p)|0;a:do if(A){q=o+5604|0;s=o+5620|0;t=o+5612|0;u=o+5616|0;v=o+5632|0;w=o+5624|0;x=o+5584|0;B=0;C=k[a+164>>2]|0;b:while(1){h=C+5584|0;y=k[h>>2]|0;cj(C|0,o|0,5640)|0;b=C+5636|0;i[b>>0]=i[b>>0]&-4;k[C+5168>>2]=0;b=C+5604|0;k[b>>2]=0;j=C+5620|0;k[j>>2]=0;z=C+5612|0;k[z>>2]=0;l=C+5632|0;k[l>>2]=0;m=C+5624|0;k[m>>2]=0;k[h>>2]=y;if(k[q>>2]|0){d=Zc(p)|0;k[b>>2]=d;if(!d){b=0;d=25;break}cj(d|0,k[q>>2]|0,p|0)|0}b=(k[s>>2]|0)*20|0;d=Zc(b)|0;k[z>>2]=d;if(!d){b=0;d=25;break}cj(d|0,k[t>>2]|0,b|0)|0;b=k[u>>2]|0;if(b){f=0;g=k[z>>2]|0;h=k[t>>2]|0;while(1){e=h+12|0;if(k[e>>2]|0){b=h+16|0;d=Zc(k[b>>2]|0)|0;k[g+12>>2]=d;if(!d){b=0;d=25;break b}cj(d|0,k[e>>2]|0,k[b>>2]|0)|0;b=k[u>>2]|0}k[j>>2]=(k[j>>2]|0)+1;f=f+1|0;if(f>>>0>=b>>>0)break;else{g=g+20|0;h=h+20|0}}}b=(k[v>>2]|0)*20|0;d=Zc(b)|0;k[m>>2]=d;if(!d){b=0;d=25;break}cj(d|0,k[w>>2]|0,b|0)|0;k[l>>2]=k[v>>2];f=k[v>>2]|0;if(f){g=0;d=k[m>>2]|0;e=k[w>>2]|0;while(1){b=k[e+8>>2]|0;if(b)k[d+8>>2]=(k[z>>2]|0)+(((b-(k[t>>2]|0)|0)/20|0)*20|0);b=k[e+12>>2]|0;if(b)k[d+12>>2]=(k[z>>2]|0)+(((b-(k[t>>2]|0)|0)/20|0)*20|0);g=g+1|0;if(g>>>0>=f>>>0)break;else{d=d+20|0;e=e+20|0}}}cj(y|0,k[x>>2]|0,n|0)|0;B=B+1|0;if(B>>>0>=A>>>0)break a;else C=C+5640|0}if((d|0)==25){r=G;return b|0}}while(0);d=bg(1)|0;b=a+204|0;k[b>>2]=d;if(!d){c=0;r=G;return c|0}if(fg(d,D,E)|0){c=1;r=G;return c|0}gg(k[b>>2]|0);k[b>>2]=0;cc(c,1,8858,F)|0;c=0;r=G;return c|0}function Hd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0;w=r;r=r+128|0;u=w+120|0;t=w+112|0;s=w+104|0;q=w+96|0;p=w+88|0;o=w+80|0;n=w+72|0;m=w+64|0;l=w+56|0;j=w+48|0;i=w+40|0;h=w+32|0;g=w+24|0;f=w+16|0;e=w+8|0;d=w;if(!a){r=w;return}ui(12210,17,1,c)|0;k[d>>2]=k[a>>2];ji(c,12228,d)|0;k[e>>2]=k[a+4>>2];ji(c,12241,e)|0;k[f>>2]=k[a+8>>2];ji(c,12253,f)|0;k[g>>2]=k[a+16>>2];ji(c,12270,g)|0;if((b|0)>0){f=a+5584|0;g=0;do{e=k[f>>2]|0;k[h>>2]=g;ji(c,12281,h)|0;k[i>>2]=k[e+(g*1080|0)>>2];ji(c,12295,i)|0;a=e+(g*1080|0)+4|0;k[j>>2]=k[a>>2];ji(c,12309,j)|0;k[l>>2]=k[e+(g*1080|0)+8>>2];ji(c,12332,l)|0;k[m>>2]=k[e+(g*1080|0)+12>>2];ji(c,12348,m)|0;k[n>>2]=k[e+(g*1080|0)+16>>2];ji(c,12364,n)|0;k[o>>2]=k[e+(g*1080|0)+20>>2];ji(c,12381,o)|0;ui(12396,23,1,c)|0;if(k[a>>2]|0){d=0;do{x=k[e+(g*1080|0)+944+(d<<2)>>2]|0;k[p>>2]=k[e+(g*1080|0)+812+(d<<2)>>2];k[p+4>>2]=x;ji(c,12420,p)|0;d=d+1|0}while(d>>>0<(k[a>>2]|0)>>>0)}ki(10,c)|0;x=e+(g*1080|0)+24|0;k[q>>2]=k[x>>2];ji(c,12429,q)|0;k[s>>2]=k[e+(g*1080|0)+804>>2];ji(c,12444,s)|0;ui(12461,20,1,c)|0;if((k[x>>2]|0)!=1){a=(k[a>>2]|0)*3|0;if((a|0)>2){a=a+-2|0;v=8}}else{a=1;v=8}if((v|0)==8){v=0;d=0;do{x=k[e+(g*1080|0)+28+(d<<3)>>2]|0;k[t>>2]=k[e+(g*1080|0)+28+(d<<3)+4>>2];k[t+4>>2]=x;ji(c,12420,t)|0;d=d+1|0}while((d|0)!=(a|0))}ki(10,c)|0;k[u>>2]=k[e+(g*1080|0)+808>>2];ji(c,12482,u)|0;ui(12499,5,1,c)|0;g=g+1|0}while((g|0)!=(b|0))}ui(10340,4,1,c)|0;r=w;return}function Id(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;B=r;r=r+80|0;u=B+32|0;v=B+24|0;y=B+16|0;x=B+8|0;n=B+64|0;w=B+60|0;m=B+56|0;p=B+52|0;s=B+48|0;q=B+44|0;t=B+40|0;o=B+36|0;k[n>>2]=1;d=Zc(1e3)|0;if(!d){cc(c,1,12146,B)|0;c=0;r=B;return c|0}z=a+116|0;A=a+112|0;i=a+204|0;j=a+84|0;l=a+8|0;e=1e3;h=0;while(1){if(!(md(a,w,m,p,s,q,t,o,n,b,c)|0)){f=5;break}if(!(k[n>>2]|0)){f=17;break}g=k[m>>2]|0;if(g>>>0>e>>>0){e=bd(d,g)|0;if(!e){f=9;break}else{d=e;f=g}}else f=e;e=k[w>>2]|0;if(!(nd(a,e,d,g,b,c)|0)){f=11;break}e=e+1|0;g=ha(k[A>>2]|0,k[z>>2]|0)|0;k[v>>2]=e;k[v+4>>2]=g;cc(c,4,12005,v)|0;g=k[i>>2]|0;if(!(me(k[(k[k[g+20>>2]>>2]|0)+20>>2]|0,k[g+24>>2]|0,d,k[(k[j>>2]|0)+24>>2]|0)|0)){f=13;break}k[u>>2]=e;cc(c,4,12035,u)|0;g=_b(b)|0;if((g|0)==0&(L|0)==0?(k[l>>2]|0)==64:0){f=17;break}h=h+1|0;if((h|0)==(ha(k[A>>2]|0,k[z>>2]|0)|0)){f=17;break}else e=f}if((f|0)==5){cd(d);c=0;r=B;return c|0}else if((f|0)==9){cd(d);A=ha(k[A>>2]|0,k[z>>2]|0)|0;k[x>>2]=(k[w>>2]|0)+1;k[x+4>>2]=A;cc(c,1,11965,x)|0;c=0;r=B;return c|0}else if((f|0)==11){cd(d);A=ha(k[A>>2]|0,k[z>>2]|0)|0;k[y>>2]=e+1;k[y+4>>2]=A;cc(c,1,12181,y)|0;c=0;r=B;return c|0}else if((f|0)==13){cd(d);c=0;r=B;return c|0}else if((f|0)==17){cd(d);c=1;r=B;return c|0}return 0}function Jd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;F=r;r=r+96|0;y=F+56|0;C=F+48|0;x=F+40|0;z=F+32|0;D=F+24|0;i=F+16|0;h=F+8|0;q=F+92|0;B=F+88|0;p=F+84|0;t=F+80|0;v=F+76|0;u=F+72|0;w=F+68|0;s=F+64|0;k[q>>2]=1;d=Zc(1e3)|0;if(!d){cc(c,1,11899,F)|0;E=0;r=F;return E|0}A=a+196|0;f=k[A>>2]|0;e=k[f+40>>2]|0;a:do if(!e){e=ha(k[a+116>>2]|0,k[a+112>>2]|0)|0;k[f+36>>2]=e;e=_c(e,40)|0;f=k[A>>2]|0;k[f+40>>2]=e;b:do if(e){if(k[f+36>>2]|0){g=0;do{k[e+(g*40|0)+28>>2]=100;k[e+(g*40|0)+20>>2]=0;o=_c(100,24)|0;f=k[A>>2]|0;e=k[f+40>>2]|0;k[e+(g*40|0)+24>>2]=o;g=g+1|0;if(!o)break b}while(g>>>0<(k[f+36>>2]|0)>>>0)}f=k[a+60>>2]|0;if(!e)break a;else{E=12;break a}}while(0);cd(d);E=0;r=F;return E|0}else{f=k[a+60>>2]|0;E=12}while(0);if((E|0)==12)if(k[e+16>>2]|0){if(!(k[e+(f*40|0)+4>>2]|0)){o=a+64|0;o=aj(k[o>>2]|0,k[o+4>>2]|0,2,0)|0;if(!(Hb(b,o,L,c)|0)){cc(c,1,11937,h)|0;cd(d);E=0;r=F;return E|0}}else{o=k[e+(f*40|0)+16>>2]|0;o=aj(k[o>>2]|0,k[o+4>>2]|0,2,0)|0;if(!(Hb(b,o,L,c)|0)){cc(c,1,11937,i)|0;cd(d);E=0;r=F;return E|0}}e=a+8|0;if((k[e>>2]|0)==256)k[e>>2]=8}c:do if(md(a,B,p,t,v,u,w,s,q,b,c)|0){n=a+116|0;o=a+112|0;j=a+204|0;l=a+84|0;m=f+1|0;e=1e3;while(1){if(!(k[q>>2]|0))break;i=k[p>>2]|0;if(i>>>0>e>>>0){e=bd(d,i)|0;if(!e){E=26;break}else{d=e;h=i}}else h=e;g=k[B>>2]|0;if(!(nd(a,g,d,i,b,c)|0)){E=28;break}e=g+1|0;i=ha(k[o>>2]|0,k[n>>2]|0)|0;k[z>>2]=e;k[z+4>>2]=i;cc(c,4,12005,z)|0;i=k[j>>2]|0;if(!(me(k[(k[k[i+20>>2]>>2]|0)+20>>2]|0,k[i+24>>2]|0,d,k[(k[l>>2]|0)+24>>2]|0)|0)){E=30;break}k[x>>2]=e;cc(c,4,12035,x)|0;if((g|0)==(f|0)){E=32;break}k[y>>2]=e;k[y+4>>2]=m;cc(c,2,12079,y)|0;if(!(md(a,B,p,t,v,u,w,s,q,b,c)|0))break c;else e=h}if((E|0)==26){cd(d);E=ha(k[o>>2]|0,k[n>>2]|0)|0;k[D>>2]=(k[B>>2]|0)+1;k[D+4>>2]=E;cc(c,1,11965,D)|0;E=0;r=F;return E|0}else if((E|0)==28){cd(d);E=0;r=F;return E|0}else if((E|0)==30){cd(d);E=0;r=F;return E|0}else if((E|0)==32){E=(k[A>>2]|0)+8|0;E=aj(k[E>>2]|0,k[E+4>>2]|0,2,0)|0;if(!(Hb(b,E,L,c)|0)){cc(c,1,11937,C)|0;cd(d);E=0;r=F;return E|0}}cd(d);E=1;r=F;return E|0}while(0);cd(d);E=0;r=F;return E|0}function Kd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;H=r;r=r+32|0;D=H+16|0;t=H+8|0;i=H;C=H+20|0;E=k[a+40>>2]|0;G=a+36|0;m=k[G>>2]|0;n=a+204|0;h=k[n>>2]|0;k[h+16>>2]=0;B=a+8|0;k[B>>2]=0;k[C>>2]=0;zb(m,65424,2);zb(m+2|0,10,2);F=a+200|0;zb(m+4|0,k[F>>2]|0,2);z=a+12|0;zb(m+10|0,k[z>>2]|0,1);A=a+164|0;zb(m+11|0,k[(k[A>>2]|0)+((k[F>>2]|0)*5640|0)+5588>>2]|0,1);k[C>>2]=12;f=m+12|0;d=E+-12|0;l=a+88|0;if(((j[l>>1]|0)+-3&65535)>=4?(e=k[F>>2]|0,g=k[A>>2]|0,(k[g+(e*5640|0)+420>>2]|0)!=0):0){k[C>>2]=0;ie(k[(k[a+80>>2]|0)+16>>2]|0,g,e,f,C);y=k[C>>2]|0;e=y+12|0;f=m+e|0;d=d-y|0}else e=12;k[C>>2]=0;zb(f,65427,2);k[h+4>>2]=k[B>>2];y=k[z>>2]|0;k[h+8>>2]=y;if(!y)k[(k[k[h+20>>2]>>2]|0)+840>>2]=0;k[C>>2]=0;if(!(lg(h,k[F>>2]|0,f+2|0,C,d+-4|0,0)|0)){cc(c,1,11879,i)|0;b=0;r=H;return b|0}d=(k[C>>2]|0)+2|0;k[C>>2]=d;d=d+e|0;zb(m+6|0,d,4);if(((j[l>>1]|0)+-3&65535)<4){y=a+28|0;zb(k[y>>2]|0,k[F>>2]|0,1);x=(k[y>>2]|0)+1|0;k[y>>2]=x;zb(x,d,4);k[y>>2]=(k[y>>2]|0)+4}e=m+d|0;y=E-d|0;v=k[n>>2]|0;w=a+88|0;q=k[A>>2]|0;s=k[F>>2]|0;l=le(w,0,s)|0;x=a+8|0;k[z>>2]=(k[z>>2]|0)+1;a:do if(l>>>0>1){m=v+4|0;n=v+8|0;o=v+20|0;p=a+28|0;g=e;e=y;d=0;i=1;while(1){k[x>>2]=i;k[C>>2]=0;zb(g,65424,2);zb(g+2|0,10,2);zb(g+4|0,k[F>>2]|0,2);zb(g+10|0,k[z>>2]|0,1);zb(g+11|0,k[(k[A>>2]|0)+((k[F>>2]|0)*5640|0)+5588>>2]|0,1);k[C>>2]=0;zb(g+12|0,65427,2);k[m>>2]=k[B>>2];h=k[z>>2]|0;k[n>>2]=h;if(!h)k[(k[k[o>>2]>>2]|0)+840>>2]=0;k[C>>2]=0;if(!(lg(v,k[F>>2]|0,g+14|0,C,e+-16|0,0)|0))break;I=k[C>>2]|0;J=I+2|0;k[C>>2]=J;h=I+14|0;f=g+h|0;d=d+12+J|0;e=e+-12+(-2-I)|0;zb(g+6|0,h,4);if(((j[w>>1]|0)+-3&65535)<4){zb(k[p>>2]|0,k[F>>2]|0,1);J=(k[p>>2]|0)+1|0;k[p>>2]=J;zb(J,h,4);k[p>>2]=(k[p>>2]|0)+4}k[z>>2]=(k[z>>2]|0)+1;i=i+1|0;if(i>>>0>=l>>>0){u=12;break a}else g=f}cc(c,1,11879,t)|0}else{f=e;e=y;d=0;u=12}while(0);b:do if((u|0)==12){o=q+(s*5640|0)+420|0;c:do if(k[o>>2]|0){p=v+16|0;q=v+4|0;s=v+8|0;t=v+20|0;n=a+28|0;m=1;d:while(1){k[p>>2]=m;l=le(w,m,k[F>>2]|0)|0;if(l){i=0;while(1){k[x>>2]=i;k[C>>2]=0;zb(f,65424,2);zb(f+2|0,10,2);zb(f+4|0,k[F>>2]|0,2);zb(f+10|0,k[z>>2]|0,1);zb(f+11|0,k[(k[A>>2]|0)+((k[F>>2]|0)*5640|0)+5588>>2]|0,1);k[C>>2]=0;zb(f+12|0,65427,2);k[q>>2]=k[B>>2];J=k[z>>2]|0;k[s>>2]=J;if(!J)k[(k[k[t>>2]>>2]|0)+840>>2]=0;k[C>>2]=0;if(!(lg(v,k[F>>2]|0,f+14|0,C,e+-16|0,0)|0))break d;J=k[C>>2]|0;g=J+2|0;k[C>>2]=g;d=d+12+g|0;g=J+14|0;h=f+g|0;e=e+-12+(-2-J)|0;zb(f+6|0,g,4);if(((j[w>>1]|0)+-3&65535)<4){zb(k[n>>2]|0,k[F>>2]|0,1);J=(k[n>>2]|0)+1|0;k[n>>2]=J;zb(J,g,4);k[n>>2]=(k[n>>2]|0)+4}k[z>>2]=(k[z>>2]|0)+1;i=i+1|0;if(i>>>0>=l>>>0){f=h;break}else f=h}}m=m+1|0;if(m>>>0>(k[o>>2]|0)>>>0)break c}cc(c,1,11879,D)|0;break b}while(0);J=d-y+E|0;if((Xb(b,k[G>>2]|0,J,c)|0)!=(J|0)){J=0;r=H;return J|0}k[F>>2]=(k[F>>2]|0)+1;J=1;r=H;return J|0}while(0);J=0;r=H;return J|0}function Ld(a,b,c){a=a|0;b=b|0;c=c|0;a=a+44|0;zb(k[a>>2]|0,65497,2);if((Xb(b,k[a>>2]|0,2,c)|0)!=2){b=0;return b|0}b=(Yb(b,c)|0)!=0&1;return b|0}function Md(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;f=(k[a+32>>2]|0)*5|0;h=a+16|0;h=aj(k[h>>2]|0,k[h+4>>2]|0,6,0)|0;g=L;d=Zb(b)|0;e=L;if(!(ac(b,h,g,c)|0)){h=0;return h|0}if((Xb(b,k[a+24>>2]|0,f,c)|0)!=(f|0)){h=0;return h|0}h=(ac(b,d,e,c)|0)!=0&1;return h|0}function Nd(a,b,c){a=a|0;b=b|0;c=c|0;a=k[a+196>>2]|0;if(!a)return 1;b=Zb(b)|0;c=a;c=Yi(b|0,L|0,k[c>>2]|0,k[c+4>>2]|0)|0;b=a+16|0;k[b>>2]=c;k[b+4>>2]=L;return 1}function Od(a,b,c){a=a|0;b=b|0;c=c|0;c=a+204|0;gg(k[c>>2]|0);k[c>>2]=0;c=a+24|0;b=k[c>>2]|0;if(b){cd(b);k[c>>2]=0;k[a+28>>2]=0}c=a+36|0;b=k[c>>2]|0;if(!b){a=a+40|0;k[a>>2]=0;return 1}cd(b);k[c>>2]=0;a=a+40|0;k[a>>2]=0;return 1}function Pd(a,b,c){a=a|0;b=b|0;c=c|0;c=a+44|0;b=k[c>>2]|0;if(b){cd(b);k[c>>2]=0}k[a+48>>2]=0;return 1}function Qd(a,b,c){a=a|0;b=b|0;c=c|0;return 1}function Rd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=r;r=r+32|0;d=(k[a+8>>2]|0)==0&(k[a+188>>2]|0)!=0&(k[a+192>>2]|0)!=0&1;b=(k[(k[(k[a+164>>2]|0)+5584>>2]|0)+4>>2]|0)+-1|0;if(b>>>0>31){cc(c,1,11809,e)|0;c=0;r=e;return c|0}b=1<<b;if((k[a+100>>2]|0)>>>0<b>>>0){cc(c,1,11809,e+8|0)|0;c=0;r=e;return c|0}if((k[a+104>>2]|0)>>>0>=b>>>0){c=d;r=e;return c|0}cc(c,1,11809,e+16|0)|0;c=0;r=e;return c|0}function Sd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;if((j[a+88>>1]&-32256)<<16>>16!=-32256){h=1;return h|0}g=ha(k[a+112>>2]|0,k[a+116>>2]|0)|0;if(!g){h=1;return h|0}f=a+80|0;h=0;c=1;e=k[a+164>>2]|0;while(1){if((k[e+16>>2]|0)==2){c=(k[e+5608>>2]|0)!=0&c;a=k[(k[f>>2]|0)+16>>2]|0;if(a){d=0;b=k[e+5584>>2]|0;while(1){c=(k[b+20>>2]&1^1)&c;d=d+1|0;if(d>>>0>=a>>>0)break;else b=b+1080|0}}}h=h+1|0;if((h|0)==(g|0))break;else e=e+5640|0}return c|0}function Td(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;f=a+88|0;g=a+32|0;h=k[a+80>>2]|0;i=ha(k[a+116>>2]|0,k[a+112>>2]|0)|0;k[g>>2]=0;if(!i)return 1;d=k[a+164>>2]|0;e=0;while(1){Xf(h,f,e);b=d+420|0;c=0;a=0;do{j=le(f,a,e)|0;k[g>>2]=(k[g>>2]|0)+j;c=j+c|0;a=a+1|0}while(a>>>0<=(k[b>>2]|0)>>>0);k[d+5588>>2]=c;e=e+1|0;if((e|0)==(i|0))break;else d=d+5640|0}return 1}function Ud(a,b,c){a=a|0;b=b|0;c=c|0;a=k[a+44>>2]|0;zb(a,65359,2);return (Xb(b,a,2,c)|0)==2|0}function Vd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,n=0,o=0;o=r;r=r+16|0;g=o;h=k[a+80>>2]|0;l=h+16|0;i=(k[l>>2]|0)*3|0;n=i+40|0;d=k[h+24>>2]|0;f=a+48|0;j=a+44|0;e=k[j>>2]|0;do if(n>>>0>(k[f>>2]|0)>>>0){e=bd(e,n)|0;if(e){k[j>>2]=e;k[f>>2]=n;break}cd(k[j>>2]|0);k[j>>2]=0;k[f>>2]=0;cc(c,1,11771,g)|0;b=0;r=o;return b|0}while(0);zb(e,65361,2);zb(e+2|0,i+38|0,2);zb(e+4|0,m[a+88>>1]|0,2);zb(e+6|0,k[h+8>>2]|0,4);zb(e+10|0,k[h+12>>2]|0,4);zb(e+14|0,k[h>>2]|0,4);zb(e+18|0,k[h+4>>2]|0,4);zb(e+22|0,k[a+100>>2]|0,4);zb(e+26|0,k[a+104>>2]|0,4);zb(e+30|0,k[a+92>>2]|0,4);zb(e+34|0,k[a+96>>2]|0,4);zb(e+38|0,k[l>>2]|0,2);if(k[l>>2]|0){f=0;e=e+40|0;while(1){zb(e,(k[d+24>>2]|0)+-1+(k[d+32>>2]<<7)|0,1);zb(e+1|0,k[d>>2]|0,1);zb(e+2|0,k[d+4>>2]|0,1);f=f+1|0;if(f>>>0>=(k[l>>2]|0)>>>0)break;else{e=e+3|0;d=d+52|0}}}b=(Xb(b,k[j>>2]|0,n,c)|0)==(n|0)&1;r=o;return b|0}function Wd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;q=r;r=r+32|0;p=q+16|0;o=q+8|0;h=q;n=q+20|0;i=a+200|0;j=k[i>>2]|0;l=a+164|0;m=k[l>>2]|0;d=k[m+(j*5640|0)+5584>>2]|0;if(!(k[d>>2]&1))f=5;else f=(k[d+4>>2]|0)+5|0;g=f+9|0;k[n>>2]=g;e=a+48|0;a=a+44|0;d=k[a>>2]|0;do if(g>>>0>(k[e>>2]|0)>>>0){d=bd(d,g)|0;if(d){k[a>>2]=d;k[e>>2]=g;break}cd(k[a>>2]|0);k[a>>2]=0;k[e>>2]=0;cc(c,1,11706,h)|0;p=0;r=q;return p|0}while(0);zb(d,65362,2);zb(d+2|0,f+7|0,2);zb(d+4|0,k[m+(j*5640|0)>>2]|0,1);zb(d+5|0,k[m+(j*5640|0)+4>>2]|0,1);zb(d+6|0,k[m+(j*5640|0)+8>>2]|0,2);zb(d+8|0,k[m+(j*5640|0)+16>>2]|0,1);k[n>>2]=f;if(!(ke(k[l>>2]|0,k[i>>2]|0,d+9|0,n,c)|0)){cc(c,1,11745,o)|0;p=0;r=q;return p|0}if(!(k[n>>2]|0)){p=(Xb(b,k[a>>2]|0,g,c)|0)==(g|0)&1;r=q;return p|0}else{cc(c,1,11745,p)|0;p=0;r=q;return p|0}return 0}function Xd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;o=r;r=r+32|0;n=o+16|0;m=o+8|0;h=o;j=o+20|0;i=a+200|0;l=a+164|0;d=k[(k[l>>2]|0)+((k[i>>2]|0)*5640|0)+5584>>2]|0;e=k[d+24>>2]|0;if((e|0)==1)d=1;else d=((k[d+4>>2]|0)*3|0)+-2|0;f=(e|0)==0?d+1|0:d<<1|1;g=f+4|0;k[j>>2]=g;e=a+48|0;a=a+44|0;d=k[a>>2]|0;do if(g>>>0>(k[e>>2]|0)>>>0){d=bd(d,g)|0;if(d){k[a>>2]=d;k[e>>2]=g;break}cd(k[a>>2]|0);k[a>>2]=0;k[e>>2]=0;cc(c,1,11641,h)|0;n=0;r=o;return n|0}while(0);zb(d,65372,2);zb(d+2|0,f+2|0,2);k[j>>2]=f;if(!(je(k[l>>2]|0,k[i>>2]|0,0,d+4|0,j,c)|0)){cc(c,1,11680,m)|0;n=0;r=o;return n|0}if(!(k[j>>2]|0)){n=(Xb(b,k[a>>2]|0,g,c)|0)==(g|0)&1;r=o;return n|0}else{cc(c,1,11680,n)|0;n=0;r=o;return n|0}return 0}function Yd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0;w=r;r=r+16|0;u=w;q=w+4|0;n=a+80|0;d=k[(k[n>>2]|0)+16>>2]|0;if(d>>>0<=1){v=1;r=w;return v|0}s=a+164|0;t=a+200|0;p=a+48|0;m=a+44|0;l=1;while(1){g=k[s>>2]|0;i=k[t>>2]|0;f=k[g+(i*5640|0)+5584>>2]|0;h=k[f+(l*1080|0)>>2]|0;a:do if((((((k[f>>2]|0)==(h|0)?(o=k[f+4>>2]|0,(o|0)==(k[f+(l*1080|0)+4>>2]|0)):0)?(k[f+8>>2]|0)==(k[f+(l*1080|0)+8>>2]|0):0)?(k[f+12>>2]|0)==(k[f+(l*1080|0)+12>>2]|0):0)?(k[f+16>>2]|0)==(k[f+(l*1080|0)+16>>2]|0):0)?(k[f+20>>2]|0)==(k[f+(l*1080|0)+20>>2]|0):0){if(o){a=0;do{if((k[f+812+(a<<2)>>2]|0)!=(k[f+(l*1080|0)+812+(a<<2)>>2]|0)){v=13;break a}if((k[f+944+(a<<2)>>2]|0)!=(k[f+(l*1080|0)+944+(a<<2)>>2]|0)){v=13;break a}a=a+1|0}while(a>>>0<o>>>0)}}else v=13;while(0);if((v|0)==13){v=0;if(!(h&1))a=5;else a=(k[f+(l*1080|0)+4>>2]|0)+5|0;j=a+(d>>>0<257?6:7)|0;e=k[m>>2]|0;if(j>>>0>(k[p>>2]|0)>>>0){a=bd(e,j)|0;if(!a){v=17;break}k[m>>2]=a;k[p>>2]=j;i=k[t>>2]|0;g=k[s>>2]|0;f=k[g+(i*5640|0)+5584>>2]|0;d=k[(k[n>>2]|0)+16>>2]|0;h=k[f+(l*1080|0)>>2]|0;e=a}d=d>>>0<257?1:2;if(!(h&1))a=5;else a=(k[f+(l*1080|0)+4>>2]|0)+5|0;zb(e,65363,2);zb(e+2|0,d+3+a|0,2);zb(e+4|0,l,d);h=d|4;zb(e+h|0,k[(k[g+(i*5640|0)+5584>>2]|0)+(l*1080|0)>>2]|0,1);k[q>>2]=a;ke(k[s>>2]|0,k[t>>2]|0,e+(h+1)|0,q,c)|0;if((Xb(b,k[m>>2]|0,j,c)|0)!=(j|0)){a=0;v=24;break}d=k[(k[n>>2]|0)+16>>2]|0}l=l+1|0;if(l>>>0>=d>>>0){a=1;v=24;break}}if((v|0)==17){cd(k[m>>2]|0);k[m>>2]=0;k[p>>2]=0;cc(c,1,11567,u)|0;v=0;r=w;return v|0}else if((v|0)==24){r=w;return a|0}return 0}function Zd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0;t=r;r=r+16|0;q=t;n=t+4|0;l=a+80|0;d=k[(k[l>>2]|0)+16>>2]|0;if(d>>>0<=1){s=1;r=t;return s|0}o=a+164|0;p=a+200|0;m=a+48|0;j=a+44|0;i=1;while(1){h=k[(k[o>>2]|0)+((k[p>>2]|0)*5640|0)+5584>>2]|0;f=k[h+24>>2]|0;g=k[h+(i*1080|0)+24>>2]|0;a:do if((f|0)==(g|0)?(k[h+804>>2]|0)==(k[h+(i*1080|0)+804>>2]|0):0){if((f|0)!=1){e=(k[h+4>>2]|0)*3|0;a=e+-2|0;if((e|0)!=((k[h+(i*1080|0)+4>>2]|0)*3|0)){s=14;break}if(!a)break}else a=1;e=0;do{if((k[h+28+(e<<3)>>2]|0)!=(k[h+(i*1080|0)+28+(e<<3)>>2]|0)){s=14;break a}e=e+1|0}while(e>>>0<a>>>0);if(f){e=0;do{if((k[h+28+(e<<3)+4>>2]|0)!=(k[h+(i*1080|0)+28+(e<<3)+4>>2]|0)){s=14;break a}e=e+1|0}while(e>>>0<a>>>0)}}else s=14;while(0);if((s|0)==14){s=0;if((g|0)==1)a=1;else a=((k[h+(i*1080|0)+4>>2]|0)*3|0)+-2|0;f=((g|0)==0?a+1|0:a<<1|1)+5+(d>>>0>256&1)|0;a=k[j>>2]|0;if(f>>>0>(k[m>>2]|0)>>>0){a=bd(a,f)|0;if(!a){s=18;break}k[j>>2]=a;k[m>>2]=f;d=k[(k[o>>2]|0)+((k[p>>2]|0)*5640|0)+5584>>2]|0;e=k[d+(i*1080|0)+24>>2]|0}else{e=g;d=h}if((e|0)==1)d=1;else d=((k[d+(i*1080|0)+4>>2]|0)*3|0)+-2|0;e=(e|0)==0?d+1|0:d<<1|1;k[n>>2]=e+6;zb(a,65373,2);d=a+2|0;if((k[(k[l>>2]|0)+16>>2]|0)>>>0<257){zb(d,e+3|0,2);zb(a+4|0,i,1);a=a+5|0}else{zb(d,e+4|0,2);zb(a+4|0,i,2);a=a+6|0}k[n>>2]=e;je(k[o>>2]|0,k[p>>2]|0,i,a,n,c)|0;if((Xb(b,k[j>>2]|0,f,c)|0)!=(f|0)){a=0;s=28;break}d=k[(k[l>>2]|0)+16>>2]|0}i=i+1|0;if(i>>>0>=d>>>0){a=1;s=28;break}}if((s|0)==18){cd(k[j>>2]|0);k[j>>2]=0;k[m>>2]=0;cc(c,1,11495,q)|0;s=0;r=t;return s|0}else if((s|0)==28){r=t;return a|0}return 0}function _d(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;j=r;r=r+16|0;f=j;g=(k[a+32>>2]|0)*5|0;h=g+6|0;e=a+48|0;i=a+44|0;d=k[i>>2]|0;do if(h>>>0>(k[e>>2]|0)>>>0){d=bd(d,h)|0;if(d){k[i>>2]=d;k[e>>2]=h;break}cd(k[i>>2]|0);k[i>>2]=0;k[e>>2]=0;cc(c,1,11456,f)|0;b=0;r=j;return b|0}while(0);f=Zb(b)|0;a=a+16|0;k[a>>2]=f;k[a+4>>2]=L;zb(d,65365,2);zb(d+2|0,g+4|0,2);zb(d+4|0,0,1);zb(d+5|0,80,1);b=(Xb(b,k[i>>2]|0,h,c)|0)==(h|0)&1;r=j;return b|0}function $d(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;p=r;r=r+16|0;h=p;o=p+4|0;k[o>>2]=0;l=a+200|0;d=k[l>>2]|0;j=a+164|0;e=k[j>>2]|0;i=a+80|0;g=k[(k[i>>2]|0)+16>>2]|0;n=(ha(g>>>0<257?7:9,(k[e+(d*5640|0)+420>>2]|0)+1|0)|0)+4|0;f=a+48|0;m=a+44|0;a=k[m>>2]|0;do if(n>>>0>(k[f>>2]|0)>>>0){d=bd(a,n)|0;if(d){k[m>>2]=d;k[f>>2]=n;f=d;a=k[(k[i>>2]|0)+16>>2]|0;e=k[j>>2]|0;d=k[l>>2]|0;break}cd(k[m>>2]|0);k[m>>2]=0;k[f>>2]=0;cc(c,1,11417,h)|0;b=0;r=p;return b|0}else{f=a;a=g}while(0);ie(a,e,d,f,o);b=(Xb(b,k[m>>2]|0,n,c)|0)==(n|0)&1;r=p;return b|0}function ae(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0;h=a+164|0;i=a+80|0;e=k[i>>2]|0;d=k[e+16>>2]|0;if(!d){b=1;return b|0}g=a+44|0;a=0;f=k[(k[h>>2]|0)+5584>>2]|0;while(1){if(k[f+808>>2]|0){j=k[(k[h>>2]|0)+5584>>2]|0;m=d>>>0<257?1:2;e=m+6|0;l=k[g>>2]|0;zb(l,65374,2);d=m|4;zb(l+2|0,d,2);zb(l+4|0,a,m);zb(l+d|0,0,1);zb(l+(d+1)|0,k[j+(a*1080|0)+808>>2]|0,1);if((Xb(b,k[g>>2]|0,e,c)|0)!=(e|0)){a=0;d=7;break}e=k[i>>2]|0}a=a+1|0;d=k[e+16>>2]|0;if(a>>>0>=d>>>0){a=1;d=7;break}else f=f+1080|0}if((d|0)==7)return a|0;return 0}function be(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;j=r;r=r+16|0;f=j;g=k[a+108>>2]|0;h=Gi(g)|0;i=h+6|0;d=a+48|0;e=a+44|0;a=k[e>>2]|0;do if(i>>>0>(k[d>>2]|0)>>>0){a=bd(a,i)|0;if(a){k[e>>2]=a;k[d>>2]=i;break}cd(k[e>>2]|0);k[e>>2]=0;k[d>>2]=0;cc(c,1,11374,f)|0;b=0;r=j;return b|0}while(0);zb(a,65380,2);zb(a+2|0,h+4|0,2);zb(a+4|0,1,2);cj(a+6|0,g|0,h|0)|0;b=(Xb(b,k[e>>2]|0,i,c)|0)==(i|0)&1;r=j;return b|0}function ce(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;A=r;r=r+32|0;w=A+24|0;t=A+16|0;n=A+8|0;e=A;g=k[a+80>>2]|0;h=g+16|0;f=k[h>>2]|0;j=f+6|0;v=a+48|0;z=a+44|0;d=k[z>>2]|0;do if(j>>>0>(k[v>>2]|0)>>>0){d=bd(d,j)|0;if(d){k[z>>2]=d;k[v>>2]=j;break}cd(k[z>>2]|0);k[z>>2]=0;k[v>>2]=0;cc(c,1,11218,e)|0;b=0;r=A;return b|0}while(0);zb(d,65400,2);zb(d+2|0,f+4|0,2);zb(d+4|0,k[h>>2]|0,2);if(k[h>>2]|0){f=0;e=k[g+24>>2]|0;d=d+6|0;while(1){zb(d,(k[e+24>>2]|0)+-1|k[e+32>>2]<<7,1);f=f+1|0;if(f>>>0>=(k[h>>2]|0)>>>0)break;else{e=e+52|0;d=d+1|0}}}if((Xb(b,k[z>>2]|0,j,c)|0)!=(j|0)){b=0;r=A;return b|0}p=a+200|0;m=k[p>>2]|0;q=a+164|0;l=k[q>>2]|0;e=l+(m*5640|0)+5616|0;a:do if(k[e>>2]|0){j=0;a=k[l+(m*5640|0)+5612>>2]|0;while(1){f=a+16|0;g=k[f>>2]|0;h=g+10|0;d=k[z>>2]|0;if(h>>>0>(k[v>>2]|0)>>>0){d=bd(d,h)|0;if(!d)break;k[z>>2]=d;k[v>>2]=h}zb(d,65396,2);zb(d+2|0,g+8|0,2);zb(d+4|0,0,2);zb(d+6|0,k[a+4>>2]<<8|k[a+8>>2]&255|k[a>>2]<<10,2);zb(d+8|0,0,2);cj(d+10|0,k[a+12>>2]|0,k[f>>2]|0)|0;if((Xb(b,k[z>>2]|0,h,c)|0)!=(h|0)){s=0;x=42;break}j=j+1|0;if(j>>>0>=(k[e>>2]|0)>>>0)break a;else a=a+20|0}if((x|0)==42){r=A;return s|0}cd(k[z>>2]|0);k[z>>2]=0;k[v>>2]=0;cc(c,1,11257,n)|0;b=0;r=A;return b|0}while(0);n=l+(m*5640|0)+5628|0;b:do if(k[n>>2]|0){o=0;l=k[l+(m*5640|0)+5624>>2]|0;while(1){j=l+4|0;e=k[j>>2]|0;g=e>>>0>255;h=g?2:1;g=g?32768:0;e=ha(h,e<<1)|0;a=e+19|0;d=k[z>>2]|0;if(a>>>0>(k[v>>2]|0)>>>0){d=bd(d,a)|0;if(!d)break;k[z>>2]=d;k[v>>2]=a}zb(d,65397,2);zb(d+2|0,e+17|0,2);zb(d+4|0,0,2);zb(d+6|0,k[l>>2]|0,1);zb(d+7|0,0,2);zb(d+9|0,1,2);zb(d+11|0,1,1);zb(d+12|0,k[j>>2]|g,2);d=d+14|0;if(!(k[j>>2]|0))e=0;else{f=0;do{zb(d,f,h);d=d+h|0;f=f+1|0;e=k[j>>2]|0}while(f>>>0<e>>>0)}zb(d,e|g,2);d=d+2|0;if(!(k[j>>2]|0))f=d;else{e=0;do{zb(d,e,h);d=d+h|0;e=e+1|0}while(e>>>0<(k[j>>2]|0)>>>0);f=d}d=((i[l+16>>0]^1)&255)<<16&65536;e=k[l+8>>2]|0;if(e)d=k[e+8>>2]|d;e=k[l+12>>2]|0;if(e)d=k[e+8>>2]<<8|d;zb(f,d,3);if((Xb(b,k[z>>2]|0,a,c)|0)!=(a|0)){s=0;x=42;break}o=o+1|0;if(o>>>0>=(k[n>>2]|0)>>>0)break b;else l=l+20|0}if((x|0)==42){r=A;return s|0}cd(k[z>>2]|0);k[z>>2]=0;k[v>>2]=0;cc(c,1,11296,t)|0;b=0;r=A;return b|0}while(0);h=k[p>>2]|0;g=k[q>>2]|0;j=g+(h*5640|0)+5628|0;e=k[j>>2]|0;a=e+5|0;d=k[z>>2]|0;do if(a>>>0>(k[v>>2]|0)>>>0){d=bd(d,a)|0;if(!d){cd(k[z>>2]|0);k[z>>2]=0;k[v>>2]=0;cc(c,1,11335,w)|0;u=1;break}else{k[z>>2]=d;k[v>>2]=a;y=d;x=37;break}}else{y=d;x=37}while(0);if((x|0)==37){zb(y,65399,2);zb(y+2|0,e+3|0,2);zb(y+4|0,k[j>>2]|0,1);if(k[j>>2]|0){f=0;e=y+5|0;d=k[g+(h*5640|0)+5624>>2]|0;while(1){zb(e,k[d>>2]|0,1);f=f+1|0;if(f>>>0>=(k[j>>2]|0)>>>0)break;else{e=e+1|0;d=d+20|0}}}u=(Xb(b,k[z>>2]|0,a,c)|0)!=(a|0)}b=u&1^1;r=A;return b|0}function de(a,b,c){a=a|0;b=b|0;c=c|0;c=Zb(b)|0;b=(k[a+196>>2]|0)+8|0;k[b>>2]=c;k[b+4>>2]=L;return 1}function ee(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=r;r=r+16|0;b=bg(0)|0;d=a+204|0;k[d>>2]=b;if(!b){cc(c,1,11178,e)|0;c=0;r=e;return c|0}if(fg(b,k[a+80>>2]|0,a+88|0)|0){c=1;r=e;return c|0}gg(k[d>>2]|0);k[d>>2]=0;c=0;r=e;return c|0}function fe(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,l=0,m=0.0,n=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0,w=0.0,x=0.0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0.0,G=0.0,H=0.0,I=0.0,J=0,K=0,M=0,N=0,O=0,P=0,Q=0,R=0;O=a+80|0;D=k[O>>2]|0;P=a+164|0;e=k[P>>2]|0;N=D+24|0;E=k[N>>2]|0;c=k[E>>2]|0;d=k[E+4>>2]|0;M=D+16|0;E=ha(k[E+24>>2]|0,k[M>>2]|0)|0;C=Zb(b)|0;q=a+116|0;h=k[q>>2]|0;r=a+112|0;b=k[r>>2]|0;F=(+(C>>>0)+4294967296.0*+(L|0))/+((ha(b,h)|0)>>>0);C=(i[a+181>>0]&8)==0?1:2;if(h){s=a+92|0;u=a+100|0;v=a+96|0;y=a+104|0;z=D+4|0;A=D+8|0;B=D+12|0;x=+((ha(c<<3,d)|0)>>>0);l=b;c=b;p=0;b=e;do{n=p;p=p+1|0;if(!c)c=0;else{l=0;do{w=+ab[C&3](b);h=k[b+8>>2]|0;w=w/+(h>>>0);Q=k[s>>2]|0;e=k[u>>2]|0;g=(ha(e,l)|0)+Q|0;c=k[D>>2]|0;c=(g|0)>(c|0)?g:c;g=k[v>>2]|0;f=k[y>>2]|0;R=(ha(f,n)|0)+g|0;d=k[z>>2]|0;d=(R|0)>(d|0)?R:d;l=l+1|0;Q=(ha(e,l)|0)+Q|0;e=k[A>>2]|0;e=(Q|0)<(e|0)?Q:e;g=(ha(f,p)|0)+g|0;f=k[B>>2]|0;f=(g|0)<(f|0)?g:f;g=b+20|0;m=+o[g>>2];if(m!=0.0){t=+((ha(ha(e-c|0,E)|0,f-d|0)|0)>>>0)/(x*m)-w;o[g>>2]=t}if(h>>>0>1){m=+((ha(ha(e-c|0,E)|0,f-d|0)|0)>>>0);c=1;d=b+24|0;while(1){t=+o[d>>2];if(t!=0.0)o[d>>2]=m/(x*t)-w;c=c+1|0;if(c>>>0>=h>>>0)break;else d=d+4|0}}b=b+5640|0;c=k[r>>2]|0}while(l>>>0<c>>>0);h=k[q>>2]|0;l=c}}while(p>>>0<h>>>0);if(!h)h=0;else{s=(l|0)==0;t=F+2.0;v=l>>>0>1?l:1;u=0;c=k[P>>2]|0;do{if(!s){p=c+16|0;q=0;r=c;while(1){b=r+20|0;m=+o[b>>2];if(m!=0.0?(x=m-F,o[b>>2]=x,x<30.0):0)o[b>>2]=30.0;f=r+24|0;b=k[r+8>>2]|0;n=b+-1|0;m=+o[f>>2];d=m!=0.0;if(n>>>0>1){g=p+(b<<2)|0;e=1;b=f;do{if(d?(x=m-F,o[b>>2]=x,H=+o[b+-4>>2],x<H+10.0):0)o[b>>2]=H+20.0;b=b+4|0;e=e+1|0;m=+o[b>>2];d=m!=0.0}while((e|0)!=(n|0));if(d){G=m;J=g;K=29}}else if(d){G=m;J=f;K=29}if((K|0)==29?(K=0,x=G-t,o[J>>2]=x,I=+o[J+-4>>2],x<I+10.0):0)o[J>>2]=I+20.0;q=q+1|0;if(q>>>0>=l>>>0)break;else{p=p+5640|0;r=r+5640|0}}c=c+(v*5640|0)|0}u=u+1|0}while(u>>>0<h>>>0)}}else{l=b;h=0}d=k[M>>2]|0;if(!d)u=0;else{e=(k[a+100>>2]|0)+-1|0;f=(k[a+104>>2]|0)+-1|0;g=0;b=k[N>>2]|0;c=0;while(1){R=k[b>>2]|0;Q=k[b+4>>2]|0;R=ha(((f+Q|0)>>>0)/(Q>>>0)|0,((e+R|0)>>>0)/(R>>>0)|0)|0;c=(ha(R,k[b+24>>2]|0)|0)+c|0;g=g+1|0;if(g>>>0>=d>>>0)break;else b=b+52|0}u=~~(+(c>>>0)*.1625)>>>0}n=k[(k[O>>2]|0)+16>>2]|0;q=n+-1|0;s=ha(h,l)|0;p=(s|0)==0;if(p)e=0;else{b=0;c=0;d=k[P>>2]|0;while(1){R=k[d+5588>>2]|0;c=c>>>0>R>>>0?c:R;b=b+1|0;if((b|0)==(s|0))break;else d=d+5640|0}e=c*12|0}r=a+88|0;if(((j[r>>1]|0)+-3&65535)>=4){if(p){b=0;c=0}else{l=(n|0)==0;g=0;c=0;do{if(!l){d=k[(k[P>>2]|0)+(g*5640|0)+5584>>2]|0;f=0;do{if(!(k[d+(f*1080|0)>>2]&1))b=5;else b=(k[d+(f*1080|0)+4>>2]|0)+5|0;c=c>>>0>b>>>0?c:b;f=f+1|0}while((f|0)!=(n|0))}g=g+1|0}while((g|0)!=(s|0));h=0;b=0;do{if(!l){f=k[(k[P>>2]|0)+(h*5640|0)+5584>>2]|0;g=0;do{if(!(k[f+(g*1080|0)>>2]&1))d=5;else d=(k[f+(g*1080|0)+4>>2]|0)+5|0;b=b>>>0>d>>>0?b:d;g=g+1|0}while((g|0)!=(n|0))}h=h+1|0}while((h|0)!=(s|0))}e=(ha(c+12+b|0,q)|0)+e|0}if(p)c=13;else{d=0;c=0;b=k[P>>2]|0;while(1){R=k[b+420>>2]|0;c=c>>>0>R>>>0?c:R;d=d+1|0;if((d|0)==(s|0))break;else b=b+5640|0}c=(c*9|0)+13|0}R=e+u+c|0;k[a+40>>2]=R;R=Zc(R)|0;k[a+36>>2]=R;if(!R){R=0;return R|0}if(((j[r>>1]|0)+-3&65535)>=4){R=1;return R|0}c=Zc((k[a+32>>2]|0)*5|0)|0;k[a+24>>2]=c;if(!c){R=0;return R|0}k[a+28>>2]=c;R=1;return R|0}function ge(a){a=a|0;return 0.0}function he(a){a=a|0;return +(+((((k[a+5588>>2]|0)*14|0)+-14|0)>>>0))}function ie(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;f=k[b+(c*5640|0)+5584>>2]|0;q=(k[b+(c*5640|0)+420>>2]|0)+1|0;i=a>>>0<257?1:2;p=ha(q,(i<<1)+5|0)|0;r=p+4|0;zb(d,65375,2);zb(d+2|0,p+2|0,2);if(!q){k[e>>2]=r;return}j=i+1|0;l=i+3|0;m=i|4;n=m+i|0;o=n+1|0;p=b+(c*5640|0)+8|0;g=f+4|0;h=0;d=d+4|0;f=b+(c*5640|0)+424|0;while(1){zb(d,k[f>>2]|0,1);zb(d+1|0,k[f+4>>2]|0,i);t=f+8|0;zb(d+j|0,k[t>>2]|0,2);b=f+12|0;zb(d+l|0,k[b>>2]|0,1);c=f+16|0;zb(d+m|0,k[c>>2]|0,i);zb(d+n|0,k[f+36>>2]|0,1);u=k[t>>2]|0;s=k[p>>2]|0;k[t>>2]=(u|0)<(s|0)?u:s;t=k[b>>2]|0;s=k[g>>2]|0;k[b>>2]=(t|0)<(s|0)?t:s;b=k[c>>2]|0;k[c>>2]=(b|0)<(a|0)?b:a;h=h+1|0;if((h|0)==(q|0))break;else{d=d+o|0;f=f+148|0}}k[e>>2]=r;return}function je(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0,m=0;m=r;r=r+16|0;i=m+8|0;h=m;j=k[a+(b*5640|0)+5584>>2]|0;b=k[j+(c*1080|0)+24>>2]|0;do if((b|0)!=1){a=(k[j+(c*1080|0)+4>>2]|0)*3|0;g=a+-2|0;if(!b){a=a+-1|0;if((k[e>>2]|0)>>>0<a>>>0){cc(f,1,11534,h)|0;e=0;r=m;return e|0}else{zb(d,k[j+(c*1080|0)+804>>2]<<5,1);if(!g)break;else b=0;do{d=d+1|0;zb(d,k[j+(c*1080|0)+28+(b<<3)>>2]<<3,1);b=b+1|0}while((b|0)!=(g|0))}}else l=7}else{g=1;b=1;l=7}while(0);if((l|0)==7){a=g<<1|1;if((k[e>>2]|0)>>>0<a>>>0){cc(f,1,11534,i)|0;e=0;r=m;return e|0}zb(d,(k[j+(c*1080|0)+804>>2]<<5)+b|0,1);if(g){d=d+1|0;b=0;while(1){zb(d,(k[j+(c*1080|0)+28+(b<<3)>>2]<<11)+(k[j+(c*1080|0)+28+(b<<3)+4>>2]|0)|0,2);b=b+1|0;if((b|0)==(g|0))break;else d=d+2|0}}}k[e>>2]=(k[e>>2]|0)-a;e=1;r=m;return e|0}function ke(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;h=r;r=r+16|0;f=k[a+(b*5640|0)+5584>>2]|0;if((k[d>>2]|0)>>>0<5){cc(e,1,11606,h)|0;d=0;r=h;return d|0}g=f+4|0;zb(c,(k[g>>2]|0)+-1|0,1);zb(c+1|0,(k[f+8>>2]|0)+-2|0,1);zb(c+2|0,(k[f+12>>2]|0)+-2|0,1);zb(c+3|0,k[f+16>>2]|0,1);zb(c+4|0,k[f+20>>2]|0,1);b=(k[d>>2]|0)+-5|0;k[d>>2]=b;if(!(k[f>>2]&1)){d=1;r=h;return d|0}a=k[g>>2]|0;if(b>>>0<a>>>0){cc(e,1,11606,h+8|0)|0;d=0;r=h;return d|0}if(!a)a=0;else{b=c+5|0;c=0;while(1){zb(b,(k[f+944+(c<<2)>>2]<<4)+(k[f+812+(c<<2)>>2]|0)|0,1);c=c+1|0;a=k[g>>2]|0;if(c>>>0>=a>>>0)break;else b=b+1|0}b=k[d>>2]|0}k[d>>2]=b-a;d=1;r=h;return d|0}function le(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,m=0;f=k[a+76>>2]|0;d=k[f+(c*5640|0)+4>>2]|0;e=696;while(1){m=k[e>>2]|0;if((m|0)==-1|(m|0)==(d|0))break;else e=e+12|0}if(!(i[a+93>>0]&8)){a=1;return a|0}m=l[a+92>>0]|0;g=f+(c*5640|0)+424+(b*148|0)+92|0;h=f+(c*5640|0)+424+(b*148|0)+88|0;j=f+(c*5640|0)+424+(b*148|0)+96|0;b=f+(c*5640|0)+424+(b*148|0)+84|0;f=i[e+4>>0]|0;switch(f|0){case 67:{d=k[g>>2]|0;break}case 82:{d=k[h>>2]|0;break}case 80:{d=k[j>>2]|0;break}case 76:{d=k[b>>2]|0;break}default:d=1}if((m|0)!=(f|0)){f=i[e+5>>0]|0;switch(f|0){case 67:{d=ha(k[g>>2]|0,d)|0;break}case 82:{d=ha(k[h>>2]|0,d)|0;break}case 80:{d=ha(k[j>>2]|0,d)|0;break}case 76:{d=ha(k[b>>2]|0,d)|0;break}default:{}}if((m|0)!=(f|0)){f=i[e+6>>0]|0;switch(f|0){case 67:{d=ha(k[g>>2]|0,d)|0;break}case 82:{d=ha(k[h>>2]|0,d)|0;break}case 80:{d=ha(k[j>>2]|0,d)|0;break}case 76:{d=ha(k[b>>2]|0,d)|0;break}default:{}}if((m|0)!=(f|0)){e=i[e+7>>0]|0;switch(e|0){case 67:{d=ha(k[g>>2]|0,d)|0;break}case 82:{d=ha(k[h>>2]|0,d)|0;break}case 80:{d=ha(k[j>>2]|0,d)|0;break}case 76:{d=ha(k[b>>2]|0,d)|0;break}default:{}}if((m|0)==(e|0))e=3;else{a=d;return a|0}}else e=2}else e=1}else e=0;k[a+84>>2]=e;a=d;return a|0}function me(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;B=b+16|0;if(!(k[B>>2]|0)){B=1;return B|0}A=0;z=k[b+24>>2]|0;while(1){f=d+44|0;e=k[f>>2]|0;g=d+8|0;if(!e){b=d+12|0;e=_c(ha(k[b>>2]|0,k[g>>2]|0)|0,4)|0;k[f>>2]=e;if(!e){c=0;d=61;break}}else b=d+12|0;q=z+36|0;k[d+36>>2]=k[q>>2];x=k[z+24>>2]|0;t=k[a+24>>2]|0;q=k[q>>2]|0;x=((x&7|0)!=0&1)+(x>>>3)|0;x=(x|0)==3?4:x;n=k[t+(q*136|0)+8>>2]|0;h=k[t+(q*136|0)>>2]|0;v=n-h|0;s=k[t+(q*136|0)+12>>2]|0;q=k[t+(q*136|0)+4>>2]|0;t=s-q|0;f=k[d+16>>2]|0;p=k[d+40>>2]|0;o=$i(1,0,p|0)|0;w=L;f=aj(f|0,0,-1,-1)|0;f=aj(f|0,L|0,o|0,w|0)|0;f=bj(f|0,L|0,p|0)|0;r=aj(k[d+20>>2]|0,0,-1,-1)|0;w=aj(r|0,L|0,o|0,w|0)|0;p=bj(w|0,L|0,p|0)|0;w=k[g>>2]|0;g=f+w|0;o=k[b>>2]|0;r=p+o|0;do if(f>>>0<h>>>0){b=h-f|0;if(n>>>0>g>>>0){y=g-h|0;u=0;h=v-y|0;n=b}else{u=0;h=0;n=b;y=v}}else{b=f-h|0;if(n>>>0>g>>>0){u=b;h=n-g|0;n=0;y=w;break}else{u=b;h=0;n=0;y=v-b|0;break}}while(0);do if(p>>>0<q>>>0){g=q-p|0;if(s>>>0>r>>>0){f=r-q|0;o=f;b=0;f=t-f|0}else{o=t;b=0;f=0}}else{b=p-q|0;if(s>>>0>r>>>0){f=s-r|0;g=0;break}else{o=t-b|0;f=0;g=0;break}}while(0);if((u|h|y|f|b|o|0)<0){c=0;d=61;break}b=(ha(b,v)|0)+u|0;q=u+h|0;r=(ha(f,v)|0)-u|0;p=w-y|0;e=e+((ha(w,g)|0)+n<<2)|0;switch(x|0){case 1:{c=c+b|0;b=(o|0)==0;if(!(k[z+32>>2]|0)){if(!b){h=(y|0)==0;n=0;b=e;while(1){if(!h){g=b+(y<<2)|0;f=0;e=c;while(1){k[b>>2]=l[e>>0];f=f+1|0;if((f|0)==(y|0))break;else{b=b+4|0;e=e+1|0}}b=g;c=c+y|0}c=c+q|0;n=n+1|0;if((n|0)==(o|0))break;else b=b+(p<<2)|0}}}else if(!b){h=(y|0)==0;n=0;b=e;while(1){if(!h){g=b+(y<<2)|0;f=0;e=c;while(1){k[b>>2]=i[e>>0];f=f+1|0;if((f|0)==(y|0))break;else{b=b+4|0;e=e+1|0}}b=g;c=c+y|0}c=c+q|0;n=n+1|0;if((n|0)==(o|0))break;else b=b+(p<<2)|0}}c=c+r|0;break}case 2:{c=c+(b<<1)|0;b=(o|0)==0;if(!(k[z+32>>2]|0)){if(!b){h=(y|0)==0;n=0;b=e;while(1){if(!h){g=b+(y<<2)|0;f=0;e=c;while(1){k[b>>2]=m[e>>1];f=f+1|0;if((f|0)==(y|0))break;else{b=b+4|0;e=e+2|0}}b=g;c=c+(y<<1)|0}c=c+(q<<1)|0;n=n+1|0;if((n|0)==(o|0))break;else b=b+(p<<2)|0}}}else if(!b){h=(y|0)==0;n=0;b=e;while(1){if(!h){g=b+(y<<2)|0;f=0;e=c;while(1){k[b>>2]=j[e>>1];f=f+1|0;if((f|0)==(y|0))break;else{b=b+4|0;e=e+2|0}}b=g;c=c+(y<<1)|0}c=c+(q<<1)|0;n=n+1|0;if((n|0)==(o|0))break;else b=b+(p<<2)|0}}c=c+(r<<1)|0;break}case 4:{c=c+(b<<2)|0;if(o){h=(y|0)==0;n=0;b=e;while(1){if(!h){g=b+(y<<2)|0;f=0;e=c;while(1){k[b>>2]=k[e>>2];f=f+1|0;if((f|0)==(y|0))break;else{b=b+4|0;e=e+4|0}}b=g;c=c+(y<<2)|0}c=c+(q<<2)|0;n=n+1|0;if((n|0)==(o|0))break;else b=b+(p<<2)|0}}c=c+(r<<2)|0;break}default:{}}A=A+1|0;if(A>>>0>=(k[B>>2]|0)>>>0){c=1;d=61;break}else{d=d+52|0;z=z+52|0;a=a+52|0}}if((d|0)==61)return c|0;return 0}function ne(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;z=r;r=r+112|0;x=z+88|0;u=z+80|0;v=z+72|0;t=z+64|0;p=z+56|0;o=z+48|0;j=z+40|0;g=z+32|0;f=z+24|0;e=z+16|0;q=z+100|0;s=z+96|0;w=z+92|0;k[s>>2]=0;y=a+200|0;if((c|0)!=8){cc(d,1,8681,z)|0;cc(d,1,8681,z+8|0)|0;d=0;r=z;return d|0}Ab(b,y,2);Ab(b+2|0,q,4);Ab(b+6|0,w,1);Ab(b+7|0,s,1);h=k[y>>2]|0;b=k[a+112>>2]|0;if(h>>>0>=(ha(k[a+116>>2]|0,b)|0)>>>0){k[e>>2]=h;cc(d,1,15277,e)|0;d=0;r=z;return d|0}c=k[a+164>>2]|0;n=(h>>>0)%(b>>>0)|0;m=(h>>>0)/(b>>>0)|0;b=k[q>>2]|0;do if((b+-1|0)>>>0<13){if((b|0)==12){k[f>>2]=12;cc(d,2,15301,f)|0;b=k[q>>2]|0;break}k[g>>2]=b;cc(d,1,15338,g)|0;d=0;r=z;return d|0}while(0);if(!b){cc(d,4,15399,j)|0;k[a+72>>2]=1}b=k[s>>2]|0;do if(!b)b=k[c+(h*5640|0)+5588>>2]|0;else{b=((l[a+76>>0]|0)>>>4&1)+b|0;k[s>>2]=b;e=c+(h*5640|0)+5588|0;f=k[e>>2]|0;c=k[w>>2]|0;if((f+-1|0)>>>0<c>>>0){k[o>>2]=c;k[o+4>>2]=f;cc(d,1,15510,o)|0;k[a+72>>2]=1;d=0;r=z;return d|0}if(c>>>0<b>>>0){k[e>>2]=b;break}k[p>>2]=c;k[p+4>>2]=b;cc(d,1,15609,p)|0;k[a+72>>2]=1;d=0;r=z;return d|0}while(0);if((b|0)!=0?(b|0)==((k[w>>2]|0)+1|0):0){p=a+76|0;i[p>>0]=i[p>>0]|1}k[a+24>>2]=(k[a+72>>2]|0)==0?(k[q>>2]|0)+-12|0:0;k[a+8>>2]=16;b=k[a+60>>2]|0;if((b|0)==-1){if((n>>>0>=(k[a+28>>2]|0)>>>0?n>>>0<(k[a+36>>2]|0)>>>0:0)?m>>>0>=(k[a+32>>2]|0)>>>0:0)b=(m>>>0>=(k[a+40>>2]|0)>>>0&1)<<2&255;else b=4;q=a+76|0;i[q>>0]=i[q>>0]&-5|b}else{q=a+76|0;i[q>>0]=((k[y>>2]|0)!=(b|0)&1)<<2&255|i[q>>0]&-5}g=a+196|0;b=k[g>>2]|0;if(!b){d=1;r=z;return d|0}f=k[y>>2]|0;b=k[b+40>>2]|0;k[b+(f*40|0)>>2]=f;k[b+(f*40|0)+12>>2]=k[w>>2];c=k[s>>2]|0;if(c){k[b+(f*40|0)+4>>2]=c;k[b+(f*40|0)+8>>2]=k[s>>2];b=k[b+(f*40|0)+16>>2]|0;if(!b){x=_c(k[s>>2]|0,24)|0;k[(k[(k[g>>2]|0)+40>>2]|0)+((k[y>>2]|0)*40|0)+16>>2]=x;if(x){d=1;r=z;return d|0}cc(d,1,15717,t)|0;d=0;r=z;return d|0}b=bd(b,(k[s>>2]|0)*24|0)|0;c=(k[(k[g>>2]|0)+40>>2]|0)+((k[y>>2]|0)*40|0)+16|0;if(!b){cd(k[c>>2]|0);k[(k[(k[g>>2]|0)+40>>2]|0)+((k[y>>2]|0)*40|0)+16>>2]=0;cc(d,1,15717,v)|0;d=0;r=z;return d|0}else{k[c>>2]=b;d=1;r=z;return d|0}}if(!(k[b+(f*40|0)+16>>2]|0)){k[b+(f*40|0)+8>>2]=10;v=_c(10,24)|0;c=k[y>>2]|0;b=k[(k[g>>2]|0)+40>>2]|0;k[b+(c*40|0)+16>>2]=v;if(!v){k[b+(c*40|0)+8>>2]=0;cc(d,1,15717,u)|0;d=0;r=z;return d|0}else f=c}c=k[w>>2]|0;e=b+(f*40|0)+8|0;if(c>>>0<(k[e>>2]|0)>>>0){d=1;r=z;return d|0}c=c+1|0;k[e>>2]=c;b=bd(k[b+(f*40|0)+16>>2]|0,c*24|0)|0;c=(k[(k[g>>2]|0)+40>>2]|0)+((k[y>>2]|0)*40|0)+16|0;if(!b){cd(k[c>>2]|0);y=k[y>>2]|0;w=k[(k[g>>2]|0)+40>>2]|0;k[w+(y*40|0)+16>>2]=0;k[w+(y*40|0)+8>>2]=0;cc(d,1,15717,x)|0;d=0;r=z;return d|0}else{k[c>>2]=b;d=1;r=z;return d|0}return 0}function oe(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0;s=r;r=r+64|0;o=s+48|0;p=s+40|0;h=s+32|0;m=s+56|0;g=s+52|0;k[m>>2]=c;q=a+80|0;j=k[q>>2]|0;n=a+8|0;if((k[n>>2]|0)==16)l=(k[a+164>>2]|0)+((k[a+200>>2]|0)*5640|0)|0;else l=k[a+12>>2]|0;e=l+5636|0;f=i[e>>0]|0;if(f&1){cc(d,1,15044,s)|0;q=0;r=s;return q|0}i[e>>0]=f|1;if(c>>>0<5){cc(d,1,15108,s+8|0)|0;q=0;r=s;return q|0}Ab(b,l,1);if((k[l>>2]|0)>>>0>7){cc(d,1,15134,s+16|0)|0;q=0;r=s;return q|0}Ab(b+1|0,g,1);g=k[g>>2]|0;e=l+4|0;k[e>>2]=g;if((g|0)>4){cc(d,1,15168,s+24|0)|0;k[e>>2]=-1}e=l+8|0;Ab(b+2|0,e,2);e=k[e>>2]|0;if((e+-1|0)>>>0>65534){k[h>>2]=e;cc(d,1,15209,h)|0;q=0;r=s;return q|0}h=k[a+172>>2]|0;k[l+12>>2]=(h|0)==0?e:h;Ab(b+4|0,l+16|0,1);h=b+5|0;k[m>>2]=c+-5;g=k[j+16>>2]|0;if(g){b=k[l>>2]&1;e=k[l+5584>>2]|0;f=0;do{k[e+(f*1080|0)>>2]=b;f=f+1|0}while(f>>>0<g>>>0)}if(!(Pe(a,0,h,m,d)|0)){cc(d,1,15108,p)|0;q=0;r=s;return q|0}if(k[m>>2]|0){cc(d,1,15108,o)|0;q=0;r=s;return q|0}if((k[n>>2]|0)==16)e=(k[a+164>>2]|0)+((k[a+200>>2]|0)*5640|0)|0;else e=k[a+12>>2]|0;e=k[e+5584>>2]|0;c=e+4|0;f=k[c>>2]|0;l=f<<2;if((k[(k[q>>2]|0)+16>>2]|0)>>>0<=1){q=1;r=s;return q|0}m=e+8|0;n=e+12|0;a=e+16|0;d=e+20|0;o=e+812|0;p=e+944|0;k[e+1084>>2]=f;g=k[m>>2]|0;k[e+1088>>2]=g;b=k[n>>2]|0;k[e+1092>>2]=b;h=k[a>>2]|0;k[e+1096>>2]=h;j=k[d>>2]|0;k[e+1100>>2]=j;cj(e+1892|0,o|0,l|0)|0;cj(e+2024|0,p|0,l|0)|0;if((k[(k[q>>2]|0)+16>>2]|0)>>>0<=2){q=1;r=s;return q|0}k[e+2164>>2]=f;k[e+2168>>2]=g;k[e+2172>>2]=b;k[e+2176>>2]=h;k[e+2180>>2]=j;cj(e+2972|0,o|0,l|0)|0;cj(e+3104|0,p|0,l|0)|0;if((k[(k[q>>2]|0)+16>>2]|0)>>>0>3)f=3;else{q=1;r=s;return q|0}while(1){g=k[m>>2]|0;b=k[n>>2]|0;h=k[a>>2]|0;j=k[d>>2]|0;k[e+3244>>2]=k[c>>2];k[e+3248>>2]=g;k[e+3252>>2]=b;k[e+3256>>2]=h;k[e+3260>>2]=j;cj(e+4052|0,o|0,l|0)|0;cj(e+4184|0,p|0,l|0)|0;f=f+1|0;if(f>>>0>=(k[(k[q>>2]|0)+16>>2]|0)>>>0){e=1;break}else e=e+1080|0}r=s;return e|0}
function vg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0;u=r;r=r+272|0;m=u;s=u+136|0;t=u+8|0;if(!a){t=0;r=u;return t|0}l=a+4|0;if((k[a>>2]|0)==(b|0)?(k[l>>2]|0)==(c|0):0)e=a+8|0;else{k[a>>2]=b;k[l>>2]=c;k[s>>2]=b;k[t>>2]=c;e=a+8|0;k[e>>2]=0;f=0;h=c;i=b;j=0;while(1){q=ha(h,i)|0;i=(i+1|0)/2|0;g=j+1|0;k[s+(g<<2)>>2]=i;h=(h+1|0)/2|0;k[t+(g<<2)>>2]=h;f=f+q|0;if(q>>>0<=1)break;else j=g}k[e>>2]=f;if(!f){e=a+12|0;f=k[e>>2]|0;if(f){cd(f);k[e>>2]=0}cd(a);t=0;r=u;return t|0}g=f<<4;h=a+16|0;i=a+12|0;do if(g>>>0>(k[h>>2]|0)>>>0){f=bd(k[i>>2]|0,g)|0;if(f){k[i>>2]=f;c=k[h>>2]|0;_i(f+c|0,0,g-c|0)|0;k[h>>2]=g;c=k[l>>2]|0;b=k[a>>2]|0;break}cc(d,1,20185,m)|0;e=k[i>>2]|0;if(e){cd(e);k[i>>2]=0}cd(a);t=0;r=u;return t|0}while(0);f=k[i>>2]|0;b=f+((ha(c,b)|0)<<4)|0;if(j){q=0;c=b;do{o=k[t+(q<<2)>>2]|0;a:do if((o|0)>0){p=k[s+(q<<2)>>2]|0;if((p|0)<=0){g=o+-1|0;h=0;while(1){n=(h&1|0)!=0|(h|0)==(g|0);i=n?c:b+(p<<4)|0;c=n?c:b;h=h+1|0;if((h|0)>=(o|0)){b=i;break a}else b=i}}n=((p+2+((p|0)<2?~p:-3)|0)>>>1)+1|0;d=o+-1|0;m=0;while(1){l=p;i=c;while(1){k[f>>2]=i;g=f+16|0;h=l;l=l+-2|0;if((l|0)>-1){k[g>>2]=i;f=f+32|0}else f=g;if((h|0)<=2)break;else i=i+16|0}c=c+(n<<4)|0;l=(m&1|0)!=0|(m|0)==(d|0);g=l?c:b+(p<<4)|0;c=l?c:b;m=m+1|0;if((m|0)>=(o|0)){b=g;break}else b=g}}while(0);q=q+1|0}while((q|0)!=(j|0))}k[f>>2]=0}e=k[e>>2]|0;if(!e){t=a;r=u;return t|0}f=0;b=k[a+12>>2]|0;while(1){k[b+4>>2]=999;k[b+8>>2]=0;k[b+12>>2]=0;f=f+1|0;if((f|0)==(e|0))break;else b=b+16|0}r=u;return a|0}function wg(a){a=a|0;var b=0,c=0;if(!a)return;b=a+12|0;c=k[b>>2]|0;if(c){cd(c);k[b>>2]=0}cd(a);return}function xg(a,b,c){a=a|0;b=b|0;c=c|0;b=(k[a+12>>2]|0)+(b<<4)|0;if(!b)return;while(1){a=b+4|0;if((k[a>>2]|0)<=(c|0)){b=4;break}k[a>>2]=c;b=k[b>>2]|0;if(!b){b=4;break}}if((b|0)==4)return}function yg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=r;r=r+128|0;h=i;c=(k[b+12>>2]|0)+(c<<4)|0;if(!(k[c>>2]|0)){e=0;f=h}else{e=c;b=h;while(1){f=b+4|0;k[b>>2]=c;c=k[e>>2]|0;if(!(k[c>>2]|0)){e=0;break}else{e=c;b=f}}}while(1){g=c+8|0;b=k[g>>2]|0;if((e|0)>(b|0)){k[g>>2]=e;b=e}a:do if((b|0)<(d|0)){e=c+4|0;while(1){if((b|0)>=(k[e>>2]|0))break;Lg(a,0,1);b=b+1|0;if((b|0)>=(d|0)){c=b;break a}}c=c+12|0;if(!(k[c>>2]|0)){Lg(a,1,1);k[c>>2]=1;c=b}else c=b}else c=b;while(0);k[g>>2]=c;if((f|0)==(h|0))break;g=f+-4|0;e=c;c=k[g>>2]|0;f=g}r=i;return}function zg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=r;r=r+128|0;h=i;c=(k[b+12>>2]|0)+(c<<4)|0;if(!(k[c>>2]|0)){b=0;f=h}else{e=c;b=h;while(1){f=b+4|0;k[b>>2]=c;c=k[e>>2]|0;if(!(k[c>>2]|0)){b=0;break}else{e=c;b=f}}}while(1){g=c+8|0;e=k[g>>2]|0;if((b|0)>(e|0))k[g>>2]=b;else b=e;c=c+4|0;a:do if((b|0)<(d|0)){while(1){if((b|0)>=(k[c>>2]|0))break a;if(Mg(a,1)|0)break;b=b+1|0;if((b|0)>=(d|0))break a}k[c>>2]=b}while(0);k[g>>2]=b;if((f|0)==(h|0))break;g=f+-4|0;c=k[g>>2]|0;f=g}r=i;return (k[c>>2]|0)<(d|0)|0}function Ag(){var a=0,b=0;a=_c(1,12)|0;if(!a){a=0;return a|0}k[a+4>>2]=10;b=_c(10,4)|0;k[a+8>>2]=b;if(b){b=a;return b|0}cd(a);b=0;return b|0}function Bg(a){a=a|0;var b=0;if(!a)return;b=k[a+8>>2]|0;if(b)cd(b);cd(a);return}function Cg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;h=r;r=r+16|0;g=h;f=a+4|0;e=k[f>>2]|0;d=k[a>>2]|0;do if((e|0)==(d|0)){e=e+10|0;k[f>>2]=e;d=a+8|0;e=bd(k[d>>2]|0,e<<2)|0;if(e){k[d>>2]=e;d=k[a>>2]|0;break}cd(k[d>>2]|0);k[f>>2]=0;k[a>>2]=0;cc(c,1,20233,g)|0;a=0;r=h;return a|0}else e=k[a+8>>2]|0;while(0);k[e+(d<<2)>>2]=b;k[a>>2]=d+1;a=1;r=h;return a|0}function Dg(a){a=a|0;return k[a>>2]|0}function Eg(a){a=a|0;return k[a+8>>2]|0}function Fg(a){a=a|0;k[a>>2]=0;return}function Gg(){return Zc(20)|0}function Hg(a){a=a|0;if(!a)return;cd(a);return}function Ig(a){a=a|0;return (k[a+8>>2]|0)-(k[a>>2]|0)|0}function Jg(a,b,c){a=a|0;b=b|0;c=c|0;k[a>>2]=b;k[a+4>>2]=b+c;k[a+8>>2]=b;k[a+12>>2]=0;k[a+16>>2]=8;return}function Kg(a,b,c){a=a|0;b=b|0;c=c|0;k[a>>2]=b;k[a+4>>2]=b+c;k[a+8>>2]=b;k[a+12>>2]=0;k[a+16>>2]=0;return}function Lg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0;if(!c)return;j=a+16|0;l=a+12|0;m=a+8|0;f=a+4|0;a=k[j>>2]|0;h=c+-1|0;do{g=b>>>h&1;if(!a){e=k[l>>2]|0;a=e<<8&65280;k[l>>2]=a;a=(a|0)==65280?7:8;k[j>>2]=a;d=k[m>>2]|0;if(d>>>0<(k[f>>2]|0)>>>0){k[m>>2]=d+1;i[d>>0]=e;a=k[j>>2]|0}}a=a+-1|0;k[j>>2]=a;k[l>>2]=g<<a|k[l>>2];h=h+-1|0}while(h>>>0<c>>>0);return}function Mg(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;if(!b){b=0;return b|0}h=a+16|0;i=a+12|0;j=a+8|0;f=a+4|0;c=k[h>>2]|0;d=k[i>>2]|0;g=b+-1|0;a=0;do{if(!c){e=d<<8&65280;k[i>>2]=e;c=(e|0)==65280?7:8;k[h>>2]=c;d=k[j>>2]|0;if(d>>>0<(k[f>>2]|0)>>>0){k[j>>2]=d+1;d=l[d>>0]|0|e;k[i>>2]=d}else d=e}c=c+-1|0;k[h>>2]=c;a=((d>>>c&1)<<g)+a|0;g=g+-1|0}while(g>>>0<b>>>0);return a|0}function Ng(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;d=a+12|0;b=k[d>>2]|0;g=b<<8&65280;k[d>>2]=g;e=a+16|0;k[e>>2]=(g|0)==65280?7:8;g=a+8|0;c=k[g>>2]|0;f=a+4|0;if(c>>>0>=(k[f>>2]|0)>>>0){g=0;return g|0}k[g>>2]=c+1;i[c>>0]=b;if((k[e>>2]|0)!=7){g=1;return g|0}b=k[d>>2]|0;a=b<<8&65280;k[d>>2]=a;k[e>>2]=(a|0)==65280?7:8;a=k[g>>2]|0;if(a>>>0>=(k[f>>2]|0)>>>0){g=0;return g|0}k[g>>2]=a+1;i[a>>0]=b;g=1;return g|0}function Og(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;f=a+12|0;b=k[f>>2]|0;do if((b&255|0)==255){d=b<<8&65280;k[f>>2]=d;b=a+16|0;k[b>>2]=(d|0)==65280?7:8;e=a+8|0;c=k[e>>2]|0;if(c>>>0<(k[a+4>>2]|0)>>>0){k[e>>2]=c+1;k[f>>2]=l[c>>0]|0|d;break}else{a=0;return a|0}}else b=a+16|0;while(0);k[b>>2]=0;a=1;return a|0}function Pg(a){a=a|0;return Zg(a,1)|0}function Qg(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;D=r;r=r+32|0;B=D+16|0;C=D;i=k[a+24>>2]|0;h=(k[i+8>>2]|0)-(k[i>>2]|0)|0;g=(k[i+12>>2]|0)-(k[i+4>>2]|0)|0;A=(k[a+8>>2]|0)-(k[a>>2]|0)|0;if((b|0)==1){C=1;r=D;return C|0}f=b+-1|0;e=(f|0)==0;if(e)b=0;else{c=i;d=f;b=0;do{z=c;c=c+136|0;y=(k[z+144>>2]|0)-(k[c>>2]|0)|0;b=b>>>0<y>>>0?y:b;z=(k[z+148>>2]|0)-(k[z+140>>2]|0)|0;b=b>>>0<z>>>0?z:b;d=d+-1|0}while((d|0)!=0);b=b<<2}z=$c(b)|0;k[B>>2]=z;if(!z){C=0;r=D;return C|0}k[C>>2]=z;if(!e){s=a+32|0;t=B+8|0;u=C+8|0;v=B+4|0;w=B+12|0;x=C+4|0;y=C+12|0;do{p=k[s>>2]|0;m=i;i=i+136|0;k[t>>2]=h;k[u>>2]=g;n=k[m+144>>2]|0;o=k[i>>2]|0;d=h;h=n-o|0;b=k[m+148>>2]|0;m=m+140|0;q=k[m>>2]|0;c=g;g=b-q|0;k[v>>2]=h-d;k[w>>2]=(o|0)%2|0;q=(b|0)==(q|0);if(!q){l=h<<2;b=0;while(1){a=ha(b,A)|0;j=p+(a<<2)|0;if(d){c=j;e=z+(k[w>>2]<<2)|0;while(1){d=d+-1|0;k[e>>2]=k[c>>2];if(!d)break;else{c=c+4|0;e=e+8|0}}}c=k[v>>2]|0;if(c){d=p+((k[t>>2]|0)+a<<2)|0;e=z+(1-(k[w>>2]|0)<<2)|0;while(1){c=c+-1|0;k[e>>2]=k[d>>2];if(!c)break;else{d=d+4|0;e=e+8|0}}}_g(B);cj(j|0,z|0,l|0)|0;b=b+1|0;if((b|0)==(g|0))break;d=k[t>>2]|0}c=k[u>>2]|0;b=k[m>>2]|0}k[x>>2]=g-c;k[y>>2]=(b|0)%2|0;a:do if((n|0)!=(o|0)){b=0;while(1){if(c){d=p+(b<<2)|0;e=z+(k[y>>2]<<2)|0;while(1){c=c+-1|0;k[e>>2]=k[d>>2];if(!c)break;else{d=d+(A<<2)|0;e=e+8|0}}}c=k[x>>2]|0;if(c){d=p+((ha(k[u>>2]|0,A)|0)+b<<2)|0;e=z+(1-(k[y>>2]|0)<<2)|0;while(1){c=c+-1|0;k[e>>2]=k[d>>2];if(!c)break;else{d=d+(A<<2)|0;e=e+8|0}}}_g(C);if(!q){c=0;do{o=p+((ha(c,A)|0)+b<<2)|0;k[o>>2]=k[z+(c<<2)>>2];c=c+1|0}while((c|0)!=(g|0))}b=b+1|0;if((b|0)==(h|0))break a;c=k[u>>2]|0}}while(0);f=f+-1|0}while((f|0)!=0)}ad(z);C=1;r=D;return C|0}function Rg(a){a=a|0;if(!a){a=0;return a|0}a=(a+-1|0)>>>0<2?1:2;return a|0}function Sg(a,b){a=a|0;b=b|0;return +(+p[56+(b*80|0)+(a<<3)>>3])}function Tg(a){a=a|0;return Zg(a,2)|0}function Ug(a){a=a|0;return 0}function Vg(a,b){a=a|0;b=b|0;return +(+p[376+(b*80|0)+(a<<3)>>3])}function Wg(a,b){a=a|0;b=b|0;var c=0.0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0;i=a+4|0;j=((k[i>>2]|0)*3|0)+-2|0;if(!j)return;l=a+20|0;m=a+24|0;n=0;do{if(!n){d=0;e=0}else{e=n+-1|0;d=((e>>>0)/3|0)+1|0;e=((e>>>0)%3|0)+1|0}if((e|0)==0|(k[l>>2]|0)==0)f=0;else f=(e+-1|0)>>>0<2?1:2;if(!(k[m>>2]|0))c=1.0;else c=+(1<<f|0)/+p[376+(e*80|0)+((k[i>>2]|0)+~d<<3)>>3];h=~~+V(+(c*8192.0));g=f+b|0;if((h|0)>1){d=h;e=0;while(1){d=d>>1;if((d|0)<=1)break;else e=e+1|0}f=h;d=0;do{f=f>>1;d=d+1|0}while((f|0)>1);e=e+-12|0}else{e=-13;d=0}f=11-d|0;k[a+28+(n<<3)+4>>2]=((f|0)<0?h>>0-f:h<<f)&2047;k[a+28+(n<<3)>>2]=g-e;n=n+1|0}while((n|0)!=(j|0));return}function Xg(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0;T=r;r=r+32|0;Q=T+16|0;R=T;l=k[a+24>>2]|0;m=k[l+8>>2]|0;n=k[l>>2]|0;i=k[l+12>>2]|0;j=k[l+4>>2]|0;P=a+8|0;g=k[P>>2]|0;h=k[a>>2]|0;O=g-h|0;f=b+-1|0;e=(f|0)==0;if(e)b=80;else{c=l;d=f;b=0;do{N=c;c=c+136|0;M=(k[N+144>>2]|0)-(k[c>>2]|0)|0;b=b>>>0<M>>>0?M:b;N=(k[N+148>>2]|0)-(k[N+140>>2]|0)|0;b=b>>>0<N>>>0?N:b;d=d+-1|0}while((d|0)!=0);b=(b<<4)+80|0}N=$c(b)|0;k[Q>>2]=N;if(!N){S=0;r=T;return S|0}k[R>>2]=N;a:do if(!e){y=a+32|0;z=a+12|0;A=a+4|0;B=Q+8|0;C=R+8|0;D=Q+4|0;E=Q+12|0;F=R+4|0;G=R+12|0;H=O<<1;I=O<<2;J=O*3|0;L=h<<2;M=g<<2;K=L-M|0;L=M-L|0;M=g-h<<2;b=f;c=N;f=g;d=h;q=i-j|0;e=l;g=m-n|0;while(1){s=k[y>>2]|0;d=ha((k[z>>2]|0)-(k[A>>2]|0)|0,f-d|0)|0;k[B>>2]=g;k[C>>2]=q;w=e+136|0;o=k[e+144>>2]|0;p=k[w>>2]|0;x=o-p|0;u=k[e+148>>2]|0;m=e+140|0;t=k[m>>2]|0;v=u-t|0;k[D>>2]=x-g;k[E>>2]=(p|0)%2|0;if((v|0)>3){f=(x|0)>0;g=(u+-4-t|0)>>>2;l=ha(K,g)|0;g=s+(L+(ha(M,g)|0)<<2)|0;h=s;i=d;j=v;while(1){ah(Q,h,O,i);bh(Q);if(f){e=x;do{n=e;e=e+-1|0;k[h+(e<<2)>>2]=k[N+(e<<4)>>2];k[h+(e+O<<2)>>2]=k[N+(e<<4)+4>>2];k[h+(e+H<<2)>>2]=k[N+(e<<4)+8>>2];k[h+(e+J<<2)>>2]=k[N+(e<<4)+12>>2]}while((n|0)>1)}j=j+-4|0;if((j|0)<=3)break;else{h=h+(I<<2)|0;i=i-I|0}}d=K+d+l|0}else g=s;f=v&3;b:do if(!f)S=21;else{ah(Q,g,O,d);bh(Q);if((x|0)>0)d=x;else{i=v-q|0;k[F>>2]=i;f=(k[m>>2]|0)%2|0;k[G>>2]=f;j=q;h=s;break}while(1){e=d;d=d+-1|0;switch(f|0){case 3:{k[g+(d+H<<2)>>2]=k[N+(d<<4)+8>>2];S=18;break}case 2:{S=18;break}case 1:{S=19;break}default:{}}if((S|0)==18){k[g+(d+O<<2)>>2]=k[N+(d<<4)+4>>2];S=19}if((S|0)==19){S=0;k[g+(d<<2)>>2]=k[N+(d<<4)>>2]}if((e|0)<=1){S=21;break b}}}while(0);if((S|0)==21){S=0;i=v-q|0;k[F>>2]=i;f=(k[m>>2]|0)%2|0;k[G>>2]=f;if((x|0)>3){n=(u|0)==(t|0);o=o+-4-p|0;m=k[C>>2]|0;j=(m|0)>0;h=1-f|0;l=(i|0)>0;e=s;g=x;while(1){if(j){d=0;do{q=c+((d<<1)+f<<4)|0;p=e+((ha(d,O)|0)<<2)|0;k[q>>2]=k[p>>2];k[q+4>>2]=k[p+4>>2];k[q+8>>2]=k[p+8>>2];k[q+12>>2]=k[p+12>>2];d=d+1|0}while((d|0)!=(m|0))}if(l){d=0;do{q=c+(h+(d<<1)<<4)|0;p=e+((ha(d+m|0,O)|0)<<2)|0;k[q>>2]=k[p>>2];k[q+4>>2]=k[p+4>>2];k[q+8>>2]=k[p+8>>2];k[q+12>>2]=k[p+12>>2];d=d+1|0}while((d|0)!=(i|0))}bh(R);if(!n){c=k[R>>2]|0;d=0;do{q=e+((ha(d,O)|0)<<2)|0;p=c+(d<<4)|0;k[q>>2]=k[p>>2];k[q+4>>2]=k[p+4>>2];k[q+8>>2]=k[p+8>>2];k[q+12>>2]=k[p+12>>2];d=d+1|0}while((d|0)!=(v|0))}g=g+-4|0;if((g|0)<=3)break;else e=e+16|0}j=m;h=s+((o+4&-4)<<2)|0}else{j=q;h=s}}g=x&3;if(g){c=k[R>>2]|0;if((j|0)>0){d=g<<2;e=0;do{cj(c+((e<<1)+f<<4)|0,h+((ha(e,O)|0)<<2)|0,d|0)|0;e=e+1|0}while((e|0)!=(j|0))}d=1-f|0;if((i|0)>0){e=g<<2;f=0;do{cj(c+(d+(f<<1)<<4)|0,h+((ha(f+j|0,O)|0)<<2)|0,e|0)|0;f=f+1|0}while((f|0)!=(i|0))}bh(R);if((u|0)!=(t|0)){d=g<<2;e=0;do{cj(h+((ha(e,O)|0)<<2)|0,c+(e<<4)|0,d|0)|0;e=e+1|0}while((e|0)!=(v|0))}}b=b+-1|0;if(!b)break a;f=k[P>>2]|0;d=k[a>>2]|0;q=v;e=w;g=x}}while(0);ad(N);S=1;r=T;return S|0}function Yg(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;if(!d){d=(b|0)>0;if(!(d|(c|0)>1))return;if(d){d=a+((c<<1)+-2<<2)|0;e=0;do{i=e;e=e+1|0;j=a+((i<<1|1)<<2)|0;k[j>>2]=(k[j>>2]|0)-((k[((e|0)<(c|0)?a+(e<<1<<2)|0:d)>>2]|0)+(k[((i|0)<(c|0)?a+(i<<1<<2)|0:d)>>2]|0)>>1)}while((e|0)!=(b|0))}if((c|0)<=0)return;e=a+4|0;f=(b<<1)+-1|0;g=0;do{if((g|0)<1)d=e;else d=a+((((g|0)>(b|0)?b:g)<<1)+-1<<2)|0;j=a+(g<<1<<2)|0;k[j>>2]=((k[d>>2]|0)+2+(k[a+(((g|0)<(b|0)?g<<1|1:f)<<2)>>2]|0)>>2)+(k[j>>2]|0);g=g+1|0}while((g|0)!=(c|0));return}if((b|0)==1&(c|0)==0){k[a>>2]=k[a>>2]<<1;return}if((b|0)>0){e=a+4|0;f=(c<<1)+-1|0;g=a+(f<<2)|0;j=0;do{h=j<<1;i=k[a+(((j|0)<(c|0)?h|1:f)<<2)>>2]|0;if((j|0)>=1)if((j|0)>(c|0))d=g;else d=a+(h+-1<<2)|0;else d=e;h=a+(h<<2)|0;k[h>>2]=(k[h>>2]|0)-((k[d>>2]|0)+i>>1);j=j+1|0}while((j|0)!=(b|0))}if((c|0)<=0)return;d=a+((b<<1)+-2<<2)|0;e=0;do{i=e;e=e+1|0;j=a+((i<<1|1)<<2)|0;k[j>>2]=((k[((i|0)<(b|0)?a+(i<<1<<2)|0:d)>>2]|0)+2+(k[((e|0)<(b|0)?a+(e<<1<<2)|0:d)>>2]|0)>>2)+(k[j>>2]|0)}while((e|0)!=(c|0));return}function Zg(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;w=(k[a+8>>2]|0)-(k[a>>2]|0)|0;f=k[a+16>>2]|0;h=f+-1|0;x=k[a+32>>2]|0;g=k[a+24>>2]|0;e=(h|0)==0;if(e)a=0;else{c=g;d=h;a=0;do{v=c;c=c+136|0;u=(k[v+144>>2]|0)-(k[c>>2]|0)|0;a=a>>>0<u>>>0?u:a;v=(k[v+148>>2]|0)-(k[v+140>>2]|0)|0;a=a>>>0<v>>>0?v:a;d=d+-1|0}while((d|0)!=0);a=a<<2}v=Zc(a)|0;if(!((a|0)==0|(v|0)!=0)){b=0;return b|0}if(!e){t=f+-2|0;u=t;a=g+(h*136|0)|0;t=g+(t*136|0)|0;while(1){q=k[a>>2]|0;s=(k[a+8>>2]|0)-q|0;m=k[a+4>>2]|0;o=(k[a+12>>2]|0)-m|0;p=(k[t+8>>2]|0)-(k[t>>2]|0)|0;a=k[t+12>>2]|0;c=k[t+4>>2]|0;l=a-c|0;q=q&1;m=m&1;n=o-l|0;r=(s|0)>0;a:do if(r){e=(a|0)==(c|0);h=(o|0)==(l|0);i=v+((m^1)<<2)|0;j=ha(l,w)|0;g=v+(m<<2)|0;if((o|0)>0){f=0;while(1){c=x+(f<<2)|0;a=0;do{d=x+((ha(a,w)|0)+f<<2)|0;k[v+(a<<2)>>2]=k[d>>2];a=a+1|0}while((a|0)!=(o|0));kb[b&3](v,n,l,m);if(!e){d=l;a=g;while(1){d=d+-1|0;k[c>>2]=k[a>>2];if(!d)break;else{c=c+(w<<2)|0;a=a+8|0}}}if(!h){a=n;c=x+(f+j<<2)|0;d=i;while(1){a=a+-1|0;k[c>>2]=k[d>>2];if(!a)break;else{c=c+(w<<2)|0;d=d+8|0}}}f=f+1|0;if((f|0)==(s|0))break a}}if(e){c=0;while(1){kb[b&3](v,n,l,m);if(!h){a=n;d=x+(c+j<<2)|0;e=i;while(1){a=a+-1|0;k[d>>2]=k[e>>2];if(!a)break;else{d=d+(w<<2)|0;e=e+8|0}}}c=c+1|0;if((c|0)==(s|0))break a}}else e=0;do{kb[b&3](v,n,l,m);a=l;c=x+(e<<2)|0;d=g;while(1){a=a+-1|0;k[c>>2]=k[d>>2];if(!a)break;else{c=c+(w<<2)|0;d=d+8|0}}if(!h){a=n;c=x+(e+j<<2)|0;d=i;while(1){a=a+-1|0;k[c>>2]=k[d>>2];if(!a)break;else{c=c+(w<<2)|0;d=d+8|0}}}e=e+1|0}while((e|0)!=(s|0))}while(0);f=s-p|0;if((o|0)>0){g=(p|0)>0;h=v+(q<<2)|0;i=(f|0)>0;j=v+((q^1)<<2)|0;l=0;do{e=ha(l,w)|0;c=x+(e<<2)|0;if(r){a=0;do{k[v+(a<<2)>>2]=k[x+(a+e<<2)>>2];a=a+1|0}while((a|0)!=(s|0))}kb[b&3](v,f,p,q);if(g){d=0;a=h;while(1){k[c>>2]=k[a>>2];d=d+1|0;if((d|0)==(p|0))break;else{c=c+4|0;a=a+8|0}}}if(i){d=0;a=x+(e+p<<2)|0;c=j;while(1){k[a>>2]=k[c>>2];d=d+1|0;if((d|0)==(f|0))break;else{a=a+4|0;c=c+8|0}}}l=l+1|0}while((l|0)!=(o|0))}if(!u)break;else{a=t;u=u+-1|0;t=t+-136|0}}}cd(v);b=1;return b|0}function _g(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;h=k[a>>2]|0;i=k[a+4>>2]|0;j=k[a+8>>2]|0;if(!(k[a+12>>2]|0)){d=(i|0)>0;if(!(d|(j|0)>1))return;if((j|0)>0){b=h+4|0;c=(i<<1)+-1|0;e=0;do{if((e|0)<1)a=b;else a=h+((((e|0)>(i|0)?i:e)<<1)+-1<<2)|0;f=e<<1;g=h+(f<<2)|0;k[g>>2]=(k[g>>2]|0)-((k[a>>2]|0)+2+(k[h+(((e|0)<(i|0)?f|1:c)<<2)>>2]|0)>>2);e=e+1|0}while((e|0)!=(j|0))}if(!d)return;a=h+((j<<1)+-2<<2)|0;b=0;do{f=b<<1;e=b;b=b+1|0;g=h+((f|1)<<2)|0;k[g>>2]=((k[((b|0)<(j|0)?h+(b<<1<<2)|0:a)>>2]|0)+(k[((e|0)<(j|0)?h+(f<<2)|0:a)>>2]|0)>>1)+(k[g>>2]|0)}while((b|0)!=(i|0));return}if((i|0)==1&(j|0)==0){k[h>>2]=(k[h>>2]|0)/2|0;return}if((j|0)>0){a=h+((i<<1)+-2<<2)|0;b=0;do{f=b<<1;e=b;b=b+1|0;g=h+((f|1)<<2)|0;k[g>>2]=(k[g>>2]|0)-((k[((e|0)<(i|0)?h+(f<<2)|0:a)>>2]|0)+2+(k[((b|0)<(i|0)?h+(b<<1<<2)|0:a)>>2]|0)>>2)}while((b|0)!=(j|0))}if((i|0)<=0)return;b=h+4|0;c=(j<<1)+-1|0;d=h+(c<<2)|0;g=0;do{e=g<<1;f=k[h+(((g|0)<(j|0)?e|1:c)<<2)>>2]|0;if((g|0)>=1)if((g|0)>(j|0))a=d;else a=h+(e+-1<<2)|0;else a=b;e=h+(e<<2)|0;k[e>>2]=((k[a>>2]|0)+f>>1)+(k[e>>2]|0);g=g+1|0}while((g|0)!=(i|0));return}function $g(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0;if(!d){i=(b|0)>0;if(!(i|(c|0)>1))return;if(i){d=a+((c<<1)+-2<<2)|0;e=0;do{m=e;e=e+1|0;l=(k[((e|0)<(c|0)?a+(e<<1<<2)|0:d)>>2]|0)+(k[((m|0)<(c|0)?a+(m<<1<<2)|0:d)>>2]|0)|0;l=hj(l|0,((l|0)<0)<<31>>31|0,12993,0)|0;l=aj(l|0,L|0,4096,0)|0;l=bj(l|0,L|0,13)|0;m=a+((m<<1|1)<<2)|0;k[m>>2]=(k[m>>2]|0)-l}while((e|0)!=(b|0))}h=(c|0)>0;if(h){e=a+4|0;f=(b<<1)+-1|0;g=0;do{if((g|0)<1)d=e;else d=a+((((g|0)>(b|0)?b:g)<<1)+-1<<2)|0;l=(k[a+(((g|0)<(b|0)?g<<1|1:f)<<2)>>2]|0)+(k[d>>2]|0)|0;l=hj(l|0,((l|0)<0)<<31>>31|0,434,0)|0;l=aj(l|0,L|0,4096,0)|0;l=bj(l|0,L|0,13)|0;m=a+(g<<1<<2)|0;k[m>>2]=(k[m>>2]|0)-l;g=g+1|0}while((g|0)!=(c|0))}if(i){d=a+((c<<1)+-2<<2)|0;e=0;do{m=e;e=e+1|0;l=(k[((e|0)<(c|0)?a+(e<<1<<2)|0:d)>>2]|0)+(k[((m|0)<(c|0)?a+(m<<1<<2)|0:d)>>2]|0)|0;l=hj(l|0,((l|0)<0)<<31>>31|0,7233,0)|0;l=aj(l|0,L|0,4096,0)|0;l=bj(l|0,L|0,13)|0;m=a+((m<<1|1)<<2)|0;k[m>>2]=l+(k[m>>2]|0)}while((e|0)!=(b|0))}if(h){e=a+4|0;f=(b<<1)+-1|0;g=0;do{if((g|0)<1)d=e;else d=a+((((g|0)>(b|0)?b:g)<<1)+-1<<2)|0;l=(k[a+(((g|0)<(b|0)?g<<1|1:f)<<2)>>2]|0)+(k[d>>2]|0)|0;l=hj(l|0,((l|0)<0)<<31>>31|0,3633,0)|0;l=aj(l|0,L|0,4096,0)|0;l=bj(l|0,L|0,13)|0;m=a+(g<<1<<2)|0;k[m>>2]=l+(k[m>>2]|0);g=g+1|0}while((g|0)!=(c|0))}if(i){d=0;do{m=a+((d<<1|1)<<2)|0;l=k[m>>2]|0;l=hj(l|0,((l|0)<0)<<31>>31|0,5038,0)|0;l=aj(l|0,L|0,4096,0)|0;l=bj(l|0,L|0,13)|0;k[m>>2]=l;d=d+1|0}while((d|0)!=(b|0))}if(h)d=0;else return;do{b=a+(d<<1<<2)|0;m=k[b>>2]|0;m=hj(m|0,((m|0)<0)<<31>>31|0,6659,0)|0;m=aj(m|0,L|0,4096,0)|0;m=bj(m|0,L|0,13)|0;k[b>>2]=m;d=d+1|0}while((d|0)!=(c|0));return}m=(c|0)>0;if(!((b|0)>1|m))return;l=(b|0)>0;if(l){e=a+4|0;f=(c<<1)+-1|0;g=a+(f<<2)|0;j=0;do{h=j<<1;i=k[a+(((j|0)<(c|0)?h|1:f)<<2)>>2]|0;if((j|0)>=1)if((j|0)>(c|0))d=g;else d=a+(h+-1<<2)|0;else d=e;d=(k[d>>2]|0)+i|0;d=hj(d|0,((d|0)<0)<<31>>31|0,12993,0)|0;d=aj(d|0,L|0,4096,0)|0;d=bj(d|0,L|0,13)|0;i=a+(h<<2)|0;k[i>>2]=(k[i>>2]|0)-d;j=j+1|0}while((j|0)!=(b|0))}if(m){d=a+((b<<1)+-2<<2)|0;e=0;do{j=e;e=e+1|0;i=(k[((e|0)<(b|0)?a+(e<<1<<2)|0:d)>>2]|0)+(k[((j|0)<(b|0)?a+(j<<1<<2)|0:d)>>2]|0)|0;i=hj(i|0,((i|0)<0)<<31>>31|0,434,0)|0;i=aj(i|0,L|0,4096,0)|0;i=bj(i|0,L|0,13)|0;j=a+((j<<1|1)<<2)|0;k[j>>2]=(k[j>>2]|0)-i}while((e|0)!=(c|0))}if(l){e=a+4|0;f=(c<<1)+-1|0;g=a+(f<<2)|0;j=0;do{h=j<<1;i=k[a+(((j|0)<(c|0)?h|1:f)<<2)>>2]|0;if((j|0)>=1)if((j|0)>(c|0))d=g;else d=a+(h+-1<<2)|0;else d=e;d=(k[d>>2]|0)+i|0;d=hj(d|0,((d|0)<0)<<31>>31|0,7233,0)|0;d=aj(d|0,L|0,4096,0)|0;d=bj(d|0,L|0,13)|0;i=a+(h<<2)|0;k[i>>2]=d+(k[i>>2]|0);j=j+1|0}while((j|0)!=(b|0))}if(m){d=a+((b<<1)+-2<<2)|0;e=0;do{j=e;e=e+1|0;i=(k[((e|0)<(b|0)?a+(e<<1<<2)|0:d)>>2]|0)+(k[((j|0)<(b|0)?a+(j<<1<<2)|0:d)>>2]|0)|0;i=hj(i|0,((i|0)<0)<<31>>31|0,3633,0)|0;i=aj(i|0,L|0,4096,0)|0;i=bj(i|0,L|0,13)|0;j=a+((j<<1|1)<<2)|0;k[j>>2]=i+(k[j>>2]|0)}while((e|0)!=(c|0))}if(l){d=0;do{l=a+(d<<1<<2)|0;j=k[l>>2]|0;j=hj(j|0,((j|0)<0)<<31>>31|0,5038,0)|0;j=aj(j|0,L|0,4096,0)|0;j=bj(j|0,L|0,13)|0;k[l>>2]=j;d=d+1|0}while((d|0)!=(b|0))}if(m)d=0;else return;do{b=a+((d<<1|1)<<2)|0;m=k[b>>2]|0;m=hj(m|0,((m|0)<0)<<31>>31|0,6659,0)|0;m=aj(m|0,L|0,4096,0)|0;m=bj(m|0,L|0,13)|0;k[b>>2]=m;d=d+1|0}while((d|0)!=(c|0));return}function ah(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;m=k[a>>2]|0;h=k[a+12>>2]|0;q=k[a+8>>2]|0;n=c*3|0;l=1-h|0;j=a+4|0;i=q;a=0;while(1){g=m+(h<<4)|0;if(((i+n|0)<(d|0)?(b&15|0)==0:0)?((g|c)&15|0)==0:0){if((i|0)>0){e=0;do{g=e<<3;k[m+(h<<4)+(g<<2)>>2]=k[b+(e<<2)>>2];f=e+c|0;k[m+(h<<4)+((g|1)<<2)>>2]=k[b+(f<<2)>>2];f=f+c|0;k[m+(h<<4)+((g|2)<<2)>>2]=k[b+(f<<2)>>2];k[m+(h<<4)+((g|3)<<2)>>2]=k[b+(f+c<<2)>>2];e=e+1|0}while((e|0)!=(i|0))}}else r=3;if((r|0)==3?(r=0,(i|0)>0):0){g=0;do{e=g<<3;k[m+(h<<4)+(e<<2)>>2]=k[b+(g<<2)>>2];f=g+c|0;if(((f|0)<(d|0)?(k[m+(h<<4)+((e|1)<<2)>>2]=k[b+(f<<2)>>2],o=f+c|0,(o|0)<(d|0)):0)?(k[m+(h<<4)+((e|2)<<2)>>2]=k[b+(o<<2)>>2],p=o+c|0,(p|0)<(d|0)):0)k[m+(h<<4)+((e|3)<<2)>>2]=k[b+(p<<2)>>2];g=g+1|0}while((g|0)!=(i|0))}a=a+1|0;if((a|0)==2)break;else{b=b+(q<<2)|0;d=d-q|0;h=l;i=k[j>>2]|0}}return}function bh(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0.0,j=0.0,l=0,m=0.0,n=0,p=0;do if(!(k[a+12>>2]|0)){c=k[a+8>>2]|0;if((k[a+4>>2]|0)>0){b=k[a>>2]|0;if((c|0)>0){g=0;e=1;h=9;break}else{g=0;f=1;break}}if((c|0)>1){d=0;e=1;h=7}else return}else{c=k[a+8>>2]|0;if((c|0)<=0)if((k[a+4>>2]|0)>1){b=k[a>>2]|0;g=1;f=0;break}else return;else{d=1;e=0;h=7}}while(0);if((h|0)==7){b=k[a>>2]|0;g=d;h=9}if((h|0)==9){d=0;do{h=d<<3;n=b+(g<<4)+(h<<2)|0;l=b+(g<<4)+((h|1)<<2)|0;m=+o[l>>2];f=b+(g<<4)+((h|2)<<2)|0;j=+o[f>>2];h=b+(g<<4)+((h|3)<<2)|0;i=+o[h>>2];o[n>>2]=+o[n>>2]*1.2301740646362305;o[l>>2]=m*1.2301740646362305;o[f>>2]=j*1.2301740646362305;o[h>>2]=i*1.2301740646362305;d=d+1|0}while((d|0)!=(c|0));f=e}d=k[a+4>>2]|0;if((d|0)>0){e=0;do{n=e<<3;h=b+(f<<4)+(n<<2)|0;a=b+(f<<4)+((n|1)<<2)|0;i=+o[a>>2];l=b+(f<<4)+((n|2)<<2)|0;j=+o[l>>2];n=b+(f<<4)+((n|3)<<2)|0;m=+o[n>>2];o[h>>2]=+o[h>>2]*1.625732421875;o[a>>2]=i*1.625732421875;o[l>>2]=j*1.625732421875;o[n>>2]=m*1.625732421875;e=e+1|0}while((e|0)!=(d|0))}p=b+(f<<4)|0;e=b+(g+1<<4)|0;h=d-g|0;h=(c|0)<(h|0)?c:h;ch(p,e,c,h,-.4435068666934967);a=b+(g<<4)|0;l=b+(f+1<<4)|0;n=c-f|0;n=(d|0)<(n|0)?d:n;ch(a,l,d,n,-.8829110860824585);ch(p,e,c,h,.05298011749982834);ch(a,l,d,n,1.5861343145370483);return}function ch(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;var f=0.0,g=0.0,h=0.0,i=0.0,j=0,k=0,l=0,m=0,n=0.0,p=0.0,q=0,r=0.0,s=0.0,t=0,u=0.0,v=0.0,w=0,x=0.0;if((d|0)>0){l=d<<1;k=l+-2|0;g=+o[a>>2];h=+o[a+4>>2];i=+o[a+8>>2];f=+o[a+12>>2];a=b;j=0;while(1){w=a+-16|0;t=a+-12|0;v=+o[t>>2];q=a+-8|0;s=+o[q>>2];m=a+-4|0;p=+o[m>>2];x=g;g=+o[a>>2];u=h;h=+o[a+4>>2];r=i;i=+o[a+8>>2];n=f;f=+o[a+12>>2];o[w>>2]=+o[w>>2]+(x+g)*e;o[t>>2]=v+(u+h)*e;o[q>>2]=s+(r+i)*e;o[m>>2]=p+(n+f)*e;j=j+1|0;if((j|0)==(d|0))break;else a=a+32|0}a=b+(k<<4)|0;b=b+(l<<4)|0}if((d|0)>=(c|0))return;f=e+e;g=f*+o[a>>2];h=f*+o[a+4>>2];i=f*+o[a+8>>2];f=f*+o[a+12>>2];while(1){m=b+-16|0;q=b+-12|0;u=+o[q>>2];t=b+-8|0;v=+o[t>>2];w=b+-4|0;x=+o[w>>2];o[m>>2]=g+ +o[m>>2];o[q>>2]=h+u;o[t>>2]=i+v;o[w>>2]=f+x;d=d+1|0;if((d|0)==(c|0))break;else b=b+32|0}return}function dh(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0.0,g=0,h=0,i=0,j=0,l=0,m=0,n=0.0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;x=c<<2;y=Zc(c<<4)|0;if(!y){a=0;return a|0}z=y+x|0;_i(y|0,0,x|0)|0;v=c+-1|0;u=(c|0)==0;if(!u){d=0;e=y;while(1){k[e>>2]=d;d=d+1|0;if((d|0)==(c|0))break;else e=e+4|0}}a:do if(v){q=v;h=0;d=0;r=a;s=1;t=y;while(1){i=r+(h<<2)|0;if(h>>>0<c>>>0){g=h;e=i;f=0.0}else break;while(1){n=+o[e>>2];n=n>0.0?n:-n;w=n>f;d=w?g:d;f=w?n:f;g=g+1|0;if((g|0)==(c|0))break;else e=e+(c<<2)|0}if(f==0.0)break;if((d|0)!=(h|0)){w=d-h|0;p=t+(w<<2)|0;m=k[t>>2]|0;k[t>>2]=k[p>>2];k[p>>2]=m;w=r+((ha(w,c)|0)<<2)|0;cj(z|0,w|0,x|0)|0;cj(w|0,r|0,x|0)|0;cj(r|0,z|0,x|0)|0}e=h;p=h+1|0;n=+o[i>>2];if(s>>>0<c>>>0){j=r+(p<<2)|0;m=p+q|0;l=s;g=r+(e+c<<2)|0;while(1){f=+o[g>>2]/n;o[g>>2]=f;e=s;h=g;i=j;while(1){h=h+4|0;o[h>>2]=+o[h>>2]-f*+o[i>>2];e=e+1|0;if((e|0)==(c|0))break;else i=i+4|0}l=l+1|0;if((l|0)==(c|0))break;else g=g+(m<<2)|0}}if(p>>>0<v>>>0){q=q+-1|0;h=p;r=r+(c<<2)|0;s=s+1|0;t=t+4|0}else break a}cd(y);a=0;return a|0}while(0);d=c<<1;w=z+(d<<2)|0;if(!u){u=z+(v+c<<2)|0;q=z+(d+v<<2)|0;r=a+((ha(c,c)|0)+-1<<2)|0;s=~c;t=0;p=b;while(1){_i(z|0,0,x|0)|0;o[z+(t<<2)>>2]=1.0;h=0;i=1;j=y;l=w;m=a;while(1){if(!h)f=0.0;else{d=1;e=w;g=m;f=0.0;while(1){f=f+ +o[g>>2]*+o[e>>2];d=d+1|0;if((d|0)==(i|0))break;else{e=e+4|0;g=g+4|0}}}o[l>>2]=+o[z+(k[j>>2]<<2)>>2]-f;h=h+1|0;if((h|0)==(c|0)){h=c;i=u;j=w;l=q;m=r;break}else{i=i+1|0;j=j+4|0;l=l+4|0;m=m+(c<<2)|0}}while(1){d=h;h=h+-1|0;n=+o[m>>2];if(d>>>0<c>>>0){e=j;g=m;f=0.0;while(1){g=g+4|0;f=f+ +o[g>>2]*+o[e>>2];d=d+1|0;if((d|0)==(c|0))break;else e=e+4|0}}else f=0.0;j=j+-4|0;o[i>>2]=(+o[l>>2]-f)/n;if(!h){d=0;e=p;break}else{i=i+-4|0;l=l+-4|0;m=m+(s<<2)|0}}while(1){k[e>>2]=k[z+(d+c<<2)>>2];d=d+1|0;if((d|0)==(c|0))break;else e=e+(c<<2)|0}t=t+1|0;if((t|0)==(c|0))break;else p=p+4|0}}cd(y);a=1;return a|0}function eh(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;f=_c(1,44)|0;if(!f){f=0;return f|0}g=rh()|0;k[f>>2]=g;if(!g){sh(0);k[f>>2]=0;g=f+4|0;Ih(k[g>>2]|0);k[g>>2]=0;if((k[f+40>>2]|0)==0?(c=f+8|0,b=k[c>>2]|0,(b|0)!=0):0){ad(b);k[c>>2]=0}b=f+12|0;c=k[b>>2]|0;if(c){ad(c);k[b>>2]=0}cd(f);g=0;return g|0}g=Hh()|0;b=f+4|0;k[b>>2]=g;if(g){k[f+40>>2]=a;g=f;return g|0}sh(k[f>>2]|0);k[f>>2]=0;Ih(k[b>>2]|0);k[b>>2]=0;if((k[f+40>>2]|0)==0?(d=f+8|0,e=k[d>>2]|0,(e|0)!=0):0){ad(e);k[d>>2]=0}b=f+12|0;c=k[b>>2]|0;if(c){ad(c);k[b>>2]=0}cd(f);g=0;return g|0}function fh(a){a=a|0;var b=0,c=0,d=0;if(!a)return;sh(k[a>>2]|0);k[a>>2]=0;d=a+4|0;Ih(k[d>>2]|0);k[d>>2]=0;if((k[a+40>>2]|0)==0?(b=a+8|0,c=k[b>>2]|0,(c|0)!=0):0){ad(c);k[b>>2]=0}b=a+12|0;c=k[b>>2]|0;if(c){ad(c);k[b>>2]=0}cd(a);return}function gh(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,n=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0;ya=(k[b+8>>2]|0)-(k[b>>2]|0)|0;za=b+20|0;d=k[za>>2]|0;if(!d){a=1;return a|0}Aa=b+24|0;Ba=c+808|0;Ca=c+16|0;ta=a+4|0;va=a+8|0;wa=a+16|0;xa=a+20|0;sa=c+20|0;pa=b+32|0;qa=a+32|0;ra=a+12|0;c=d;oa=0;a:while(1){ma=k[Aa>>2]|0;na=ma+(oa*136|0)+24|0;b=k[na>>2]|0;if(b){ja=ma+(oa*136|0)+16|0;ka=ma+(oa*136|0)+20|0;la=oa+-1|0;c=k[ka>>2]|0;d=k[ja>>2]|0;ia=0;do{if(ha(c,d)|0){ca=ma+(oa*136|0)+28+(ia*36|0)+20|0;da=ma+(oa*136|0)+28+(ia*36|0)+16|0;ea=ma+(oa*136|0)+28+(ia*36|0)|0;fa=ma+(oa*136|0)+28+(ia*36|0)+4|0;ga=ma+(oa*136|0)+28+(ia*36|0)+32|0;ba=0;do{b=k[ca>>2]|0;$=b+(ba*40|0)+16|0;aa=b+(ba*40|0)+20|0;if(ha(k[aa>>2]|0,k[$>>2]|0)|0){Z=b+(ba*40|0)+24|0;_=0;do{c=k[Z>>2]|0;S=k[da>>2]|0;e=k[Ba>>2]|0;b=k[Ca>>2]|0;T=k[ta>>2]|0;U=k[a>>2]|0;V=c+(_*56|0)+8|0;Y=c+(_*56|0)+12|0;if(!(ih(a,(k[c+(_*56|0)+16>>2]|0)-(k[V>>2]|0)|0,(k[c+(_*56|0)+20>>2]|0)-(k[Y>>2]|0)|0)|0)){c=0;G=201;break a}W=c+(_*56|0)+24|0;f=k[W>>2]|0;Ah(U);Bh(U,18,0,46);Bh(U,17,0,3);Bh(U,0,0,4);X=c+(_*56|0)+48|0;d=k[X>>2]|0;if(d){N=c+(_*56|0)+4|0;O=(b&1|0)!=0;P=(b&2|0)==0;Q=(b&8|0)==0;R=S<<8;M=(b&32|0)==0;b=f+e|0;c=2;L=0;do{f=k[N>>2]|0;K=O&(c>>>0<2?(b|0)<=((k[W>>2]|0)+-4|0):0);e=k[f+(L<<5)>>2]|0;if(e){d=(k[e>>2]|0)+(k[f+(L<<5)+4>>2]|0)|0;e=k[f+(L<<5)+16>>2]|0;if(!K){if(!(Fh(U,d,e)|0)){c=0;G=201;break a}}else Jh(T,d,e);I=f+(L<<5)+12|0;b:do if(k[I>>2]|0){J=P|K;H=0;while(1){c:do switch(c|0){case 0:{if(K){w=1<<b;w=w>>1|w;e=k[xa>>2]|0;if(!e)break c;v=0-w|0;d=k[wa>>2]|0;u=0;while(1){t=u;u=u+4|0;if(!d)d=0;else{q=(t|0)==-4;r=t|3;s=0;do{d:do if(!q)if(Q){n=t;do{if(n>>>0>=(k[xa>>2]|0)>>>0)break d;h=n;n=n+1|0;d=(ha(k[qa>>2]|0,n)|0)+s|0;e=d+1|0;f=k[ra>>2]|0;g=f+(e<<1)|0;h=(ha(k[wa>>2]|0,h)|0)+s|0;h=(k[va>>2]|0)+(h<<2)|0;i=k[ta>>2]|0;G=j[g>>1]|0;if((G&255|0)!=0&(G&20480|0)==0){if(Kh(i)|0){D=Kh(i)|0;k[h>>2]=(D|0)!=0?v:w;F=k[qa>>2]|0;G=f+(e-F<<1)|0;E=f+(F+e<<1)|0;C=f+(e+~F<<1)|0;j[C>>1]=m[C>>1]|2;j[G>>1]=j[G>>1]|j[3436+(D<<1)>>1];G=d+2|0;C=f+(G-F<<1)|0;j[C>>1]=m[C>>1]|4;C=f+(d<<1)|0;j[C>>1]=j[C>>1]|j[3436+(D+2<<1)>>1];j[g>>1]=m[g>>1]|4096;C=f+(G<<1)|0;j[C>>1]=j[C>>1]|j[3436+(D+4<<1)>>1];C=f+(F+d<<1)|0;j[C>>1]=m[C>>1]|1;j[E>>1]=j[E>>1]|j[3436+(D+6<<1)>>1];G=f+(F+G<<1)|0;j[G>>1]=m[G>>1]|8}j[g>>1]=m[g>>1]|16384}}while(n>>>0<u>>>0)}else{p=t;do{d=k[xa>>2]|0;if(p>>>0>=d>>>0)break d;F=p;p=p+1|0;e=(ha(k[qa>>2]|0,p)|0)+s|0;f=e+1|0;g=k[ra>>2]|0;h=g+(f<<1)|0;i=(ha(k[wa>>2]|0,F)|0)+s|0;i=(k[va>>2]|0)+(i<<2)|0;n=k[ta>>2]|0;G=j[h>>1]|0;G=(F|0)==(r|0)|(F|0)==(d+-1|0)?G&-1095:G;if((G&255|0)!=0&(G&20480|0)==0){if(Kh(n)|0){D=Kh(n)|0;k[i>>2]=(D|0)!=0?v:w;F=k[qa>>2]|0;G=g+(f-F<<1)|0;E=g+(F+f<<1)|0;C=g+(f+~F<<1)|0;j[C>>1]=m[C>>1]|2;j[G>>1]=j[G>>1]|j[3436+(D<<1)>>1];G=e+2|0;C=g+(G-F<<1)|0;j[C>>1]=m[C>>1]|4;C=g+(e<<1)|0;j[C>>1]=j[C>>1]|j[3436+(D+2<<1)>>1];j[h>>1]=m[h>>1]|4096;C=g+(G<<1)|0;j[C>>1]=j[C>>1]|j[3436+(D+4<<1)>>1];C=g+(F+e<<1)|0;j[C>>1]=m[C>>1]|1;j[E>>1]=j[E>>1]|j[3436+(D+6<<1)>>1];G=g+(F+G<<1)|0;j[G>>1]=m[G>>1]|8}j[h>>1]=m[h>>1]|16384}}while(p>>>0<u>>>0)}while(0);s=s+1|0;d=k[wa>>2]|0}while(s>>>0<d>>>0);e=k[xa>>2]|0}if(u>>>0>=e>>>0){G=163;break c}}}if(Q){f=k[va>>2]|0;g=(k[ra>>2]|0)+2|0;r=1<<b;r=r>>1|r;d=k[xa>>2]|0;e=k[wa>>2]|0;if(d>>>0>3){n=e;i=0;while(1){if(!e){e=n;h=0}else{e=0;do{G=(k[qa>>2]|0)+e|0;jh(a,g+(G<<1)|0,f+(e<<2)|0,S,r);d=(k[wa>>2]|0)+e|0;G=(k[qa>>2]|0)+G|0;jh(a,g+(G<<1)|0,f+(d<<2)|0,S,r);d=(k[wa>>2]|0)+d|0;G=(k[qa>>2]|0)+G|0;jh(a,g+(G<<1)|0,f+(d<<2)|0,S,r);jh(a,g+((k[qa>>2]|0)+G<<1)|0,f+((k[wa>>2]|0)+d<<2)|0,S,r);e=e+1|0;d=k[wa>>2]|0}while(e>>>0<d>>>0);e=d;h=d;d=k[xa>>2]|0}f=f+(h<<2<<2)|0;g=g+(k[qa>>2]<<2<<1)|0;i=i+4|0;if(i>>>0<(d&-4)>>>0){n=e;e=h}else{q=g;p=i;break}}}else{q=g;p=0}if(!e){G=163;break c}else n=0;while(1){if(p>>>0<d>>>0){g=f+(n<<2)|0;h=q+(n<<1)|0;i=p;while(1){h=h+(k[qa>>2]<<1)|0;jh(a,h,g,S,r);e=k[wa>>2]|0;i=i+1|0;d=k[xa>>2]|0;if(i>>>0>=d>>>0)break;else g=g+(e<<2)|0}}n=n+1|0;if(n>>>0>=e>>>0){G=163;break c}}}w=1<<b;w=w>>1|w;d=k[xa>>2]|0;if(!d){G=163;break c}x=0-w|0;e=k[wa>>2]|0;g=e;v=0;while(1){u=v;v=v+4|0;do if(!e){f=g;e=0}else{t=u|3;if((u|0)==-4){f=g;e=g;break}else s=0;do{r=u;do{d=k[xa>>2]|0;if(r>>>0>=d>>>0)break;G=r;r=r+1|0;g=(ha(k[qa>>2]|0,r)|0)+s|0;h=g+1|0;i=k[ra>>2]|0;n=i+(h<<1)|0;p=(ha(k[wa>>2]|0,G)|0)+s|0;p=(k[va>>2]|0)+(p<<2)|0;q=k[a>>2]|0;e=j[n>>1]|0;d=(G|0)==(t|0)|(G|0)==(d+-1|0)?e&-1095:e;e=d&255;if((e|0)!=0&(d&20480|0)==0){f=q+100|0;k[f>>2]=q+24+(l[20286+(e|R)>>0]<<2);if(Gh(q)|0){F=d>>>4&255;k[f>>2]=q+24+(l[21310+F>>0]<<2);G=Gh(q)|0;F=l[21566+F>>0]|0;D=F^G;k[p>>2]=(G|0)!=(F|0)?x:w;F=k[qa>>2]|0;G=i+(h-F<<1)|0;E=i+(F+h<<1)|0;C=i+(h+~F<<1)|0;j[C>>1]=m[C>>1]|2;j[G>>1]=j[G>>1]|j[3436+(D<<1)>>1];G=g+2|0;C=i+(G-F<<1)|0;j[C>>1]=m[C>>1]|4;C=i+(g<<1)|0;j[C>>1]=j[C>>1]|j[3436+(D+2<<1)>>1];j[n>>1]=m[n>>1]|4096;C=i+(G<<1)|0;j[C>>1]=j[C>>1]|j[3436+(D+4<<1)>>1];C=i+(F+g<<1)|0;j[C>>1]=m[C>>1]|1;j[E>>1]=j[E>>1]|j[3436+(D+6<<1)>>1];G=i+(F+G<<1)|0;j[G>>1]=m[G>>1]|8}j[n>>1]=m[n>>1]|16384}}while(r>>>0<v>>>0);s=s+1|0;d=k[wa>>2]|0}while(s>>>0<d>>>0);f=d;e=d;d=k[xa>>2]|0}while(0);if(v>>>0>=d>>>0){G=163;break}else g=f}break}case 1:{if(K){q=1<<b>>1;r=(b|0)>0?0-q|0:-1;e=k[xa>>2]|0;if(!e)break c;f=k[wa>>2]|0;d=f;p=0;while(1){n=p;p=p+4|0;if(!f){g=d;f=0}else{i=(n|0)==-4;h=0;do{g=h;h=h+1|0;if(!i){f=n;do{if(f>>>0>=(k[xa>>2]|0)>>>0)break;e=f;f=f+1|0;d=(ha(k[qa>>2]|0,f)|0)+h|0;d=(k[ra>>2]|0)+(d<<1)|0;e=(ha(k[wa>>2]|0,e)|0)+g|0;e=(k[va>>2]|0)+(e<<2)|0;if((j[d>>1]&20480)==4096){F=(Kh(k[ta>>2]|0)|0)!=0;F=F?q:r;G=k[e>>2]|0;k[e>>2]=((G|0)<0?0-F|0:F)+G;j[d>>1]=m[d>>1]|8192}}while(f>>>0<p>>>0);d=k[wa>>2]|0}}while(h>>>0<d>>>0);g=d;f=d;e=k[xa>>2]|0}if(p>>>0>=e>>>0){G=163;break c}else d=g}}if(!Q){t=1<<b>>1;u=(b|0)>0?0-t|0:-1;d=k[xa>>2]|0;if(!d){G=163;break c}e=k[wa>>2]|0;f=e;s=0;while(1){r=s;s=s+4|0;if(!e)e=0;else{p=(r|0)==-4;q=r|3;d=f;n=0;do{i=n;n=n+1|0;if(!p){g=r;do{d=k[xa>>2]|0;if(g>>>0>=d>>>0)break;F=g;g=g+1|0;e=(ha(k[qa>>2]|0,g)|0)+n|0;e=(k[ra>>2]|0)+(e<<1)|0;f=(ha(k[wa>>2]|0,F)|0)+i|0;f=(k[va>>2]|0)+(f<<2)|0;h=k[a>>2]|0;G=j[e>>1]|0;d=(F|0)==(q|0)|(F|0)==(d+-1|0)?G&-1095:G;if((d&20480|0)==4096){k[h+100>>2]=h+24+(((d&8192|0)!=0?16:(d&255|0)!=0?15:14)<<2);F=(Gh(h)|0)!=0;F=F?t:u;G=k[f>>2]|0;k[f>>2]=((G|0)<0?0-F|0:F)+G;j[e>>1]=m[e>>1]|8192}}while(g>>>0<s>>>0);d=k[wa>>2]|0}}while(n>>>0<d>>>0);f=d;e=d;d=k[xa>>2]|0}if(s>>>0>=d>>>0){G=163;break c}}}f=k[va>>2]|0;g=(k[ra>>2]|0)+2|0;v=1<<b>>1;w=(b|0)>0?0-v|0:-1;d=k[xa>>2]|0;e=k[wa>>2]|0;if(d>>>0>3){i=e;t=g;u=0;while(1){if(!e){e=i;h=0}else{d=i;s=0;do{e=f+(s<<2)|0;i=k[qa>>2]|0;p=i+s|0;g=t+(p<<1)|0;n=k[a>>2]|0;h=j[g>>1]|0;if((h&20480|0)==4096){k[n+100>>2]=n+24+(((h&8192|0)!=0?16:(h&255|0)!=0?15:14)<<2);i=(Gh(n)|0)!=0;i=i?v:w;d=k[e>>2]|0;k[e>>2]=((d|0)<0?0-i|0:i)+d;j[g>>1]=m[g>>1]|8192;d=k[wa>>2]|0;e=k[qa>>2]|0;i=k[a>>2]|0}else{e=i;i=n}q=d+s|0;n=f+(q<<2)|0;r=e+p|0;g=t+(r<<1)|0;h=j[g>>1]|0;if((h&20480|0)==4096){k[i+100>>2]=i+24+(((h&8192|0)!=0?16:(h&255|0)!=0?15:14)<<2);e=(Gh(i)|0)!=0;e=e?v:w;d=k[n>>2]|0;k[n>>2]=((d|0)<0?0-e|0:e)+d;j[g>>1]=m[g>>1]|8192;d=k[wa>>2]|0;e=k[qa>>2]|0;i=k[a>>2]|0}p=d+q|0;n=f+(p<<2)|0;q=e+r|0;g=t+(q<<1)|0;h=j[g>>1]|0;if((h&20480|0)==4096){k[i+100>>2]=i+24+(((h&8192|0)!=0?16:(h&255|0)!=0?15:14)<<2);e=(Gh(i)|0)!=0;e=e?v:w;d=k[n>>2]|0;k[n>>2]=((d|0)<0?0-e|0:e)+d;j[g>>1]=m[g>>1]|8192;d=k[wa>>2]|0;e=k[qa>>2]|0;i=k[a>>2]|0}h=f+(d+p<<2)|0;e=t+(e+q<<1)|0;g=j[e>>1]|0;if((g&20480|0)==4096){k[i+100>>2]=i+24+(((g&8192|0)!=0?16:(g&255|0)!=0?15:14)<<2);G=(Gh(i)|0)!=0;G=G?v:w;d=k[h>>2]|0;k[h>>2]=((d|0)<0?0-G|0:G)+d;j[e>>1]=m[e>>1]|8192;d=k[wa>>2]|0}s=s+1|0}while(s>>>0<d>>>0);e=d;h=d;d=k[xa>>2]|0}f=f+(h<<2<<2)|0;g=t+(k[qa>>2]<<2<<1)|0;n=u+4|0;if(n>>>0<(d&-4)>>>0){i=e;e=h;t=g;u=n}else{s=n;break}}}else s=0;if(!e){G=163;break c}else r=0;do{if(s>>>0<d>>>0){n=f+(r<<2)|0;p=g+(r<<1)|0;q=s;while(1){p=p+(k[qa>>2]<<1)|0;i=k[a>>2]|0;h=j[p>>1]|0;if((h&20480|0)==4096){k[i+100>>2]=i+24+(((h&8192|0)!=0?16:(h&255|0)!=0?15:14)<<2);d=(Gh(i)|0)!=0;d=d?v:w;h=k[n>>2]|0;k[n>>2]=((h|0)<0?0-d|0:d)+h;j[p>>1]=m[p>>1]|8192;h=k[wa>>2]|0;d=k[xa>>2]|0}else h=e;q=q+1|0;if(q>>>0>=d>>>0){e=h;break}else{e=h;n=n+(h<<2)|0}}}r=r+1|0}while(r>>>0<e>>>0);G=163;break}case 2:{E=k[a>>2]|0;F=1<<b;F=F>>1|F;do if(Q){f=k[va>>2]|0;g=(k[ra>>2]|0)+2|0;e=k[xa>>2]|0;if(e>>>0>3){w=E+92|0;x=E+100|0;y=E+96|0;z=0-F|0;h=k[wa>>2]|0;d=h;n=0;while(1){if(!h)h=0;else{r=n|1;s=r+1|0;t=n|3;u=r+3|0;v=0;do{d=k[qa>>2]|0;e=v;v=v+1|0;C=(ha(d,r)|0)+v|0;B=k[ra>>2]|0;A=B+((ha(d,s)|0)+v<<1)|0;D=B+((ha(d,t)|0)+v<<1)|0;G=B+((ha(d,u)|0)+v<<1)|0;e:do if(!((j[A>>1]|j[B+(C<<1)>>1]|j[D>>1]|j[G>>1])&20735)){k[x>>2]=w;if(!(Gh(E)|0))break;k[x>>2]=y;p=(Gh(E)|0)<<1;p=p|(Gh(E)|0);if(p>>>0>=4)break;q=f+((ha(k[wa>>2]|0,p)|0)+e<<2)|0;e=g+((ha(k[qa>>2]|0,p)|0)+e<<1)|0;i=p;while(1){if(i>>>0>=(k[xa>>2]|0)>>>0)break e;d=k[qa>>2]|0;h=e;e=e+(d<<1)|0;if((i|0)==(p|0)){G=k[a>>2]|0;D=(m[e>>1]|0)>>>4&255;k[G+100>>2]=G+24+(l[21310+D>>0]<<2);G=Gh(G)|0;D=l[21566+D>>0]|0;B=D^G;k[q>>2]=(G|0)!=(D|0)?z:F;D=k[qa>>2]|0;G=h+(d-D<<1)|0;C=h+(D+d<<1)|0;A=h+(d+~D<<1)|0;j[A>>1]=m[A>>1]|2;j[G>>1]=j[G>>1]|j[3436+(B<<1)>>1];G=d+1|0;A=h+(G-D<<1)|0;j[A>>1]=m[A>>1]|4;A=d+-1|0;d=h+(A<<1)|0;j[d>>1]=j[d>>1]|j[3436+(B+2<<1)>>1];j[e>>1]=m[e>>1]|4096;d=h+(G<<1)|0;j[d>>1]=j[d>>1]|j[3436+(B+4<<1)>>1];A=h+(D+A<<1)|0;j[A>>1]=m[A>>1]|1;j[C>>1]=j[C>>1]|j[3436+(B+6<<1)>>1];G=h+(D+G<<1)|0;j[G>>1]=m[G>>1]|8;j[e>>1]=m[e>>1]&49151}else kh(a,e,q,S,F);i=i+1|0;if(i>>>0>=4)break;else q=q+(k[wa>>2]<<2)|0}}else{D=d+e|0;kh(a,g+(D<<1)|0,f+(e<<2)|0,S,F);G=(k[wa>>2]|0)+e|0;D=(k[qa>>2]|0)+D|0;kh(a,g+(D<<1)|0,f+(G<<2)|0,S,F);G=(k[wa>>2]|0)+G|0;D=(k[qa>>2]|0)+D|0;kh(a,g+(D<<1)|0,f+(G<<2)|0,S,F);kh(a,g+((k[qa>>2]|0)+D<<1)|0,f+((k[wa>>2]|0)+G<<2)|0,S,F)}while(0);d=k[wa>>2]|0}while(v>>>0<d>>>0);h=d;e=k[xa>>2]|0}f=f+(h<<2<<2)|0;g=g+(k[qa>>2]<<2<<1)|0;n=n+4|0;if(n>>>0>=(e&-4)>>>0){q=f;p=g;break}}}else{d=k[wa>>2]|0;q=f;p=g;n=0}if(!d)break;else i=0;do{if(n>>>0<e>>>0){f=q+(i<<2)|0;g=p+(i<<1)|0;h=n;while(1){g=g+(k[qa>>2]<<1)|0;kh(a,g,f,S,F);d=k[wa>>2]|0;h=h+1|0;e=k[xa>>2]|0;if(h>>>0>=e>>>0)break;else f=f+(d<<2)|0}}i=i+1|0}while(i>>>0<d>>>0)}else{d=k[xa>>2]|0;if(!d)break;A=E+92|0;B=E+100|0;C=E+96|0;D=0-F|0;e=k[wa>>2]|0;z=0;while(1){if(!e){f=z+4|0;e=0}else{v=z|3;w=z|1;x=w+1|0;y=w+3|0;f=z+4|0;u=0;while(1){do if(v>>>0<d>>>0){d=k[qa>>2]|0;g=u+1|0;t=(ha(d,w)|0)+g|0;e=k[ra>>2]|0;if(j[e+(t<<1)>>1]&20735){t=0;d=0;G=127;break}t=e+((ha(d,x)|0)+g<<1)|0;if(j[t>>1]&20735){t=0;d=0;G=127;break}t=e+((ha(d,v)|0)+g<<1)|0;if(j[t>>1]&20735){t=0;d=0;G=127;break}t=e+((ha(d,y)|0)+g<<1)|0;if(j[t>>1]&20665){t=0;d=0;G=127;break}k[B>>2]=A;if(!(Gh(E)|0))break;k[B>>2]=C;d=(Gh(E)|0)<<1;t=1;d=d|(Gh(E)|0);G=127}else{t=0;d=0;G=127}while(0);if((G|0)==127){G=0;g=d+z|0;f:do if(g>>>0<f>>>0){s=g;do{d=k[xa>>2]|0;if(s>>>0>=d>>>0)break f;Da=s;s=s+1|0;h=(ha(k[qa>>2]|0,s)|0)+u|0;i=h+1|0;n=k[ra>>2]|0;p=n+(i<<1)|0;q=(ha(k[wa>>2]|0,Da)|0)+u|0;q=(k[va>>2]|0)+(q<<2)|0;r=k[a>>2]|0;e=j[p>>1]|0;e=(Da|0)==(v|0)|(Da|0)==(d+-1|0)?e&-1095:e;do if(!(t&(Da|0)==(g|0))){if(e&20480)break;d=r+100|0;k[d>>2]=r+24+(l[20286+(e&255|R)>>0]<<2);if(Gh(r)|0)G=133}else{d=r+100|0;G=133}while(0);if((G|0)==133){G=0;e=e>>>4&255;k[d>>2]=r+24+(l[21310+e>>0]<<2);Da=Gh(r)|0;r=l[21566+e>>0]|0;e=r^Da;k[q>>2]=(Da|0)!=(r|0)?D:F;r=k[qa>>2]|0;Da=n+(i-r<<1)|0;q=n+(r+i<<1)|0;i=n+(i+~r<<1)|0;j[i>>1]=m[i>>1]|2;j[Da>>1]=j[Da>>1]|j[3436+(e<<1)>>1];Da=h+2|0;i=n+(Da-r<<1)|0;j[i>>1]=m[i>>1]|4;i=n+(h<<1)|0;j[i>>1]=j[i>>1]|j[3436+(e+2<<1)>>1];j[p>>1]=m[p>>1]|4096;i=n+(Da<<1)|0;j[i>>1]=j[i>>1]|j[3436+(e+4<<1)>>1];i=n+(r+h<<1)|0;j[i>>1]=m[i>>1]|1;j[q>>1]=j[q>>1]|j[3436+(e+6<<1)>>1];Da=n+(r+Da<<1)|0;j[Da>>1]=m[Da>>1]|8}j[p>>1]=m[p>>1]&49151}while(s>>>0<f>>>0)}while(0);g=u+1|0}e=k[wa>>2]|0;d=k[xa>>2]|0;if(g>>>0<e>>>0)u=g;else break}}if(f>>>0<d>>>0)z=f;else break}}while(0);if(M){G=163;break c}k[E+100>>2]=E+96;Gh(E)|0;Gh(E)|0;Gh(E)|0;Gh(E)|0;G=163;break}default:G=163}while(0);do if((G|0)==163){G=0;if(J)break;Ah(U);Bh(U,18,0,46);Bh(U,17,0,3);Bh(U,0,0,4)}while(0);c=c+1|0;Da=(c|0)==3;b=(Da<<31>>31)+b|0;c=Da?0:c;H=H+1|0;if(H>>>0>=(k[I>>2]|0)>>>0)break b}}while(0);d=k[X>>2]|0}L=L+1|0}while(L>>>0<d>>>0)}c=(k[V>>2]|0)-(k[ea>>2]|0)|0;b=(k[Y>>2]|0)-(k[fa>>2]|0)|0;d=k[da>>2]|0;if(d&1){Da=k[Aa>>2]|0;c=(k[Da+(la*136|0)+8>>2]|0)+c-(k[Da+(la*136|0)>>2]|0)|0}if(d&2){Da=k[Aa>>2]|0;b=(k[Da+(la*136|0)+12>>2]|0)+b-(k[Da+(la*136|0)+4>>2]|0)|0}p=k[va>>2]|0;q=k[wa>>2]|0;r=k[xa>>2]|0;d=k[Ba>>2]|0;if((d|0)!=0?(ua=1<<d,(r|0)!=0):0){d=(q|0)==0;n=0;do{if(!d){e=ha(n,q)|0;i=0;do{f=p+(i+e<<2)|0;g=k[f>>2]|0;h=(g|0)>-1?g:0-g|0;if((h|0)>=(ua|0)){Da=h>>k[Ba>>2];k[f>>2]=(g|0)<0?0-Da|0:Da}i=i+1|0}while((i|0)!=(q|0))}n=n+1|0}while((n|0)!=(r|0))}i=(ha(b,ya)|0)+c|0;n=k[pa>>2]|0;c=(r|0)==0;if((k[sa>>2]|0)==1){if(!c){c=(q|0)==0;f=0;do{if(!c){b=ha(f,q)|0;d=(ha(f,ya)|0)+i|0;e=0;do{k[n+(d+e<<2)>>2]=(k[p+(e+b<<2)>>2]|0)/2|0;e=e+1|0}while((e|0)!=(q|0))}f=f+1|0}while((f|0)!=(r|0))}}else if(!c){h=(q|0)==0;c=p;g=0;f=n+(i<<2)|0;while(1){if(!h){b=c;d=0;e=f;while(1){o[e>>2]=+(k[b>>2]|0)*+o[ga>>2];d=d+1|0;if((d|0)==(q|0))break;else{b=b+4|0;e=e+4|0}}c=c+(q<<2)|0}g=g+1|0;if((g|0)==(r|0))break;else f=f+(ya<<2)|0}}_=_+1|0}while(_>>>0<(ha(k[aa>>2]|0,k[$>>2]|0)|0)>>>0);c=k[ka>>2]|0;d=k[ja>>2]|0}ba=ba+1|0}while(ba>>>0<(ha(c,d)|0)>>>0);b=k[na>>2]|0}ia=ia+1|0}while(ia>>>0<b>>>0);c=k[za>>2]|0}oa=oa+1|0;if(oa>>>0>=c>>>0){c=1;G=201;break}}if((G|0)==201)return c|0;return 0}function hh(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,n=0,q=0,r=0,s=0.0,t=0.0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0.0,U=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ia=0.0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0;Ya=b+32|0;p[Ya>>3]=0.0;Za=b+16|0;f=k[Za>>2]|0;if(!f){_a=1;return _a|0}Xa=b+20|0;Sa=c+5584|0;Ta=a+16|0;Ua=a+20|0;Va=a+8|0;Wa=a+36|0;Pa=(d|0)!=0;Qa=a+32|0;Ra=a+12|0;b=f;Oa=0;a:while(1){c=k[Xa>>2]|0;f=k[Sa>>2]|0;Ma=(k[c+(Oa*52|0)+8>>2]|0)-(k[c+(Oa*52|0)>>2]|0)|0;Na=c+(Oa*52|0)+16|0;g=k[Na>>2]|0;if(g){La=c+(Oa*52|0)+24|0;Ja=c+(Oa*52|0)+32|0;Ka=f+(Oa*1080|0)+20|0;Ga=f+(Oa*1080|0)+16|0;Ia=Pa&Oa>>>0<e>>>0;Ha=d+(Oa<<3)|0;b=g;Fa=0;do{Da=k[La>>2]|0;Ea=Da+(Fa*136|0)+24|0;c=k[Ea>>2]|0;if(c){za=Da+(Fa*136|0)+16|0;Aa=Da+(Fa*136|0)+20|0;Ba=~Fa;Ca=Fa+-1|0;b=k[Aa>>2]|0;f=k[za>>2]|0;ya=0;do{xa=Da+(Fa*136|0)+28+(ya*36|0)+32|0;if(ha(b,f)|0){ra=67108864/(~~+V(+(+o[xa>>2]*8192.0))|0)|0;sa=Da+(Fa*136|0)+28+(ya*36|0)+20|0;ta=Da+(Fa*136|0)+28+(ya*36|0)|0;ua=Da+(Fa*136|0)+28+(ya*36|0)+4|0;va=Da+(Fa*136|0)+28+(ya*36|0)+16|0;wa=((ra|0)<0)<<31>>31;qa=0;do{c=k[sa>>2]|0;oa=c+(qa*40|0)+16|0;pa=c+(qa*40|0)+20|0;if(ha(k[pa>>2]|0,k[oa>>2]|0)|0){ma=c+(qa*40|0)+24|0;na=0;do{la=k[ma>>2]|0;g=k[la+(na*52|0)+12>>2]|0;b=g-(k[ta>>2]|0)|0;h=k[la+(na*52|0)+16>>2]|0;c=h-(k[ua>>2]|0)|0;f=k[va>>2]|0;if(f&1){ka=k[La>>2]|0;b=(k[ka+(Ca*136|0)+8>>2]|0)+b-(k[ka+(Ca*136|0)>>2]|0)|0}if(f&2){ka=k[La>>2]|0;c=(k[ka+(Ca*136|0)+12>>2]|0)+c-(k[ka+(Ca*136|0)+4>>2]|0)|0}if(!(ih(a,(k[la+(na*52|0)+20>>2]|0)-g|0,(k[la+(na*52|0)+24>>2]|0)-h|0)|0)){b=0;_a=173;break a}n=k[Ta>>2]|0;q=k[Ua>>2]|0;r=Ma-n|0;u=(ha(c,Ma)|0)+b|0;v=k[Ja>>2]|0;k[Va>>2]=v+(u<<2);k[Wa>>2]=Ma;b=(q|0)==0;if((k[Ka>>2]|0)==1){if(!b){g=(n|0)==0;h=0;b=0;while(1){if(!g){c=0;f=b;while(1){ka=v+(f+u<<2)|0;k[ka>>2]=k[ka>>2]<<6;c=c+1|0;if((c|0)==(n|0))break;else f=f+1|0}b=n+b|0}h=h+1|0;if((h|0)==(q|0))break;else b=b+r|0}}}else if(!b){g=(n|0)==0;h=0;b=0;while(1){if(!g){c=0;f=b;while(1){ka=v+(f+u<<2)|0;ja=k[ka>>2]|0;ja=hj(ja|0,((ja|0)<0)<<31>>31|0,ra|0,wa|0)|0;ja=aj(ja|0,L|0,4096,0)|0;ja=bj(ja|0,L|0,18)|0;k[ka>>2]=ja;c=c+1|0;if((c|0)==(n|0))break;else f=f+1|0}b=n+b|0}h=h+1|0;if((h|0)==(q|0))break;else b=b+r|0}}fa=k[va>>2]|0;ga=(k[Na>>2]|0)+Ba|0;r=k[Ka>>2]|0;ia=+o[xa>>2];ja=k[Ga>>2]|0;ka=k[a>>2]|0;g=k[Ta>>2]|0;do if(!g)b=0;else{h=k[Ua>>2]|0;n=(h|0)==0;q=0;b=0;do{if(!n){c=k[Wa>>2]|0;f=0;do{ea=v+(u+((ha(f,c)|0)+q)<<2)|0;ea=k[ea>>2]|0;ea=(ea|0)>-1?ea:0-ea|0;b=(b|0)>(ea|0)?b:ea;f=f+1|0}while((f|0)!=(h|0))}q=q+1|0}while((q|0)!=(g|0));if(!b){b=0;break}if((b|0)>1){c=b;b=0}else{b=-5;break}while(1){c=c>>1;if((c|0)<=1)break;else b=b+1|0}b=b+-4|0}while(0);da=la+(na*52|0)+28|0;k[da>>2]=b;b=b+-1|0;Ah(ka);Bh(ka,18,0,46);Bh(ka,17,0,3);Bh(ka,0,0,4);ea=la+(na*52|0)|0;uh(ka,k[ea>>2]|0);b:do if((b|0)>-1){ba=la+(na*52|0)+8|0;W=ja&1;ca=(W|0)!=0;X=(r|0)==1;Y=(ja&4|0)==0;W=(W|0)==0;Z=(ja&2|0)==0;_=(ja&8|0)==0;$=fa<<8;aa=(ja&32|0)==0;c=0;S=b;T=0.0;b=0;U=2;while(1){R=k[ba>>2]|0;H=ca&(U>>>0<2?(S|0)<((k[da>>2]|0)+-4|0):0);c:do switch(U|0){case 0:{F=1<<S+6;c=k[Ua>>2]|0;if(!c){g=0;break c}G=(S|0)==0;h=k[Ta>>2]|0;f=h;g=0;E=0;do{D=E;E=E+4|0;if(!f)f=0;else{B=(D|0)==-4;C=D|3;f=h;A=0;do{if(!B){z=D;do{c=k[Ua>>2]|0;if(z>>>0>=c>>>0)break;do if(_)c=0;else{if((z|0)==(C|0)){c=1;break}c=(z|0)==(c+-1|0)}while(0);n=z;z=z+1|0;u=(ha(k[Qa>>2]|0,z)|0)+A|0;v=u+1|0;w=k[Ra>>2]|0;y=w+(v<<1)|0;n=(ha(k[Wa>>2]|0,n)|0)+A|0;n=(k[Va>>2]|0)+(n<<2)|0;x=k[a>>2]|0;q=j[y>>1]|0;q=c?q&-1095:q;c=q&255;if((c|0)!=0&(q&20480|0)==0){f=k[n>>2]|0;f=(((f|0)<0?0-f|0:f)&F|0)!=0;h=f&1;r=x+100|0;k[r>>2]=x+24+(l[20286+(c|$)>>0]<<2);if(H)yh(x,h);else vh(x,h);if(f){c=k[n>>2]|0;f=c>>>31;c=(c|0)<0?0-c|0:c;if(G)c=3708+((c&127)<<1)|0;else c=3452+((c>>>S&127)<<1)|0;g=(j[c>>1]|0)+g|0;c=q>>>4&255;k[r>>2]=x+24+(l[21310+c>>0]<<2);if(H)yh(x,f);else vh(x,l[21566+c>>0]^f);P=k[Qa>>2]|0;Q=w+(v-P<<1)|0;O=w+(P+v<<1)|0;N=w+(v+~P<<1)|0;j[N>>1]=m[N>>1]|2;j[Q>>1]=j[Q>>1]|j[3436+(f<<1)>>1];Q=u+2|0;N=w+(Q-P<<1)|0;j[N>>1]=m[N>>1]|4;N=w+(u<<1)|0;j[N>>1]=j[N>>1]|j[3436+((f|2)<<1)>>1];j[y>>1]=m[y>>1]|4096;N=w+(Q<<1)|0;j[N>>1]=j[N>>1]|j[3436+((f|4)<<1)>>1];N=w+(P+u<<1)|0;j[N>>1]=m[N>>1]|1;j[O>>1]=j[O>>1]|j[3436+((f|6)<<1)>>1];Q=w+(P+Q<<1)|0;j[Q>>1]=m[Q>>1]|8}j[y>>1]=m[y>>1]|16384}}while(z>>>0<E>>>0);f=k[Ta>>2]|0}A=A+1|0}while(A>>>0<f>>>0);c=k[Ua>>2]|0;h=f}}while(E>>>0<c>>>0);break}case 1:{A=1<<S+6;c=k[Ua>>2]|0;if(!c){g=0;break c}B=(S|0)==0;h=k[Ta>>2]|0;f=h;g=0;z=0;do{y=z;z=z+4|0;if(!f)f=0;else{w=(y|0)==-4;x=y|3;f=h;v=0;do{u=v;v=v+1|0;if(!w){r=y;do{c=k[Ua>>2]|0;if(r>>>0>=c>>>0)break;do if(_)c=0;else{if((r|0)==(x|0)){c=1;break}c=(r|0)==(c+-1|0)}while(0);f=r;r=r+1|0;n=(ha(k[Qa>>2]|0,r)|0)+v|0;n=(k[Ra>>2]|0)+(n<<1)|0;q=k[a>>2]|0;h=j[n>>1]|0;h=c?h&-1095:h;if((h&20480|0)==4096){f=(k[Va>>2]|0)+((ha(k[Wa>>2]|0,f)|0)+u<<2)|0;f=k[f>>2]|0;f=(f|0)<0?0-f|0:f;if(B)c=4220+((f&127)<<1)|0;else c=3964+((f>>>S&127)<<1)|0;g=(j[c>>1]|0)+g|0;c=(f&A|0)!=0&1;k[q+100>>2]=q+24+(((h&8192|0)!=0?16:(h&255|0)!=0?15:14)<<2);if(H)yh(q,c);else vh(q,c);j[n>>1]=m[n>>1]|8192}}while(r>>>0<z>>>0);f=k[Ta>>2]|0}}while(v>>>0<f>>>0);c=k[Ua>>2]|0;h=f}}while(z>>>0<c>>>0);break}case 2:{K=k[a>>2]|0;M=1<<S+6;f=k[Ua>>2]|0;if(!f)c=0;else{N=K+92|0;O=K+100|0;P=K+96|0;Q=(S|0)==0;g=k[Ta>>2]|0;c=0;J=0;while(1){if(!g){h=J+4|0;g=0}else{C=J|3;D=J|1;E=D+1|0;F=D+3|0;h=J+4|0;G=J+1|0;H=J+2|0;I=J+3|0;B=0;while(1){do if(C>>>0<f>>>0){f=k[Qa>>2]|0;q=B+1|0;n=(ha(f,D)|0)+q|0;g=k[Ra>>2]|0;n=j[g+(n<<1)>>1]|0;if(_){z=g+((ha(f,E)|0)+q<<1)|0;A=g+((ha(f,C)|0)+q<<1)|0;f=g+((ha(f,F)|0)+q<<1)|0;f=((j[z>>1]|n|j[A>>1]|j[f>>1])&20735)==0&1}else{do if(!(n&20735)){A=g+((ha(f,E)|0)+q<<1)|0;if(j[A>>1]&20735){f=1;break}A=g+((ha(f,C)|0)+q<<1)|0;if(j[A>>1]&20735){f=1;break}f=g+((ha(f,F)|0)+q<<1)|0;f=(j[f>>1]&20665)!=0}else f=1;while(0);f=f&1^1}if(!f){A=0;f=0;_a=109;break}f=k[Wa>>2]|0;g=k[Va>>2]|0;A=g+((ha(f,J)|0)+B<<2)|0;A=k[A>>2]|0;do if(!(((A|0)<0?0-A|0:A)&M)){A=g+((ha(f,G)|0)+B<<2)|0;A=k[A>>2]|0;if(((A|0)<0?0-A|0:A)&M){f=1;break}A=g+((ha(f,H)|0)+B<<2)|0;A=k[A>>2]|0;if(((A|0)<0?0-A|0:A)&M){f=2;break}f=g+((ha(f,I)|0)+B<<2)|0;f=k[f>>2]|0;f=(((f|0)<0?0-f|0:f)&M|0)==0?4:3}else f=0;while(0);k[O>>2]=N;vh(K,(f|0)!=4&1);if((f|0)==4){n=q;break}k[O>>2]=P;vh(K,f>>>1);vh(K,f&1);A=1;_a=109}else{A=0;f=0;_a=109}while(0);if((_a|0)==109){_a=0;z=f+J|0;d:do if(z>>>0<h>>>0){y=z;do{f=k[Ua>>2]|0;if(y>>>0>=f>>>0)break d;do if(_)f=0;else{if((y|0)==(C|0)){f=1;break}f=(y|0)==(f+-1|0)}while(0);$a=y;y=y+1|0;r=(ha(k[Qa>>2]|0,y)|0)+B|0;u=r+1|0;v=k[Ra>>2]|0;x=v+(u<<1)|0;g=(ha(k[Wa>>2]|0,$a)|0)+B|0;g=(k[Va>>2]|0)+(g<<2)|0;w=k[a>>2]|0;n=j[x>>1]|0;q=f?n&-1095:n;do if(!(A&($a|0)==(z|0))){if(n&20480)break;k[w+100>>2]=w+24+(l[20286+(q&255|$)>>0]<<2);$a=k[g>>2]|0;$a=((($a|0)<0?0-$a|0:$a)&M|0)!=0;vh(w,$a&1);if($a)_a=117}else _a=117;while(0);if((_a|0)==117){_a=0;g=k[g>>2]|0;f=(g|0)<0?0-g|0:g;if(Q)f=3708+((f&127)<<1)|0;else f=3452+((f>>>S&127)<<1)|0;c=(j[f>>1]|0)+c|0;$a=q>>>4&255;k[w+100>>2]=w+24+(l[21310+$a>>0]<<2);n=g>>>31;vh(w,l[21566+$a>>0]^n);w=k[Qa>>2]|0;$a=v+(u-w<<1)|0;q=v+(w+u<<1)|0;u=v+(u+~w<<1)|0;j[u>>1]=m[u>>1]|2;j[$a>>1]=j[$a>>1]|j[3436+(n<<1)>>1];$a=r+2|0;u=v+($a-w<<1)|0;j[u>>1]=m[u>>1]|4;u=v+(r<<1)|0;j[u>>1]=j[u>>1]|j[3436+((n|2)<<1)>>1];j[x>>1]=m[x>>1]|4096;u=v+($a<<1)|0;j[u>>1]=j[u>>1]|j[3436+((n|4)<<1)>>1];u=v+(w+r<<1)|0;j[u>>1]=m[u>>1]|1;j[q>>1]=j[q>>1]|j[3436+((n|6)<<1)>>1];$a=v+(w+$a<<1)|0;j[$a>>1]=m[$a>>1]|8}j[x>>1]=m[x>>1]&49151}while(y>>>0<h>>>0)}while(0);n=B+1|0}g=k[Ta>>2]|0;f=k[Ua>>2]|0;if(n>>>0<g>>>0)B=n;else break}}if(h>>>0<f>>>0)J=h;else break}}if(aa){g=c;break c}Eh(ka);g=c;break}default:g=c}while(0);if(Ia)s=+p[Ha>>3];else s=1.0;if(X)t=+Sg(ga,fa);else t=+Vg(ga,fa);t=+(1<<S|0)*(ia*(s*t));t=t*(+(g|0)*t*.0001220703125);T=T+t;p[Ya>>3]=+p[Ya>>3]+t;do if(Y)_a=137;else{if((S|0)<1&(U|0)==2){_a=137;break}wh(ka);f=R+(b*24|0)+20|0;c=i[f>>0]|1;i[f>>0]=c;f=1}while(0);do if((_a|0)==137){c=(k[da>>2]|0)+-4|0;if((U|0)!=0&(S|0)<(c|0))if(W)_a=141;else _a=140;else if(W|((U|0)!=2|(S|0)!=(c|0)))_a=141;else _a=140;if((_a|0)==140){_a=0;wh(ka);f=R+(b*24|0)+20|0;c=i[f>>0]|1;i[f>>0]=c;f=1;break}else if((_a|0)==141){_a=0;f=R+(b*24|0)+20|0;c=i[f>>0]&-2;i[f>>0]=c;f=3;break}}while(0);Q=U+1|0;$a=(Q|0)==3;U=$a?0:Q;S=($a<<31>>31)+S|0;do if((S|0)>0&(c&1)!=0)if(ca&(U>>>0<2?(S|0)<((k[da>>2]|0)+-4|0):0)){xh(ka);break}else{Ch(ka);break}while(0);p[R+(b*24|0)+8>>3]=T;$a=(th(ka)|0)+f|0;k[R+(b*24|0)>>2]=$a;if(!Z)zh(ka);b=b+1|0;if((S|0)<=-1)break b;else c=g}}else b=0;while(0);do if(!(ja&16)){if(ja&1)break;wh(ka)}else Dh(ka);while(0);q=la+(na*52|0)+48|0;k[q>>2]=b;if(b){g=la+(na*52|0)+8|0;n=0;do{h=k[g>>2]|0;c=h+(n*24|0)|0;$a=k[c>>2]|0;if($a>>>0>(th(ka)|0)>>>0){b=th(ka)|0;k[c>>2]=b}else b=k[c>>2]|0;do if(b>>>0>1){f=b+-1|0;if((i[(k[ea>>2]|0)+f>>0]|0)!=-1)break;k[c>>2]=f;b=f}while(0);if(!n)c=0;else c=k[(k[g>>2]|0)+((n+-1|0)*24|0)>>2]|0;k[h+(n*24|0)+16>>2]=b-c;n=n+1|0}while(n>>>0<(k[q>>2]|0)>>>0)}na=na+1|0}while(na>>>0<(ha(k[pa>>2]|0,k[oa>>2]|0)|0)>>>0);b=k[Aa>>2]|0;f=k[za>>2]|0}qa=qa+1|0}while(qa>>>0<(ha(b,f)|0)>>>0);c=k[Ea>>2]|0}ya=ya+1|0}while(ya>>>0<c>>>0);b=k[Na>>2]|0}Fa=Fa+1|0}while(Fa>>>0<b>>>0);b=k[Za>>2]|0}Oa=Oa+1|0;if(Oa>>>0>=b>>>0){b=1;_a=173;break}}if((_a|0)==173)return b|0;return 0}function ih(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;f=ha(c,b)|0;if(!(k[a+40>>2]|0)){g=a+24|0;h=a+8|0;d=k[h>>2]|0;do if(f>>>0>(k[g>>2]|0)>>>0){ad(d);e=f<<2;d=$c(e)|0;k[h>>2]=d;if(!d){b=0;return b|0}else{k[g>>2]=f;break}}else e=f<<2;while(0);_i(d|0,0,e|0)|0}f=b+2|0;k[a+32>>2]=f;f=ha(c+2|0,f)|0;g=a+28|0;h=a+12|0;d=k[h>>2]|0;do if(f>>>0>(k[g>>2]|0)>>>0){ad(d);e=f<<1;d=$c(e)|0;k[h>>2]=d;if(!d){b=0;return b|0}else{k[g>>2]=f;break}}else e=f<<1;while(0);_i(d|0,0,e|0)|0;k[a+16>>2]=b;k[a+20>>2]=c;b=1;return b|0}function jh(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=k[a>>2]|0;h=j[b>>1]|0;i=h&255;if(!((i|0)!=0&(h&20480|0)==0))return;g=f+100|0;k[g>>2]=f+24+(l[20286+(i|d<<8)>>0]<<2);if(Gh(f)|0){d=h>>>4&255;k[g>>2]=f+24+(l[21310+d>>0]<<2);h=Gh(f)|0;d=l[21566+d>>0]|0;i=d^h;k[c>>2]=(h|0)!=(d|0)?0-e|0:e;a=k[a+32>>2]|0;e=b+(0-a<<1)|0;d=b+(a<<1)|0;c=b+(~a<<1)|0;j[c>>1]=m[c>>1]|2;j[e>>1]=j[e>>1]|j[3436+(i<<1)>>1];e=b+(1-a<<1)|0;j[e>>1]=m[e>>1]|4;e=b+-2|0;j[e>>1]=j[e>>1]|j[3436+(i+2<<1)>>1];j[b>>1]=m[b>>1]|4096;e=b+2|0;j[e>>1]=j[e>>1]|j[3436+(i+4<<1)>>1];e=b+(a+-1<<1)|0;j[e>>1]=m[e>>1]|1;j[d>>1]=j[d>>1]|j[3436+(i+6<<1)>>1];a=b+(a+1<<1)|0;j[a>>1]=m[a>>1]|8}j[b>>1]=m[b>>1]|16384;return}function kh(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=k[a>>2]|0;h=j[b>>1]|0;if(h&20480){a=j[b>>1]|0;a=a&65535;a=a&49151;a=a&65535;j[b>>1]=a;return}g=f+100|0;k[g>>2]=f+24+(l[20286+(h&255|d<<8)>>0]<<2);if(!(Gh(f)|0)){a=j[b>>1]|0;a=a&65535;a=a&49151;a=a&65535;j[b>>1]=a;return}d=h>>>4&255;k[g>>2]=f+24+(l[21310+d>>0]<<2);g=Gh(f)|0;d=l[21566+d>>0]|0;h=d^g;k[c>>2]=(g|0)!=(d|0)?0-e|0:e;a=k[a+32>>2]|0;e=b+(0-a<<1)|0;d=b+(a<<1)|0;c=b+(~a<<1)|0;j[c>>1]=m[c>>1]|2;j[e>>1]=j[e>>1]|j[3436+(h<<1)>>1];e=b+(1-a<<1)|0;j[e>>1]=m[e>>1]|4;e=b+-2|0;j[e>>1]=j[e>>1]|j[3436+(h+2<<1)>>1];j[b>>1]=m[b>>1]|4096;e=b+2|0;j[e>>1]=j[e>>1]|j[3436+(h+4<<1)>>1];e=b+(a+-1<<1)|0;j[e>>1]=m[e>>1]|1;j[d>>1]=j[d>>1]|j[3436+(h+6<<1)>>1];a=b+(a+1<<1)|0;j[a>>1]=m[a>>1]|8;a=j[b>>1]|0;a=a&65535;a=a&49151;a=a&65535;j[b>>1]=a;return}function lh(a,b,c,d,e,f,g,h,i,m,n,o){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;H=r;r=r+16|0;G=H;k[G>>2]=0;p=k[a>>2]|0;C=k[a+4>>2]|0;a=k[C+76>>2]|0;E=a+(b*5640|0)|0;s=(j[C>>1]|0)==4?2:1;t=C+80|0;if(!(k[t>>2]|0))q=1;else q=k[p+16>>2]|0;F=(k[a+(b*5640|0)+420>>2]|0)+1|0;D=Vf(p,C,b,o)|0;if(!D){b=0;r=H;return b|0}k[f>>2]=0;a:do if(!o){if(q){a=0;b:while(1){o=0;n=D;p=0;while(1){Wf(D,C,b,p,a,m,0);if((k[n+80>>2]|0)==-1){a=9;break b}i=n+36|0;c:while(1){do if(!(Yf(n)|0))break c;while((k[i>>2]|0)>>>0>=d>>>0);k[G>>2]=0;if(!(ph(b,c,E,n,e,G,g,h)|0)){a=13;break b}B=k[G>>2]|0;k[f>>2]=(k[f>>2]|0)+B;g=g-B|0;o=B+o|0;e=e+B|0}B=k[t>>2]|0;if((B|0)!=0&o>>>0>B>>>0){a=17;break b}p=p+1|0;if(p>>>0<s>>>0)n=n+232|0;else break}a=a+1|0;if(a>>>0>=q>>>0)break a}if((a|0)==9){Uf(D,F);b=0;r=H;return b|0}else if((a|0)==13){Uf(D,F);b=0;r=H;return b|0}else if((a|0)==17){Uf(D,F);b=0;r=H;return b|0}}}else{Wf(D,C,b,n,i,m,o);z=D+(n*232|0)|0;if((k[D+(n*232|0)+80>>2]|0)==-1){Uf(D,F);b=0;r=H;return b|0}m=D+(n*232|0)+36|0;u=(h|0)==0;v=c+840|0;w=h+12|0;x=h+8|0;y=h+88|0;t=C+93|0;s=a+(b*5640|0)+5636|0;while(1){do if(!(Yf(z)|0))break a;while((k[m>>2]|0)>>>0>=d>>>0);k[G>>2]=0;if(!(ph(b,c,E,z,e,G,g,h)|0))break;q=k[G>>2]|0;e=e+q|0;g=g-q|0;k[f>>2]=(k[f>>2]|0)+q;if(!u){if(!(k[w>>2]|0))a=k[x>>2]|0;else{p=k[y>>2]|0;a=k[x>>2]|0;n=k[p+(b*592|0)+548>>2]|0;o=n+(a<<5)|0;if(!a){i=(k[p+(b*592|0)+12>>2]|0)+1|0;p=((i|0)<0)<<31>>31;C=o;k[C>>2]=i;k[C+4>>2]=p}else{if((((l[s>>0]|0)>>>2|(l[t>>0]|0)>>>3)&1)!=0?(B=o,A=k[B>>2]|0,B=k[B+4>>2]|0,!((A|0)==0&(B|0)==0)):0){i=A;p=B}else{i=n+(a+-1<<5)+16|0;i=aj(k[i>>2]|0,k[i+4>>2]|0,1,0)|0;p=L}C=o;k[C>>2]=i;k[C+4>>2]=p}o=aj(i|0,p|0,-1,-1)|0;i=L;q=aj(o|0,i|0,q|0,0)|0;C=n+(a<<5)+16|0;k[C>>2]=q;k[C+4>>2]=L;C=n+(a<<5)+8|0;q=C;q=aj(o|0,i|0,k[q>>2]|0,k[q+4>>2]|0)|0;k[C>>2]=q;k[C+4>>2]=L}k[x>>2]=a+1}k[v>>2]=(k[v>>2]|0)+1}Uf(D,F);b=0;r=H;return b|0}while(0);Uf(D,F);b=1;r=H;return b|0}function mh(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0;_=r;r=r+112|0;W=_+64|0;X=_+32|0;S=_;R=_+96|0;Q=_+92|0;i=k[a>>2]|0;M=a+4|0;Z=k[M>>2]|0;g=k[Z+76>>2]|0;O=g+(b*5640|0)|0;P=g+(b*5640|0)+420|0;Y=(k[P>>2]|0)+1|0;Z=Tf(i,Z,b)|0;if(!Z){$=0;r=_;return $|0}N=i+16|0;L=g+(b*5640|0)+12|0;K=c+20|0;J=i+24|0;b=f;a=d;H=Z;I=0;a:while(1){if((k[H+80>>2]|0)==-1){$=4;break}g=Zc(k[N>>2]<<2)|0;if(!g){$=6;break}_i(g|0,1,k[N>>2]<<2|0)|0;if(Yf(H)|0){f=H+24|0;c=H+28|0;G=H+36|0;i=H+32|0;F=b;E=a;while(1){if((k[L>>2]|0)>>>0>(k[G>>2]|0)>>>0){b=k[f>>2]|0;a=k[K>>2]|0;if((k[c>>2]|0)>>>0<(k[a+(b*52|0)+20>>2]|0)>>>0){k[g+(b<<2)>>2]=0;D=k[M>>2]|0;k[Q>>2]=0;if(!(qh(D,a,O,H,R,E,Q,F,h)|0)){$=45;break a}C=k[Q>>2]|0;if(!(k[R>>2]|0))a=C;else{B=F-C|0;z=E+C|0;k[Q>>2]=0;b=k[c>>2]|0;j=k[(k[K>>2]|0)+((k[f>>2]|0)*52|0)+24>>2]|0;x=j+(b*136|0)+24|0;a=k[x>>2]|0;b:do if(!a){a=z;$=43}else{y=E+F|0;l=a;D=0;w=j+(b*136|0)+28|0;j=z;c:while(1){a=k[i>>2]|0;b=k[w+20>>2]|0;if(((k[w+8>>2]|0)!=(k[w>>2]|0)?(k[w+12>>2]|0)!=(k[w+4>>2]|0):0)?(V=ha(k[b+(a*40|0)+20>>2]|0,k[b+(a*40|0)+16>>2]|0)|0,(V|0)!=0):0){A=0;a=k[b+(a*40|0)+24>>2]|0;o=j;while(1){u=a+40|0;if(!(k[u>>2]|0))b=o;else{v=a+44|0;b=k[v>>2]|0;do if(!b){n=k[a+4>>2]|0;k[v>>2]=1;k[a+36>>2]=0}else{j=b+-1|0;l=k[a+4>>2]|0;if((k[l+(j<<5)+8>>2]|0)!=(k[l+(j<<5)+20>>2]|0)){n=l+(j<<5)|0;break}k[v>>2]=b+1;n=l+(b<<5)|0}while(0);t=a+36|0;b=a+32|0;s=o;m=n+28|0;j=k[m>>2]|0;if((j+s|0)>>>0<s>>>0|(o+j|0)>>>0>y>>>0){b=D;a=A;break c}l=k[t>>2]|0;s=o;q=n;while(1){n=j+l|0;if(n>>>0<l>>>0){b=D;a=A;$=29;break a}o=k[a>>2]|0;if(n>>>0>(k[b>>2]|0)>>>0){j=bd(o,n)|0;if(!j){$=32;break a}l=k[t>>2]|0;p=k[m>>2]|0;k[b>>2]=p+l;k[a>>2]=j;o=j;j=p}cj(o+l|0,s|0,j|0)|0;j=q+8|0;l=k[j>>2]|0;if(!l){k[q>>2]=a;n=k[t>>2]|0;k[q+4>>2]=n}else n=k[t>>2]|0;o=k[m>>2]|0;p=s;s=s+o|0;m=k[q+24>>2]|0;l=m+l|0;k[j>>2]=l;j=k[u>>2]|0;k[u>>2]=j-m;k[q+12>>2]=l;l=o+n|0;k[t>>2]=l;n=q+16|0;k[n>>2]=(k[n>>2]|0)+o;if((j|0)==(m|0)){b=s;break}k[v>>2]=(k[v>>2]|0)+1;n=s;m=q+60|0;j=k[m>>2]|0;if((j+n|0)>>>0<n>>>0?1:(p+(j+o)|0)>>>0>y>>>0){b=D;a=A;break c}else q=q+32|0}k[a+48>>2]=k[v>>2]}A=A+1|0;if(A>>>0>=V>>>0){a=b;break}else{a=a+56|0;o=b}}b=k[x>>2]|0}else{b=l;a=j}D=D+1|0;if(D>>>0>=b>>>0){$=43;break b}else{l=b;w=w+36|0;j=a}}z=k[i>>2]|0;A=k[c>>2]|0;D=k[f>>2]|0;k[S>>2]=j;k[S+4>>2]=B;k[S+8>>2]=a;k[S+12>>2]=z;k[S+16>>2]=b;k[S+20>>2]=A;k[S+24>>2]=D;cc(h,2,21822,S)|0;a=k[Q>>2]|0}while(0);if(($|0)==43){$=0;a=a-z|0;k[Q>>2]=a}a=a+C|0}j=k[f>>2]|0;C=k[c>>2]|0;b=(k[J>>2]|0)+(j*52|0)+36|0;D=k[b>>2]|0;k[b>>2]=C>>>0>D>>>0?C:D;b=a}else $=47}else{a=k[K>>2]|0;$=47}if(($|0)==47){$=0;D=k[M>>2]|0;k[Q>>2]=0;if(!(qh(D,a,O,H,R,E,Q,F,h)|0)){$=69;break a}u=k[Q>>2]|0;if(!(k[R>>2]|0))a=u;else{j=F-u|0;w=k[c>>2]|0;x=k[f>>2]|0;a=k[(k[K>>2]|0)+(x*52|0)+24>>2]|0;k[Q>>2]=0;t=k[a+(w*136|0)+24>>2]|0;if(!t)a=0;else{v=k[i>>2]|0;b=0;s=a+(w*136|0)+28|0;while(1){l=k[s+20>>2]|0;if(((k[s+8>>2]|0)!=(k[s>>2]|0)?(k[s+12>>2]|0)!=(k[s+4>>2]|0):0)?(T=ha(k[l+(v*40|0)+20>>2]|0,k[l+(v*40|0)+16>>2]|0)|0,(T|0)!=0):0){a=0;q=k[l+(v*40|0)+24>>2]|0;while(1){o=q+40|0;d:do if(k[o>>2]|0){p=q+44|0;l=k[p>>2]|0;do if(!l){n=k[q+4>>2]|0;k[p>>2]=1;k[q+36>>2]=0}else{m=l+-1|0;n=k[q+4>>2]|0;if((k[n+(m<<5)+8>>2]|0)!=(k[n+(m<<5)+20>>2]|0)){n=n+(m<<5)|0;break}k[p>>2]=l+1;n=n+(l<<5)|0}while(0);D=k[Q>>2]|0;l=k[n+28>>2]|0;m=l+D|0;if(m>>>0<D>>>0|m>>>0>j>>>0){f=v;c=w;i=x;$=65;break a}while(1){k[Q>>2]=m;D=k[n+24>>2]|0;C=n+8|0;k[C>>2]=(k[C>>2]|0)+D;C=k[o>>2]|0;k[o>>2]=C-D;if((C|0)==(D|0))break d;k[p>>2]=(k[p>>2]|0)+1;D=k[Q>>2]|0;l=k[n+60>>2]|0;m=l+D|0;if(m>>>0<D>>>0|m>>>0>j>>>0){f=v;c=w;i=x;$=65;break a}else n=n+32|0}}while(0);a=a+1|0;if(a>>>0>=T>>>0)break;else q=q+56|0}}b=b+1|0;if(b>>>0>=t>>>0)break;else s=s+36|0}a=k[Q>>2]|0}a=a+u|0}j=k[f>>2]|0;b=a}if((k[g+(j<<2)>>2]|0)!=0?(U=(k[J>>2]|0)+(j*52|0)+36|0,(k[U>>2]|0)==0):0)k[U>>2]=(k[(k[K>>2]|0)+(j*52|0)+20>>2]|0)+-1;a=E+b|0;b=F-b|0;if(!(Yf(H)|0))break;else{F=b;E=a}}}cd(g);I=I+1|0;if(I>>>0>(k[P>>2]|0)>>>0){g=a;$=75;break}else H=H+232|0}if(($|0)==4){Uf(Z,Y);$=0;r=_;return $|0}else if(($|0)==6){Uf(Z,Y);$=0;r=_;return $|0}else if(($|0)==29){e=k[i>>2]|0;d=k[c>>2]|0;W=k[f>>2]|0;k[X>>2]=j;k[X+4>>2]=l;k[X+8>>2]=~j;k[X+12>>2]=a;k[X+16>>2]=e;k[X+20>>2]=b;k[X+24>>2]=d;k[X+28>>2]=W;cc(h,1,21907,X)|0;$=45}else if(($|0)==32){cd(k[a>>2]|0);k[a>>2]=0;k[b>>2]=0;$=45}else if(($|0)==65){k[W>>2]=l;k[W+4>>2]=j;k[W+8>>2]=a;k[W+12>>2]=f;k[W+16>>2]=b;k[W+20>>2]=c;k[W+24>>2]=i;cc(h,1,22006,W)|0;$=69}else if(($|0)==75){Uf(Z,Y);k[e>>2]=g-d;$=1;r=_;return $|0}if(($|0)==45){Uf(Z,Y);cd(g);$=0;r=_;return $|0}else if(($|0)==69){Uf(Z,Y);cd(g);$=0;r=_;return $|0}return 0}function nh(a,b){a=a|0;b=b|0;var c=0;c=_c(1,8)|0;if(!c){a=0;return a|0}k[c>>2]=a;k[c+4>>2]=b;a=c;return a|0}function oh(a){a=a|0;if(!a)return;cd(a);return}function ph(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,l=0,m=0,n=0,o=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0.0,J=0,K=0;s=k[d+28>>2]|0;J=k[d+32>>2]|0;K=k[d+36>>2]|0;r=k[(k[b+20>>2]|0)+((k[d+24>>2]|0)*52|0)+24>>2]|0;if(!(k[c>>2]&2))G=e;else{i[e>>0]=-1;i[e+1>>0]=-111;i[e+2>>0]=0;i[e+3>>0]=4;G=b+840|0;i[e+4>>0]=(k[G>>2]|0)>>>8;i[e+5>>0]=k[G>>2];g=g+-6|0;G=e+6|0}if((K|0)==0?(q=r+(s*136|0)+24|0,(k[q>>2]|0)!=0):0){n=r+(s*136|0)+28|0;o=0;while(1){d=k[n+20>>2]|0;ug(k[d+(J*40|0)+32>>2]|0);l=d+(J*40|0)+36|0;ug(k[l>>2]|0);m=ha(k[d+(J*40|0)+20>>2]|0,k[d+(J*40|0)+16>>2]|0)|0;if(m){d=d+(J*40|0)+24|0;b=n+28|0;j=0;do{H=k[d>>2]|0;k[H+(j*52|0)+40>>2]=0;xg(k[l>>2]|0,j,(k[b>>2]|0)-(k[H+(j*52|0)+28>>2]|0)|0);j=j+1|0}while((j|0)!=(m|0))}o=o+1|0;if(o>>>0>=(k[q>>2]|0)>>>0)break;else n=n+36|0}}E=Gg()|0;if(!E){f=0;return f|0}Jg(E,G,g);Lg(E,1,1);F=r+(s*136|0)+28|0;H=r+(s*136|0)+24|0;if(k[H>>2]|0){A=K+1|0;C=F;D=0;while(1){m=k[C+20>>2]|0;B=ha(k[m+(J*40|0)+20>>2]|0,k[m+(J*40|0)+16>>2]|0)|0;n=m+(J*40|0)+24|0;d=(B|0)==0;if(!d){b=m+(J*40|0)+32|0;j=k[n>>2]|0;l=0;while(1){if((k[j+40>>2]|0)==0?(k[(k[j+4>>2]|0)+(K*24|0)>>2]|0)!=0:0)xg(k[b>>2]|0,l,K);l=l+1|0;if((l|0)==(B|0))break;else j=j+52|0}if(!d){z=m+(J*40|0)+32|0;y=m+(J*40|0)+36|0;w=k[n>>2]|0;x=0;while(1){d=(k[w+4>>2]|0)+(K*24|0)|0;v=w+40|0;if(!(k[v>>2]|0))yg(E,k[z>>2]|0,x,A);else Lg(E,(k[d>>2]|0)!=0&1,1);b=k[d>>2]|0;if(b){if(!(k[v>>2]|0)){k[w+32>>2]=3;yg(E,k[y>>2]|0,x,999);b=k[d>>2]|0}a:do switch(b|0){case 1:{Lg(E,0,1);break}case 2:{Lg(E,2,2);break}default:{if(b>>>0<6){Lg(E,b+-3|12,4);break a}if(b>>>0<37){Lg(E,b+-6|480,9);break a}if(b>>>0<165)Lg(E,b+-37|65408,16)}}while(0);n=k[v>>2]|0;b=k[d>>2]|0;u=b+n|0;t=w+8|0;if(n>>>0<u>>>0){s=w+32|0;q=n+-1+b|0;l=0;m=0;j=0;r=(k[t>>2]|0)+(n*24|0)|0;while(1){j=j+1|0;m=(k[r+16>>2]|0)+m|0;if((i[r+20>>0]&1)!=0|(n|0)==(q|0)){if((m|0)>1){b=0;do{m=m>>1;b=b+1|0}while((m|0)>1)}else b=0;o=k[s>>2]|0;if((j|0)>1){m=0;do{j=j>>1;m=m+1|0}while((j|0)>1);j=m}else j=0;m=b+1-o-j|0;l=(l|0)>(m|0)?l:m;m=0;j=0}n=n+1|0;if((n|0)==(u|0))break;else r=r+24|0}if((l|0)>0){b=l;while(1){Lg(E,1,1);if((b|0)>1)b=b+-1|0;else{b=m;break}}}else b=m}else{l=0;b=0;j=0}Lg(E,0,1);q=w+32|0;k[q>>2]=(k[q>>2]|0)+l;l=k[v>>2]|0;if(l>>>0<u>>>0){o=(k[t>>2]|0)+(l*24|0)|0;while(1){j=j+1|0;m=(k[o+16>>2]|0)+b|0;if((i[o+20>>0]&1)==0?(l|0)!=((k[v>>2]|0)+-1+(k[d>>2]|0)|0):0)b=m;else{n=k[q>>2]|0;if((j|0)>1){b=0;do{j=j>>1;b=b+1|0}while((j|0)>1)}else b=0;Lg(E,m,b+n|0);b=0;j=0}l=l+1|0;if((l|0)==(u|0))break;else o=o+24|0}}}x=x+1|0;if((x|0)==(B|0))break;else w=w+52|0}}}D=D+1|0;if(D>>>0>=(k[H>>2]|0)>>>0)break;else C=C+36|0}}if(!(Ng(E)|0)){Hg(E);f=0;return f|0}b=Ig(E)|0;d=G+b|0;g=g-b|0;Hg(E);if(k[c>>2]&4){i[d>>0]=-1;i[G+(b+1)>>0]=-110;g=g+-2|0;d=G+(b+2)|0}t=(h|0)!=0;if(t?(k[h+12>>2]|0)!=0:0){G=d-e|0;c=(k[(k[h+88>>2]|0)+(a*592|0)+548>>2]|0)+(k[h+8>>2]<<5)+8|0;k[c>>2]=G;k[c+4>>2]=((G|0)<0)<<31>>31}b=k[H>>2]|0;b:do if(b){u=h+12|0;v=h+8|0;w=h+88|0;r=F;s=0;c:while(1){j=k[r+20>>2]|0;q=ha(k[j+(J*40|0)+20>>2]|0,k[j+(J*40|0)+16>>2]|0)|0;j=k[j+(J*40|0)+24>>2]|0;if(q){if(t){o=0;while(1){n=k[j+4>>2]|0;b=n+(K*24|0)|0;if(k[b>>2]|0){l=n+(K*24|0)+4|0;m=k[l>>2]|0;if(m>>>0>g>>>0){d=0;g=81;break c}cj(d|0,k[n+(K*24|0)+16>>2]|0,m|0)|0;c=j+40|0;k[c>>2]=(k[c>>2]|0)+(k[b>>2]|0);c=k[l>>2]|0;d=d+c|0;g=g-c|0;if((k[u>>2]|0)!=0?(c=(k[(k[w>>2]|0)+(a*592|0)+548>>2]|0)+(k[v>>2]<<5)+24|0,I=+p[n+(K*24|0)+8>>3]+ +p[c>>3],p[c>>3]=I,+p[h>>3]<I):0)p[h>>3]=I}o=o+1|0;if(o>>>0>=q>>>0)break;else j=j+52|0}}else{o=0;while(1){b=k[j+4>>2]|0;l=b+(K*24|0)|0;if(k[l>>2]|0){m=b+(K*24|0)+4|0;n=k[m>>2]|0;if(n>>>0>g>>>0){d=0;g=81;break c}cj(d|0,k[b+(K*24|0)+16>>2]|0,n|0)|0;c=j+40|0;k[c>>2]=(k[c>>2]|0)+(k[l>>2]|0);c=k[m>>2]|0;g=g-c|0;d=d+c|0}o=o+1|0;if(o>>>0>=q>>>0)break;else j=j+52|0}}b=k[H>>2]|0}s=s+1|0;if(s>>>0>=b>>>0)break b;else r=r+36|0}if((g|0)==81)return d|0}while(0);k[f>>2]=d-e+(k[f>>2]|0);f=1;return f|0}function qh(a,b,c,d,e,f,g,h,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;N=r;r=r+64|0;L=N+40|0;K=N+32|0;x=N+24|0;w=N+16|0;u=N+8|0;t=N;v=N+48|0;M=N+44|0;k[M>>2]=f;z=k[d+28>>2]|0;J=d+24|0;y=k[b+((k[J>>2]|0)*52|0)+24>>2]|0;H=d+36|0;if((k[H>>2]|0)==0?(s=y+(z*136|0)+24|0,l=k[s>>2]|0,(l|0)!=0):0){q=d+32|0;o=0;p=y+(z*136|0)+28|0;while(1){b=k[q>>2]|0;m=k[p+20>>2]|0;if((k[p+8>>2]|0)!=(k[p>>2]|0)?(k[p+12>>2]|0)!=(k[p+4>>2]|0):0){ug(k[m+(b*40|0)+32>>2]|0);ug(k[m+(b*40|0)+36>>2]|0);l=ha(k[m+(b*40|0)+20>>2]|0,k[m+(b*40|0)+16>>2]|0)|0;if(l){n=0;b=k[m+(b*40|0)+24>>2]|0;while(1){k[b+44>>2]=0;k[b+48>>2]=0;n=n+1|0;if((n|0)==(l|0))break;else b=b+56|0}}l=k[s>>2]|0}o=o+1|0;if(o>>>0>=l>>>0)break;else p=p+36|0}}do if(k[c>>2]&2){if(h>>>0<6){cc(j,2,22091,t)|0;break}b=k[M>>2]|0;if((i[b>>0]|0)==-1?(i[b+1>>0]|0)==-111:0){k[M>>2]=b+6;break}cc(j,2,22133,u)|0}while(0);G=Gg()|0;if(!G){f=0;r=N;return f|0}do if(!(i[a+96>>0]&1))if(!(i[c+5636>>0]&2)){E=k[M>>2]|0;k[v>>2]=f+h-E;F=M;break}else{F=c+5168|0;E=k[F>>2]|0;v=c+5180|0;break}else{F=a+40|0;E=k[F>>2]|0;v=a+44|0}while(0);Kg(G,E,k[v>>2]|0);if(!(Mg(G,1)|0)){Og(G)|0;l=Ig(G)|0;b=E+l|0;Hg(G);do if(k[c>>2]&4){if(((k[v>>2]|0)-b+(k[F>>2]|0)|0)>>>0<2){cc(j,2,22154,w)|0;break}if((i[b>>0]|0)==-1?(i[E+(l+1)>>0]|0)==-110:0){b=E+(l+2)|0;break}cc(j,2,22196,x)|0}while(0);k[v>>2]=(k[v>>2]|0)+((k[F>>2]|0)-b);k[F>>2]=b;k[e>>2]=0;k[g>>2]=(k[M>>2]|0)-f;f=1;r=N;return f|0}D=y+(z*136|0)+24|0;b=k[D>>2]|0;a:do if(b){B=d+32|0;C=c+5584|0;A=0;y=y+(z*136|0)+28|0;b:while(1){l=k[B>>2]|0;m=k[y+20>>2]|0;if(((k[y+8>>2]|0)!=(k[y>>2]|0)?(k[y+12>>2]|0)!=(k[y+4>>2]|0):0)?(I=ha(k[m+(l*40|0)+20>>2]|0,k[m+(l*40|0)+16>>2]|0)|0,(I|0)!=0):0){a=m+(l*40|0)+32|0;d=m+(l*40|0)+36|0;w=y+28|0;x=0;h=k[m+(l*40|0)+24>>2]|0;while(1){l=h+44|0;if(!(k[l>>2]|0))b=zg(G,k[a>>2]|0,x,(k[H>>2]|0)+1|0)|0;else b=Mg(G,1)|0;c:do if(!b)k[h+40>>2]=0;else{if(!(k[l>>2]|0)){b=0;while(1)if(!(zg(G,k[d>>2]|0,x,b)|0))b=b+1|0;else break;k[h+24>>2]=1-b+(k[w>>2]|0);k[h+28>>2]=3}do if(Mg(G,1)|0)if(Mg(G,1)|0){b=Mg(G,2)|0;if((b|0)!=3){b=b+3|0;break}b=Mg(G,5)|0;if((b|0)==31){b=(Mg(G,7)|0)+37|0;break}else{b=b+6|0;break}}else b=2;else b=1;while(0);t=h+40|0;k[t>>2]=b;b=0;while(1)if(!(Mg(G,1)|0))break;else b=b+1|0;u=h+28|0;k[u>>2]=(k[u>>2]|0)+b;l=k[l>>2]|0;do if(!l){m=k[(k[C>>2]|0)+((k[J>>2]|0)*1080|0)+16>>2]|0;b=h+52|0;if(!(k[b>>2]|0)){k[b>>2]=10;n=h+4|0;l=bd(k[n>>2]|0,320)|0;if(!l){l=b;m=n;b=n;n=66;break b}k[n>>2]=l}else l=k[h+4>>2]|0;k[l>>2]=0;k[l+4>>2]=0;k[l+8>>2]=0;k[l+12>>2]=0;k[l+16>>2]=0;k[l+20>>2]=0;k[l+24>>2]=0;k[l+28>>2]=0;if(m&4){k[l+20>>2]=1;l=0;break}l=l+20|0;if(!(m&1)){k[l>>2]=109;l=0;break}else{k[l>>2]=10;l=0;break}}else{p=l+-1|0;q=h+4|0;m=k[q>>2]|0;if((k[m+(p<<5)+8>>2]|0)!=(k[m+(p<<5)+20>>2]|0)){b=h+52|0;l=p;break}o=k[(k[C>>2]|0)+((k[J>>2]|0)*1080|0)+16>>2]|0;b=h+52|0;n=k[b>>2]|0;if((l+1|0)>>>0>n>>>0){z=n+10|0;k[b>>2]=z;m=bd(m,z<<5)|0;if(!m){m=q;l=b;b=q;n=77;break b}k[q>>2]=m}z=m+(l<<5)|0;k[z>>2]=0;k[z+4>>2]=0;k[z+8>>2]=0;k[z+12>>2]=0;k[z+16>>2]=0;k[z+20>>2]=0;k[z+24>>2]=0;k[z+28>>2]=0;if(o&4){k[m+(l<<5)+20>>2]=1;break}if(!(o&1)){k[m+(l<<5)+20>>2]=109;break}else{z=k[m+(p<<5)+20>>2]|0;k[m+(l<<5)+20>>2]=(z|0)==1|(z|0)==10?2:1;break}}while(0);s=h+4|0;p=k[t>>2]|0;while(1){o=k[s>>2]|0;m=(k[o+(l<<5)+20>>2]|0)-(k[o+(l<<5)+8>>2]|0)|0;m=(m|0)<(p|0)?m:p;k[o+(l<<5)+24>>2]=m;o=k[u>>2]|0;if(m>>>0>1){n=0;while(1){n=n+1|0;if(m>>>0>3)m=m>>>1;else{m=n;break}}}else m=0;o=Mg(G,m+o|0)|0;m=k[s>>2]|0;k[m+(l<<5)+28>>2]=o;o=p-(k[m+(l<<5)+24>>2]|0)|0;if((o|0)<=0)break c;p=l+1|0;q=k[(k[C>>2]|0)+((k[J>>2]|0)*1080|0)+16>>2]|0;n=k[b>>2]|0;if((l+2|0)>>>0>n>>>0){z=n+10|0;k[b>>2]=z;m=bd(m,z<<5)|0;if(!m){m=s;l=s;n=90;break b}k[s>>2]=m}z=m+(p<<5)|0;k[z>>2]=0;k[z+4>>2]=0;k[z+8>>2]=0;k[z+12>>2]=0;k[z+16>>2]=0;k[z+20>>2]=0;k[z+24>>2]=0;k[z+28>>2]=0;if(q&4){k[m+(p<<5)+20>>2]=1;l=p;p=o;continue}if(!(q&1)){k[m+(p<<5)+20>>2]=109;l=p;p=o;continue}else{z=k[m+(l<<5)+20>>2]|0;k[m+(p<<5)+20>>2]=(z|0)==1|(z|0)==10?2:1;l=p;p=o;continue}}}while(0);x=x+1|0;if(x>>>0>=I>>>0)break;else h=h+56|0}b=k[D>>2]|0}A=A+1|0;if(A>>>0>=b>>>0)break a;else y=y+36|0}if((n|0)==66){cd(k[b>>2]|0);k[m>>2]=0;k[l>>2]=0;Hg(G);f=0;r=N;return f|0}else if((n|0)==77){cd(k[b>>2]|0);k[m>>2]=0;k[l>>2]=0;Hg(G);f=0;r=N;return f|0}else if((n|0)==90){cd(k[l>>2]|0);k[m>>2]=0;k[b>>2]=0;Hg(G);f=0;r=N;return f|0}}while(0);if(!(Og(G)|0)){Hg(G);f=0;r=N;return f|0}l=Ig(G)|0;b=E+l|0;Hg(G);do if(k[c>>2]&4){if(((k[v>>2]|0)-b+(k[F>>2]|0)|0)>>>0<2){cc(j,2,22154,K)|0;break}if((i[b>>0]|0)==-1?(i[E+(l+1)>>0]|0)==-110:0){b=E+(l+2)|0;break}cc(j,2,22196,L)|0}while(0);k[v>>2]=(k[v>>2]|0)+((k[F>>2]|0)-b);k[F>>2]=b;k[e>>2]=1;k[g>>2]=(k[M>>2]|0)-f;f=1;r=N;return f|0}function rh(){return Zc(104)|0}function sh(a){a=a|0;if(!a)return;cd(a);return}function th(a){a=a|0;return (k[a+12>>2]|0)-(k[a+16>>2]|0)|0}function uh(a,b){a=a|0;b=b|0;var c=0,d=0;k[a+100>>2]=a+24;k[a+4>>2]=32768;k[a>>2]=0;d=b+-1|0;k[a+12>>2]=d;c=a+8|0;k[c>>2]=12;k[c>>2]=(i[d>>0]|0)==-1?13:12;k[a+16>>2]=b;return}function vh(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0;e=k[a+100>>2]|0;f=k[e>>2]|0;h=(k[f+4>>2]|0)==(b|0);d=k[f>>2]|0;j=a+4|0;b=(k[j>>2]|0)-d|0;k[j>>2]=b;if(!h){if(b>>>0<d>>>0){h=(k[a>>2]|0)+d|0;k[a>>2]=h;d=b;b=h;h=a}else{k[j>>2]=d;b=k[a>>2]|0;h=a}k[e>>2]=k[f+12>>2];g=a+8|0;f=a+12|0;e=b;b=k[g>>2]|0;while(1){d=d<<1;k[j>>2]=d;c=e<<1;k[h>>2]=c;b=b+-1|0;k[g>>2]=b;if(!b){b=k[f>>2]|0;d=i[b>>0]|0;do if(d<<24>>24!=-1){if(!(c&134217728)){c=b+1|0;k[f>>2]=c;i[c>>0]=e>>>18;c=k[h>>2]&524287;k[h>>2]=c;k[g>>2]=8;b=8;break}i[b>>0]=d+1<<24>>24;b=k[f>>2]|0;if((i[b>>0]|0)==-1){a=k[h>>2]&134217727;k[h>>2]=a;c=b+1|0;k[f>>2]=c;i[c>>0]=a>>>20;c=k[h>>2]&1048575;k[h>>2]=c;k[g>>2]=7;b=7;break}else{c=b+1|0;k[f>>2]=c;i[c>>0]=(k[h>>2]|0)>>>19;c=k[h>>2]&524287;k[h>>2]=c;k[g>>2]=8;b=8;break}}else{c=b+1|0;k[f>>2]=c;i[c>>0]=e>>>19;c=k[h>>2]&1048575;k[h>>2]=c;k[g>>2]=7;b=7}while(0);d=k[j>>2]|0}if(!(d&32768))e=c;else break}return}if(b&32768){k[a>>2]=(k[a>>2]|0)+d;return}if(b>>>0<d>>>0){k[j>>2]=d;c=k[a>>2]|0;h=a}else{c=(k[a>>2]|0)+d|0;k[a>>2]=c;d=b;h=a}k[e>>2]=k[f+8>>2];g=a+8|0;f=a+12|0;e=c;b=k[g>>2]|0;while(1){d=d<<1;k[j>>2]=d;c=e<<1;k[h>>2]=c;b=b+-1|0;k[g>>2]=b;if(!b){b=k[f>>2]|0;d=i[b>>0]|0;do if(d<<24>>24!=-1){if(!(c&134217728)){c=b+1|0;k[f>>2]=c;i[c>>0]=e>>>18;c=k[h>>2]&524287;k[h>>2]=c;k[g>>2]=8;b=8;break}i[b>>0]=d+1<<24>>24;b=k[f>>2]|0;if((i[b>>0]|0)==-1){a=k[h>>2]&134217727;k[h>>2]=a;c=b+1|0;k[f>>2]=c;i[c>>0]=a>>>20;c=k[h>>2]&1048575;k[h>>2]=c;k[g>>2]=7;b=7;break}else{c=b+1|0;k[f>>2]=c;i[c>>0]=(k[h>>2]|0)>>>19;c=k[h>>2]&524287;k[h>>2]=c;k[g>>2]=8;b=8;break}}else{c=b+1|0;k[f>>2]=c;i[c>>0]=e>>>19;c=k[h>>2]&1048575;k[h>>2]=c;k[g>>2]=7;b=7}while(0);d=k[j>>2]|0}if(!(d&32768))e=c;else break}return}function wh(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;f=k[a>>2]|0;d=f|65535;e=a+8|0;d=(d>>>0<((k[a+4>>2]|0)+f|0)>>>0?d:d+-32768|0)<<k[e>>2];k[a>>2]=d;f=a+12|0;b=k[f>>2]|0;c=i[b>>0]|0;do if(c<<24>>24!=-1){if(!(d&134217728)){b=b+1|0;k[f>>2]=b;i[b>>0]=d>>>19;b=k[a>>2]&524287;k[a>>2]=b;k[e>>2]=8;c=8;break}i[b>>0]=c+1<<24>>24;b=k[f>>2]|0;if((i[b>>0]|0)==-1){c=k[a>>2]&134217727;k[a>>2]=c;b=b+1|0;k[f>>2]=b;i[b>>0]=c>>>20;b=k[a>>2]&1048575;k[a>>2]=b;k[e>>2]=7;c=7;break}else{b=b+1|0;k[f>>2]=b;i[b>>0]=(k[a>>2]|0)>>>19;b=k[a>>2]&524287;k[a>>2]=b;k[e>>2]=8;c=8;break}}else{b=b+1|0;k[f>>2]=b;i[b>>0]=d>>>20;b=k[a>>2]&1048575;k[a>>2]=b;k[e>>2]=7;c=7}while(0);b=b<<c;k[a>>2]=b;c=k[f>>2]|0;d=i[c>>0]|0;do if(d<<24>>24!=-1){if(!(b&134217728)){d=c+1|0;k[f>>2]=d;i[d>>0]=b>>>19;k[a>>2]=k[a>>2]&524287;k[e>>2]=8;break}i[c>>0]=d+1<<24>>24;b=k[f>>2]|0;if((i[b>>0]|0)==-1){c=k[a>>2]&134217727;k[a>>2]=c;d=b+1|0;k[f>>2]=d;i[d>>0]=c>>>20;k[a>>2]=k[a>>2]&1048575;k[e>>2]=7;break}else{d=b+1|0;k[f>>2]=d;i[d>>0]=(k[a>>2]|0)>>>19;k[a>>2]=k[a>>2]&524287;k[e>>2]=8;break}}else{d=c+1|0;k[f>>2]=d;i[d>>0]=b>>>20;k[a>>2]=k[a>>2]&1048575;k[e>>2]=7}while(0);b=k[f>>2]|0;if((i[b>>0]|0)==-1)return;k[f>>2]=b+1;return}function xh(a){a=a|0;k[a>>2]=0;k[a+8>>2]=8;return}function yh(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=a+8|0;d=(k[c>>2]|0)+-1|0;k[c>>2]=d;b=(b<<d)+(k[a>>2]|0)|0;k[a>>2]=b;if(d)return;d=a+12|0;e=(k[d>>2]|0)+1|0;k[d>>2]=e;i[e>>0]=b;k[c>>2]=8;k[c>>2]=(i[k[d>>2]>>0]|0)==-1?7:8;k[a>>2]=0;return}function zh(a){a=a|0;k[a+28>>2]=1156;k[a+32>>2]=1156;k[a+36>>2]=1156;k[a+40>>2]=1156;k[a+44>>2]=1156;k[a+48>>2]=1156;k[a+52>>2]=1156;k[a+56>>2]=1156;k[a+60>>2]=1156;k[a+64>>2]=1156;k[a+68>>2]=1156;k[a+72>>2]=1156;k[a+76>>2]=1156;k[a+80>>2]=1156;k[a+84>>2]=1156;k[a+88>>2]=1156;k[a+96>>2]=2628;k[a+92>>2]=1252;k[a+24>>2]=1284;return}function Ah(a){a=a|0;k[a+24>>2]=1156;k[a+28>>2]=1156;k[a+32>>2]=1156;k[a+36>>2]=1156;k[a+40>>2]=1156;k[a+44>>2]=1156;k[a+48>>2]=1156;k[a+52>>2]=1156;k[a+56>>2]=1156;k[a+60>>2]=1156;k[a+64>>2]=1156;k[a+68>>2]=1156;k[a+72>>2]=1156;k[a+76>>2]=1156;k[a+80>>2]=1156;k[a+84>>2]=1156;k[a+88>>2]=1156;k[a+92>>2]=1156;k[a+96>>2]=1156;return}function Bh(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;k[a+24+(b<<2)>>2]=1156+((d<<1)+c<<4);return}function Ch(a){a=a|0;var b=0,c=0;k[a+100>>2]=a+24;k[a+4>>2]=32768;k[a>>2]=0;b=a+8|0;k[b>>2]=12;c=a+12|0;a=(k[c>>2]|0)+-1|0;k[c>>2]=a;if((i[a>>0]|0)!=-1)return;k[b>>2]=13;return}function Dh(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;g=a+8|0;b=k[g>>2]|0;d=12-b|0;if((d|0)>0){e=a+12|0;c=k[a>>2]|0;do{b=c<<b;k[a>>2]=b;k[g>>2]=0;c=k[e>>2]|0;f=i[c>>0]|0;do if(f<<24>>24!=-1){if(!(b&134217728)){c=c+1|0;k[e>>2]=c;i[c>>0]=b>>>19;c=k[a>>2]&524287;k[a>>2]=c;k[g>>2]=8;b=8;break}i[c>>0]=f+1<<24>>24;b=k[e>>2]|0;if((i[b>>0]|0)==-1){f=k[a>>2]&134217727;k[a>>2]=f;c=b+1|0;k[e>>2]=c;i[c>>0]=f>>>20;c=k[a>>2]&1048575;k[a>>2]=c;k[g>>2]=7;b=7;break}else{c=b+1|0;k[e>>2]=c;i[c>>0]=(k[a>>2]|0)>>>19;c=k[a>>2]&524287;k[a>>2]=c;k[g>>2]=8;b=8;break}}else{c=c+1|0;k[e>>2]=c;i[c>>0]=b>>>20;c=k[a>>2]&1048575;k[a>>2]=c;k[g>>2]=7;b=7}while(0);d=d-b|0}while((d|0)>0)}else e=a+12|0;b=k[e>>2]|0;c=i[b>>0]|0;if(c<<24>>24==-1)return;d=k[a>>2]|0;if(!(d&134217728)){f=b+1|0;k[e>>2]=f;i[f>>0]=d>>>19;k[a>>2]=k[a>>2]&524287;k[g>>2]=8;return}i[b>>0]=c+1<<24>>24;b=k[e>>2]|0;if((i[b>>0]|0)==-1){d=k[a>>2]&134217727;k[a>>2]=d;f=b+1|0;k[e>>2]=f;i[f>>0]=d>>>20;k[a>>2]=k[a>>2]&1048575;k[g>>2]=7;return}else{f=b+1|0;k[e>>2]=f;i[f>>0]=(k[a>>2]|0)>>>19;k[a>>2]=k[a>>2]&524287;k[g>>2]=8;return}}function Eh(a){a=a|0;k[a+100>>2]=a+96;vh(a,1);vh(a,0);vh(a,1);vh(a,0);return}function Fh(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;k[a+100>>2]=a+24;k[a+16>>2]=b;k[a+20>>2]=b+c;e=a+12|0;k[e>>2]=b;do if(c){f=l[b>>0]<<16;k[a>>2]=f;d=b+1|0;if((c|0)==1)c=255;else c=l[d>>0]|0;if((i[b>>0]|0)!=-1){k[e>>2]=d;d=f|c<<8;k[a>>2]=d;c=a+8|0;k[c>>2]=8;e=a;f=1;break}if(c>>>0>143){d=f|65280;k[a>>2]=d;c=a+8|0;k[c>>2]=8;e=a;f=1;break}else{k[e>>2]=d;d=f+(c<<9)|0;k[a>>2]=d;c=a+8|0;k[c>>2]=7;e=a;f=0;break}}else{k[a>>2]=16776960;c=a+8|0;k[c>>2]=8;d=16776960;e=a;f=1}while(0);k[e>>2]=d<<7;k[c>>2]=f;k[a+4>>2]=32768;return 1}function Gh(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,j=0,m=0,n=0;c=k[a+100>>2]|0;d=k[c>>2]|0;g=k[d>>2]|0;n=a+4|0;f=(k[n>>2]|0)-g|0;k[n>>2]=f;e=k[a>>2]|0;if(e>>>16>>>0<g>>>0){k[n>>2]=g;b=k[d+4>>2]|0;if(f>>>0<g>>>0)k[c>>2]=k[d+8>>2];else{k[c>>2]=k[d+12>>2];b=1-b|0}h=a+8|0;j=a+12|0;m=a+20|0;d=k[h>>2]|0;c=e;do{do if(!d){e=k[j>>2]|0;d=k[m>>2]|0;if((e|0)==(d|0)){c=c+65280|0;k[a>>2]=c;k[h>>2]=8;d=8;break}f=e+1|0;if((f|0)==(d|0))d=255;else d=l[f>>0]|0;if((i[e>>0]|0)!=-1){k[j>>2]=f;c=c+(d<<8)|0;k[a>>2]=c;k[h>>2]=8;d=8;break}if(d>>>0>143){c=c+65280|0;k[a>>2]=c;k[h>>2]=8;d=8;break}else{k[j>>2]=f;c=c+(d<<9)|0;k[a>>2]=c;k[h>>2]=7;d=7;break}}while(0);g=g<<1;k[n>>2]=g;c=c<<1;k[a>>2]=c;d=d+-1|0;k[h>>2]=d}while(g>>>0<32768);return b|0}e=e-(g<<16)|0;k[a>>2]=e;if(f&32768){a=k[d+4>>2]|0;return a|0}b=k[d+4>>2]|0;if(g>>>0>f>>>0){k[c>>2]=k[d+12>>2];b=1-b|0}else k[c>>2]=k[d+8>>2];h=a+8|0;j=a+12|0;m=a+20|0;d=k[h>>2]|0;c=e;g=f;do{do if(!d){e=k[j>>2]|0;d=k[m>>2]|0;if((e|0)==(d|0)){c=c+65280|0;k[a>>2]=c;k[h>>2]=8;d=8;break}f=e+1|0;if((f|0)==(d|0))d=255;else d=l[f>>0]|0;if((i[e>>0]|0)!=-1){k[j>>2]=f;c=c+(d<<8)|0;k[a>>2]=c;k[h>>2]=8;d=8;break}if(d>>>0>143){c=c+65280|0;k[a>>2]=c;k[h>>2]=8;d=8;break}else{k[j>>2]=f;c=c+(d<<9)|0;k[a>>2]=c;k[h>>2]=7;d=7;break}}while(0);g=g<<1;k[n>>2]=g;c=c<<1;k[a>>2]=c;d=d+-1|0;k[h>>2]=d}while(g>>>0<32768);return b|0}function Hh(){return Zc(28)|0}function Ih(a){a=a|0;if(!a)return;cd(a);return}function Jh(a,b,c){a=a|0;b=b|0;c=c|0;k[a+20>>2]=b;k[a+8>>2]=c;k[a+12>>2]=0;i[a>>0]=0;k[a+4>>2]=0;return}function Kh(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;e=a+4|0;b=k[e>>2]|0;do if(!b){k[e>>2]=8;c=a+12|0;d=k[c>>2]|0;if((d|0)==(k[a+8>>2]|0)){i[a>>0]=-1;b=8;c=-1;break}if((i[a>>0]|0)==-1){k[e>>2]=7;b=7}else b=8;f=i[(k[a+20>>2]|0)+d>>0]|0;i[a>>0]=f;k[c>>2]=d+1;c=f}else c=i[a>>0]|0;while(0);f=b+-1|0;k[e>>2]=f;return (c&255)>>>f&1|0}function Lh(){var a=0;if(!(k[665]|0))a=2712;else{a=(La()|0)+60|0;a=k[a>>2]|0}return a|0}function Mh(a){a=a|0;var b=0,c=0;b=0;while(1){if((l[22217+b>>0]|0)==(a|0)){c=2;break}b=b+1|0;if((b|0)==87){b=87;a=22305;c=5;break}}if((c|0)==2)if(!b)a=22305;else{a=22305;c=5}if((c|0)==5)while(1){c=a;while(1){a=c+1|0;if(!(i[c>>0]|0))break;else c=a}b=b+-1|0;if(!b)break;else c=5}return a|0}function Nh(a){a=a|0;var b=0;if(a>>>0>4294963200){b=Lh()|0;k[b>>2]=0-a;a=-1}return a|0}function Oh(a,b){a=+a;b=b|0;var c=0,d=0,e=0;p[t>>3]=a;c=k[t>>2]|0;d=k[t+4>>2]|0;e=bj(c|0,d|0,52)|0;e=e&2047;switch(e|0){case 0:{if(a!=0.0){a=+Oh(a*18446744073709551616.0,b);c=(k[b>>2]|0)+-64|0}else c=0;k[b>>2]=c;break}case 2047:break;default:{k[b>>2]=e+-1022;k[t>>2]=c;k[t+4>>2]=d&-2146435073|1071644672;a=+p[t>>3]}}return +a}function Ph(a,b){a=+a;b=b|0;return +(+Oh(a,b))}function Qh(a,b){a=+a;b=b|0;return +(+Th(a,b))}function Rh(a){a=+a;return ~~+Sh(a)|0}function Sh(a){a=+a;var b=0;b=(o[t>>2]=a,k[t>>2]|0);if((b&2130706432)>>>0<=1249902592){b=(b|0)<0;a=b?a+-8388608.0+8388608.0:a+8388608.0+-8388608.0;if(a==0.0)a=b?-0.0:0.0}return +a}function Th(a,b){a=+a;b=b|0;var c=0;if((b|0)>1023){a=a*8988465674311579538646525.0e283;c=b+-1023|0;if((c|0)>1023){c=b+-2046|0;c=(c|0)>1023?1023:c;a=a*8988465674311579538646525.0e283}}else if((b|0)<-1022){a=a*2.2250738585072014e-308;c=b+1022|0;if((c|0)<-1022){c=b+2044|0;c=(c|0)<-1022?-1022:c;a=a*2.2250738585072014e-308}}else c=b;c=$i(c+1023|0,0,52)|0;b=L;k[t>>2]=c;k[t+4>>2]=b;return +(a*+p[t>>3])}function Uh(a,b,c){a=a|0;b=b|0;c=c|0;do if(a){if(b>>>0<128){i[a>>0]=b;a=1;break}if(b>>>0<2048){i[a>>0]=b>>>6|192;i[a+1>>0]=b&63|128;a=2;break}if(b>>>0<55296|(b&-8192|0)==57344){i[a>>0]=b>>>12|224;i[a+1>>0]=b>>>6&63|128;i[a+2>>0]=b&63|128;a=3;break}if((b+-65536|0)>>>0<1048576){i[a>>0]=b>>>18|240;i[a+1>>0]=b>>>12&63|128;i[a+2>>0]=b>>>6&63|128;i[a+3>>0]=b&63|128;a=4;break}else{a=Lh()|0;k[a>>2]=84;a=-1;break}}else a=1;while(0);return a|0}function Vh(a,b){a=a|0;b=b|0;if(!a)a=0;else a=Uh(a,b,0)|0;return a|0}function Wh(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0;n=r;r=r+112|0;m=n+40|0;j=n+24|0;h=n+16|0;e=n;l=n+52|0;d=i[b>>0]|0;if(Bi(24109,d<<24>>24,4)|0){c=Pi(1144)|0;if(!c)c=0;else{f=c;g=f+112|0;do{k[f>>2]=0;f=f+4|0}while((f|0)<(g|0));if(!(Di(b,43)|0))k[c>>2]=d<<24>>24==114?8:4;if(Di(b,101)|0){k[e>>2]=a;k[e+4>>2]=2;k[e+8>>2]=1;Aa(221,e|0)|0;d=i[b>>0]|0}if(d<<24>>24==97){k[h>>2]=a;k[h+4>>2]=3;d=Aa(221,h|0)|0;if(!(d&1024)){k[j>>2]=a;k[j+4>>2]=4;k[j+8>>2]=d|1024;Aa(221,j|0)|0}b=k[c>>2]|128;k[c>>2]=b}else b=k[c>>2]|0;k[c+60>>2]=a;k[c+44>>2]=c+120;k[c+48>>2]=1024;d=c+75|0;i[d>>0]=-1;if((b&8|0)==0?(k[m>>2]=a,k[m+4>>2]=21505,k[m+8>>2]=l,(Oa(54,m|0)|0)==0):0)i[d>>0]=10;k[c+32>>2]=60;k[c+36>>2]=61;k[c+40>>2]=3;k[c+12>>2]=1;if(!(k[666]|0))k[c+76>>2]=-1;Ra(2688);d=k[671]|0;k[c+56>>2]=d;if(d)k[d+52>>2]=c;k[671]=c;Pa(2688)}}else{c=Lh()|0;k[c>>2]=22;c=0}r=n;return c|0}function Xh(a){a=a|0;var b=0,c=0,d=0;c=(Di(a,43)|0)==0;b=i[a>>0]|0;c=c?b<<24>>24!=114&1:2;d=(Di(a,120)|0)==0;c=d?c:c|128;a=(Di(a,101)|0)==0;a=a?c:c|524288;a=b<<24>>24==114?a:a|64;a=b<<24>>24==119?a|512:a;return (b<<24>>24==97?a|1024:a)|0}function Yh(a){a=a|0;return 0}function Zh(a){a=a|0;return}function _h(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0;j=r;r=r+16|0;h=j;g=b&255;i[h>>0]=g;d=a+16|0;e=k[d>>2]|0;if(!e)if(!(fi(a)|0)){e=k[d>>2]|0;f=4}else c=-1;else f=4;do if((f|0)==4){d=a+20|0;f=k[d>>2]|0;if(f>>>0<e>>>0?(c=b&255,(c|0)!=(i[a+75>>0]|0)):0){k[d>>2]=f+1;i[f>>0]=g;break}if(($a[k[a+36>>2]&63](a,h,1)|0)==1)c=l[h>>0]|0;else c=-1}while(0);r=j;return c|0}function $h(a){a=a|0;var b=0,c=0;b=r;r=r+16|0;c=b;k[c>>2]=k[a+60>>2];a=Nh(Sa(6,c|0)|0)|0;r=b;return a|0}function ai(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0;l=r;r=r+48|0;f=l+16|0;e=l;d=l+32|0;k[d>>2]=b;g=d+4|0;j=a+48|0;m=k[j>>2]|0;k[g>>2]=c-((m|0)!=0&1);h=a+44|0;k[d+8>>2]=k[h>>2];k[d+12>>2]=m;if(!(k[665]|0)){k[f>>2]=k[a+60>>2];k[f+4>>2]=d;k[f+8>>2]=2;d=Nh(Wa(145,f|0)|0)|0}else{Da(5,a|0);k[e>>2]=k[a+60>>2];k[e+4>>2]=d;k[e+8>>2]=2;d=Nh(Wa(145,e|0)|0)|0;za(0)}if((d|0)>=1){g=k[g>>2]|0;if(d>>>0>g>>>0){f=k[h>>2]|0;e=a+4|0;k[e>>2]=f;k[a+8>>2]=f+(d-g);if(!(k[j>>2]|0))d=c;else{k[e>>2]=f+1;i[b+(c+-1)>>0]=i[f>>0]|0;d=c}}}else{k[a>>2]=k[a>>2]|d&48^16;k[a+8>>2]=0;k[a+4>>2]=0}r=l;return d|0}function bi(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0;e=r;r=r+32|0;f=e;d=e+20|0;k[f>>2]=k[a+60>>2];k[f+4>>2]=0;k[f+8>>2]=b;k[f+12>>2]=d;k[f+16>>2]=c;if((Nh(Va(140,f|0)|0)|0)<0){k[d>>2]=-1;a=-1}else a=k[d>>2]|0;r=e;return a|0}function ci(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;p=r;r=r+48|0;m=p+16|0;l=p;d=p+32|0;n=a+28|0;e=k[n>>2]|0;k[d>>2]=e;o=a+20|0;e=(k[o>>2]|0)-e|0;k[d+4>>2]=e;k[d+8>>2]=b;k[d+12>>2]=c;i=a+60|0;j=a+44|0;b=2;e=e+c|0;while(1){if(!(k[665]|0)){k[m>>2]=k[i>>2];k[m+4>>2]=d;k[m+8>>2]=b;g=Nh(Xa(146,m|0)|0)|0}else{Da(6,a|0);k[l>>2]=k[i>>2];k[l+4>>2]=d;k[l+8>>2]=b;g=Nh(Xa(146,l|0)|0)|0;za(0)}if((e|0)==(g|0)){e=6;break}if((g|0)<0){e=8;break}e=e-g|0;f=k[d+4>>2]|0;if(g>>>0<=f>>>0)if((b|0)==2){k[n>>2]=(k[n>>2]|0)+g;h=f;b=2}else h=f;else{h=k[j>>2]|0;k[n>>2]=h;k[o>>2]=h;h=k[d+12>>2]|0;g=g-f|0;d=d+8|0;b=b+-1|0}k[d>>2]=(k[d>>2]|0)+g;k[d+4>>2]=h-g}if((e|0)==6){m=k[j>>2]|0;k[a+16>>2]=m+(k[a+48>>2]|0);a=m;k[n>>2]=a;k[o>>2]=a}else if((e|0)==8){k[a+16>>2]=0;k[n>>2]=0;k[o>>2]=0;k[a>>2]=k[a>>2]|32;if((b|0)==2)c=0;else c=c-(k[d+4>>2]|0)|0}r=p;return c|0}function di(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=r;r=r+80|0;d=e;k[a+36>>2]=61;if((k[a>>2]&64|0)==0?(k[d>>2]=k[a+60>>2],k[d+4>>2]=21505,k[d+8>>2]=e+12,(Oa(54,d|0)|0)!=0):0)i[a+75>>0]=-1;d=ci(a,b,c)|0;r=e;return d|0}function ei(a){a=a|0;var b=0,c=0;b=a+74|0;c=i[b>>0]|0;i[b>>0]=c+255|c;b=a+20|0;c=a+44|0;if((k[b>>2]|0)>>>0>(k[c>>2]|0)>>>0)$a[k[a+36>>2]&63](a,0,0)|0;k[a+16>>2]=0;k[a+28>>2]=0;k[b>>2]=0;b=k[a>>2]|0;if(b&20)if(!(b&4))b=-1;else{k[a>>2]=b|32;b=-1}else{b=k[c>>2]|0;k[a+8>>2]=b;k[a+4>>2]=b;b=0}return b|0}function fi(a){a=a|0;var b=0,c=0;b=a+74|0;c=i[b>>0]|0;i[b>>0]=c+255|c;b=k[a>>2]|0;if(!(b&8)){k[a+8>>2]=0;k[a+4>>2]=0;b=k[a+44>>2]|0;k[a+28>>2]=b;k[a+20>>2]=b;k[a+16>>2]=b+(k[a+48>>2]|0);b=0}else{k[a>>2]=b|32;b=-1}return b|0}function gi(a){a=a|0;var b=0,c=0,d=0;d=(k[a>>2]&1|0)!=0;if(!d){Ra(2688);c=k[a+52>>2]|0;b=a+56|0;if(c)k[c+56>>2]=k[b>>2];b=k[b>>2]|0;if(b)k[b+52>>2]=c;if((k[671]|0)==(a|0))k[671]=b;Pa(2688)}b=hi(a)|0;b=eb[k[a+12>>2]&15](a)|0|b;c=k[a+92>>2]|0;if(c)Qi(c);if(!d)Qi(a);return b|0}function hi(a){a=a|0;var b=0,c=0;do if(a){if((k[a+76>>2]|0)<=-1){b=Ji(a)|0;break}c=(Yh(a)|0)==0;b=Ji(a)|0;if(!c)Zh(a)}else{if(!(k[677]|0))b=0;else b=hi(k[677]|0)|0;Ra(2688);a=k[671]|0;if(a)do{if((k[a+76>>2]|0)>-1)c=Yh(a)|0;else c=0;if((k[a+20>>2]|0)>>>0>(k[a+28>>2]|0)>>>0)b=Ji(a)|0|b;if(c)Zh(a);a=k[a+56>>2]|0}while((a|0)!=0);Pa(2688)}while(0);return b|0}function ii(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;e=r;r=r+32|0;d=e+16|0;c=e;if(Bi(24109,i[b>>0]|0,4)|0){f=Xh(b)|0|32768;k[c>>2]=a;k[c+4>>2]=f;k[c+8>>2]=438;c=Nh(Ta(5,c|0)|0)|0;if((c|0)>=0){a=Wh(c,b)|0;if(!a){k[d>>2]=c;Sa(6,d|0)|0;a=0}}else a=0}else{a=Lh()|0;k[a>>2]=22;a=0}r=e;return a|0}function ji(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=r;r=r+16|0;e=d;k[e>>2]=c;c=yi(a,b,e)|0;r=d;return c|0}function ki(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;if((k[b+76>>2]|0)>=0?(Yh(b)|0)!=0:0){if((i[b+75>>0]|0)!=(a|0)?(d=b+20|0,e=k[d>>2]|0,e>>>0<(k[b+16>>2]|0)>>>0):0){k[d>>2]=e+1;i[e>>0]=a;c=a&255}else c=_h(b,a)|0;Zh(b)}else g=3;do if((g|0)==3){if((i[b+75>>0]|0)!=(a|0)?(f=b+20|0,c=k[f>>2]|0,c>>>0<(k[b+16>>2]|0)>>>0):0){k[f>>2]=c+1;i[c>>0]=a;c=a&255;break}c=_h(b,a)|0}while(0);return c|0}function li(a,b){a=a|0;b=b|0;return (ui(a,Gi(a)|0,1,b)|0)+-1|0}function mi(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0;h=ha(c,b)|0;if((k[d+76>>2]|0)>-1)j=Yh(d)|0;else j=0;e=d+74|0;f=i[e>>0]|0;i[e>>0]=f+255|f;e=d+4|0;f=k[e>>2]|0;g=(k[d+8>>2]|0)-f|0;if((g|0)>0){g=g>>>0<h>>>0?g:h;cj(a|0,f|0,g|0)|0;k[e>>2]=f+g;a=a+g|0;e=h-g|0}else e=h;a:do if(!e)l=13;else{g=d+32|0;f=e;while(1){if(ei(d)|0){c=f;break}e=$a[k[g>>2]&63](d,a,f)|0;if((e+1|0)>>>0<2){c=f;break}if((f|0)==(e|0)){l=13;break a}else{a=a+e|0;f=f-e|0}}if(j)Zh(d);c=((h-c|0)>>>0)/(b>>>0)|0}while(0);if((l|0)==13)if(j)Zh(d);return c|0}function ni(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;if((c|0)==1)b=b-(k[a+8>>2]|0)+(k[a+4>>2]|0)|0;e=a+20|0;d=a+28|0;if((k[e>>2]|0)>>>0>(k[d>>2]|0)>>>0?($a[k[a+36>>2]&63](a,0,0)|0,(k[e>>2]|0)==0):0)b=-1;else{k[a+16>>2]=0;k[d>>2]=0;k[e>>2]=0;if(($a[k[a+40>>2]&63](a,b,c)|0)<0)b=-1;else{k[a+8>>2]=0;k[a+4>>2]=0;k[a>>2]=k[a>>2]&-17;b=0}}return b|0}function oi(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if((k[a+76>>2]|0)>-1){d=(Yh(a)|0)==0;b=ni(a,b,c)|0;if(!d)Zh(a)}else b=ni(a,b,c)|0;return b|0}function pi(a,b,c){a=a|0;b=b|0;c=c|0;return oi(a,b,c)|0}function qi(a){a=a|0;var b=0;if(!(k[a>>2]&128))b=1;else b=(k[a+20>>2]|0)>>>0>(k[a+28>>2]|0)>>>0?2:1;b=$a[k[a+40>>2]&63](a,0,b)|0;if((b|0)>=0)b=b-(k[a+8>>2]|0)+(k[a+4>>2]|0)+(k[a+20>>2]|0)-(k[a+28>>2]|0)|0;return b|0}function ri(a){a=a|0;var b=0;if((k[a+76>>2]|0)>-1){b=(Yh(a)|0)==0;a=qi(a)|0}else a=qi(a)|0;return a|0}function si(a){a=a|0;return ri(a)|0}function ti(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=c+16|0;e=k[d>>2]|0;if(!e)if(!(fi(c)|0)){e=k[d>>2]|0;f=4}else d=0;else f=4;a:do if((f|0)==4){g=c+20|0;f=k[g>>2]|0;if((e-f|0)>>>0<b>>>0){d=$a[k[c+36>>2]&63](c,a,b)|0;break}b:do if((i[c+75>>0]|0)>-1){d=b;while(1){if(!d){e=f;d=0;break b}e=d+-1|0;if((i[a+e>>0]|0)==10)break;else d=e}if(($a[k[c+36>>2]&63](c,a,d)|0)>>>0<d>>>0)break a;b=b-d|0;a=a+d|0;e=k[g>>2]|0}else{e=f;d=0}while(0);cj(e|0,a|0,b|0)|0;k[g>>2]=(k[g>>2]|0)+b;d=d+b|0}while(0);return d|0}function ui(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=ha(c,b)|0;if((k[d+76>>2]|0)>-1){f=(Yh(d)|0)==0;a=ti(a,e,d)|0;if(!f)Zh(d)}else a=ti(a,e,d)|0;if((a|0)!=(e|0))c=(a>>>0)/(b>>>0)|0;return c|0}function vi(a,b){a=a|0;b=b|0;var c=0,d=0;c=r;r=r+16|0;d=c;k[d>>2]=b;b=yi(k[676]|0,a,d)|0;r=c;return b|0}function wi(a){a=a|0;var b=0,c=0,d=0,e=0;d=k[676]|0;if((k[d+76>>2]|0)>-1)e=Yh(d)|0;else e=0;do if((li(a,d)|0)<0)b=1;else{if((i[d+75>>0]|0)!=10?(b=d+20|0,c=k[b>>2]|0,c>>>0<(k[d+16>>2]|0)>>>0):0){k[b>>2]=c+1;i[c>>0]=10;b=0;break}b=(_h(d,10)|0)<0}while(0);if(e)Zh(d);return b<<31>>31|0}function xi(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=r;r=r+16|0;e=d;k[e>>2]=c;c=Ai(a,b,e)|0;r=d;return c|0}function yi(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0;s=r;r=r+224|0;n=s+80|0;q=s+96|0;p=s;o=s+136|0;d=q;e=d+40|0;do{k[d>>2]=0;d=d+4|0}while((d|0)<(e|0));k[n>>2]=k[c>>2];if((Ki(0,b,n,p,q)|0)<0)c=-1;else{if((k[a+76>>2]|0)>-1)l=Yh(a)|0;else l=0;c=k[a>>2]|0;m=c&32;if((i[a+74>>0]|0)<1)k[a>>2]=c&-33;c=a+48|0;if(!(k[c>>2]|0)){e=a+44|0;f=k[e>>2]|0;k[e>>2]=o;g=a+28|0;k[g>>2]=o;h=a+20|0;k[h>>2]=o;k[c>>2]=80;j=a+16|0;k[j>>2]=o+80;d=Ki(a,b,n,p,q)|0;if(f){$a[k[a+36>>2]&63](a,0,0)|0;d=(k[h>>2]|0)==0?-1:d;k[e>>2]=f;k[c>>2]=0;k[j>>2]=0;k[g>>2]=0;k[h>>2]=0}}else d=Ki(a,b,n,p,q)|0;c=k[a>>2]|0;k[a>>2]=c|m;if(l)Zh(a);c=(c&32|0)==0?d:-1}r=s;return c|0}function zi(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0;m=r;r=r+128|0;e=m+112|0;l=m;f=l;g=2716;h=f+112|0;do{k[f>>2]=k[g>>2];f=f+4|0;g=g+4|0}while((f|0)<(h|0));if((b+-1|0)>>>0>2147483646)if(!b){b=1;j=4}else{b=Lh()|0;k[b>>2]=75;b=-1}else{e=a;j=4}if((j|0)==4){j=-2-e|0;j=b>>>0>j>>>0?j:b;k[l+48>>2]=j;a=l+20|0;k[a>>2]=e;k[l+44>>2]=e;b=e+j|0;e=l+16|0;k[e>>2]=b;k[l+28>>2]=b;b=yi(l,c,d)|0;if(j){c=k[a>>2]|0;i[c+(((c|0)==(k[e>>2]|0))<<31>>31)>>0]=0}}r=m;return b|0}function Ai(a,b,c){a=a|0;b=b|0;c=c|0;return zi(a,2147483647,b,c)|0}function Bi(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=b&255;d=(c|0)!=0;a:do if(d&(a&3|0)!=0){e=b&255;while(1){if((i[a>>0]|0)==e<<24>>24){g=6;break a}a=a+1|0;c=c+-1|0;d=(c|0)!=0;if(!(d&(a&3|0)!=0)){g=5;break}}}else g=5;while(0);if((g|0)==5)if(d)g=6;else c=0;b:do if((g|0)==6){e=b&255;if((i[a>>0]|0)!=e<<24>>24){d=ha(f,16843009)|0;c:do if(c>>>0>3)while(1){f=k[a>>2]^d;if((f&-2139062144^-2139062144)&f+-16843009)break;a=a+4|0;c=c+-4|0;if(c>>>0<=3){g=11;break c}}else g=11;while(0);if((g|0)==11)if(!c){c=0;break}while(1){if((i[a>>0]|0)==e<<24>>24)break b;a=a+1|0;c=c+-1|0;if(!c){c=0;break}}}}while(0);return ((c|0)!=0?a:0)|0}function Ci(a,b){a=a|0;b=b|0;var c=0,d=0;c=b;a:do if(!((c^a)&3)){if(c&3)do{c=i[b>>0]|0;i[a>>0]=c;if(!(c<<24>>24))break a;b=b+1|0;a=a+1|0}while((b&3|0)!=0);c=k[b>>2]|0;if(!((c&-2139062144^-2139062144)&c+-16843009)){d=a;while(1){b=b+4|0;a=d+4|0;k[d>>2]=c;c=k[b>>2]|0;if((c&-2139062144^-2139062144)&c+-16843009)break;else d=a}}d=8}else d=8;while(0);if((d|0)==8){d=i[b>>0]|0;i[a>>0]=d;if(d<<24>>24)do{b=b+1|0;a=a+1|0;d=i[b>>0]|0;i[a>>0]=d}while(d<<24>>24!=0)}return a|0}function Di(a,b){a=a|0;b=b|0;a=Ei(a,b)|0;return ((i[a>>0]|0)==(b&255)<<24>>24?a:0)|0}function Ei(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;d=b&255;a:do if(!d)a=a+(Gi(a)|0)|0;else{if(a&3){c=b&255;do{e=i[a>>0]|0;if(e<<24>>24==0?1:e<<24>>24==c<<24>>24)break a;a=a+1|0}while((a&3|0)!=0)}d=ha(d,16843009)|0;c=k[a>>2]|0;b:do if(!((c&-2139062144^-2139062144)&c+-16843009))do{e=c^d;if((e&-2139062144^-2139062144)&e+-16843009)break b;a=a+4|0;c=k[a>>2]|0}while(((c&-2139062144^-2139062144)&c+-16843009|0)==0);while(0);c=b&255;while(1){e=i[a>>0]|0;if(e<<24>>24==0?1:e<<24>>24==c<<24>>24)break;else a=a+1|0}}while(0);return a|0}function Fi(a,b){a=a|0;b=b|0;Ci(a,b)|0;return a|0}function Gi(a){a=a|0;var b=0,c=0,d=0;d=a;a:do if(!(d&3))c=4;else{b=a;a=d;while(1){if(!(i[b>>0]|0))break a;b=b+1|0;a=b;if(!(a&3)){a=b;c=4;break}}}while(0);if((c|0)==4){while(1){b=k[a>>2]|0;if(!((b&-2139062144^-2139062144)&b+-16843009))a=a+4|0;else break}if((b&255)<<24>>24)do a=a+1|0;while((i[a>>0]|0)!=0)}return a-d|0}function Hi(a){a=a|0;if(!(k[a+68>>2]|0))Zh(a);return}function Ii(a){a=a|0;if(!(k[a+68>>2]|0))Zh(a);return}function Ji(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0;b=a+20|0;f=a+28|0;if((k[b>>2]|0)>>>0>(k[f>>2]|0)>>>0?($a[k[a+36>>2]&63](a,0,0)|0,(k[b>>2]|0)==0):0)b=-1;else{g=a+4|0;c=k[g>>2]|0;d=a+8|0;e=k[d>>2]|0;if(c>>>0<e>>>0)$a[k[a+40>>2]&63](a,c-e|0,1)|0;k[a+16>>2]=0;k[f>>2]=0;k[b>>2]=0;k[d>>2]=0;k[g>>2]=0;b=0}return b|0}
function Ki(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,m=0,n=0.0,o=0,q=0,s=0,u=0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0;ga=r;r=r+624|0;ba=ga+24|0;da=ga+16|0;ca=ga+588|0;Y=ga+576|0;aa=ga;V=ga+536|0;fa=ga+8|0;ea=ga+528|0;M=(a|0)!=0;N=V+40|0;U=N;V=V+39|0;W=fa+4|0;X=Y+12|0;Y=Y+11|0;Z=ca;_=X;$=_-Z|0;O=-2-Z|0;P=_+2|0;Q=ba+288|0;R=ca+9|0;S=R;T=ca+8|0;f=0;w=b;g=0;b=0;a:while(1){do if((f|0)>-1)if((g|0)>(2147483647-f|0)){f=Lh()|0;k[f>>2]=75;f=-1;break}else{f=g+f|0;break}while(0);g=i[w>>0]|0;if(!(g<<24>>24)){K=245;break}else h=w;b:while(1){switch(g<<24>>24){case 37:{g=h;K=9;break b}case 0:{g=h;break b}default:{}}J=h+1|0;g=i[J>>0]|0;h=J}c:do if((K|0)==9)while(1){K=0;if((i[g+1>>0]|0)!=37)break c;h=h+1|0;g=g+2|0;if((i[g>>0]|0)==37)K=9;else break}while(0);y=h-w|0;if(M?(k[a>>2]&32|0)==0:0)ti(w,y,a)|0;if((h|0)!=(w|0)){w=g;g=y;continue}o=g+1|0;h=i[o>>0]|0;m=(h<<24>>24)+-48|0;if(m>>>0<10){J=(i[g+2>>0]|0)==36;o=J?g+3|0:o;h=i[o>>0]|0;u=J?m:-1;b=J?1:b}else u=-1;g=h<<24>>24;d:do if((g&-32|0)==32){m=0;while(1){if(!(1<<g+-32&75913)){q=m;g=o;break d}m=1<<(h<<24>>24)+-32|m;o=o+1|0;h=i[o>>0]|0;g=h<<24>>24;if((g&-32|0)!=32){q=m;g=o;break}}}else{q=0;g=o}while(0);do if(h<<24>>24==42){m=g+1|0;h=(i[m>>0]|0)+-48|0;if(h>>>0<10?(i[g+2>>0]|0)==36:0){k[e+(h<<2)>>2]=10;b=1;g=g+3|0;h=k[d+((i[m>>0]|0)+-48<<3)>>2]|0}else{if(b){f=-1;break a}if(!M){x=q;g=m;b=0;J=0;break}b=(k[c>>2]|0)+(4-1)&~(4-1);h=k[b>>2]|0;k[c>>2]=b+4;b=0;g=m}if((h|0)<0){x=q|8192;J=0-h|0}else{x=q;J=h}}else{m=(h<<24>>24)+-48|0;if(m>>>0<10){h=0;do{h=(h*10|0)+m|0;g=g+1|0;m=(i[g>>0]|0)+-48|0}while(m>>>0<10);if((h|0)<0){f=-1;break a}else{x=q;J=h}}else{x=q;J=0}}while(0);e:do if((i[g>>0]|0)==46){m=g+1|0;h=i[m>>0]|0;if(h<<24>>24!=42){o=(h<<24>>24)+-48|0;if(o>>>0<10){g=m;h=0}else{g=m;o=0;break}while(1){h=(h*10|0)+o|0;g=g+1|0;o=(i[g>>0]|0)+-48|0;if(o>>>0>=10){o=h;break e}}}m=g+2|0;h=(i[m>>0]|0)+-48|0;if(h>>>0<10?(i[g+3>>0]|0)==36:0){k[e+(h<<2)>>2]=10;g=g+4|0;o=k[d+((i[m>>0]|0)+-48<<3)>>2]|0;break}if(b){f=-1;break a}if(M){g=(k[c>>2]|0)+(4-1)&~(4-1);o=k[g>>2]|0;k[c>>2]=g+4;g=m}else{g=m;o=0}}else o=-1;while(0);s=0;while(1){h=(i[g>>0]|0)+-65|0;if(h>>>0>57){f=-1;break a}m=g+1|0;h=i[25145+(s*58|0)+h>>0]|0;q=h&255;if((q+-1|0)>>>0<8){g=m;s=q}else{I=m;break}}if(!(h<<24>>24)){f=-1;break}m=(u|0)>-1;do if(h<<24>>24==19)if(m){f=-1;break a}else K=52;else{if(m){k[e+(u<<2)>>2]=q;G=d+(u<<3)|0;H=k[G+4>>2]|0;K=aa;k[K>>2]=k[G>>2];k[K+4>>2]=H;K=52;break}if(!M){f=0;break a}Mi(aa,q,c)}while(0);if((K|0)==52?(K=0,!M):0){w=I;g=y;continue}u=i[g>>0]|0;u=(s|0)!=0&(u&15|0)==3?u&-33:u;m=x&-65537;H=(x&8192|0)==0?x:m;f:do switch(u|0){case 110:switch(s|0){case 0:{k[k[aa>>2]>>2]=f;w=I;g=y;continue a}case 1:{k[k[aa>>2]>>2]=f;w=I;g=y;continue a}case 2:{w=k[aa>>2]|0;k[w>>2]=f;k[w+4>>2]=((f|0)<0)<<31>>31;w=I;g=y;continue a}case 3:{j[k[aa>>2]>>1]=f;w=I;g=y;continue a}case 4:{i[k[aa>>2]>>0]=f;w=I;g=y;continue a}case 6:{k[k[aa>>2]>>2]=f;w=I;g=y;continue a}case 7:{w=k[aa>>2]|0;k[w>>2]=f;k[w+4>>2]=((f|0)<0)<<31>>31;w=I;g=y;continue a}default:{w=I;g=y;continue a}}case 112:{s=H|8;o=o>>>0>8?o:8;u=120;K=64;break}case 88:case 120:{s=H;K=64;break}case 111:{m=aa;h=k[m>>2]|0;m=k[m+4>>2]|0;if((h|0)==0&(m|0)==0)g=N;else{g=N;do{g=g+-1|0;i[g>>0]=h&7|48;h=bj(h|0,m|0,3)|0;m=L}while(!((h|0)==0&(m|0)==0))}if(!(H&8)){h=H;s=0;q=25625;K=77}else{s=U-g+1|0;h=H;o=(o|0)<(s|0)?s:o;s=0;q=25625;K=77}break}case 105:case 100:{h=aa;g=k[h>>2]|0;h=k[h+4>>2]|0;if((h|0)<0){g=Yi(0,0,g|0,h|0)|0;h=L;m=aa;k[m>>2]=g;k[m+4>>2]=h;m=1;q=25625;K=76;break f}if(!(H&2048)){q=H&1;m=q;q=(q|0)==0?25625:25627;K=76}else{m=1;q=25626;K=76}break}case 117:{h=aa;g=k[h>>2]|0;h=k[h+4>>2]|0;m=0;q=25625;K=76;break}case 99:{i[V>>0]=k[aa>>2];w=V;h=1;s=0;u=25625;g=N;break}case 109:{g=Lh()|0;g=Mh(k[g>>2]|0)|0;K=82;break}case 115:{g=k[aa>>2]|0;g=(g|0)!=0?g:25635;K=82;break}case 67:{k[fa>>2]=k[aa>>2];k[W>>2]=0;k[aa>>2]=fa;o=-1;K=86;break}case 83:{if(!o){Oi(a,32,J,0,H);g=0;K=98}else K=86;break}case 65:case 71:case 70:case 69:case 97:case 103:case 102:case 101:{n=+p[aa>>3];k[da>>2]=0;p[t>>3]=n;if((k[t+4>>2]|0)>=0)if(!(H&2048)){G=H&1;F=G;G=(G|0)==0?25643:25648}else{F=1;G=25645}else{n=-n;F=1;G=25642}p[t>>3]=n;E=k[t+4>>2]&2146435072;do if(E>>>0<2146435072|(E|0)==2146435072&0<0){v=+Ph(n,da)*2.0;h=v!=0.0;if(h)k[da>>2]=(k[da>>2]|0)+-1;C=u|32;if((C|0)==97){w=u&32;y=(w|0)==0?G:G+9|0;x=F|2;g=12-o|0;do if(!(o>>>0>11|(g|0)==0)){n=8.0;do{g=g+-1|0;n=n*16.0}while((g|0)!=0);if((i[y>>0]|0)==45){n=-(n+(-v-n));break}else{n=v+n-n;break}}else n=v;while(0);h=k[da>>2]|0;g=(h|0)<0?0-h|0:h;g=Ni(g,((g|0)<0)<<31>>31,X)|0;if((g|0)==(X|0)){i[Y>>0]=48;g=Y}i[g+-1>>0]=(h>>31&2)+43;s=g+-2|0;i[s>>0]=u+15;q=(o|0)<1;m=(H&8|0)==0;h=ca;while(1){G=~~n;g=h+1|0;i[h>>0]=l[25609+G>>0]|w;n=(n-+(G|0))*16.0;do if((g-Z|0)==1){if(m&(q&n==0.0))break;i[g>>0]=46;g=h+2|0}while(0);if(!(n!=0.0))break;else h=g}o=(o|0)!=0&(O+g|0)<(o|0)?P+o-s|0:$-s+g|0;m=o+x|0;Oi(a,32,J,m,H);if(!(k[a>>2]&32))ti(y,x,a)|0;Oi(a,48,J,m,H^65536);g=g-Z|0;if(!(k[a>>2]&32))ti(ca,g,a)|0;h=_-s|0;Oi(a,48,o-(g+h)|0,0,0);if(!(k[a>>2]&32))ti(s,h,a)|0;Oi(a,32,J,m,H^8192);g=(m|0)<(J|0)?J:m;break}g=(o|0)<0?6:o;if(h){h=(k[da>>2]|0)+-28|0;k[da>>2]=h;n=v*268435456.0}else{n=v;h=k[da>>2]|0}E=(h|0)<0?ba:Q;D=E;h=E;do{B=~~n>>>0;k[h>>2]=B;h=h+4|0;n=(n-+(B>>>0))*1.0e9}while(n!=0.0);m=h;h=k[da>>2]|0;if((h|0)>0){q=E;while(1){s=(h|0)>29?29:h;o=m+-4|0;do if(o>>>0<q>>>0)o=q;else{h=0;do{B=$i(k[o>>2]|0,0,s|0)|0;B=aj(B|0,L|0,h|0,0)|0;h=L;A=jj(B|0,h|0,1e9,0)|0;k[o>>2]=A;h=ij(B|0,h|0,1e9,0)|0;o=o+-4|0}while(o>>>0>=q>>>0);if(!h){o=q;break}o=q+-4|0;k[o>>2]=h}while(0);while(1){if(m>>>0<=o>>>0)break;h=m+-4|0;if(!(k[h>>2]|0))m=h;else break}h=(k[da>>2]|0)-s|0;k[da>>2]=h;if((h|0)>0)q=o;else break}}else o=E;if((h|0)<0){y=((g+25|0)/9|0)+1|0;z=(C|0)==102;w=o;while(1){x=0-h|0;x=(x|0)>9?9:x;do if(w>>>0<m>>>0){h=(1<<x)+-1|0;q=1e9>>>x;o=0;s=w;do{B=k[s>>2]|0;k[s>>2]=(B>>>x)+o;o=ha(B&h,q)|0;s=s+4|0}while(s>>>0<m>>>0);h=(k[w>>2]|0)==0?w+4|0:w;if(!o){o=h;break}k[m>>2]=o;o=h;m=m+4|0}else o=(k[w>>2]|0)==0?w+4|0:w;while(0);h=z?E:o;m=(m-h>>2|0)>(y|0)?h+(y<<2)|0:m;h=(k[da>>2]|0)+x|0;k[da>>2]=h;if((h|0)>=0){w=o;break}else w=o}}else w=o;do if(w>>>0<m>>>0){h=(D-w>>2)*9|0;q=k[w>>2]|0;if(q>>>0<10)break;else o=10;do{o=o*10|0;h=h+1|0}while(q>>>0>=o>>>0)}else h=0;while(0);A=(C|0)==103;B=(g|0)!=0;o=g-((C|0)!=102?h:0)+((B&A)<<31>>31)|0;if((o|0)<(((m-D>>2)*9|0)+-9|0)){s=o+9216|0;z=(s|0)/9|0;o=E+(z+-1023<<2)|0;s=((s|0)%9|0)+1|0;if((s|0)<9){q=10;do{q=q*10|0;s=s+1|0}while((s|0)!=9)}else q=10;x=k[o>>2]|0;y=(x>>>0)%(q>>>0)|0;if((y|0)==0?(E+(z+-1022<<2)|0)==(m|0):0)q=w;else K=163;do if((K|0)==163){K=0;v=(((x>>>0)/(q>>>0)|0)&1|0)==0?9007199254740992.0:9007199254740994.0;s=(q|0)/2|0;do if(y>>>0<s>>>0)n=.5;else{if((y|0)==(s|0)?(E+(z+-1022<<2)|0)==(m|0):0){n=1.0;break}n=1.5}while(0);do if(F){if((i[G>>0]|0)!=45)break;v=-v;n=-n}while(0);s=x-y|0;k[o>>2]=s;if(!(v+n!=v)){q=w;break}C=s+q|0;k[o>>2]=C;if(C>>>0>999999999){h=w;while(1){q=o+-4|0;k[o>>2]=0;if(q>>>0<h>>>0){h=h+-4|0;k[h>>2]=0}C=(k[q>>2]|0)+1|0;k[q>>2]=C;if(C>>>0>999999999)o=q;else{w=h;o=q;break}}}h=(D-w>>2)*9|0;s=k[w>>2]|0;if(s>>>0<10){q=w;break}else q=10;do{q=q*10|0;h=h+1|0}while(s>>>0>=q>>>0);q=w}while(0);C=o+4|0;w=q;m=m>>>0>C>>>0?C:m}y=0-h|0;while(1){if(m>>>0<=w>>>0){z=0;C=m;break}o=m+-4|0;if(!(k[o>>2]|0))m=o;else{z=1;C=m;break}}do if(A){g=(B&1^1)+g|0;if((g|0)>(h|0)&(h|0)>-5){u=u+-1|0;g=g+-1-h|0}else{u=u+-2|0;g=g+-1|0}m=H&8;if(m)break;do if(z){m=k[C+-4>>2]|0;if(!m){o=9;break}if(!((m>>>0)%10|0)){q=10;o=0}else{o=0;break}do{q=q*10|0;o=o+1|0}while(((m>>>0)%(q>>>0)|0|0)==0)}else o=9;while(0);m=((C-D>>2)*9|0)+-9|0;if((u|32|0)==102){m=m-o|0;m=(m|0)<0?0:m;g=(g|0)<(m|0)?g:m;m=0;break}else{m=m+h-o|0;m=(m|0)<0?0:m;g=(g|0)<(m|0)?g:m;m=0;break}}else m=H&8;while(0);x=g|m;q=(x|0)!=0&1;s=(u|32|0)==102;if(s){h=(h|0)>0?h:0;u=0}else{o=(h|0)<0?y:h;o=Ni(o,((o|0)<0)<<31>>31,X)|0;if((_-o|0)<2)do{o=o+-1|0;i[o>>0]=48}while((_-o|0)<2);i[o+-1>>0]=(h>>31&2)+43;D=o+-2|0;i[D>>0]=u;h=_-D|0;u=D}y=F+1+g+q+h|0;Oi(a,32,J,y,H);if(!(k[a>>2]&32))ti(G,F,a)|0;Oi(a,48,J,y,H^65536);do if(s){o=w>>>0>E>>>0?E:w;h=o;do{m=Ni(k[h>>2]|0,0,R)|0;do if((h|0)==(o|0)){if((m|0)!=(R|0))break;i[T>>0]=48;m=T}else{if(m>>>0<=ca>>>0)break;do{m=m+-1|0;i[m>>0]=48}while(m>>>0>ca>>>0)}while(0);if(!(k[a>>2]&32))ti(m,S-m|0,a)|0;h=h+4|0}while(h>>>0<=E>>>0);do if(x){if(k[a>>2]&32)break;ti(25677,1,a)|0}while(0);if((g|0)>0&h>>>0<C>>>0){m=h;while(1){h=Ni(k[m>>2]|0,0,R)|0;if(h>>>0>ca>>>0)do{h=h+-1|0;i[h>>0]=48}while(h>>>0>ca>>>0);if(!(k[a>>2]&32))ti(h,(g|0)>9?9:g,a)|0;m=m+4|0;h=g+-9|0;if(!((g|0)>9&m>>>0<C>>>0)){g=h;break}else g=h}}Oi(a,48,g+9|0,9,0)}else{s=z?C:w+4|0;if((g|0)>-1){q=(m|0)==0;o=w;do{h=Ni(k[o>>2]|0,0,R)|0;if((h|0)==(R|0)){i[T>>0]=48;h=T}do if((o|0)==(w|0)){m=h+1|0;if(!(k[a>>2]&32))ti(h,1,a)|0;if(q&(g|0)<1){h=m;break}if(k[a>>2]&32){h=m;break}ti(25677,1,a)|0;h=m}else{if(h>>>0<=ca>>>0)break;do{h=h+-1|0;i[h>>0]=48}while(h>>>0>ca>>>0)}while(0);m=S-h|0;if(!(k[a>>2]&32))ti(h,(g|0)>(m|0)?m:g,a)|0;g=g-m|0;o=o+4|0}while(o>>>0<s>>>0&(g|0)>-1)}Oi(a,48,g+18|0,18,0);if(k[a>>2]&32)break;ti(u,_-u|0,a)|0}while(0);Oi(a,32,J,y,H^8192);g=(y|0)<(J|0)?J:y}else{s=(u&32|0)!=0;q=n!=n|0.0!=0.0;h=q?0:F;o=h+3|0;Oi(a,32,J,o,m);g=k[a>>2]|0;if(!(g&32)){ti(G,h,a)|0;g=k[a>>2]|0}if(!(g&32))ti(q?(s?25669:25673):s?25661:25665,3,a)|0;Oi(a,32,J,o,H^8192);g=(o|0)<(J|0)?J:o}while(0);w=I;continue a}default:{m=H;h=o;s=0;u=25625;g=N}}while(0);g:do if((K|0)==64){m=aa;h=k[m>>2]|0;m=k[m+4>>2]|0;q=u&32;if(!((h|0)==0&(m|0)==0)){g=N;do{g=g+-1|0;i[g>>0]=l[25609+(h&15)>>0]|q;h=bj(h|0,m|0,4)|0;m=L}while(!((h|0)==0&(m|0)==0));K=aa;if((s&8|0)==0|(k[K>>2]|0)==0&(k[K+4>>2]|0)==0){h=s;s=0;q=25625;K=77}else{h=s;s=2;q=25625+(u>>4)|0;K=77}}else{g=N;h=s;s=0;q=25625;K=77}}else if((K|0)==76){g=Ni(g,h,N)|0;h=H;s=m;K=77}else if((K|0)==82){K=0;H=Bi(g,0,o)|0;G=(H|0)==0;w=g;h=G?o:H-g|0;s=0;u=25625;g=G?g+o|0:H}else if((K|0)==86){K=0;h=0;g=0;q=k[aa>>2]|0;while(1){m=k[q>>2]|0;if(!m)break;g=Vh(ea,m)|0;if((g|0)<0|g>>>0>(o-h|0)>>>0)break;h=g+h|0;if(o>>>0>h>>>0)q=q+4|0;else break}if((g|0)<0){f=-1;break a}Oi(a,32,J,h,H);if(!h){g=0;K=98}else{m=0;o=k[aa>>2]|0;while(1){g=k[o>>2]|0;if(!g){g=h;K=98;break g}g=Vh(ea,g)|0;m=g+m|0;if((m|0)>(h|0)){g=h;K=98;break g}if(!(k[a>>2]&32))ti(ea,g,a)|0;if(m>>>0>=h>>>0){g=h;K=98;break}else o=o+4|0}}}while(0);if((K|0)==98){K=0;Oi(a,32,J,g,H^8192);w=I;g=(J|0)>(g|0)?J:g;continue}if((K|0)==77){K=0;m=(o|0)>-1?h&-65537:h;h=aa;h=(k[h>>2]|0)!=0|(k[h+4>>2]|0)!=0;if((o|0)!=0|h){h=(h&1^1)+(U-g)|0;w=g;h=(o|0)>(h|0)?o:h;u=q;g=N}else{w=N;h=0;u=q;g=N}}q=g-w|0;h=(h|0)<(q|0)?q:h;o=s+h|0;g=(J|0)<(o|0)?o:J;Oi(a,32,g,o,m);if(!(k[a>>2]&32))ti(u,s,a)|0;Oi(a,48,g,o,m^65536);Oi(a,48,h,q,0);if(!(k[a>>2]&32))ti(w,q,a)|0;Oi(a,32,g,o,m^8192);w=I}h:do if((K|0)==245)if(!a)if(b){f=1;while(1){b=k[e+(f<<2)>>2]|0;if(!b)break;Mi(d+(f<<3)|0,b,c);f=f+1|0;if((f|0)>=10){f=1;break h}}if((f|0)<10)while(1){if(k[e+(f<<2)>>2]|0){f=-1;break h}f=f+1|0;if((f|0)>=10){f=1;break}}else f=1}else f=0;while(0);r=ga;return f|0}function Li(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=a+20|0;e=k[d>>2]|0;a=(k[a+16>>2]|0)-e|0;a=a>>>0>c>>>0?c:a;cj(e|0,b|0,a|0)|0;k[d>>2]=(k[d>>2]|0)+a;return c|0}function Mi(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0.0;a:do if(b>>>0<=20)do switch(b|0){case 9:{d=(k[c>>2]|0)+(4-1)&~(4-1);b=k[d>>2]|0;k[c>>2]=d+4;k[a>>2]=b;break a}case 10:{d=(k[c>>2]|0)+(4-1)&~(4-1);b=k[d>>2]|0;k[c>>2]=d+4;d=a;k[d>>2]=b;k[d+4>>2]=((b|0)<0)<<31>>31;break a}case 11:{d=(k[c>>2]|0)+(4-1)&~(4-1);b=k[d>>2]|0;k[c>>2]=d+4;d=a;k[d>>2]=b;k[d+4>>2]=0;break a}case 12:{d=(k[c>>2]|0)+(8-1)&~(8-1);b=d;e=k[b>>2]|0;b=k[b+4>>2]|0;k[c>>2]=d+8;d=a;k[d>>2]=e;k[d+4>>2]=b;break a}case 13:{e=(k[c>>2]|0)+(4-1)&~(4-1);d=k[e>>2]|0;k[c>>2]=e+4;d=(d&65535)<<16>>16;e=a;k[e>>2]=d;k[e+4>>2]=((d|0)<0)<<31>>31;break a}case 14:{e=(k[c>>2]|0)+(4-1)&~(4-1);d=k[e>>2]|0;k[c>>2]=e+4;e=a;k[e>>2]=d&65535;k[e+4>>2]=0;break a}case 15:{e=(k[c>>2]|0)+(4-1)&~(4-1);d=k[e>>2]|0;k[c>>2]=e+4;d=(d&255)<<24>>24;e=a;k[e>>2]=d;k[e+4>>2]=((d|0)<0)<<31>>31;break a}case 16:{e=(k[c>>2]|0)+(4-1)&~(4-1);d=k[e>>2]|0;k[c>>2]=e+4;e=a;k[e>>2]=d&255;k[e+4>>2]=0;break a}case 17:{e=(k[c>>2]|0)+(8-1)&~(8-1);f=+p[e>>3];k[c>>2]=e+8;p[a>>3]=f;break a}case 18:{e=(k[c>>2]|0)+(8-1)&~(8-1);f=+p[e>>3];k[c>>2]=e+8;p[a>>3]=f;break a}default:break a}while(0);while(0);return}function Ni(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if(b>>>0>0|(b|0)==0&a>>>0>4294967295)while(1){d=jj(a|0,b|0,10,0)|0;c=c+-1|0;i[c>>0]=d|48;d=ij(a|0,b|0,10,0)|0;if(b>>>0>9|(b|0)==9&a>>>0>4294967295){a=d;b=L}else{a=d;break}}if(a)while(1){c=c+-1|0;i[c>>0]=(a>>>0)%10|0|48;if(a>>>0<10)break;else a=(a>>>0)/10|0}return c|0}function Oi(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;h=r;r=r+256|0;g=h;do if((c|0)>(d|0)&(e&73728|0)==0){e=c-d|0;_i(g|0,b|0,(e>>>0>256?256:e)|0)|0;b=k[a>>2]|0;f=(b&32|0)==0;if(e>>>0>255){d=c-d|0;do{if(f){ti(g,256,a)|0;b=k[a>>2]|0}e=e+-256|0;f=(b&32|0)==0}while(e>>>0>255);if(f)e=d&255;else break}else if(!f)break;ti(g,e,a)|0}while(0);r=h;return}function Pi(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;do if(a>>>0<245){o=a>>>0<11?16:a+11&-8;a=o>>>3;h=k[735]|0;c=h>>>a;if(c&3){a=(c&1^1)+a|0;d=a<<1;c=2980+(d<<2)|0;d=2980+(d+2<<2)|0;e=k[d>>2]|0;f=e+8|0;g=k[f>>2]|0;do if((c|0)!=(g|0)){if(g>>>0<(k[739]|0)>>>0)Ca();b=g+12|0;if((k[b>>2]|0)==(e|0)){k[b>>2]=c;k[d>>2]=g;break}else Ca()}else k[735]=h&~(1<<a);while(0);M=a<<3;k[e+4>>2]=M|3;M=e+(M|4)|0;k[M>>2]=k[M>>2]|1;M=f;return M|0}g=k[737]|0;if(o>>>0>g>>>0){if(c){d=2<<a;d=c<<a&(d|0-d);d=(d&0-d)+-1|0;i=d>>>12&16;d=d>>>i;e=d>>>5&8;d=d>>>e;f=d>>>2&4;d=d>>>f;c=d>>>1&2;d=d>>>c;a=d>>>1&1;a=(e|i|f|c|a)+(d>>>a)|0;d=a<<1;c=2980+(d<<2)|0;d=2980+(d+2<<2)|0;f=k[d>>2]|0;i=f+8|0;e=k[i>>2]|0;do if((c|0)!=(e|0)){if(e>>>0<(k[739]|0)>>>0)Ca();b=e+12|0;if((k[b>>2]|0)==(f|0)){k[b>>2]=c;k[d>>2]=e;j=k[737]|0;break}else Ca()}else{k[735]=h&~(1<<a);j=g}while(0);M=a<<3;g=M-o|0;k[f+4>>2]=o|3;h=f+o|0;k[f+(o|4)>>2]=g|1;k[f+M>>2]=g;if(j){e=k[740]|0;c=j>>>3;b=c<<1;d=2980+(b<<2)|0;a=k[735]|0;c=1<<c;if(a&c){a=2980+(b+2<<2)|0;b=k[a>>2]|0;if(b>>>0<(k[739]|0)>>>0)Ca();else{l=a;m=b}}else{k[735]=a|c;l=2980+(b+2<<2)|0;m=d}k[l>>2]=e;k[m+12>>2]=e;k[e+8>>2]=m;k[e+12>>2]=d}k[737]=g;k[740]=h;M=i;return M|0}a=k[736]|0;if(a){c=(a&0-a)+-1|0;L=c>>>12&16;c=c>>>L;K=c>>>5&8;c=c>>>K;M=c>>>2&4;c=c>>>M;a=c>>>1&2;c=c>>>a;d=c>>>1&1;d=k[3244+((K|L|M|a|d)+(c>>>d)<<2)>>2]|0;c=(k[d+4>>2]&-8)-o|0;a=d;while(1){b=k[a+16>>2]|0;if(!b){b=k[a+20>>2]|0;if(!b){i=c;break}}a=(k[b+4>>2]&-8)-o|0;M=a>>>0<c>>>0;c=M?a:c;a=b;d=M?b:d}f=k[739]|0;if(d>>>0<f>>>0)Ca();h=d+o|0;if(d>>>0>=h>>>0)Ca();g=k[d+24>>2]|0;c=k[d+12>>2]|0;do if((c|0)==(d|0)){a=d+20|0;b=k[a>>2]|0;if(!b){a=d+16|0;b=k[a>>2]|0;if(!b){n=0;break}}while(1){c=b+20|0;e=k[c>>2]|0;if(e){b=e;a=c;continue}c=b+16|0;e=k[c>>2]|0;if(!e)break;else{b=e;a=c}}if(a>>>0<f>>>0)Ca();else{k[a>>2]=0;n=b;break}}else{e=k[d+8>>2]|0;if(e>>>0<f>>>0)Ca();b=e+12|0;if((k[b>>2]|0)!=(d|0))Ca();a=c+8|0;if((k[a>>2]|0)==(d|0)){k[b>>2]=c;k[a>>2]=e;n=c;break}else Ca()}while(0);do if(g){b=k[d+28>>2]|0;a=3244+(b<<2)|0;if((d|0)==(k[a>>2]|0)){k[a>>2]=n;if(!n){k[736]=k[736]&~(1<<b);break}}else{if(g>>>0<(k[739]|0)>>>0)Ca();b=g+16|0;if((k[b>>2]|0)==(d|0))k[b>>2]=n;else k[g+20>>2]=n;if(!n)break}a=k[739]|0;if(n>>>0<a>>>0)Ca();k[n+24>>2]=g;b=k[d+16>>2]|0;do if(b)if(b>>>0<a>>>0)Ca();else{k[n+16>>2]=b;k[b+24>>2]=n;break}while(0);b=k[d+20>>2]|0;if(b)if(b>>>0<(k[739]|0)>>>0)Ca();else{k[n+20>>2]=b;k[b+24>>2]=n;break}}while(0);if(i>>>0<16){M=i+o|0;k[d+4>>2]=M|3;M=d+(M+4)|0;k[M>>2]=k[M>>2]|1}else{k[d+4>>2]=o|3;k[d+(o|4)>>2]=i|1;k[d+(i+o)>>2]=i;b=k[737]|0;if(b){f=k[740]|0;c=b>>>3;b=c<<1;e=2980+(b<<2)|0;a=k[735]|0;c=1<<c;if(a&c){b=2980+(b+2<<2)|0;a=k[b>>2]|0;if(a>>>0<(k[739]|0)>>>0)Ca();else{p=b;q=a}}else{k[735]=a|c;p=2980+(b+2<<2)|0;q=e}k[p>>2]=f;k[q+12>>2]=f;k[f+8>>2]=q;k[f+12>>2]=e}k[737]=i;k[740]=h}M=d+8|0;return M|0}else q=o}else q=o}else if(a>>>0<=4294967231){a=a+11|0;m=a&-8;l=k[736]|0;if(l){c=0-m|0;a=a>>>8;if(a)if(m>>>0>16777215)j=31;else{q=(a+1048320|0)>>>16&8;v=a<<q;p=(v+520192|0)>>>16&4;v=v<<p;j=(v+245760|0)>>>16&2;j=14-(p|q|j)+(v<<j>>>15)|0;j=m>>>(j+7|0)&1|j<<1}else j=0;a=k[3244+(j<<2)>>2]|0;a:do if(!a){e=0;a=0;v=86}else{g=c;e=0;h=m<<((j|0)==31?0:25-(j>>>1)|0);i=a;a=0;while(1){f=k[i+4>>2]&-8;c=f-m|0;if(c>>>0<g>>>0)if((f|0)==(m|0)){f=i;a=i;v=90;break a}else a=i;else c=g;v=k[i+20>>2]|0;i=k[i+16+(h>>>31<<2)>>2]|0;e=(v|0)==0|(v|0)==(i|0)?e:v;if(!i){v=86;break}else{g=c;h=h<<1}}}while(0);if((v|0)==86){if((e|0)==0&(a|0)==0){a=2<<j;a=l&(a|0-a);if(!a){q=m;break}a=(a&0-a)+-1|0;n=a>>>12&16;a=a>>>n;l=a>>>5&8;a=a>>>l;p=a>>>2&4;a=a>>>p;q=a>>>1&2;a=a>>>q;e=a>>>1&1;e=k[3244+((l|n|p|q|e)+(a>>>e)<<2)>>2]|0;a=0}if(!e){h=c;i=a}else{f=e;v=90}}if((v|0)==90)while(1){v=0;q=(k[f+4>>2]&-8)-m|0;e=q>>>0<c>>>0;c=e?q:c;a=e?f:a;e=k[f+16>>2]|0;if(e){f=e;v=90;continue}f=k[f+20>>2]|0;if(!f){h=c;i=a;break}else v=90}if((i|0)!=0?h>>>0<((k[737]|0)-m|0)>>>0:0){e=k[739]|0;if(i>>>0<e>>>0)Ca();g=i+m|0;if(i>>>0>=g>>>0)Ca();f=k[i+24>>2]|0;c=k[i+12>>2]|0;do if((c|0)==(i|0)){a=i+20|0;b=k[a>>2]|0;if(!b){a=i+16|0;b=k[a>>2]|0;if(!b){o=0;break}}while(1){c=b+20|0;d=k[c>>2]|0;if(d){b=d;a=c;continue}c=b+16|0;d=k[c>>2]|0;if(!d)break;else{b=d;a=c}}if(a>>>0<e>>>0)Ca();else{k[a>>2]=0;o=b;break}}else{d=k[i+8>>2]|0;if(d>>>0<e>>>0)Ca();b=d+12|0;if((k[b>>2]|0)!=(i|0))Ca();a=c+8|0;if((k[a>>2]|0)==(i|0)){k[b>>2]=c;k[a>>2]=d;o=c;break}else Ca()}while(0);do if(f){b=k[i+28>>2]|0;a=3244+(b<<2)|0;if((i|0)==(k[a>>2]|0)){k[a>>2]=o;if(!o){k[736]=k[736]&~(1<<b);break}}else{if(f>>>0<(k[739]|0)>>>0)Ca();b=f+16|0;if((k[b>>2]|0)==(i|0))k[b>>2]=o;else k[f+20>>2]=o;if(!o)break}a=k[739]|0;if(o>>>0<a>>>0)Ca();k[o+24>>2]=f;b=k[i+16>>2]|0;do if(b)if(b>>>0<a>>>0)Ca();else{k[o+16>>2]=b;k[b+24>>2]=o;break}while(0);b=k[i+20>>2]|0;if(b)if(b>>>0<(k[739]|0)>>>0)Ca();else{k[o+20>>2]=b;k[b+24>>2]=o;break}}while(0);b:do if(h>>>0>=16){k[i+4>>2]=m|3;k[i+(m|4)>>2]=h|1;k[i+(h+m)>>2]=h;b=h>>>3;if(h>>>0<256){a=b<<1;d=2980+(a<<2)|0;c=k[735]|0;b=1<<b;if(c&b){b=2980+(a+2<<2)|0;a=k[b>>2]|0;if(a>>>0<(k[739]|0)>>>0)Ca();else{s=b;t=a}}else{k[735]=c|b;s=2980+(a+2<<2)|0;t=d}k[s>>2]=g;k[t+12>>2]=g;k[i+(m+8)>>2]=t;k[i+(m+12)>>2]=d;break}b=h>>>8;if(b)if(h>>>0>16777215)d=31;else{L=(b+1048320|0)>>>16&8;M=b<<L;K=(M+520192|0)>>>16&4;M=M<<K;d=(M+245760|0)>>>16&2;d=14-(K|L|d)+(M<<d>>>15)|0;d=h>>>(d+7|0)&1|d<<1}else d=0;b=3244+(d<<2)|0;k[i+(m+28)>>2]=d;k[i+(m+20)>>2]=0;k[i+(m+16)>>2]=0;a=k[736]|0;c=1<<d;if(!(a&c)){k[736]=a|c;k[b>>2]=g;k[i+(m+24)>>2]=b;k[i+(m+12)>>2]=g;k[i+(m+8)>>2]=g;break}b=k[b>>2]|0;c:do if((k[b+4>>2]&-8|0)!=(h|0)){d=h<<((d|0)==31?0:25-(d>>>1)|0);while(1){a=b+16+(d>>>31<<2)|0;c=k[a>>2]|0;if(!c)break;if((k[c+4>>2]&-8|0)==(h|0)){y=c;break c}else{d=d<<1;b=c}}if(a>>>0<(k[739]|0)>>>0)Ca();else{k[a>>2]=g;k[i+(m+24)>>2]=b;k[i+(m+12)>>2]=g;k[i+(m+8)>>2]=g;break b}}else y=b;while(0);b=y+8|0;a=k[b>>2]|0;M=k[739]|0;if(a>>>0>=M>>>0&y>>>0>=M>>>0){k[a+12>>2]=g;k[b>>2]=g;k[i+(m+8)>>2]=a;k[i+(m+12)>>2]=y;k[i+(m+24)>>2]=0;break}else Ca()}else{M=h+m|0;k[i+4>>2]=M|3;M=i+(M+4)|0;k[M>>2]=k[M>>2]|1}while(0);M=i+8|0;return M|0}else q=m}else q=m}else q=-1;while(0);c=k[737]|0;if(c>>>0>=q>>>0){b=c-q|0;a=k[740]|0;if(b>>>0>15){k[740]=a+q;k[737]=b;k[a+(q+4)>>2]=b|1;k[a+c>>2]=b;k[a+4>>2]=q|3}else{k[737]=0;k[740]=0;k[a+4>>2]=c|3;M=a+(c+4)|0;k[M>>2]=k[M>>2]|1}M=a+8|0;return M|0}a=k[738]|0;if(a>>>0>q>>>0){L=a-q|0;k[738]=L;M=k[741]|0;k[741]=M+q;k[M+(q+4)>>2]=L|1;k[M+4>>2]=q|3;M=M+8|0;return M|0}do if(!(k[853]|0)){a=Ia(30)|0;if(!(a+-1&a)){k[855]=a;k[854]=a;k[856]=-1;k[857]=-1;k[858]=0;k[846]=0;y=(Ua(0)|0)&-16^1431655768;k[853]=y;break}else Ca()}while(0);i=q+48|0;h=k[855]|0;j=q+47|0;g=h+j|0;h=0-h|0;l=g&h;if(l>>>0<=q>>>0){M=0;return M|0}a=k[845]|0;if((a|0)!=0?(t=k[843]|0,y=t+l|0,y>>>0<=t>>>0|y>>>0>a>>>0):0){M=0;return M|0}d:do if(!(k[846]&4)){a=k[741]|0;e:do if(a){e=3388;while(1){c=k[e>>2]|0;if(c>>>0<=a>>>0?(r=e+4|0,(c+(k[r>>2]|0)|0)>>>0>a>>>0):0){f=e;a=r;break}e=k[e+8>>2]|0;if(!e){v=174;break e}}c=g-(k[738]|0)&h;if(c>>>0<2147483647){e=Ga(c|0)|0;y=(e|0)==((k[f>>2]|0)+(k[a>>2]|0)|0);a=y?c:0;if(y){if((e|0)!=(-1|0)){w=e;p=a;v=194;break d}}else v=184}else a=0}else v=174;while(0);do if((v|0)==174){f=Ga(0)|0;if((f|0)!=(-1|0)){a=f;c=k[854]|0;e=c+-1|0;if(!(e&a))c=l;else c=l-a+(e+a&0-c)|0;a=k[843]|0;e=a+c|0;if(c>>>0>q>>>0&c>>>0<2147483647){y=k[845]|0;if((y|0)!=0?e>>>0<=a>>>0|e>>>0>y>>>0:0){a=0;break}e=Ga(c|0)|0;y=(e|0)==(f|0);a=y?c:0;if(y){w=f;p=a;v=194;break d}else v=184}else a=0}else a=0}while(0);f:do if((v|0)==184){f=0-c|0;do if(i>>>0>c>>>0&(c>>>0<2147483647&(e|0)!=(-1|0))?(u=k[855]|0,u=j-c+u&0-u,u>>>0<2147483647):0)if((Ga(u|0)|0)==(-1|0)){Ga(f|0)|0;break f}else{c=u+c|0;break}while(0);if((e|0)!=(-1|0)){w=e;p=c;v=194;break d}}while(0);k[846]=k[846]|4;v=191}else{a=0;v=191}while(0);if((((v|0)==191?l>>>0<2147483647:0)?(w=Ga(l|0)|0,x=Ga(0)|0,w>>>0<x>>>0&((w|0)!=(-1|0)&(x|0)!=(-1|0))):0)?(z=x-w|0,A=z>>>0>(q+40|0)>>>0,A):0){p=A?z:a;v=194}if((v|0)==194){a=(k[843]|0)+p|0;k[843]=a;if(a>>>0>(k[844]|0)>>>0)k[844]=a;g=k[741]|0;g:do if(g){f=3388;do{a=k[f>>2]|0;c=f+4|0;e=k[c>>2]|0;if((w|0)==(a+e|0)){B=a;C=c;D=e;E=f;v=204;break}f=k[f+8>>2]|0}while((f|0)!=0);if(((v|0)==204?(k[E+12>>2]&8|0)==0:0)?g>>>0<w>>>0&g>>>0>=B>>>0:0){k[C>>2]=D+p;M=(k[738]|0)+p|0;L=g+8|0;L=(L&7|0)==0?0:0-L&7;K=M-L|0;k[741]=g+L;k[738]=K;k[g+(L+4)>>2]=K|1;k[g+(M+4)>>2]=40;k[742]=k[857];break}a=k[739]|0;if(w>>>0<a>>>0){k[739]=w;a=w}c=w+p|0;f=3388;while(1){if((k[f>>2]|0)==(c|0)){e=f;c=f;v=212;break}f=k[f+8>>2]|0;if(!f){c=3388;break}}if((v|0)==212)if(!(k[c+12>>2]&8)){k[e>>2]=w;n=c+4|0;k[n>>2]=(k[n>>2]|0)+p;n=w+8|0;n=(n&7|0)==0?0:0-n&7;j=w+(p+8)|0;j=(j&7|0)==0?0:0-j&7;b=w+(j+p)|0;m=n+q|0;o=w+m|0;l=b-(w+n)-q|0;k[w+(n+4)>>2]=q|3;h:do if((b|0)!=(g|0)){if((b|0)==(k[740]|0)){M=(k[737]|0)+l|0;k[737]=M;k[740]=o;k[w+(m+4)>>2]=M|1;k[w+(M+m)>>2]=M;break}h=p+4|0;c=k[w+(h+j)>>2]|0;if((c&3|0)==1){i=c&-8;f=c>>>3;i:do if(c>>>0>=256){g=k[w+((j|24)+p)>>2]|0;d=k[w+(p+12+j)>>2]|0;do if((d|0)==(b|0)){e=j|16;d=w+(h+e)|0;c=k[d>>2]|0;if(!c){d=w+(e+p)|0;c=k[d>>2]|0;if(!c){J=0;break}}while(1){e=c+20|0;f=k[e>>2]|0;if(f){c=f;d=e;continue}e=c+16|0;f=k[e>>2]|0;if(!f)break;else{c=f;d=e}}if(d>>>0<a>>>0)Ca();else{k[d>>2]=0;J=c;break}}else{e=k[w+((j|8)+p)>>2]|0;if(e>>>0<a>>>0)Ca();a=e+12|0;if((k[a>>2]|0)!=(b|0))Ca();c=d+8|0;if((k[c>>2]|0)==(b|0)){k[a>>2]=d;k[c>>2]=e;J=d;break}else Ca()}while(0);if(!g)break;a=k[w+(p+28+j)>>2]|0;c=3244+(a<<2)|0;do if((b|0)!=(k[c>>2]|0)){if(g>>>0<(k[739]|0)>>>0)Ca();a=g+16|0;if((k[a>>2]|0)==(b|0))k[a>>2]=J;else k[g+20>>2]=J;if(!J)break i}else{k[c>>2]=J;if(J)break;k[736]=k[736]&~(1<<a);break i}while(0);c=k[739]|0;if(J>>>0<c>>>0)Ca();k[J+24>>2]=g;b=j|16;a=k[w+(b+p)>>2]|0;do if(a)if(a>>>0<c>>>0)Ca();else{k[J+16>>2]=a;k[a+24>>2]=J;break}while(0);b=k[w+(h+b)>>2]|0;if(!b)break;if(b>>>0<(k[739]|0)>>>0)Ca();else{k[J+20>>2]=b;k[b+24>>2]=J;break}}else{d=k[w+((j|8)+p)>>2]|0;e=k[w+(p+12+j)>>2]|0;c=2980+(f<<1<<2)|0;do if((d|0)!=(c|0)){if(d>>>0<a>>>0)Ca();if((k[d+12>>2]|0)==(b|0))break;Ca()}while(0);if((e|0)==(d|0)){k[735]=k[735]&~(1<<f);break}do if((e|0)==(c|0))F=e+8|0;else{if(e>>>0<a>>>0)Ca();a=e+8|0;if((k[a>>2]|0)==(b|0)){F=a;break}Ca()}while(0);k[d+12>>2]=e;k[F>>2]=d}while(0);b=w+((i|j)+p)|0;e=i+l|0}else e=l;b=b+4|0;k[b>>2]=k[b>>2]&-2;k[w+(m+4)>>2]=e|1;k[w+(e+m)>>2]=e;b=e>>>3;if(e>>>0<256){a=b<<1;d=2980+(a<<2)|0;c=k[735]|0;b=1<<b;do if(!(c&b)){k[735]=c|b;K=2980+(a+2<<2)|0;L=d}else{b=2980+(a+2<<2)|0;a=k[b>>2]|0;if(a>>>0>=(k[739]|0)>>>0){K=b;L=a;break}Ca()}while(0);k[K>>2]=o;k[L+12>>2]=o;k[w+(m+8)>>2]=L;k[w+(m+12)>>2]=d;break}b=e>>>8;do if(!b)d=0;else{if(e>>>0>16777215){d=31;break}K=(b+1048320|0)>>>16&8;L=b<<K;J=(L+520192|0)>>>16&4;L=L<<J;d=(L+245760|0)>>>16&2;d=14-(J|K|d)+(L<<d>>>15)|0;d=e>>>(d+7|0)&1|d<<1}while(0);b=3244+(d<<2)|0;k[w+(m+28)>>2]=d;k[w+(m+20)>>2]=0;k[w+(m+16)>>2]=0;a=k[736]|0;c=1<<d;if(!(a&c)){k[736]=a|c;k[b>>2]=o;k[w+(m+24)>>2]=b;k[w+(m+12)>>2]=o;k[w+(m+8)>>2]=o;break}b=k[b>>2]|0;j:do if((k[b+4>>2]&-8|0)!=(e|0)){d=e<<((d|0)==31?0:25-(d>>>1)|0);while(1){a=b+16+(d>>>31<<2)|0;c=k[a>>2]|0;if(!c)break;if((k[c+4>>2]&-8|0)==(e|0)){M=c;break j}else{d=d<<1;b=c}}if(a>>>0<(k[739]|0)>>>0)Ca();else{k[a>>2]=o;k[w+(m+24)>>2]=b;k[w+(m+12)>>2]=o;k[w+(m+8)>>2]=o;break h}}else M=b;while(0);b=M+8|0;a=k[b>>2]|0;L=k[739]|0;if(a>>>0>=L>>>0&M>>>0>=L>>>0){k[a+12>>2]=o;k[b>>2]=o;k[w+(m+8)>>2]=a;k[w+(m+12)>>2]=M;k[w+(m+24)>>2]=0;break}else Ca()}else{M=(k[738]|0)+l|0;k[738]=M;k[741]=o;k[w+(m+4)>>2]=M|1}while(0);M=w+(n|8)|0;return M|0}else c=3388;while(1){a=k[c>>2]|0;if(a>>>0<=g>>>0?(b=k[c+4>>2]|0,d=a+b|0,d>>>0>g>>>0):0)break;c=k[c+8>>2]|0}e=a+(b+-39)|0;a=a+(b+-47+((e&7|0)==0?0:0-e&7))|0;e=g+16|0;a=a>>>0<e>>>0?g:a;b=a+8|0;c=w+8|0;c=(c&7|0)==0?0:0-c&7;M=p+-40-c|0;k[741]=w+c;k[738]=M;k[w+(c+4)>>2]=M|1;k[w+(p+-36)>>2]=40;k[742]=k[857];c=a+4|0;k[c>>2]=27;k[b>>2]=k[847];k[b+4>>2]=k[848];k[b+8>>2]=k[849];k[b+12>>2]=k[850];k[847]=w;k[848]=p;k[850]=0;k[849]=b;b=a+28|0;k[b>>2]=7;if((a+32|0)>>>0<d>>>0)do{M=b;b=b+4|0;k[b>>2]=7}while((M+8|0)>>>0<d>>>0);if((a|0)!=(g|0)){f=a-g|0;k[c>>2]=k[c>>2]&-2;k[g+4>>2]=f|1;k[a>>2]=f;b=f>>>3;if(f>>>0<256){a=b<<1;d=2980+(a<<2)|0;c=k[735]|0;b=1<<b;if(c&b){b=2980+(a+2<<2)|0;a=k[b>>2]|0;if(a>>>0<(k[739]|0)>>>0)Ca();else{G=b;H=a}}else{k[735]=c|b;G=2980+(a+2<<2)|0;H=d}k[G>>2]=g;k[H+12>>2]=g;k[g+8>>2]=H;k[g+12>>2]=d;break}b=f>>>8;if(b)if(f>>>0>16777215)d=31;else{L=(b+1048320|0)>>>16&8;M=b<<L;K=(M+520192|0)>>>16&4;M=M<<K;d=(M+245760|0)>>>16&2;d=14-(K|L|d)+(M<<d>>>15)|0;d=f>>>(d+7|0)&1|d<<1}else d=0;c=3244+(d<<2)|0;k[g+28>>2]=d;k[g+20>>2]=0;k[e>>2]=0;b=k[736]|0;a=1<<d;if(!(b&a)){k[736]=b|a;k[c>>2]=g;k[g+24>>2]=c;k[g+12>>2]=g;k[g+8>>2]=g;break}b=k[c>>2]|0;k:do if((k[b+4>>2]&-8|0)!=(f|0)){d=f<<((d|0)==31?0:25-(d>>>1)|0);while(1){a=b+16+(d>>>31<<2)|0;c=k[a>>2]|0;if(!c)break;if((k[c+4>>2]&-8|0)==(f|0)){I=c;break k}else{d=d<<1;b=c}}if(a>>>0<(k[739]|0)>>>0)Ca();else{k[a>>2]=g;k[g+24>>2]=b;k[g+12>>2]=g;k[g+8>>2]=g;break g}}else I=b;while(0);b=I+8|0;a=k[b>>2]|0;M=k[739]|0;if(a>>>0>=M>>>0&I>>>0>=M>>>0){k[a+12>>2]=g;k[b>>2]=g;k[g+8>>2]=a;k[g+12>>2]=I;k[g+24>>2]=0;break}else Ca()}}else{M=k[739]|0;if((M|0)==0|w>>>0<M>>>0)k[739]=w;k[847]=w;k[848]=p;k[850]=0;k[744]=k[853];k[743]=-1;b=0;do{M=b<<1;L=2980+(M<<2)|0;k[2980+(M+3<<2)>>2]=L;k[2980+(M+2<<2)>>2]=L;b=b+1|0}while((b|0)!=32);M=w+8|0;M=(M&7|0)==0?0:0-M&7;L=p+-40-M|0;k[741]=w+M;k[738]=L;k[w+(M+4)>>2]=L|1;k[w+(p+-36)>>2]=40;k[742]=k[857]}while(0);b=k[738]|0;if(b>>>0>q>>>0){L=b-q|0;k[738]=L;M=k[741]|0;k[741]=M+q;k[M+(q+4)>>2]=L|1;k[M+4>>2]=q|3;M=M+8|0;return M|0}}M=Lh()|0;k[M>>2]=12;M=0;return M|0}function Qi(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;if(!a)return;b=a+-8|0;h=k[739]|0;if(b>>>0<h>>>0)Ca();c=k[a+-4>>2]|0;d=c&3;if((d|0)==1)Ca();o=c&-8;q=a+(o+-8)|0;do if(!(c&1)){b=k[b>>2]|0;if(!d)return;i=-8-b|0;l=a+i|0;m=b+o|0;if(l>>>0<h>>>0)Ca();if((l|0)==(k[740]|0)){b=a+(o+-4)|0;c=k[b>>2]|0;if((c&3|0)!=3){u=l;f=m;break}k[737]=m;k[b>>2]=c&-2;k[a+(i+4)>>2]=m|1;k[q>>2]=m;return}e=b>>>3;if(b>>>0<256){d=k[a+(i+8)>>2]|0;c=k[a+(i+12)>>2]|0;b=2980+(e<<1<<2)|0;if((d|0)!=(b|0)){if(d>>>0<h>>>0)Ca();if((k[d+12>>2]|0)!=(l|0))Ca()}if((c|0)==(d|0)){k[735]=k[735]&~(1<<e);u=l;f=m;break}if((c|0)!=(b|0)){if(c>>>0<h>>>0)Ca();b=c+8|0;if((k[b>>2]|0)==(l|0))g=b;else Ca()}else g=c+8|0;k[d+12>>2]=c;k[g>>2]=d;u=l;f=m;break}g=k[a+(i+24)>>2]|0;d=k[a+(i+12)>>2]|0;do if((d|0)==(l|0)){c=a+(i+20)|0;b=k[c>>2]|0;if(!b){c=a+(i+16)|0;b=k[c>>2]|0;if(!b){j=0;break}}while(1){d=b+20|0;e=k[d>>2]|0;if(e){b=e;c=d;continue}d=b+16|0;e=k[d>>2]|0;if(!e)break;else{b=e;c=d}}if(c>>>0<h>>>0)Ca();else{k[c>>2]=0;j=b;break}}else{e=k[a+(i+8)>>2]|0;if(e>>>0<h>>>0)Ca();b=e+12|0;if((k[b>>2]|0)!=(l|0))Ca();c=d+8|0;if((k[c>>2]|0)==(l|0)){k[b>>2]=d;k[c>>2]=e;j=d;break}else Ca()}while(0);if(g){b=k[a+(i+28)>>2]|0;c=3244+(b<<2)|0;if((l|0)==(k[c>>2]|0)){k[c>>2]=j;if(!j){k[736]=k[736]&~(1<<b);u=l;f=m;break}}else{if(g>>>0<(k[739]|0)>>>0)Ca();b=g+16|0;if((k[b>>2]|0)==(l|0))k[b>>2]=j;else k[g+20>>2]=j;if(!j){u=l;f=m;break}}c=k[739]|0;if(j>>>0<c>>>0)Ca();k[j+24>>2]=g;b=k[a+(i+16)>>2]|0;do if(b)if(b>>>0<c>>>0)Ca();else{k[j+16>>2]=b;k[b+24>>2]=j;break}while(0);b=k[a+(i+20)>>2]|0;if(b)if(b>>>0<(k[739]|0)>>>0)Ca();else{k[j+20>>2]=b;k[b+24>>2]=j;u=l;f=m;break}else{u=l;f=m}}else{u=l;f=m}}else{u=b;f=o}while(0);if(u>>>0>=q>>>0)Ca();b=a+(o+-4)|0;c=k[b>>2]|0;if(!(c&1))Ca();if(!(c&2)){if((q|0)==(k[741]|0)){t=(k[738]|0)+f|0;k[738]=t;k[741]=u;k[u+4>>2]=t|1;if((u|0)!=(k[740]|0))return;k[740]=0;k[737]=0;return}if((q|0)==(k[740]|0)){t=(k[737]|0)+f|0;k[737]=t;k[740]=u;k[u+4>>2]=t|1;k[u+t>>2]=t;return}f=(c&-8)+f|0;e=c>>>3;do if(c>>>0>=256){g=k[a+(o+16)>>2]|0;b=k[a+(o|4)>>2]|0;do if((b|0)==(q|0)){c=a+(o+12)|0;b=k[c>>2]|0;if(!b){c=a+(o+8)|0;b=k[c>>2]|0;if(!b){p=0;break}}while(1){d=b+20|0;e=k[d>>2]|0;if(e){b=e;c=d;continue}d=b+16|0;e=k[d>>2]|0;if(!e)break;else{b=e;c=d}}if(c>>>0<(k[739]|0)>>>0)Ca();else{k[c>>2]=0;p=b;break}}else{c=k[a+o>>2]|0;if(c>>>0<(k[739]|0)>>>0)Ca();d=c+12|0;if((k[d>>2]|0)!=(q|0))Ca();e=b+8|0;if((k[e>>2]|0)==(q|0)){k[d>>2]=b;k[e>>2]=c;p=b;break}else Ca()}while(0);if(g){b=k[a+(o+20)>>2]|0;c=3244+(b<<2)|0;if((q|0)==(k[c>>2]|0)){k[c>>2]=p;if(!p){k[736]=k[736]&~(1<<b);break}}else{if(g>>>0<(k[739]|0)>>>0)Ca();b=g+16|0;if((k[b>>2]|0)==(q|0))k[b>>2]=p;else k[g+20>>2]=p;if(!p)break}c=k[739]|0;if(p>>>0<c>>>0)Ca();k[p+24>>2]=g;b=k[a+(o+8)>>2]|0;do if(b)if(b>>>0<c>>>0)Ca();else{k[p+16>>2]=b;k[b+24>>2]=p;break}while(0);b=k[a+(o+12)>>2]|0;if(b)if(b>>>0<(k[739]|0)>>>0)Ca();else{k[p+20>>2]=b;k[b+24>>2]=p;break}}}else{d=k[a+o>>2]|0;c=k[a+(o|4)>>2]|0;b=2980+(e<<1<<2)|0;if((d|0)!=(b|0)){if(d>>>0<(k[739]|0)>>>0)Ca();if((k[d+12>>2]|0)!=(q|0))Ca()}if((c|0)==(d|0)){k[735]=k[735]&~(1<<e);break}if((c|0)!=(b|0)){if(c>>>0<(k[739]|0)>>>0)Ca();b=c+8|0;if((k[b>>2]|0)==(q|0))n=b;else Ca()}else n=c+8|0;k[d+12>>2]=c;k[n>>2]=d}while(0);k[u+4>>2]=f|1;k[u+f>>2]=f;if((u|0)==(k[740]|0)){k[737]=f;return}}else{k[b>>2]=c&-2;k[u+4>>2]=f|1;k[u+f>>2]=f}b=f>>>3;if(f>>>0<256){c=b<<1;e=2980+(c<<2)|0;d=k[735]|0;b=1<<b;if(d&b){b=2980+(c+2<<2)|0;c=k[b>>2]|0;if(c>>>0<(k[739]|0)>>>0)Ca();else{r=b;s=c}}else{k[735]=d|b;r=2980+(c+2<<2)|0;s=e}k[r>>2]=u;k[s+12>>2]=u;k[u+8>>2]=s;k[u+12>>2]=e;return}b=f>>>8;if(b)if(f>>>0>16777215)e=31;else{r=(b+1048320|0)>>>16&8;s=b<<r;q=(s+520192|0)>>>16&4;s=s<<q;e=(s+245760|0)>>>16&2;e=14-(q|r|e)+(s<<e>>>15)|0;e=f>>>(e+7|0)&1|e<<1}else e=0;b=3244+(e<<2)|0;k[u+28>>2]=e;k[u+20>>2]=0;k[u+16>>2]=0;c=k[736]|0;d=1<<e;a:do if(c&d){b=k[b>>2]|0;b:do if((k[b+4>>2]&-8|0)!=(f|0)){e=f<<((e|0)==31?0:25-(e>>>1)|0);while(1){c=b+16+(e>>>31<<2)|0;d=k[c>>2]|0;if(!d)break;if((k[d+4>>2]&-8|0)==(f|0)){t=d;break b}else{e=e<<1;b=d}}if(c>>>0<(k[739]|0)>>>0)Ca();else{k[c>>2]=u;k[u+24>>2]=b;k[u+12>>2]=u;k[u+8>>2]=u;break a}}else t=b;while(0);b=t+8|0;c=k[b>>2]|0;s=k[739]|0;if(c>>>0>=s>>>0&t>>>0>=s>>>0){k[c+12>>2]=u;k[b>>2]=u;k[u+8>>2]=c;k[u+12>>2]=t;k[u+24>>2]=0;break}else Ca()}else{k[736]=c|d;k[b>>2]=u;k[u+24>>2]=b;k[u+12>>2]=u;k[u+8>>2]=u}while(0);u=(k[743]|0)+-1|0;k[743]=u;if(!u)b=3396;else return;while(1){b=k[b>>2]|0;if(!b)break;else b=b+8|0}k[743]=-1;return}function Ri(a,b){a=a|0;b=b|0;var c=0;if(a){c=ha(b,a)|0;if((b|a)>>>0>65535)c=((c>>>0)/(a>>>0)|0|0)==(b|0)?c:-1}else c=0;b=Pi(c)|0;if(!b)return b|0;if(!(k[b+-4>>2]&3))return b|0;_i(b|0,0,c|0)|0;return b|0}function Si(a,b){a=a|0;b=b|0;var c=0,d=0;if(!a){a=Pi(b)|0;return a|0}if(b>>>0>4294967231){a=Lh()|0;k[a>>2]=12;a=0;return a|0}c=Ui(a+-8|0,b>>>0<11?16:b+11&-8)|0;if(c){a=c+8|0;return a|0}c=Pi(b)|0;if(!c){a=0;return a|0}d=k[a+-4>>2]|0;d=(d&-8)-((d&3|0)==0?8:4)|0;cj(c|0,a|0,(d>>>0<b>>>0?d:b)|0)|0;Qi(a);a=c;return a|0}function Ti(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;do if((b|0)!=8){d=b>>>2;if((b&3|0)!=0|(d|0)==0){a=22;return a|0}if(d+1073741823&d){a=22;return a|0}if((-64-b|0)>>>0<c>>>0){a=12;return a|0}else{d=Vi(b>>>0<16?16:b,c)|0;break}}else d=Pi(c)|0;while(0);if(!d){a=12;return a|0}k[a>>2]=d;a=0;return a|0}function Ui(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;o=a+4|0;p=k[o>>2]|0;i=p&-8;l=a+i|0;h=k[739]|0;c=p&3;if(!((c|0)!=1&a>>>0>=h>>>0&a>>>0<l>>>0))Ca();d=a+(i|4)|0;e=k[d>>2]|0;if(!(e&1))Ca();if(!c){if(b>>>0<256){a=0;return a|0}if(i>>>0>=(b+4|0)>>>0?(i-b|0)>>>0<=k[855]<<1>>>0:0)return a|0;a=0;return a|0}if(i>>>0>=b>>>0){c=i-b|0;if(c>>>0<=15)return a|0;k[o>>2]=p&1|b|2;k[a+(b+4)>>2]=c|3;k[d>>2]=k[d>>2]|1;Wi(a+b|0,c);return a|0}if((l|0)==(k[741]|0)){c=(k[738]|0)+i|0;if(c>>>0<=b>>>0){a=0;return a|0}n=c-b|0;k[o>>2]=p&1|b|2;k[a+(b+4)>>2]=n|1;k[741]=a+b;k[738]=n;return a|0}if((l|0)==(k[740]|0)){d=(k[737]|0)+i|0;if(d>>>0<b>>>0){a=0;return a|0}c=d-b|0;if(c>>>0>15){k[o>>2]=p&1|b|2;k[a+(b+4)>>2]=c|1;k[a+d>>2]=c;d=a+(d+4)|0;k[d>>2]=k[d>>2]&-2;d=a+b|0}else{k[o>>2]=p&1|d|2;d=a+(d+4)|0;k[d>>2]=k[d>>2]|1;d=0;c=0}k[737]=c;k[740]=d;return a|0}if(e&2){a=0;return a|0}m=(e&-8)+i|0;if(m>>>0<b>>>0){a=0;return a|0}n=m-b|0;f=e>>>3;do if(e>>>0>=256){g=k[a+(i+24)>>2]|0;f=k[a+(i+12)>>2]|0;do if((f|0)==(l|0)){d=a+(i+20)|0;c=k[d>>2]|0;if(!c){d=a+(i+16)|0;c=k[d>>2]|0;if(!c){j=0;break}}while(1){e=c+20|0;f=k[e>>2]|0;if(f){c=f;d=e;continue}e=c+16|0;f=k[e>>2]|0;if(!f)break;else{c=f;d=e}}if(d>>>0<h>>>0)Ca();else{k[d>>2]=0;j=c;break}}else{e=k[a+(i+8)>>2]|0;if(e>>>0<h>>>0)Ca();c=e+12|0;if((k[c>>2]|0)!=(l|0))Ca();d=f+8|0;if((k[d>>2]|0)==(l|0)){k[c>>2]=f;k[d>>2]=e;j=f;break}else Ca()}while(0);if(g){c=k[a+(i+28)>>2]|0;d=3244+(c<<2)|0;if((l|0)==(k[d>>2]|0)){k[d>>2]=j;if(!j){k[736]=k[736]&~(1<<c);break}}else{if(g>>>0<(k[739]|0)>>>0)Ca();c=g+16|0;if((k[c>>2]|0)==(l|0))k[c>>2]=j;else k[g+20>>2]=j;if(!j)break}d=k[739]|0;if(j>>>0<d>>>0)Ca();k[j+24>>2]=g;c=k[a+(i+16)>>2]|0;do if(c)if(c>>>0<d>>>0)Ca();else{k[j+16>>2]=c;k[c+24>>2]=j;break}while(0);c=k[a+(i+20)>>2]|0;if(c)if(c>>>0<(k[739]|0)>>>0)Ca();else{k[j+20>>2]=c;k[c+24>>2]=j;break}}}else{e=k[a+(i+8)>>2]|0;d=k[a+(i+12)>>2]|0;c=2980+(f<<1<<2)|0;if((e|0)!=(c|0)){if(e>>>0<h>>>0)Ca();if((k[e+12>>2]|0)!=(l|0))Ca()}if((d|0)==(e|0)){k[735]=k[735]&~(1<<f);break}if((d|0)!=(c|0)){if(d>>>0<h>>>0)Ca();c=d+8|0;if((k[c>>2]|0)==(l|0))g=c;else Ca()}else g=d+8|0;k[e+12>>2]=d;k[g>>2]=e}while(0);if(n>>>0<16){k[o>>2]=m|p&1|2;b=a+(m|4)|0;k[b>>2]=k[b>>2]|1;return a|0}else{k[o>>2]=p&1|b|2;k[a+(b+4)>>2]=n|3;p=a+(m|4)|0;k[p>>2]=k[p>>2]|1;Wi(a+b|0,n);return a|0}return 0}function Vi(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;a=a>>>0<16?16:a;if(a+-1&a){c=16;while(1)if(c>>>0<a>>>0)c=c<<1;else{a=c;break}}if((-64-a|0)>>>0<=b>>>0){h=Lh()|0;k[h>>2]=12;h=0;return h|0}g=b>>>0<11?16:b+11&-8;d=Pi(g+12+a|0)|0;if(!d){h=0;return h|0}b=d+-8|0;c=a+-1|0;do if(d&c){e=d+c&0-a;c=e+-8|0;f=b;e=(c-f|0)>>>0>15?c:e+(a+-8)|0;f=e-f|0;a=d+-4|0;d=k[a>>2]|0;c=(d&-8)-f|0;if(!(d&3)){k[e>>2]=(k[b>>2]|0)+f;k[e+4>>2]=c;b=e;break}else{d=e+4|0;k[d>>2]=c|k[d>>2]&1|2;c=e+(c+4)|0;k[c>>2]=k[c>>2]|1;k[a>>2]=f|k[a>>2]&1|2;k[d>>2]=k[d>>2]|1;Wi(b,f);b=e;break}}while(0);a=b+4|0;c=k[a>>2]|0;if((c&3|0)!=0?(h=c&-8,h>>>0>(g+16|0)>>>0):0){f=h-g|0;k[a>>2]=g|c&1|2;k[b+(g|4)>>2]=f|3;h=b+(h|4)|0;k[h>>2]=k[h>>2]|1;Wi(b+g|0,f)}h=b+8|0;return h|0}function Wi(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;q=a+b|0;c=k[a+4>>2]|0;do if(!(c&1)){j=k[a>>2]|0;if(!(c&3))return;n=a+(0-j)|0;m=j+b|0;i=k[739]|0;if(n>>>0<i>>>0)Ca();if((n|0)==(k[740]|0)){d=a+(b+4)|0;c=k[d>>2]|0;if((c&3|0)!=3){t=n;g=m;break}k[737]=m;k[d>>2]=c&-2;k[a+(4-j)>>2]=m|1;k[q>>2]=m;return}f=j>>>3;if(j>>>0<256){e=k[a+(8-j)>>2]|0;d=k[a+(12-j)>>2]|0;c=2980+(f<<1<<2)|0;if((e|0)!=(c|0)){if(e>>>0<i>>>0)Ca();if((k[e+12>>2]|0)!=(n|0))Ca()}if((d|0)==(e|0)){k[735]=k[735]&~(1<<f);t=n;g=m;break}if((d|0)!=(c|0)){if(d>>>0<i>>>0)Ca();c=d+8|0;if((k[c>>2]|0)==(n|0))h=c;else Ca()}else h=d+8|0;k[e+12>>2]=d;k[h>>2]=e;t=n;g=m;break}h=k[a+(24-j)>>2]|0;e=k[a+(12-j)>>2]|0;do if((e|0)==(n|0)){e=16-j|0;d=a+(e+4)|0;c=k[d>>2]|0;if(!c){d=a+e|0;c=k[d>>2]|0;if(!c){l=0;break}}while(1){e=c+20|0;f=k[e>>2]|0;if(f){c=f;d=e;continue}e=c+16|0;f=k[e>>2]|0;if(!f)break;else{c=f;d=e}}if(d>>>0<i>>>0)Ca();else{k[d>>2]=0;l=c;break}}else{f=k[a+(8-j)>>2]|0;if(f>>>0<i>>>0)Ca();c=f+12|0;if((k[c>>2]|0)!=(n|0))Ca();d=e+8|0;if((k[d>>2]|0)==(n|0)){k[c>>2]=e;k[d>>2]=f;l=e;break}else Ca()}while(0);if(h){c=k[a+(28-j)>>2]|0;d=3244+(c<<2)|0;if((n|0)==(k[d>>2]|0)){k[d>>2]=l;if(!l){k[736]=k[736]&~(1<<c);t=n;g=m;break}}else{if(h>>>0<(k[739]|0)>>>0)Ca();c=h+16|0;if((k[c>>2]|0)==(n|0))k[c>>2]=l;else k[h+20>>2]=l;if(!l){t=n;g=m;break}}e=k[739]|0;if(l>>>0<e>>>0)Ca();k[l+24>>2]=h;c=16-j|0;d=k[a+c>>2]|0;do if(d)if(d>>>0<e>>>0)Ca();else{k[l+16>>2]=d;k[d+24>>2]=l;break}while(0);c=k[a+(c+4)>>2]|0;if(c)if(c>>>0<(k[739]|0)>>>0)Ca();else{k[l+20>>2]=c;k[c+24>>2]=l;t=n;g=m;break}else{t=n;g=m}}else{t=n;g=m}}else{t=a;g=b}while(0);i=k[739]|0;if(q>>>0<i>>>0)Ca();c=a+(b+4)|0;d=k[c>>2]|0;if(!(d&2)){if((q|0)==(k[741]|0)){s=(k[738]|0)+g|0;k[738]=s;k[741]=t;k[t+4>>2]=s|1;if((t|0)!=(k[740]|0))return;k[740]=0;k[737]=0;return}if((q|0)==(k[740]|0)){s=(k[737]|0)+g|0;k[737]=s;k[740]=t;k[t+4>>2]=s|1;k[t+s>>2]=s;return}g=(d&-8)+g|0;f=d>>>3;do if(d>>>0>=256){h=k[a+(b+24)>>2]|0;e=k[a+(b+12)>>2]|0;do if((e|0)==(q|0)){d=a+(b+20)|0;c=k[d>>2]|0;if(!c){d=a+(b+16)|0;c=k[d>>2]|0;if(!c){p=0;break}}while(1){e=c+20|0;f=k[e>>2]|0;if(f){c=f;d=e;continue}e=c+16|0;f=k[e>>2]|0;if(!f)break;else{c=f;d=e}}if(d>>>0<i>>>0)Ca();else{k[d>>2]=0;p=c;break}}else{f=k[a+(b+8)>>2]|0;if(f>>>0<i>>>0)Ca();c=f+12|0;if((k[c>>2]|0)!=(q|0))Ca();d=e+8|0;if((k[d>>2]|0)==(q|0)){k[c>>2]=e;k[d>>2]=f;p=e;break}else Ca()}while(0);if(h){c=k[a+(b+28)>>2]|0;d=3244+(c<<2)|0;if((q|0)==(k[d>>2]|0)){k[d>>2]=p;if(!p){k[736]=k[736]&~(1<<c);break}}else{if(h>>>0<(k[739]|0)>>>0)Ca();c=h+16|0;if((k[c>>2]|0)==(q|0))k[c>>2]=p;else k[h+20>>2]=p;if(!p)break}d=k[739]|0;if(p>>>0<d>>>0)Ca();k[p+24>>2]=h;c=k[a+(b+16)>>2]|0;do if(c)if(c>>>0<d>>>0)Ca();else{k[p+16>>2]=c;k[c+24>>2]=p;break}while(0);c=k[a+(b+20)>>2]|0;if(c)if(c>>>0<(k[739]|0)>>>0)Ca();else{k[p+20>>2]=c;k[c+24>>2]=p;break}}}else{e=k[a+(b+8)>>2]|0;d=k[a+(b+12)>>2]|0;c=2980+(f<<1<<2)|0;if((e|0)!=(c|0)){if(e>>>0<i>>>0)Ca();if((k[e+12>>2]|0)!=(q|0))Ca()}if((d|0)==(e|0)){k[735]=k[735]&~(1<<f);break}if((d|0)!=(c|0)){if(d>>>0<i>>>0)Ca();c=d+8|0;if((k[c>>2]|0)==(q|0))o=c;else Ca()}else o=d+8|0;k[e+12>>2]=d;k[o>>2]=e}while(0);k[t+4>>2]=g|1;k[t+g>>2]=g;if((t|0)==(k[740]|0)){k[737]=g;return}}else{k[c>>2]=d&-2;k[t+4>>2]=g|1;k[t+g>>2]=g}c=g>>>3;if(g>>>0<256){d=c<<1;f=2980+(d<<2)|0;e=k[735]|0;c=1<<c;if(e&c){c=2980+(d+2<<2)|0;d=k[c>>2]|0;if(d>>>0<(k[739]|0)>>>0)Ca();else{r=c;s=d}}else{k[735]=e|c;r=2980+(d+2<<2)|0;s=f}k[r>>2]=t;k[s+12>>2]=t;k[t+8>>2]=s;k[t+12>>2]=f;return}c=g>>>8;if(c)if(g>>>0>16777215)f=31;else{r=(c+1048320|0)>>>16&8;s=c<<r;q=(s+520192|0)>>>16&4;s=s<<q;f=(s+245760|0)>>>16&2;f=14-(q|r|f)+(s<<f>>>15)|0;f=g>>>(f+7|0)&1|f<<1}else f=0;c=3244+(f<<2)|0;k[t+28>>2]=f;k[t+20>>2]=0;k[t+16>>2]=0;d=k[736]|0;e=1<<f;if(!(d&e)){k[736]=d|e;k[c>>2]=t;k[t+24>>2]=c;k[t+12>>2]=t;k[t+8>>2]=t;return}c=k[c>>2]|0;a:do if((k[c+4>>2]&-8|0)!=(g|0)){f=g<<((f|0)==31?0:25-(f>>>1)|0);while(1){d=c+16+(f>>>31<<2)|0;e=k[d>>2]|0;if(!e)break;if((k[e+4>>2]&-8|0)==(g|0)){c=e;break a}else{f=f<<1;c=e}}if(d>>>0<(k[739]|0)>>>0)Ca();k[d>>2]=t;k[t+24>>2]=c;k[t+12>>2]=t;k[t+8>>2]=t;return}while(0);d=c+8|0;e=k[d>>2]|0;s=k[739]|0;if(!(e>>>0>=s>>>0&c>>>0>=s>>>0))Ca();k[e+12>>2]=t;k[d>>2]=t;k[t+8>>2]=e;k[t+12>>2]=c;k[t+24>>2]=0;return}function Xi(){}function Yi(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=b-d-(c>>>0>a>>>0|0)>>>0;return (L=d,a-c>>>0|0)|0}function Zi(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){L=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}L=(b|0)<0?-1:0;return b>>c-32|0}function _i(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=a+c|0;if((c|0)>=20){b=b&255;f=a&3;g=b|b<<8|b<<16|b<<24;e=d&~3;if(f){f=a+4-f|0;while((a|0)<(f|0)){i[a>>0]=b;a=a+1|0}}while((a|0)<(e|0)){k[a>>2]=g;a=a+4|0}}while((a|0)<(d|0)){i[a>>0]=b;a=a+1|0}return a-c|0}function $i(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){L=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}L=a<<c-32;return 0}function aj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;c=a+c>>>0;return (L=b+d+(c>>>0<a>>>0|0)>>>0,c|0)|0}function bj(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){L=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}L=0;return b>>>c-32|0}function cj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if((c|0)>=4096)return Ha(a|0,b|0,c|0)|0;d=a|0;if((a&3)==(b&3)){while(a&3){if(!c)return d|0;i[a>>0]=i[b>>0]|0;a=a+1|0;b=b+1|0;c=c-1|0}while((c|0)>=4){k[a>>2]=k[b>>2];a=a+4|0;b=b+4|0;c=c-4|0}}while((c|0)>0){i[a>>0]=i[b>>0]|0;a=a+1|0;b=b+1|0;c=c-1|0}return d|0}function dj(a){a=a|0;var b=0;b=i[v+(a&255)>>0]|0;if((b|0)<8)return b|0;b=i[v+(a>>8&255)>>0]|0;if((b|0)<8)return b+8|0;b=i[v+(a>>16&255)>>0]|0;if((b|0)<8)return b+16|0;return (i[v+(a>>>24)>>0]|0)+24|0}function ej(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;f=a&65535;e=b&65535;c=ha(e,f)|0;d=a>>>16;a=(c>>>16)+(ha(e,d)|0)|0;e=b>>>16;b=ha(e,f)|0;return (L=(a>>>16)+(ha(e,d)|0)+(((a&65535)+b|0)>>>16)|0,a+b<<16|c&65535|0)|0}function fj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=b>>31|((b|0)<0?-1:0)<<1;i=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;f=d>>31|((d|0)<0?-1:0)<<1;e=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;h=Yi(j^a,i^b,j,i)|0;g=L;a=f^j;b=e^i;return Yi((kj(h,g,Yi(f^c,e^d,f,e)|0,L,0)|0)^a,L^b,a,b)|0}function gj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;e=r;r=r+16|0;h=e|0;g=b>>31|((b|0)<0?-1:0)<<1;f=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;j=d>>31|((d|0)<0?-1:0)<<1;i=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;a=Yi(g^a,f^b,g,f)|0;b=L;kj(a,b,Yi(j^c,i^d,j,i)|0,L,h)|0;d=Yi(k[h>>2]^g,k[h+4>>2]^f,g,f)|0;c=L;r=e;return (L=c,d)|0}function hj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;f=c;c=ej(e,f)|0;a=L;return (L=(ha(b,f)|0)+(ha(d,e)|0)+a|a&0,c|0|0)|0}function ij(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return kj(a,b,c,d,0)|0}function jj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;f=r;r=r+16|0;e=f|0;kj(a,b,c,d,e)|0;r=f;return (L=k[e+4>>2]|0,k[e>>2]|0)|0}function kj(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;l=a;i=b;j=i;g=c;n=d;h=n;if(!j){f=(e|0)!=0;if(!h){if(f){k[e>>2]=(l>>>0)%(g>>>0);k[e+4>>2]=0}n=0;e=(l>>>0)/(g>>>0)>>>0;return (L=n,e)|0}else{if(!f){n=0;e=0;return (L=n,e)|0}k[e>>2]=a|0;k[e+4>>2]=b&0;n=0;e=0;return (L=n,e)|0}}f=(h|0)==0;do if(g){if(!f){f=(ja(h|0)|0)-(ja(j|0)|0)|0;if(f>>>0<=31){m=f+1|0;h=31-f|0;b=f-31>>31;g=m;a=l>>>(m>>>0)&b|j<<h;b=j>>>(m>>>0)&b;f=0;h=l<<h;break}if(!e){n=0;e=0;return (L=n,e)|0}k[e>>2]=a|0;k[e+4>>2]=i|b&0;n=0;e=0;return (L=n,e)|0}f=g-1|0;if(f&g){h=(ja(g|0)|0)+33-(ja(j|0)|0)|0;p=64-h|0;m=32-h|0;i=m>>31;o=h-32|0;b=o>>31;g=h;a=m-1>>31&j>>>(o>>>0)|(j<<m|l>>>(h>>>0))&b;b=b&j>>>(h>>>0);f=l<<p&i;h=(j<<p|l>>>(o>>>0))&i|l<<m&h-33>>31;break}if(e){k[e>>2]=f&l;k[e+4>>2]=0}if((g|0)==1){o=i|b&0;p=a|0|0;return (L=o,p)|0}else{p=dj(g|0)|0;o=j>>>(p>>>0)|0;p=j<<32-p|l>>>(p>>>0)|0;return (L=o,p)|0}}else{if(f){if(e){k[e>>2]=(j>>>0)%(g>>>0);k[e+4>>2]=0}o=0;p=(j>>>0)/(g>>>0)>>>0;return (L=o,p)|0}if(!l){if(e){k[e>>2]=0;k[e+4>>2]=(j>>>0)%(h>>>0)}o=0;p=(j>>>0)/(h>>>0)>>>0;return (L=o,p)|0}f=h-1|0;if(!(f&h)){if(e){k[e>>2]=a|0;k[e+4>>2]=f&j|b&0}o=0;p=j>>>((dj(h|0)|0)>>>0);return (L=o,p)|0}f=(ja(h|0)|0)-(ja(j|0)|0)|0;if(f>>>0<=30){b=f+1|0;h=31-f|0;g=b;a=j<<h|l>>>(b>>>0);b=j>>>(b>>>0);f=0;h=l<<h;break}if(!e){o=0;p=0;return (L=o,p)|0}k[e>>2]=a|0;k[e+4>>2]=i|b&0;o=0;p=0;return (L=o,p)|0}while(0);if(!g){j=h;i=0;h=0}else{m=c|0|0;l=n|d&0;j=aj(m|0,l|0,-1,-1)|0;c=L;i=h;h=0;do{d=i;i=f>>>31|i<<1;f=h|f<<1;d=a<<1|d>>>31|0;n=a>>>31|b<<1|0;Yi(j,c,d,n)|0;p=L;o=p>>31|((p|0)<0?-1:0)<<1;h=o&1;a=Yi(d,n,o&m,(((p|0)<0?-1:0)>>31|((p|0)<0?-1:0)<<1)&l)|0;b=L;g=g-1|0}while((g|0)!=0);j=i;i=0}g=0;if(e){k[e>>2]=a;k[e+4>>2]=b}o=(f|0)>>>31|(j|g)<<1|(g<<1|f>>>31)&0|i;p=(f<<1|0>>>31)&-2|h;return (L=o,p)|0}function lj(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;return _a[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0)|0}function mj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return $a[a&63](b|0,c|0,d|0)|0}function nj(a,b){a=a|0;b=b|0;return +ab[a&3](b|0)}function oj(a,b){a=a|0;b=b|0;bb[a&7](b|0)}function pj(a,b,c){a=a|0;b=b|0;c=c|0;cb[a&7](b|0,c|0)}function qj(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return db[a&7](b|0,c|0,d|0,e|0,f|0,g|0)|0}function rj(a,b){a=a|0;b=b|0;return eb[a&15](b|0)|0}function sj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;fb[a&15](b|0,c|0,d|0)}function tj(a,b,c,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;return gb[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0,k|0,l|0)|0}function uj(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return hb[a&63](b|0,c|0,d|0,e|0)|0}function vj(a,b,c){a=a|0;b=b|0;c=c|0;return ib[a&7](b|0,c|0)|0}function wj(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return jb[a&3](b|0,c|0,d|0,e|0,f|0)|0}function xj(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;kb[a&3](b|0,c|0,d|0,e|0)}function yj(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;ka(0);return 0}function zj(a,b,c){a=a|0;b=b|0;c=c|0;ka(1);return 0}function Aj(a){a=a|0;ka(2);return 0.0}function Bj(a){a=a|0;ka(3)}function Cj(a,b){a=a|0;b=b|0;ka(4)}function Dj(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ka(5);return 0}function Ej(a){a=a|0;ka(6);return 0}function Fj(a,b,c){a=a|0;b=b|0;c=c|0;ka(7)}function Gj(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;ka(8);return 0}function Hj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ka(9);return 0}function Ij(a,b){a=a|0;b=b|0;ka(10);return 0}function Jj(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ka(11);return 0}function Kj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ka(12)}

// EMSCRIPTEN_END_FUNCS
var _a=[yj,od,ef,yj];var $a=[zj,Li,di,bi,Kb,Lb,Mb,Nb,Rc,Sc,Uc,jd,xd,Ye,lf,yd,zd,Xe,Ze,Vc,Wc,Xc,Yc,Dd,Ed,Fd,Gd,Id,Jd,Ld,Md,Nd,Od,Pd,Qd,Rd,Sd,Td,Ud,Vd,Wd,Xd,Yd,Zd,_d,$d,ae,be,ce,de,ee,fe,pf,qf,rf,sf,tf,uf,vf,wf,ai,ci,zj,zj];var ab=[Aj,ge,he,Aj];var bb=[Bj,gd,df,qg,rg,Hi,Ii,Bj];var cb=[Cj,wb,xb,yb,ec,ed,Ve,Cj];var db=[Dj,nd,cf,Bd,bf,Dj,Dj,Dj];var eb=[Ej,$h,td,ud,kf,jf,gi,Ug,Rg,Ej,Ej,Ej,Ej,Ej,Ej,Ej];var fb=[Fj,Qe,Re,Se,Te,Ke,Le,Me,Ne,Ge,He,Ie,Je,qd,hf,Fj];var gb=[Gj,md,af,Gj];var hb=[Hj,ne,oe,pe,qe,re,se,te,ue,ve,we,xe,ye,ze,Ae,Be,Ce,De,Ee,Fe,Hf,If,Jf,Bf,Cf,Df,Ef,Ff,Gf,Gb,Hb,Ib,Jb,vd,kd,Ue,$e,Ad,hd,_e,We,Hj,Hj,Hj,Hj,Hj,Hj,Hj,Hj,Hj,Hj,Hj,Hj,Hj,Hj,Hj,Hj,Hj,Hj,Hj,Hj,Hj,Hj,Hj];var ib=[Ij,Tc,xf,yf,zf,Af,Ij,Ij];var jb=[Jj,wd,ff,Jj];var kb=[Kj,Yg,$g,Kj];return{_opj_stream_destroy:Pb,_opj_stream_set_read_function:Qb,_opj_read_tile_header:wc,_opj_set_warning_handler:mc,_opj_destroy_cstr_info:Mc,_opj_image_create:gc,_opj_set_error_handler:nc,_opj_stream_set_user_data:Ub,_opj_end_decompress:Gc,_bitshift64Lshr:bj,_opj_stream_set_seek_function:Rb,_opj_decode:uc,_opj_set_decoded_resolution_factor:zc,_i64Add:aj,_opj_stream_create_default_file_stream:Pc,_opj_encode:Ec,_bitshift64Ashr:Zi,_opj_get_decoded_tile:yc,_memset:_i,_opj_version:pc,_memcpy:cj,_opj_destroy_cstr_index:Oc,_opj_stream_set_user_data_length:Vb,_opj_get_cstr_index:Nc,_opj_image_destroy:hc,_opj_stream_create_file_stream:Qc,_opj_setup_encoder:Cc,_opj_stream_default_create:Ob,_bitshift64Shl:$i,_opj_stream_create:Fb,_jp2_version:vb,_i64Subtract:Yi,_opj_stream_set_skip_function:Tb,_opj_set_default_decoder_parameters:rc,_opj_read_header:tc,_opj_get_cstr_info:Lc,_opj_set_default_encoder_parameters:Bc,_opj_set_decode_area:vc,_opj_stream_set_write_function:Sb,_opj_dump_codec:Kc,_opj_create_decompress:qc,_opj_decode_tile_data:xc,_free:Qi,_opj_image_tile_create:kc,_opj_set_MCT:Hc,_opj_set_info_handler:lc,_opj_start_compress:Dc,_opj_write_tile:Ic,_opj_setup_decoder:sc,_malloc:Pi,_opj_end_compress:Fc,_opj_destroy_codec:Jc,_jp2_decode:ub,_opj_stream_create_buffer_stream:oc,_opj_create_compress:Ac,runPostSets:Xi,_emscripten_replace_memory:Za,stackAlloc:lb,stackSave:mb,stackRestore:nb,establishStackSpace:ob,setThrew:pb,setTempRet0:sb,getTempRet0:tb,dynCall_iiiiiiii:lj,dynCall_iiii:mj,dynCall_di:nj,dynCall_vi:oj,dynCall_vii:pj,dynCall_iiiiiii:qj,dynCall_ii:rj,dynCall_viii:sj,dynCall_iiiiiiiiiiii:tj,dynCall_iiiii:uj,dynCall_iii:vj,dynCall_iiiiii:wj,dynCall_viiii:xj}})


// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg,Module.asmLibraryArg,buffer);var _opj_stream_destroy=Module["_opj_stream_destroy"]=asm["_opj_stream_destroy"];var _opj_stream_set_read_function=Module["_opj_stream_set_read_function"]=asm["_opj_stream_set_read_function"];var _opj_read_tile_header=Module["_opj_read_tile_header"]=asm["_opj_read_tile_header"];var _opj_set_warning_handler=Module["_opj_set_warning_handler"]=asm["_opj_set_warning_handler"];var _opj_destroy_cstr_info=Module["_opj_destroy_cstr_info"]=asm["_opj_destroy_cstr_info"];var _opj_image_create=Module["_opj_image_create"]=asm["_opj_image_create"];var _opj_set_error_handler=Module["_opj_set_error_handler"]=asm["_opj_set_error_handler"];var _opj_image_tile_create=Module["_opj_image_tile_create"]=asm["_opj_image_tile_create"];var _opj_end_decompress=Module["_opj_end_decompress"]=asm["_opj_end_decompress"];var _bitshift64Lshr=Module["_bitshift64Lshr"]=asm["_bitshift64Lshr"];var _opj_stream_set_seek_function=Module["_opj_stream_set_seek_function"]=asm["_opj_stream_set_seek_function"];var _opj_decode=Module["_opj_decode"]=asm["_opj_decode"];var _opj_set_decoded_resolution_factor=Module["_opj_set_decoded_resolution_factor"]=asm["_opj_set_decoded_resolution_factor"];var _opj_stream_create_default_file_stream=Module["_opj_stream_create_default_file_stream"]=asm["_opj_stream_create_default_file_stream"];var _opj_set_default_decoder_parameters=Module["_opj_set_default_decoder_parameters"]=asm["_opj_set_default_decoder_parameters"];var _bitshift64Ashr=Module["_bitshift64Ashr"]=asm["_bitshift64Ashr"];var _opj_get_decoded_tile=Module["_opj_get_decoded_tile"]=asm["_opj_get_decoded_tile"];var _memset=Module["_memset"]=asm["_memset"];var _opj_version=Module["_opj_version"]=asm["_opj_version"];var _memcpy=Module["_memcpy"]=asm["_memcpy"];var _opj_destroy_cstr_index=Module["_opj_destroy_cstr_index"]=asm["_opj_destroy_cstr_index"];var _opj_stream_set_user_data_length=Module["_opj_stream_set_user_data_length"]=asm["_opj_stream_set_user_data_length"];var _opj_get_cstr_index=Module["_opj_get_cstr_index"]=asm["_opj_get_cstr_index"];var _opj_image_destroy=Module["_opj_image_destroy"]=asm["_opj_image_destroy"];var _opj_stream_create_file_stream=Module["_opj_stream_create_file_stream"]=asm["_opj_stream_create_file_stream"];var _opj_setup_encoder=Module["_opj_setup_encoder"]=asm["_opj_setup_encoder"];var _opj_stream_default_create=Module["_opj_stream_default_create"]=asm["_opj_stream_default_create"];var _bitshift64Shl=Module["_bitshift64Shl"]=asm["_bitshift64Shl"];var _opj_stream_create=Module["_opj_stream_create"]=asm["_opj_stream_create"];var _jp2_version=Module["_jp2_version"]=asm["_jp2_version"];var _i64Subtract=Module["_i64Subtract"]=asm["_i64Subtract"];var _opj_stream_set_skip_function=Module["_opj_stream_set_skip_function"]=asm["_opj_stream_set_skip_function"];var _opj_encode=Module["_opj_encode"]=asm["_opj_encode"];var _i64Add=Module["_i64Add"]=asm["_i64Add"];var _opj_get_cstr_info=Module["_opj_get_cstr_info"]=asm["_opj_get_cstr_info"];var _opj_set_default_encoder_parameters=Module["_opj_set_default_encoder_parameters"]=asm["_opj_set_default_encoder_parameters"];var _opj_set_decode_area=Module["_opj_set_decode_area"]=asm["_opj_set_decode_area"];var _opj_stream_set_write_function=Module["_opj_stream_set_write_function"]=asm["_opj_stream_set_write_function"];var _opj_dump_codec=Module["_opj_dump_codec"]=asm["_opj_dump_codec"];var _opj_read_header=Module["_opj_read_header"]=asm["_opj_read_header"];var _opj_create_decompress=Module["_opj_create_decompress"]=asm["_opj_create_decompress"];var _opj_decode_tile_data=Module["_opj_decode_tile_data"]=asm["_opj_decode_tile_data"];var _opj_set_info_handler=Module["_opj_set_info_handler"]=asm["_opj_set_info_handler"];var _opj_stream_set_user_data=Module["_opj_stream_set_user_data"]=asm["_opj_stream_set_user_data"];var _opj_set_MCT=Module["_opj_set_MCT"]=asm["_opj_set_MCT"];var _free=Module["_free"]=asm["_free"];var runPostSets=Module["runPostSets"]=asm["runPostSets"];var _opj_start_compress=Module["_opj_start_compress"]=asm["_opj_start_compress"];var _opj_write_tile=Module["_opj_write_tile"]=asm["_opj_write_tile"];var _opj_setup_decoder=Module["_opj_setup_decoder"]=asm["_opj_setup_decoder"];var _malloc=Module["_malloc"]=asm["_malloc"];var _opj_end_compress=Module["_opj_end_compress"]=asm["_opj_end_compress"];var _opj_destroy_codec=Module["_opj_destroy_codec"]=asm["_opj_destroy_codec"];var _emscripten_replace_memory=Module["_emscripten_replace_memory"]=asm["_emscripten_replace_memory"];var _jp2_decode=Module["_jp2_decode"]=asm["_jp2_decode"];var _opj_stream_create_buffer_stream=Module["_opj_stream_create_buffer_stream"]=asm["_opj_stream_create_buffer_stream"];var _opj_create_compress=Module["_opj_create_compress"]=asm["_opj_create_compress"];var dynCall_iiiiiiii=Module["dynCall_iiiiiiii"]=asm["dynCall_iiiiiiii"];var dynCall_iiii=Module["dynCall_iiii"]=asm["dynCall_iiii"];var dynCall_di=Module["dynCall_di"]=asm["dynCall_di"];var dynCall_vi=Module["dynCall_vi"]=asm["dynCall_vi"];var dynCall_vii=Module["dynCall_vii"]=asm["dynCall_vii"];var dynCall_iiiiiii=Module["dynCall_iiiiiii"]=asm["dynCall_iiiiiii"];var dynCall_ii=Module["dynCall_ii"]=asm["dynCall_ii"];var dynCall_viii=Module["dynCall_viii"]=asm["dynCall_viii"];var dynCall_iiiiiiiiiiii=Module["dynCall_iiiiiiiiiiii"]=asm["dynCall_iiiiiiiiiiii"];var dynCall_iiiii=Module["dynCall_iiiii"]=asm["dynCall_iiiii"];var dynCall_iii=Module["dynCall_iii"]=asm["dynCall_iii"];var dynCall_iiiiii=Module["dynCall_iiiiii"]=asm["dynCall_iiiiii"];var dynCall_viiii=Module["dynCall_viiii"]=asm["dynCall_viiii"];Runtime.stackAlloc=asm["stackAlloc"];Runtime.stackSave=asm["stackSave"];Runtime.stackRestore=asm["stackRestore"];Runtime.establishStackSpace=asm["establishStackSpace"];Runtime.setTempRet0=asm["setTempRet0"];Runtime.getTempRet0=asm["getTempRet0"];function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;var preloadStartTime=null;var calledMain=false;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"])run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};Module["callMain"]=Module.callMain=function callMain(args){assert(runDependencies==0,"cannot call main when async dependencies remain! (listen on __ATMAIN__)");assert(__ATPRERUN__.length==0,"cannot call main when preRun functions remain to be called");args=args||[];ensureInitRuntime();var argc=args.length+1;function pad(){for(var i=0;i<4-1;i++){argv.push(0)}}var argv=[allocate(intArrayFromString(Module["thisProgram"]),"i8",ALLOC_NORMAL)];pad();for(var i=0;i<argc-1;i=i+1){argv.push(allocate(intArrayFromString(args[i]),"i8",ALLOC_NORMAL));pad()}argv.push(0);argv=allocate(argv,"i32",ALLOC_NORMAL);try{var ret=Module["_main"](argc,argv,0);exit(ret,true)}catch(e){if(e instanceof ExitStatus){return}else if(e=="SimulateInfiniteLoop"){Module["noExitRuntime"]=true;return}else{if(e&&typeof e==="object"&&e.stack)Module.printErr("exception thrown: "+[e,e.stack]);throw e}}finally{calledMain=true}};function run(args){args=args||Module["arguments"];if(preloadStartTime===null)preloadStartTime=Date.now();if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();if(Module["_main"]&&shouldRunNow)Module["callMain"](args);postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout((function(){setTimeout((function(){Module["setStatus"]("")}),1);doRun()}),1)}else{doRun()}}Module["run"]=Module.run=run;function exit(status,implicit){if(implicit&&Module["noExitRuntime"]){return}if(Module["noExitRuntime"]){}else{ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(Module["onExit"])Module["onExit"](status)}if(ENVIRONMENT_IS_NODE){process["stdout"]["once"]("drain",(function(){process["exit"](status)}));console.log(" ");setTimeout((function(){process["exit"](status)}),500)}else if(ENVIRONMENT_IS_SHELL&&typeof quit==="function"){quit(status)}throw new ExitStatus(status)}Module["exit"]=Module.exit=exit;var abortDecorators=[];function abort(what){if(what!==undefined){Module.print(what);Module.printErr(what);what=JSON.stringify(what)}else{what=""}ABORT=true;EXITSTATUS=1;var extra="\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";var output="abort("+what+") at "+stackTrace()+extra;if(abortDecorators){abortDecorators.forEach((function(decorator){output=decorator(output,what)}))}throw output}Module["abort"]=Module.abort=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}var shouldRunNow=true;if(Module["noInitialRun"]){shouldRunNow=false}run()





  return Module;
};

}).call(this,require('_process'),"/lib")
},{"_process":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/watchify/node_modules/process/browser.js","fs":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/watchify/node_modules/browserify/lib/_empty.js","path":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/path-browserify/index.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/assert/assert.js":[function(require,module,exports){
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// when used in node, this will actually load the util module we depend on
// versus loading the builtin util module as happens otherwise
// this is a bug in node module loading as far as I am concerned
var util = require('util/');

var pSlice = Array.prototype.slice;
var hasOwn = Object.prototype.hasOwnProperty;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
  else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = stackStartFunction.name;
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && (isNaN(value) || !isFinite(value))) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b),
        key, i;
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

},{"util/":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/util/util.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/base64-js/lib/b64.js":[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS)
			return 62 // '+'
		if (code === SLASH)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/browser-resolve/empty.js":[function(require,module,exports){

},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/browserify-zlib/src/binding.js":[function(require,module,exports){
(function (process,Buffer){
var msg = require('pako/lib/zlib/messages');
var zstream = require('pako/lib/zlib/zstream');
var zlib_deflate = require('pako/lib/zlib/deflate.js');
var zlib_inflate = require('pako/lib/zlib/inflate.js');
var constants = require('pako/lib/zlib/constants');

for (var key in constants) {
  exports[key] = constants[key];
}

// zlib modes
exports.NONE = 0;
exports.DEFLATE = 1;
exports.INFLATE = 2;
exports.GZIP = 3;
exports.GUNZIP = 4;
exports.DEFLATERAW = 5;
exports.INFLATERAW = 6;
exports.UNZIP = 7;

/**
 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
 */
function Zlib(mode) {
  if (mode < exports.DEFLATE || mode > exports.UNZIP)
    throw new TypeError("Bad argument");
    
  this.mode = mode;
  this.init_done = false;
  this.write_in_progress = false;
  this.pending_close = false;
  this.windowBits = 0;
  this.level = 0;
  this.memLevel = 0;
  this.strategy = 0;
  this.dictionary = null;
}

Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
  this.windowBits = windowBits;
  this.level = level;
  this.memLevel = memLevel;
  this.strategy = strategy;
  // dictionary not supported.
  
  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP)
    this.windowBits += 16;
    
  if (this.mode === exports.UNZIP)
    this.windowBits += 32;
    
  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW)
    this.windowBits = -this.windowBits;
    
  this.strm = new zstream();
  
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      var status = zlib_deflate.deflateInit2(
        this.strm,
        this.level,
        exports.Z_DEFLATED,
        this.windowBits,
        this.memLevel,
        this.strategy
      );
      break;
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
    case exports.UNZIP:
      var status  = zlib_inflate.inflateInit2(
        this.strm,
        this.windowBits
      );
      break;
    default:
      throw new Error("Unknown mode " + this.mode);
  }
  
  if (status !== exports.Z_OK) {
    this._error(status);
    return;
  }
  
  this.write_in_progress = false;
  this.init_done = true;
};

Zlib.prototype.params = function() {
  throw new Error("deflateParams Not supported");
};

Zlib.prototype._writeCheck = function() {
  if (!this.init_done)
    throw new Error("write before init");
    
  if (this.mode === exports.NONE)
    throw new Error("already finalized");
    
  if (this.write_in_progress)
    throw new Error("write already in progress");
    
  if (this.pending_close)
    throw new Error("close is pending");
};

Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {    
  this._writeCheck();
  this.write_in_progress = true;
  
  var self = this;
  process.nextTick(function() {
    self.write_in_progress = false;
    var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
    self.callback(res[0], res[1]);
    
    if (self.pending_close)
      self.close();
  });
  
  return this;
};

// set method for Node buffers, used by pako
function bufferSet(data, offset) {
  for (var i = 0; i < data.length; i++) {
    this[offset + i] = data[i];
  }
}

Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
  this._writeCheck();
  return this._write(flush, input, in_off, in_len, out, out_off, out_len);
};

Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
  this.write_in_progress = true;
  
  if (flush !== exports.Z_NO_FLUSH &&
      flush !== exports.Z_PARTIAL_FLUSH &&
      flush !== exports.Z_SYNC_FLUSH &&
      flush !== exports.Z_FULL_FLUSH &&
      flush !== exports.Z_FINISH &&
      flush !== exports.Z_BLOCK) {
    throw new Error("Invalid flush value");
  }
  
  if (input == null) {
    input = new Buffer(0);
    in_len = 0;
    in_off = 0;
  }
  
  if (out._set)
    out.set = out._set;
  else
    out.set = bufferSet;
  
  var strm = this.strm;
  strm.avail_in = in_len;
  strm.input = input;
  strm.next_in = in_off;
  strm.avail_out = out_len;
  strm.output = out;
  strm.next_out = out_off;
  
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      var status = zlib_deflate.deflate(strm, flush);
      break;
    case exports.UNZIP:
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
      var status = zlib_inflate.inflate(strm, flush);
      break;
    default:
      throw new Error("Unknown mode " + this.mode);
  }
  
  if (status !== exports.Z_STREAM_END && status !== exports.Z_OK) {
    this._error(status);
  }
  
  this.write_in_progress = false;
  return [strm.avail_in, strm.avail_out];
};

Zlib.prototype.close = function() {
  if (this.write_in_progress) {
    this.pending_close = true;
    return;
  }
  
  this.pending_close = false;
  
  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
    zlib_deflate.deflateEnd(this.strm);
  } else {
    zlib_inflate.inflateEnd(this.strm);
  }
  
  this.mode = exports.NONE;
};

Zlib.prototype.reset = function() {
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
      var status = zlib_deflate.deflateReset(this.strm);
      break;
    case exports.INFLATE:
    case exports.INFLATERAW:
      var status = zlib_inflate.inflateReset(this.strm);
      break;
  }
  
  if (status !== exports.Z_OK) {
    this._error(status);
  }
};

Zlib.prototype._error = function(status) {
  this.onerror(msg[status] + ': ' + this.strm.msg, status);
  
  this.write_in_progress = false;
  if (this.pending_close)
    this.close();
};

exports.Zlib = Zlib;

}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/watchify/node_modules/process/browser.js","buffer":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/buffer/index.js","pako/lib/zlib/constants":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/constants.js","pako/lib/zlib/deflate.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/deflate.js","pako/lib/zlib/inflate.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/inflate.js","pako/lib/zlib/messages":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/messages.js","pako/lib/zlib/zstream":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/zstream.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/browserify-zlib/src/index.js":[function(require,module,exports){
(function (process,Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Transform = require('_stream_transform');

var binding = require('./binding');
var util = require('util');
var assert = require('assert').ok;

// zlib doesn't provide these, so kludge them in following the same
// const naming scheme zlib uses.
binding.Z_MIN_WINDOWBITS = 8;
binding.Z_MAX_WINDOWBITS = 15;
binding.Z_DEFAULT_WINDOWBITS = 15;

// fewer than 64 bytes per chunk is stupid.
// technically it could work with as few as 8, but even 64 bytes
// is absurdly low.  Usually a MB or more is best.
binding.Z_MIN_CHUNK = 64;
binding.Z_MAX_CHUNK = Infinity;
binding.Z_DEFAULT_CHUNK = (16 * 1024);

binding.Z_MIN_MEMLEVEL = 1;
binding.Z_MAX_MEMLEVEL = 9;
binding.Z_DEFAULT_MEMLEVEL = 8;

binding.Z_MIN_LEVEL = -1;
binding.Z_MAX_LEVEL = 9;
binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

// expose all the zlib constants
Object.keys(binding).forEach(function(k) {
  if (k.match(/^Z/)) exports[k] = binding[k];
});

// translation table for return codes.
exports.codes = {
  Z_OK: binding.Z_OK,
  Z_STREAM_END: binding.Z_STREAM_END,
  Z_NEED_DICT: binding.Z_NEED_DICT,
  Z_ERRNO: binding.Z_ERRNO,
  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
  Z_DATA_ERROR: binding.Z_DATA_ERROR,
  Z_MEM_ERROR: binding.Z_MEM_ERROR,
  Z_BUF_ERROR: binding.Z_BUF_ERROR,
  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
};

Object.keys(exports.codes).forEach(function(k) {
  exports.codes[exports.codes[k]] = k;
});

exports.Deflate = Deflate;
exports.Inflate = Inflate;
exports.Gzip = Gzip;
exports.Gunzip = Gunzip;
exports.DeflateRaw = DeflateRaw;
exports.InflateRaw = InflateRaw;
exports.Unzip = Unzip;

exports.createDeflate = function(o) {
  return new Deflate(o);
};

exports.createInflate = function(o) {
  return new Inflate(o);
};

exports.createDeflateRaw = function(o) {
  return new DeflateRaw(o);
};

exports.createInflateRaw = function(o) {
  return new InflateRaw(o);
};

exports.createGzip = function(o) {
  return new Gzip(o);
};

exports.createGunzip = function(o) {
  return new Gunzip(o);
};

exports.createUnzip = function(o) {
  return new Unzip(o);
};


// Convenience methods.
// compress/decompress a string or buffer in one step.
exports.deflate = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Deflate(opts), buffer, callback);
};

exports.deflateSync = function(buffer, opts) {
  return zlibBufferSync(new Deflate(opts), buffer);
};

exports.gzip = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gzip(opts), buffer, callback);
};

exports.gzipSync = function(buffer, opts) {
  return zlibBufferSync(new Gzip(opts), buffer);
};

exports.deflateRaw = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
};

exports.deflateRawSync = function(buffer, opts) {
  return zlibBufferSync(new DeflateRaw(opts), buffer);
};

exports.unzip = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Unzip(opts), buffer, callback);
};

exports.unzipSync = function(buffer, opts) {
  return zlibBufferSync(new Unzip(opts), buffer);
};

exports.inflate = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Inflate(opts), buffer, callback);
};

exports.inflateSync = function(buffer, opts) {
  return zlibBufferSync(new Inflate(opts), buffer);
};

exports.gunzip = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gunzip(opts), buffer, callback);
};

exports.gunzipSync = function(buffer, opts) {
  return zlibBufferSync(new Gunzip(opts), buffer);
};

exports.inflateRaw = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new InflateRaw(opts), buffer, callback);
};

exports.inflateRawSync = function(buffer, opts) {
  return zlibBufferSync(new InflateRaw(opts), buffer);
};

function zlibBuffer(engine, buffer, callback) {
  var buffers = [];
  var nread = 0;

  engine.on('error', onError);
  engine.on('end', onEnd);

  engine.end(buffer);
  flow();

  function flow() {
    var chunk;
    while (null !== (chunk = engine.read())) {
      buffers.push(chunk);
      nread += chunk.length;
    }
    engine.once('readable', flow);
  }

  function onError(err) {
    engine.removeListener('end', onEnd);
    engine.removeListener('readable', flow);
    callback(err);
  }

  function onEnd() {
    var buf = Buffer.concat(buffers, nread);
    buffers = [];
    callback(null, buf);
    engine.close();
  }
}

function zlibBufferSync(engine, buffer) {
  if (typeof buffer === 'string')
    buffer = new Buffer(buffer);
  if (!Buffer.isBuffer(buffer))
    throw new TypeError('Not a string or buffer');

  var flushFlag = binding.Z_FINISH;

  return engine._processChunk(buffer, flushFlag);
}

// generic zlib
// minimal 2-byte header
function Deflate(opts) {
  if (!(this instanceof Deflate)) return new Deflate(opts);
  Zlib.call(this, opts, binding.DEFLATE);
}

function Inflate(opts) {
  if (!(this instanceof Inflate)) return new Inflate(opts);
  Zlib.call(this, opts, binding.INFLATE);
}



// gzip - bigger header, same deflate compression
function Gzip(opts) {
  if (!(this instanceof Gzip)) return new Gzip(opts);
  Zlib.call(this, opts, binding.GZIP);
}

function Gunzip(opts) {
  if (!(this instanceof Gunzip)) return new Gunzip(opts);
  Zlib.call(this, opts, binding.GUNZIP);
}



// raw - no header
function DeflateRaw(opts) {
  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
  Zlib.call(this, opts, binding.DEFLATERAW);
}

function InflateRaw(opts) {
  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
  Zlib.call(this, opts, binding.INFLATERAW);
}


// auto-detect header.
function Unzip(opts) {
  if (!(this instanceof Unzip)) return new Unzip(opts);
  Zlib.call(this, opts, binding.UNZIP);
}


// the Zlib class they all inherit from
// This thing manages the queue of requests, and returns
// true or false if there is anything in the queue when
// you call the .write() method.

function Zlib(opts, mode) {
  this._opts = opts = opts || {};
  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

  Transform.call(this, opts);

  if (opts.flush) {
    if (opts.flush !== binding.Z_NO_FLUSH &&
        opts.flush !== binding.Z_PARTIAL_FLUSH &&
        opts.flush !== binding.Z_SYNC_FLUSH &&
        opts.flush !== binding.Z_FULL_FLUSH &&
        opts.flush !== binding.Z_FINISH &&
        opts.flush !== binding.Z_BLOCK) {
      throw new Error('Invalid flush flag: ' + opts.flush);
    }
  }
  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;

  if (opts.chunkSize) {
    if (opts.chunkSize < exports.Z_MIN_CHUNK ||
        opts.chunkSize > exports.Z_MAX_CHUNK) {
      throw new Error('Invalid chunk size: ' + opts.chunkSize);
    }
  }

  if (opts.windowBits) {
    if (opts.windowBits < exports.Z_MIN_WINDOWBITS ||
        opts.windowBits > exports.Z_MAX_WINDOWBITS) {
      throw new Error('Invalid windowBits: ' + opts.windowBits);
    }
  }

  if (opts.level) {
    if (opts.level < exports.Z_MIN_LEVEL ||
        opts.level > exports.Z_MAX_LEVEL) {
      throw new Error('Invalid compression level: ' + opts.level);
    }
  }

  if (opts.memLevel) {
    if (opts.memLevel < exports.Z_MIN_MEMLEVEL ||
        opts.memLevel > exports.Z_MAX_MEMLEVEL) {
      throw new Error('Invalid memLevel: ' + opts.memLevel);
    }
  }

  if (opts.strategy) {
    if (opts.strategy != exports.Z_FILTERED &&
        opts.strategy != exports.Z_HUFFMAN_ONLY &&
        opts.strategy != exports.Z_RLE &&
        opts.strategy != exports.Z_FIXED &&
        opts.strategy != exports.Z_DEFAULT_STRATEGY) {
      throw new Error('Invalid strategy: ' + opts.strategy);
    }
  }

  if (opts.dictionary) {
    if (!Buffer.isBuffer(opts.dictionary)) {
      throw new Error('Invalid dictionary: it should be a Buffer instance');
    }
  }

  this._binding = new binding.Zlib(mode);

  var self = this;
  this._hadError = false;
  this._binding.onerror = function(message, errno) {
    // there is no way to cleanly recover.
    // continuing only obscures problems.
    self._binding = null;
    self._hadError = true;

    var error = new Error(message);
    error.errno = errno;
    error.code = exports.codes[errno];
    self.emit('error', error);
  };

  var level = exports.Z_DEFAULT_COMPRESSION;
  if (typeof opts.level === 'number') level = opts.level;

  var strategy = exports.Z_DEFAULT_STRATEGY;
  if (typeof opts.strategy === 'number') strategy = opts.strategy;

  this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,
                     level,
                     opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,
                     strategy,
                     opts.dictionary);

  this._buffer = new Buffer(this._chunkSize);
  this._offset = 0;
  this._closed = false;
  this._level = level;
  this._strategy = strategy;

  this.once('end', this.close);
}

util.inherits(Zlib, Transform);

Zlib.prototype.params = function(level, strategy, callback) {
  if (level < exports.Z_MIN_LEVEL ||
      level > exports.Z_MAX_LEVEL) {
    throw new RangeError('Invalid compression level: ' + level);
  }
  if (strategy != exports.Z_FILTERED &&
      strategy != exports.Z_HUFFMAN_ONLY &&
      strategy != exports.Z_RLE &&
      strategy != exports.Z_FIXED &&
      strategy != exports.Z_DEFAULT_STRATEGY) {
    throw new TypeError('Invalid strategy: ' + strategy);
  }

  if (this._level !== level || this._strategy !== strategy) {
    var self = this;
    this.flush(binding.Z_SYNC_FLUSH, function() {
      self._binding.params(level, strategy);
      if (!self._hadError) {
        self._level = level;
        self._strategy = strategy;
        if (callback) callback();
      }
    });
  } else {
    process.nextTick(callback);
  }
};

Zlib.prototype.reset = function() {
  return this._binding.reset();
};

// This is the _flush function called by the transform class,
// internally, when the last chunk has been written.
Zlib.prototype._flush = function(callback) {
  this._transform(new Buffer(0), '', callback);
};

Zlib.prototype.flush = function(kind, callback) {
  var ws = this._writableState;

  if (typeof kind === 'function' || (kind === void 0 && !callback)) {
    callback = kind;
    kind = binding.Z_FULL_FLUSH;
  }

  if (ws.ended) {
    if (callback)
      process.nextTick(callback);
  } else if (ws.ending) {
    if (callback)
      this.once('end', callback);
  } else if (ws.needDrain) {
    var self = this;
    this.once('drain', function() {
      self.flush(callback);
    });
  } else {
    this._flushFlag = kind;
    this.write(new Buffer(0), '', callback);
  }
};

Zlib.prototype.close = function(callback) {
  if (callback)
    process.nextTick(callback);

  if (this._closed)
    return;

  this._closed = true;

  this._binding.close();

  var self = this;
  process.nextTick(function() {
    self.emit('close');
  });
};

Zlib.prototype._transform = function(chunk, encoding, cb) {
  var flushFlag;
  var ws = this._writableState;
  var ending = ws.ending || ws.ended;
  var last = ending && (!chunk || ws.length === chunk.length);

  if (!chunk === null && !Buffer.isBuffer(chunk))
    return cb(new Error('invalid input'));

  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
  // If it's explicitly flushing at some other time, then we use
  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
  // goodness.
  if (last)
    flushFlag = binding.Z_FINISH;
  else {
    flushFlag = this._flushFlag;
    // once we've flushed the last of the queue, stop flushing and
    // go back to the normal behavior.
    if (chunk.length >= ws.length) {
      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
    }
  }

  var self = this;
  this._processChunk(chunk, flushFlag, cb);
};

Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
  var availInBefore = chunk && chunk.length;
  var availOutBefore = this._chunkSize - this._offset;
  var inOff = 0;

  var self = this;

  var async = typeof cb === 'function';

  if (!async) {
    var buffers = [];
    var nread = 0;

    var error;
    this.on('error', function(er) {
      error = er;
    });

    do {
      var res = this._binding.writeSync(flushFlag,
                                        chunk, // in
                                        inOff, // in_off
                                        availInBefore, // in_len
                                        this._buffer, // out
                                        this._offset, //out_off
                                        availOutBefore); // out_len
    } while (!this._hadError && callback(res[0], res[1]));

    if (this._hadError) {
      throw error;
    }

    var buf = Buffer.concat(buffers, nread);
    this.close();

    return buf;
  }

  var req = this._binding.write(flushFlag,
                                chunk, // in
                                inOff, // in_off
                                availInBefore, // in_len
                                this._buffer, // out
                                this._offset, //out_off
                                availOutBefore); // out_len

  req.buffer = chunk;
  req.callback = callback;

  function callback(availInAfter, availOutAfter) {
    if (self._hadError)
      return;

    var have = availOutBefore - availOutAfter;
    assert(have >= 0, 'have should not go down');

    if (have > 0) {
      var out = self._buffer.slice(self._offset, self._offset + have);
      self._offset += have;
      // serve some output to the consumer.
      if (async) {
        self.push(out);
      } else {
        buffers.push(out);
        nread += out.length;
      }
    }

    // exhausted the output buffer, or used all the input create a new one.
    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
      availOutBefore = self._chunkSize;
      self._offset = 0;
      self._buffer = new Buffer(self._chunkSize);
    }

    if (availOutAfter === 0) {
      // Not actually done.  Need to reprocess.
      // Also, update the availInBefore to the availInAfter value,
      // so that if we have to hit it a third (fourth, etc.) time,
      // it'll have the correct byte counts.
      inOff += (availInBefore - availInAfter);
      availInBefore = availInAfter;

      if (!async)
        return true;

      var newReq = self._binding.write(flushFlag,
                                       chunk,
                                       inOff,
                                       availInBefore,
                                       self._buffer,
                                       self._offset,
                                       self._chunkSize);
      newReq.callback = callback; // this same function
      newReq.buffer = chunk;
      return;
    }

    if (!async)
      return false;

    // finished with the chunk.
    cb();
  }
};

util.inherits(Deflate, Zlib);
util.inherits(Inflate, Zlib);
util.inherits(Gzip, Zlib);
util.inherits(Gunzip, Zlib);
util.inherits(DeflateRaw, Zlib);
util.inherits(InflateRaw, Zlib);
util.inherits(Unzip, Zlib);

}).call(this,require('_process'),require("buffer").Buffer)
},{"./binding":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/browserify-zlib/src/binding.js","_process":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/watchify/node_modules/process/browser.js","_stream_transform":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/transform.js","assert":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/assert/assert.js","buffer":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/buffer/index.js","util":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/util/util.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/buffer/index.js":[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var kMaxLength = 0x3fffffff

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Find the length
  var length
  if (type === 'number')
    length = subject > 0 ? subject >>> 0 : 0
  else if (type === 'string') {
    if (encoding === 'base64')
      subject = base64clean(subject)
    length = Buffer.byteLength(subject, encoding)
  } else if (type === 'object' && subject !== null) { // assume object is array-like
    if (subject.type === 'Buffer' && isArray(subject.data))
      subject = subject.data
    length = +subject.length > 0 ? Math.floor(+subject.length) : 0
  } else
    throw new TypeError('must start with number, buffer, array or string')

  if (this.length > kMaxLength)
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
      'size: 0x' + kMaxLength.toString(16) + ' bytes')

  var buf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    if (Buffer.isBuffer(subject)) {
      for (i = 0; i < length; i++)
        buf[i] = subject.readUInt8(i)
    } else {
      for (i = 0; i < length; i++)
        buf[i] = ((subject[i] % 256) + 256) % 256
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

Buffer.isBuffer = function (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b))
    throw new TypeError('Arguments must be Buffers')

  var x = a.length
  var y = b.length
  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
  if (i !== len) {
    x = a[i]
    y = b[i]
  }
  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function (list, totalLength) {
  if (!isArray(list)) throw new TypeError('Usage: Buffer.concat(list[, length])')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (totalLength === undefined) {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    case 'hex':
      ret = str.length >>> 1
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    default:
      ret = str.length
  }
  return ret
}

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function (encoding, start, end) {
  var loweredCase = false

  start = start >>> 0
  end = end === undefined || end === Infinity ? this.length : end >>> 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase)
          throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.equals = function (b) {
  if(!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max)
      str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b)
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(byte)) throw new Error('Invalid hex string')
    buf[offset + i] = byte
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function asciiWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function utf16leWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length, 2)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leWrite(this, string, offset, length)
      break
    default:
      throw new TypeError('Unknown encoding: ' + encoding)
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function binarySlice (buf, start, end) {
  return asciiSlice(buf, start, end)
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len;
    if (start < 0)
      start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0)
      end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start)
    end = start

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0)
    throw new RangeError('offset is not uint')
  if (offset + ext > length)
    throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80))
    return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new TypeError('value is out of bounds')
  if (offset + ext > buf.length) throw new TypeError('index out of range')
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new TypeError('value is out of bounds')
  if (offset + ext > buf.length) throw new TypeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  if (end < start) throw new TypeError('sourceEnd < sourceStart')
  if (target_start < 0 || target_start >= target.length)
    throw new TypeError('targetStart out of bounds')
  if (start < 0 || start >= source.length) throw new TypeError('sourceStart out of bounds')
  if (end < 0 || end > source.length) throw new TypeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + target_start] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new TypeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new TypeError('start out of bounds')
  if (end < 0 || end > this.length) throw new TypeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F) {
      byteArray.push(b)
    } else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++) {
        byteArray.push(parseInt(h[j], 16))
      }
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length, unitSize) {
  if (unitSize) length -= length % unitSize;
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

},{"base64-js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/base64-js/lib/b64.js","ieee754":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/ieee754/index.js","is-array":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/is-array/index.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/core-util-is/lib/util.js":[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/is-buffer/index.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/events/events.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/ieee754/index.js":[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/inherits/inherits_browser.js":[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/is-array/index.js":[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/is-buffer/index.js":[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/isarray/index.js":[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/utils/common.js":[function(require,module,exports){
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');


exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);

},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/adler32.js":[function(require,module,exports){
'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;

},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/constants.js":[function(require,module,exports){
'use strict';


module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/crc32.js":[function(require,module,exports){
'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.


// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;

},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/deflate.js":[function(require,module,exports){
'use strict';

var utils   = require('../utils/common');
var trees   = require('./trees');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var msg     = require('./messages');

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
                );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

},{"../utils/common":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/utils/common.js","./adler32":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/adler32.js","./crc32":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/crc32.js","./messages":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/messages.js","./trees":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/trees.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/inffast.js":[function(require,module,exports){
'use strict';

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/inflate.js":[function(require,module,exports){
'use strict';


var utils         = require('../utils/common');
var adler32       = require('./adler32');
var crc32         = require('./crc32');
var inflate_fast  = require('./inffast');
var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
    case HEAD:
      if (state.wrap === 0) {
        state.mode = TYPEDO;
        break;
      }
      //=== NEEDBITS(16);
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//

        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = FLAGS;
        break;
      }
      state.flags = 0;           /* expect zlib header */
      if (state.head) {
        state.head.done = false;
      }
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
        strm.msg = 'incorrect header check';
        state.mode = BAD;
        break;
      }
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
      len = (hold & 0x0f)/*BITS(4)*/ + 8;
      if (state.wbits === 0) {
        state.wbits = len;
      }
      else if (len > state.wbits) {
        strm.msg = 'invalid window size';
        state.mode = BAD;
        break;
      }
      state.dmax = 1 << len;
      //Tracev((stderr, "inflate:   zlib header ok\n"));
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = hold & 0x200 ? DICTID : TYPE;
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      break;
    case FLAGS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.flags = hold;
      if ((state.flags & 0xff) !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      if (state.flags & 0xe000) {
        strm.msg = 'unknown header flags set';
        state.mode = BAD;
        break;
      }
      if (state.head) {
        state.head.text = ((hold >> 8) & 1);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = TIME;
      /* falls through */
    case TIME:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.time = hold;
      }
      if (state.flags & 0x0200) {
        //=== CRC4(state.check, hold)
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        hbuf[2] = (hold >>> 16) & 0xff;
        hbuf[3] = (hold >>> 24) & 0xff;
        state.check = crc32(state.check, hbuf, 4, 0);
        //===
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = OS;
      /* falls through */
    case OS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.xflags = (hold & 0xff);
        state.head.os = (hold >> 8);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = EXLEN;
      /* falls through */
    case EXLEN:
      if (state.flags & 0x0400) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length = hold;
        if (state.head) {
          state.head.extra_len = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      else if (state.head) {
        state.head.extra = null/*Z_NULL*/;
      }
      state.mode = EXTRA;
      /* falls through */
    case EXTRA:
      if (state.flags & 0x0400) {
        copy = state.length;
        if (copy > have) { copy = have; }
        if (copy) {
          if (state.head) {
            len = state.head.extra_len - state.length;
            if (!state.head.extra) {
              // Use untyped array for more conveniend processing later
              state.head.extra = new Array(state.head.extra_len);
            }
            utils.arraySet(
              state.head.extra,
              input,
              next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len
            );
            //zmemcpy(state.head.extra + len, next,
            //        len + copy > state.head.extra_max ?
            //        state.head.extra_max - len : copy);
          }
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          state.length -= copy;
        }
        if (state.length) { break inf_leave; }
      }
      state.length = 0;
      state.mode = NAME;
      /* falls through */
    case NAME:
      if (state.flags & 0x0800) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          // TODO: 2 or 1 bytes?
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.name_max*/)) {
            state.head.name += String.fromCharCode(len);
          }
        } while (len && copy < have);

        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.name = null;
      }
      state.length = 0;
      state.mode = COMMENT;
      /* falls through */
    case COMMENT:
      if (state.flags & 0x1000) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.comm_max*/)) {
            state.head.comment += String.fromCharCode(len);
          }
        } while (len && copy < have);
        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.comment = null;
      }
      state.mode = HCRC;
      /* falls through */
    case HCRC:
      if (state.flags & 0x0200) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.check & 0xffff)) {
          strm.msg = 'header crc mismatch';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      if (state.head) {
        state.head.hcrc = ((state.flags >> 9) & 1);
        state.head.done = true;
      }
      strm.adler = state.check = 0;
      state.mode = TYPE;
      break;
    case DICTID:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      strm.adler = state.check = zswap32(hold);
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = DICT;
      /* falls through */
    case DICT:
      if (state.havedict === 0) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        return Z_NEED_DICT;
      }
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      /* falls through */
    case TYPE:
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case TYPEDO:
      if (state.last) {
        //--- BYTEBITS() ---//
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        state.mode = CHECK;
        break;
      }
      //=== NEEDBITS(3); */
      while (bits < 3) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.last = (hold & 0x01)/*BITS(1)*/;
      //--- DROPBITS(1) ---//
      hold >>>= 1;
      bits -= 1;
      //---//

      switch ((hold & 0x03)/*BITS(2)*/) {
      case 0:                             /* stored block */
        //Tracev((stderr, "inflate:     stored block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = STORED;
        break;
      case 1:                             /* fixed block */
        fixedtables(state);
        //Tracev((stderr, "inflate:     fixed codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = LEN_;             /* decode codes */
        if (flush === Z_TREES) {
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break inf_leave;
        }
        break;
      case 2:                             /* dynamic block */
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = TABLE;
        break;
      case 3:
        strm.msg = 'invalid block type';
        state.mode = BAD;
      }
      //--- DROPBITS(2) ---//
      hold >>>= 2;
      bits -= 2;
      //---//
      break;
    case STORED:
      //--- BYTEBITS() ---// /* go to byte boundary */
      hold >>>= bits & 7;
      bits -= bits & 7;
      //---//
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
        strm.msg = 'invalid stored block lengths';
        state.mode = BAD;
        break;
      }
      state.length = hold & 0xffff;
      //Tracev((stderr, "inflate:       stored length %u\n",
      //        state.length));
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = COPY_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case COPY_:
      state.mode = COPY;
      /* falls through */
    case COPY:
      copy = state.length;
      if (copy) {
        if (copy > have) { copy = have; }
        if (copy > left) { copy = left; }
        if (copy === 0) { break inf_leave; }
        //--- zmemcpy(put, next, copy); ---
        utils.arraySet(output, input, next, copy, put);
        //---//
        have -= copy;
        next += copy;
        left -= copy;
        put += copy;
        state.length -= copy;
        break;
      }
      //Tracev((stderr, "inflate:       stored end\n"));
      state.mode = TYPE;
      break;
    case TABLE:
      //=== NEEDBITS(14); */
      while (bits < 14) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
//#ifndef PKZIP_BUG_WORKAROUND
      if (state.nlen > 286 || state.ndist > 30) {
        strm.msg = 'too many length or distance symbols';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracev((stderr, "inflate:       table sizes ok\n"));
      state.have = 0;
      state.mode = LENLENS;
      /* falls through */
    case LENLENS:
      while (state.have < state.ncode) {
        //=== NEEDBITS(3);
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
        //--- DROPBITS(3) ---//
        hold >>>= 3;
        bits -= 3;
        //---//
      }
      while (state.have < 19) {
        state.lens[order[state.have++]] = 0;
      }
      // We have separate tables & no pointers. 2 commented lines below not needed.
      //state.next = state.codes;
      //state.lencode = state.next;
      // Switch to use dynamic table
      state.lencode = state.lendyn;
      state.lenbits = 7;

      opts = { bits: state.lenbits };
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
      state.lenbits = opts.bits;

      if (ret) {
        strm.msg = 'invalid code lengths set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, "inflate:       code lengths ok\n"));
      state.have = 0;
      state.mode = CODELENS;
      /* falls through */
    case CODELENS:
      while (state.have < state.nlen + state.ndist) {
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_val < 16) {
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.lens[state.have++] = here_val;
        }
        else {
          if (here_val === 16) {
            //=== NEEDBITS(here.bits + 2);
            n = here_bits + 2;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            if (state.have === 0) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            len = state.lens[state.have - 1];
            copy = 3 + (hold & 0x03);//BITS(2);
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
          }
          else if (here_val === 17) {
            //=== NEEDBITS(here.bits + 3);
            n = here_bits + 3;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 3 + (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          else {
            //=== NEEDBITS(here.bits + 7);
            n = here_bits + 7;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 11 + (hold & 0x7f);//BITS(7);
            //--- DROPBITS(7) ---//
            hold >>>= 7;
            bits -= 7;
            //---//
          }
          if (state.have + copy > state.nlen + state.ndist) {
            strm.msg = 'invalid bit length repeat';
            state.mode = BAD;
            break;
          }
          while (copy--) {
            state.lens[state.have++] = len;
          }
        }
      }

      /* handle error breaks in while */
      if (state.mode === BAD) { break; }

      /* check for end-of-block code (better have one) */
      if (state.lens[256] === 0) {
        strm.msg = 'invalid code -- missing end-of-block';
        state.mode = BAD;
        break;
      }

      /* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
      state.lenbits = 9;

      opts = { bits: state.lenbits };
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.lenbits = opts.bits;
      // state.lencode = state.next;

      if (ret) {
        strm.msg = 'invalid literal/lengths set';
        state.mode = BAD;
        break;
      }

      state.distbits = 6;
      //state.distcode.copy(state.codes);
      // Switch to use dynamic table
      state.distcode = state.distdyn;
      opts = { bits: state.distbits };
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.distbits = opts.bits;
      // state.distcode = state.next;

      if (ret) {
        strm.msg = 'invalid distances set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, 'inflate:       codes ok\n'));
      state.mode = LEN_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case LEN_:
      state.mode = LEN;
      /* falls through */
    case LEN:
      if (have >= 6 && left >= 258) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        inflate_fast(strm, _out);
        //--- LOAD() ---
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        //---

        if (state.mode === TYPE) {
          state.back = -1;
        }
        break;
      }
      state.back = 0;
      for (;;) {
        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if (here_bits <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if (here_op && (here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      state.length = here_val;
      if (here_op === 0) {
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        state.mode = LIT;
        break;
      }
      if (here_op & 32) {
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.back = -1;
        state.mode = TYPE;
        break;
      }
      if (here_op & 64) {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break;
      }
      state.extra = here_op & 15;
      state.mode = LENEXT;
      /* falls through */
    case LENEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
      //Tracevv((stderr, "inflate:         length %u\n", state.length));
      state.was = state.length;
      state.mode = DIST;
      /* falls through */
    case DIST:
      for (;;) {
        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if ((here_bits) <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if ((here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      if (here_op & 64) {
        strm.msg = 'invalid distance code';
        state.mode = BAD;
        break;
      }
      state.offset = here_val;
      state.extra = (here_op) & 15;
      state.mode = DISTEXT;
      /* falls through */
    case DISTEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
//#ifdef INFLATE_STRICT
      if (state.offset > state.dmax) {
        strm.msg = 'invalid distance too far back';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
      state.mode = MATCH;
      /* falls through */
    case MATCH:
      if (left === 0) { break inf_leave; }
      copy = _out - left;
      if (state.offset > copy) {         /* copy from window */
        copy = state.offset - copy;
        if (copy > state.whave) {
          if (state.sane) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
        }
        if (copy > state.wnext) {
          copy -= state.wnext;
          from = state.wsize - copy;
        }
        else {
          from = state.wnext - copy;
        }
        if (copy > state.length) { copy = state.length; }
        from_source = state.window;
      }
      else {                              /* copy from output */
        from_source = output;
        from = put - state.offset;
        copy = state.length;
      }
      if (copy > left) { copy = left; }
      left -= copy;
      state.length -= copy;
      do {
        output[put++] = from_source[from++];
      } while (--copy);
      if (state.length === 0) { state.mode = LEN; }
      break;
    case LIT:
      if (left === 0) { break inf_leave; }
      output[put++] = state.length;
      left--;
      state.mode = LEN;
      break;
    case CHECK:
      if (state.wrap) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          // Use '|' insdead of '+' to make sure that result is signed
          hold |= input[next++] << bits;
          bits += 8;
        }
        //===//
        _out -= left;
        strm.total_out += _out;
        state.total += _out;
        if (_out) {
          strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

        }
        _out = left;
        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
          strm.msg = 'incorrect data check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   check matches trailer\n"));
      }
      state.mode = LENGTH;
      /* falls through */
    case LENGTH:
      if (state.wrap && state.flags) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.total & 0xffffffff)) {
          strm.msg = 'incorrect length check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   length matches trailer\n"));
      }
      state.mode = DONE;
      /* falls through */
    case DONE:
      ret = Z_STREAM_END;
      break inf_leave;
    case BAD:
      ret = Z_DATA_ERROR;
      break inf_leave;
    case MEM:
      return Z_MEM_ERROR;
    case SYNC:
      /* falls through */
    default:
      return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

},{"../utils/common":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/utils/common.js","./adler32":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/adler32.js","./crc32":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/crc32.js","./inffast":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/inffast.js","./inftrees":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/inftrees.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/inftrees.js":[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  var i = 0;
  /* process all codes and make table entries */
  for (;;) {
    i++;
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

},{"../utils/common":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/utils/common.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/messages.js":[function(require,module,exports){
'use strict';

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/trees.js":[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;

},{"../utils/common":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/utils/common.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/pako/lib/zlib/zstream.js":[function(require,module,exports){
'use strict';


function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;

},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/path-browserify/index.js":[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/watchify/node_modules/process/browser.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/duplex.js":[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_duplex.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_duplex.js":[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

module.exports = Duplex;

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

forEach(objectKeys(Writable.prototype), function(method) {
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
});

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(this.end.bind(this));
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

}).call(this,require('_process'))
},{"./_stream_readable":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_readable.js","./_stream_writable":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_writable.js","_process":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/watchify/node_modules/process/browser.js","core-util-is":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/core-util-is/lib/util.js","inherits":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/inherits/inherits_browser.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_passthrough.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_transform.js","core-util-is":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/core-util-is/lib/util.js","inherits":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/inherits/inherits_browser.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_readable.js":[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = require('stream');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var StringDecoder;


/*<replacement>*/
var debug = require('util');
if (debug && debug.debuglog) {
  debug = debug.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/


util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  var Duplex = require('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (util.isString(chunk) && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (util.isNullOrUndefined(chunk)) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (isNaN(n) || util.isNull(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (!util.isNumber(n) || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (util.isNull(ret)) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (!util.isNull(ret))
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      process.nextTick(function() {
        emitReadable_(stream);
      });
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    process.nextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      debug('false write response, pause',
            src._readableState.awaitDrain);
      src._readableState.awaitDrain++;
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        var self = this;
        process.nextTick(function() {
          debug('readable nexttick read 0');
          self.read(0);
        });
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    if (!state.reading) {
      debug('resume read 0');
      this.read(0);
    }
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(function() {
      resume_(stream, state);
    });
  }
}

function resume_(stream, state) {
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);
    if (!chunk || !state.objectMode && !chunk.length)
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"./_stream_duplex":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_duplex.js","_process":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/watchify/node_modules/process/browser.js","buffer":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/buffer/index.js","core-util-is":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/core-util-is/lib/util.js","events":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/events/events.js","inherits":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/inherits/inherits_browser.js","isarray":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/isarray/index.js","stream":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/stream-browserify/index.js","string_decoder/":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/string_decoder/index.js","util":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/browser-resolve/empty.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_transform.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (!util.isNullOrUndefined(data))
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('prefinish', function() {
    if (util.isFunction(this._flush))
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_duplex.js","core-util-is":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/core-util-is/lib/util.js","inherits":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/inherits/inherits_browser.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_writable.js":[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Stream = require('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (util.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (!util.isFunction(cb))
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.buffer.length)
      clearBuffer(this, state);
  }
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      util.isString(chunk)) {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (util.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, false, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    process.nextTick(function() {
      state.pendingcb--;
      cb(er);
    });
  else {
    state.pendingcb--;
    cb(er);
  }

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.buffer.length) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  if (stream._writev && state.buffer.length > 1) {
    // Fast case, write everything using _writev()
    var cbs = [];
    for (var c = 0; c < state.buffer.length; c++)
      cbs.push(state.buffer[c].callback);

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
    state.buffer = [];
  } else {
    // Slow case, write chunks one-by-one
    for (var c = 0; c < state.buffer.length; c++) {
      var entry = state.buffer[c];
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);

      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        c++;
        break;
      }
    }

    if (c < state.buffer.length)
      state.buffer = state.buffer.slice(c);
    else
      state.buffer.length = 0;
  }

  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));

};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (util.isFunction(chunk)) {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (!util.isNullOrUndefined(chunk))
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else
      prefinish(stream, state);
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      process.nextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require('_process'))
},{"./_stream_duplex":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_duplex.js","_process":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/watchify/node_modules/process/browser.js","buffer":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/buffer/index.js","core-util-is":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/core-util-is/lib/util.js","inherits":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/inherits/inherits_browser.js","stream":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/stream-browserify/index.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/passthrough.js":[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_passthrough.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/readable.js":[function(require,module,exports){
(function (process){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = require('stream');
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
if (!process.browser && process.env.READABLE_STREAM === 'disable') {
  module.exports = require('stream');
}

}).call(this,require('_process'))
},{"./lib/_stream_duplex.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_duplex.js","./lib/_stream_passthrough.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_passthrough.js","./lib/_stream_readable.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_readable.js","./lib/_stream_transform.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_transform.js","./lib/_stream_writable.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_writable.js","_process":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/watchify/node_modules/process/browser.js","stream":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/stream-browserify/index.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/transform.js":[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_transform.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/writable.js":[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/lib/_stream_writable.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/stream-browserify/index.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/events/events.js","inherits":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/inherits/inherits_browser.js","readable-stream/duplex.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/duplex.js","readable-stream/passthrough.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/passthrough.js","readable-stream/readable.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/readable.js","readable-stream/transform.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/transform.js","readable-stream/writable.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/readable-stream/writable.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/string_decoder/index.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/buffer/index.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/util/support/isBufferBrowser.js":[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/util/util.js":[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/util/support/isBufferBrowser.js","_process":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/watchify/node_modules/process/browser.js","inherits":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/inherits/inherits_browser.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/watchify/node_modules/browserify/lib/_empty.js":[function(require,module,exports){
module.exports=require("/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/browser-resolve/empty.js")
},{"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/browser-resolve/empty.js":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/browser-resolve/empty.js"}],"/Users/fayelisifi/Documents/biojs-vis-bonestagram/node_modules/watchify/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],"biojs-vis-bonestagram":[function(require,module,exports){
/*
 * biojs-vis-bonestagram
 * https://github.com/fayeli/biojs-vis-bonestagram
 *
 * Copyright (c) 2016 fayelisifi
 * Licensed under the MIT license.
 */


/*
	Import the webpack bundled bonestagram code
*/
var visCore = require("./bonestagramVisCore");
/*
	Import the cornerstone library
*/
var cornerstone = require("./cornerstone");
var cornerstoneMath = require("./cornerstoneMath");
var cornerstoneTools = require("./cornerstoneTools");

/* 
	Import jpeg codec
*/
var OpenJPEG = require("./libopenjpeg");
var CharLS = require("./libCharLS");

/*
	Import cornerstone WADO Image Loader
*/
var cornerstoneWADOImageLoader = require("./cornerstoneWADOImageLoader");

/**
@class biojsvisbonestagram
 */

var  biojsvisbonestagram;
module.exports = biojsvisbonestagram = function(opts){
  //this.el = opts.el;
  console.log(biojsvisbonestagram.hello(opts.text));
};

/**
 * Global Variables
 */
var dicomDiv;
var dicomImg;
/**
 * Private Methods
 */
function showDICOM(imageId){
  console.log("show DICOM");
	var element = dicomDiv;
	cornerstone.loadImage(imageId).then(function(image){
	 var viewport = cornerstone.getDefaultViewportForImage(element, image);
	 cornerstone.displayImage(element, image, viewport);
   console.log('cornerstone display');
    saveDICOMImg();
    var canvas = dicomDiv.children[0];
     biojsvisbonestagram.enablePointsSelector(canvas);
	}, function(err) { alert(err);
});
}

function saveDICOMImg(){
  console.log("save DICOM img")
  var canvas = dicomDiv.children[0];
  var dataURL = canvas.toDataURL();
  dicomImg = document.createElement("img");;
  dicomImg.setAttribute('src', dataURL);
}

function setWidthHeight(element, width, height){
	element.setAttribute("width", width);
	element.setAttribute("height", height);
	return element;
}

function cumulativeOffset(element) {
  var top = 0, left = 0;
  do {
      top += element.offsetTop  || 0;
      left += element.offsetLeft || 0;
      element = element.offsetParent;
  } while(element);

  return {
      top: top,
      left: left
  };
};

// calculate whether the mouse click (x2, y2) is within the circle marker of the coordinate point (x1, y1)
function isHit(x1, y1, x2, y2, radius){
  var distance = (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1);
  return (distance < (radius+3) * (radius+3));
}

function drawCoordinates(ctx, coords, radius){
  console.log('draw coordinates');
  // first clear the canvas
  ctx.clearRect(0,0, ctx.canvas.width, ctx.canvas.height);
  // redraw image
  ctx.drawImage(dicomImg, 0, 0);
  ctx.fillStyle = "#4C66CC";
  ctx.strokeStyle = "#4C66CC";
  var currentX;
  var currentY;
  var prevX = coords[0][0];
  var prevY = coords[0][1];
  var mouthLeftCornerX = coords[44][0];
  var mouthLeftCornerY = coords[44][1];
  var mouthRightCornerX = coords[50][0];
  var mouthRightCornerY = coords[50][1];
  var nostrilLeftX = coords[36][0];
  var nostrilLeftY = coords[36][1];
  var nostrilMidX = coords[37][0];
  var nostrilMidY = coords[37][1];
  var nostrilRightX = coords[38][0];
  var nostrilRightY = coords[38][1];

  for (i = 0; i < coords.length; i++){
     currentX = coords[i][0];
     currentY = coords[i][1];

     // break apart those that shouln't be line segment
     if (i == 15 || i == 19 || (23 <= i &&  i <= 34) || i == 37 || i == 38 || i == 41 || i == 42 || i == 43 || i == 44 || i == 56 || i == 59 || i >= 62) {
        prevX = currentX;
        prevY = currentY;
     }

     
     // draw circle markers for the coodridnates 
     ctx.beginPath();
     ctx.arc(currentX, currentY, radius, 0, 2*Math.PI, false);
     ctx.closePath();
     ctx.fill();

     // draw line connecting the markers
     ctx.beginPath();
     ctx.moveTo(prevX, prevY);
     ctx.lineTo(currentX,currentY);
     ctx.closePath();
     ctx.stroke();

     // draw line segments of the nose
     if (i == 42) {
        ctx.beginPath();
        ctx.moveTo(currentX, currentY);
        ctx.lineTo(nostrilLeftX, nostrilLeftY);
        ctx.moveTo(currentX, currentY);
        ctx.lineTo(nostrilMidX, nostrilMidY);
        ctx.closePath();
        ctx.stroke();
     } else if ( i == 43){
        ctx.beginPath();
        ctx.moveTo(currentX, currentY);
        ctx.lineTo(nostrilMidX, nostrilMidY);
        ctx.moveTo(currentX, currentY);
        ctx.lineTo(nostrilRightX, nostrilRightY);
        ctx.closePath();
        ctx.stroke();
     }

     // draw line segments of the mouth
     if ( i == 55 || i == 56 || i == 61){
        ctx.beginPath();
        ctx.moveTo(currentX, currentY);
        ctx.lineTo(mouthLeftCornerX, mouthLeftCornerY);
        ctx.closePath();
        ctx.stroke();
     }
     if ( i == 58 || i == 59){
        ctx.beginPath();
        ctx.moveTo(currentX, currentY);
        ctx.lineTo(mouthRightCornerX, mouthRightCornerY);
        ctx.closePath();
        ctx.stroke();
     }

     prevX = currentX;
     prevY = currentY;
  }
  // draw nose bridge
  var noseBridgeTopX = coords[33][0];
  var noseBridgeTopY = coords[33][1];
  var noseBridgeMidX = coords[41][0];
  var noseBridgeMidY = coords[41][1];
  var noseBridgeBotX = coords[62][0];
  var noseBridgeBotY = coords[62][1];
  ctx.beginPath();
  ctx.moveTo(noseBridgeTopX, noseBridgeTopY);
  ctx.lineTo(noseBridgeMidX, noseBridgeMidY);
  ctx.moveTo(noseBridgeMidX, noseBridgeMidY);
  ctx.lineTo(noseBridgeBotX, noseBridgeBotY);
  ctx.closePath();
  ctx.stroke();
}

/*
 * Public Methods
 */

/**
 * Method responsible to say Hello
 *
 * @example
 *
 *     biojsvisbonestagram.hello('biojs');
 *
 * @method hello
 * @param {String} name - Name of a person
 * @return {String} Returns hello name
 */
biojsvisbonestagram.hello = function (name) {

  return 'hello ' + name;
};

/**
 * Method responsible to create a Bonestagram visualisation
 *
 * @example
 *
 *     biojsvisbonestagram.create();
 *
 * @method create
 */
biojsvisbonestagram.create = function(opts){
	if (typeof opts === 'undefined' || typeof opts.container === 'undefined'){
  		this.container = $(".bonestagram_container").get(0);
  	} else {
  		this.container = opts.container;
  	}
  	if (typeof opts === 'undefined' || typeof opts.width === 'undefined'){
  		this.width = 400;
  	} else {
  		this.width = opts.width;
  	}
  	if (typeof opts === 'undefined' || typeof opts.height === 'undefined'){
  		this.height = 300;
  	} else {
  		this.height = opts.height;
  	}

  	// create HTML elements needed
  	var vid = document.createElement("video");
  	vid.className = "bonestagram_video";
  	vid.setAttribute("preload", "auto");
  	vid = setWidthHeight(vid, this.width, this.height);
  	var canvas1 = document.createElement("canvas");
  	canvas1.className = "bonestagram_face_overlay";
  	canvas1 = setWidthHeight(canvas1, this.width, this.height);
  	var canvas2 = document.createElement("canvas");
  	canvas2.className = "bonestagram_gl";
  	canvas2 = setWidthHeight(canvas2, this.width, this.height);
  	var canvas3 = document.createElement("canvas");
  	canvas3.className = "bonestagram_hand_overlay";
  	canvas3 = setWidthHeight(canvas3, this.width, this.height);

  	// add the elements in the DOM under bonestagram container
  	this.container.appendChild(vid);
  	this.container.appendChild(canvas1);
  	this.container.appendChild(canvas2);
  	this.container.appendChild(canvas3);

    // check if bonestagram_img exists
    var img = document.getElementsByClassName("bonestagram_img")[0];
    if (typeof img === 'undefined'){
      img = document.createElement("img");
      img.className = "bonestagram_img hide";
      this.container.appendChild(img);
    }
  	visCore.init();
};
/**
 * Method to start the Bonestagram visualisation
 *
 * @example
 *
 *     biojsvisbonestagram.start();
 *
 * @method start
 */
biojsvisbonestagram.start = function() {
	visCore.startFace();
};

/**
 * Method to set a custom image for Bonestagram visualisation
 * @example
 *
 *     biojsvisbonestagram.setBonesImg({img: myBonesImg, coords: myBonesCoords});
 *
 * @method setBonesImg
 * @param {Object} img - An HTML <img> element containing the image, {Object} coords - An array of the orrespondence points coordinates from the image.
 */
biojsvisbonestagram.setBonesImg = function(opts) {
  visCore.setBonesImg(opts.img);
  visCore.setBonesCoords(opts.coords);
};

/**
 * Method to enable DICOM image preview on an HTML <div> element
 *
 * @example
 *
 *     biojsvisbonestagram.enableDICOMPreview(div);
 *
 * @method enableDICOMPreview
 */
biojsvisbonestagram.enableDICOMPreview = function(div) {
	console.log("enable DICOM preview");
  dicomDiv = div;
  cornerstone.enable(dicomDiv);
};

/**
 * Method to enable DICOM image upload. 
 * @example
 *
 *     biojsvisbonestagram.enableDICOMUpload(fileInput);
 *
 * @method enableDICOMUpload
 * @param {Object} fileInput - An HTML <input> element with type="file"
 */
biojsvisbonestagram.enableDICOMUpload = function (fileInput) {
	console.log("enable DICOM upload");
	fileInput.onchange = function(event){
		console.log("file input change")
		var file = event.target.files[0];
		var imageId = cornerstoneWADOImageLoader.fileManager.add(file);
		showDICOM(imageId);
	};
};

/**
 * Method to enable points selector 
 * @example
 *
 *     biojsvisbonestagram.enablePointsSelector(canvas);
 *
 * @method enablePointsSelector
 * @param {Object} canvas - An HTML <canvas> element
 */

biojsvisbonestagram.enablePointsSelector = function (canvas) {
  console.log('enable points selector');
  var ctx = canvas.getContext("2d");
  ctx.setTransform(1,0,0,1,0,0);
  var coords = [[121.92799191984679,184.19216240419755],[118.74113263254269,253.7017373484083],[128.07732840700828,314.0651648786312],[145.50341586402052,377.3404382903117],[175.0470179047746,428.3720278198884],[216.26268310246033,469.2344402538887],[267.42588166495466,502.128073946532],[323.6864139765614,512.5053811316307],[381.1889691089136,499.48530971536445],[429.71357990120225,463.4214900408549],[467.1292936657478,421.537754329594],[493.2308725208873,370.6466670145585],[507.3945907183312,305.3965374123],[514.1098885852615,238.51000761747102],[507.2009944162471,174.7364492942625],[465.59705810723074,136.75665747531139],[432.10874975324265,125],[384.15174446143584,125],[351.54488594535763,135.22963355336668],[162.16177451030518,144.72103952617107],[194.70376235949394,126],[241,130],[277.5198647210173,137.82992220884094],[192.5627380181407,182.35373455399292],[225.1658086004223,166.85817167285668],[262.9021389237093,184.72604899079232],[224.82421319031323,193.62679469584918],[224.9386274222809,179.73191446260716],[443.75218061508883,177.1556294105885],[407.36102478935464,162.1785032964798],[367.3426762945685,181.37362678808685],[405.2498567443763,188.75927101523848],[404.863153412407,173.65270066194788],[314, 170],[277.2539320006613,252.0592473714927],[258.790607031229,284.0832945003201],[276.64778558874696,304.54255347445314],[317.4772090972725,307.7859653833357],[364.4959193923387,299.6561959465791],[377.27275089177823,279.043842539653],[357.1140334647449,250.14961061471956],[324,222],[296.770695143374,295.6331974142146],[350.24114846328195,290.942330984987],[248.8532880314441,372.38004806995957],[272.1557077756945,356.35352520595814],[302.9902196911147,350.59821534914704],[323.11457426149127,353.0358352022737],[338.3055779254553,347.5427982113969],[366.49269601972713,353.1538257295358],[392.63652105652415,368.4911974180641],[375.0778975047938,391.4413420753004],[352.32935954043757,405.19247889714825],[320.19499419206926,411.930992226806],[288.9192573286629,407.35752671668797],[267.61253113280924,394.527019223827],[286.6817714614754,382.82667526139215],[320.16223074694074,385.86502934549657],[359.1212544588326,380.7487964985724],[361.7270998810554,365.15603335898066],[322.91210334135167,367.2901736762333],[280.7920218316411,368.2798825278876],[320.66814785515174,277.11007275979364],[206.36606604411398,171.6086547538323],[247.5375468161923,170.29657636660522],[246.36866333618227,191.67729410789994],[205.19888043799355,189.99033691329964],[429.0603263358775,166.1691180598579],[386.8504393293843,166.2774220754911],[384.7938981921405,186.5701136634426],[426.9983448269614,184.45786533091854]];
  var radius = 3;
  drawCoordinates(ctx, coords, radius);


  var dragging = false;
  var offset = cumulativeOffset(canvas);
  var dragHoldX;
  var dragHoldY;

  ctx.canvas.addEventListener('mousedown', function(e){
    console.log('clicky');
    // get mouse click position on canvas
    var mouseX = Math.round(e.pageX - offset.left);
    var mouseY = Math.round(e.pageY - offset.top);
    // determine which coordinate point was clicked
    for (i = 0; i < coords.length; i++){
      if (isHit(coords[i][0],coords[i][1],mouseX, mouseY, radius)){
        // console.log("Coordinate point " + i + " was clicked");
        // start dragging
        dragging = true;
        // keep track of which coordinate point is being dragged
        dragIndex = i;
        // keep track of the mouse holding position
        dragHoldX = mouseX - coords[i][0];
        dragHoldY = mouseY - coords[i][1];
      }
    }
  });

  ctx.canvas.addEventListener('mousemove', function(e){
    // get mouse click position on canvas
    var mouseX = Math.round(e.pageX - offset.left);
    var mouseY = Math.round(e.pageY - offset.top);
    // when dragging a coordinate point
    if (dragging){
      var coordX;
      var coordY;
      var minX = radius;
      var maxX = canvas.width - radius;
      var minY = radius;
      var maxY = canvas.height - radius;
      // clamp the x y coordinates within the canvas
      coordX = mouseX - dragHoldX;
      coordX = (coordX < minX) ? minX : ((coordX > maxX) ? maxX : coordX);
      coordY = mouseY - dragHoldY;
      coordY = (coordY < minY) ? minY : ((coordY > maxY) ? maxY : coordY);
      // update the coordinates array
      coords[dragIndex][0] = coordX;
      coords[dragIndex][1] = coordY;
      // redraw on canvas
      drawCoordinates(ctx, coords, radius);
    }
  });
  // stop dragging when mouse is up
  ctx.canvas.addEventListener('mouseup', function(e){
     if (dragging){
        dragging = false;
     }
  });
}




},{"./bonestagramVisCore":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/lib/bonestagramVisCore.js","./cornerstone":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/lib/cornerstone.js","./cornerstoneMath":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/lib/cornerstoneMath.js","./cornerstoneTools":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/lib/cornerstoneTools.js","./cornerstoneWADOImageLoader":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/lib/cornerstoneWADOImageLoader.js","./libCharLS":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/lib/libCharLS.js","./libopenjpeg":"/Users/fayelisifi/Documents/biojs-vis-bonestagram/lib/libopenjpeg.js"}]},{},[]);
